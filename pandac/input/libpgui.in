1145555038
2 2
7 libpgui 4 Vvim 5 panda 
217
226 12 PGFrameStyle 4 443 26 PGFrameStyle::PGFrameStyle 0 2 1 2 1133
// Filename: pgFrameStyle.I
// Created by:  drose (03Jul01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline PGFrameStyle::PGFrameStyle(void);

227 10 operator = 4 443 24 PGFrameStyle::operator = 0 1 3 238
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void PGFrameStyle::operator =(PGFrameStyle const &copy);

228 13 ~PGFrameStyle 4 443 27 PGFrameStyle::~PGFrameStyle 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
inline PGFrameStyle::~PGFrameStyle(void);

229 8 set_type 4 443 22 PGFrameStyle::set_type 0 1 4 251
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_type
//       Access: Published
//  Description: Sets the basic type of frame.
////////////////////////////////////////////////////////////////////
60
inline void PGFrameStyle::set_type(PGFrameStyle::Type type);

230 8 get_type 4 443 22 PGFrameStyle::get_type 0 1 5 254
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_type
//       Access: Published
//  Description: Returns the basic type of frame.
////////////////////////////////////////////////////////////////////
61
inline PGFrameStyle::Type PGFrameStyle::get_type(void) const;

231 9 set_color 4 443 23 PGFrameStyle::set_color 0 2 6 7 522
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Sets the dominant color of the frame.
////////////////////////////////////////////////////////////////////
72
inline void PGFrameStyle::set_color(float r, float g, float b, float a);

232 9 get_color 4 443 23 PGFrameStyle::get_color 0 1 8 263
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_color
//       Access: Published
//  Description: Returns the dominant color of the frame.
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f const &PGFrameStyle::get_color(void) const;

233 11 set_texture 4 443 25 PGFrameStyle::set_texture 0 1 9 298
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_texture
//       Access: Published
//  Description: Specifies a texture that should be applied to the
//               frame.
////////////////////////////////////////////////////////////////////
56
inline void PGFrameStyle::set_texture(Texture *texture);

234 11 has_texture 4 443 25 PGFrameStyle::has_texture 0 1 10 298
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to the
//               frame.
////////////////////////////////////////////////////////////////////
50
inline bool PGFrameStyle::has_texture(void) const;

235 11 get_texture 4 443 25 PGFrameStyle::get_texture 0 1 11 337
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_texture
//       Access: Published
//  Description: Returns the texture that has been applied to the
//               frame, or NULL if no texture has been applied.
////////////////////////////////////////////////////////////////////
54
inline Texture *PGFrameStyle::get_texture(void) const;

236 13 clear_texture 4 443 27 PGFrameStyle::clear_texture 0 1 12 262
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::clear_texture
//       Access: Published
//  Description: Removes the texture from the frame.
////////////////////////////////////////////////////////////////////
46
inline void PGFrameStyle::clear_texture(void);

237 9 set_width 4 443 23 PGFrameStyle::set_width 0 2 13 14 914
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_width
//       Access: Published
//  Description: Sets the width parameter, which has meaning only for
//               certain frame types.  For instance, this is the width
//               of the bevel for T_bevel_in or T_bevel_out.  The
//               units are in screen units.
////////////////////////////////////////////////////////////////////
54
inline void PGFrameStyle::set_width(float x, float y);

238 9 get_width 4 443 23 PGFrameStyle::get_width 0 1 15 458
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_width
//       Access: Published
//  Description: Returns the width parameter, which has meaning only
//               for certain frame types.  For instance, this is the
//               width of the bevel for T_bevel_in or T_bevel_out.
//               The units are in screen units.
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f const &PGFrameStyle::get_width(void) const;

239 17 set_visible_scale 4 443 31 PGFrameStyle::set_visible_scale 0 2 16 17 1042
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::set_visible_scale
//       Access: Published
//  Description: Sets a scale factor on the visible representation of
//               the frame, in the X and Y directions.  If this scale
//               factor is other than 1, it will affect the size of
//               the visible frame representation within the actual
//               frame border.
////////////////////////////////////////////////////////////////////
62
inline void PGFrameStyle::set_visible_scale(float x, float y);

240 17 get_visible_scale 4 443 31 PGFrameStyle::get_visible_scale 0 1 18 525
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_visible_scale
//       Access: Published
//  Description: Returns the scale factor on the visible
//               representation of the frame, in the X and Y
//               directions.  If this scale factor is other than 1, it
//               will affect the size of the visible frame
//               representation within the actual frame border.
////////////////////////////////////////////////////////////////////
69
inline LVecBase2f const &PGFrameStyle::get_visible_scale(void) const;

241 18 get_internal_frame 4 443 32 PGFrameStyle::get_internal_frame 0 1 19 487
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::get_internal_frame
//       Access: Published
//  Description: Computes the size of the internal frame, given the
//               indicated external frame, appropriate for this kind
//               of frame style.  This simply subtracts the border
//               width for those frame styles that include a border.
////////////////////////////////////////////////////////////////////
75
LVecBase4f PGFrameStyle::get_internal_frame(LVecBase4f const &frame) const;

242 6 output 4 443 20 PGFrameStyle::output 0 1 20 220
////////////////////////////////////////////////////////////////////
//     Function: PGFrameStyle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void PGFrameStyle::output(ostream &out) const;

243 6 PGItem 4 445 14 PGItem::PGItem 0 1 21 442
////////////////////////////////////////////////////////////////////
//     Function: PGItem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGItem::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
49
PGItem::PGItem(basic_string< char > const &name);

244 9 set_frame 4 445 17 PGItem::set_frame 0 2 22 23 1076
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the item, in local
//               coordinates.  This is the region on screen within
//               which the mouse will be considered to be within the
//               item.  Normally, it should correspond to the bounding
//               rectangle of the visible geometry of the item.
////////////////////////////////////////////////////////////////////
80
inline void PGItem::set_frame(float left, float right, float bottom, float top);

245 9 get_frame 4 445 17 PGItem::get_frame 0 1 24 371
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the item.  See
//               set_frame().  It is an error to call this if
//               has_frame() returns false.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f const &PGItem::get_frame(void) const;

246 9 has_frame 4 445 17 PGItem::has_frame 0 1 25 301
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_frame
//       Access: Published
//  Description: Returns true if the item has a bounding rectangle;
//               see set_frame().
////////////////////////////////////////////////////////////////////
42
inline bool PGItem::has_frame(void) const;

247 11 clear_frame 4 445 19 PGItem::clear_frame 0 1 26 385
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_frame
//       Access: Published
//  Description: Removes the bounding rectangle from the item.  It
//               will no longer be possible to position the mouse
//               within the item; see set_frame().
////////////////////////////////////////////////////////////////////
38
inline void PGItem::clear_frame(void);

248 9 set_state 4 445 17 PGItem::set_state 0 1 27 428
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_state
//       Access: Published
//  Description: Sets the "state" of this particular PGItem.  
//
//               The PGItem node will render as if it were the
//               subgraph assigned to the corresponding index via
//               set_state_def().
////////////////////////////////////////////////////////////////////
41
inline void PGItem::set_state(int state);

249 9 get_state 4 445 17 PGItem::get_state 0 1 28 298
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state
//       Access: Published
//  Description: Returns the "state" of this particular PGItem.  See
//               set_state().
////////////////////////////////////////////////////////////////////
41
inline int PGItem::get_state(void) const;

250 10 set_active 4 445 18 PGItem::set_active 0 1 29 519
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
////////////////////////////////////////////////////////////////////
45
virtual void PGItem::set_active(bool active);

251 10 get_active 4 445 18 PGItem::get_active 0 1 30 318
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_active
//       Access: Published
//  Description: Returns whether the PGItem is currently active for
//               mouse events.  See set_active().
////////////////////////////////////////////////////////////////////
43
inline bool PGItem::get_active(void) const;

252 9 set_focus 4 445 17 PGItem::set_focus 0 1 31 717
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_focus
//       Access: Published, Virtual
//  Description: Sets whether the PGItem currently has keyboard focus.
//               This simply means that the item may respond to
//               keyboard events as well as to mouse events; precisely
//               what this means is up to the individual item.  
//
//               Only one PGItem in the world is allowed to have focus
//               at any given time.  Setting the focus on any other
//               item automatically disables the focus from the
//               previous item.
////////////////////////////////////////////////////////////////////
43
virtual void PGItem::set_focus(bool focus);

253 9 get_focus 4 445 17 PGItem::get_focus 0 1 32 319
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus
//       Access: Published
//  Description: Returns whether the PGItem currently has focus for
//               keyboard events.  See set_focus().
////////////////////////////////////////////////////////////////////
42
inline bool PGItem::get_focus(void) const;

254 20 set_background_focus 4 445 28 PGItem::set_background_focus 0 1 33 554
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_background_focus
//       Access: Published
//  Description: Sets the background_focus flag for this item.  When
//               background_focus is enabled, the item will receive
//               keypress events even if it is not in focus; in fact,
//               even if it is not onscreen.  Unlike normal focus,
//               many items may have background_focus simultaneously.
////////////////////////////////////////////////////////////////////
46
void PGItem::set_background_focus(bool focus);

255 20 get_background_focus 4 445 28 PGItem::get_background_focus 0 1 34 328
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_background_focus
//       Access: Published
//  Description: Returns whether background_focus is currently
//               enabled.  See set_background_focus().
////////////////////////////////////////////////////////////////////
53
inline bool PGItem::get_background_focus(void) const;

256 18 set_suppress_flags 4 445 26 PGItem::set_suppress_flags 0 1 35 396
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_suppress_flags
//       Access: Published
//  Description: This is just an interface to set the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::set_suppress_flags().
////////////////////////////////////////////////////////////////////
59
inline void PGItem::set_suppress_flags(int suppress_flags);

257 18 get_suppress_flags 4 445 26 PGItem::get_suppress_flags 0 1 36 396
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_suppress_flags
//       Access: Published
//  Description: This is just an interface to get the suppress flags
//               on the underlying MouseWatcherRegion.  See
//               MouseWatcherRegion::get_suppress_flags().
////////////////////////////////////////////////////////////////////
50
inline int PGItem::get_suppress_flags(void) const;

258 18 get_num_state_defs 4 445 26 PGItem::get_num_state_defs 0 1 37 619
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_num_state_defs
//       Access: Published
//  Description: Returns one more than the highest-numbered state def
//               that was ever assigned to the PGItem.  The complete
//               set of state defs assigned may then be retrieved by
//               indexing from 0 to (get_num_state_defs() - 1).
//
//               This is only an upper limit on the actual number of
//               state defs, since there may be holes in the list.
////////////////////////////////////////////////////////////////////
43
int PGItem::get_num_state_defs(void) const;

259 15 clear_state_def 4 445 23 PGItem::clear_state_def 0 1 38 381
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_state_def
//       Access: Published
//  Description: Resets the NodePath assigned to the indicated state
//               to its initial default, with only a frame
//               representation if appropriate.
////////////////////////////////////////////////////////////////////
40
void PGItem::clear_state_def(int state);

260 13 has_state_def 4 445 21 PGItem::has_state_def 0 1 39 404
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_state_def
//       Access: Published
//  Description: Returns true if get_state_def() has ever been called
//               for the indicated state (thus defining a render
//               subgraph for this state index), false otherwise.
////////////////////////////////////////////////////////////////////
44
bool PGItem::has_state_def(int state) const;

261 13 get_state_def 4 445 21 PGItem::get_state_def 0 1 40 468
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_state_def
//       Access: Published
//  Description: Returns the Node that is the root of the subgraph
//               that will be drawn when the PGItem is in the
//               indicated state.  The first time this is called for a
//               particular state index, it may create the Node.
////////////////////////////////////////////////////////////////////
43
NodePath &PGItem::get_state_def(int state);

262 21 instance_to_state_def 4 445 29 PGItem::instance_to_state_def 0 1 41 340
////////////////////////////////////////////////////////////////////
//     Function: PGItem::instance_to_state_def
//       Access: Published
//  Description: Parents an instance of the bottom node of the
//               indicated NodePath to the indicated state index.
////////////////////////////////////////////////////////////////////
72
NodePath PGItem::instance_to_state_def(int state, NodePath const &path);

263 15 get_frame_style 4 445 23 PGItem::get_frame_style 0 1 42 335
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_style
//       Access: Published
//  Description: Returns the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
////////////////////////////////////////////////////////////////////
48
PGFrameStyle PGItem::get_frame_style(int state);

264 15 set_frame_style 4 445 23 PGItem::set_frame_style 0 1 43 335
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_frame_style
//       Access: Published
//  Description: Changes the kind of frame that will be drawn behind
//               the item when it is in the indicated state.
////////////////////////////////////////////////////////////////////
67
void PGItem::set_frame_style(int state, PGFrameStyle const &style);

265 6 get_id 4 445 14 PGItem::get_id 0 1 44 426
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_id
//       Access: Published
//  Description: Returns the unique ID assigned to this PGItem.  This
//               will be assigned to the region created with the
//               MouseWatcher, and will thus be used to generate event
//               names.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > const &PGItem::get_id(void) const;

266 6 set_id 4 445 14 PGItem::set_id 0 1 45 654
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_id
//       Access: Published
//  Description: Set the unique ID assigned to this PGItem.  It is the
//               user's responsibility to ensure that this ID is
//               unique.
//
//               Normally, this should not need to be called, as the
//               PGItem will assign itself an ID when it is created,
//               but this function allows the user to decide to
//               redefine the ID to be something possibly more
//               meaningful.
////////////////////////////////////////////////////////////////////
59
inline void PGItem::set_id(basic_string< char > const &id);

267 16 get_enter_prefix 4 445 24 PGItem::get_enter_prefix 0 1 46 415
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the enter
//               event for all PGItems.  The enter event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
66
static inline basic_string< char > PGItem::get_enter_prefix(void);

268 15 get_exit_prefix 4 445 23 PGItem::get_exit_prefix 0 1 47 412
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the exit
//               event for all PGItems.  The exit event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
65
static inline basic_string< char > PGItem::get_exit_prefix(void);

269 17 get_within_prefix 4 445 25 PGItem::get_within_prefix 0 1 48 418
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the within
//               event for all PGItems.  The within event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
67
static inline basic_string< char > PGItem::get_within_prefix(void);

270 18 get_without_prefix 4 445 26 PGItem::get_without_prefix 0 1 49 421
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the without
//               event for all PGItems.  The without event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
68
static inline basic_string< char > PGItem::get_without_prefix(void);

271 19 get_focus_in_prefix 4 445 27 PGItem::get_focus_in_prefix 0 1 50 527
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_in
//               event for all PGItems.  The focus_in event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
////////////////////////////////////////////////////////////////////
69
static inline basic_string< char > PGItem::get_focus_in_prefix(void);

272 20 get_focus_out_prefix 4 445 28 PGItem::get_focus_out_prefix 0 1 51 530
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the focus_out
//               event for all PGItems.  The focus_out event is the
//               concatenation of this string followed by get_id().
//
//               Unlike most item events, this event is thrown with no
//               parameters.
////////////////////////////////////////////////////////////////////
70
static inline basic_string< char > PGItem::get_focus_out_prefix(void);

273 16 get_press_prefix 4 445 24 PGItem::get_press_prefix 0 1 52 472
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the press
//               event for all PGItems.  The press event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
////////////////////////////////////////////////////////////////////
66
static inline basic_string< char > PGItem::get_press_prefix(void);

274 18 get_release_prefix 4 445 26 PGItem::get_release_prefix 0 1 53 478
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the release
//               event for all PGItems.  The release event is the
//               concatenation of this string followed by a button
//               name, followed by a hyphen and get_id().
////////////////////////////////////////////////////////////////////
68
static inline basic_string< char > PGItem::get_release_prefix(void);

275 20 get_keystroke_prefix 4 445 28 PGItem::get_keystroke_prefix 0 1 54 457
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the
//               keystroke event for all PGItems.  The keystroke event
//               is the concatenation of this string followed by a
//               hyphen and get_id().
////////////////////////////////////////////////////////////////////
70
static inline basic_string< char > PGItem::get_keystroke_prefix(void);

276 15 get_enter_event 4 445 23 PGItem::get_enter_event 0 1 55 382
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_enter_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse enters its frame, but
//               not any nested frames.
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > PGItem::get_enter_event(void) const;

277 14 get_exit_event 4 445 22 PGItem::get_exit_event 0 1 56 379
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_exit_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse exits its frame, or
//               enters a nested frame.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > PGItem::get_exit_event(void) const;

278 16 get_within_event 4 445 24 PGItem::get_within_event 0 1 57 545
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_within_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves within the
//               boundaries of the frame.  This is different from the
//               enter_event in that the mouse is considered within
//               the frame even if it is also within a nested frame.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > PGItem::get_within_event(void) const;

279 17 get_without_event 4 445 25 PGItem::get_without_event 0 1 58 574
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_without_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the mouse moves completely outside
//               the boundaries of the frame.  This is different from
//               the exit_event in that the mouse is considered
//               within the frame even if it is also within a nested
//               frame.
////////////////////////////////////////////////////////////////////
66
inline basic_string< char > PGItem::get_without_event(void) const;

280 18 get_focus_in_event 4 445 26 PGItem::get_focus_in_event 0 1 59 324
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_in_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item gets the keyboard focus.
////////////////////////////////////////////////////////////////////
67
inline basic_string< char > PGItem::get_focus_in_event(void) const;

281 19 get_focus_out_event 4 445 27 PGItem::get_focus_out_event 0 1 60 326
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_out_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item loses the keyboard focus.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > PGItem::get_focus_out_event(void) const;

282 15 get_press_event 4 445 23 PGItem::get_press_event 0 1 61 433
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_press_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button is depressed while the mouse is within the
//               frame.
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > PGItem::get_press_event(ButtonHandle const &button) const;

283 17 get_release_event 4 445 25 PGItem::get_release_event 0 1 62 442
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_release_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and the indicated mouse or keyboard
//               button, formerly clicked down is within the frame, is
//               released.
////////////////////////////////////////////////////////////////////
88
inline basic_string< char > PGItem::get_release_event(ButtonHandle const &button) const;

284 19 get_keystroke_event 4 445 27 PGItem::get_keystroke_event 0 1 63 346
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_keystroke_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               item is active and any key is pressed by the user.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > PGItem::get_keystroke_event(void) const;

285 19 get_frame_inv_xform 4 445 27 PGItem::get_frame_inv_xform 0 1 64 284
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_frame_inv_xform
//       Access: Published, Static
//  Description: Returns the inverse of the frame transform matrix
////////////////////////////////////////////////////////////////////
57
inline LMatrix4f PGItem::get_frame_inv_xform(void) const;

286 9 set_sound 4 445 17 PGItem::set_sound 0 1 65 305
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_sound
//       Access: Published
//  Description: Sets the sound that will be played whenever the
//               indicated event occurs.
////////////////////////////////////////////////////////////////////
77
void PGItem::set_sound(basic_string< char > const &event, AudioSound *sound);

287 11 clear_sound 4 445 19 PGItem::clear_sound 0 1 66 290
////////////////////////////////////////////////////////////////////
//     Function: PGItem::clear_sound
//       Access: Published
//  Description: Removes the sound associated with the indicated
//               event.
////////////////////////////////////////////////////////////////////
60
void PGItem::clear_sound(basic_string< char > const &event);

288 9 get_sound 4 445 17 PGItem::get_sound 0 1 67 329
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_sound
//       Access: Published
//  Description: Returns the sound associated with the indicated
//               event, or NULL if there is no associated sound.
////////////////////////////////////////////////////////////////////
71
AudioSound *PGItem::get_sound(basic_string< char > const &event) const;

289 9 has_sound 4 445 17 PGItem::has_sound 0 1 68 323
////////////////////////////////////////////////////////////////////
//     Function: PGItem::has_sound
//       Access: Published
//  Description: Returns true if there is a sound associated with the
//               indicated event, or false otherwise.
////////////////////////////////////////////////////////////////////
64
bool PGItem::has_sound(basic_string< char > const &event) const;

290 13 get_text_node 4 445 21 PGItem::get_text_node 0 1 69 427
// HAVE_AUDIO
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_text_node
//       Access: Published, Static
//  Description: Returns the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
////////////////////////////////////////////////////////////////////
45
static TextNode *PGItem::get_text_node(void);

291 13 set_text_node 4 445 21 PGItem::set_text_node 0 1 70 413
////////////////////////////////////////////////////////////////////
//     Function: PGItem::set_text_node
//       Access: Published, Static
//  Description: Changes the TextNode object that will be used by all
//               PGItems to generate default labels given a string.
//               This can be loaded with the default font, etc.
////////////////////////////////////////////////////////////////////
57
static inline void PGItem::set_text_node(TextNode *node);

292 14 get_focus_item 4 445 22 PGItem::get_focus_item 0 1 71 486
////////////////////////////////////////////////////////////////////
//     Function: PGItem::get_focus_item
//       Access: Published, Static
//  Description: Returns the one PGItem in the world that currently
//               has keyboard focus, if any, or NULL if no item has
//               keyboard focus.  Use PGItem::set_focus() to activate
//               or deactivate keyboard focus on a particular item.
////////////////////////////////////////////////////////////////////
51
static inline PGItem *PGItem::get_focus_item(void);

293 14 get_class_type 4 445 22 PGItem::get_class_type 0 1 72 0
47
static TypeHandle PGItem::get_class_type(void);

294 8 PGButton 4 447 18 PGButton::PGButton 0 1 73 446
////////////////////////////////////////////////////////////////////
//     Function: PGButton::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
53
PGButton::PGButton(basic_string< char > const &name);

295 5 setup 4 447 15 PGButton::setup 0 6 74 75 76 77 78 79 1741
////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button as a default text button using the
//               indicated label string.  The TextNode defined by
//               PGItem::get_text_node() will be used to create the
//               label geometry.  This automatically sets up the frame
//               according to the size of the text.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGButton::setup
//       Access: Published
//  Description: Sets up the button using the indicated NodePath as
//               arbitrary geometry.
////////////////////////////////////////////////////////////////////
77
void PGButton::setup(basic_string< char > const &label, float bevel = (0.1));

296 16 add_click_button 4 447 26 PGButton::add_click_button 0 1 80 484
////////////////////////////////////////////////////////////////////
//     Function: PGButton::add_click_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               can effectively "click" the PGButton.  Normally, this
//               is just MouseButton::one().  Returns true if the
//               button was added, or false if it was already there.
////////////////////////////////////////////////////////////////////
60
bool PGButton::add_click_button(ButtonHandle const &button);

297 19 remove_click_button 4 447 29 PGButton::remove_click_button 0 1 81 512
////////////////////////////////////////////////////////////////////
//     Function: PGButton::remove_click_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that can effectively "click" the PGButton.  Normally,
//               this is just MouseButton::one().  Returns true if the
//               button was removed, or false if it was not in the
//               set.
////////////////////////////////////////////////////////////////////
63
bool PGButton::remove_click_button(ButtonHandle const &button);

298 16 has_click_button 4 447 26 PGButton::has_click_button 0 1 82 407
////////////////////////////////////////////////////////////////////
//     Function: PGButton::has_click_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that can effectively "click" the PGButton.
//               Normally, this is just MouseButton::one().
////////////////////////////////////////////////////////////////////
60
bool PGButton::has_click_button(ButtonHandle const &button);

299 14 is_button_down 4 447 24 PGButton::is_button_down 0 1 83 340
////////////////////////////////////////////////////////////////////
//     Function: PGButton::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding the
//               mouse button down on the button, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool PGButton::is_button_down(void);

300 16 get_click_prefix 4 447 26 PGButton::get_click_prefix 0 1 84 419
////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the click
//               event for all PGButtons.  The click event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
68
static inline basic_string< char > PGButton::get_click_prefix(void);

301 15 get_click_event 4 447 25 PGButton::get_click_event 0 1 85 321
////////////////////////////////////////////////////////////////////
//     Function: PGButton::get_click_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               button is clicked normally.
////////////////////////////////////////////////////////////////////
88
inline basic_string< char > PGButton::get_click_event(ButtonHandle const &button) const;

302 14 get_class_type 4 447 24 PGButton::get_class_type 0 1 86 0
49
static TypeHandle PGButton::get_class_type(void);

303 5 PGTop 4 449 12 PGTop::PGTop 0 1 87 1109
// Filename: pgTop.I
// Created by:  drose (13Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGTop::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGTop::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
PGTop::PGTop(basic_string< char > const &name);

304 17 set_mouse_watcher 4 449 24 PGTop::set_mouse_watcher 0 1 88 388
////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_mouse_watcher
//       Access: Published
//  Description: Sets the MouseWatcher pointer that the PGTop object
//               registers its PG items with.  This must be set before
//               the PG items are active.
////////////////////////////////////////////////////////////////////
53
void PGTop::set_mouse_watcher(MouseWatcher *watcher);

305 17 get_mouse_watcher 4 449 24 PGTop::get_mouse_watcher 0 1 89 391
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_mouse_watcher
//       Access: Published
//  Description: Returns the MouseWatcher pointer that the PGTop object
//               registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
////////////////////////////////////////////////////////////////////
58
inline MouseWatcher *PGTop::get_mouse_watcher(void) const;

306 9 get_group 4 449 16 PGTop::get_group 0 1 90 388
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_group
//       Access: Published
//  Description: Returns the MouseWatcherGroup pointer that the PGTop
//               object registers its PG items with, or NULL if the
//               MouseWatcher has not yet been set.
////////////////////////////////////////////////////////////////////
55
inline MouseWatcherGroup *PGTop::get_group(void) const;

307 14 set_start_sort 4 449 21 PGTop::set_start_sort 0 1 91 1044
////////////////////////////////////////////////////////////////////
//     Function: PGTop::set_start_sort
//       Access: Published
//  Description: Specifies the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  Subsequent PGItems will be
//               assigned consecutively higher sort indexes.
//
//               This number is used by the MouseWatcher system to
//               rank the clickable mouse regions in the same order in
//               which the items are rendered, so that items on top
//               will receive mouse priority.
//
//               Normally, it makes the most sense to leave this
//               initial value at its default value of 0, unless you
//               need the PGItems to have a particular sort value with
//               respect to some other objects in the scene
//               (particularly with a second PGTop node).
////////////////////////////////////////////////////////////////////
50
inline void PGTop::set_start_sort(int start_sort);

308 14 get_start_sort 4 449 21 PGTop::get_start_sort 0 1 92 395
////////////////////////////////////////////////////////////////////
//     Function: PGTop::get_start_sort
//       Access: Published
//  Description: Returns the sort index that is assigned during the
//               traversal to the first PGItem that is discovered
//               during traversal.  See set_start_sort().
////////////////////////////////////////////////////////////////////
45
inline int PGTop::get_start_sort(void) const;

309 14 get_class_type 4 449 21 PGTop::get_class_type 0 1 93 0
46
static TypeHandle PGTop::get_class_type(void);

310 7 PGEntry 4 450 16 PGEntry::PGEntry 0 1 94 447
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGEntry::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
51
PGEntry::PGEntry(basic_string< char > const &name);

311 5 setup 4 450 14 PGEntry::setup 0 1 95 538
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::setup
//       Access: Published
//  Description: Sets up the entry for normal use.  The width is the
//               maximum width of characters that will be typed, and
//               num_lines is the integer number of lines of text of
//               the entry.  Both of these together determine the size
//               of the entry, based on the TextNode in effect.
////////////////////////////////////////////////////////////////////
48
void PGEntry::setup(float width, int num_lines);

312 8 set_text 4 450 17 PGEntry::set_text 0 1 96 1133
// Filename: pgEntry.I
// Created by:  drose (13Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling set_text().
////////////////////////////////////////////////////////////////////
64
inline void PGEntry::set_text(basic_string< char > const &text);

313 8 get_text 4 450 17 PGEntry::get_text 0 1 97 462
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.  This uses the Unicode encoding currently
//               specified for the "focus" TextNode; therefore, the
//               TextNode must exist before calling get_text().
////////////////////////////////////////////////////////////////////
58
inline basic_string< char > PGEntry::get_text(void) const;

314 19 set_cursor_position 4 450 28 PGEntry::set_cursor_position 0 1 98 469
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_position
//       Access: Published
//  Description: Sets the current position of the cursor.  This is the
//               position within the text at which the next letter
//               typed by the user will be inserted; normally it is
//               the same as the length of the text.
////////////////////////////////////////////////////////////////////
55
inline void PGEntry::set_cursor_position(int position);

315 19 get_cursor_position 4 450 28 PGEntry::get_cursor_position 0 1 99 271
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_position
//       Access: Published
//  Description: Returns the current position of the cursor.
////////////////////////////////////////////////////////////////////
52
inline int PGEntry::get_cursor_position(void) const;

316 13 set_max_chars 4 450 22 PGEntry::set_max_chars 0 1 100 507
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_chars
//       Access: Published
//  Description: Sets the maximum number of characters that may be
//               typed into the entry.  This is a limit on the number
//               of characters, as opposed to the width of the entry;
//               see also set_max_width().
//
//               If this is 0, there is no limit.
////////////////////////////////////////////////////////////////////
50
inline void PGEntry::set_max_chars(int max_chars);

317 13 get_max_chars 4 450 22 PGEntry::get_max_chars 0 1 101 387
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_chars
//       Access: Published
//  Description: Returns the current maximum number of characters that
//               may be typed into the entry, or 0 if there is no
//               limit.  See set_max_chars().
////////////////////////////////////////////////////////////////////
46
inline int PGEntry::get_max_chars(void) const;

318 13 set_max_width 4 450 22 PGEntry::set_max_width 0 1 102 790
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_max_width
//       Access: Published
//  Description: Sets the maximum width of all characters that may be
//               typed into the entry.  This is a limit on the width
//               of the formatted text, not a fixed limit on the
//               number of characters; also set_max_chars().
//
//               If this is 0, there is no limit.
//
//               If _num_lines is more than 1, rather than being a
//               fixed width on the whole entry, this becomes instead
//               the wordwrap width (and the width limit on the entry
//               is essentially _max_width * _num_lines).
////////////////////////////////////////////////////////////////////
52
inline void PGEntry::set_max_width(float max_width);

319 13 get_max_width 4 450 22 PGEntry::get_max_width 0 1 103 390
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_max_width
//       Access: Published
//  Description: Returns the current maximum width of the characters
//               that may be typed into the entry, or 0 if there is no
//               limit.  See set_max_width().
////////////////////////////////////////////////////////////////////
48
inline float PGEntry::get_max_width(void) const;

320 13 set_num_lines 4 450 22 PGEntry::set_num_lines 0 1 104 411
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_num_lines
//       Access: Published
//  Description: Sets the number of lines of text the PGEntry will
//               use.  This only has meaning if _max_width is not 0;
//               _max_width indicates the wordwrap width of each line.
////////////////////////////////////////////////////////////////////
50
inline void PGEntry::set_num_lines(int num_lines);

321 13 get_num_lines 4 450 22 PGEntry::get_num_lines 0 1 105 342
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_num_lines
//       Access: Published
//  Description: Returns the number of lines of text the PGEntry will
//               use, if _max_width is not 0.  See set_num_lines().
////////////////////////////////////////////////////////////////////
46
inline int PGEntry::get_num_lines(void) const;

322 14 set_blink_rate 4 450 23 PGEntry::set_blink_rate 0 1 106 431
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_blink_rate
//       Access: Published
//  Description: Sets the number of times per second the cursor will
//               blink while the entry has keyboard focus.
//
//               If this is 0, the cursor does not blink, but is held
//               steady.
////////////////////////////////////////////////////////////////////
54
inline void PGEntry::set_blink_rate(float blink_rate);

323 14 get_blink_rate 4 450 23 PGEntry::get_blink_rate 0 1 107 337
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_blink_rate
//       Access: Published
//  Description: Returns the number of times per second the cursor
//               will blink, or 0 if the cursor is not to blink.
////////////////////////////////////////////////////////////////////
49
inline float PGEntry::get_blink_rate(void) const;

324 14 get_cursor_def 4 450 23 PGEntry::get_cursor_def 0 1 108 375
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_def
//       Access: Published
//  Description: Returns the Node that will be rendered to represent
//               the cursor.  You can attach suitable cursor geometry
//               to this node.
////////////////////////////////////////////////////////////////////
53
inline NodePath const &PGEntry::get_cursor_def(void);

325 16 clear_cursor_def 4 450 25 PGEntry::clear_cursor_def 0 1 109 336
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::clear_cursor_def
//       Access: Published
//  Description: Removes all the children from the cursor_def node, in
//               preparation for adding a new definition.
////////////////////////////////////////////////////////////////////
44
inline void PGEntry::clear_cursor_def(void);

326 22 set_cursor_keys_active 4 450 31 PGEntry::set_cursor_keys_active 0 1 110 394
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_cursor_keys_active
//       Access: Published
//  Description: Sets whether the arrow keys (and home/end) control
//               movement of the cursor.  If true, they are active; if
//               false, they are ignored.
////////////////////////////////////////////////////////////////////
55
inline void PGEntry::set_cursor_keys_active(bool flag);

327 22 get_cursor_keys_active 4 450 31 PGEntry::get_cursor_keys_active 0 1 111 378
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_cursor_keys_active
//       Access: Published
//  Description: Returns whether the arrow keys are currently set to
//               control movement of the cursor; see
//               set_cursor_keys_active().
////////////////////////////////////////////////////////////////////
56
inline bool PGEntry::get_cursor_keys_active(void) const;

328 16 set_obscure_mode 4 450 25 PGEntry::set_obscure_mode 0 1 112 759
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode should be enabled.  In
//               obscure mode, a string of asterisks is displayed
//               instead of the literal text, e.g. for entering
//               passwords.
//
//               In obscure mode, the width of the text is computed
//               based on the width of the string of asterisks, not on
//               the width of the actual text.  This has implications
//               on the maximum length of text that may be entered if
//               max_width is in effect.
////////////////////////////////////////////////////////////////////
49
inline void PGEntry::set_obscure_mode(bool flag);

329 16 get_obscure_mode 4 450 25 PGEntry::get_obscure_mode 0 1 113 309
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_obscure_mode
//       Access: Published
//  Description: Specifies whether obscure mode is enabled.  See
//               set_obscure_mode().
////////////////////////////////////////////////////////////////////
50
inline bool PGEntry::get_obscure_mode(void) const;

330 20 set_candidate_active 4 450 29 PGEntry::set_candidate_active 0 1 114 984
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_active
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               can actively scroll through.
////////////////////////////////////////////////////////////////////
88
inline void PGEntry::set_candidate_active(basic_string< char > const &candidate_active);

331 20 get_candidate_active 4 450 29 PGEntry::get_candidate_active 0 1 115 256
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_active
//       Access: Published
//  Description: See set_candidate_active().
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &PGEntry::get_candidate_active(void) const;

332 22 set_candidate_inactive 4 450 31 PGEntry::set_candidate_inactive 0 1 116 992
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_candidate_inactive
//       Access: Published
//  Description: Specifies the name of the TextProperties structure
//               added to the TextPropertiesManager that will be used
//               to render candidate strings from the IME, used for
//               typing characters in east Asian languages.  Each
//               candidate string represents one possible way to
//               interpret the sequence of keys the user has just
//               entered; it should not be considered typed yet, but
//               it is important for the user to be able to see what
//               he is considering entering.
//
//               This particular method sets the properties for the
//               subset of the current candidate string that the user
//               is not actively scrolling through.
////////////////////////////////////////////////////////////////////
92
inline void PGEntry::set_candidate_inactive(basic_string< char > const &candidate_inactive);

333 22 get_candidate_inactive 4 450 31 PGEntry::get_candidate_inactive 0 1 117 260
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_candidate_inactive
//       Access: Published
//  Description: See set_candidate_inactive().
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &PGEntry::get_candidate_inactive(void) const;

334 12 set_text_def 4 450 21 PGEntry::set_text_def 0 1 118 500
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_text_def
//       Access: Published
//  Description: Changes the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  The default if nothing is specified
//               is the same TextNode returned by
//               PGItem::get_text_node().
////////////////////////////////////////////////////////////////////
54
void PGEntry::set_text_def(int state, TextNode *node);

335 12 get_text_def 4 450 21 PGEntry::get_text_def 0 1 119 392
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_text_def
//       Access: Published
//  Description: Returns the TextNode that will be used to render the
//               text within the entry when the entry is in the
//               indicated state.  See set_text_def().
////////////////////////////////////////////////////////////////////
49
TextNode *PGEntry::get_text_def(int state) const;

336 17 get_accept_prefix 4 450 26 PGEntry::get_accept_prefix 0 1 120 421
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the accept
//               event for all PGEntries.  The accept event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
68
static inline basic_string< char > PGEntry::get_accept_prefix(void);

337 19 get_overflow_prefix 4 450 28 PGEntry::get_overflow_prefix 0 1 121 427
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the overflow
//               event for all PGEntries.  The overflow event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
70
static inline basic_string< char > PGEntry::get_overflow_prefix(void);

338 15 get_type_prefix 4 450 24 PGEntry::get_type_prefix 0 1 122 415
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the type
//               event for all PGEntries.  The type event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
66
static inline basic_string< char > PGEntry::get_type_prefix(void);

339 16 get_erase_prefix 4 450 25 PGEntry::get_erase_prefix 0 1 123 418
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the erase
//               event for all PGEntries.  The erase event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
67
static inline basic_string< char > PGEntry::get_erase_prefix(void);

340 16 get_accept_event 4 450 25 PGEntry::get_accept_event 0 1 124 321
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_accept_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               entry is accepted normally.
////////////////////////////////////////////////////////////////////
88
inline basic_string< char > PGEntry::get_accept_event(ButtonHandle const &button) const;

341 18 get_overflow_event 4 450 27 PGEntry::get_overflow_event 0 1 125 459
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_overflow_event
//       Access: Published
//  Description: Returns the event name that will be thrown when too
//               much text is attempted to be entered into the
//               PGEntry, exceeding either the limit set via
//               set_max_chars() or via set_max_width().
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > PGEntry::get_overflow_event(void) const;

342 14 get_type_event 4 450 23 PGEntry::get_type_event 0 1 126 328
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_type_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user extends the text by typing.
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > PGEntry::get_type_event(void) const;

343 15 get_erase_event 4 450 24 PGEntry::get_erase_event 0 1 127 332
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_erase_event
//       Access: Published
//  Description: Returns the event name that will be thrown whenever
//               the user erases characters in the text.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > PGEntry::get_erase_event(void) const;

344 9 set_wtext 4 450 18 PGEntry::set_wtext 0 1 128 289
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::set_wtext
//       Access: Published
//  Description: Changes the text currently displayed within the
//               entry.
////////////////////////////////////////////////////////////////////
69
inline void PGEntry::set_wtext(basic_string< wchar_t > const &wtext);

345 9 get_wtext 4 450 18 PGEntry::get_wtext 0 1 129 289
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::get_wtext
//       Access: Published
//  Description: Returns the text currently displayed within the
//               entry.
////////////////////////////////////////////////////////////////////
69
inline basic_string< wchar_t > const &PGEntry::get_wtext(void) const;

346 8 is_wtext 4 450 17 PGEntry::is_wtext 0 1 130 462
////////////////////////////////////////////////////////////////////
//     Function: PGEntry::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
////////////////////////////////////////////////////////////////////
35
bool PGEntry::is_wtext(void) const;

347 14 get_class_type 4 450 23 PGEntry::get_class_type 0 1 131 0
48
static TypeHandle PGEntry::get_class_type(void);

348 24 PGMouseWatcherBackground 4 452 50 PGMouseWatcherBackground::PGMouseWatcherBackground 0 1 132 234
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherBackground::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
57
PGMouseWatcherBackground::PGMouseWatcherBackground(void);

349 14 get_class_type 4 452 40 PGMouseWatcherBackground::get_class_type 0 1 133 0
65
static TypeHandle PGMouseWatcherBackground::get_class_type(void);

350 37 upcast_to_TypedWritableReferenceCount 12 454 62 PGMouseWatcherParameter::upcast_to_TypedWritableReferenceCount 0 1 136 66
upcast from PGMouseWatcherParameter to TypedWritableReferenceCount
98
TypedWritableReferenceCount *PGMouseWatcherParameter::upcast_to_TypedWritableReferenceCount(void);

351 35 downcast_to_PGMouseWatcherParameter 12 455 64 TypedWritableReferenceCount::downcast_to_PGMouseWatcherParameter 0 1 137 68
downcast from TypedWritableReferenceCount to PGMouseWatcherParameter
96
PGMouseWatcherParameter *TypedWritableReferenceCount::downcast_to_PGMouseWatcherParameter(void);

352 31 upcast_to_MouseWatcherParameter 12 454 56 PGMouseWatcherParameter::upcast_to_MouseWatcherParameter 0 1 138 60
upcast from PGMouseWatcherParameter to MouseWatcherParameter
86
MouseWatcherParameter *PGMouseWatcherParameter::upcast_to_MouseWatcherParameter(void);

353 35 downcast_to_PGMouseWatcherParameter 12 456 58 MouseWatcherParameter::downcast_to_PGMouseWatcherParameter 0 1 139 62
downcast from MouseWatcherParameter to PGMouseWatcherParameter
90
PGMouseWatcherParameter *MouseWatcherParameter::downcast_to_PGMouseWatcherParameter(void);

354 24 ~PGMouseWatcherParameter 4 454 49 PGMouseWatcherParameter::~PGMouseWatcherParameter 0 0 241
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherParameter::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual PGMouseWatcherParameter::~PGMouseWatcherParameter(void);

355 6 output 4 454 31 PGMouseWatcherParameter::output 0 1 134 231
////////////////////////////////////////////////////////////////////
//     Function: PGMouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void PGMouseWatcherParameter::output(ostream &out) const;

356 14 get_class_type 4 454 39 PGMouseWatcherParameter::get_class_type 0 1 135 0
64
static TypeHandle PGMouseWatcherParameter::get_class_type(void);

357 14 PGVirtualFrame 4 457 30 PGVirtualFrame::PGVirtualFrame 0 2 140 141 461
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
72
PGVirtualFrame::PGVirtualFrame(basic_string< char > const &name = (""));

358 5 setup 4 457 21 PGVirtualFrame::setup 0 1 142 294
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::setup
//       Access: Published
//  Description: Creates a PGVirtualFrame with the indicated 
//               dimensions.
////////////////////////////////////////////////////////////////////
54
void PGVirtualFrame::setup(float width, float height);

359 14 set_clip_frame 4 457 30 PGVirtualFrame::set_clip_frame 0 2 143 144 1864
// Filename: pgVirtualFrame.I
// Created by:  drose (17Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_clip_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the clip frame.
//               This is the size of the small window through which we
//               can see the virtual canvas.  Normally, this is the
//               same size as the actual frame or smaller (typically
//               it is smaller by the size of the bevel, or to make
//               room for scroll bars).
////////////////////////////////////////////////////////////////////
93
inline void PGVirtualFrame::set_clip_frame(float left, float right, float bottom, float top);

360 14 get_clip_frame 4 457 30 PGVirtualFrame::get_clip_frame 0 1 145 404
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_clip_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the clip frame.
//               See set_clip_frame().  If has_clip_frame() is
//               false, this returns the item's actual frame.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f const &PGVirtualFrame::get_clip_frame(void) const;

361 14 has_clip_frame 4 457 30 PGVirtualFrame::has_clip_frame 0 1 146 405
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::has_clip_frame
//       Access: Published
//  Description: Returns true if the clip frame has been set; see
//               set_clip_frame().  If it has not been set, objects in
//               the virtual frame will not be clipped.
////////////////////////////////////////////////////////////////////
55
inline bool PGVirtualFrame::has_clip_frame(void) const;

362 16 clear_clip_frame 4 457 32 PGVirtualFrame::clear_clip_frame 0 1 147 311
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::clear_clip_frame
//       Access: Published
//  Description: Removes the clip frame from the item.  This
//               disables clipping.
////////////////////////////////////////////////////////////////////
44
void PGVirtualFrame::clear_clip_frame(void);

363 20 set_canvas_transform 4 457 36 PGVirtualFrame::set_canvas_transform 0 1 148 380
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::set_canvas_transform
//       Access: Published
//  Description: Changes the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
////////////////////////////////////////////////////////////////////
82
inline void PGVirtualFrame::set_canvas_transform(TransformState const *transform);

364 20 get_canvas_transform 4 457 36 PGVirtualFrame::get_canvas_transform 0 1 149 380
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_transform
//       Access: Published
//  Description: Returns the transform of the virtual canvas.  This
//               transform is applied to all child nodes of the
//               canvas_node.
////////////////////////////////////////////////////////////////////
78
inline TransformState const *PGVirtualFrame::get_canvas_transform(void) const;

365 15 get_canvas_node 4 457 31 PGVirtualFrame::get_canvas_node 0 1 150 338
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_canvas_node
//       Access: Published
//  Description: Returns the special node that holds all of the
//               children that appear in the virtual canvas.
////////////////////////////////////////////////////////////////////
62
inline PandaNode *PGVirtualFrame::get_canvas_node(void) const;

366 19 get_clip_plane_node 4 457 35 PGVirtualFrame::get_clip_plane_node 0 1 151 385
////////////////////////////////////////////////////////////////////
//     Function: PGVirtualFrame::get_clip_plane_node
//       Access: Published
//  Description: Returns the special node that holds all of PlaneNodes
//               that are used for applying the clip planes to the
//               canvas_node.
////////////////////////////////////////////////////////////////////
66
inline PandaNode *PGVirtualFrame::get_clip_plane_node(void) const;

367 14 get_class_type 4 457 30 PGVirtualFrame::get_class_type 0 1 152 0
55
static TypeHandle PGVirtualFrame::get_class_type(void);

368 16 upcast_to_PGItem 12 458 29 PGSliderBar::upcast_to_PGItem 0 1 190 33
upcast from PGSliderBar to PGItem
44
PGItem *PGSliderBar::upcast_to_PGItem(void);

369 23 downcast_to_PGSliderBar 12 445 31 PGItem::downcast_to_PGSliderBar 0 1 191 35
downcast from PGItem to PGSliderBar
51
PGSliderBar *PGItem::downcast_to_PGSliderBar(void);

370 24 upcast_to_PGButtonNotify 12 458 37 PGSliderBar::upcast_to_PGButtonNotify 0 0 41
upcast from PGSliderBar to PGButtonNotify
60
PGButtonNotify *PGSliderBar::upcast_to_PGButtonNotify(void);

371 23 downcast_to_PGSliderBar 12 459 39 PGButtonNotify::downcast_to_PGSliderBar 0 0 43
downcast from PGButtonNotify to PGSliderBar
59
PGSliderBar *PGButtonNotify::downcast_to_PGSliderBar(void);

372 11 PGSliderBar 4 458 24 PGSliderBar::PGSliderBar 0 2 153 154 455
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
66
PGSliderBar::PGSliderBar(basic_string< char > const &name = (""));

373 12 ~PGSliderBar 4 458 25 PGSliderBar::~PGSliderBar 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
40
virtual PGSliderBar::~PGSliderBar(void);

374 16 setup_scroll_bar 4 458 29 PGSliderBar::setup_scroll_bar 0 1 155 797
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_scroll_bar
//       Access: Published
//  Description: Creates PGSliderBar that represents a vertical or
//               horizontal scroll bar (if vertical is true or false,
//               respectively), with additional buttons for scrolling,
//               and a range of 0 .. 1.
//
//               length here is the measurement along the scroll bar,
//               and width is the measurement across the scroll bar,
//               whether it is vertical or horizontal (so for a
//               horizontal scroll bar, the length is actually the x
//               dimension, and the width is the y dimension).
////////////////////////////////////////////////////////////////////
90
void PGSliderBar::setup_scroll_bar(bool vertical, float length, float width, float bevel);

375 12 setup_slider 4 458 25 PGSliderBar::setup_slider 0 1 156 454
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::setup_slider
//       Access: Published
//  Description: Creates PGSliderBar that represents a slider that the
//               user can use to control an analog quantity.
//
//               This is functionally the same as a scroll bar, but it
//               has a distinctive look.
////////////////////////////////////////////////////////////////////
86
void PGSliderBar::setup_slider(bool vertical, float length, float width, float bevel);

376 8 set_axis 4 458 21 PGSliderBar::set_axis 0 1 157 926
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_axis
//       Access: Published
//  Description: Specifies the axis of the slider bar's motion.  This
//               should be only one of four vectors: (1, 0, 0), (0, 0,
//               1), (-1, 0, 0), or (0, 0, -1).
//
//               This specifies the vector in which the thumb moves
//               when it is moving from the minimum to the maximum
//               value.
//
//               The axis must be parallel to one of the screen axes,
//               and it must be normalized.  Hence, it may only be one
//               of the above four possibilities; anything else is an
//               error and will result in indeterminate behavior.
//
//               Normally, you should not try to set the axis
//               directly.
////////////////////////////////////////////////////////////////////
57
inline void PGSliderBar::set_axis(LVector3f const &axis);

377 8 get_axis 4 458 21 PGSliderBar::get_axis 0 1 158 299
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_axis
//       Access: Published
//  Description: Returns the axis of the slider bar's motion.  See
//               set_axis().
////////////////////////////////////////////////////////////////////
58
inline LVector3f const &PGSliderBar::get_axis(void) const;

378 9 set_range 4 458 22 PGSliderBar::set_range 0 1 159 273
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_range
//       Access: Published
//  Description: Sets the minimum and maxmimum value for the slider.
////////////////////////////////////////////////////////////////////
69
inline void PGSliderBar::set_range(float min_value, float max_value);

379 13 get_min_value 4 458 26 PGSliderBar::get_min_value 0 1 160 304
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_min_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the left.
////////////////////////////////////////////////////////////////////
52
inline float PGSliderBar::get_min_value(void) const;

380 13 get_max_value 4 458 26 PGSliderBar::get_max_value 0 1 161 305
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_max_value
//       Access: Published
//  Description: Returns the value when the slider is all the way to
//               the right.
////////////////////////////////////////////////////////////////////
52
inline float PGSliderBar::get_max_value(void) const;

381 15 set_scroll_size 4 458 28 PGSliderBar::set_scroll_size 0 1 162 337
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_scroll_size
//       Access: Published
//  Description: Specifies the amount the slider will move when the
//               user clicks on the left or right buttons.
////////////////////////////////////////////////////////////////////
60
inline void PGSliderBar::set_scroll_size(float scroll_size);

382 15 get_scroll_size 4 458 28 PGSliderBar::get_scroll_size 0 1 163 276
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_scroll_size
//       Access: Published
//  Description: Returns the value last set by set_scroll_size().
////////////////////////////////////////////////////////////////////
54
inline float PGSliderBar::get_scroll_size(void) const;

383 13 set_page_size 4 458 26 PGSliderBar::set_page_size 0 1 164 516
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_page_size
//       Access: Published
//  Description: Specifies the amount of data contained in a single
//               page.  This indicates how much the thumb will jump
//               when the trough is directly clicked; and if
//               resize_thumb is true, it also controls the visible
//               size of the thumb button.
////////////////////////////////////////////////////////////////////
56
inline void PGSliderBar::set_page_size(float page_size);

384 13 get_page_size 4 458 26 PGSliderBar::get_page_size 0 1 165 272
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_page_size
//       Access: Published
//  Description: Returns the value last set by set_page_size().
////////////////////////////////////////////////////////////////////
52
inline float PGSliderBar::get_page_size(void) const;

385 9 set_value 4 458 22 PGSliderBar::set_value 0 1 166 374
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_value
//       Access: Published
//  Description: Sets the current value of the slider
//               programmatically.  This should range between
//               get_min_value() and get_max_value().
////////////////////////////////////////////////////////////////////
48
inline void PGSliderBar::set_value(float value);

386 9 get_value 4 458 22 PGSliderBar::get_value 0 1 167 262
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_value
//       Access: Published
//  Description: Returns the current value of the slider.
////////////////////////////////////////////////////////////////////
48
inline float PGSliderBar::get_value(void) const;

387 9 set_ratio 4 458 22 PGSliderBar::set_ratio 0 1 168 307
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_ratio
//       Access: Published
//  Description: Sets the current value of the slider, expressed in
//               the range 0 .. 1.
////////////////////////////////////////////////////////////////////
48
inline void PGSliderBar::set_ratio(float ratio);

388 9 get_ratio 4 458 22 PGSliderBar::get_ratio 0 1 169 310
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_ratio
//       Access: Published
//  Description: Returns the current value of the slider, expressed in
//               the range 0 .. 1.
////////////////////////////////////////////////////////////////////
48
inline float PGSliderBar::get_ratio(void) const;

389 14 is_button_down 4 458 27 PGSliderBar::is_button_down 0 1 170 440
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::is_button_down
//       Access: Published
//  Description: Returns true if the user is currently holding down
//               the mouse button to manipulate the slider.  When
//               true, calls to set_ratio() or set_value() will have
//               no effect.
////////////////////////////////////////////////////////////////////
52
inline bool PGSliderBar::is_button_down(void) const;

390 16 set_resize_thumb 4 458 29 PGSliderBar::set_resize_thumb 0 1 171 480
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_resize_thumb
//       Access: Published
//  Description: Sets the resize_thumb flag.  When this is true, the
//               thumb button's frame will be adjusted so that its
//               width visually represents the page size.  When this
//               is false, the thumb button will be left alone.
////////////////////////////////////////////////////////////////////
61
inline void PGSliderBar::set_resize_thumb(bool resize_thumb);

391 16 get_resize_thumb 4 458 29 PGSliderBar::get_resize_thumb 0 1 172 301
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_resize_thumb
//       Access: Published
//  Description: Returns the resize_thumb flag.  See
//               set_resize_thumb().
////////////////////////////////////////////////////////////////////
54
inline bool PGSliderBar::get_resize_thumb(void) const;

392 17 set_manage_pieces 4 458 30 PGSliderBar::set_manage_pieces 0 1 173 531
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the slider bar--that is, the thumb, and
//               the left and right scroll buttons--are automatically
//               positioned and/or resized when the slider bar's
//               overall frame is changed.
////////////////////////////////////////////////////////////////////
63
inline void PGSliderBar::set_manage_pieces(bool manage_pieces);

393 17 get_manage_pieces 4 458 30 PGSliderBar::get_manage_pieces 0 1 174 304
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
////////////////////////////////////////////////////////////////////
55
inline bool PGSliderBar::get_manage_pieces(void) const;

394 16 set_thumb_button 4 458 29 PGSliderBar::set_thumb_button 0 1 175 621
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_thumb_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the thumb
//               for this slider.  This button visually represents the
//               position of the slider, and can be dragged left and
//               right by the user.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
66
inline void PGSliderBar::set_thumb_button(PGButton *thumb_button);

395 18 clear_thumb_button 4 458 31 PGSliderBar::clear_thumb_button 0 1 176 396
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_thumb_button
//       Access: Published
//  Description: Removes the thumb button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
50
inline void PGSliderBar::clear_thumb_button(void);

396 16 get_thumb_button 4 458 29 PGSliderBar::get_thumb_button 0 1 177 334
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_thumb_button
//       Access: Published
//  Description: Returns the PGButton that serves as the thumb for
//               this slider, or NULL if it is not set.
////////////////////////////////////////////////////////////////////
59
inline PGButton *PGSliderBar::get_thumb_button(void) const;

397 15 set_left_button 4 458 28 PGSliderBar::set_left_button 0 1 178 637
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_left_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the left
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the left.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
64
inline void PGSliderBar::set_left_button(PGButton *left_button);

398 17 clear_left_button 4 458 30 PGSliderBar::clear_left_button 0 1 179 394
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_left_button
//       Access: Published
//  Description: Removes the left button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
49
inline void PGSliderBar::clear_left_button(void);

399 15 get_left_button 4 458 28 PGSliderBar::get_left_button 0 1 180 371
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_left_button
//       Access: Published
//  Description: Returns the PGButton that serves as the left scroll
//               button for this slider, if any, or NULL if it is not
//               set.
////////////////////////////////////////////////////////////////////
58
inline PGButton *PGSliderBar::get_left_button(void) const;

400 16 set_right_button 4 458 29 PGSliderBar::set_right_button 0 1 181 640
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_right_button
//       Access: Published
//  Description: Sets the PGButton object that will serve as the right
//               scroll button for this slider.  This button is
//               optional; if present, the user can click on it to
//               move scroll_size units at a time to the right.
//
//               It is the responsibility of the caller to ensure that
//               the button object is parented to the PGSliderBar
//               node.
////////////////////////////////////////////////////////////////////
66
inline void PGSliderBar::set_right_button(PGButton *right_button);

401 18 clear_right_button 4 458 31 PGSliderBar::clear_right_button 0 1 182 396
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::clear_right_button
//       Access: Published
//  Description: Removes the right button object from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the button itself.
////////////////////////////////////////////////////////////////////
50
inline void PGSliderBar::clear_right_button(void);

402 16 get_right_button 4 458 29 PGSliderBar::get_right_button 0 1 183 373
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_right_button
//       Access: Published
//  Description: Returns the PGButton that serves as the right scroll
//               button for this slider, if any, or NULL if it is not
//               set.
////////////////////////////////////////////////////////////////////
59
inline PGButton *PGSliderBar::get_right_button(void) const;

403 17 get_adjust_prefix 4 458 30 PGSliderBar::get_adjust_prefix 0 1 184 428
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_prefix
//       Access: Published, Static
//  Description: Returns the prefix that is used to define the adjust
//               event for all PGSliderBars.  The adjust event is the
//               concatenation of this string followed by get_id().
////////////////////////////////////////////////////////////////////
72
static inline basic_string< char > PGSliderBar::get_adjust_prefix(void);

404 16 get_adjust_event 4 458 29 PGSliderBar::get_adjust_event 0 1 185 376
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::get_adjust_event
//       Access: Published
//  Description: Returns the event name that will be thrown when the
//               slider bar value is adjusted by the user or
//               programmatically.
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > PGSliderBar::get_adjust_event(void) const;

405 10 set_active 4 458 23 PGSliderBar::set_active 0 1 186 524
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::set_active
//       Access: Published, Virtual
//  Description: Sets whether the PGItem is active for mouse watching.
//               This is not necessarily related to the
//               active/inactive appearance of the item, which is
//               controlled by set_state(), but it does affect whether
//               it responds to mouse events.
////////////////////////////////////////////////////////////////////
50
virtual void PGSliderBar::set_active(bool active);

406 8 remanage 4 458 21 PGSliderBar::remanage 0 1 187 372
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars and
//               the thumb.  Normally this should not need to be
//               called directly.
////////////////////////////////////////////////////////////////////
33
void PGSliderBar::remanage(void);

407 9 recompute 4 458 22 PGSliderBar::recompute 0 1 188 338
////////////////////////////////////////////////////////////////////
//     Function: PGSliderBar::recompute
//       Access: Published
//  Description: Recomputes the position and size of the thumb.
//               Normally this should not need to be called directly.
////////////////////////////////////////////////////////////////////
34
void PGSliderBar::recompute(void);

408 14 get_class_type 4 458 27 PGSliderBar::get_class_type 0 1 189 0
52
static TypeHandle PGSliderBar::get_class_type(void);

409 24 upcast_to_PGVirtualFrame 12 460 39 PGScrollFrame::upcast_to_PGVirtualFrame 0 1 213 43
upcast from PGScrollFrame to PGVirtualFrame
62
PGVirtualFrame *PGScrollFrame::upcast_to_PGVirtualFrame(void);

410 25 downcast_to_PGScrollFrame 12 457 41 PGVirtualFrame::downcast_to_PGScrollFrame 0 1 214 45
downcast from PGVirtualFrame to PGScrollFrame
63
PGScrollFrame *PGVirtualFrame::downcast_to_PGScrollFrame(void);

411 27 upcast_to_PGSliderBarNotify 12 460 42 PGScrollFrame::upcast_to_PGSliderBarNotify 0 0 46
upcast from PGScrollFrame to PGSliderBarNotify
68
PGSliderBarNotify *PGScrollFrame::upcast_to_PGSliderBarNotify(void);

412 25 downcast_to_PGScrollFrame 12 461 44 PGSliderBarNotify::downcast_to_PGScrollFrame 0 0 48
downcast from PGSliderBarNotify to PGScrollFrame
66
PGScrollFrame *PGSliderBarNotify::downcast_to_PGScrollFrame(void);

413 13 PGScrollFrame 4 460 28 PGScrollFrame::PGScrollFrame 0 2 192 193 459
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
70
PGScrollFrame::PGScrollFrame(basic_string< char > const &name = (""));

414 14 ~PGScrollFrame 4 460 29 PGScrollFrame::~PGScrollFrame 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual PGScrollFrame::~PGScrollFrame(void);

415 5 setup 4 460 20 PGScrollFrame::setup 0 1 194 325
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::setup
//       Access: Published
//  Description: Creates a PGScrollFrame with the indicated 
//               dimensions, and the indicated virtual frame.
////////////////////////////////////////////////////////////////////
136
void PGScrollFrame::setup(float width, float height, float left, float right, float bottom, float top, float slider_width, float bevel);

416 17 set_virtual_frame 4 460 32 PGScrollFrame::set_virtual_frame 0 2 195 196 1509
// Filename: pgScrollFrame.I
// Created by:  drose (17Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_virtual_frame
//       Access: Published
//  Description: Sets the bounding rectangle of the virtual frame.
//               This is the size of the large, virtual canvas which
//               we can see only a portion of at any given time.
////////////////////////////////////////////////////////////////////
95
inline void PGScrollFrame::set_virtual_frame(float left, float right, float bottom, float top);

417 17 get_virtual_frame 4 460 32 PGScrollFrame::get_virtual_frame 0 1 197 413
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_virtual_frame
//       Access: Published
//  Description: Returns the bounding rectangle of the virtual frame.
//               See set_virtual_frame().  If has_virtual_frame() is
//               false, this returns the item's clip frame.
////////////////////////////////////////////////////////////////////
70
inline LVecBase4f const &PGScrollFrame::get_virtual_frame(void) const;

418 17 has_virtual_frame 4 460 32 PGScrollFrame::has_virtual_frame 0 1 198 405
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::has_virtual_frame
//       Access: Published
//  Description: Returns true if the virtual frame has a bounding
//               rectangle; see set_virtual_frame().  Most
//               PGScrollFrame objects will have a virtual frame.
////////////////////////////////////////////////////////////////////
57
inline bool PGScrollFrame::has_virtual_frame(void) const;

419 19 clear_virtual_frame 4 460 34 PGScrollFrame::clear_virtual_frame 0 1 199 441
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_virtual_frame
//       Access: Published
//  Description: Removes the virtual frame from the item.  This
//               effectively sets the virtual frame to the same size
//               as the clip frame.  Scrolling will no longer be
//               possible.
////////////////////////////////////////////////////////////////////
53
inline void PGScrollFrame::clear_virtual_frame(void);

420 17 set_manage_pieces 4 460 32 PGScrollFrame::set_manage_pieces 0 1 200 614
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_manage_pieces
//       Access: Published
//  Description: Sets the manage_pieces flag.  When this is true, the
//               sub-pieces of the scroll frame--that is, the two
//               scroll bars--are automatically positioned and/or
//               resized when the scroll frame's overall frame is
//               changed.  They are also automatically resized to fill
//               in the gap when one or the other is hidden.
////////////////////////////////////////////////////////////////////
65
inline void PGScrollFrame::set_manage_pieces(bool manage_pieces);

421 17 get_manage_pieces 4 460 32 PGScrollFrame::get_manage_pieces 0 1 201 306
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_manage_pieces
//       Access: Published
//  Description: Returns the manage_pieces flag.  See
//               set_manage_pieces().
////////////////////////////////////////////////////////////////////
57
inline bool PGScrollFrame::get_manage_pieces(void) const;

422 13 set_auto_hide 4 460 28 PGScrollFrame::set_auto_hide 0 1 202 652
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_auto_hide
//       Access: Published
//  Description: Sets the auto_hide flag.  When this is true, the
//               two scroll bars are automatically hidden if they are
//               not needed (that is, if the virtual frame would fit
//               within the clip frame without them), and they are
//               automatically shown when they are needed.
//
//               Setting this flag true forces the manage_pieces flag
//               to also be set true.
////////////////////////////////////////////////////////////////////
57
inline void PGScrollFrame::set_auto_hide(bool auto_hide);

423 13 get_auto_hide 4 460 28 PGScrollFrame::get_auto_hide 0 1 203 294
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_auto_hide
//       Access: Published
//  Description: Returns the auto_hide flag.  See
//               set_auto_hide().
////////////////////////////////////////////////////////////////////
53
inline bool PGScrollFrame::get_auto_hide(void) const;

424 21 set_horizontal_slider 4 460 36 PGScrollFrame::set_horizontal_slider 0 1 204 479
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_horizontal_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               horizontal scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
////////////////////////////////////////////////////////////////////
81
inline void PGScrollFrame::set_horizontal_slider(PGSliderBar *horizontal_slider);

425 23 clear_horizontal_slider 4 460 38 PGScrollFrame::clear_horizontal_slider 0 1 205 405
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_horizontal_slider
//       Access: Published
//  Description: Removes the horizontal scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
////////////////////////////////////////////////////////////////////
57
inline void PGScrollFrame::clear_horizontal_slider(void);

426 21 get_horizontal_slider 4 460 36 PGScrollFrame::get_horizontal_slider 0 1 206 384
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_horizontal_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the horizontal
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
////////////////////////////////////////////////////////////////////
69
inline PGSliderBar *PGScrollFrame::get_horizontal_slider(void) const;

427 19 set_vertical_slider 4 460 34 PGScrollFrame::set_vertical_slider 0 1 207 475
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::set_vertical_slider
//       Access: Published
//  Description: Sets the PGSliderBar object that will serve as the
//               vertical scroll bar for this frame.  It is your
//               responsibility to parent this slider bar to the frame
//               and move it to the appropriate place.
////////////////////////////////////////////////////////////////////
77
inline void PGScrollFrame::set_vertical_slider(PGSliderBar *vertical_slider);

428 21 clear_vertical_slider 4 460 36 PGScrollFrame::clear_vertical_slider 0 1 208 401
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::clear_vertical_slider
//       Access: Published
//  Description: Removes the vertical scroll bar from control of the
//               frame.  It is your responsibility to actually remove
//               or hide the object itself.
////////////////////////////////////////////////////////////////////
55
inline void PGScrollFrame::clear_vertical_slider(void);

429 19 get_vertical_slider 4 460 34 PGScrollFrame::get_vertical_slider 0 1 209 380
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::get_vertical_slider
//       Access: Published
//  Description: Returns the PGSliderBar that serves as the vertical
//               scroll bar for this frame, if any, or NULL if it is
//               not set.
////////////////////////////////////////////////////////////////////
67
inline PGSliderBar *PGScrollFrame::get_vertical_slider(void) const;

430 8 remanage 4 460 23 PGScrollFrame::remanage 0 1 210 342
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::remanage
//       Access: Published
//  Description: Manages the position and size of the scroll bars.
//               Normally this should not need to be called directly.
////////////////////////////////////////////////////////////////////
35
void PGScrollFrame::remanage(void);

431 9 recompute 4 460 24 PGScrollFrame::recompute 0 1 211 335
////////////////////////////////////////////////////////////////////
//     Function: PGScrollFrame::recompute
//       Access: Published
//  Description: Forces the PGScrollFrame to recompute itself right
//               now.  Normally this should not be required.
////////////////////////////////////////////////////////////////////
43
inline void PGScrollFrame::recompute(void);

432 14 get_class_type 4 460 29 PGScrollFrame::get_class_type 0 1 212 0
54
static TypeHandle PGScrollFrame::get_class_type(void);

433 9 PGWaitBar 4 462 20 PGWaitBar::PGWaitBar 0 2 215 216 451
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::Copy Constructor
//       Access: Protected
//  Description: 
////////////////////////////////////////////////////////////////////
62
PGWaitBar::PGWaitBar(basic_string< char > const &name = (""));

434 5 setup 4 462 16 PGWaitBar::setup 0 1 217 317
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::setup
//       Access: Published
//  Description: Creates a PGWaitBar with the indicated dimensions,
//               with the indicated maximum range.
////////////////////////////////////////////////////////////////////
62
void PGWaitBar::setup(float width, float height, float range);

435 9 set_range 4 462 20 PGWaitBar::set_range 0 1 218 944
// Filename: pgWaitBar.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_range
//       Access: Published
//  Description: Sets the value at which the WaitBar indicates 100%.
////////////////////////////////////////////////////////////////////
46
inline void PGWaitBar::set_range(float range);

436 9 get_range 4 462 20 PGWaitBar::get_range 0 1 219 274
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_range
//       Access: Published
//  Description: Returns the value at which the WaitBar indicates 100%.
////////////////////////////////////////////////////////////////////
46
inline float PGWaitBar::get_range(void) const;

437 9 set_value 4 462 20 PGWaitBar::set_value 0 1 220 317
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_value
//       Access: Published
//  Description: Sets the current value of the bar.  This should range
//               between 0 and get_range().
////////////////////////////////////////////////////////////////////
46
inline void PGWaitBar::set_value(float value);

438 9 get_value 4 462 20 PGWaitBar::get_value 0 1 221 257
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_value
//       Access: Published
//  Description: Returns the current value of the bar.
////////////////////////////////////////////////////////////////////
46
inline float PGWaitBar::get_value(void) const;

439 11 get_percent 4 462 22 PGWaitBar::get_percent 0 1 222 254
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_percent
//       Access: Published
//  Description: Returns the percentage complete.
////////////////////////////////////////////////////////////////////
48
inline float PGWaitBar::get_percent(void) const;

440 13 set_bar_style 4 462 24 PGWaitBar::set_bar_style 0 1 223 334
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::set_bar_style
//       Access: Published
//  Description: Sets the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
////////////////////////////////////////////////////////////////////
64
inline void PGWaitBar::set_bar_style(PGFrameStyle const &style);

441 13 get_bar_style 4 462 24 PGWaitBar::get_bar_style 0 1 224 337
////////////////////////////////////////////////////////////////////
//     Function: PGWaitBar::get_bar_style
//       Access: Published
//  Description: Returns the kind of frame that is drawn on top of the
//               WaitBar to represent the amount completed.
////////////////////////////////////////////////////////////////////
57
inline PGFrameStyle PGWaitBar::get_bar_style(void) const;

442 14 get_class_type 4 462 25 PGWaitBar::get_class_type 0 1 225 0
50
static TypeHandle PGWaitBar::get_class_type(void);

225
1 14 Dtool_Vvimfplg 7 2 463 228 14 Dtool_Vvimfplg 0 
2 14 Dtool_VvimnhUl 7 2 463 228 14 Dtool_VvimnhUl 1 4 copy 1 464  
3 14 Dtool_VvimnTPY 6 3 463 0 14 Dtool_VvimnTPY 2 4 this 3 463  4 copy 1 464  
4 14 Dtool_VvimI8_1 4 6 466 0 14 Dtool_VvimI8_1 2 4 this 3 463  4 type 1 444  
5 14 Dtool_VvimeRTB 6 7 444 0 14 Dtool_VvimeRTB 1 4 this 3 464  
6 14 Dtool_VvimrDgP 4 8 466 0 14 Dtool_VvimrDgP 2 4 this 3 463  5 color 1 467  
7 14 Dtool_VvimKqux 4 8 466 0 14 Dtool_VvimKqux 5 4 this 3 463  1 r 1 470  1 g 1 470  1 b 1 470  1 a 1 470  
8 14 Dtool_VvimarWM 6 9 467 0 14 Dtool_VvimarWM 1 4 this 3 464  
9 14 Dtool_VvimiaIb 4 10 466 0 14 Dtool_VvimiaIb 2 4 this 3 463  7 texture 1 471  
10 14 Dtool_VvimJRv2 6 11 473 0 14 Dtool_VvimJRv2 1 4 this 3 464  
11 14 Dtool_VvimWoMM 7 12 471 0 14 Dtool_VvimWoMM 1 4 this 3 464  
12 14 Dtool_VvimqcTv 4 13 466 0 14 Dtool_VvimqcTv 1 4 this 3 463  
13 14 Dtool_VvimIq9R 4 14 466 0 14 Dtool_VvimIq9R 2 4 this 3 463  5 width 1 474  
14 14 Dtool_VvimhZn4 4 14 466 0 14 Dtool_VvimhZn4 3 4 this 3 463  1 x 1 470  1 y 1 470  
15 14 Dtool_VvimP9TS 6 15 474 0 14 Dtool_VvimP9TS 1 4 this 3 464  
16 14 Dtool_Vvimiysx 4 16 466 0 14 Dtool_Vvimiysx 2 4 this 3 463  13 visible_scale 1 474  
17 14 Dtool_VvimJonR 4 16 466 0 14 Dtool_VvimJonR 3 4 this 3 463  1 x 1 470  1 y 1 470  
18 14 Dtool_VvimIBbc 6 17 474 0 14 Dtool_VvimIBbc 1 4 this 3 464  
19 14 Dtool_Vvim4e3t 7 18 477 0 14 Dtool_Vvim4e3t 2 4 this 3 464  5 frame 1 467  
20 14 Dtool_Vvimp6gR 4 19 466 0 14 Dtool_Vvimp6gR 2 4 this 3 464  3 out 1 478  
21 14 Dtool_VvimuWRQ 7 22 481 0 14 Dtool_VvimuWRQ 1 4 name 1 480  
22 14 Dtool_VvimfDEN 4 23 466 0 14 Dtool_VvimfDEN 2 4 this 3 481  5 frame 1 467  
23 14 Dtool_Vvimblkh 4 23 466 0 14 Dtool_Vvimblkh 5 4 this 3 481  4 left 1 470  5 right 1 470  6 bottom 1 470  3 top 1 470  
24 14 Dtool_VvimfpB8 6 24 467 0 14 Dtool_VvimfpB8 1 4 this 3 482  
25 14 Dtool_VvimYZs9 6 25 473 0 14 Dtool_VvimYZs9 1 4 this 3 482  
26 14 Dtool_VvimTDLq 4 26 466 0 14 Dtool_VvimTDLq 1 4 this 3 481  
27 14 Dtool_Vvim6vne 4 27 466 0 14 Dtool_Vvim6vne 2 4 this 3 481  5 state 1 484  
28 14 Dtool_Vvim19g7 6 28 484 0 14 Dtool_Vvim19g7 1 4 this 3 482  
29 14 Dtool_VvimrA9v 4 29 466 0 14 Dtool_VvimrA9v 2 4 this 3 481  6 active 1 473  
30 14 Dtool_VvimGMel 6 30 473 0 14 Dtool_VvimGMel 1 4 this 3 482  
31 14 Dtool_VvimXfx_ 4 31 466 0 14 Dtool_VvimXfx_ 2 4 this 3 481  5 focus 1 473  
32 14 Dtool_VvimPdFX 6 32 473 0 14 Dtool_VvimPdFX 1 4 this 3 482  
33 14 Dtool_Vvimz__5 4 33 466 0 14 Dtool_Vvimz__5 2 4 this 3 481  5 focus 1 473  
34 14 Dtool_Vvim6AEP 6 34 473 0 14 Dtool_Vvim6AEP 1 4 this 3 482  
35 14 Dtool_VvimQIma 4 35 466 0 14 Dtool_VvimQIma 2 4 this 3 481  14 suppress_flags 1 484  
36 14 Dtool_Vvimsd1r 6 36 484 0 14 Dtool_Vvimsd1r 1 4 this 3 482  
37 14 Dtool_Vvim_Z0S 6 37 484 0 14 Dtool_Vvim_Z0S 1 4 this 3 482  
38 14 Dtool_VvimDziL 4 38 466 0 14 Dtool_VvimDziL 2 4 this 3 481  5 state 1 484  
39 14 Dtool_Vvim526N 6 39 473 0 14 Dtool_Vvim526N 2 4 this 3 482  5 state 1 484  
40 14 Dtool_Vvim_yvN 6 40 485 0 14 Dtool_Vvim_yvN 2 4 this 3 481  5 state 1 484  
41 14 Dtool_VvimQ1k9 7 41 485 0 14 Dtool_VvimQ1k9 3 4 this 3 481  5 state 1 484  4 path 1 487  
42 14 Dtool_Vvim3KSW 7 42 463 228 14 Dtool_Vvim3KSW 2 4 this 3 481  5 state 1 484  
43 14 Dtool_VvimOzMg 4 43 466 0 14 Dtool_VvimOzMg 3 4 this 3 481  5 state 1 484  5 style 1 464  
44 14 Dtool_VvimVj1_ 6 44 480 0 14 Dtool_VvimVj1_ 1 4 this 3 482  
45 14 Dtool_VvimDlim 4 45 466 0 14 Dtool_VvimDlim 2 4 this 3 481  2 id 1 480  
46 14 Dtool_VvimjBNc 6 46 480 0 14 Dtool_VvimjBNc 0 
47 14 Dtool_VvimKWYV 6 47 480 0 14 Dtool_VvimKWYV 0 
48 14 Dtool_Vvimm_4t 6 48 480 0 14 Dtool_Vvimm_4t 0 
49 14 Dtool_Vvime6SQ 6 49 480 0 14 Dtool_Vvime6SQ 0 
50 14 Dtool_VvimocSU 6 50 480 0 14 Dtool_VvimocSU 0 
51 14 Dtool_VvimAosI 6 51 480 0 14 Dtool_VvimAosI 0 
52 14 Dtool_VvimKHW8 6 52 480 0 14 Dtool_VvimKHW8 0 
53 14 Dtool_VvimlGfV 6 53 480 0 14 Dtool_VvimlGfV 0 
54 14 Dtool_Vvimjmbk 6 54 480 0 14 Dtool_Vvimjmbk 0 
55 14 Dtool_VvimWeD9 6 55 480 0 14 Dtool_VvimWeD9 1 4 this 3 482  
56 14 Dtool_Vvimt5Yg 6 56 480 0 14 Dtool_Vvimt5Yg 1 4 this 3 482  
57 14 Dtool_VvimjAdJ 6 57 480 0 14 Dtool_VvimjAdJ 1 4 this 3 482  
58 14 Dtool_VvimXN7D 6 58 480 0 14 Dtool_VvimXN7D 1 4 this 3 482  
59 14 Dtool_Vvim9R_I 6 59 480 0 14 Dtool_Vvim9R_I 1 4 this 3 482  
60 14 Dtool_Vvimdwwe 6 60 480 0 14 Dtool_Vvimdwwe 1 4 this 3 482  
61 14 Dtool_VvimKP2p 6 61 480 0 14 Dtool_VvimKP2p 2 4 this 3 482  6 button 1 489  
62 14 Dtool_Vvims5_d 6 62 480 0 14 Dtool_Vvims5_d 2 4 this 3 482  6 button 1 489  
63 14 Dtool_VvimuXe6 6 63 480 0 14 Dtool_VvimuXe6 1 4 this 3 482  
64 14 Dtool_VvimRwfE 7 64 493 0 14 Dtool_VvimRwfE 1 4 this 3 482  
65 14 Dtool_VvimnEhS 4 65 466 0 14 Dtool_VvimnEhS 3 4 this 3 481  5 event 1 480  5 sound 1 494  
66 14 Dtool_VvimNJW1 4 66 466 0 14 Dtool_VvimNJW1 2 4 this 3 481  5 event 1 480  
67 14 Dtool_VvimhCA4 7 67 494 0 14 Dtool_VvimhCA4 2 4 this 3 482  5 event 1 480  
68 14 Dtool_Vvimsdq5 6 68 473 0 14 Dtool_Vvimsdq5 2 4 this 3 482  5 event 1 480  
69 14 Dtool_VvimLv2y 7 69 497 0 14 Dtool_VvimLv2y 0 
70 14 Dtool_VvimsbIh 4 70 466 0 14 Dtool_VvimsbIh 1 4 node 1 497  
71 14 Dtool_VvimYwJY 7 71 481 0 14 Dtool_VvimYwJY 0 
72 14 Dtool_VvimHSTl 7 72 499 0 14 Dtool_VvimHSTl 0 
73 14 Dtool_VvimXygN 7 74 500 0 14 Dtool_VvimXygN 1 4 name 1 480  
74 14 Dtool_Vvimpw8O 4 76 466 0 14 Dtool_Vvimpw8O 2 4 this 3 500  5 ready 1 487  
75 14 Dtool_VvimBoE3 4 76 466 0 14 Dtool_VvimBoE3 3 4 this 3 500  5 ready 1 487  9 depressed 1 487  
76 14 Dtool_Vvim8enX 4 76 466 0 14 Dtool_Vvim8enX 4 4 this 3 500  5 ready 1 487  9 depressed 1 487  8 rollover 1 487  
77 14 Dtool_VvimNB5Z 4 76 466 0 14 Dtool_VvimNB5Z 5 4 this 3 500  5 ready 1 487  9 depressed 1 487  8 rollover 1 487  8 inactive 1 487  
78 14 Dtool_Vvim402k 4 76 466 0 14 Dtool_Vvim402k 3 4 this 3 500  5 label 1 480  5 bevel 1 470  
79 14 Dtool_VvimYvE_ 4 76 466 0 14 Dtool_VvimYvE_ 2 4 this 3 500  5 label 1 480  
80 14 Dtool_VvimGBUK 6 77 473 0 14 Dtool_VvimGBUK 2 4 this 3 500  6 button 1 489  
81 14 Dtool_Vvim7S68 6 78 473 0 14 Dtool_Vvim7S68 2 4 this 3 500  6 button 1 489  
82 14 Dtool_VvimYiLX 6 79 473 0 14 Dtool_VvimYiLX 2 4 this 3 500  6 button 1 489  
83 14 Dtool_VvimxDul 6 80 473 0 14 Dtool_VvimxDul 1 4 this 3 500  
84 14 Dtool_Vvimh0Du 6 81 480 0 14 Dtool_Vvimh0Du 0 
85 14 Dtool_VvimZ0l2 6 82 480 0 14 Dtool_VvimZ0l2 2 4 this 3 501  6 button 1 489  
86 14 Dtool_Vvimj_dU 7 83 499 0 14 Dtool_Vvimj_dU 0 
87 14 Dtool_Vvim0dnl 7 85 503 0 14 Dtool_Vvim0dnl 1 4 name 1 480  
88 14 Dtool_Vvim7YJ9 4 86 466 0 14 Dtool_Vvim7YJ9 2 4 this 3 503  7 watcher 1 504  
89 14 Dtool_VvimlICk 7 87 504 0 14 Dtool_VvimlICk 1 4 this 3 506  
90 14 Dtool_VvimNgvX 7 88 509 0 14 Dtool_VvimNgvX 1 4 this 3 506  
91 14 Dtool_VvimiqSM 4 89 466 0 14 Dtool_VvimiqSM 2 4 this 3 503  10 start_sort 1 484  
92 14 Dtool_VvimyCvK 6 90 484 0 14 Dtool_VvimyCvK 1 4 this 3 506  
93 14 Dtool_VvimZr4x 7 91 499 0 14 Dtool_VvimZr4x 0 
94 14 Dtool_VvimoxCL 7 93 510 0 14 Dtool_VvimoxCL 1 4 name 1 480  
95 14 Dtool_VvimiwtL 4 95 466 0 14 Dtool_VvimiwtL 3 4 this 3 510  5 width 1 470  9 num_lines 1 484  
96 14 Dtool_VvimAMDl 4 96 466 0 14 Dtool_VvimAMDl 2 4 this 3 510  4 text 1 480  
97 14 Dtool_Vvim_QSc 6 97 480 0 14 Dtool_Vvim_QSc 1 4 this 3 511  
98 14 Dtool_Vvimlsp8 4 98 466 0 14 Dtool_Vvimlsp8 2 4 this 3 510  8 position 1 484  
99 14 Dtool_Vvim1AtR 6 99 484 0 14 Dtool_Vvim1AtR 1 4 this 3 511  
100 14 Dtool_VvimnPHw 4 100 466 0 14 Dtool_VvimnPHw 2 4 this 3 510  9 max_chars 1 484  
101 14 Dtool_Vvim_r6z 6 101 484 0 14 Dtool_Vvim_r6z 1 4 this 3 511  
102 14 Dtool_VvimKWva 4 102 466 0 14 Dtool_VvimKWva 2 4 this 3 510  9 max_width 1 470  
103 14 Dtool_VvimXxhk 6 103 470 0 14 Dtool_VvimXxhk 1 4 this 3 511  
104 14 Dtool_VvimTDLT 4 104 466 0 14 Dtool_VvimTDLT 2 4 this 3 510  9 num_lines 1 484  
105 14 Dtool_VvimzX9W 6 105 484 0 14 Dtool_VvimzX9W 1 4 this 3 511  
106 14 Dtool_VvimnROV 4 106 466 0 14 Dtool_VvimnROV 2 4 this 3 510  10 blink_rate 1 470  
107 14 Dtool_VvimKf8v 6 107 470 0 14 Dtool_VvimKf8v 1 4 this 3 511  
108 14 Dtool_Vvimlf6N 6 108 487 0 14 Dtool_Vvimlf6N 1 4 this 3 510  
109 14 Dtool_VvimLvwG 4 109 466 0 14 Dtool_VvimLvwG 1 4 this 3 510  
110 14 Dtool_VvimkpvF 4 110 466 0 14 Dtool_VvimkpvF 2 4 this 3 510  4 flag 1 473  
111 14 Dtool_VvimWRyA 6 111 473 0 14 Dtool_VvimWRyA 1 4 this 3 511  
112 14 Dtool_VvimQRdS 4 112 466 0 14 Dtool_VvimQRdS 2 4 this 3 510  4 flag 1 473  
113 14 Dtool_VvimCY2e 6 113 473 0 14 Dtool_VvimCY2e 1 4 this 3 511  
114 14 Dtool_VvimuuvU 4 114 466 0 14 Dtool_VvimuuvU 2 4 this 3 510  16 candidate_active 1 480  
115 14 Dtool_VvimfCwe 6 115 480 0 14 Dtool_VvimfCwe 1 4 this 3 511  
116 14 Dtool_VvimwfZx 4 116 466 0 14 Dtool_VvimwfZx 2 4 this 3 510  18 candidate_inactive 1 480  
117 14 Dtool_VvimmgOn 6 117 480 0 14 Dtool_VvimmgOn 1 4 this 3 511  
118 14 Dtool_VvimMxrH 4 118 466 0 14 Dtool_VvimMxrH 3 4 this 3 510  5 state 1 484  4 node 1 497  
119 14 Dtool_VvimGmBt 7 119 497 0 14 Dtool_VvimGmBt 2 4 this 3 511  5 state 1 484  
120 14 Dtool_VvimRNBk 6 120 480 0 14 Dtool_VvimRNBk 0 
121 14 Dtool_VvimOCNR 6 121 480 0 14 Dtool_VvimOCNR 0 
122 14 Dtool_VvimPQ4_ 6 122 480 0 14 Dtool_VvimPQ4_ 0 
123 14 Dtool_VvimG7IQ 6 123 480 0 14 Dtool_VvimG7IQ 0 
124 14 Dtool_Vvimwkhs 6 124 480 0 14 Dtool_Vvimwkhs 2 4 this 3 511  6 button 1 489  
125 14 Dtool_VvimBqQn 6 125 480 0 14 Dtool_VvimBqQn 1 4 this 3 511  
126 14 Dtool_VvimFeug 6 126 480 0 14 Dtool_VvimFeug 1 4 this 3 511  
127 14 Dtool_VvimIEsr 6 127 480 0 14 Dtool_VvimIEsr 1 4 this 3 511  
128 14 Dtool_VvimNKPW 4 128 466 0 14 Dtool_VvimNKPW 2 4 this 3 510  5 wtext 1 480  
129 14 Dtool_Vvimt4yw 6 129 480 0 14 Dtool_Vvimt4yw 1 4 this 3 511  
130 14 Dtool_VvimsKvs 6 130 473 0 14 Dtool_VvimsKvs 1 4 this 3 511  
131 14 Dtool_VvimChug 7 131 499 0 14 Dtool_VvimChug 0 
132 14 Dtool_VvimJf8U 7 134 513 0 14 Dtool_VvimJf8U 0 
133 14 Dtool_VvimGLoU 7 135 499 0 14 Dtool_VvimGLoU 0 
134 14 Dtool_VvimY5i_ 4 144 466 0 14 Dtool_VvimY5i_ 2 4 this 3 514  3 out 1 478  
135 14 Dtool_Vvim63gq 7 145 499 0 14 Dtool_Vvim63gq 0 
136 14 Dtool_Vvimqr10 7 138 517 0 14 Dtool_Vvimqr10 1 4 this 3 516  
137 14 Dtool_VvimSVWG 7 139 516 354 14 Dtool_VvimSVWG 1 4 this 3 517  
138 14 Dtool_VvimjvJV 6 141 518 0 14 Dtool_VvimjvJV 1 4 this 3 516  
139 14 Dtool_VvimmaZS 7 142 516 354 14 Dtool_VvimmaZS 1 4 this 3 518  
140 14 Dtool_Vvim23dT 7 147 519 0 14 Dtool_Vvim23dT 1 4 name 1 480  
141 14 Dtool_VvimNqZy 7 147 519 0 14 Dtool_VvimNqZy 0 
142 14 Dtool_VvimdY29 4 148 466 0 14 Dtool_VvimdY29 3 4 this 3 519  5 width 1 470  6 height 1 470  
143 14 Dtool_VvimPlzz 4 149 466 0 14 Dtool_VvimPlzz 2 4 this 3 519  10 clip_frame 1 467  
144 14 Dtool_VvimAba8 4 149 466 0 14 Dtool_VvimAba8 5 4 this 3 519  4 left 1 470  5 right 1 470  6 bottom 1 470  3 top 1 470  
145 14 Dtool_VvimrDQS 6 150 467 0 14 Dtool_VvimrDQS 1 4 this 3 520  
146 14 Dtool_Vvimz_Qf 6 151 473 0 14 Dtool_Vvimz_Qf 1 4 this 3 520  
147 14 Dtool_Vvim5UoB 4 152 466 0 14 Dtool_Vvim5UoB 1 4 this 3 519  
148 14 Dtool_VvimB6v7 4 153 466 0 14 Dtool_VvimB6v7 2 4 this 3 519  9 transform 1 522  
149 14 Dtool_VvimEO4Y 7 154 522 0 14 Dtool_VvimEO4Y 1 4 this 3 520  
150 14 Dtool_VvimhyWA 7 155 525 0 14 Dtool_VvimhyWA 1 4 this 3 520  
151 14 Dtool_VvimzyMZ 7 156 525 0 14 Dtool_VvimzyMZ 1 4 this 3 520  
152 14 Dtool_VvimwQKj 7 157 499 0 14 Dtool_VvimwQKj 0 
153 14 Dtool_VvimOw_Q 7 164 526 373 14 Dtool_VvimOw_Q 1 4 name 1 480  
154 14 Dtool_VvimKJhH 7 164 526 373 14 Dtool_VvimKJhH 0 
155 14 Dtool_Vvimha_O 4 166 466 0 14 Dtool_Vvimha_O 5 4 this 3 526  8 vertical 1 473  6 length 1 470  5 width 1 470  5 bevel 1 470  
156 14 Dtool_VvimBgSu 4 167 466 0 14 Dtool_VvimBgSu 5 4 this 3 526  8 vertical 1 473  6 length 1 470  5 width 1 470  5 bevel 1 470  
157 14 Dtool_VvimM86R 4 168 466 0 14 Dtool_VvimM86R 2 4 this 3 526  4 axis 1 527  
158 14 Dtool_VvimiBjK 6 169 527 0 14 Dtool_VvimiBjK 1 4 this 3 530  
159 14 Dtool_Vvim6a9Q 4 170 466 0 14 Dtool_Vvim6a9Q 3 4 this 3 526  9 min_value 1 470  9 max_value 1 470  
160 14 Dtool_VvimeMf3 6 171 470 0 14 Dtool_VvimeMf3 1 4 this 3 530  
161 14 Dtool_VvimCsl_ 6 172 470 0 14 Dtool_VvimCsl_ 1 4 this 3 530  
162 14 Dtool_VvimTVKa 4 173 466 0 14 Dtool_VvimTVKa 2 4 this 3 526  11 scroll_size 1 470  
163 14 Dtool_Vvimuytl 6 174 470 0 14 Dtool_Vvimuytl 1 4 this 3 530  
164 14 Dtool_VvimLrt6 4 175 466 0 14 Dtool_VvimLrt6 2 4 this 3 526  9 page_size 1 470  
165 14 Dtool_Vvimd7Uj 6 176 470 0 14 Dtool_Vvimd7Uj 1 4 this 3 530  
166 14 Dtool_VvimmiFz 4 177 466 0 14 Dtool_VvimmiFz 2 4 this 3 526  5 value 1 470  
167 14 Dtool_VvimEO6y 6 178 470 0 14 Dtool_VvimEO6y 1 4 this 3 530  
168 14 Dtool_Vvima2Og 4 179 466 0 14 Dtool_Vvima2Og 2 4 this 3 526  5 ratio 1 470  
169 14 Dtool_VvimoTFg 6 180 470 0 14 Dtool_VvimoTFg 1 4 this 3 530  
170 14 Dtool_VvimpgjZ 6 181 473 0 14 Dtool_VvimpgjZ 1 4 this 3 530  
171 14 Dtool_VvimjShu 4 182 466 0 14 Dtool_VvimjShu 2 4 this 3 526  12 resize_thumb 1 473  
172 14 Dtool_VvimBiRH 6 183 473 0 14 Dtool_VvimBiRH 1 4 this 3 530  
173 14 Dtool_VvimChUu 4 184 466 0 14 Dtool_VvimChUu 2 4 this 3 526  13 manage_pieces 1 473  
174 14 Dtool_VvimPeLd 6 185 473 0 14 Dtool_VvimPeLd 1 4 this 3 530  
175 14 Dtool_VvimdKp3 4 186 466 0 14 Dtool_VvimdKp3 2 4 this 3 526  12 thumb_button 1 500  
176 14 Dtool_VvimFdHp 4 187 466 0 14 Dtool_VvimFdHp 1 4 this 3 526  
177 14 Dtool_Vvim5cko 7 188 500 0 14 Dtool_Vvim5cko 1 4 this 3 530  
178 14 Dtool_VvimDxPf 4 189 466 0 14 Dtool_VvimDxPf 2 4 this 3 526  11 left_button 1 500  
179 14 Dtool_Vvim1ipM 4 190 466 0 14 Dtool_Vvim1ipM 1 4 this 3 526  
180 14 Dtool_Vvim3LGY 7 191 500 0 14 Dtool_Vvim3LGY 1 4 this 3 530  
181 14 Dtool_VvimiqT0 4 192 466 0 14 Dtool_VvimiqT0 2 4 this 3 526  12 right_button 1 500  
182 14 Dtool_VvimMNgC 4 193 466 0 14 Dtool_VvimMNgC 1 4 this 3 526  
183 14 Dtool_VvimM5Pl 7 194 500 0 14 Dtool_VvimM5Pl 1 4 this 3 530  
184 14 Dtool_Vvim363P 6 195 480 0 14 Dtool_Vvim363P 0 
185 14 Dtool_VvimZSEH 6 196 480 0 14 Dtool_VvimZSEH 1 4 this 3 530  
186 14 Dtool_Vvimt4tr 4 197 466 0 14 Dtool_Vvimt4tr 2 4 this 3 526  6 active 1 473  
187 14 Dtool_VvimGi50 4 198 466 0 14 Dtool_VvimGi50 1 4 this 3 526  
188 14 Dtool_VvimFoWi 4 199 466 0 14 Dtool_VvimFoWi 1 4 this 3 526  
189 14 Dtool_Vvim7cbW 7 200 499 0 14 Dtool_Vvim7cbW 0 
190 14 Dtool_VvimLrhQ 7 159 481 0 14 Dtool_VvimLrhQ 1 4 this 3 526  
191 14 Dtool_Vvim7_aQ 7 160 526 373 14 Dtool_Vvim7_aQ 1 4 this 3 481  
192 14 Dtool_Vvimnq81 7 207 532 414 14 Dtool_Vvimnq81 1 4 name 1 480  
193 14 Dtool_VvimtOZ5 7 207 532 414 14 Dtool_VvimtOZ5 0 
194 14 Dtool_VvimLvlF 4 209 466 0 14 Dtool_VvimLvlF 9 4 this 3 532  5 width 1 470  6 height 1 470  4 left 1 470  5 right 1 470  6 bottom 1 470  3 top 1 470  12 slider_width 1 470  5 bevel 1 470  
195 14 Dtool_Vvimz1Uo 4 210 466 0 14 Dtool_Vvimz1Uo 2 4 this 3 532  13 virtual_frame 1 467  
196 14 Dtool_VvimmjjM 4 210 466 0 14 Dtool_VvimmjjM 5 4 this 3 532  4 left 1 470  5 right 1 470  6 bottom 1 470  3 top 1 470  
197 14 Dtool_Vvimz_HG 6 211 467 0 14 Dtool_Vvimz_HG 1 4 this 3 533  
198 14 Dtool_VvimWAhW 6 212 473 0 14 Dtool_VvimWAhW 1 4 this 3 533  
199 14 Dtool_Vvim7tSu 4 213 466 0 14 Dtool_Vvim7tSu 1 4 this 3 532  
200 14 Dtool_VvimJBOr 4 214 466 0 14 Dtool_VvimJBOr 2 4 this 3 532  13 manage_pieces 1 473  
201 14 Dtool_VvimukAM 6 215 473 0 14 Dtool_VvimukAM 1 4 this 3 533  
202 14 Dtool_VvimaZQS 4 216 466 0 14 Dtool_VvimaZQS 2 4 this 3 532  9 auto_hide 1 473  
203 14 Dtool_Vvimaze6 6 217 473 0 14 Dtool_Vvimaze6 1 4 this 3 533  
204 14 Dtool_VvimXGGG 4 218 466 0 14 Dtool_VvimXGGG 2 4 this 3 532  17 horizontal_slider 1 526  
205 14 Dtool_VvimoFmy 4 219 466 0 14 Dtool_VvimoFmy 1 4 this 3 532  
206 14 Dtool_Vvim_mYS 7 220 526 373 14 Dtool_Vvim_mYS 1 4 this 3 533  
207 14 Dtool_VvimceOb 4 221 466 0 14 Dtool_VvimceOb 2 4 this 3 532  15 vertical_slider 1 526  
208 14 Dtool_VvimVE8o 4 222 466 0 14 Dtool_VvimVE8o 1 4 this 3 532  
209 14 Dtool_VvimTwGd 7 223 526 373 14 Dtool_VvimTwGd 1 4 this 3 533  
210 14 Dtool_VvimeLeF 4 224 466 0 14 Dtool_VvimeLeF 1 4 this 3 532  
211 14 Dtool_VvimOXJ4 4 225 466 0 14 Dtool_VvimOXJ4 1 4 this 3 532  
212 14 Dtool_VvimoXd4 7 226 499 0 14 Dtool_VvimoXd4 0 
213 14 Dtool_Vvimt2Mz 7 202 519 0 14 Dtool_Vvimt2Mz 1 4 this 3 532  
214 14 Dtool_VvimJsB_ 7 203 532 414 14 Dtool_VvimJsB_ 1 4 this 3 519  
215 14 Dtool_Vvim3gol 7 228 535 0 14 Dtool_Vvim3gol 1 4 name 1 480  
216 14 Dtool_VvimBDaN 7 228 535 0 14 Dtool_VvimBDaN 0 
217 14 Dtool_VvimeliW 4 229 466 0 14 Dtool_VvimeliW 4 4 this 3 535  5 width 1 470  6 height 1 470  5 range 1 470  
218 14 Dtool_VvimqD51 4 230 466 0 14 Dtool_VvimqD51 2 4 this 3 535  5 range 1 470  
219 14 Dtool_Vvim0i4i 6 231 470 0 14 Dtool_Vvim0i4i 1 4 this 3 536  
220 14 Dtool_VvimMBDg 4 232 466 0 14 Dtool_VvimMBDg 2 4 this 3 535  5 value 1 470  
221 14 Dtool_VvimTfCN 6 233 470 0 14 Dtool_VvimTfCN 1 4 this 3 536  
222 14 Dtool_VvimnaCx 6 234 470 0 14 Dtool_VvimnaCx 1 4 this 3 536  
223 14 Dtool_VvimsJct 4 235 466 0 14 Dtool_VvimsJct 2 4 this 3 535  5 style 1 464  
224 14 Dtool_VvimAw4C 7 236 463 228 14 Dtool_VvimAw4C 1 4 this 3 536  
225 14 Dtool_VvimqfJI 7 237 499 0 14 Dtool_VvimqfJI 0 
96
443 12 PGFrameStyle 26625 12 PGFrameStyle 12 PGFrameStyle 0 0 0 1 226 228 0 15 227 229 230 231 232 233 234 235 236 237 238 239 240 241 242 0 0 0 1 444 185
////////////////////////////////////////////////////////////////////
//       Class : PGFrameStyle
// Description : 
////////////////////////////////////////////////////////////////////

444 4 Type 794624 18 PGFrameStyle::Type 18 PGFrameStyle::Type 443 0 0 0 0 0 0 0 0 6 6 T_none 20 PGFrameStyle::T_none 0 6 T_flat 20 PGFrameStyle::T_flat 1 11 T_bevel_out 25 PGFrameStyle::T_bevel_out 2 10 T_bevel_in 24 PGFrameStyle::T_bevel_in 3 8 T_groove 22 PGFrameStyle::T_groove 4 7 T_ridge 21 PGFrameStyle::T_ridge 5 0 0

445 6 PGItem 75777 6 PGItem 6 PGItem 0 0 0 1 243 0 0 50 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 0 1 0 446 0 0 0 0 705
////////////////////////////////////////////////////////////////////
//       Class : PGItem
// Description : This is the base class for all the various kinds of
//               gui widget objects.
//
//               It is a Node which corresponds to a rectangular
//               region on the screen, and it may have any number of
//               "state" subgraphs, one of which is rendered at any
//               given time according to its current state.
//
//               The PGItem node must be parented to the scene graph
//               somewhere beneath a PGTop node in order for this
//               behavior to work.
////////////////////////////////////////////////////////////////////

446 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

447 8 PGButton 75777 8 PGButton 8 PGButton 0 0 0 1 294 0 0 8 295 296 297 298 299 300 301 302 0 1 0 445 0 0 0 1 448 394
////////////////////////////////////////////////////////////////////
//       Class : PGButton
// Description : This is a particular kind of PGItem that is
//               specialized to behave like a normal button object.
//               It keeps track of its own state, and handles mouse
//               events sensibly.
////////////////////////////////////////////////////////////////////

448 5 State 794624 15 PGButton::State 15 PGButton::State 447 0 0 0 0 0 0 0 0 4 7 S_ready 17 PGButton::S_ready 0 11 S_depressed 21 PGButton::S_depressed 1 10 S_rollover 20 PGButton::S_rollover 2 10 S_inactive 20 PGButton::S_inactive 3 0 0

449 5 PGTop 75777 5 PGTop 5 PGTop 0 0 0 1 303 0 0 6 304 305 306 307 308 309 0 1 0 446 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : PGTop
// Description : The "top" node of the new Panda GUI system.  This
//               node must be parented to the 2-d scene graph, and all
//               PG objects should be parented to this node or
//               somewhere below it.  PG objects not parented within
//               this hierarchy will not be clickable.
//
//               This node begins the special traversal of the PG
//               objects that registers each node within the
//               MouseWatcher and forces everything to render in a
//               depth-first, left-to-right order, appropriate for 2-d
//               objects.
////////////////////////////////////////////////////////////////////

450 7 PGEntry 75777 7 PGEntry 7 PGEntry 0 0 0 1 310 0 0 37 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 0 1 0 445 0 0 0 1 451 791
////////////////////////////////////////////////////////////////////
//       Class : PGEntry
// Description : This is a particular kind of PGItem that handles
//               simple one-line or short multi-line text entries, of
//               the sort where the user can type any string.
//
//               A PGEntry does all of its internal manipulation on a
//               wide string, so it can store the full Unicode
//               character set.  The interface can support either the
//               wide string getters and setters, or the normal 8-bit
//               string getters and setters, which use whatever
//               encoding method is specified by the associated
//               TextNode.
////////////////////////////////////////////////////////////////////

451 5 State 794624 14 PGEntry::State 14 PGEntry::State 450 0 0 0 0 0 0 0 0 3 7 S_focus 16 PGEntry::S_focus 0 10 S_no_focus 19 PGEntry::S_no_focus 1 10 S_inactive 19 PGEntry::S_inactive 2 0 0

452 24 PGMouseWatcherBackground 75777 24 PGMouseWatcherBackground 24 PGMouseWatcherBackground 0 0 0 1 348 0 0 1 349 0 1 0 453 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : PGMouseWatcherBackground
// Description : This is a special kind of MouseWatcherRegion that
//               doesn't have a rectangle and is never active, but
//               just quietly listens for keypresses and sends them to
//               all the PGItems with background focus.
////////////////////////////////////////////////////////////////////

453 18 MouseWatcherRegion 2049 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 0 0 0 0 0 0 0 0 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

454 23 PGMouseWatcherParameter 26625 23 PGMouseWatcherParameter 23 PGMouseWatcherParameter 0 0 0 0 354 0 2 355 356 0 2 3 455 350 351 3 456 352 353 0 0 470
////////////////////////////////////////////////////////////////////
//       Class : PGMouseWatcherParameter
// Description : This specialization on MouseWatcherParameter allows
//               us to tag on additional elements to events for the
//               gui system, and also inherits from
//               TypedWritableReferenceCount so we can attach this thing to an
//               event.
////////////////////////////////////////////////////////////////////

455 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

456 21 MouseWatcherParameter 2049 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 0 0 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

457 14 PGVirtualFrame 75777 14 PGVirtualFrame 14 PGVirtualFrame 0 0 0 1 357 0 0 10 358 359 360 361 362 363 364 365 366 367 0 1 0 445 0 0 0 0 1361
////////////////////////////////////////////////////////////////////
//       Class : PGVirtualFrame
// Description : This represents a frame that is rendered as a window
//               onto another (possibly much larger) canvas.  You can
//               only see the portion of the canvas that is below the
//               window at any given time.
//
//               This works simply by automatically defining clipping
//               planes to be applied to a special child node, called
//               the canvas_node, of the PGVirtualFrame node.  Every
//               object that is parented to the canvas_node will be
//               clipped by the clip_frame.  Also, you can modify the
//               canvas_transform through convenience methods here,
//               which actually modifies the transform on the
//               canvas_node.
//
//               The net effect is that the virtual canvas is
//               arbitrarily large, and we can peek at it through the
//               clip_frame, and scroll through different parts of it
//               by modifying the canvas_transform.
//
//               See PGScrollFrame for a specialization of this class
//               that handles the traditional scrolling canvas, with
//               scroll bars.
////////////////////////////////////////////////////////////////////

458 11 PGSliderBar 26625 11 PGSliderBar 11 PGSliderBar 0 0 0 1 372 373 0 35 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 0 2 3 445 368 369 3 459 370 371 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : PGSliderBar
// Description : This is a particular kind of PGItem that draws a
//               little bar with a slider that moves from left to 
//               right indicating a value between the ranges.
//
//               This is used as an implementation for both
//               DirectSlider and for DirectScrollBar.
////////////////////////////////////////////////////////////////////

459 14 PGButtonNotify 1050625 14 PGButtonNotify 14 PGButtonNotify 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : PGButtonNotify
// Description : Objects that inherit from this class can receive
//               notify messages when a slider bar moves or otherwise
//               is reconfigured.
////////////////////////////////////////////////////////////////////

460 13 PGScrollFrame 26625 13 PGScrollFrame 13 PGScrollFrame 0 0 0 1 413 414 0 18 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 0 2 3 457 409 410 3 461 411 412 0 0 891
////////////////////////////////////////////////////////////////////
//       Class : PGScrollFrame
// Description : This is a special kind of frame that pretends to be
//               much larger than it actually is.  You can scroll
//               through the frame, as if you're looking through a
//               window at the larger frame beneath.  All children of
//               this frame node are scrolled and clipped as if they
//               were children of the larger, virtual frame.
//
//               This is implemented as a specialization of
//               PGVirtualFrame, which handles the meat of the virtual
//               canvas.  This class adds automatic support for scroll
//               bars, and restricts the virtual transform to
//               translate only (no scale or rotate).
////////////////////////////////////////////////////////////////////

461 17 PGSliderBarNotify 1050625 17 PGSliderBarNotify 17 PGSliderBarNotify 0 0 0 0 0 0 0 0 0 0 0 342
////////////////////////////////////////////////////////////////////
//       Class : PGSliderBarNotify
// Description : Objects that inherit from this class can receive
//               notify messages when a slider bar moves or otherwise
//               is reconfigured.
////////////////////////////////////////////////////////////////////

462 9 PGWaitBar 75777 9 PGWaitBar 9 PGWaitBar 0 0 0 1 433 0 0 9 434 435 436 437 438 439 440 441 442 0 1 0 445 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : PGWaitBar
// Description : This is a particular kind of PGItem that draws a
//               little bar that fills from left to right to indicate
//               a slow process gradually completing, like a
//               traditional "wait, loading" bar.
////////////////////////////////////////////////////////////////////

463 14 PGFrameStyle * 8576 14 PGFrameStyle * 14 PGFrameStyle * 0 0 443 0 0 0 0 0 0 0 0 0

464 20 PGFrameStyle const * 8576 20 PGFrameStyle const * 20 PGFrameStyle const * 0 0 465 0 0 0 0 0 0 0 0 0

465 18 PGFrameStyle const 8832 18 PGFrameStyle const 18 PGFrameStyle const 0 0 443 0 0 0 0 0 0 0 0 0

466 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

467 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 468 0 0 0 0 0 0 0 0 0

468 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 469 0 0 0 0 0 0 0 0 0

469 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

470 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

471 9 Texture * 8576 9 Texture * 9 Texture * 0 0 472 0 0 0 0 0 0 0 0 0

472 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

473 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

474 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 475 0 0 0 0 0 0 0 0 0

475 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 476 0 0 0 0 0 0 0 0 0

476 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

477 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 469 0 0 0 0 0 0 0 0 0

478 9 ostream * 8576 9 ostream * 9 ostream * 0 0 479 0 0 0 0 0 0 0 0 0

479 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

480 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

481 8 PGItem * 8576 8 PGItem * 8 PGItem * 0 0 445 0 0 0 0 0 0 0 0 0

482 14 PGItem const * 8576 14 PGItem const * 14 PGItem const * 0 0 483 0 0 0 0 0 0 0 0 0

483 12 PGItem const 8832 12 PGItem const 12 PGItem const 0 0 445 0 0 0 0 0 0 0 0 0

484 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

485 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 486 0 0 0 0 0 0 0 0 0

486 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

487 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 488 0 0 0 0 0 0 0 0 0

488 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 486 0 0 0 0 0 0 0 0 0

489 20 ButtonHandle const * 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 490 0 0 0 0 0 0 0 0 0

490 18 ButtonHandle const 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 491 0 0 0 0 0 0 0 0 0

491 12 ButtonHandle 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

492 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

493 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 492 0 0 0 0 0 0 0 0 0

494 12 AudioSound * 8576 12 AudioSound * 12 AudioSound * 0 0 495 0 0 0 0 0 0 0 0 0

495 10 AudioSound 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0

496 8 TextNode 2048 8 TextNode 8 TextNode 0 0 0 0 0 0 0 0 0 0 0 1336
////////////////////////////////////////////////////////////////////
//       Class : TextNode
// Description : The primary interface to this module.  This class
//               does basic text assembly; given a string of text and
//               a TextFont object, it creates a piece of geometry
//               that may be placed in the 3-d or 2-d world to
//               represent the indicated text.
//
//               The TextNode may be used in one of two ways.
//               Naively, it may simply be parented directly into the
//               scene graph and rendered as if it were a GeomNode; in
//               this mode, the actual polygon geometry that renders
//               the text is not directly visible or accessible, but
//               remains hidden within the TextNode.
//
//               The second way TextNode may be used is as a text
//               generator.  To use it in this way, do not parent the
//               TextNode to the scene graph; instead, set the
//               properties of the text and call generate() to return
//               an ordinary node, containing ordinary geometry, which
//               you may use however you like.  Each time you call
//               generate() a new node is returned.
////////////////////////////////////////////////////////////////////

497 10 TextNode * 8576 10 TextNode * 10 TextNode * 0 0 496 0 0 0 0 0 0 0 0 0

498 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

499 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 498 0 0 0 0 0 0 0 0 0

500 10 PGButton * 8576 10 PGButton * 10 PGButton * 0 0 447 0 0 0 0 0 0 0 0 0

501 16 PGButton const * 8576 16 PGButton const * 16 PGButton const * 0 0 502 0 0 0 0 0 0 0 0 0

502 14 PGButton const 8832 14 PGButton const 14 PGButton const 0 0 447 0 0 0 0 0 0 0 0 0

503 7 PGTop * 8576 7 PGTop * 7 PGTop * 0 0 449 0 0 0 0 0 0 0 0 0

504 14 MouseWatcher * 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 505 0 0 0 0 0 0 0 0 0

505 12 MouseWatcher 2048 12 MouseWatcher 12 MouseWatcher 0 0 0 0 0 0 0 0 0 0 0 1022
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
////////////////////////////////////////////////////////////////////

506 13 PGTop const * 8576 13 PGTop const * 13 PGTop const * 0 0 507 0 0 0 0 0 0 0 0 0

507 11 PGTop const 8832 11 PGTop const 11 PGTop const 0 0 449 0 0 0 0 0 0 0 0 0

508 17 MouseWatcherGroup 2048 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 0 0 0 0 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.
////////////////////////////////////////////////////////////////////

509 19 MouseWatcherGroup * 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 508 0 0 0 0 0 0 0 0 0

510 9 PGEntry * 8576 9 PGEntry * 9 PGEntry * 0 0 450 0 0 0 0 0 0 0 0 0

511 15 PGEntry const * 8576 15 PGEntry const * 15 PGEntry const * 0 0 512 0 0 0 0 0 0 0 0 0

512 13 PGEntry const 8832 13 PGEntry const 13 PGEntry const 0 0 450 0 0 0 0 0 0 0 0 0

513 26 PGMouseWatcherBackground * 8576 26 PGMouseWatcherBackground * 26 PGMouseWatcherBackground * 0 0 452 0 0 0 0 0 0 0 0 0

514 31 PGMouseWatcherParameter const * 8576 31 PGMouseWatcherParameter const * 31 PGMouseWatcherParameter const * 0 0 515 0 0 0 0 0 0 0 0 0

515 29 PGMouseWatcherParameter const 8832 29 PGMouseWatcherParameter const 29 PGMouseWatcherParameter const 0 0 454 0 0 0 0 0 0 0 0 0

516 25 PGMouseWatcherParameter * 8576 25 PGMouseWatcherParameter * 25 PGMouseWatcherParameter * 0 0 454 0 0 0 0 0 0 0 0 0

517 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 455 0 0 0 0 0 0 0 0 0

518 23 MouseWatcherParameter * 8576 23 MouseWatcherParameter * 23 MouseWatcherParameter * 0 0 456 0 0 0 0 0 0 0 0 0

519 16 PGVirtualFrame * 8576 16 PGVirtualFrame * 16 PGVirtualFrame * 0 0 457 0 0 0 0 0 0 0 0 0

520 22 PGVirtualFrame const * 8576 22 PGVirtualFrame const * 22 PGVirtualFrame const * 0 0 521 0 0 0 0 0 0 0 0 0

521 20 PGVirtualFrame const 8832 20 PGVirtualFrame const 20 PGVirtualFrame const 0 0 457 0 0 0 0 0 0 0 0 0

522 22 TransformState const * 8576 22 TransformState const * 22 TransformState const * 0 0 523 0 0 0 0 0 0 0 0 0

523 20 TransformState const 8832 20 TransformState const 20 TransformState const 0 0 524 0 0 0 0 0 0 0 0 0

524 14 TransformState 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

525 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 446 0 0 0 0 0 0 0 0 0

526 13 PGSliderBar * 8576 13 PGSliderBar * 13 PGSliderBar * 0 0 458 0 0 0 0 0 0 0 0 0

527 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 528 0 0 0 0 0 0 0 0 0

528 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 529 0 0 0 0 0 0 0 0 0

529 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

530 19 PGSliderBar const * 8576 19 PGSliderBar const * 19 PGSliderBar const * 0 0 531 0 0 0 0 0 0 0 0 0

531 17 PGSliderBar const 8832 17 PGSliderBar const 17 PGSliderBar const 0 0 458 0 0 0 0 0 0 0 0 0

532 15 PGScrollFrame * 8576 15 PGScrollFrame * 15 PGScrollFrame * 0 0 460 0 0 0 0 0 0 0 0 0

533 21 PGScrollFrame const * 8576 21 PGScrollFrame const * 21 PGScrollFrame const * 0 0 534 0 0 0 0 0 0 0 0 0

534 19 PGScrollFrame const 8832 19 PGScrollFrame const 19 PGScrollFrame const 0 0 460 0 0 0 0 0 0 0 0 0

535 11 PGWaitBar * 8576 11 PGWaitBar * 11 PGWaitBar * 0 0 462 0 0 0 0 0 0 0 0 0

536 17 PGWaitBar const * 8576 17 PGWaitBar const * 17 PGWaitBar const * 0 0 537 0 0 0 0 0 0 0 0 0

537 15 PGWaitBar const 8832 15 PGWaitBar const 15 PGWaitBar const 0 0 462 0 0 0 0 0 0 0 0 0

538 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
