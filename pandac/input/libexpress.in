1145553852
2 2
10 libexpress 4 Koxt 12 pandaexpress 
818
895 7 ~Config 4 1713 60 Config::Config< ConfigureGetConfig_config_express >::~Config 0 0 0
67
Config::Config< ConfigureGetConfig_config_express >::~Config(void);

896 7 GetBool 4 1713 60 Config::Config< ConfigureGetConfig_config_express >::GetBool 0 2 1 2 0
121
static bool Config::Config< ConfigureGetConfig_config_express >::GetBool(basic_string< char > const sym, bool def = (0));

897 6 GetInt 4 1713 59 Config::Config< ConfigureGetConfig_config_express >::GetInt 0 2 3 4 0
118
static int Config::Config< ConfigureGetConfig_config_express >::GetInt(basic_string< char > const sym, int def = (0));

898 8 GetFloat 4 1713 61 Config::Config< ConfigureGetConfig_config_express >::GetFloat 0 2 5 6 0
124
static float Config::Config< ConfigureGetConfig_config_express >::GetFloat(basic_string< char > const sym, float def = (0));

899 9 GetDouble 4 1713 62 Config::Config< ConfigureGetConfig_config_express >::GetDouble 0 2 7 8 0
127
static double Config::Config< ConfigureGetConfig_config_express >::GetDouble(basic_string< char > const sym, double def = (0));

900 9 GetString 4 1713 62 Config::Config< ConfigureGetConfig_config_express >::GetString 0 2 9 10 0
162
static basic_string< char > Config::Config< ConfigureGetConfig_config_express >::GetString(basic_string< char > const sym, basic_string< char > const def = (""));

901 12 ~ConfigFlags 4 1714 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

902 16 get_default_page 4 1717 28 ConfigPage::get_default_page 0 1 11 0
54
static ConfigPage *ConfigPage::get_default_page(void);

903 14 get_local_page 4 1717 26 ConfigPage::get_local_page 0 1 12 0
52
static ConfigPage *ConfigPage::get_local_page(void);

904 8 get_name 4 1717 20 ConfigPage::get_name 0 1 13 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > const &ConfigPage::get_name(void) const;

905 10 is_special 4 1717 22 ConfigPage::is_special 0 1 14 517
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
47
inline bool ConfigPage::is_special(void) const;

906 11 is_implicit 4 1717 23 ConfigPage::is_implicit 0 1 15 437
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
////////////////////////////////////////////////////////////////////
48
inline bool ConfigPage::is_implicit(void) const;

907 12 get_page_seq 4 1717 24 ConfigPage::get_page_seq 0 1 16 728
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
////////////////////////////////////////////////////////////////////
48
inline int ConfigPage::get_page_seq(void) const;

908 15 get_trust_level 4 1717 27 ConfigPage::get_trust_level 0 1 17 592
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
////////////////////////////////////////////////////////////////////
51
inline int ConfigPage::get_trust_level(void) const;

909 13 get_signature 4 1717 25 ConfigPage::get_signature 0 1 18 399
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ConfigPage::get_signature(void) const;

910 5 clear 4 1717 17 ConfigPage::clear 0 1 19 0
29
void ConfigPage::clear(void);

911 8 read_prc 4 1717 20 ConfigPage::read_prc 0 1 20 0
39
bool ConfigPage::read_prc(istream &in);

912 16 make_declaration 4 1717 28 ConfigPage::make_declaration 0 2 21 22 0
121
ConfigDeclaration *ConfigPage::make_declaration(basic_string< char > const &variable, basic_string< char > const &value);

913 18 delete_declaration 4 1717 30 ConfigPage::delete_declaration 0 1 23 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

914 20 get_num_declarations 4 1717 32 ConfigPage::get_num_declarations 0 1 24 0
49
int ConfigPage::get_num_declarations(void) const;

915 15 get_declaration 4 1717 27 ConfigPage::get_declaration 0 1 25 0
66
ConfigDeclaration const *ConfigPage::get_declaration(int n) const;

916 17 get_variable_name 4 1717 29 ConfigPage::get_variable_name 0 1 26 0
64
basic_string< char > ConfigPage::get_variable_name(int n) const;

917 16 get_string_value 4 1717 28 ConfigPage::get_string_value 0 1 27 0
63
basic_string< char > ConfigPage::get_string_value(int n) const;

918 16 is_variable_used 4 1717 28 ConfigPage::is_variable_used 0 1 28 0
47
bool ConfigPage::is_variable_used(int n) const;

919 6 output 4 1717 18 ConfigPage::output 0 1 29 0
44
void ConfigPage::output(ostream &out) const;

920 5 write 4 1717 17 ConfigPage::write 0 1 30 0
43
void ConfigPage::write(ostream &out) const;

921 21 loaded_implicit_pages 4 1718 40 ConfigPageManager::loaded_implicit_pages 0 1 31 1096
// Filename: configPageManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
////////////////////////////////////////////////////////////////////
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

922 19 load_implicit_pages 4 1718 38 ConfigPageManager::load_implicit_pages 0 1 32 536
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
////////////////////////////////////////////////////////////////////
57
inline void ConfigPageManager::load_implicit_pages(void);

923 21 reload_implicit_pages 4 1718 40 ConfigPageManager::reload_implicit_pages 0 1 33 0
52
void ConfigPageManager::reload_implicit_pages(void);

924 15 get_search_path 4 1718 34 ConfigPageManager::get_search_path 0 1 34 556
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
////////////////////////////////////////////////////////////////////
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

925 20 get_num_prc_patterns 4 1718 39 ConfigPageManager::get_num_prc_patterns 0 1 35 574
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
////////////////////////////////////////////////////////////////////
63
inline int ConfigPageManager::get_num_prc_patterns(void) const;

926 15 get_prc_pattern 4 1718 34 ConfigPageManager::get_prc_pattern 0 1 36 385
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > ConfigPageManager::get_prc_pattern(int n) const;

927 31 get_num_prc_executable_patterns 4 1718 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 37 533
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
////////////////////////////////////////////////////////////////////
74
inline int ConfigPageManager::get_num_prc_executable_patterns(void) const;

928 26 get_prc_executable_pattern 4 1718 45 ConfigPageManager::get_prc_executable_pattern 0 1 38 424
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > ConfigPageManager::get_prc_executable_pattern(int n) const;

929 18 make_explicit_page 4 1718 37 ConfigPageManager::make_explicit_page 0 1 39 0
84
ConfigPage *ConfigPageManager::make_explicit_page(basic_string< char > const &name);

930 20 delete_explicit_page 4 1718 39 ConfigPageManager::delete_explicit_page 0 1 40 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

931 22 get_num_implicit_pages 4 1718 41 ConfigPageManager::get_num_implicit_pages 0 1 41 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_implicit_pages(void) const;

932 17 get_implicit_page 4 1718 36 ConfigPageManager::get_implicit_page 0 1 42 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_implicit_page(int n) const;

933 22 get_num_explicit_pages 4 1718 41 ConfigPageManager::get_num_explicit_pages 0 1 43 490
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_explicit_pages(void) const;

934 17 get_explicit_page 4 1718 36 ConfigPageManager::get_explicit_page 0 1 44 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_explicit_page(int n) const;

935 6 output 4 1718 25 ConfigPageManager::output 0 1 45 0
51
void ConfigPageManager::output(ostream &out) const;

936 5 write 4 1718 24 ConfigPageManager::write 0 1 46 0
50
void ConfigPageManager::write(ostream &out) const;

937 14 get_global_ptr 4 1718 33 ConfigPageManager::get_global_ptr 0 1 47 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

938 8 get_name 4 1720 28 ConfigVariableBase::get_name 0 1 65 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &ConfigVariableBase::get_name(void) const;

939 14 get_value_type 4 1720 34 ConfigVariableBase::get_value_type 0 1 66 386
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

940 15 get_description 4 1720 35 ConfigVariableBase::get_description 0 1 67 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &ConfigVariableBase::get_description(void) const;

941 9 get_flags 4 1720 29 ConfigVariableBase::get_flags 0 1 68 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableBase::get_flags(void) const;

942 9 is_closed 4 1720 29 ConfigVariableBase::is_closed 0 1 69 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::is_closed(void) const;

943 15 get_trust_level 4 1720 35 ConfigVariableBase::get_trust_level 0 1 70 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableBase::get_trust_level(void) const;

944 10 is_dynamic 4 1720 30 ConfigVariableBase::is_dynamic 0 1 71 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableBase::is_dynamic(void) const;

945 17 clear_local_value 4 1720 37 ConfigVariableBase::clear_local_value 0 1 72 525
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariableBase::clear_local_value(void);

946 15 has_local_value 4 1720 35 ConfigVariableBase::has_local_value 0 1 73 403
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableBase::has_local_value(void) const;

947 9 has_value 4 1720 29 ConfigVariableBase::has_value 0 1 74 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::has_value(void) const;

948 6 output 4 1720 26 ConfigVariableBase::output 0 1 75 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableBase::output(ostream &out) const;

949 5 write 4 1720 25 ConfigVariableBase::write 0 1 76 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableBase::write(ostream &out) const;

950 14 ConfigVariable 4 1719 30 ConfigVariable::ConfigVariable 0 1 48 1858
// Filename: configVariable.I
// Created by:  drose (18Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
////////////////////////////////////////////////////////////////////
72
inline ConfigVariable::ConfigVariable(basic_string< char > const &name);

951 15 ~ConfigVariable 4 1719 31 ConfigVariable::~ConfigVariable 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline ConfigVariable::~ConfigVariable(void);

952 17 get_default_value 4 1719 33 ConfigVariable::get_default_value 0 1 49 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
78
inline ConfigDeclaration const *ConfigVariable::get_default_value(void) const;

953 16 get_string_value 4 1719 32 ConfigVariable::get_string_value 0 1 50 315
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &ConfigVariable::get_string_value(void) const;

954 16 set_string_value 4 1719 32 ConfigVariable::set_string_value 0 1 51 443
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
////////////////////////////////////////////////////////////////////
80
inline void ConfigVariable::set_string_value(basic_string< char > const &value);

955 13 get_num_words 4 1719 29 ConfigVariable::get_num_words 0 1 52 402
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_num_words(void) const;

956 15 has_string_word 4 1719 31 ConfigVariable::has_string_word 0 1 53 446
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_string_word(int n) const;

957 13 has_bool_word 4 1719 29 ConfigVariable::has_bool_word 0 1 54 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::has_bool_word(int n) const;

958 12 has_int_word 4 1719 28 ConfigVariable::has_int_word 0 1 55 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariable::has_int_word(int n) const;

959 15 has_double_word 4 1719 31 ConfigVariable::has_double_word 0 1 56 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_double_word(int n) const;

960 15 get_string_word 4 1719 31 ConfigVariable::get_string_word 0 1 57 401
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > ConfigVariable::get_string_word(int n) const;

961 13 get_bool_word 4 1719 29 ConfigVariable::get_bool_word 0 1 58 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::get_bool_word(int n) const;

962 12 get_int_word 4 1719 28 ConfigVariable::get_int_word 0 1 59 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_int_word(int n) const;

963 15 get_double_word 4 1719 31 ConfigVariable::get_double_word 0 1 60 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
59
inline double ConfigVariable::get_double_word(int n) const;

964 15 set_string_word 4 1719 31 ConfigVariable::set_string_word 0 1 61 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
86
inline void ConfigVariable::set_string_word(int n, basic_string< char > const &value);

965 13 set_bool_word 4 1719 29 ConfigVariable::set_bool_word 0 1 62 324
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
61
inline void ConfigVariable::set_bool_word(int n, bool value);

966 12 set_int_word 4 1719 28 ConfigVariable::set_int_word 0 1 63 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariable::set_int_word(int n, int value);

967 15 set_double_word 4 1719 31 ConfigVariable::set_double_word 0 1 64 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariable::set_double_word(int n, double value);

968 18 ConfigVariableBool 4 1721 38 ConfigVariableBool::ConfigVariableBool 0 7 77 78 79 80 81 82 83 1379
// Filename: configVariableBool.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
inline ConfigVariableBool::ConfigVariableBool(basic_string< char > const &name);

969 10 operator = 4 1721 30 ConfigVariableBool::operator = 0 1 84 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
55
inline void ConfigVariableBool::operator =(bool value);

970 17 operator typecast 4 1721 37 ConfigVariableBool::operator typecast 0 1 92 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableBool::operator typecast(void) const;

971 4 size 4 1721 24 ConfigVariableBool::size 0 1 85 277
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableBool::size(void) const;

972 11 operator [] 4 1721 31 ConfigVariableBool::operator [] 0 1 86 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariableBool::operator [](int n) const;

973 9 set_value 4 1721 29 ConfigVariableBool::set_value 0 1 87 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
54
inline void ConfigVariableBool::set_value(bool value);

974 9 get_value 4 1721 29 ConfigVariableBool::get_value 0 1 88 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_value(void) const;

975 17 get_default_value 4 1721 37 ConfigVariableBool::get_default_value 0 1 89 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableBool::get_default_value(void) const;

976 8 get_word 4 1721 28 ConfigVariableBool::get_word 0 1 90 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_word(int n) const;

977 8 set_word 4 1721 28 ConfigVariableBool::set_word 0 1 91 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
60
inline void ConfigVariableBool::set_word(int n, bool value);

978 19 ~ConfigVariableBool 4 1721 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

979 20 ConfigVariableDouble 4 1722 42 ConfigVariableDouble::ConfigVariableDouble 0 7 93 94 95 96 97 98 99 1387
// Filename: configVariableDouble.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
84
inline ConfigVariableDouble::ConfigVariableDouble(basic_string< char > const &name);

980 10 operator = 4 1722 32 ConfigVariableDouble::operator = 0 1 100 269
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableDouble::operator =(double value);

981 17 operator typecast 4 1722 39 ConfigVariableDouble::operator typecast 0 1 108 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
66
inline double ConfigVariableDouble::operator typecast(void) const;

982 4 size 4 1722 26 ConfigVariableDouble::size 0 1 101 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
50
inline int ConfigVariableDouble::size(void) const;

983 11 operator [] 4 1722 33 ConfigVariableDouble::operator [] 0 1 102 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
61
inline double ConfigVariableDouble::operator [](int n) const;

984 9 set_value 4 1722 31 ConfigVariableDouble::set_value 0 1 103 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableDouble::set_value(double value);

985 9 get_value 4 1722 31 ConfigVariableDouble::get_value 0 1 104 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_value(void) const;

986 17 get_default_value 4 1722 39 ConfigVariableDouble::get_default_value 0 1 105 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline double ConfigVariableDouble::get_default_value(void) const;

987 8 get_word 4 1722 30 ConfigVariableDouble::get_word 0 1 106 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_word(int n) const;

988 8 set_word 4 1722 30 ConfigVariableDouble::set_word 0 1 107 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableDouble::set_word(int n, double value);

989 21 ~ConfigVariableDouble 4 1722 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

990 22 ConfigVariableFilename 4 1723 46 ConfigVariableFilename::ConfigVariableFilename 0 4 109 110 111 112 1158
// Filename: configVariableFilename.I
// Created by:  drose (22Nov04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
88
inline ConfigVariableFilename::ConfigVariableFilename(basic_string< char > const &name);

991 10 operator = 4 1723 34 ConfigVariableFilename::operator = 0 1 113 271
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
70
inline void ConfigVariableFilename::operator =(Filename const &value);

992 17 operator typecast 4 1723 41 ConfigVariableFilename::operator typecast 0 1 132 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Filename typecast operator
//       Access: Published
//  Description: Returns the variable's value as a Filename.
////////////////////////////////////////////////////////////////////
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

993 5 c_str 4 1723 29 ConfigVariableFilename::c_str 0 1 114 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char const *ConfigVariableFilename::c_str(void) const;

994 5 empty 4 1723 29 ConfigVariableFilename::empty 0 1 115 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableFilename::empty(void) const;

995 6 length 4 1723 30 ConfigVariableFilename::length 0 1 116 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline unsigned int ConfigVariableFilename::length(void) const;

996 11 operator [] 4 1723 35 ConfigVariableFilename::operator [] 0 1 117 237
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char ConfigVariableFilename::operator [](int n) const;

997 12 get_fullpath 4 1723 36 ConfigVariableFilename::get_fullpath 0 1 118 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > ConfigVariableFilename::get_fullpath(void) const;

998 11 get_dirname 4 1723 35 ConfigVariableFilename::get_dirname 0 1 119 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > ConfigVariableFilename::get_dirname(void) const;

999 12 get_basename 4 1723 36 ConfigVariableFilename::get_basename 0 1 120 398
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > ConfigVariableFilename::get_basename(void) const;

1000 25 get_fullpath_wo_extension 4 1723 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 121 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1001 25 get_basename_wo_extension 4 1723 49 ConfigVariableFilename::get_basename_wo_extension 0 1 122 333
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > ConfigVariableFilename::get_basename_wo_extension(void) const;

1002 13 get_extension 4 1723 37 ConfigVariableFilename::get_extension 0 1 123 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableFilename::get_extension(void) const;

1003 11 operator == 4 1723 35 ConfigVariableFilename::operator == 0 1 124 273
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Equality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1004 11 operator != 4 1723 35 ConfigVariableFilename::operator != 0 1 125 275
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Inequality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1005 10 operator < 4 1723 34 ConfigVariableFilename::operator < 0 1 126 237
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Ordering operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1006 9 set_value 4 1723 33 ConfigVariableFilename::set_value 0 1 127 270
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1007 9 get_value 4 1723 33 ConfigVariableFilename::get_value 0 1 128 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
69
inline Filename const &ConfigVariableFilename::get_value(void) const;

1008 17 get_default_value 4 1723 41 ConfigVariableFilename::get_default_value 0 1 129 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1009 8 get_word 4 1723 32 ConfigVariableFilename::get_word 0 1 130 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_word(int n) const;

1010 8 set_word 4 1723 32 ConfigVariableFilename::set_word 0 1 131 342
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
75
inline void ConfigVariableFilename::set_word(int n, Filename const &value);

1011 23 ~ConfigVariableFilename 4 1723 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1012 17 ConfigVariableInt 4 1724 36 ConfigVariableInt::ConfigVariableInt 0 7 133 134 135 136 137 138 139 1375
// Filename: configVariableInt.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
inline ConfigVariableInt::ConfigVariableInt(basic_string< char > const &name);

1013 10 operator = 4 1724 29 ConfigVariableInt::operator = 0 1 140 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
53
inline void ConfigVariableInt::operator =(int value);

1014 17 operator typecast 4 1724 36 ConfigVariableInt::operator typecast 0 1 148 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
60
inline int ConfigVariableInt::operator typecast(void) const;

1015 4 size 4 1724 23 ConfigVariableInt::size 0 1 141 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
47
inline int ConfigVariableInt::size(void) const;

1016 11 operator [] 4 1724 30 ConfigVariableInt::operator [] 0 1 142 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
55
inline int ConfigVariableInt::operator [](int n) const;

1017 9 set_value 4 1724 28 ConfigVariableInt::set_value 0 1 143 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
52
inline void ConfigVariableInt::set_value(int value);

1018 9 get_value 4 1724 28 ConfigVariableInt::get_value 0 1 144 257
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_value(void) const;

1019 17 get_default_value 4 1724 36 ConfigVariableInt::get_default_value 0 1 145 273
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
60
inline int ConfigVariableInt::get_default_value(void) const;

1020 8 get_word 4 1724 27 ConfigVariableInt::get_word 0 1 146 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_word(int n) const;

1021 8 set_word 4 1724 27 ConfigVariableInt::set_word 0 1 147 337
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableInt::set_word(int n, int value);

1022 18 ~ConfigVariableInt 4 1724 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1023 18 ConfigVariableList 4 1725 38 ConfigVariableList::ConfigVariableList 0 3 149 150 151 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
153
inline ConfigVariableList::ConfigVariableList(basic_string< char > const &name, basic_string< char > const &description = ((string())), int flags = (0));

1024 19 ~ConfigVariableList 4 1725 39 ConfigVariableList::~ConfigVariableList 0 0 912
// Filename: configVariableList.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline ConfigVariableList::~ConfigVariableList(void);

1025 14 get_num_values 4 1725 34 ConfigVariableList::get_num_values 0 1 152 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
////////////////////////////////////////////////////////////////////
58
inline int ConfigVariableList::get_num_values(void) const;

1026 16 get_string_value 4 1725 36 ConfigVariableList::get_string_value 0 1 153 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableList::get_string_value(int n) const;

1027 21 get_num_unique_values 4 1725 41 ConfigVariableList::get_num_unique_values 0 1 154 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
////////////////////////////////////////////////////////////////////
65
inline int ConfigVariableList::get_num_unique_values(void) const;

1028 16 get_unique_value 4 1725 36 ConfigVariableList::get_unique_value 0 1 155 281
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableList::get_unique_value(int n) const;

1029 4 size 4 1725 24 ConfigVariableList::size 0 1 156 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableList::size(void) const;

1030 11 operator [] 4 1725 31 ConfigVariableList::operator [] 0 1 157 448
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::operator []
//       Access: Published
//  Description: Returns the nth unique value of the variable.  Note
//               that the indexing operator returns the list of unique
//               values, and so the maximum range is
//               get_num_unique_values().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > ConfigVariableList::operator [](int n) const;

1031 6 output 4 1725 26 ConfigVariableList::output 0 1 158 0
52
void ConfigVariableList::output(ostream &out) const;

1032 5 write 4 1725 25 ConfigVariableList::write 0 1 159 0
51
void ConfigVariableList::write(ostream &out) const;

1033 13 make_variable 4 1726 36 ConfigVariableManager::make_variable 0 1 160 0
91
ConfigVariableCore *ConfigVariableManager::make_variable(basic_string< char > const &name);

1034 22 make_variable_template 4 1726 45 ConfigVariableManager::make_variable_template 0 3 161 162 163 0
248
ConfigVariableCore *ConfigVariableManager::make_variable_template(basic_string< char > const &pattern, ConfigFlags::ValueType type, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1035 17 get_num_variables 4 1726 40 ConfigVariableManager::get_num_variables 0 1 164 1012
// Filename: configVariableManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
////////////////////////////////////////////////////////////////////
64
inline int ConfigVariableManager::get_num_variables(void) const;

1036 12 get_variable 4 1726 35 ConfigVariableManager::get_variable 0 1 165 290
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
////////////////////////////////////////////////////////////////////
76
inline ConfigVariableCore *ConfigVariableManager::get_variable(int n) const;

1037 17 get_variable_name 4 1726 40 ConfigVariableManager::get_variable_name 0 1 166 0
75
basic_string< char > ConfigVariableManager::get_variable_name(int n) const;

1038 16 is_variable_used 4 1726 39 ConfigVariableManager::is_variable_used 0 1 167 0
58
bool ConfigVariableManager::is_variable_used(int n) const;

1039 6 output 4 1726 29 ConfigVariableManager::output 0 1 168 0
55
void ConfigVariableManager::output(ostream &out) const;

1040 5 write 4 1726 28 ConfigVariableManager::write 0 1 169 0
54
void ConfigVariableManager::write(ostream &out) const;

1041 19 write_prc_variables 4 1726 42 ConfigVariableManager::write_prc_variables 0 1 170 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1042 21 list_unused_variables 4 1726 44 ConfigVariableManager::list_unused_variables 0 1 171 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1043 14 list_variables 4 1726 37 ConfigVariableManager::list_variables 0 1 172 0
55
void ConfigVariableManager::list_variables(void) const;

1044 22 list_dynamic_variables 4 1726 45 ConfigVariableManager::list_dynamic_variables 0 1 173 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1045 14 get_global_ptr 4 1726 37 ConfigVariableManager::get_global_ptr 0 1 174 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1046 24 ConfigVariableSearchPath 4 1727 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 3 175 176 177 925
// Filename: configVariableSearchPath.I
// Created by:  drose (21Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
165
inline ConfigVariableSearchPath::ConfigVariableSearchPath(basic_string< char > const &name, basic_string< char > const &description = ((string())), int flags = (0));

1047 25 ~ConfigVariableSearchPath 4 1727 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1048 17 operator typecast 4 1727 43 ConfigVariableSearchPath::operator typecast 0 1 194 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::DSearchPath typecast
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1049 9 get_value 4 1727 35 ConfigVariableSearchPath::get_value 0 1 178 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1050 17 clear_local_value 4 1727 43 ConfigVariableSearchPath::clear_local_value 0 1 179 359
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1051 5 clear 4 1727 31 ConfigVariableSearchPath::clear 0 1 180 347
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
50
inline void ConfigVariableSearchPath::clear(void);

1052 16 append_directory 4 1727 42 ConfigVariableSearchPath::append_directory 0 1 181 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
////////////////////////////////////////////////////////////////////
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1053 17 prepend_directory 4 1727 43 ConfigVariableSearchPath::prepend_directory 0 1 182 296
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
////////////////////////////////////////////////////////////////////
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1054 11 append_path 4 1727 37 ConfigVariableSearchPath::append_path 0 3 183 184 185 678
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////
138
inline void ConfigVariableSearchPath::append_path(basic_string< char > const &path, basic_string< char > const &separator = ((string())));

1055 12 prepend_path 4 1727 38 ConfigVariableSearchPath::prepend_path 0 1 186 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
////////////////////////////////////////////////////////////////////
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1056 8 is_empty 4 1727 34 ConfigVariableSearchPath::is_empty 0 1 187 309
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1057 19 get_num_directories 4 1727 45 ConfigVariableSearchPath::get_num_directories 0 1 188 298
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableSearchPath::get_num_directories(void) const;

1058 13 get_directory 4 1727 39 ConfigVariableSearchPath::get_directory 0 1 189 284
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
////////////////////////////////////////////////////////////////////
76
inline Filename const &ConfigVariableSearchPath::get_directory(int n) const;

1059 9 find_file 4 1727 35 ConfigVariableSearchPath::find_file 0 1 190 466
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
////////////////////////////////////////////////////////////////////
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1060 14 find_all_files 4 1727 40 ConfigVariableSearchPath::find_all_files 0 1 191 682
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////
115
inline int ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;

1061 6 output 4 1727 32 ConfigVariableSearchPath::output 0 1 192 232
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1062 5 write 4 1727 31 ConfigVariableSearchPath::write 0 1 193 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1063 20 ConfigVariableString 4 1728 42 ConfigVariableString::ConfigVariableString 0 4 195 196 197 198 1152
// Filename: configVariableString.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
84
inline ConfigVariableString::ConfigVariableString(basic_string< char > const &name);

1064 10 operator = 4 1728 32 ConfigVariableString::operator = 0 1 199 269
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
80
inline void ConfigVariableString::operator =(basic_string< char > const &value);

1065 17 operator typecast 4 1728 39 ConfigVariableString::operator typecast 0 1 212 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::string typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > const &ConfigVariableString::operator typecast(void) const;

1066 5 c_str 4 1728 27 ConfigVariableString::c_str 0 1 200 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char const *ConfigVariableString::c_str(void) const;

1067 5 empty 4 1728 27 ConfigVariableString::empty 0 1 201 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableString::empty(void) const;

1068 6 length 4 1728 28 ConfigVariableString::length 0 1 202 224
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline unsigned int ConfigVariableString::length(void) const;

1069 11 operator [] 4 1728 33 ConfigVariableString::operator [] 0 1 203 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char ConfigVariableString::operator [](int n) const;

1070 11 operator == 4 1728 33 ConfigVariableString::operator == 0 1 204 271
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Equality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline bool ConfigVariableString::operator ==(basic_string< char > const &other) const;

1071 11 operator != 4 1728 33 ConfigVariableString::operator != 0 1 205 273
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Inequality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline bool ConfigVariableString::operator !=(basic_string< char > const &other) const;

1072 10 operator < 4 1728 32 ConfigVariableString::operator < 0 1 206 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Ordering operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
86
inline bool ConfigVariableString::operator <(basic_string< char > const &other) const;

1073 9 set_value 4 1728 31 ConfigVariableString::set_value 0 1 207 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
79
inline void ConfigVariableString::set_value(basic_string< char > const &value);

1074 9 get_value 4 1728 31 ConfigVariableString::get_value 0 1 208 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &ConfigVariableString::get_value(void) const;

1075 17 get_default_value 4 1728 39 ConfigVariableString::get_default_value 0 1 209 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > ConfigVariableString::get_default_value(void) const;

1076 8 get_word 4 1728 30 ConfigVariableString::get_word 0 1 210 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > ConfigVariableString::get_word(int n) const;

1077 8 set_word 4 1728 30 ConfigVariableString::set_word 0 1 211 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
85
inline void ConfigVariableString::set_word(int n, basic_string< char > const &value);

1078 21 ~ConfigVariableString 4 1728 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1079 7 Results 4 1730 29 DSearchPath::Results::Results 0 2 237 238 0
36
DSearchPath::Results::Results(void);

1080 10 operator = 4 1730 32 DSearchPath::Results::operator = 0 1 239 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1081 8 ~Results 4 1730 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1082 5 clear 4 1730 27 DSearchPath::Results::clear 0 1 240 0
39
void DSearchPath::Results::clear(void);

1083 13 get_num_files 4 1730 35 DSearchPath::Results::get_num_files 0 1 241 0
52
int DSearchPath::Results::get_num_files(void) const;

1084 8 get_file 4 1730 30 DSearchPath::Results::get_file 0 1 242 0
60
Filename const &DSearchPath::Results::get_file(int n) const;

1085 11 DSearchPath 4 1729 24 DSearchPath::DSearchPath 0 5 213 214 215 216 217 0
31
DSearchPath::DSearchPath(void);

1086 10 operator = 4 1729 23 DSearchPath::operator = 0 1 218 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1087 12 ~DSearchPath 4 1729 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1088 5 clear 4 1729 18 DSearchPath::clear 0 1 219 0
30
void DSearchPath::clear(void);

1089 16 append_directory 4 1729 29 DSearchPath::append_directory 0 1 220 0
62
void DSearchPath::append_directory(Filename const &directory);

1090 17 prepend_directory 4 1729 30 DSearchPath::prepend_directory 0 1 221 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1091 11 append_path 4 1729 24 DSearchPath::append_path 0 3 222 223 224 0
118
void DSearchPath::append_path(basic_string< char > const &path, basic_string< char > const &separator = ((string())));

1092 12 prepend_path 4 1729 25 DSearchPath::prepend_path 0 1 225 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1093 8 is_empty 4 1729 21 DSearchPath::is_empty 0 1 226 0
39
bool DSearchPath::is_empty(void) const;

1094 19 get_num_directories 4 1729 32 DSearchPath::get_num_directories 0 1 227 0
49
int DSearchPath::get_num_directories(void) const;

1095 13 get_directory 4 1729 26 DSearchPath::get_directory 0 1 228 0
56
Filename const &DSearchPath::get_directory(int n) const;

1096 9 find_file 4 1729 22 DSearchPath::find_file 0 1 229 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1097 14 find_all_files 4 1729 27 DSearchPath::find_all_files 0 1 230 0
95
int DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;

1098 11 search_path 4 1729 24 DSearchPath::search_path 0 2 231 232 1203
// Filename: dSearchPath.I
// Created by:  drose (01Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Public, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
////////////////////////////////////////////////////////////////////
162
static inline Filename DSearchPath::search_path(Filename const &filename, basic_string< char > const &path, basic_string< char > const &separator = ((string())));

1099 6 output 4 1729 19 DSearchPath::output 0 2 233 234 0
99
void DSearchPath::output(ostream &out, basic_string< char > const &separator = ((string()))) const;

1100 5 write 4 1729 18 DSearchPath::write 0 2 235 236 0
68
void DSearchPath::write(ostream &out, int indent_level = (0)) const;

1101 24 has_environment_variable 4 1731 46 ExecutionEnvironment::has_environment_variable 0 1 243 1014
// Filename: executionEnvironment.I
// Created by:  drose (15May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
////////////////////////////////////////////////////////////////////
99
static inline bool ExecutionEnvironment::has_environment_variable(basic_string< char > const &var);

1102 24 get_environment_variable 4 1731 46 ExecutionEnvironment::get_environment_variable 0 1 244 396
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
////////////////////////////////////////////////////////////////////
115
static inline basic_string< char > ExecutionEnvironment::get_environment_variable(basic_string< char > const &var);

1103 24 set_environment_variable 4 1731 46 ExecutionEnvironment::set_environment_variable 0 1 245 329
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
////////////////////////////////////////////////////////////////////
134
static inline void ExecutionEnvironment::set_environment_variable(basic_string< char > const &var, basic_string< char > const &value);

1104 27 shadow_environment_variable 4 1731 49 ExecutionEnvironment::shadow_environment_variable 0 1 246 588
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
////////////////////////////////////////////////////////////////////
137
static inline void ExecutionEnvironment::shadow_environment_variable(basic_string< char > const &var, basic_string< char > const &value);

1105 12 clear_shadow 4 1731 34 ExecutionEnvironment::clear_shadow 0 1 247 399
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
////////////////////////////////////////////////////////////////////
87
static inline void ExecutionEnvironment::clear_shadow(basic_string< char > const &var);

1106 13 expand_string 4 1731 35 ExecutionEnvironment::expand_string 0 1 248 0
97
static basic_string< char > ExecutionEnvironment::expand_string(basic_string< char > const &str);

1107 12 get_num_args 4 1731 34 ExecutionEnvironment::get_num_args 0 1 249 348
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
////////////////////////////////////////////////////////////////////
59
static inline int ExecutionEnvironment::get_num_args(void);

1108 7 get_arg 4 1731 29 ExecutionEnvironment::get_arg 0 1 250 462
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
////////////////////////////////////////////////////////////////////
72
static inline basic_string< char > ExecutionEnvironment::get_arg(int n);

1109 15 get_binary_name 4 1731 37 ExecutionEnvironment::get_binary_name 0 1 251 352
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
////////////////////////////////////////////////////////////////////
79
static inline basic_string< char > ExecutionEnvironment::get_binary_name(void);

1110 14 get_dtool_name 4 1731 36 ExecutionEnvironment::get_dtool_name 0 1 252 349
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
////////////////////////////////////////////////////////////////////
78
static inline basic_string< char > ExecutionEnvironment::get_dtool_name(void);

1111 7 get_cwd 4 1731 29 ExecutionEnvironment::get_cwd 0 1 253 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1112 21 ~ExecutionEnvironment 4 1731 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1113 8 Filename 4 1732 18 Filename::Filename 0 5 254 255 256 257 258 1341
// Filename: filename.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline Filename::Filename(basic_string< char > const &filename = (""));

1114 9 ~Filename 4 1732 19 Filename::~Filename 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline Filename::~Filename(void);

1115 13 text_filename 4 1732 23 Filename::text_filename 0 1 259 410
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
static inline Filename Filename::text_filename(basic_string< char > const &filename);

1116 15 binary_filename 4 1732 25 Filename::binary_filename 0 1 260 412
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
87
static inline Filename Filename::binary_filename(basic_string< char > const &filename);

1117 12 dso_filename 4 1732 22 Filename::dso_filename 0 1 261 239
////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
static inline Filename Filename::dso_filename(basic_string< char > const &filename);

1118 19 executable_filename 4 1732 29 Filename::executable_filename 0 1 262 246
////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
91
static inline Filename Filename::executable_filename(basic_string< char > const &filename);

1119 16 pattern_filename 4 1732 26 Filename::pattern_filename 0 1 263 348
////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
////////////////////////////////////////////////////////////////////
88
static inline Filename Filename::pattern_filename(basic_string< char > const &filename);

1120 16 from_os_specific 4 1732 26 Filename::from_os_specific 0 2 264 265 0
119
static Filename Filename::from_os_specific(basic_string< char > const &os_specific, Filename::Type type = (T_general));

1121 11 expand_from 4 1732 21 Filename::expand_from 0 2 266 267 0
114
static Filename Filename::expand_from(basic_string< char > const &user_string, Filename::Type type = (T_general));

1122 9 temporary 4 1732 19 Filename::temporary 0 2 268 269 0
144
static Filename Filename::temporary(basic_string< char > const &dirname, basic_string< char > const &prefix, Filename::Type type = (T_general));

1123 10 operator = 4 1732 20 Filename::operator = 0 3 270 271 272 769
// Assignment is via the = operator.

// Assignment is via the = operator.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline Filename &Filename::operator =(basic_string< char > const &filename);

1124 17 operator typecast 4 1732 27 Filename::operator typecast 0 1 340 295
// And retrieval is by any of the classic string operations.

////////////////////////////////////////////////////////////////////
//     Function: Filename::string typecast operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &Filename::operator typecast(void) const;

1125 5 c_str 4 1732 15 Filename::c_str 0 1 273 276
// And retrieval is by any of the classic string operations.

////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char const *Filename::c_str(void) const;

1126 5 empty 4 1732 15 Filename::empty 0 1 274 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline bool Filename::empty(void) const;

1127 6 length 4 1732 16 Filename::length 0 1 275 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline unsigned int Filename::length(void) const;

1128 11 operator [] 4 1732 21 Filename::operator [] 0 1 276 226
////////////////////////////////////////////////////////////////////
//     Function: Filename::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char Filename::operator [](int n) const;

1129 6 substr 4 1732 16 Filename::substr 0 2 277 278 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline basic_string< char > Filename::substr(unsigned int begin, unsigned int end = (string::npos)) const;

1130 12 get_fullpath 4 1732 22 Filename::get_fullpath 0 1 279 473
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Filename::get_fullpath(void) const;

1131 11 get_dirname 4 1732 21 Filename::get_dirname 0 1 280 414
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > Filename::get_dirname(void) const;

1132 12 get_basename 4 1732 22 Filename::get_basename 0 1 281 387
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Filename::get_basename(void) const;

1133 25 get_fullpath_wo_extension 4 1732 35 Filename::get_fullpath_wo_extension 0 1 282 334
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > Filename::get_fullpath_wo_extension(void) const;

1134 25 get_basename_wo_extension 4 1732 35 Filename::get_basename_wo_extension 0 1 283 322
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > Filename::get_basename_wo_extension(void) const;

1135 13 get_extension 4 1732 23 Filename::get_extension 0 1 284 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > Filename::get_extension(void) const;

1136 12 set_fullpath 4 1732 22 Filename::set_fullpath 0 1 285 68
// You can also use any of these to reassign pieces of the filename.
59
void Filename::set_fullpath(basic_string< char > const &s);

1137 11 set_dirname 4 1732 21 Filename::set_dirname 0 1 286 68
// You can also use any of these to reassign pieces of the filename.
58
void Filename::set_dirname(basic_string< char > const &s);

1138 12 set_basename 4 1732 22 Filename::set_basename 0 1 287 0
59
void Filename::set_basename(basic_string< char > const &s);

1139 25 set_fullpath_wo_extension 4 1732 35 Filename::set_fullpath_wo_extension 0 1 288 0
72
void Filename::set_fullpath_wo_extension(basic_string< char > const &s);

1140 25 set_basename_wo_extension 4 1732 35 Filename::set_basename_wo_extension 0 1 289 0
72
void Filename::set_basename_wo_extension(basic_string< char > const &s);

1141 13 set_extension 4 1732 23 Filename::set_extension 0 1 290 0
60
void Filename::set_extension(basic_string< char > const &s);

1142 10 set_binary 4 1732 20 Filename::set_binary 0 1 291 682
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
39
inline void Filename::set_binary(void);

1143 8 set_text 4 1732 18 Filename::set_text 0 1 292 678
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
37
inline void Filename::set_text(void);

1144 9 is_binary 4 1732 19 Filename::is_binary 0 1 293 523
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
44
inline bool Filename::is_binary(void) const;

1145 7 is_text 4 1732 17 Filename::is_text 0 1 294 517
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
42
inline bool Filename::is_text(void) const;

1146 8 set_type 4 1732 18 Filename::set_type 0 1 295 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
////////////////////////////////////////////////////////////////////
52
inline void Filename::set_type(Filename::Type type);

1147 8 get_type 4 1732 18 Filename::get_type 0 1 296 325
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
////////////////////////////////////////////////////////////////////
53
inline Filename::Type Filename::get_type(void) const;

1148 11 set_pattern 4 1732 21 Filename::set_pattern 0 1 297 1075
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
////////////////////////////////////////////////////////////////////
48
inline void Filename::set_pattern(bool pattern);

1149 11 get_pattern 4 1732 21 Filename::get_pattern 0 1 298 321
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
////////////////////////////////////////////////////////////////////
46
inline bool Filename::get_pattern(void) const;

1150 8 has_hash 4 1732 18 Filename::has_hash 0 1 299 651
////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::has_hash(void) const;

1151 18 get_filename_index 4 1732 28 Filename::get_filename_index 0 1 300 0
55
Filename Filename::get_filename_index(int index) const;

1152 15 get_hash_to_end 4 1732 25 Filename::get_hash_to_end 0 1 301 375
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
////////////////////////////////////////////////////////////////////
66
inline basic_string< char > Filename::get_hash_to_end(void) const;

1153 15 set_hash_to_end 4 1732 25 Filename::set_hash_to_end 0 1 302 0
62
void Filename::set_hash_to_end(basic_string< char > const &s);

1154 18 extract_components 4 1732 28 Filename::extract_components 0 1 303 0
84
void Filename::extract_components(vector< basic_string< char > > &components) const;

1155 11 standardize 4 1732 21 Filename::standardize 0 1 304 0
33
void Filename::standardize(void);

1156 8 is_local 4 1732 18 Filename::is_local 0 1 305 440
// The following functions deal with the outside world.

////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::is_local(void) const;

1157 18 is_fully_qualified 4 1732 28 Filename::is_fully_qualified 0 1 306 782
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
////////////////////////////////////////////////////////////////////
53
inline bool Filename::is_fully_qualified(void) const;

1158 13 make_absolute 4 1732 23 Filename::make_absolute 0 2 307 308 0
35
void Filename::make_absolute(void);

1159 14 make_canonical 4 1732 24 Filename::make_canonical 0 1 309 0
36
bool Filename::make_canonical(void);

1160 14 make_true_case 4 1732 24 Filename::make_true_case 0 1 310 0
36
bool Filename::make_true_case(void);

1161 14 to_os_specific 4 1732 24 Filename::to_os_specific 0 1 311 0
58
basic_string< char > Filename::to_os_specific(void) const;

1162 13 to_os_generic 4 1732 23 Filename::to_os_generic 0 1 312 0
57
basic_string< char > Filename::to_os_generic(void) const;

1163 6 exists 4 1732 16 Filename::exists 0 1 313 0
34
bool Filename::exists(void) const;

1164 15 is_regular_file 4 1732 25 Filename::is_regular_file 0 1 314 0
43
bool Filename::is_regular_file(void) const;

1165 12 is_directory 4 1732 22 Filename::is_directory 0 1 315 0
40
bool Filename::is_directory(void) const;

1166 13 is_executable 4 1732 23 Filename::is_executable 0 1 316 0
41
bool Filename::is_executable(void) const;

1167 18 compare_timestamps 4 1732 28 Filename::compare_timestamps 0 3 317 318 319 0
127
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = (1), bool other_missing_is_old = (1)) const;

1168 16 resolve_filename 4 1732 26 Filename::resolve_filename 0 2 320 321 0
125
bool Filename::resolve_filename(DSearchPath const &searchpath, basic_string< char > const &default_extension = ((string())));

1169 16 make_relative_to 4 1732 26 Filename::make_relative_to 0 2 322 323 0
78
bool Filename::make_relative_to(Filename directory, bool allow_backups = (1));

1170 18 find_on_searchpath 4 1732 28 Filename::find_on_searchpath 0 1 324 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1171 14 scan_directory 4 1732 24 Filename::scan_directory 0 1 325 0
78
bool Filename::scan_directory(vector< basic_string< char > > &contents) const;

1172 9 open_read 4 1732 19 Filename::open_read 0 1 326 0
49
bool Filename::open_read(ifstream &stream) const;

1173 10 open_write 4 1732 20 Filename::open_write 0 2 327 328 0
71
bool Filename::open_write(ofstream &stream, bool truncate = (1)) const;

1174 11 open_append 4 1732 21 Filename::open_append 0 1 329 0
51
bool Filename::open_append(ofstream &stream) const;

1175 15 open_read_write 4 1732 25 Filename::open_read_write 0 1 330 0
54
bool Filename::open_read_write(fstream &stream) const;

1176 5 chdir 4 1732 15 Filename::chdir 0 1 331 0
33
bool Filename::chdir(void) const;

1177 5 touch 4 1732 15 Filename::touch 0 1 332 0
33
bool Filename::touch(void) const;

1178 6 unlink 4 1732 16 Filename::unlink 0 1 333 0
34
bool Filename::unlink(void) const;

1179 9 rename_to 4 1732 19 Filename::rename_to 0 1 334 0
54
bool Filename::rename_to(Filename const &other) const;

1180 8 make_dir 4 1732 18 Filename::make_dir 0 1 335 0
36
bool Filename::make_dir(void) const;

1181 11 operator == 4 1732 21 Filename::operator == 0 1 336 262
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Equality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline bool Filename::operator ==(basic_string< char > const &other) const;

1182 11 operator != 4 1732 21 Filename::operator != 0 1 337 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Inequality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline bool Filename::operator !=(basic_string< char > const &other) const;

1183 10 operator < 4 1732 20 Filename::operator < 0 1 338 226
////////////////////////////////////////////////////////////////////
//     Function: Filename::Ordering operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline bool Filename::operator <(basic_string< char > const &other) const;

1184 6 output 4 1732 16 Filename::output 0 1 339 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void Filename::output(ostream &out) const;

1185 11 GlobPattern 4 1734 24 GlobPattern::GlobPattern 0 3 341 342 343 1122
// Filename: globPattern.I
// Created by:  drose (30May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
84
inline GlobPattern::GlobPattern(basic_string< char > const &pattern = ((string())));

1186 10 operator = 4 1734 23 GlobPattern::operator = 0 1 344 233
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1187 11 operator == 4 1734 24 GlobPattern::operator == 0 1 345 220
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1188 11 operator != 4 1734 24 GlobPattern::operator != 0 1 346 220
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1189 10 operator < 4 1734 23 GlobPattern::operator < 0 1 347 219
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator <
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1190 11 set_pattern 4 1734 24 GlobPattern::set_pattern 0 1 348 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
74
inline void GlobPattern::set_pattern(basic_string< char > const &pattern);

1191 11 get_pattern 4 1734 24 GlobPattern::get_pattern 0 1 349 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GlobPattern::get_pattern(void) const;

1192 18 set_case_sensitive 4 1734 31 GlobPattern::set_case_sensitive 0 1 350 370
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1193 18 get_case_sensitive 4 1734 31 GlobPattern::get_case_sensitive 0 1 351 373
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
56
inline bool GlobPattern::get_case_sensitive(void) const;

1194 7 matches 4 1734 20 GlobPattern::matches 0 1 352 308
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
////////////////////////////////////////////////////////////////////
78
inline bool GlobPattern::matches(basic_string< char > const &candidate) const;

1195 6 output 4 1734 19 GlobPattern::output 0 1 353 215
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void GlobPattern::output(ostream &out) const;

1196 19 has_glob_characters 4 1734 32 GlobPattern::has_glob_characters 0 1 354 0
50
bool GlobPattern::has_glob_characters(void) const;

1197 11 match_files 4 1734 24 GlobPattern::match_files 0 2 355 356 0
100
int GlobPattern::match_files(vector< basic_string< char > > &results, Filename const &cwd = ((())));

1198 12 ~GlobPattern 4 1734 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1199 6 Notify 4 1735 14 Notify::Notify 0 1 357 0
21
Notify::Notify(void);

1200 7 ~Notify 4 1735 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1201 15 set_ostream_ptr 4 1735 23 Notify::set_ostream_ptr 0 1 358 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1202 15 get_ostream_ptr 4 1735 23 Notify::get_ostream_ptr 0 1 359 0
45
ostream *Notify::get_ostream_ptr(void) const;

1203 18 set_assert_handler 4 1735 26 Notify::set_assert_handler 0 0 0
115
void Notify::set_assert_handler(bool (*assert_handler)(char const *expression, int line, char const *source_file));

1204 20 clear_assert_handler 4 1735 28 Notify::clear_assert_handler 0 1 360 0
40
void Notify::clear_assert_handler(void);

1205 18 has_assert_handler 4 1735 26 Notify::has_assert_handler 0 1 361 0
44
bool Notify::has_assert_handler(void) const;

1206 18 get_assert_handler 4 1735 26 Notify::get_assert_handler 0 1 362 0
106
bool (*Notify::get_assert_handler(void))(char const *expression, int line, char const *source_file) const;

1207 17 has_assert_failed 4 1735 25 Notify::has_assert_failed 0 1 363 0
43
bool Notify::has_assert_failed(void) const;

1208 24 get_assert_error_message 4 1735 32 Notify::get_assert_error_message 0 1 364 0
73
basic_string< char > const &Notify::get_assert_error_message(void) const;

1209 19 clear_assert_failed 4 1735 27 Notify::clear_assert_failed 0 1 365 0
39
void Notify::clear_assert_failed(void);

1210 16 get_top_category 4 1735 24 Notify::get_top_category 0 1 366 0
47
NotifyCategory *Notify::get_top_category(void);

1211 12 get_category 4 1735 20 Notify::get_category 0 3 367 368 369 0
108
NotifyCategory *Notify::get_category(basic_string< char > const &basename, NotifyCategory *parent_category);

1212 3 out 4 1735 11 Notify::out 0 1 370 0
34
static ostream &Notify::out(void);

1213 4 null 4 1735 12 Notify::null 0 1 371 0
35
static ostream &Notify::null(void);

1214 12 write_string 4 1735 20 Notify::write_string 0 1 372 0
66
static void Notify::write_string(basic_string< char > const &str);

1215 3 ptr 4 1735 11 Notify::ptr 0 1 373 0
33
static Notify *Notify::ptr(void);

1216 12 get_fullname 4 1736 28 NotifyCategory::get_fullname 0 1 374 902
// Filename: notifyCategory.I
// Created by:  drose (29Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > NotifyCategory::get_fullname(void) const;

1217 12 get_basename 4 1736 28 NotifyCategory::get_basename 0 1 375 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > NotifyCategory::get_basename(void) const;

1218 12 get_severity 4 1736 28 NotifyCategory::get_severity 0 1 376 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1219 12 set_severity 4 1736 28 NotifyCategory::set_severity 0 1 377 395
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
////////////////////////////////////////////////////////////////////
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1220 5 is_on 4 1736 21 NotifyCategory::is_on 0 1 378 331
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
////////////////////////////////////////////////////////////////////
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1221 7 is_spam 4 1736 23 NotifyCategory::is_spam 0 1 379 654
// When NOTIFY_DEBUG is not defined, the categories will never be
// set to "spam" or "debug" severities, and these methods are
// redefined to be static to make it more obvious to the compiler.
// However, we still want to present a consistent interface to our
// scripting language, so during the interrogate pass (that is, when
// CPPPARSER is defined), we still pretend they're nonstatic.

////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_spam(void) const;

1222 8 is_debug 4 1736 24 NotifyCategory::is_debug 0 1 380 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_debug(void) const;

1223 7 is_info 4 1736 23 NotifyCategory::is_info 0 1 381 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_info(void) const;

1224 10 is_warning 4 1736 26 NotifyCategory::is_warning 0 1 382 266
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
////////////////////////////////////////////////////////////////////
51
inline bool NotifyCategory::is_warning(void) const;

1225 8 is_error 4 1736 24 NotifyCategory::is_error 0 1 383 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_error(void) const;

1226 8 is_fatal 4 1736 24 NotifyCategory::is_fatal 0 1 384 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_fatal(void) const;

1227 3 out 4 1736 19 NotifyCategory::out 0 2 385 386 0
79
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = (1)) const;

1228 4 spam 4 1736 20 NotifyCategory::spam 0 2 387 388 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::spam(bool prefix = (1)) const;

1229 5 debug 4 1736 21 NotifyCategory::debug 0 2 389 390 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::debug(bool prefix = (1)) const;

1230 4 info 4 1736 20 NotifyCategory::info 0 2 391 392 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::info(bool prefix = (1)) const;

1231 7 warning 4 1736 23 NotifyCategory::warning 0 2 393 394 261
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
////////////////////////////////////////////////////////////////////
65
inline ostream &NotifyCategory::warning(bool prefix = (1)) const;

1232 5 error 4 1736 21 NotifyCategory::error 0 2 395 396 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::error(bool prefix = (1)) const;

1233 5 fatal 4 1736 21 NotifyCategory::fatal 0 2 397 398 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::fatal(bool prefix = (1)) const;

1234 16 get_num_children 4 1736 32 NotifyCategory::get_num_children 0 1 399 0
49
int NotifyCategory::get_num_children(void) const;

1235 9 get_child 4 1736 25 NotifyCategory::get_child 0 1 400 0
55
NotifyCategory *NotifyCategory::get_child(int i) const;

1236 16 set_server_delta 4 1736 32 NotifyCategory::set_server_delta 0 1 401 0
61
static void NotifyCategory::set_server_delta(long int delta);

1237 15 ~NotifyCategory 4 1736 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1238 18 get_version_string 4 1738 31 PandaSystem::get_version_string 0 1 402 0
66
static basic_string< char > PandaSystem::get_version_string(void);

1239 17 get_major_version 4 1738 30 PandaSystem::get_major_version 0 1 403 0
48
static int PandaSystem::get_major_version(void);

1240 17 get_minor_version 4 1738 30 PandaSystem::get_minor_version 0 1 404 0
48
static int PandaSystem::get_minor_version(void);

1241 20 get_sequence_version 4 1738 33 PandaSystem::get_sequence_version 0 1 405 0
51
static int PandaSystem::get_sequence_version(void);

1242 19 is_official_version 4 1738 32 PandaSystem::is_official_version 0 1 406 0
51
static bool PandaSystem::is_official_version(void);

1243 15 get_distributor 4 1738 28 PandaSystem::get_distributor 0 1 407 0
63
static basic_string< char > PandaSystem::get_distributor(void);

1244 12 get_compiler 4 1738 25 PandaSystem::get_compiler 0 1 408 0
60
static basic_string< char > PandaSystem::get_compiler(void);

1245 14 get_build_date 4 1738 27 PandaSystem::get_build_date 0 1 409 0
62
static basic_string< char > PandaSystem::get_build_date(void);

1246 10 has_system 4 1738 23 PandaSystem::has_system 0 1 410 0
71
bool PandaSystem::has_system(basic_string< char > const &system) const;

1247 15 get_num_systems 4 1738 28 PandaSystem::get_num_systems 0 1 411 0
45
int PandaSystem::get_num_systems(void) const;

1248 10 get_system 4 1738 23 PandaSystem::get_system 0 1 412 0
58
basic_string< char > PandaSystem::get_system(int n) const;

1249 14 get_system_tag 4 1738 27 PandaSystem::get_system_tag 0 1 413 0
124
basic_string< char > PandaSystem::get_system_tag(basic_string< char > const &system, basic_string< char > const &tag) const;

1250 10 add_system 4 1738 23 PandaSystem::add_system 0 1 414 0
65
void PandaSystem::add_system(basic_string< char > const &system);

1251 14 set_system_tag 4 1738 27 PandaSystem::set_system_tag 0 1 415 0
137
void PandaSystem::set_system_tag(basic_string< char > const &system, basic_string< char > const &tag, basic_string< char > const &value);

1252 6 output 4 1738 19 PandaSystem::output 0 1 416 0
45
void PandaSystem::output(ostream &out) const;

1253 5 write 4 1738 18 PandaSystem::write 0 1 417 0
44
void PandaSystem::write(ostream &out) const;

1254 14 get_global_ptr 4 1738 27 PandaSystem::get_global_ptr 0 1 418 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

1255 10 TypeHandle 4 1739 22 TypeHandle::TypeHandle 0 2 419 420 1440
// Filename: typeHandle.I
// Created by:  drose (22Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
36
inline TypeHandle::TypeHandle(void);

1256 11 operator == 4 1739 23 TypeHandle::operator == 0 1 421 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

1257 11 operator != 4 1739 23 TypeHandle::operator != 0 1 422 230
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

1258 10 operator < 4 1739 22 TypeHandle::operator < 0 1 423 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

1259 11 operator <= 4 1739 23 TypeHandle::operator <= 0 1 424 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

1260 10 operator > 4 1739 22 TypeHandle::operator > 0 1 425 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

1261 11 operator >= 4 1739 23 TypeHandle::operator >= 0 1 426 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

1262 10 compare_to 4 1739 22 TypeHandle::compare_to 0 1 427 463
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
////////////////////////////////////////////////////////////////////
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

1263 8 get_hash 4 1739 20 TypeHandle::get_hash 0 1 428 263
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int TypeHandle::get_hash(void) const;

1264 8 get_name 4 1739 20 TypeHandle::get_name 0 2 429 430 484
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
109
inline basic_string< char > TypeHandle::get_name(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1265 15 is_derived_from 4 1739 27 TypeHandle::is_derived_from 0 2 431 432 557
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
119
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1266 22 get_num_parent_classes 4 1739 34 TypeHandle::get_num_parent_classes 0 2 433 434 878
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
106
inline int TypeHandle::get_num_parent_classes(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1267 16 get_parent_class 4 1739 28 TypeHandle::get_parent_class 0 1 435 383
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
////////////////////////////////////////////////////////////////////
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

1268 21 get_num_child_classes 4 1739 33 TypeHandle::get_num_child_classes 0 2 436 437 626
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
105
inline int TypeHandle::get_num_child_classes(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1269 15 get_child_class 4 1739 27 TypeHandle::get_child_class 0 1 438 380
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
////////////////////////////////////////////////////////////////////
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

1270 18 get_parent_towards 4 1739 30 TypeHandle::get_parent_towards 0 2 439 440 959
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
130
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1271 24 get_best_parent_from_Set 4 1739 36 TypeHandle::get_best_parent_from_Set 0 1 441 274
////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
////////////////////////////////////////////////////////////////////
84
inline int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

1272 9 get_index 4 1739 21 TypeHandle::get_index 0 1 442 654
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
////////////////////////////////////////////////////////////////////
45
inline int TypeHandle::get_index(void) const;

1273 6 output 4 1739 18 TypeHandle::output 0 1 443 218
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TypeHandle::output(ostream &out) const;

1274 4 none 4 1739 16 TypeHandle::none 0 1 444 315
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
////////////////////////////////////////////////////////////////////
48
static inline TypeHandle TypeHandle::none(void);

1275 11 ~TypeHandle 4 1739 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

1276 9 find_type 4 1740 23 TypeRegistry::find_type 0 1 445 0
75
TypeHandle TypeRegistry::find_type(basic_string< char > const &name) const;

1277 8 get_name 4 1740 22 TypeRegistry::get_name 0 1 446 0
88
basic_string< char > TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

1278 15 is_derived_from 4 1740 29 TypeRegistry::is_derived_from 0 1 447 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

1279 20 get_num_root_classes 4 1740 34 TypeRegistry::get_num_root_classes 0 1 448 0
45
int TypeRegistry::get_num_root_classes(void);

1280 14 get_root_class 4 1740 28 TypeRegistry::get_root_class 0 1 449 0
47
TypeHandle TypeRegistry::get_root_class(int n);

1281 22 get_num_parent_classes 4 1740 36 TypeRegistry::get_num_parent_classes 0 1 450 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

1282 16 get_parent_class 4 1740 30 TypeRegistry::get_parent_class 0 1 451 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

1283 21 get_num_child_classes 4 1740 35 TypeRegistry::get_num_child_classes 0 1 452 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

1284 15 get_child_class 4 1740 29 TypeRegistry::get_child_class 0 1 453 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

1285 18 get_parent_towards 4 1740 32 TypeRegistry::get_parent_towards 0 1 454 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

1286 16 reregister_types 4 1740 30 TypeRegistry::reregister_types 0 1 455 0
49
static void TypeRegistry::reregister_types(void);

1287 5 write 4 1740 19 TypeRegistry::write 0 1 456 0
45
void TypeRegistry::write(ostream &out) const;

1288 3 ptr 4 1740 17 TypeRegistry::ptr 0 1 457 63
// ptr() returns the pointer to the global TypeRegistry object.
45
static TypeRegistry *TypeRegistry::ptr(void);

1289 13 ~TypeRegistry 4 1740 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

1290 12 ~TypedObject 4 1741 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

1291 8 get_type 4 1741 21 TypedObject::get_type 0 1 458 79
// Derived classes should override this function to return
// get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

1292 14 get_type_index 4 1741 27 TypedObject::get_type_index 0 1 459 438
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Public
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
////////////////////////////////////////////////////////////////////
51
inline int TypedObject::get_type_index(void) const;

1293 10 is_of_type 4 1741 23 TypedObject::is_of_type 0 1 460 310
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Public
//  Description: Returns true if the current object is or derives from
//               the indicated type.
////////////////////////////////////////////////////////////////////
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

1294 13 is_exact_type 4 1741 26 TypedObject::is_exact_type 0 1 461 305
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Public
//  Description: Returns true if the current object is the indicated
//               type exactly.
////////////////////////////////////////////////////////////////////
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

1295 24 get_best_parent_from_Set 4 1741 37 TypedObject::get_best_parent_from_Set 0 1 462 305
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Public
//  Description: Returns true if the current object is the indicated
//               type exactly.
////////////////////////////////////////////////////////////////////
75
inline int TypedObject::get_best_parent_from_Set(set< int > const &) const;

1296 14 get_class_type 4 1741 27 TypedObject::get_class_type 0 1 463 0
52
static TypeHandle TypedObject::get_class_type(void);

1297 3 get 4 1743 12 istream::get 0 1 467 0
23
int istream::get(void);

1298 8 ~istream 4 1743 17 istream::~istream 0 0 0
24
istream::~istream(void);

1299 17 upcast_to_istream 12 1742 27 iostream::upcast_to_istream 0 1 465 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1300 20 downcast_to_iostream 12 1743 29 istream::downcast_to_iostream 0 1 466 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1301 3 put 4 1744 12 ostream::put 0 1 470 0
26
void ostream::put(char c);

1302 5 flush 4 1744 14 ostream::flush 0 1 471 0
26
void ostream::flush(void);

1303 8 ~ostream 4 1744 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1304 17 upcast_to_ostream 12 1742 27 iostream::upcast_to_ostream 0 1 468 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1305 20 downcast_to_iostream 12 1744 29 ostream::downcast_to_iostream 0 1 469 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1306 5 flush 4 1742 15 iostream::flush 0 1 464 0
27
void iostream::flush(void);

1307 9 ~iostream 4 1742 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1308 11 is_tracking 4 1745 24 MemoryUsage::is_tracking 0 1 472 374
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_tracking(void);

1309 11 is_counting 4 1745 24 MemoryUsage::is_counting 0 1 473 419
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. count-memory-usage is
//               configured #t), even if it's not fully tracking it.
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_counting(void);

1310 20 get_current_cpp_size 4 1745 33 MemoryUsage::get_current_cpp_size 0 1 474 418
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               via the C++ operators new and delete as counted,
//               not including the memory previously frozen.
////////////////////////////////////////////////////////////////////
67
static inline unsigned int MemoryUsage::get_current_cpp_size(void);

1311 12 has_cpp_size 4 1745 25 MemoryUsage::has_cpp_size 0 1 475 426
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::has_cpp_size
//       Access: Public, Static
//  Description: Returns true if the value returned by
//               get_cpp_size() is meaningful on this particular
//               system with this particular configuration, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
static inline bool MemoryUsage::has_cpp_size(void);

1312 12 get_cpp_size 4 1745 25 MemoryUsage::get_cpp_size 0 1 476 406
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               via the C++ operators new and delete as counted,
//               including the memory previously frozen.
////////////////////////////////////////////////////////////////////
59
static inline unsigned int MemoryUsage::get_cpp_size(void);

1313 20 has_interpreter_size 4 1745 33 MemoryUsage::has_interpreter_size 0 1 477 442
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::has_interpreter_size
//       Access: Public, Static
//  Description: Returns true if the value returned by
//               get_interpreter_size() is meaningful on this particular
//               system with this particular configuration, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
static inline bool MemoryUsage::has_interpreter_size(void);

1314 20 get_interpreter_size 4 1745 33 MemoryUsage::get_interpreter_size 0 1 478 534
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_interpreter_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               while the high-level languange code is running.  This
//               number is only meaningful if both Panda and the
//               high-level language are single-threaded, and running
//               in the same thread.
////////////////////////////////////////////////////////////////////
67
static inline unsigned int MemoryUsage::get_interpreter_size(void);

1315 14 has_total_size 4 1745 27 MemoryUsage::has_total_size 0 1 479 430
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::has_total_size
//       Access: Public, Static
//  Description: Returns true if the value returned by
//               get_total_size() is meaningful on this particular
//               system with this particular configuration, false
//               otherwise.
////////////////////////////////////////////////////////////////////
53
static inline bool MemoryUsage::has_total_size(void);

1316 14 get_total_size 4 1745 27 MemoryUsage::get_total_size 0 1 480 449
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of the dynamic heap, as nearly
//               as can be determined, including all allocated memory
//               if possible, in addition to that tracked by
//               get_cpp_size().
////////////////////////////////////////////////////////////////////
61
static inline unsigned int MemoryUsage::get_total_size(void);

1317 16 get_num_pointers 4 1745 29 MemoryUsage::get_num_pointers 0 1 481 282
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
////////////////////////////////////////////////////////////////////
54
static inline int MemoryUsage::get_num_pointers(void);

1318 12 get_pointers 4 1745 25 MemoryUsage::get_pointers 0 1 482 333
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
////////////////////////////////////////////////////////////////////
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

1319 20 get_pointers_of_type 4 1745 33 MemoryUsage::get_pointers_of_type 0 1 483 380
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
////////////////////////////////////////////////////////////////////
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

1320 19 get_pointers_of_age 4 1745 32 MemoryUsage::get_pointers_of_age 0 1 484 416
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
////////////////////////////////////////////////////////////////////
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

1321 28 get_pointers_with_zero_count 4 1745 41 MemoryUsage::get_pointers_with_zero_count 0 1 485 1326
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
////////////////////////////////////////////////////////////////////
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

1322 6 freeze 4 1745 19 MemoryUsage::freeze 0 1 486 574
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
////////////////////////////////////////////////////////////////////
45
static inline void MemoryUsage::freeze(void);

1323 18 show_current_types 4 1745 31 MemoryUsage::show_current_types 0 1 487 312
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
57
static inline void MemoryUsage::show_current_types(void);

1324 16 show_trend_types 4 1745 29 MemoryUsage::show_trend_types 0 1 488 372
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
55
static inline void MemoryUsage::show_trend_types(void);

1325 17 show_current_ages 4 1745 30 MemoryUsage::show_current_ages 0 1 489 310
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
56
static inline void MemoryUsage::show_current_ages(void);

1326 15 show_trend_ages 4 1745 28 MemoryUsage::show_trend_ages 0 1 490 370
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
54
static inline void MemoryUsage::show_trend_ages(void);

1327 12 ~MemoryUsage 4 1745 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

1328 18 get_config_express 1 0 18 get_config_express 0 1 887 0
78
Config::Config< ConfigureGetConfig_config_express > &get_config_express(void);

1329 13 get_ref_count 4 1746 29 ReferenceCount::get_ref_count 0 1 491 265
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
53
inline int ReferenceCount::get_ref_count(void) const;

1330 3 ref 4 1746 19 ReferenceCount::ref 0 1 492 896
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
44
inline void ReferenceCount::ref(void) const;

1331 5 unref 4 1746 21 ReferenceCount::unref 0 1 493 1393
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic; plus, we don't have a virtual destructor
//               anyway.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
46
inline bool ReferenceCount::unref(void) const;

1332 24 test_ref_count_integrity 4 1746 40 ReferenceCount::test_ref_count_integrity 0 1 494 395
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

1333 14 get_class_type 4 1746 30 ReferenceCount::get_class_type 0 1 495 0
55
static TypeHandle ReferenceCount::get_class_type(void);

1334 7 ~Buffer 4 1747 15 Buffer::~Buffer 0 0 214
////////////////////////////////////////////////////////////////////
//     Function: Buffer::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
22
Buffer::~Buffer(void);

1335 10 get_length 4 1747 18 Buffer::get_length 0 1 496 883
// Filename: buffer.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline int Buffer::get_length(void) const;

1336 7 is_null 4 1748 22 PointerToVoid::is_null 0 1 497 372
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
////////////////////////////////////////////////////////////////////
47
inline bool PointerToVoid::is_null(void) const;

1337 8 get_hash 4 1748 23 PointerToVoid::get_hash 0 1 498 219
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline unsigned int PointerToVoid::get_hash(void) const;

1338 5 clear 4 1750 62 PointerToBase< RefCountObj< vector< unsigned char > > >::clear 0 1 509 0
83
inline void ::PointerToBase< RefCountObj< vector< unsigned char > > >::clear(void);

1339 6 output 4 1750 63 PointerToBase< RefCountObj< vector< unsigned char > > >::output 0 1 510 0
91
void ::PointerToBase< RefCountObj< vector< unsigned char > > >::output(ostream &out) const;

1340 14 PointerToArray 4 1749 47 PointerToArray< unsigned char >::PointerToArray 0 3 499 500 501 0
63
inline ::PointerToArray< unsigned char >::PointerToArray(void);

1341 11 empty_array 4 1749 44 PointerToArray< unsigned char >::empty_array 0 1 502 0
109
static inline PointerToArray< unsigned char > ::PointerToArray< unsigned char >::empty_array(unsigned int n);

1342 4 size 4 1749 37 PointerToArray< unsigned char >::size 0 1 503 0
72
inline unsigned int ::PointerToArray< unsigned char >::size(void) const;

1343 11 get_element 4 1749 44 PointerToArray< unsigned char >::get_element 0 1 504 0
97
inline unsigned char const &::PointerToArray< unsigned char >::get_element(unsigned int n) const;

1344 11 set_element 4 1749 44 PointerToArray< unsigned char >::set_element 0 1 505 0
103
inline void ::PointerToArray< unsigned char >::set_element(unsigned int n, unsigned char const &value);

1345 9 push_back 4 1749 42 PointerToArray< unsigned char >::push_back 0 1 506 0
81
inline void ::PointerToArray< unsigned char >::push_back(unsigned char const &x);

1346 8 pop_back 4 1749 41 PointerToArray< unsigned char >::pop_back 0 1 507 0
62
inline void ::PointerToArray< unsigned char >::pop_back(void);

1347 10 make_empty 4 1749 43 PointerToArray< unsigned char >::make_empty 0 1 508 0
64
inline void ::PointerToArray< unsigned char >::make_empty(void);

1348 15 ~PointerToArray 4 1749 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
57
::PointerToArray< unsigned char >::~PointerToArray(void);

1349 19 ConstPointerToArray 4 1751 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 3 511 512 513 0
73
inline ::ConstPointerToArray< unsigned char >::ConstPointerToArray(void);

1350 4 size 4 1751 42 ConstPointerToArray< unsigned char >::size 0 1 514 0
77
inline unsigned int ::ConstPointerToArray< unsigned char >::size(void) const;

1351 11 get_element 4 1751 49 ConstPointerToArray< unsigned char >::get_element 0 1 515 0
102
inline unsigned char const &::ConstPointerToArray< unsigned char >::get_element(unsigned int n) const;

1352 20 ~ConstPointerToArray 4 1751 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
67
::ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1353 8 Datagram 4 1752 18 Datagram::Datagram 0 3 516 517 518 1689
// Filename: datagram.I
// Created by:  drose (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline Datagram::Datagram(void);

1354 10 operator = 4 1752 20 Datagram::operator = 0 1 519 230
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void Datagram::operator =(Datagram const &copy);

1355 5 clear 4 1752 15 Datagram::clear 0 1 520 314
////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
////////////////////////////////////////////////////////////////////
35
virtual void Datagram::clear(void);

1356 8 dump_hex 4 1752 18 Datagram::dump_hex 0 1 521 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
////////////////////////////////////////////////////////////////////
44
void Datagram::dump_hex(ostream &out) const;

1357 8 add_bool 4 1752 18 Datagram::add_bool 0 1 522 252
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_bool(bool value);

1358 8 add_int8 4 1752 18 Datagram::add_int8 0 1 523 259
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_int8(signed char value);

1359 9 add_uint8 4 1752 19 Datagram::add_uint8 0 1 524 263
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_uint8(unsigned char value);

1360 9 add_int16 4 1752 19 Datagram::add_int16 0 1 525 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
49
inline void Datagram::add_int16(short int value);

1361 9 add_int32 4 1752 19 Datagram::add_int32 0 1 526 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_int32(int value);

1362 9 add_int64 4 1752 19 Datagram::add_int64 0 1 527 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
47
inline void Datagram::add_int64(__int64 value);

1363 10 add_uint16 4 1752 20 Datagram::add_uint16 0 1 528 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
59
inline void Datagram::add_uint16(unsigned short int value);

1364 10 add_uint32 4 1752 20 Datagram::add_uint32 0 1 529 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_uint32(unsigned int value);

1365 10 add_uint64 4 1752 20 Datagram::add_uint64 0 1 530 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
57
inline void Datagram::add_uint64(unsigned __int64 value);

1366 11 add_float32 4 1752 21 Datagram::add_float32 0 1 531 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
47
inline void Datagram::add_float32(float value);

1367 11 add_float64 4 1752 21 Datagram::add_float64 0 1 532 270
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_float64(double value);

1368 12 add_be_int16 4 1752 22 Datagram::add_be_int16 0 1 533 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_be_int16(short int value);

1369 12 add_be_int32 4 1752 22 Datagram::add_be_int32 0 1 534 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
46
inline void Datagram::add_be_int32(int value);

1370 12 add_be_int64 4 1752 22 Datagram::add_be_int64 0 1 535 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_be_int64(__int64 value);

1371 13 add_be_uint16 4 1752 23 Datagram::add_be_uint16 0 1 536 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
62
inline void Datagram::add_be_uint16(unsigned short int value);

1372 13 add_be_uint32 4 1752 23 Datagram::add_be_uint32 0 1 537 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
56
inline void Datagram::add_be_uint32(unsigned int value);

1373 13 add_be_uint64 4 1752 23 Datagram::add_be_uint64 0 1 538 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
60
inline void Datagram::add_be_uint64(unsigned __int64 value);

1374 14 add_be_float32 4 1752 24 Datagram::add_be_float32 0 1 539 464
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_be_float32(float value);

1375 14 add_be_float64 4 1752 24 Datagram::add_be_float64 0 1 540 301
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_float64(double value);

1376 10 add_string 4 1752 20 Datagram::add_string 0 1 541 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
66
inline void Datagram::add_string(basic_string< char > const &str);

1377 12 add_string32 4 1752 22 Datagram::add_string32 0 1 542 338
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
////////////////////////////////////////////////////////////////////
68
inline void Datagram::add_string32(basic_string< char > const &str);

1378 12 add_z_string 4 1752 22 Datagram::add_z_string 0 1 543 311
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
61
inline void Datagram::add_z_string(basic_string< char > str);

1379 16 add_fixed_string 4 1752 26 Datagram::add_fixed_string 0 1 544 512
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
91
inline void Datagram::add_fixed_string(basic_string< char > const &str, unsigned int size);

1380 11 add_wstring 4 1752 21 Datagram::add_wstring 0 1 545 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
////////////////////////////////////////////////////////////////////
63
void Datagram::add_wstring(basic_string< wchar_t > const &str);

1381 9 pad_bytes 4 1752 19 Datagram::pad_bytes 0 1 546 289
////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
////////////////////////////////////////////////////////////////////
44
void Datagram::pad_bytes(unsigned int size);

1382 11 append_data 4 1752 21 Datagram::append_data 0 1 547 580
////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////
64
void Datagram::append_data(void const *data, unsigned int size);

1383 11 get_message 4 1752 21 Datagram::get_message 0 1 548 258
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > Datagram::get_message(void) const;

1384 8 get_data 4 1752 18 Datagram::get_data 0 1 549 290
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
////////////////////////////////////////////////////////////////////
50
inline void const *Datagram::get_data(void) const;

1385 10 get_length 4 1752 20 Datagram::get_length 0 1 550 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
////////////////////////////////////////////////////////////////////
53
inline unsigned int Datagram::get_length(void) const;

1386 9 set_array 4 1752 19 Datagram::set_array 0 1 551 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
////////////////////////////////////////////////////////////////////
70
inline void Datagram::set_array(PointerToArray< unsigned char > data);

1387 10 copy_array 4 1752 20 Datagram::copy_array 0 1 552 505
////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
////////////////////////////////////////////////////////////////////
76
inline void Datagram::copy_array(ConstPointerToArray< unsigned char > data);

1388 9 get_array 4 1752 19 Datagram::get_array 0 1 553 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
76
inline ConstPointerToArray< unsigned char > Datagram::get_array(void) const;

1389 12 modify_array 4 1752 22 Datagram::modify_array 0 1 554 300
////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
68
inline PointerToArray< unsigned char > Datagram::modify_array(void);

1390 11 operator == 4 1752 21 Datagram::operator == 0 1 555 217
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Datagram::operator ==(Datagram const &other) const;

1391 11 operator != 4 1752 21 Datagram::operator != 0 1 556 217
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Datagram::operator !=(Datagram const &other) const;

1392 10 operator < 4 1752 20 Datagram::operator < 0 1 557 216
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator <
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool Datagram::operator <(Datagram const &other) const;

1393 6 output 4 1752 16 Datagram::output 0 1 558 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
42
void Datagram::output(ostream &out) const;

1394 5 write 4 1752 15 Datagram::write 0 2 559 560 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
68
void Datagram::write(ostream &out, unsigned int indent = (0)) const;

1395 14 get_class_type 4 1752 24 Datagram::get_class_type 0 1 561 0
49
static TypeHandle Datagram::get_class_type(void);

1396 16 DatagramIterator 4 1753 34 DatagramIterator::DatagramIterator 0 4 562 563 564 565 1364
// Filename: datagramIterator.I
// Created by:  drose (08May01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline DatagramIterator::DatagramIterator(void);

1397 10 operator = 4 1753 28 DatagramIterator::operator = 0 1 566 238
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void DatagramIterator::operator =(DatagramIterator const &copy);

1398 17 ~DatagramIterator 4 1753 35 DatagramIterator::~DatagramIterator 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline DatagramIterator::~DatagramIterator(void);

1399 8 get_bool 4 1753 26 DatagramIterator::get_bool 0 1 567 329
// Various ways to get data and increment the iterator...
// Cut-and-paste-orama
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
45
inline bool DatagramIterator::get_bool(void);

1400 8 get_int8 4 1753 26 DatagramIterator::get_int8 0 1 568 255
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
52
inline signed char DatagramIterator::get_int8(void);

1401 9 get_uint8 4 1753 27 DatagramIterator::get_uint8 0 1 569 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
55
inline unsigned char DatagramIterator::get_uint8(void);

1402 9 get_int16 4 1753 27 DatagramIterator::get_int16 0 1 570 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
51
inline short int DatagramIterator::get_int16(void);

1403 9 get_int32 4 1753 27 DatagramIterator::get_int32 0 1 571 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
45
inline int DatagramIterator::get_int32(void);

1404 9 get_int64 4 1753 27 DatagramIterator::get_int64 0 1 572 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
49
inline __int64 DatagramIterator::get_int64(void);

1405 10 get_uint16 4 1753 28 DatagramIterator::get_uint16 0 1 573 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
61
inline unsigned short int DatagramIterator::get_uint16(void);

1406 10 get_uint32 4 1753 28 DatagramIterator::get_uint32 0 1 574 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
55
inline unsigned int DatagramIterator::get_uint32(void);

1407 10 get_uint64 4 1753 28 DatagramIterator::get_uint64 0 1 575 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
59
inline unsigned __int64 DatagramIterator::get_uint64(void);

1408 11 get_float32 4 1753 29 DatagramIterator::get_float32 0 1 576 446
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
49
inline float DatagramIterator::get_float32(void);

1409 11 get_float64 4 1753 29 DatagramIterator::get_float64 0 1 577 266
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
50
inline double DatagramIterator::get_float64(void);

1410 12 get_be_int16 4 1753 30 DatagramIterator::get_be_int16 0 1 578 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
54
inline short int DatagramIterator::get_be_int16(void);

1411 12 get_be_int32 4 1753 30 DatagramIterator::get_be_int32 0 1 579 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
48
inline int DatagramIterator::get_be_int32(void);

1412 12 get_be_int64 4 1753 30 DatagramIterator::get_be_int64 0 1 580 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
52
inline __int64 DatagramIterator::get_be_int64(void);

1413 13 get_be_uint16 4 1753 31 DatagramIterator::get_be_uint16 0 1 581 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
64
inline unsigned short int DatagramIterator::get_be_uint16(void);

1414 13 get_be_uint32 4 1753 31 DatagramIterator::get_be_uint32 0 1 582 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
58
inline unsigned int DatagramIterator::get_be_uint32(void);

1415 13 get_be_uint64 4 1753 31 DatagramIterator::get_be_uint64 0 1 583 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
62
inline unsigned __int64 DatagramIterator::get_be_uint64(void);

1416 14 get_be_float32 4 1753 32 DatagramIterator::get_be_float32 0 1 584 460
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
52
inline float DatagramIterator::get_be_float32(void);

1417 14 get_be_float64 4 1753 32 DatagramIterator::get_be_float64 0 1 585 280
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
53
inline double DatagramIterator::get_be_float64(void);

1418 10 get_string 4 1753 28 DatagramIterator::get_string 0 1 586 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
////////////////////////////////////////////////////////////////////
56
basic_string< char > DatagramIterator::get_string(void);

1419 12 get_string32 4 1753 30 DatagramIterator::get_string32 0 1 587 305
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
////////////////////////////////////////////////////////////////////
58
basic_string< char > DatagramIterator::get_string32(void);

1420 12 get_z_string 4 1753 30 DatagramIterator::get_z_string 0 1 588 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
58
basic_string< char > DatagramIterator::get_z_string(void);

1421 16 get_fixed_string 4 1753 34 DatagramIterator::get_fixed_string 0 1 589 379
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
////////////////////////////////////////////////////////////////////
75
basic_string< char > DatagramIterator::get_fixed_string(unsigned int size);

1422 11 get_wstring 4 1753 29 DatagramIterator::get_wstring 0 1 590 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
////////////////////////////////////////////////////////////////////
60
basic_string< wchar_t > DatagramIterator::get_wstring(void);

1423 10 skip_bytes 4 1753 28 DatagramIterator::skip_bytes 0 1 591 299
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
////////////////////////////////////////////////////////////////////
60
inline void DatagramIterator::skip_bytes(unsigned int size);

1424 13 extract_bytes 4 1753 31 DatagramIterator::extract_bytes 0 1 592 329
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
////////////////////////////////////////////////////////////////////
72
basic_string< char > DatagramIterator::extract_bytes(unsigned int size);

1425 19 get_remaining_bytes 4 1753 37 DatagramIterator::get_remaining_bytes 0 1 593 352
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > DatagramIterator::get_remaining_bytes(void) const;

1426 18 get_remaining_size 4 1753 36 DatagramIterator::get_remaining_size 0 1 594 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
////////////////////////////////////////////////////////////////////
60
inline int DatagramIterator::get_remaining_size(void) const;

1427 12 get_datagram 4 1753 30 DatagramIterator::get_datagram 0 1 595 264
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
////////////////////////////////////////////////////////////////////
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

1428 17 get_current_index 4 1753 35 DatagramIterator::get_current_index 0 1 596 335
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
////////////////////////////////////////////////////////////////////
68
inline unsigned int DatagramIterator::get_current_index(void) const;

1429 6 output 4 1753 24 DatagramIterator::output 0 1 597 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
50
void DatagramIterator::output(ostream &out) const;

1430 5 write 4 1753 23 DatagramIterator::write 0 2 598 599 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
76
void DatagramIterator::write(ostream &out, unsigned int indent = (0)) const;

1431 14 encrypt_string 1 0 14 encrypt_string 0 1 888 0
110
basic_string< char > encrypt_string(basic_string< char > const &source, basic_string< char > const &password);

1432 14 decrypt_string 1 0 14 decrypt_string 0 1 889 0
110
basic_string< char > decrypt_string(basic_string< char > const &source, basic_string< char > const &password);

1433 13 error_to_text 1 0 13 error_to_text 0 1 890 0
54
basic_string< char > error_to_text(ErrorUtilCode err);

1434 15 get_write_error 1 0 15 get_write_error 0 1 891 0
26
int get_write_error(void);

1435 19 handle_socket_error 1 0 19 handle_socket_error 0 1 892 0
47
basic_string< char > handle_socket_error(void);

1436 17 get_network_error 1 0 17 get_network_error 0 1 893 0
28
int get_network_error(void);

1437 7 Ramfile 4 1755 16 Ramfile::Ramfile 0 1 600 889
// Filename: ramfile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline Ramfile::Ramfile(void);

1438 4 seek 4 1755 13 Ramfile::seek 0 1 601 363
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
////////////////////////////////////////////////////////////////////
44
inline void Ramfile::seek(unsigned int pos);

1439 4 tell 4 1755 13 Ramfile::tell 0 1 602 322
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
////////////////////////////////////////////////////////////////////
46
inline unsigned int Ramfile::tell(void) const;

1440 4 read 4 1755 13 Ramfile::read 0 1 603 594
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
////////////////////////////////////////////////////////////////////
56
basic_string< char > Ramfile::read(unsigned int length);

1441 8 readline 4 1755 17 Ramfile::readline 0 1 604 599
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
////////////////////////////////////////////////////////////////////
45
basic_string< char > Ramfile::readline(void);

1442 8 get_data 4 1755 17 Ramfile::get_data 0 1 605 321
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &Ramfile::get_data(void) const;

1443 8 ~Ramfile 4 1755 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

1444 12 StreamWriter 4 1756 26 StreamWriter::StreamWriter 0 2 606 607 1350
// Filename: streamWriter.I
// Created by:  drose (04Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline StreamWriter::StreamWriter(ostream *out);

1445 10 operator = 4 1756 24 StreamWriter::operator = 0 1 608 234
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void StreamWriter::operator =(StreamWriter const &copy);

1446 13 ~StreamWriter 4 1756 27 StreamWriter::~StreamWriter 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamWriter::~StreamWriter(void);

1447 11 get_ostream 4 1756 25 StreamWriter::get_ostream 0 1 609 248
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Public
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline ostream *StreamWriter::get_ostream(void) const;

1448 8 add_bool 4 1756 22 StreamWriter::add_bool 0 1 610 254
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Public
//  Description: Adds a boolean value to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_bool(bool value);

1449 8 add_int8 4 1756 22 StreamWriter::add_int8 0 1 611 261
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_int8(signed char value);

1450 9 add_uint8 4 1756 23 StreamWriter::add_uint8 0 1 612 265
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_uint8(unsigned char value);

1451 9 add_int16 4 1756 23 StreamWriter::add_int16 0 1 613 313
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
53
inline void StreamWriter::add_int16(short int value);

1452 9 add_int32 4 1756 23 StreamWriter::add_int32 0 1 614 313
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_int32(int value);

1453 9 add_int64 4 1756 23 StreamWriter::add_int64 0 1 615 263
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_int64(__int64 value);

1454 10 add_uint16 4 1756 24 StreamWriter::add_uint16 0 1 616 267
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
63
inline void StreamWriter::add_uint16(unsigned short int value);

1455 10 add_uint32 4 1756 24 StreamWriter::add_uint32 0 1 617 267
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_uint32(unsigned int value);

1456 10 add_uint64 4 1756 24 StreamWriter::add_uint64 0 1 618 267
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
61
inline void StreamWriter::add_uint64(unsigned __int64 value);

1457 11 add_float32 4 1756 25 StreamWriter::add_float32 0 1 619 452
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_float32(float value);

1458 11 add_float64 4 1756 25 StreamWriter::add_float64 0 1 620 272
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_float64(double value);

1459 12 add_be_int16 4 1756 26 StreamWriter::add_be_int16 0 1 621 369
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_be_int16(short int value);

1460 12 add_be_int32 4 1756 26 StreamWriter::add_be_int32 0 1 622 369
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
50
inline void StreamWriter::add_be_int32(int value);

1461 12 add_be_int64 4 1756 26 StreamWriter::add_be_int64 0 1 623 300
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_be_int64(__int64 value);

1462 13 add_be_uint16 4 1756 27 StreamWriter::add_be_uint16 0 1 624 304
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
66
inline void StreamWriter::add_be_uint16(unsigned short int value);

1463 13 add_be_uint32 4 1756 27 StreamWriter::add_be_uint32 0 1 625 304
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
60
inline void StreamWriter::add_be_uint32(unsigned int value);

1464 13 add_be_uint64 4 1756 27 StreamWriter::add_be_uint64 0 1 626 304
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
64
inline void StreamWriter::add_be_uint64(unsigned __int64 value);

1465 14 add_be_float32 4 1756 28 StreamWriter::add_be_float32 0 1 627 466
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_be_float32(float value);

1466 14 add_be_float64 4 1756 28 StreamWriter::add_be_float64 0 1 628 309
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_float64(double value);

1467 10 add_string 4 1756 24 StreamWriter::add_string 0 1 629 331
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Public
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
70
inline void StreamWriter::add_string(basic_string< char > const &str);

1468 12 add_string32 4 1756 26 StreamWriter::add_string32 0 1 630 313
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
////////////////////////////////////////////////////////////////////
72
inline void StreamWriter::add_string32(basic_string< char > const &str);

1469 12 add_z_string 4 1756 26 StreamWriter::add_z_string 0 1 631 313
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
65
inline void StreamWriter::add_z_string(basic_string< char > str);

1470 16 add_fixed_string 4 1756 30 StreamWriter::add_fixed_string 0 1 632 514
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
95
inline void StreamWriter::add_fixed_string(basic_string< char > const &str, unsigned int size);

1471 9 pad_bytes 4 1756 23 StreamWriter::pad_bytes 0 1 633 291
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               stream.
////////////////////////////////////////////////////////////////////
48
void StreamWriter::pad_bytes(unsigned int size);

1472 11 append_data 4 1756 25 StreamWriter::append_data 0 1 634 596
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////
75
inline void StreamWriter::append_data(void const *data, unsigned int size);

1473 12 StreamReader 4 1757 26 StreamReader::StreamReader 0 2 635 636 1540
// Filename: streamReader.I
// Created by:  drose (04Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
65
inline StreamReader::StreamReader(istream *in, bool owns_stream);

1474 10 operator = 4 1757 24 StreamReader::operator = 0 1 637 314
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Assignment Operator
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
63
inline void StreamReader::operator =(StreamReader const &copy);

1475 13 ~StreamReader 4 1757 27 StreamReader::~StreamReader 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamReader::~StreamReader(void);

1476 11 get_istream 4 1757 25 StreamReader::get_istream 0 1 638 251
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline istream *StreamReader::get_istream(void) const;

1477 8 get_bool 4 1757 22 StreamReader::get_bool 0 1 639 247
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
41
inline bool StreamReader::get_bool(void);

1478 8 get_int8 4 1757 22 StreamReader::get_int8 0 1 640 254
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
48
inline signed char StreamReader::get_int8(void);

1479 9 get_uint8 4 1757 23 StreamReader::get_uint8 0 1 641 258
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
51
inline unsigned char StreamReader::get_uint8(void);

1480 9 get_int16 4 1757 23 StreamReader::get_int16 0 1 642 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
47
inline short int StreamReader::get_int16(void);

1481 9 get_int32 4 1757 23 StreamReader::get_int32 0 1 643 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
41
inline int StreamReader::get_int32(void);

1482 9 get_int64 4 1757 23 StreamReader::get_int64 0 1 644 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
45
inline __int64 StreamReader::get_int64(void);

1483 10 get_uint16 4 1757 24 StreamReader::get_uint16 0 1 645 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
57
inline unsigned short int StreamReader::get_uint16(void);

1484 10 get_uint32 4 1757 24 StreamReader::get_uint32 0 1 646 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
51
inline unsigned int StreamReader::get_uint32(void);

1485 10 get_uint64 4 1757 24 StreamReader::get_uint64 0 1 647 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
55
inline unsigned __int64 StreamReader::get_uint64(void);

1486 11 get_float32 4 1757 25 StreamReader::get_float32 0 1 648 445
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
45
inline float StreamReader::get_float32(void);

1487 11 get_float64 4 1757 25 StreamReader::get_float64 0 1 649 265
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
46
inline double StreamReader::get_float64(void);

1488 12 get_be_int16 4 1757 26 StreamReader::get_be_int16 0 1 650 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
50
inline short int StreamReader::get_be_int16(void);

1489 12 get_be_int32 4 1757 26 StreamReader::get_be_int32 0 1 651 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
44
inline int StreamReader::get_be_int32(void);

1490 12 get_be_int64 4 1757 26 StreamReader::get_be_int64 0 1 652 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
48
inline __int64 StreamReader::get_be_int64(void);

1491 13 get_be_uint16 4 1757 27 StreamReader::get_be_uint16 0 1 653 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
60
inline unsigned short int StreamReader::get_be_uint16(void);

1492 13 get_be_uint32 4 1757 27 StreamReader::get_be_uint32 0 1 654 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
54
inline unsigned int StreamReader::get_be_uint32(void);

1493 13 get_be_uint64 4 1757 27 StreamReader::get_be_uint64 0 1 655 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
58
inline unsigned __int64 StreamReader::get_be_uint64(void);

1494 14 get_be_float32 4 1757 28 StreamReader::get_be_float32 0 1 656 459
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
48
inline float StreamReader::get_be_float32(void);

1495 14 get_be_float64 4 1757 28 StreamReader::get_be_float64 0 1 657 279
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
49
inline double StreamReader::get_be_float64(void);

1496 10 get_string 4 1757 24 StreamReader::get_string 0 1 658 258
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_string
//       Access: Published
//  Description: Extracts a variable-length string.
////////////////////////////////////////////////////////////////////
52
basic_string< char > StreamReader::get_string(void);

1497 12 get_string32 4 1757 26 StreamReader::get_string32 0 1 659 304
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_string32
//       Access: Published
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
////////////////////////////////////////////////////////////////////
54
basic_string< char > StreamReader::get_string32(void);

1498 12 get_z_string 4 1757 26 StreamReader::get_z_string 0 1 660 306
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_z_string
//       Access: Published
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
54
basic_string< char > StreamReader::get_z_string(void);

1499 16 get_fixed_string 4 1757 30 StreamReader::get_fixed_string 0 1 661 378
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_fixed_string
//       Access: Published
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
////////////////////////////////////////////////////////////////////
71
basic_string< char > StreamReader::get_fixed_string(unsigned int size);

1500 10 skip_bytes 4 1757 24 StreamReader::skip_bytes 0 1 662 296
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::skip_bytes
//       Access: Published
//  Description: Skips over the indicated number of bytes in the
//               stream.
////////////////////////////////////////////////////////////////////
49
void StreamReader::skip_bytes(unsigned int size);

1501 13 extract_bytes 4 1757 27 StreamReader::extract_bytes 0 1 663 326
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::extract_bytes
//       Access: Published
//  Description: Extracts the indicated number of bytes in the
//               stream and returns them as a string.
////////////////////////////////////////////////////////////////////
68
basic_string< char > StreamReader::extract_bytes(unsigned int size);

1502 8 readline 4 1757 22 StreamReader::readline 0 1 664 604
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's File.readline()
//               function.
////////////////////////////////////////////////////////////////////
50
basic_string< char > StreamReader::readline(void);

1503 7 HashVal 4 1758 16 HashVal::HashVal 0 2 665 666 1116
// Filename: hashVal.I
// Created by:  drose (14Nov00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline HashVal::HashVal(void);

1504 10 operator = 4 1758 19 HashVal::operator = 0 1 667 232
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void HashVal::operator =(HashVal const &copy);

1505 11 operator == 4 1758 20 HashVal::operator == 0 1 668 219
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool HashVal::operator ==(HashVal const &other) const;

1506 11 operator != 4 1758 20 HashVal::operator != 0 1 669 219
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool HashVal::operator !=(HashVal const &other) const;

1507 10 operator < 4 1758 19 HashVal::operator < 0 1 670 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline bool HashVal::operator <(HashVal const &other) const;

1508 10 compare_to 4 1758 19 HashVal::compare_to 0 1 671 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int HashVal::compare_to(HashVal const &other) const;

1509 10 merge_with 4 1758 19 HashVal::merge_with 0 1 672 311
////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
////////////////////////////////////////////////////////////////////
54
inline void HashVal::merge_with(HashVal const &other);

1510 10 output_dec 4 1758 19 HashVal::output_dec 0 1 673 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
////////////////////////////////////////////////////////////////////
52
inline void HashVal::output_dec(ostream &out) const;

1511 9 input_dec 4 1758 18 HashVal::input_dec 0 1 674 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
////////////////////////////////////////////////////////////////////
44
inline void HashVal::input_dec(istream &in);

1512 10 output_hex 4 1758 19 HashVal::output_hex 0 1 675 288
// HAVE_OPENSSL
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
45
void HashVal::output_hex(ostream &out) const;

1513 9 input_hex 4 1758 18 HashVal::input_hex 0 1 676 270
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
37
void HashVal::input_hex(istream &in);

1514 13 output_binary 4 1758 22 HashVal::output_binary 0 1 677 370
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
////////////////////////////////////////////////////////////////////
48
void HashVal::output_binary(ostream &out) const;

1515 12 input_binary 4 1758 21 HashVal::input_binary 0 1 678 366
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
////////////////////////////////////////////////////////////////////
40
void HashVal::input_binary(istream &in);

1516 6 output 4 1758 15 HashVal::output 0 1 679 215
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline void HashVal::output(ostream &out) const;

1517 6 as_dec 4 1758 15 HashVal::as_dec 0 1 680 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_dec(void) const;

1518 12 set_from_dec 4 1758 21 HashVal::set_from_dec 0 1 681 336
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_dec(basic_string< char > const &text);

1519 6 as_hex 4 1758 15 HashVal::as_hex 0 1 682 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_hex(void) const;

1520 12 set_from_hex 4 1758 21 HashVal::set_from_hex 0 1 683 334
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_hex(basic_string< char > const &text);

1521 6 as_bin 4 1758 15 HashVal::as_bin 0 1 684 262
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_bin(void) const;

1522 12 set_from_bin 4 1758 21 HashVal::set_from_bin 0 1 685 329
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_bin(basic_string< char > const &text);

1523 14 write_datagram 4 1758 23 HashVal::write_datagram 0 1 686 223
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void HashVal::write_datagram(Datagram &destination) const;

1524 13 read_datagram 4 1758 22 HashVal::read_datagram 0 1 687 222
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HashVal::read_datagram(DatagramIterator &source);

1525 12 write_stream 4 1758 21 HashVal::write_stream 0 1 688 221
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HashVal::write_stream(StreamWriter &destination) const;

1526 11 read_stream 4 1758 20 HashVal::read_stream 0 1 689 220
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void HashVal::read_stream(StreamReader &source);

1527 9 hash_file 4 1758 18 HashVal::hash_file 0 1 690 500
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
50
bool HashVal::hash_file(Filename const &filename);

1528 12 hash_ramfile 4 1758 21 HashVal::hash_ramfile 0 1 691 433
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

1529 11 hash_string 4 1758 20 HashVal::hash_string 0 1 692 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
67
inline void HashVal::hash_string(basic_string< char > const &data);

1530 11 hash_buffer 4 1758 20 HashVal::hash_buffer 0 1 693 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
void HashVal::hash_buffer(char const *buffer, int length);

1531 8 ~HashVal 4 1758 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

1532 19 MemoryUsagePointers 4 1759 40 MemoryUsagePointers::MemoryUsagePointers 0 1 694 228
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
MemoryUsagePointers::MemoryUsagePointers(void);

1533 20 ~MemoryUsagePointers 4 1759 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
MemoryUsagePointers::~MemoryUsagePointers(void);

1534 16 get_num_pointers 4 1759 37 MemoryUsagePointers::get_num_pointers 0 1 695 276
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Public
//  Description: Returns the number of pointers in the set.
////////////////////////////////////////////////////////////////////
54
int MemoryUsagePointers::get_num_pointers(void) const;

1535 11 get_pointer 4 1759 32 MemoryUsagePointers::get_pointer 0 1 696 264
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Public
//  Description: Returns the nth pointer of the set.
////////////////////////////////////////////////////////////////////
62
ReferenceCount *MemoryUsagePointers::get_pointer(int n) const;

1536 17 get_typed_pointer 4 1759 38 MemoryUsagePointers::get_typed_pointer 0 1 697 442
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Public
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
////////////////////////////////////////////////////////////////////
65
TypedObject *MemoryUsagePointers::get_typed_pointer(int n) const;

1537 8 get_type 4 1759 29 MemoryUsagePointers::get_type 0 1 698 302
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Public
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
54
TypeHandle MemoryUsagePointers::get_type(int n) const;

1538 13 get_type_name 4 1759 34 MemoryUsagePointers::get_type_name 0 1 699 305
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Public
//  Description: Returns the type name of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
69
basic_string< char > MemoryUsagePointers::get_type_name(int n) const;

1539 7 get_age 4 1759 28 MemoryUsagePointers::get_age 0 1 700 456
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Public
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
////////////////////////////////////////////////////////////////////
49
double MemoryUsagePointers::get_age(int n) const;

1540 5 clear 4 1759 26 MemoryUsagePointers::clear 0 1 701 251
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Public
//  Description: Empties the set of pointers.
////////////////////////////////////////////////////////////////////
38
void MemoryUsagePointers::clear(void);

1541 9 Multifile 4 1760 20 Multifile::Multifile 0 1 702 2545
//
// A Multifile consists of the following elements:
//
// (1) A header.  This is always the first n bytes of the Multifile,
// and contains a magic number to identify the file, as well as
// version numbers and any file-specific parameters.
//
//   char[6]    The string Multifile::_header, a magic number.
//   int16      The file's major version number
//   int16      The file's minor version number
//   uint32     Scale factor.  This scales all address references within
//              the file.  Normally 1, this may be set larger to
//              support Multifiles larger than 4GB.
//
// (2) Zero or more index entries, one for each subfile within the
// Multifile.  These entries are of variable length.  The first one of
// these immediately follows the header, and the first word of each
// index entry contains the address of the next index entry.  A zero
// "next" address marks the end of the chain.  These may appear at any
// point within the Multifile; they do not necessarily appear in
// sequential order at the beginning of the file (although they will
// after the file has been "packed").
//
//   uint32     The address of the next entry.
//   uint32     The address of this subfile's data record.
//   uint32     The length in bytes of this subfile's data record.
//   uint16     The Subfile::_flags member.
//  [uint32]    The original, uncompressed and unencrypted length of the
//               subfile, if it is compressed or encrypted.  This field
//               is only present if one or both of the SF_compressed
//               or SF_encrypted bits are set in _flags.
//   uint16     The length in bytes of the subfile's name.
//   char[n]    The subfile's name.
//
// (3) Zero or more data entries, one for each subfile.  These may
// appear at any point within the Multifile; they do not necessarily
// follow each index entry, nor are they necessarily all grouped
// together at the end (although they will be all grouped together at
// the end after the file has been "packed").  These are just blocks
// of literal data.
//
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::Copy Constructor
//       Access: Private
//  Description: Don't try to copy Multifiles.
////////////////////////////////////////////////////////////////////
27
Multifile::Multifile(void);

1542 10 ~Multifile 4 1760 21 Multifile::~Multifile 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
Multifile::~Multifile(void);

1543 9 open_read 4 1760 20 Multifile::open_read 0 1 703 1162
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               This version of open_read() does not close the
//               istream when Multifile.close() is called.
////////////////////////////////////////////////////////////////////
58
bool Multifile::open_read(Filename const &multifile_name);

1544 10 open_write 4 1760 21 Multifile::open_write 0 1 704 1247
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               This version of open_write() does not close the
//               ostream when Multifile.close() is called.
////////////////////////////////////////////////////////////////////
59
bool Multifile::open_write(Filename const &multifile_name);

1545 15 open_read_write 4 1760 26 Multifile::open_read_write 0 1 705 1251
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               This version of open_read_write() does not close the
//               iostream when Multifile.close() is called.
////////////////////////////////////////////////////////////////////
64
bool Multifile::open_read_write(Filename const &multifile_name);

1546 5 close 4 1760 16 Multifile::close 0 1 706 402
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
////////////////////////////////////////////////////////////////////
28
void Multifile::close(void);

1547 18 get_multifile_name 4 1760 29 Multifile::get_multifile_name 0 1 707 976
// Filename: multifile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
////////////////////////////////////////////////////////////////////
65
inline Filename const &Multifile::get_multifile_name(void) const;

1548 13 is_read_valid 4 1760 24 Multifile::is_read_valid 0 1 708 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
////////////////////////////////////////////////////////////////////
49
inline bool Multifile::is_read_valid(void) const;

1549 14 is_write_valid 4 1760 25 Multifile::is_write_valid 0 1 709 407
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
////////////////////////////////////////////////////////////////////
50
inline bool Multifile::is_write_valid(void) const;

1550 12 needs_repack 4 1760 23 Multifile::needs_repack 0 1 710 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
////////////////////////////////////////////////////////////////////
48
inline bool Multifile::needs_repack(void) const;

1551 16 set_scale_factor 4 1760 27 Multifile::set_scale_factor 0 1 711 1220
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
////////////////////////////////////////////////////////////////////
60
void Multifile::set_scale_factor(unsigned int scale_factor);

1552 16 get_scale_factor 4 1760 27 Multifile::get_scale_factor 0 1 712 321
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
////////////////////////////////////////////////////////////////////
60
inline unsigned int Multifile::get_scale_factor(void) const;

1553 19 set_encryption_flag 4 1760 30 Multifile::set_encryption_flag 0 1 713 907
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but you must call flush() or
//               repack() before changing these properties, and the
//               resulting file can't be mounted via VFS.
////////////////////////////////////////////////////////////////////
54
inline void Multifile::set_encryption_flag(bool flag);

1554 19 get_encryption_flag 4 1760 30 Multifile::get_encryption_flag 0 1 714 430
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
////////////////////////////////////////////////////////////////////
55
inline bool Multifile::get_encryption_flag(void) const;

1555 23 set_encryption_password 4 1760 34 Multifile::set_encryption_password 0 1 715 451
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
////////////////////////////////////////////////////////////////////
85
inline void Multifile::set_encryption_password(basic_string< char > const &password);

1556 23 get_encryption_password 4 1760 34 Multifile::get_encryption_password 0 1 716 395
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &Multifile::get_encryption_password(void) const;

1557 11 add_subfile 4 1760 22 Multifile::add_subfile 0 1 717 1287
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////
135
basic_string< char > Multifile::add_subfile(basic_string< char > const &subfile_name, Filename const &filename, int compression_level);

1558 14 update_subfile 4 1760 25 Multifile::update_subfile 0 1 718 509
////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared to the disk file, and it is replaced only if
//               it is different; otherwise, the multifile is left
//               unchanged.
////////////////////////////////////////////////////////////////////
138
basic_string< char > Multifile::update_subfile(basic_string< char > const &subfile_name, Filename const &filename, int compression_level);

1559 5 flush 4 1760 16 Multifile::flush 0 1 719 1090
////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
28
bool Multifile::flush(void);

1560 6 repack 4 1760 17 Multifile::repack 0 1 720 959
////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
29
bool Multifile::repack(void);

1561 16 get_num_subfiles 4 1760 27 Multifile::get_num_subfiles 0 1 721 412
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
////////////////////////////////////////////////////////////////////
44
int Multifile::get_num_subfiles(void) const;

1562 12 find_subfile 4 1760 23 Multifile::find_subfile 0 1 722 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
////////////////////////////////////////////////////////////////////
76
int Multifile::find_subfile(basic_string< char > const &subfile_name) const;

1563 13 has_directory 4 1760 24 Multifile::has_directory 0 1 723 461
////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
////////////////////////////////////////////////////////////////////
78
bool Multifile::has_directory(basic_string< char > const &subfile_name) const;

1564 14 scan_directory 4 1760 25 Multifile::scan_directory 0 1 724 755
////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
121
bool Multifile::scan_directory(vector< basic_string< char > > &contents, basic_string< char > const &subfile_name) const;

1565 14 remove_subfile 4 1760 25 Multifile::remove_subfile 0 1 725 770
////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////
42
void Multifile::remove_subfile(int index);

1566 16 get_subfile_name 4 1760 27 Multifile::get_subfile_name 0 1 726 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
////////////////////////////////////////////////////////////////////
73
basic_string< char > const &Multifile::get_subfile_name(int index) const;

1567 18 get_subfile_length 4 1760 29 Multifile::get_subfile_length 0 1 727 433
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
////////////////////////////////////////////////////////////////////
60
unsigned int Multifile::get_subfile_length(int index) const;

1568 21 is_subfile_compressed 4 1760 32 Multifile::is_subfile_compressed 0 1 728 372
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
55
bool Multifile::is_subfile_compressed(int index) const;

1569 20 is_subfile_encrypted 4 1760 31 Multifile::is_subfile_encrypted 0 1 729 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool Multifile::is_subfile_encrypted(int index) const;

1570 27 get_subfile_internal_length 4 1760 38 Multifile::get_subfile_internal_length 0 1 730 639
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
////////////////////////////////////////////////////////////////////
69
unsigned int Multifile::get_subfile_internal_length(int index) const;

1571 12 read_subfile 4 1760 23 Multifile::read_subfile 0 1 731 620
////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a string with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Multifile::read_subfile(int index);

1572 17 open_read_subfile 4 1760 28 Multifile::open_read_subfile 0 1 732 1108
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened fstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should delete it when you are finished
//               reading the subfile.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
////////////////////////////////////////////////////////////////////
49
istream *Multifile::open_read_subfile(int index);

1573 15 extract_subfile 4 1760 26 Multifile::extract_subfile 0 1 733 300
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
////////////////////////////////////////////////////////////////////
69
bool Multifile::extract_subfile(int index, Filename const &filename);

1574 15 compare_subfile 4 1760 26 Multifile::compare_subfile 0 1 734 464
////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
////////////////////////////////////////////////////////////////////
69
bool Multifile::compare_subfile(int index, Filename const &filename);

1575 6 output 4 1760 17 Multifile::output 0 1 735 217
////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void Multifile::output(ostream &out) const;

1576 2 ls 4 1760 13 Multifile::ls 0 2 736 737 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
////////////////////////////////////////////////////////////////////
48
void Multifile::ls(ostream &out = (cout)) const;

1577 7 Namable 4 1761 16 Namable::Namable 0 3 738 739 740 1110
// Filename: namable.I
// Created by:  drose (16Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline Namable::Namable(basic_string< char > const &initial_name = (""));

1578 10 operator = 4 1761 19 Namable::operator = 0 1 741 229
////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline Namable &Namable::operator =(Namable const &other);

1579 8 set_name 4 1761 17 Namable::set_name 0 1 742 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void Namable::set_name(basic_string< char > const &name);

1580 10 clear_name 4 1761 19 Namable::clear_name 0 1 743 251
////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
////////////////////////////////////////////////////////////////////
38
inline void Namable::clear_name(void);

1581 8 has_name 4 1761 17 Namable::has_name 0 1 744 311
////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
42
inline bool Namable::has_name(void) const;

1582 8 get_name 4 1761 17 Namable::get_name 0 1 745 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &Namable::get_name(void) const;

1583 6 output 4 1761 15 Namable::output 0 1 746 483
// In the absence of any definition to the contrary, outputting a
// Namable will write out its name.

////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
////////////////////////////////////////////////////////////////////
48
inline void Namable::output(ostream &out) const;

1584 14 get_class_type 4 1761 23 Namable::get_class_type 0 1 747 0
48
static TypeHandle Namable::get_class_type(void);

1585 8 ~Namable 4 1761 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

1586 13 password_hash 1 0 13 password_hash 0 1 894 0
130
basic_string< char > password_hash(basic_string< char > const &password, basic_string< char > const &salt, int iters, int keylen);

1587 9 Patchfile 4 1762 20 Patchfile::Patchfile 0 2 748 749 438
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
27
Patchfile::Patchfile(void);

1588 10 ~Patchfile 4 1762 21 Patchfile::~Patchfile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
28
Patchfile::~Patchfile(void);

1589 5 build 4 1762 16 Patchfile::build 0 1 750 641
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
////////////////////////////////////////////////////////////////////
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

1590 11 read_header 4 1762 22 Patchfile::read_header 0 1 751 449
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
////////////////////////////////////////////////////////////////////
55
int Patchfile::read_header(Filename const &patch_file);

1591 8 initiate 4 1762 19 Patchfile::initiate 0 1 752 862
////////////////////////////////////////////////////////////////////
///// PATCH FILE APPLY MEMBER FUNCTIONS
/////
////////////////////
///// NOTE: this patch-application functionality unfortunately has to be
/////       duplicated in the Installer. It is contained in the file
/////       installerApplyPatch.cxx
/////       PLEASE MAKE SURE THAT THAT FILE GETS UPDATED IF ANY OF THIS
/////       LOGIC CHANGES! (i.e. if the patch file format changes)
////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//     file and patch are destroyed in the process).
////////////////////////////////////////////////////////////////////
74
int Patchfile::initiate(Filename const &patch_file, Filename const &file);

1592 3 run 4 1762 14 Patchfile::run 0 1 753 252
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
////////////////////////////////////////////////////////////////////
25
int Patchfile::run(void);

1593 5 apply 4 1762 16 Patchfile::apply 0 1 754 212
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
bool Patchfile::apply(Filename &patch_file, Filename &file);

1594 12 get_progress 4 1762 23 Patchfile::get_progress 0 1 755 935
// Filename: patchfile.I
// Created by:  darren, mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//#include "config_downloader.h"
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline float Patchfile::get_progress(void) const;

1595 20 set_footprint_length 4 1762 31 Patchfile::set_footprint_length 0 1 756 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Patchfile::set_footprint_length(int length);

1596 20 get_footprint_length 4 1762 31 Patchfile::get_footprint_length 0 1 757 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline int Patchfile::get_footprint_length(void);

1597 22 reset_footprint_length 4 1762 33 Patchfile::reset_footprint_length 0 1 758 232
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void Patchfile::reset_footprint_length(void);

1598 15 has_source_hash 4 1762 26 Patchfile::has_source_hash 0 1 759 391
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
////////////////////////////////////////////////////////////////////
51
inline bool Patchfile::has_source_hash(void) const;

1599 15 get_source_hash 4 1762 26 Patchfile::get_source_hash 0 1 760 267
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_source_hash(void) const;

1600 15 get_result_hash 4 1762 26 Patchfile::get_result_hash 0 1 761 310
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_result_hash(void) const;

1601 13 get_long_time 4 1763 24 TrueClock::get_long_time 0 1 762 454
// get_long_time() returns the most accurate timer we have over a
// long interval.  It may not be very precise for measuring short
// intervals, but it should not drift substantially over the long
// haul.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
double TrueClock::get_long_time(void);

1602 14 get_short_time 4 1763 25 TrueClock::get_short_time 0 1 763 458
// get_short_time() returns the most precise timer we have over a
// short interval.  It may tend to drift over the long haul, but it
// should have lots of digits to measure short intervals very
// precisely.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
39
double TrueClock::get_short_time(void);

1603 15 get_error_count 4 1763 26 TrueClock::get_error_count 0 1 764 1348
// Filename: trueClock.I
// Created by:  drose (04Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
////////////////////////////////////////////////////////////////////
50
inline int TrueClock::get_error_count(void) const;

1604 14 get_global_ptr 4 1763 25 TrueClock::get_global_ptr 0 1 765 309
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
////////////////////////////////////////////////////////////////////
57
static inline TrueClock *TrueClock::get_global_ptr(void);

1605 12 ProfileTimer 4 1764 26 ProfileTimer::ProfileTimer 0 4 766 767 768 769 0
89
ProfileTimer::ProfileTimer(char const *name = (0), int maxEntries = (MaxEntriesDefault));

1606 13 ~ProfileTimer 4 1764 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

1607 4 init 4 1764 18 ProfileTimer::init 0 2 770 771 0
80
void ProfileTimer::init(char const *name, int maxEntries = (MaxEntriesDefault));

1608 2 on 4 1764 16 ProfileTimer::on 0 1 772 660
// Filename: profileTimer.I
// Created by:  
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
28
void ProfileTimer::on(void);

1609 4 mark 4 1764 18 ProfileTimer::mark 0 1 773 0
41
void ProfileTimer::mark(char const *tag);

1610 3 off 4 1764 17 ProfileTimer::off 0 2 774 775 0
29
void ProfileTimer::off(void);

1611 12 getTotalTime 4 1764 26 ProfileTimer::getTotalTime 0 1 776 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

1612 16 consolidateAllTo 4 1764 30 ProfileTimer::consolidateAllTo 0 2 777 778 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
66
static void ProfileTimer::consolidateAllTo(ostream &out = (cout));

1613 13 consolidateTo 4 1764 27 ProfileTimer::consolidateTo 0 2 779 780 0
62
void ProfileTimer::consolidateTo(ostream &out = (cout)) const;

1614 10 printAllTo 4 1764 24 ProfileTimer::printAllTo 0 2 781 782 0
60
static void ProfileTimer::printAllTo(ostream &out = (cout));

1615 7 printTo 4 1764 21 ProfileTimer::printTo 0 2 783 784 0
56
void ProfileTimer::printTo(ostream &out = (cout)) const;

1616 11 TextEncoder 4 1765 24 TextEncoder::TextEncoder 0 1 785 898
// Filename: textEncoder.I
// Created by:  drose (26Mar03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline TextEncoder::TextEncoder(void);

1617 12 set_encoding 4 1765 25 TextEncoder::set_encoding 0 1 786 692
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
////////////////////////////////////////////////////////////////////
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

1618 12 get_encoding 4 1765 25 TextEncoder::get_encoding 0 1 787 344
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
////////////////////////////////////////////////////////////////////
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

1619 20 set_default_encoding 4 1765 33 TextEncoder::set_default_encoding 0 1 788 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

1620 20 get_default_encoding 4 1765 33 TextEncoder::get_default_encoding 0 1 789 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

1621 8 set_text 4 1765 21 TextEncoder::set_text 0 2 790 791 1135
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
68
inline void TextEncoder::set_text(basic_string< char > const &text);

1622 10 clear_text 4 1765 23 TextEncoder::clear_text 0 1 792 261
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
////////////////////////////////////////////////////////////////////
42
inline void TextEncoder::clear_text(void);

1623 8 has_text 4 1765 21 TextEncoder::has_text 0 1 793 220
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool TextEncoder::has_text(void) const;

1624 10 make_upper 4 1765 23 TextEncoder::make_upper 0 1 794 361
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_upper
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               uppercase letters (preserving accent marks
//               correctly).
////////////////////////////////////////////////////////////////////
35
void TextEncoder::make_upper(void);

1625 10 make_lower 4 1765 23 TextEncoder::make_lower 0 1 795 361
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_lower
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               lowercase letters (preserving accent marks
//               correctly).
////////////////////////////////////////////////////////////////////
35
void TextEncoder::make_lower(void);

1626 8 get_text 4 1765 21 TextEncoder::get_text 0 2 796 797 618
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > TextEncoder::get_text(void) const;

1627 11 append_text 4 1765 24 TextEncoder::append_text 0 1 798 300
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
71
inline void TextEncoder::append_text(basic_string< char > const &text);

1628 19 append_unicode_char 4 1765 32 TextEncoder::append_unicode_char 0 1 799 380
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
60
inline void TextEncoder::append_unicode_char(int character);

1629 13 get_num_chars 4 1765 26 TextEncoder::get_num_chars 0 1 800 411
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
////////////////////////////////////////////////////////////////////
50
inline int TextEncoder::get_num_chars(void) const;

1630 16 get_unicode_char 4 1765 29 TextEncoder::get_unicode_char 0 1 801 459
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
58
inline int TextEncoder::get_unicode_char(int index) const;

1631 16 set_unicode_char 4 1765 29 TextEncoder::set_unicode_char 0 1 802 456
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
68
inline void TextEncoder::set_unicode_char(int index, int character);

1632 16 get_encoded_char 4 1765 29 TextEncoder::get_encoded_char 0 2 803 804 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > TextEncoder::get_encoded_char(int index) const;

1633 17 get_text_as_ascii 4 1765 30 TextEncoder::get_text_as_ascii 0 1 805 1136
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > TextEncoder::get_text_as_ascii(void) const;

1634 13 reencode_text 4 1765 26 TextEncoder::reencode_text 0 1 806 559
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
////////////////////////////////////////////////////////////////////
150
static inline basic_string< char > TextEncoder::reencode_text(basic_string< char > const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

1635 15 unicode_isalpha 4 1765 28 TextEncoder::unicode_isalpha 0 1 807 408
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isalpha(int character);

1636 15 unicode_isdigit 4 1765 28 TextEncoder::unicode_isdigit 0 1 808 403
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isdigit(int character);

1637 15 unicode_ispunct 4 1765 28 TextEncoder::unicode_ispunct 0 1 809 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_ispunct(int character);

1638 15 unicode_islower 4 1765 28 TextEncoder::unicode_islower 0 1 810 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_islower(int character);

1639 15 unicode_isupper 4 1765 28 TextEncoder::unicode_isupper 0 1 811 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isupper(int character);

1640 15 unicode_isspace 4 1765 28 TextEncoder::unicode_isspace 0 1 812 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isspace(int character);

1641 15 unicode_toupper 4 1765 28 TextEncoder::unicode_toupper 0 1 813 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_toupper(int character);

1642 15 unicode_tolower 4 1765 28 TextEncoder::unicode_tolower 0 1 814 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_tolower(int character);

1643 5 upper 4 1765 18 TextEncoder::upper 0 2 815 816 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
90
static inline basic_string< char > TextEncoder::upper(basic_string< char > const &source);

1644 5 lower 4 1765 18 TextEncoder::lower 0 2 817 818 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
90
static inline basic_string< char > TextEncoder::lower(basic_string< char > const &source);

1645 9 set_wtext 4 1765 22 TextEncoder::set_wtext 0 1 819 558
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
////////////////////////////////////////////////////////////////////
73
inline void TextEncoder::set_wtext(basic_string< wchar_t > const &wtext);

1646 9 get_wtext 4 1765 22 TextEncoder::get_wtext 0 1 820 428
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
////////////////////////////////////////////////////////////////////
73
inline basic_string< wchar_t > const &TextEncoder::get_wtext(void) const;

1647 12 append_wtext 4 1765 25 TextEncoder::append_wtext 0 1 821 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
75
inline void TextEncoder::append_wtext(basic_string< wchar_t > const &text);

1648 18 get_wtext_as_ascii 4 1765 31 TextEncoder::get_wtext_as_ascii 0 1 822 1108
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain in their
//               original form.
////////////////////////////////////////////////////////////////////
68
basic_string< wchar_t > TextEncoder::get_wtext_as_ascii(void) const;

1649 8 is_wtext 4 1765 21 TextEncoder::is_wtext 0 1 823 466
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
////////////////////////////////////////////////////////////////////
39
bool TextEncoder::is_wtext(void) const;

1650 12 encode_wchar 4 1765 25 TextEncoder::encode_wchar 0 1 824 374
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wchar
//       Access: Published, Static
//  Description: Encodes a single wide char into a one-, two-, or
//               three-byte string, according to the given encoding
//               system.
////////////////////////////////////////////////////////////////////
98
static basic_string< char > TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

1651 12 encode_wtext 4 1765 25 TextEncoder::encode_wtext 0 2 825 826 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published, Static
//  Description: Encodes a wide-text string into a single-char string,
//               according to the given encoding.
////////////////////////////////////////////////////////////////////
98
inline basic_string< char > TextEncoder::encode_wtext(basic_string< wchar_t > const &wtext) const;

1652 11 decode_text 4 1765 24 TextEncoder::decode_text 0 2 827 828 672
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published, Static
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the given encoding system.
////////////////////////////////////////////////////////////////////
96
inline basic_string< wchar_t > TextEncoder::decode_text(basic_string< char > const &text) const;

1653 14 get_class_type 4 1765 27 TextEncoder::get_class_type 0 1 829 0
52
static TypeHandle TextEncoder::get_class_type(void);

1654 12 ~TextEncoder 4 1765 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

1655 21 upcast_to_TypedObject 12 1767 42 TypedReferenceCount::upcast_to_TypedObject 0 1 831 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

1656 31 downcast_to_TypedReferenceCount 12 1741 44 TypedObject::downcast_to_TypedReferenceCount 0 1 832 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

1657 24 upcast_to_ReferenceCount 12 1767 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 833 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

1658 31 downcast_to_TypedReferenceCount 12 1746 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 834 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

1659 14 get_class_type 4 1767 35 TypedReferenceCount::get_class_type 0 1 830 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

1660 20 ~TypedReferenceCount 4 1767 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

1661 15 get_file_system 4 1768 28 VirtualFile::get_file_system 0 1 835 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

1662 12 get_filename 4 1768 25 VirtualFile::get_filename 0 1 836 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

1663 21 get_original_filename 4 1768 34 VirtualFile::get_original_filename 0 1 837 418
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
////////////////////////////////////////////////////////////////////
70
inline Filename const &VirtualFile::get_original_filename(void) const;

1664 12 is_directory 4 1768 25 VirtualFile::is_directory 0 1 838 354
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool VirtualFile::is_directory(void) const;

1665 15 is_regular_file 4 1768 28 VirtualFile::is_regular_file 0 1 839 355
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool VirtualFile::is_regular_file(void) const;

1666 14 scan_directory 4 1768 27 VirtualFile::scan_directory 0 1 840 522
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

1667 6 output 4 1768 19 VirtualFile::output 0 1 841 219
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void VirtualFile::output(ostream &out) const;

1668 2 ls 4 1768 15 VirtualFile::ls 0 2 842 843 287
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
////////////////////////////////////////////////////////////////////
50
void VirtualFile::ls(ostream &out = (cout)) const;

1669 6 ls_all 4 1768 19 VirtualFile::ls_all 0 2 844 845 335
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
////////////////////////////////////////////////////////////////////
54
void VirtualFile::ls_all(ostream &out = (cout)) const;

1670 9 read_file 4 1768 22 VirtualFile::read_file 0 1 846 1489
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Fills up the indicated string with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public, Static
//  Description: Fills up the indicated string with the contents of
//               the just-opened file.  Returns true on success, false
//               otherwise.  If the string was not empty on entry, the
//               data read from the file will be concatenated onto it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public, Static
//  Description: As in read_file() with two parameters, above, but
//               only reads up to max_bytes bytes from the file.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > VirtualFile::read_file(bool auto_unwrap) const;

1671 14 open_read_file 4 1768 27 VirtualFile::open_read_file 0 1 847 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

1672 15 close_read_file 4 1768 28 VirtualFile::close_read_file 0 1 848 516
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Public
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
57
void VirtualFile::close_read_file(istream *stream) const;

1673 13 get_file_size 4 1768 26 VirtualFile::get_file_size 0 1 849 508
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
////////////////////////////////////////////////////////////////////
62
virtual int VirtualFile::get_file_size(istream *stream) const;

1674 14 get_class_type 4 1768 27 VirtualFile::get_class_type 0 1 850 0
52
static TypeHandle VirtualFile::get_class_type(void);

1675 12 ~VirtualFile 4 1768 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

1676 14 get_class_type 4 1769 36 VirtualFileComposite::get_class_type 0 1 851 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

1677 21 ~VirtualFileComposite 4 1769 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

1678 16 ~VirtualFileList 4 1770 33 VirtualFileList::~VirtualFileList 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
inline VirtualFileList::~VirtualFileList(void);

1679 13 get_num_files 4 1770 30 VirtualFileList::get_num_files 0 1 852 270
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
54
inline int VirtualFileList::get_num_files(void) const;

1680 8 get_file 4 1770 25 VirtualFileList::get_file 0 1 853 258
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
59
inline VirtualFile *VirtualFileList::get_file(int n) const;

1681 14 get_class_type 4 1771 33 VirtualFileSimple::get_class_type 0 1 854 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

1682 18 ~VirtualFileSimple 4 1771 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

1683 17 VirtualFileSystem 4 1772 36 VirtualFileSystem::VirtualFileSystem 0 1 855 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
VirtualFileSystem::VirtualFileSystem(void);

1684 18 ~VirtualFileSystem 4 1772 37 VirtualFileSystem::~VirtualFileSystem 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
VirtualFileSystem::~VirtualFileSystem(void);

1685 5 mount 4 1772 24 VirtualFileSystem::mount 0 3 856 857 858 1473
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
////////////////////////////////////////////////////////////////////
104
bool VirtualFileSystem::mount(Multifile *multifile, basic_string< char > const &mount_point, int flags);

1686 7 unmount 4 1772 26 VirtualFileSystem::unmount 0 2 859 860 831
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated physical
//               filename (either a directory name or a Multifile
//               name) from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
53
int VirtualFileSystem::unmount(Multifile *multifile);

1687 13 unmount_point 4 1772 32 VirtualFileSystem::unmount_point 0 1 861 388
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
78
int VirtualFileSystem::unmount_point(basic_string< char > const &mount_point);

1688 11 unmount_all 4 1772 30 VirtualFileSystem::unmount_all 0 1 862 329
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
////////////////////////////////////////////////////////////////////
41
int VirtualFileSystem::unmount_all(void);

1689 5 chdir 4 1772 24 VirtualFileSystem::chdir 0 1 863 569
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
//
//               This accepts a string rather than a Filename simply
//               for programmer convenience from the Python prompt.
////////////////////////////////////////////////////////////////////
73
bool VirtualFileSystem::chdir(basic_string< char > const &new_directory);

1690 7 get_cwd 4 1772 26 VirtualFileSystem::get_cwd 0 1 864 275
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
////////////////////////////////////////////////////////////////////
55
Filename const &VirtualFileSystem::get_cwd(void) const;

1691 8 get_file 4 1772 27 VirtualFileSystem::get_file 0 1 865 411
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
85
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename) const;

1692 9 find_file 4 1772 28 VirtualFileSystem::find_file 0 1 866 436
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
////////////////////////////////////////////////////////////////////
117
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath) const;

1693 16 resolve_filename 4 1772 35 VirtualFileSystem::resolve_filename 0 2 867 868 440
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////
160
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, basic_string< char > const &default_extension = ((string()))) const;

1694 14 find_all_files 4 1772 33 VirtualFileSystem::find_all_files 0 1 869 672
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

1695 6 exists 4 1772 25 VirtualFileSystem::exists 0 1 870 983
// Filename: virtualFileSystem.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
////////////////////////////////////////////////////////////////////
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

1696 12 is_directory 4 1772 31 VirtualFileSystem::is_directory 0 1 871 327
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
////////////////////////////////////////////////////////////////////
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

1697 15 is_regular_file 4 1772 34 VirtualFileSystem::is_regular_file 0 1 872 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
////////////////////////////////////////////////////////////////////
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

1698 2 ls 4 1772 21 VirtualFileSystem::ls 0 1 873 442
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.  This accepts a string instead
//               of a Filename purely for programmer convenience at
//               the Python prompt.
////////////////////////////////////////////////////////////////////
78
inline void VirtualFileSystem::ls(basic_string< char > const &filename) const;

1699 6 ls_all 4 1772 25 VirtualFileSystem::ls_all 0 1 874 497
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.  This accepts a string instead of a
//               Filename purely for programmer convenience at the
//               Python prompt.
////////////////////////////////////////////////////////////////////
82
inline void VirtualFileSystem::ls_all(basic_string< char > const &filename) const;

1700 5 write 4 1772 24 VirtualFileSystem::write 0 1 875 303
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
////////////////////////////////////////////////////////////////////
50
void VirtualFileSystem::write(ostream &out) const;

1701 14 get_global_ptr 4 1772 33 VirtualFileSystem::get_global_ptr 0 1 876 773
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
////////////////////////////////////////////////////////////////////
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

1702 9 read_file 4 1772 28 VirtualFileSystem::read_file 0 1 877 1415
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the string up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
107
inline basic_string< char > VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

1703 14 open_read_file 4 1772 33 VirtualFileSystem::open_read_file 0 1 878 750
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
100
inline istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

1704 15 close_read_file 4 1772 34 VirtualFileSystem::close_read_file 0 1 879 525
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
63
void VirtualFileSystem::close_read_file(istream *stream) const;

1705 11 was_deleted 4 1774 30 WeakPointerToVoid::was_deleted 0 1 880 327
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool WeakPointerToVoid::was_deleted(void) const;

1706 16 is_valid_pointer 4 1774 35 WeakPointerToVoid::is_valid_pointer 0 1 881 328
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
////////////////////////////////////////////////////////////////////
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1707 16 set_string_value 4 1775 33 WindowsRegistry::set_string_value 0 1 882 608
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_string_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as a
//               string.  The supplied string value is automatically
//               converted from whatever encoding is set by
//               TextEncoder::set_default_encoding() and written as a
//               Unicode string.  The registry key must already exist
//               prior to calling this function.
////////////////////////////////////////////////////////////////////
148
static bool WindowsRegistry::set_string_value(basic_string< char > const &key, basic_string< char > const &name, basic_string< char > const &value);

1708 13 set_int_value 4 1775 30 WindowsRegistry::set_int_value 0 1 883 400
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_int_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as an
//               integer.  The registry key must already exist prior
//               to calling this function.
////////////////////////////////////////////////////////////////////
121
static bool WindowsRegistry::set_int_value(basic_string< char > const &key, basic_string< char > const &name, int value);

1709 12 get_key_type 4 1775 29 WindowsRegistry::get_key_type 0 1 884 355
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_key_type
//       Access: Published, Static
//  Description: Returns the type of the indicated key, or T_none if
//               the key is not known or is some unsupported type.
////////////////////////////////////////////////////////////////////
126
static WindowsRegistry::Type WindowsRegistry::get_key_type(basic_string< char > const &key, basic_string< char > const &name);

1710 16 get_string_value 4 1775 33 WindowsRegistry::get_string_value 0 1 885 597
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_string_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is a string value.  The
//               string value is automatically encoded using
//               TextEncoder::get_default_encoding().  If the key is
//               not defined or is not a string type value,
//               default_value is returned instead.
////////////////////////////////////////////////////////////////////
172
static basic_string< char > WindowsRegistry::get_string_value(basic_string< char > const &key, basic_string< char > const &name, basic_string< char > const &default_value);

1711 13 get_int_value 4 1775 30 WindowsRegistry::get_int_value 0 1 886 478
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_int_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is an integer value.  If
//               the key is not defined or is not an integer type
//               value, default_value is returned instead.
////////////////////////////////////////////////////////////////////
128
static int WindowsRegistry::get_int_value(basic_string< char > const &key, basic_string< char > const &name, int default_value);

1712 16 ~WindowsRegistry 4 1775 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

894
1 14 Dtool_Koxt9Nre 6 3 1778 0 14 Dtool_Koxt9Nre 2 3 sym 1 1777  3 def 1 1778  
2 14 Dtool_KoxtI2PZ 6 3 1778 0 14 Dtool_KoxtI2PZ 1 3 sym 1 1777  
3 14 Dtool_KoxtCvWF 6 4 1779 0 14 Dtool_KoxtCvWF 2 3 sym 1 1777  3 def 1 1779  
4 14 Dtool_KoxtR2ZD 6 4 1779 0 14 Dtool_KoxtR2ZD 1 3 sym 1 1777  
5 14 Dtool_Koxt4GUj 6 5 1780 0 14 Dtool_Koxt4GUj 2 3 sym 1 1777  3 def 1 1780  
6 14 Dtool_Koxtzb6c 6 5 1780 0 14 Dtool_Koxtzb6c 1 3 sym 1 1777  
7 14 Dtool_KoxtYb57 6 6 1781 0 14 Dtool_KoxtYb57 2 3 sym 1 1777  3 def 1 1781  
8 14 Dtool_KoxtrfMQ 6 6 1781 0 14 Dtool_KoxtrfMQ 1 3 sym 1 1777  
9 14 Dtool_KoxtQcsP 6 7 1777 0 14 Dtool_KoxtQcsP 2 3 sym 1 1777  3 def 1 1777  
10 14 Dtool_Koxt2SjW 6 7 1777 0 14 Dtool_Koxt2SjW 1 3 sym 1 1777  
11 14 Dtool_KoxtPGVr 6 13 1782 0 14 Dtool_KoxtPGVr 0 
12 14 Dtool_KoxtL7Gu 6 14 1782 0 14 Dtool_KoxtL7Gu 0 
13 14 Dtool_KoxtUNsX 6 15 1777 0 14 Dtool_KoxtUNsX 1 4 this 3 1783  
14 14 Dtool_KoxtJyhA 6 16 1778 0 14 Dtool_KoxtJyhA 1 4 this 3 1783  
15 14 Dtool_KoxteRrb 6 17 1778 0 14 Dtool_KoxteRrb 1 4 this 3 1783  
16 14 Dtool_KoxtKe18 6 18 1779 0 14 Dtool_KoxtKe18 1 4 this 3 1783  
17 14 Dtool_KoxtK7vW 6 19 1779 0 14 Dtool_KoxtK7vW 1 4 this 3 1783  
18 14 Dtool_KoxtobQg 6 20 1777 0 14 Dtool_KoxtobQg 1 4 this 3 1783  
19 14 Dtool_Koxtp8Hx 4 21 1785 0 14 Dtool_Koxtp8Hx 1 4 this 3 1782  
20 14 Dtool_KoxtX8QI 6 22 1778 0 14 Dtool_KoxtX8QI 2 4 this 3 1782  2 in 1 1786  
21 14 Dtool_KoxtbnS0 6 23 1789 0 14 Dtool_KoxtbnS0 3 4 this 3 1782  8 variable 1 1787  5 value 1 1777  
22 14 Dtool_Koxta0Ry 6 23 1789 0 14 Dtool_Koxta0Ry 3 4 this 3 1782  8 variable 1 1777  5 value 1 1777  
23 14 Dtool_KoxtUNQd 6 24 1778 0 14 Dtool_KoxtUNQd 2 4 this 3 1782  4 decl 1 1789  
24 14 Dtool_Koxt4OlT 6 25 1779 0 14 Dtool_Koxt4OlT 1 4 this 3 1783  
25 14 Dtool_KoxtLiqb 6 26 1791 0 14 Dtool_KoxtLiqb 2 4 this 3 1783  1 n 1 1779  
26 14 Dtool_KoxtvsYV 6 27 1777 0 14 Dtool_KoxtvsYV 2 4 this 3 1783  1 n 1 1779  
27 14 Dtool_KoxtTmDS 6 28 1777 0 14 Dtool_KoxtTmDS 2 4 this 3 1783  1 n 1 1779  
28 14 Dtool_Koxtt4Y8 6 29 1778 0 14 Dtool_Koxtt4Y8 2 4 this 3 1783  1 n 1 1779  
29 14 Dtool_Koxtouea 4 30 1785 0 14 Dtool_Koxtouea 2 4 this 3 1783  3 out 1 1793  
30 14 Dtool_KoxtMy5p 4 31 1785 0 14 Dtool_KoxtMy5p 2 4 this 3 1783  3 out 1 1793  
31 14 Dtool_KoxtTibR 6 33 1778 0 14 Dtool_KoxtTibR 1 4 this 3 1794  
32 14 Dtool_Koxt6EjB 4 34 1785 0 14 Dtool_Koxt6EjB 1 4 this 3 1796  
33 14 Dtool_KoxtSIdn 4 35 1785 0 14 Dtool_KoxtSIdn 1 4 this 3 1796  
34 14 Dtool_KoxtBr_C 6 36 1797 0 14 Dtool_KoxtBr_C 1 4 this 3 1796  
35 14 Dtool_KoxtOjrt 6 37 1779 0 14 Dtool_KoxtOjrt 1 4 this 3 1794  
36 14 Dtool_Koxt7pmq 6 38 1777 0 14 Dtool_Koxt7pmq 2 4 this 3 1794  1 n 1 1779  
37 14 Dtool_Koxtwzxf 6 39 1779 0 14 Dtool_Koxtwzxf 1 4 this 3 1794  
38 14 Dtool_KoxtHOFD 6 40 1777 0 14 Dtool_KoxtHOFD 2 4 this 3 1794  1 n 1 1779  
39 14 Dtool_Koxt1BwY 6 41 1782 0 14 Dtool_Koxt1BwY 2 4 this 3 1796  4 name 1 1777  
40 14 Dtool_KoxtFhLr 6 42 1778 0 14 Dtool_KoxtFhLr 2 4 this 3 1796  4 page 1 1782  
41 14 Dtool_KoxtNpX6 6 43 1779 0 14 Dtool_KoxtNpX6 1 4 this 3 1794  
42 14 Dtool_Koxt5iN2 6 44 1782 0 14 Dtool_Koxt5iN2 2 4 this 3 1794  1 n 1 1779  
43 14 Dtool_KoxtHC4q 6 45 1779 0 14 Dtool_KoxtHC4q 1 4 this 3 1794  
44 14 Dtool_KoxtlDa_ 6 46 1782 0 14 Dtool_KoxtlDa_ 2 4 this 3 1794  1 n 1 1779  
45 14 Dtool_KoxtdhHl 4 47 1785 0 14 Dtool_KoxtdhHl 2 4 this 3 1794  3 out 1 1793  
46 14 Dtool_KoxtN841 4 48 1785 0 14 Dtool_KoxtN841 2 4 this 3 1794  3 out 1 1793  
47 14 Dtool_KoxtH_23 6 49 1796 0 14 Dtool_KoxtH_23 0 
48 14 Dtool_KoxtfAWp 7 64 1798 951 14 Dtool_KoxtfAWp 1 4 name 1 1777  
49 14 Dtool_KoxtRHwC 6 66 1791 0 14 Dtool_KoxtRHwC 1 4 this 3 1799  
50 14 Dtool_KoxtvDN0 6 67 1777 0 14 Dtool_KoxtvDN0 1 4 this 3 1799  
51 14 Dtool_Koxt3HD1 4 68 1785 0 14 Dtool_Koxt3HD1 2 4 this 3 1798  5 value 1 1777  
52 14 Dtool_Koxtp0MY 6 69 1779 0 14 Dtool_Koxtp0MY 1 4 this 3 1799  
53 14 Dtool_Koxt4Tsy 6 70 1778 0 14 Dtool_Koxt4Tsy 2 4 this 3 1799  1 n 1 1779  
54 14 Dtool_Koxt94kx 6 71 1778 0 14 Dtool_Koxt94kx 2 4 this 3 1799  1 n 1 1779  
55 14 Dtool_Koxtd0tj 6 72 1778 0 14 Dtool_Koxtd0tj 2 4 this 3 1799  1 n 1 1779  
56 14 Dtool_KoxtxdWD 6 73 1778 0 14 Dtool_KoxtxdWD 2 4 this 3 1799  1 n 1 1779  
57 14 Dtool_Koxtg2rl 6 74 1777 0 14 Dtool_Koxtg2rl 2 4 this 3 1799  1 n 1 1779  
58 14 Dtool_KoxtFdkk 6 75 1778 0 14 Dtool_KoxtFdkk 2 4 this 3 1799  1 n 1 1779  
59 14 Dtool_Koxt1RtW 6 76 1779 0 14 Dtool_Koxt1RtW 2 4 this 3 1799  1 n 1 1779  
60 14 Dtool_KoxtGzV2 6 77 1781 0 14 Dtool_KoxtGzV2 2 4 this 3 1799  1 n 1 1779  
61 14 Dtool_Koxtz4LI 4 78 1785 0 14 Dtool_Koxtz4LI 3 4 this 3 1798  1 n 1 1779  5 value 1 1777  
62 14 Dtool_Koxtytus 4 79 1785 0 14 Dtool_Koxtytus 3 4 this 3 1798  1 n 1 1779  5 value 1 1778  
63 14 Dtool_KoxtzKpF 4 80 1785 0 14 Dtool_KoxtzKpF 3 4 this 3 1798  1 n 1 1779  5 value 1 1779  
64 14 Dtool_Koxt9Fer 4 81 1785 0 14 Dtool_Koxt9Fer 3 4 this 3 1798  1 n 1 1779  5 value 1 1781  
65 14 Dtool_KoxtLAYK 6 52 1777 0 14 Dtool_KoxtLAYK 1 4 this 3 1801  
66 14 Dtool_KoxtSB4b 6 53 1715 0 14 Dtool_KoxtSB4b 1 4 this 3 1801  
67 14 Dtool_KoxtZc0t 6 54 1777 0 14 Dtool_KoxtZc0t 1 4 this 3 1801  
68 14 Dtool_KoxtZZnT 6 55 1779 0 14 Dtool_KoxtZZnT 1 4 this 3 1801  
69 14 Dtool_KoxtE1aP 6 56 1778 0 14 Dtool_KoxtE1aP 1 4 this 3 1801  
70 14 Dtool_Koxtrrma 6 57 1779 0 14 Dtool_Koxtrrma 1 4 this 3 1801  
71 14 Dtool_KoxtYuk3 6 58 1778 0 14 Dtool_KoxtYuk3 1 4 this 3 1801  
72 14 Dtool_KoxtfhKJ 6 59 1778 0 14 Dtool_KoxtfhKJ 1 4 this 3 1803  
73 14 Dtool_KoxtV4Ko 6 60 1778 0 14 Dtool_KoxtV4Ko 1 4 this 3 1801  
74 14 Dtool_KoxtVuDp 6 61 1778 0 14 Dtool_KoxtVuDp 1 4 this 3 1801  
75 14 Dtool_Koxt35Ii 4 62 1785 0 14 Dtool_Koxt35Ii 2 4 this 3 1801  3 out 1 1793  
76 14 Dtool_Koxt08N6 4 63 1785 0 14 Dtool_Koxt08N6 2 4 this 3 1801  3 out 1 1793  
77 14 Dtool_KoxtgHBK 7 83 1804 978 14 Dtool_KoxtgHBK 1 4 name 1 1777  
78 14 Dtool_KoxtTv_r 7 83 1804 978 14 Dtool_KoxtTv_r 4 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  5 flags 1 1779  
79 14 Dtool_KoxtcIjg 7 83 1804 978 14 Dtool_KoxtcIjg 3 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  
80 14 Dtool_KoxtBzBs 7 83 1804 978 14 Dtool_KoxtBzBs 2 4 name 1 1777  13 default_value 1 1777  
81 14 Dtool_Koxttw8k 7 83 1804 978 14 Dtool_Koxttw8k 4 4 name 1 1777  13 default_value 1 1778  11 description 1 1777  5 flags 1 1779  
82 14 Dtool_KoxtjFrl 7 83 1804 978 14 Dtool_KoxtjFrl 3 4 name 1 1777  13 default_value 1 1778  11 description 1 1777  
83 14 Dtool_KoxtfQgh 7 83 1804 978 14 Dtool_KoxtfQgh 2 4 name 1 1777  13 default_value 1 1778  
84 14 Dtool_KoxtuDfZ 6 84 1804 0 14 Dtool_KoxtuDfZ 2 4 this 3 1804  5 value 1 1778  
85 14 Dtool_KoxtJqiY 6 86 1779 0 14 Dtool_KoxtJqiY 1 4 this 3 1805  
86 14 Dtool_KoxtLNU6 6 87 1778 0 14 Dtool_KoxtLNU6 2 4 this 3 1805  1 n 1 1779  
87 14 Dtool_Koxt2TR9 4 88 1785 0 14 Dtool_Koxt2TR9 2 4 this 3 1804  5 value 1 1778  
88 14 Dtool_KoxtrUX8 6 89 1778 0 14 Dtool_KoxtrUX8 1 4 this 3 1805  
89 14 Dtool_Koxtc047 6 90 1778 0 14 Dtool_Koxtc047 1 4 this 3 1805  
90 14 Dtool_KoxtXBj8 6 91 1778 0 14 Dtool_KoxtXBj8 2 4 this 3 1805  1 n 1 1779  
91 14 Dtool_KoxtDBoK 4 92 1785 0 14 Dtool_KoxtDBoK 3 4 this 3 1804  1 n 1 1779  5 value 1 1778  
92 14 Dtool_KoxtkZTv 6 85 1778 0 14 Dtool_KoxtkZTv 1 4 this 3 1805  
93 14 Dtool_KoxtCK_u 7 95 1807 989 14 Dtool_KoxtCK_u 1 4 name 1 1777  
94 14 Dtool_KoxtVT_M 7 95 1807 989 14 Dtool_KoxtVT_M 4 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  5 flags 1 1779  
95 14 Dtool_KoxtcCSY 7 95 1807 989 14 Dtool_KoxtcCSY 3 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  
96 14 Dtool_KoxtEDCV 7 95 1807 989 14 Dtool_KoxtEDCV 2 4 name 1 1777  13 default_value 1 1777  
97 14 Dtool_KoxtAhLa 7 95 1807 989 14 Dtool_KoxtAhLa 4 4 name 1 1777  13 default_value 1 1781  11 description 1 1777  5 flags 1 1779  
98 14 Dtool_KoxtWBUH 7 95 1807 989 14 Dtool_KoxtWBUH 3 4 name 1 1777  13 default_value 1 1781  11 description 1 1777  
99 14 Dtool_KoxtYBO6 7 95 1807 989 14 Dtool_KoxtYBO6 2 4 name 1 1777  13 default_value 1 1781  
100 14 Dtool_Koxt9oaH 6 96 1807 0 14 Dtool_Koxt9oaH 2 4 this 3 1807  5 value 1 1781  
101 14 Dtool_KoxtiiNw 6 98 1779 0 14 Dtool_KoxtiiNw 1 4 this 3 1808  
102 14 Dtool_KoxtLoN2 6 99 1781 0 14 Dtool_KoxtLoN2 2 4 this 3 1808  1 n 1 1779  
103 14 Dtool_Koxtjhoa 4 100 1785 0 14 Dtool_Koxtjhoa 2 4 this 3 1807  5 value 1 1781  
104 14 Dtool_KoxtbA6h 6 101 1781 0 14 Dtool_KoxtbA6h 1 4 this 3 1808  
105 14 Dtool_KoxtFMO4 6 102 1781 0 14 Dtool_KoxtFMO4 1 4 this 3 1808  
106 14 Dtool_KoxtHfdb 6 103 1781 0 14 Dtool_KoxtHfdb 2 4 this 3 1808  1 n 1 1779  
107 14 Dtool_KoxtTUh2 4 104 1785 0 14 Dtool_KoxtTUh2 3 4 this 3 1807  1 n 1 1779  5 value 1 1781  
108 14 Dtool_Koxt6NMj 6 97 1781 0 14 Dtool_Koxt6NMj 1 4 this 3 1808  
109 14 Dtool_KoxtuiRq 7 107 1810 1011 14 Dtool_KoxtuiRq 1 4 name 1 1777  
110 14 Dtool_Koxt5vRW 7 107 1810 1011 14 Dtool_Koxt5vRW 4 4 name 1 1777  13 default_value 1 1811  11 description 1 1777  5 flags 1 1779  
111 14 Dtool_KoxtyAQf 7 107 1810 1011 14 Dtool_KoxtyAQf 3 4 name 1 1777  13 default_value 1 1811  11 description 1 1777  
112 14 Dtool_Koxt0kwV 7 107 1810 1011 14 Dtool_Koxt0kwV 2 4 name 1 1777  13 default_value 1 1811  
113 14 Dtool_Koxttq7m 6 108 1810 0 14 Dtool_Koxttq7m 2 4 this 3 1810  5 value 1 1811  
114 14 Dtool_KoxtFSXo 6 110 1777 0 14 Dtool_KoxtFSXo 1 4 this 3 1813  
115 14 Dtool_KoxtJ1W6 6 111 1778 0 14 Dtool_KoxtJ1W6 1 4 this 3 1813  
116 14 Dtool_KoxtwSZu 6 112 1815 0 14 Dtool_KoxtwSZu 1 4 this 3 1813  
117 14 Dtool_KoxtJYNd 6 113 1816 0 14 Dtool_KoxtJYNd 2 4 this 3 1813  1 n 1 1779  
118 14 Dtool_KoxtdX94 6 114 1777 0 14 Dtool_KoxtdX94 1 4 this 3 1813  
119 14 Dtool_KoxtdZMt 6 115 1777 0 14 Dtool_KoxtdZMt 1 4 this 3 1813  
120 14 Dtool_Koxt_BB0 6 116 1777 0 14 Dtool_Koxt_BB0 1 4 this 3 1813  
121 14 Dtool_KoxtA2V6 6 117 1777 0 14 Dtool_KoxtA2V6 1 4 this 3 1813  
122 14 Dtool_KoxtxTY1 6 118 1777 0 14 Dtool_KoxtxTY1 1 4 this 3 1813  
123 14 Dtool_KoxtiXPS 6 119 1777 0 14 Dtool_KoxtiXPS 1 4 this 3 1813  
124 14 Dtool_Koxtql0m 6 120 1778 0 14 Dtool_Koxtql0m 2 4 this 3 1813  5 other 1 1811  
125 14 Dtool_Koxt4gwG 6 121 1778 0 14 Dtool_Koxt4gwG 2 4 this 3 1813  5 other 1 1811  
126 14 Dtool_KoxtKw5E 6 122 1778 0 14 Dtool_KoxtKw5E 2 4 this 3 1813  5 other 1 1811  
127 14 Dtool_Koxt6HHO 4 123 1785 0 14 Dtool_Koxt6HHO 2 4 this 3 1810  5 value 1 1811  
128 14 Dtool_KoxtqvVh 6 124 1811 0 14 Dtool_KoxtqvVh 1 4 this 3 1813  
129 14 Dtool_KoxtjUSR 7 125 1817 1114 14 Dtool_KoxtjUSR 1 4 this 3 1813  
130 14 Dtool_KoxtBeVR 7 126 1817 1114 14 Dtool_KoxtBeVR 2 4 this 3 1813  1 n 1 1779  
131 14 Dtool_KoxteMQy 4 127 1785 0 14 Dtool_KoxteMQy 3 4 this 3 1810  1 n 1 1779  5 value 1 1811  
132 14 Dtool_KoxtkJgo 6 109 1811 0 14 Dtool_KoxtkJgo 1 4 this 3 1813  
133 14 Dtool_KoxtZ5NO 7 130 1818 1022 14 Dtool_KoxtZ5NO 1 4 name 1 1777  
134 14 Dtool_KoxtCIhz 7 130 1818 1022 14 Dtool_KoxtCIhz 4 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  5 flags 1 1779  
135 14 Dtool_Koxttwuj 7 130 1818 1022 14 Dtool_Koxttwuj 3 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  
136 14 Dtool_KoxtVauC 7 130 1818 1022 14 Dtool_KoxtVauC 2 4 name 1 1777  13 default_value 1 1777  
137 14 Dtool_KoxtJdKP 7 130 1818 1022 14 Dtool_KoxtJdKP 4 4 name 1 1777  13 default_value 1 1779  11 description 1 1777  5 flags 1 1779  
138 14 Dtool_KoxtIVT4 7 130 1818 1022 14 Dtool_KoxtIVT4 3 4 name 1 1777  13 default_value 1 1779  11 description 1 1777  
139 14 Dtool_Koxt15LP 7 130 1818 1022 14 Dtool_Koxt15LP 2 4 name 1 1777  13 default_value 1 1779  
140 14 Dtool_KoxtvXiv 6 131 1818 0 14 Dtool_KoxtvXiv 2 4 this 3 1818  5 value 1 1779  
141 14 Dtool_Koxttake 6 133 1779 0 14 Dtool_Koxttake 1 4 this 3 1819  
142 14 Dtool_Koxtrtl3 6 134 1779 0 14 Dtool_Koxtrtl3 2 4 this 3 1819  1 n 1 1779  
143 14 Dtool_KoxtV_rk 4 135 1785 0 14 Dtool_KoxtV_rk 2 4 this 3 1818  5 value 1 1779  
144 14 Dtool_KoxtUxqZ 6 136 1779 0 14 Dtool_KoxtUxqZ 1 4 this 3 1819  
145 14 Dtool_KoxtyloR 6 137 1779 0 14 Dtool_KoxtyloR 1 4 this 3 1819  
146 14 Dtool_Koxtaaqx 6 138 1779 0 14 Dtool_Koxtaaqx 2 4 this 3 1819  1 n 1 1779  
147 14 Dtool_KoxtUSbb 4 139 1785 0 14 Dtool_KoxtUSbb 3 4 this 3 1818  1 n 1 1779  5 value 1 1779  
148 14 Dtool_Koxta5Q9 6 132 1779 0 14 Dtool_Koxta5Q9 1 4 this 3 1819  
149 14 Dtool_Koxt0y9H 7 142 1821 1024 14 Dtool_Koxt0y9H 3 4 name 1 1777  11 description 1 1777  5 flags 1 1779  
150 14 Dtool_Koxtb__G 7 142 1821 1024 14 Dtool_Koxtb__G 2 4 name 1 1777  11 description 1 1777  
151 14 Dtool_KoxtQEAl 7 142 1821 1024 14 Dtool_KoxtQEAl 1 4 name 1 1777  
152 14 Dtool_KoxtUmrj 6 144 1779 0 14 Dtool_KoxtUmrj 1 4 this 3 1822  
153 14 Dtool_KoxtiLnG 6 145 1777 0 14 Dtool_KoxtiLnG 2 4 this 3 1822  1 n 1 1779  
154 14 Dtool_Koxt9_us 6 146 1779 0 14 Dtool_Koxt9_us 1 4 this 3 1822  
155 14 Dtool_KoxtclMe 6 147 1777 0 14 Dtool_KoxtclMe 2 4 this 3 1822  1 n 1 1779  
156 14 Dtool_KoxttI9s 6 148 1779 0 14 Dtool_KoxttI9s 1 4 this 3 1822  
157 14 Dtool_KoxtowvO 6 149 1777 0 14 Dtool_KoxtowvO 2 4 this 3 1822  1 n 1 1779  
158 14 Dtool_Koxt5Asq 4 150 1785 0 14 Dtool_Koxt5Asq 2 4 this 3 1822  3 out 1 1793  
159 14 Dtool_KoxthtwC 4 151 1785 0 14 Dtool_KoxthtwC 2 4 this 3 1822  3 out 1 1793  
160 14 Dtool_KoxtbUoR 6 153 1787 0 14 Dtool_KoxtbUoR 2 4 this 3 1824  4 name 1 1777  
161 14 Dtool_KoxtICHW 6 154 1787 0 14 Dtool_KoxtICHW 6 4 this 3 1824  7 pattern 1 1777  4 type 1 1715  13 default_value 1 1777  11 description 1 1777  5 flags 1 1779  
162 14 Dtool_Koxtv8JU 6 154 1787 0 14 Dtool_Koxtv8JU 5 4 this 3 1824  7 pattern 1 1777  4 type 1 1715  13 default_value 1 1777  11 description 1 1777  
163 14 Dtool_KoxtfBGQ 6 154 1787 0 14 Dtool_KoxtfBGQ 4 4 this 3 1824  7 pattern 1 1777  4 type 1 1715  13 default_value 1 1777  
164 14 Dtool_KoxtvzyQ 6 155 1779 0 14 Dtool_KoxtvzyQ 1 4 this 3 1825  
165 14 Dtool_Koxt2qFF 6 156 1787 0 14 Dtool_Koxt2qFF 2 4 this 3 1825  1 n 1 1779  
166 14 Dtool_KoxtuDAj 6 157 1777 0 14 Dtool_KoxtuDAj 2 4 this 3 1825  1 n 1 1779  
167 14 Dtool_Koxtp8_h 6 158 1778 0 14 Dtool_Koxtp8_h 2 4 this 3 1825  1 n 1 1779  
168 14 Dtool_KoxtfFtp 4 159 1785 0 14 Dtool_KoxtfFtp 2 4 this 3 1825  3 out 1 1793  
169 14 Dtool_KoxtH7se 4 160 1785 0 14 Dtool_KoxtH7se 2 4 this 3 1825  3 out 1 1793  
170 14 Dtool_Koxt5XCP 4 161 1785 0 14 Dtool_Koxt5XCP 2 4 this 3 1825  3 out 1 1793  
171 14 Dtool_KoxtKzQG 4 162 1785 0 14 Dtool_KoxtKzQG 1 4 this 3 1825  
172 14 Dtool_Koxtngxf 4 163 1785 0 14 Dtool_Koxtngxf 1 4 this 3 1825  
173 14 Dtool_Koxt0fM_ 4 164 1785 0 14 Dtool_Koxt0fM_ 1 4 this 3 1825  
174 14 Dtool_KoxtBx3a 6 165 1824 0 14 Dtool_KoxtBx3a 0 
175 14 Dtool_KoxtV4V4 7 167 1827 1047 14 Dtool_KoxtV4V4 3 4 name 1 1777  11 description 1 1777  5 flags 1 1779  
176 14 Dtool_Koxti7el 7 167 1827 1047 14 Dtool_Koxti7el 2 4 name 1 1777  11 description 1 1777  
177 14 Dtool_KoxtL6YY 7 167 1827 1047 14 Dtool_KoxtL6YY 1 4 name 1 1777  
178 14 Dtool_Koxt8xvO 6 170 1830 0 14 Dtool_Koxt8xvO 1 4 this 3 1828  
179 14 Dtool_Koxt9EIJ 6 171 1778 0 14 Dtool_Koxt9EIJ 1 4 this 3 1827  
180 14 Dtool_KoxtTT5e 4 172 1785 0 14 Dtool_KoxtTT5e 1 4 this 3 1827  
181 14 Dtool_KoxtCt4a 4 173 1785 0 14 Dtool_KoxtCt4a 2 4 this 3 1827  9 directory 1 1811  
182 14 Dtool_KoxtClTA 4 174 1785 0 14 Dtool_KoxtClTA 2 4 this 3 1827  9 directory 1 1811  
183 14 Dtool_KoxtsHLH 4 175 1785 0 14 Dtool_KoxtsHLH 2 4 this 3 1827  4 path 1 1830  
184 14 Dtool_KoxtA5UV 4 175 1785 0 14 Dtool_KoxtA5UV 3 4 this 3 1827  4 path 1 1777  9 separator 1 1777  
185 14 Dtool_KoxtqRVC 4 175 1785 0 14 Dtool_KoxtqRVC 2 4 this 3 1827  4 path 1 1777  
186 14 Dtool_KoxtUO8I 4 176 1785 0 14 Dtool_KoxtUO8I 2 4 this 3 1827  4 path 1 1830  
187 14 Dtool_KoxtRA60 6 177 1778 0 14 Dtool_KoxtRA60 1 4 this 3 1828  
188 14 Dtool_KoxtSVN5 6 178 1779 0 14 Dtool_KoxtSVN5 1 4 this 3 1828  
189 14 Dtool_Koxtcr0V 6 179 1811 0 14 Dtool_Koxtcr0V 2 4 this 3 1828  1 n 1 1779  
190 14 Dtool_KoxtXwzn 7 180 1817 1114 14 Dtool_KoxtXwzn 2 4 this 3 1828  8 filename 1 1811  
191 14 Dtool_KoxtJhmL 6 181 1779 0 14 Dtool_KoxtJhmL 3 4 this 3 1828  8 filename 1 1811  7 results 1 1832  
192 14 Dtool_KoxtkYNJ 4 182 1785 0 14 Dtool_KoxtkYNJ 2 4 this 3 1828  3 out 1 1793  
193 14 Dtool_Koxtj3CN 4 183 1785 0 14 Dtool_Koxtj3CN 2 4 this 3 1828  3 out 1 1793  
194 14 Dtool_Koxtzr0K 6 169 1830 0 14 Dtool_Koxtzr0K 1 4 this 3 1828  
195 14 Dtool_KoxtxoFd 7 185 1833 1078 14 Dtool_KoxtxoFd 1 4 name 1 1777  
196 14 Dtool_KoxtlDF7 7 185 1833 1078 14 Dtool_KoxtlDF7 4 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  5 flags 1 1779  
197 14 Dtool_KoxtZRZG 7 185 1833 1078 14 Dtool_KoxtZRZG 3 4 name 1 1777  13 default_value 1 1777  11 description 1 1777  
198 14 Dtool_KoxtpyKD 7 185 1833 1078 14 Dtool_KoxtpyKD 2 4 name 1 1777  13 default_value 1 1777  
199 14 Dtool_KoxtlnPz 6 186 1833 0 14 Dtool_KoxtlnPz 2 4 this 3 1833  5 value 1 1777  
200 14 Dtool_KoxtehBq 6 188 1777 0 14 Dtool_KoxtehBq 1 4 this 3 1834  
201 14 Dtool_KoxtYAjn 6 189 1778 0 14 Dtool_KoxtYAjn 1 4 this 3 1834  
202 14 Dtool_KoxtkRuz 6 190 1815 0 14 Dtool_KoxtkRuz 1 4 this 3 1834  
203 14 Dtool_KoxtjG7L 6 191 1816 0 14 Dtool_KoxtjG7L 2 4 this 3 1834  1 n 1 1779  
204 14 Dtool_Koxtvnj9 6 192 1778 0 14 Dtool_Koxtvnj9 2 4 this 3 1834  5 other 1 1777  
205 14 Dtool_Koxt8nB4 6 193 1778 0 14 Dtool_Koxt8nB4 2 4 this 3 1834  5 other 1 1777  
206 14 Dtool_KoxtfdFk 6 194 1778 0 14 Dtool_KoxtfdFk 2 4 this 3 1834  5 other 1 1777  
207 14 Dtool_KoxteOBH 4 195 1785 0 14 Dtool_KoxteOBH 2 4 this 3 1833  5 value 1 1777  
208 14 Dtool_Koxtiqp3 6 196 1777 0 14 Dtool_Koxtiqp3 1 4 this 3 1834  
209 14 Dtool_Koxtlm9N 6 197 1777 0 14 Dtool_Koxtlm9N 1 4 this 3 1834  
210 14 Dtool_KoxtkWLx 6 198 1777 0 14 Dtool_KoxtkWLx 2 4 this 3 1834  1 n 1 1779  
211 14 Dtool_KoxtBIo5 4 199 1785 0 14 Dtool_KoxtBIo5 3 4 this 3 1833  1 n 1 1779  5 value 1 1777  
212 14 Dtool_Koxtjh74 6 187 1777 0 14 Dtool_Koxtjh74 1 4 this 3 1834  
213 14 Dtool_KoxtxUgk 7 209 1797 1087 14 Dtool_KoxtxUgk 0 
214 14 Dtool_KoxtzohW 7 209 1797 1087 14 Dtool_KoxtzohW 1 4 copy 1 1830  
215 14 Dtool_KoxtmjlH 7 209 1797 1087 14 Dtool_KoxtmjlH 1 9 directory 1 1811  
216 14 Dtool_KoxttuI2 7 209 1797 1087 14 Dtool_KoxttuI2 2 4 path 1 1777  9 separator 1 1777  
217 14 Dtool_KoxtbE_t 7 209 1797 1087 14 Dtool_KoxtbE_t 1 4 path 1 1777  
218 14 Dtool_Koxt4_r9 6 210 1797 0 14 Dtool_Koxt4_r9 2 4 this 3 1797  4 copy 1 1830  
219 14 Dtool_Koxt_ecb 4 212 1785 0 14 Dtool_Koxt_ecb 1 4 this 3 1797  
220 14 Dtool_Koxtdvve 4 213 1785 0 14 Dtool_Koxtdvve 2 4 this 3 1797  9 directory 1 1811  
221 14 Dtool_KoxtSYWa 4 214 1785 0 14 Dtool_KoxtSYWa 2 4 this 3 1797  9 directory 1 1811  
222 14 Dtool_KoxtAcLB 4 215 1785 0 14 Dtool_KoxtAcLB 2 4 this 3 1797  4 path 1 1830  
223 14 Dtool_KoxtwDyg 4 215 1785 0 14 Dtool_KoxtwDyg 3 4 this 3 1797  4 path 1 1777  9 separator 1 1777  
224 14 Dtool_KoxtufoY 4 215 1785 0 14 Dtool_KoxtufoY 2 4 this 3 1797  4 path 1 1777  
225 14 Dtool_Koxtihym 4 216 1785 0 14 Dtool_Koxtihym 2 4 this 3 1797  4 path 1 1830  
226 14 Dtool_KoxtbEii 6 217 1778 0 14 Dtool_KoxtbEii 1 4 this 3 1830  
227 14 Dtool_KoxtQk9K 6 218 1779 0 14 Dtool_KoxtQk9K 1 4 this 3 1830  
228 14 Dtool_KoxteLbZ 6 219 1811 0 14 Dtool_KoxteLbZ 2 4 this 3 1830  1 n 1 1779  
229 14 Dtool_Koxt86AY 7 220 1817 1114 14 Dtool_Koxt86AY 2 4 this 3 1830  8 filename 1 1811  
230 14 Dtool_KoxtOBvK 6 221 1779 0 14 Dtool_KoxtOBvK 3 4 this 3 1830  8 filename 1 1811  7 results 1 1832  
231 14 Dtool_KoxtgvcZ 7 222 1817 1114 14 Dtool_KoxtgvcZ 3 8 filename 1 1811  4 path 1 1777  9 separator 1 1777  
232 14 Dtool_KoxtFJd4 7 222 1817 1114 14 Dtool_KoxtFJd4 2 8 filename 1 1811  4 path 1 1777  
233 14 Dtool_KoxtfyrW 4 223 1785 0 14 Dtool_KoxtfyrW 3 4 this 3 1830  3 out 1 1793  9 separator 1 1777  
234 14 Dtool_Koxtx5QI 4 223 1785 0 14 Dtool_Koxtx5QI 2 4 this 3 1830  3 out 1 1793  
235 14 Dtool_KoxtGTuw 4 224 1785 0 14 Dtool_KoxtGTuw 3 4 this 3 1830  3 out 1 1793  12 indent_level 1 1779  
236 14 Dtool_KoxtIVg1 4 224 1785 0 14 Dtool_KoxtIVg1 2 4 this 3 1830  3 out 1 1793  
237 14 Dtool_KoxtjIw0 7 203 1832 1081 14 Dtool_KoxtjIw0 0 
238 14 Dtool_Koxtx6Kt 7 203 1832 1081 14 Dtool_Koxtx6Kt 1 4 copy 1 1836  
239 14 Dtool_KoxtaaFk 6 204 1832 0 14 Dtool_KoxtaaFk 2 4 this 3 1832  4 copy 1 1836  
240 14 Dtool_Koxtkmuw 4 206 1785 0 14 Dtool_Koxtkmuw 1 4 this 3 1832  
241 14 Dtool_Koxt9HaP 6 207 1779 0 14 Dtool_Koxt9HaP 1 4 this 3 1836  
242 14 Dtool_Koxt6aQP 6 208 1811 0 14 Dtool_Koxt6aQP 2 4 this 3 1836  1 n 1 1779  
243 14 Dtool_KoxtH3XS 6 226 1778 0 14 Dtool_KoxtH3XS 1 3 var 1 1777  
244 14 Dtool_Koxtqf8R 6 227 1777 0 14 Dtool_Koxtqf8R 1 3 var 1 1777  
245 14 Dtool_KoxtLmhJ 4 228 1785 0 14 Dtool_KoxtLmhJ 2 3 var 1 1777  5 value 1 1777  
246 14 Dtool_Koxte_G_ 4 229 1785 0 14 Dtool_Koxte_G_ 2 3 var 1 1777  5 value 1 1777  
247 14 Dtool_Koxt9ku2 4 230 1785 0 14 Dtool_Koxt9ku2 1 3 var 1 1777  
248 14 Dtool_Koxt156e 6 231 1777 0 14 Dtool_Koxt156e 1 3 str 1 1777  
249 14 Dtool_Koxtz8EB 6 232 1779 0 14 Dtool_Koxtz8EB 0 
250 14 Dtool_Koxtl2fT 6 233 1777 0 14 Dtool_Koxtl2fT 1 1 n 1 1779  
251 14 Dtool_Koxt_LAg 6 234 1777 0 14 Dtool_Koxt_LAg 0 
252 14 Dtool_KoxtpyuE 6 235 1777 0 14 Dtool_KoxtpyuE 0 
253 14 Dtool_KoxtDDsB 7 236 1817 1114 14 Dtool_KoxtDDsB 0 
254 14 Dtool_Koxt0xIC 7 240 1817 1114 14 Dtool_Koxt0xIC 1 4 copy 1 1811  
255 14 Dtool_Koxtz3ik 7 240 1817 1114 14 Dtool_Koxtz3ik 2 7 dirname 1 1811  8 basename 1 1811  
256 14 Dtool_KoxtLYs9 7 240 1817 1114 14 Dtool_KoxtLYs9 1 8 filename 1 1777  
257 14 Dtool_KoxtzHmO 7 240 1817 1114 14 Dtool_KoxtzHmO 0 
258 14 Dtool_KoxtYS9H 7 240 1817 1114 14 Dtool_KoxtYS9H 1 8 filename 1 1777  
259 14 Dtool_Koxtfamt 7 242 1817 1114 14 Dtool_Koxtfamt 1 8 filename 1 1777  
260 14 Dtool_Koxtuv92 7 243 1817 1114 14 Dtool_Koxtuv92 1 8 filename 1 1777  
261 14 Dtool_KoxtPXPP 7 244 1817 1114 14 Dtool_KoxtPXPP 1 8 filename 1 1777  
262 14 Dtool_Koxt_2MI 7 245 1817 1114 14 Dtool_Koxt_2MI 1 8 filename 1 1777  
263 14 Dtool_KoxtKsMA 7 246 1817 1114 14 Dtool_KoxtKsMA 1 8 filename 1 1777  
264 14 Dtool_KoxtIF4r 7 247 1817 1114 14 Dtool_KoxtIF4r 2 11 os_specific 1 1777  4 type 1 1733  
265 14 Dtool_Koxt9IuR 7 247 1817 1114 14 Dtool_Koxt9IuR 1 11 os_specific 1 1777  
266 14 Dtool_KoxtZ4vm 7 248 1817 1114 14 Dtool_KoxtZ4vm 2 11 user_string 1 1777  4 type 1 1733  
267 14 Dtool_Koxt_Iq5 7 248 1817 1114 14 Dtool_Koxt_Iq5 1 11 user_string 1 1777  
268 14 Dtool_KoxtbIxB 7 249 1817 1114 14 Dtool_KoxtbIxB 3 7 dirname 1 1777  6 prefix 1 1777  4 type 1 1733  
269 14 Dtool_KoxtwIGw 7 249 1817 1114 14 Dtool_KoxtwIGw 2 7 dirname 1 1777  6 prefix 1 1777  
270 14 Dtool_Koxte4GP 6 250 1817 0 14 Dtool_Koxte4GP 2 4 this 3 1817  4 copy 1 1811  
271 14 Dtool_Koxt6V61 6 250 1817 0 14 Dtool_Koxt6V61 2 4 this 3 1817  8 filename 1 1777  
272 14 Dtool_KoxtAn_g 6 250 1817 0 14 Dtool_KoxtAn_g 2 4 this 3 1817  8 filename 1 1777  
273 14 Dtool_KoxtmyvU 6 252 1777 0 14 Dtool_KoxtmyvU 1 4 this 3 1811  
274 14 Dtool_KoxtOFzc 6 253 1778 0 14 Dtool_KoxtOFzc 1 4 this 3 1811  
275 14 Dtool_KoxtgE4s 6 254 1815 0 14 Dtool_KoxtgE4s 1 4 this 3 1811  
276 14 Dtool_Koxt6cHo 6 255 1816 0 14 Dtool_Koxt6cHo 2 4 this 3 1811  1 n 1 1779  
277 14 Dtool_KoxtkJiX 6 256 1777 0 14 Dtool_KoxtkJiX 3 4 this 3 1811  5 begin 1 1815  3 end 1 1815  
278 14 Dtool_KoxtMKvI 6 256 1777 0 14 Dtool_KoxtMKvI 2 4 this 3 1811  5 begin 1 1815  
279 14 Dtool_KoxtFzJX 6 257 1777 0 14 Dtool_KoxtFzJX 1 4 this 3 1811  
280 14 Dtool_KoxtnZLo 6 258 1777 0 14 Dtool_KoxtnZLo 1 4 this 3 1811  
281 14 Dtool_KoxtdGTD 6 259 1777 0 14 Dtool_KoxtdGTD 1 4 this 3 1811  
282 14 Dtool_KoxtpN0c 6 260 1777 0 14 Dtool_KoxtpN0c 1 4 this 3 1811  
283 14 Dtool_KoxtNi_I 6 261 1777 0 14 Dtool_KoxtNi_I 1 4 this 3 1811  
284 14 Dtool_Koxt_MQ8 6 262 1777 0 14 Dtool_Koxt_MQ8 1 4 this 3 1811  
285 14 Dtool_KoxtoUip 4 263 1785 0 14 Dtool_KoxtoUip 2 4 this 3 1817  1 s 1 1777  
286 14 Dtool_KoxtSdlj 4 264 1785 0 14 Dtool_KoxtSdlj 2 4 this 3 1817  1 s 1 1777  
287 14 Dtool_KoxtSasV 4 265 1785 0 14 Dtool_KoxtSasV 2 4 this 3 1817  1 s 1 1777  
288 14 Dtool_Koxtu0Xc 4 266 1785 0 14 Dtool_Koxtu0Xc 2 4 this 3 1817  1 s 1 1777  
289 14 Dtool_KoxtQChI 4 267 1785 0 14 Dtool_KoxtQChI 2 4 this 3 1817  1 s 1 1777  
290 14 Dtool_Koxtx6fv 4 268 1785 0 14 Dtool_Koxtx6fv 2 4 this 3 1817  1 s 1 1777  
291 14 Dtool_KoxtK9mc 4 269 1785 0 14 Dtool_KoxtK9mc 1 4 this 3 1817  
292 14 Dtool_KoxtBixh 4 270 1785 0 14 Dtool_KoxtBixh 1 4 this 3 1817  
293 14 Dtool_KoxtnswQ 6 271 1778 0 14 Dtool_KoxtnswQ 1 4 this 3 1811  
294 14 Dtool_Koxtf3Vw 6 272 1778 0 14 Dtool_Koxtf3Vw 1 4 this 3 1811  
295 14 Dtool_Koxtc7yW 4 273 1785 0 14 Dtool_Koxtc7yW 2 4 this 3 1817  4 type 1 1733  
296 14 Dtool_KoxtELir 6 274 1733 0 14 Dtool_KoxtELir 1 4 this 3 1811  
297 14 Dtool_Koxt0_BT 4 275 1785 0 14 Dtool_Koxt0_BT 2 4 this 3 1817  7 pattern 1 1778  
298 14 Dtool_KoxtJg4Y 6 276 1778 0 14 Dtool_KoxtJg4Y 1 4 this 3 1811  
299 14 Dtool_KoxtNmUz 6 277 1778 0 14 Dtool_KoxtNmUz 1 4 this 3 1811  
300 14 Dtool_Koxtq4gP 7 278 1817 1114 14 Dtool_Koxtq4gP 2 4 this 3 1811  5 index 1 1779  
301 14 Dtool_Koxt4SYs 6 279 1777 0 14 Dtool_Koxt4SYs 1 4 this 3 1811  
302 14 Dtool_KoxtIn6M 4 280 1785 0 14 Dtool_KoxtIn6M 2 4 this 3 1817  1 s 1 1777  
303 14 Dtool_KoxtTzFq 4 281 1785 0 14 Dtool_KoxtTzFq 2 4 this 3 1811  10 components 1 1838  
304 14 Dtool_KoxtMUbk 4 282 1785 0 14 Dtool_KoxtMUbk 1 4 this 3 1817  
305 14 Dtool_KoxtGI_b 6 283 1778 0 14 Dtool_KoxtGI_b 1 4 this 3 1811  
306 14 Dtool_KoxttIAk 6 284 1778 0 14 Dtool_KoxttIAk 1 4 this 3 1811  
307 14 Dtool_Koxt_eKM 4 285 1785 0 14 Dtool_Koxt_eKM 1 4 this 3 1817  
308 14 Dtool_KoxtudOz 4 285 1785 0 14 Dtool_KoxtudOz 2 4 this 3 1817  15 start_directory 1 1811  
309 14 Dtool_KoxttwJA 6 286 1778 0 14 Dtool_KoxttwJA 1 4 this 3 1817  
310 14 Dtool_KoxtX1o1 6 287 1778 0 14 Dtool_KoxtX1o1 1 4 this 3 1817  
311 14 Dtool_KoxtHThn 6 288 1777 0 14 Dtool_KoxtHThn 1 4 this 3 1811  
312 14 Dtool_KoxtT7Xd 6 289 1777 0 14 Dtool_KoxtT7Xd 1 4 this 3 1811  
313 14 Dtool_KoxtXz2_ 6 290 1778 0 14 Dtool_KoxtXz2_ 1 4 this 3 1811  
314 14 Dtool_Koxt4vqn 6 291 1778 0 14 Dtool_Koxt4vqn 1 4 this 3 1811  
315 14 Dtool_KoxtADlT 6 292 1778 0 14 Dtool_KoxtADlT 1 4 this 3 1811  
316 14 Dtool_KoxtdwcX 6 293 1778 0 14 Dtool_KoxtdwcX 1 4 this 3 1811  
317 14 Dtool_KoxtQRcf 6 294 1779 0 14 Dtool_KoxtQRcf 4 4 this 3 1811  5 other 1 1811  19 this_missing_is_old 1 1778  20 other_missing_is_old 1 1778  
318 14 Dtool_Koxtihlq 6 294 1779 0 14 Dtool_Koxtihlq 3 4 this 3 1811  5 other 1 1811  19 this_missing_is_old 1 1778  
319 14 Dtool_Koxt3wx_ 6 294 1779 0 14 Dtool_Koxt3wx_ 2 4 this 3 1811  5 other 1 1811  
320 14 Dtool_KoxtKd7B 6 295 1778 0 14 Dtool_KoxtKd7B 3 4 this 3 1817  10 searchpath 1 1830  17 default_extension 1 1777  
321 14 Dtool_Koxtk2zY 6 295 1778 0 14 Dtool_Koxtk2zY 2 4 this 3 1817  10 searchpath 1 1830  
322 14 Dtool_KoxtfEHg 6 296 1778 0 14 Dtool_KoxtfEHg 3 4 this 3 1817  9 directory 1 1817  13 allow_backups 1 1778  
323 14 Dtool_Koxt85oI 6 296 1778 0 14 Dtool_Koxt85oI 2 4 this 3 1817  9 directory 1 1817  
324 14 Dtool_Koxt45N1 6 297 1779 0 14 Dtool_Koxt45N1 2 4 this 3 1817  10 searchpath 1 1830  
325 14 Dtool_KoxtPKbx 6 298 1778 0 14 Dtool_KoxtPKbx 2 4 this 3 1811  8 contents 1 1838  
326 14 Dtool_KoxtZ4Va 6 299 1778 0 14 Dtool_KoxtZ4Va 2 4 this 3 1811  6 stream 1 1840  
327 14 Dtool_KoxtqfrI 6 300 1778 0 14 Dtool_KoxtqfrI 3 4 this 3 1811  6 stream 1 1842  8 truncate 1 1778  
328 14 Dtool_Koxt6E__ 6 300 1778 0 14 Dtool_Koxt6E__ 2 4 this 3 1811  6 stream 1 1842  
329 14 Dtool_Koxts6KK 6 301 1778 0 14 Dtool_Koxts6KK 2 4 this 3 1811  6 stream 1 1842  
330 14 Dtool_KoxtLMts 6 302 1778 0 14 Dtool_KoxtLMts 2 4 this 3 1811  6 stream 1 1844  
331 14 Dtool_Koxtm9kw 6 303 1778 0 14 Dtool_Koxtm9kw 1 4 this 3 1811  
332 14 Dtool_KoxtCry9 6 304 1778 0 14 Dtool_KoxtCry9 1 4 this 3 1811  
333 14 Dtool_KoxtaMuO 6 305 1778 0 14 Dtool_KoxtaMuO 1 4 this 3 1811  
334 14 Dtool_Koxtaavz 6 306 1778 0 14 Dtool_Koxtaavz 2 4 this 3 1811  5 other 1 1811  
335 14 Dtool_KoxtOOnR 6 307 1778 0 14 Dtool_KoxtOOnR 1 4 this 3 1811  
336 14 Dtool_KoxtTm2T 6 308 1778 0 14 Dtool_KoxtTm2T 2 4 this 3 1811  5 other 1 1777  
337 14 Dtool_KoxtNclT 6 309 1778 0 14 Dtool_KoxtNclT 2 4 this 3 1811  5 other 1 1777  
338 14 Dtool_KoxtyKFd 6 310 1778 0 14 Dtool_KoxtyKFd 2 4 this 3 1811  5 other 1 1777  
339 14 Dtool_Koxto_Iv 4 311 1785 0 14 Dtool_Koxto_Iv 2 4 this 3 1811  3 out 1 1793  
340 14 Dtool_KoxtCFZV 6 251 1777 0 14 Dtool_KoxtCFZV 1 4 this 3 1811  
341 14 Dtool_KoxtXLB8 7 313 1848 1198 14 Dtool_KoxtXLB8 1 4 copy 1 1846  
342 14 Dtool_KoxtA2Rm 7 313 1848 1198 14 Dtool_KoxtA2Rm 1 7 pattern 1 1777  
343 14 Dtool_KoxtIp0c 7 313 1848 1198 14 Dtool_KoxtIp0c 0 
344 14 Dtool_KoxtgOgc 6 314 1848 0 14 Dtool_KoxtgOgc 2 4 this 3 1848  4 copy 1 1846  
345 14 Dtool_KoxtD9Td 6 315 1778 0 14 Dtool_KoxtD9Td 2 4 this 3 1846  5 other 1 1846  
346 14 Dtool_KoxtK_Dx 6 316 1778 0 14 Dtool_KoxtK_Dx 2 4 this 3 1846  5 other 1 1846  
347 14 Dtool_KoxtyvIe 6 317 1778 0 14 Dtool_KoxtyvIe 2 4 this 3 1846  5 other 1 1846  
348 14 Dtool_KoxtkjXp 4 318 1785 0 14 Dtool_KoxtkjXp 2 4 this 3 1848  7 pattern 1 1777  
349 14 Dtool_KoxttRZ0 6 319 1777 0 14 Dtool_KoxttRZ0 1 4 this 3 1846  
350 14 Dtool_KoxtiND_ 4 320 1785 0 14 Dtool_KoxtiND_ 2 4 this 3 1848  14 case_sensitive 1 1778  
351 14 Dtool_KoxtCAJw 6 321 1778 0 14 Dtool_KoxtCAJw 1 4 this 3 1846  
352 14 Dtool_Koxt6aT3 6 322 1778 0 14 Dtool_Koxt6aT3 2 4 this 3 1846  9 candidate 1 1777  
353 14 Dtool_KoxtEKr3 4 323 1785 0 14 Dtool_KoxtEKr3 2 4 this 3 1846  3 out 1 1793  
354 14 Dtool_KoxtP369 6 324 1778 0 14 Dtool_KoxtP369 1 4 this 3 1846  
355 14 Dtool_Koxtuzy2 6 325 1779 0 14 Dtool_Koxtuzy2 3 4 this 3 1848  7 results 1 1838  3 cwd 1 1811  
356 14 Dtool_Koxtdu9b 6 325 1779 0 14 Dtool_Koxtdu9b 2 4 this 3 1848  7 results 1 1838  
357 14 Dtool_KoxtdB8d 7 328 1849 1200 14 Dtool_KoxtdB8d 0 
358 14 Dtool_KoxtvrEn 4 330 1785 0 14 Dtool_KoxtvrEn 3 4 this 3 1849  11 ostream_ptr 1 1793  12 delete_later 1 1778  
359 14 Dtool_KoxtVkUe 6 331 1793 0 14 Dtool_KoxtVkUe 1 4 this 3 1850  
360 14 Dtool_Koxt5Y26 4 333 1785 0 14 Dtool_Koxt5Y26 1 4 this 3 1849  
361 14 Dtool_Koxt_0e5 6 334 1778 0 14 Dtool_Koxt_0e5 1 4 this 3 1850  
362 14 Dtool_Koxt6z03 4 335 1785 0 14 Dtool_Koxt6z03 1 4 this 3 1850  
363 14 Dtool_KoxtWXtw 6 336 1778 0 14 Dtool_KoxtWXtw 1 4 this 3 1850  
364 14 Dtool_KoxtSHZe 6 337 1777 0 14 Dtool_KoxtSHZe 1 4 this 3 1850  
365 14 Dtool_Koxtu1XD 4 338 1785 0 14 Dtool_Koxtu1XD 1 4 this 3 1849  
366 14 Dtool_Koxt6gyi 6 339 1852 0 14 Dtool_Koxt6gyi 1 4 this 3 1849  
367 14 Dtool_Koxtx5dT 6 340 1852 0 14 Dtool_Koxtx5dT 2 4 this 3 1849  8 fullname 1 1777  
368 14 Dtool_Koxt73Bf 6 340 1852 0 14 Dtool_Koxt73Bf 3 4 this 3 1849  8 basename 1 1777  15 parent_category 1 1852  
369 14 Dtool_Koxt1kmX 6 340 1852 0 14 Dtool_Koxt1kmX 3 4 this 3 1849  8 basename 1 1777  15 parent_fullname 1 1777  
370 14 Dtool_Koxtppce 6 341 1793 0 14 Dtool_Koxtppce 0 
371 14 Dtool_KoxtYCcj 6 342 1793 0 14 Dtool_KoxtYCcj 0 
372 14 Dtool_KoxtzqoR 4 343 1785 0 14 Dtool_KoxtzqoR 1 3 str 1 1777  
373 14 Dtool_Koxt8DCI 6 344 1849 0 14 Dtool_Koxt8DCI 0 
374 14 Dtool_KoxtFwaK 6 346 1777 0 14 Dtool_KoxtFwaK 1 4 this 3 1853  
375 14 Dtool_Koxt66Av 6 347 1777 0 14 Dtool_Koxt66Av 1 4 this 3 1853  
376 14 Dtool_Koxtjotj 6 348 1737 0 14 Dtool_Koxtjotj 1 4 this 3 1853  
377 14 Dtool_KoxtQmtm 4 349 1785 0 14 Dtool_KoxtQmtm 2 4 this 3 1852  8 severity 1 1737  
378 14 Dtool_KoxtNeuG 6 350 1778 0 14 Dtool_KoxtNeuG 2 4 this 3 1853  8 severity 1 1737  
379 14 Dtool_KoxtdQtp 6 351 1778 0 14 Dtool_KoxtdQtp 1 4 this 3 1853  
380 14 Dtool_KoxtyDGx 6 352 1778 0 14 Dtool_KoxtyDGx 1 4 this 3 1853  
381 14 Dtool_KoxtlDsK 6 353 1778 0 14 Dtool_KoxtlDsK 1 4 this 3 1853  
382 14 Dtool_KoxtPEpj 6 354 1778 0 14 Dtool_KoxtPEpj 1 4 this 3 1853  
383 14 Dtool_Koxt6Fq4 6 355 1778 0 14 Dtool_Koxt6Fq4 1 4 this 3 1853  
384 14 Dtool_Koxtvd58 6 356 1778 0 14 Dtool_Koxtvd58 1 4 this 3 1853  
385 14 Dtool_KoxtTXie 6 357 1793 0 14 Dtool_KoxtTXie 3 4 this 3 1853  8 severity 1 1737  6 prefix 1 1778  
386 14 Dtool_KoxtUVa3 6 357 1793 0 14 Dtool_KoxtUVa3 2 4 this 3 1853  8 severity 1 1737  
387 14 Dtool_KoxtYZYH 6 358 1793 0 14 Dtool_KoxtYZYH 2 4 this 3 1853  6 prefix 1 1778  
388 14 Dtool_Koxt1AGf 6 358 1793 0 14 Dtool_Koxt1AGf 1 4 this 3 1853  
389 14 Dtool_KoxtdLBq 6 359 1793 0 14 Dtool_KoxtdLBq 2 4 this 3 1853  6 prefix 1 1778  
390 14 Dtool_Koxtoz6f 6 359 1793 0 14 Dtool_Koxtoz6f 1 4 this 3 1853  
391 14 Dtool_KoxtdLKB 6 360 1793 0 14 Dtool_KoxtdLKB 2 4 this 3 1853  6 prefix 1 1778  
392 14 Dtool_Koxt9Q3Y 6 360 1793 0 14 Dtool_Koxt9Q3Y 1 4 this 3 1853  
393 14 Dtool_Koxtic9G 6 361 1793 0 14 Dtool_Koxtic9G 2 4 this 3 1853  6 prefix 1 1778  
394 14 Dtool_Koxt6bPB 6 361 1793 0 14 Dtool_Koxt6bPB 1 4 this 3 1853  
395 14 Dtool_Koxte0DR 6 362 1793 0 14 Dtool_Koxte0DR 2 4 this 3 1853  6 prefix 1 1778  
396 14 Dtool_Koxtos7G 6 362 1793 0 14 Dtool_Koxtos7G 1 4 this 3 1853  
397 14 Dtool_Koxt_JPC 6 363 1793 0 14 Dtool_Koxt_JPC 2 4 this 3 1853  6 prefix 1 1778  
398 14 Dtool_KoxtreI4 6 363 1793 0 14 Dtool_KoxtreI4 1 4 this 3 1853  
399 14 Dtool_Koxt8NNN 6 364 1779 0 14 Dtool_Koxt8NNN 1 4 this 3 1853  
400 14 Dtool_Koxt1YK4 6 365 1852 0 14 Dtool_Koxt1YK4 2 4 this 3 1853  1 i 1 1779  
401 14 Dtool_Koxtup_Y 4 366 1785 0 14 Dtool_Koxtup_Y 1 5 delta 1 1855  
402 14 Dtool_KoxtTzDo 6 370 1777 0 14 Dtool_KoxtTzDo 0 
403 14 Dtool_KoxtlpKc 6 371 1779 0 14 Dtool_KoxtlpKc 0 
404 14 Dtool_KoxtB4NU 6 372 1779 0 14 Dtool_KoxtB4NU 0 
405 14 Dtool_KoxtoXlJ 6 373 1779 0 14 Dtool_KoxtoXlJ 0 
406 14 Dtool_KoxtCKGJ 6 374 1778 0 14 Dtool_KoxtCKGJ 0 
407 14 Dtool_Koxtu2tG 6 375 1777 0 14 Dtool_Koxtu2tG 0 
408 14 Dtool_KoxtcM8j 6 376 1777 0 14 Dtool_KoxtcM8j 0 
409 14 Dtool_KoxtPPs0 6 377 1777 0 14 Dtool_KoxtPPs0 0 
410 14 Dtool_KoxttmeQ 6 378 1778 0 14 Dtool_KoxttmeQ 2 4 this 3 1856  6 system 1 1777  
411 14 Dtool_KoxtcMuF 6 379 1779 0 14 Dtool_KoxtcMuF 1 4 this 3 1856  
412 14 Dtool_Koxt5Z39 6 380 1777 0 14 Dtool_Koxt5Z39 2 4 this 3 1856  1 n 1 1779  
413 14 Dtool_KoxtdRlZ 6 381 1777 0 14 Dtool_KoxtdRlZ 3 4 this 3 1856  6 system 1 1777  3 tag 1 1777  
414 14 Dtool_KoxtF5dG 4 382 1785 0 14 Dtool_KoxtF5dG 2 4 this 3 1858  6 system 1 1777  
415 14 Dtool_Koxtr7j9 4 383 1785 0 14 Dtool_Koxtr7j9 4 4 this 3 1858  6 system 1 1777  3 tag 1 1777  5 value 1 1777  
416 14 Dtool_KoxtJrBc 4 384 1785 0 14 Dtool_KoxtJrBc 2 4 this 3 1856  3 out 1 1793  
417 14 Dtool_KoxtB7SJ 4 385 1785 0 14 Dtool_KoxtB7SJ 2 4 this 3 1856  3 out 1 1793  
418 14 Dtool_KoxtF_U4 6 386 1858 0 14 Dtool_KoxtF_U4 0 
419 14 Dtool_KoxtN5ho 7 388 1859 1275 14 Dtool_KoxtN5ho 0 
420 14 Dtool_KoxtGniZ 7 388 1859 1275 14 Dtool_KoxtGniZ 1 4 copy 1 1860  
421 14 Dtool_KoxtxgMZ 6 389 1778 0 14 Dtool_KoxtxgMZ 2 4 this 3 1860  5 other 1 1860  
422 14 Dtool_Koxt9A0H 6 390 1778 0 14 Dtool_Koxt9A0H 2 4 this 3 1860  5 other 1 1860  
423 14 Dtool_Koxt0HOQ 6 391 1778 0 14 Dtool_Koxt0HOQ 2 4 this 3 1860  5 other 1 1860  
424 14 Dtool_Koxtx4bP 6 392 1778 0 14 Dtool_Koxtx4bP 2 4 this 3 1860  5 other 1 1860  
425 14 Dtool_Koxt0Xwj 6 393 1778 0 14 Dtool_Koxt0Xwj 2 4 this 3 1860  5 other 1 1860  
426 14 Dtool_Koxtxo9i 6 394 1778 0 14 Dtool_Koxtxo9i 2 4 this 3 1860  5 other 1 1860  
427 14 Dtool_KoxtbjGQ 6 395 1779 0 14 Dtool_KoxtbjGQ 2 4 this 3 1860  5 other 1 1860  
428 14 Dtool_Koxt3PTn 6 396 1815 0 14 Dtool_Koxt3PTn 1 4 this 3 1860  
429 14 Dtool_KoxtRQdg 6 397 1777 0 14 Dtool_KoxtRQdg 2 4 this 3 1860  6 object 1 1862  
430 14 Dtool_Koxthwj6 6 397 1777 0 14 Dtool_Koxthwj6 1 4 this 3 1860  
431 14 Dtool_Koxtvx87 6 398 1778 0 14 Dtool_Koxtvx87 3 4 this 3 1860  6 parent 1 1859  6 object 1 1862  
432 14 Dtool_KoxtviuC 6 398 1778 0 14 Dtool_KoxtviuC 2 4 this 3 1860  6 parent 1 1859  
433 14 Dtool_KoxthY1k 6 399 1779 0 14 Dtool_KoxthY1k 2 4 this 3 1860  6 object 1 1862  
434 14 Dtool_Koxt_rZb 6 399 1779 0 14 Dtool_Koxt_rZb 1 4 this 3 1860  
435 14 Dtool_Koxt4htB 7 400 1859 1275 14 Dtool_Koxt4htB 2 4 this 3 1860  5 index 1 1779  
436 14 Dtool_KoxtbcCX 6 401 1779 0 14 Dtool_KoxtbcCX 2 4 this 3 1860  6 object 1 1862  
437 14 Dtool_Koxt3vxm 6 401 1779 0 14 Dtool_Koxt3vxm 1 4 this 3 1860  
438 14 Dtool_KoxtUvhk 7 402 1859 1275 14 Dtool_KoxtUvhk 2 4 this 3 1860  5 index 1 1779  
439 14 Dtool_KoxtCbxt 7 403 1859 1275 14 Dtool_KoxtCbxt 3 4 this 3 1860  8 ancestor 1 1859  6 object 1 1862  
440 14 Dtool_KoxtjV7z 7 403 1859 1275 14 Dtool_KoxtjV7z 2 4 this 3 1860  8 ancestor 1 1859  
441 14 Dtool_KoxtKt8F 6 404 1779 0 14 Dtool_KoxtKt8F 2 4 this 3 1860  10 legal_vals 1 1863  
442 14 Dtool_KoxtPmiQ 6 405 1779 0 14 Dtool_KoxtPmiQ 1 4 this 3 1860  
443 14 Dtool_KoxtVMV9 4 406 1785 0 14 Dtool_KoxtVMV9 2 4 this 3 1860  3 out 1 1793  
444 14 Dtool_Koxtp1S_ 7 407 1859 1275 14 Dtool_Koxtp1S_ 0 
445 14 Dtool_Koxtx9n6 7 410 1859 1275 14 Dtool_Koxtx9n6 2 4 this 3 1866  4 name 1 1777  
446 14 Dtool_Koxt5DEU 6 411 1777 0 14 Dtool_Koxt5DEU 3 4 this 3 1866  4 type 1 1859  6 object 1 1862  
447 14 Dtool_KoxtMBOu 6 412 1778 0 14 Dtool_KoxtMBOu 4 4 this 3 1868  5 child 1 1859  4 base 1 1859  12 child_object 1 1862  
448 14 Dtool_KoxtPxO1 6 413 1779 0 14 Dtool_KoxtPxO1 1 4 this 3 1868  
449 14 Dtool_KoxtLFNI 7 414 1859 1275 14 Dtool_KoxtLFNI 2 4 this 3 1868  1 n 1 1779  
450 14 Dtool_Koxtlx7d 6 415 1779 0 14 Dtool_Koxtlx7d 3 4 this 3 1866  5 child 1 1859  12 child_object 1 1862  
451 14 Dtool_Koxt4LWH 7 416 1859 1275 14 Dtool_Koxt4LWH 3 4 this 3 1866  5 child 1 1859  5 index 1 1779  
452 14 Dtool_KoxtmVbL 6 417 1779 0 14 Dtool_KoxtmVbL 3 4 this 3 1866  5 child 1 1859  12 child_object 1 1862  
453 14 Dtool_KoxtfTRM 7 418 1859 1275 14 Dtool_KoxtfTRM 3 4 this 3 1866  5 child 1 1859  5 index 1 1779  
454 14 Dtool_Koxt3YQ7 7 419 1859 1275 14 Dtool_Koxt3YQ7 4 4 this 3 1868  5 child 1 1859  4 base 1 1859  12 child_object 1 1862  
455 14 Dtool_Koxt5_p8 4 420 1785 0 14 Dtool_Koxt5_p8 0 
456 14 Dtool_KoxteZEC 4 421 1785 0 14 Dtool_KoxteZEC 2 4 this 3 1866  3 out 1 1793  
457 14 Dtool_Koxtuwsa 6 422 1868 0 14 Dtool_Koxtuwsa 0 
458 14 Dtool_Koxt1uxI 7 426 1859 1275 14 Dtool_Koxt1uxI 1 4 this 3 1869  
459 14 Dtool_Koxtm7AU 6 427 1779 0 14 Dtool_Koxtm7AU 1 4 this 3 1869  
460 14 Dtool_KoxtnFKt 6 428 1778 0 14 Dtool_KoxtnFKt 2 4 this 3 1869  6 handle 1 1859  
461 14 Dtool_Koxt7Xzz 6 429 1778 0 14 Dtool_Koxt7Xzz 2 4 this 3 1869  6 handle 1 1859  
462 14 Dtool_Koxt6oYG 6 430 1779 0 14 Dtool_Koxt6oYG 2 4 this 3 1869  6 param0 0 1863  
463 14 Dtool_KoxtEGqZ 7 431 1859 1275 14 Dtool_KoxtEGqZ 0 
464 14 Dtool_KoxtrDS9 4 444 1785 0 14 Dtool_KoxtrDS9 1 4 this 3 1871  
465 14 Dtool_KoxtbMFg 6 436 1786 0 14 Dtool_KoxtbMFg 1 4 this 3 1871  
466 14 Dtool_Koxtpp1t 6 437 1871 0 14 Dtool_Koxtpp1t 1 4 this 3 1786  
467 14 Dtool_Koxt4uln 6 434 1779 0 14 Dtool_Koxt4uln 1 4 this 3 1786  
468 14 Dtool_Koxt7W6h 6 442 1793 0 14 Dtool_Koxt7W6h 1 4 this 3 1871  
469 14 Dtool_KoxtHU9t 6 443 1871 0 14 Dtool_KoxtHU9t 1 4 this 3 1793  
470 14 Dtool_Koxtiovs 4 439 1785 0 14 Dtool_Koxtiovs 2 4 this 3 1793  1 c 1 1816  
471 14 Dtool_Koxtstz3 4 440 1785 0 14 Dtool_Koxtstz3 1 4 this 3 1793  
472 14 Dtool_Koxt_ZlF 6 447 1778 0 14 Dtool_Koxt_ZlF 0 
473 14 Dtool_KoxtX_zM 6 448 1778 0 14 Dtool_KoxtX_zM 0 
474 14 Dtool_KoxtCy97 6 449 1815 0 14 Dtool_KoxtCy97 0 
475 14 Dtool_KoxtqqXP 6 450 1778 0 14 Dtool_KoxtqqXP 0 
476 14 Dtool_KoxtEWCM 6 451 1815 0 14 Dtool_KoxtEWCM 0 
477 14 Dtool_Koxtpe4c 6 452 1778 0 14 Dtool_Koxtpe4c 0 
478 14 Dtool_KoxtxSjZ 6 453 1815 0 14 Dtool_KoxtxSjZ 0 
479 14 Dtool_KoxtdWyy 6 454 1778 0 14 Dtool_KoxtdWyy 0 
480 14 Dtool_Koxtlqev 6 455 1815 0 14 Dtool_Koxtlqev 0 
481 14 Dtool_Koxtu9Wa 6 456 1779 0 14 Dtool_Koxtu9Wa 0 
482 14 Dtool_Koxt7lLT 4 457 1785 0 14 Dtool_Koxt7lLT 1 6 result 1 1872  
483 14 Dtool_Koxt4iVB 4 458 1785 0 14 Dtool_Koxt4iVB 2 6 result 1 1872  4 type 1 1859  
484 14 Dtool_KoxtWkjk 4 459 1785 0 14 Dtool_KoxtWkjk 3 6 result 1 1872  4 from 1 1781  2 to 1 1781  
485 14 Dtool_Koxt0zJ5 4 460 1785 0 14 Dtool_Koxt0zJ5 1 6 result 1 1872  
486 14 Dtool_KoxtfpsO 4 461 1785 0 14 Dtool_KoxtfpsO 0 
487 14 Dtool_KoxtIacH 4 462 1785 0 14 Dtool_KoxtIacH 0 
488 14 Dtool_KoxtPdpO 4 463 1785 0 14 Dtool_KoxtPdpO 0 
489 14 Dtool_KoxtCD9U 4 464 1785 0 14 Dtool_KoxtCD9U 0 
490 14 Dtool_Koxty1oy 4 465 1785 0 14 Dtool_Koxty1oy 0 
491 14 Dtool_KoxtP11_ 6 469 1779 0 14 Dtool_KoxtP11_ 1 4 this 3 1873  
492 14 Dtool_KoxtaS5_ 4 470 1785 0 14 Dtool_KoxtaS5_ 1 4 this 3 1873  
493 14 Dtool_KoxtwyVy 6 471 1778 0 14 Dtool_KoxtwyVy 1 4 this 3 1873  
494 14 Dtool_Koxtvpj2 6 472 1778 0 14 Dtool_Koxtvpj2 1 4 this 3 1873  
495 14 Dtool_Koxtn3ZO 7 473 1859 1275 14 Dtool_Koxtn3ZO 0 
496 14 Dtool_KoxtBAQY 6 476 1779 0 14 Dtool_KoxtBAQY 1 4 this 3 1875  
497 14 Dtool_Koxtrcp6 6 478 1778 0 14 Dtool_Koxtrcp6 1 4 this 3 1877  
498 14 Dtool_KoxtYp0r 6 479 1815 0 14 Dtool_KoxtYp0r 1 4 this 3 1877  
499 14 Dtool_KoxtPkXb 7 484 1879 1348 14 Dtool_KoxtPkXb 0 
500 14 Dtool_Koxt6Txu 7 484 1879 1348 14 Dtool_Koxt6Txu 1 4 copy 1 1880  
501 14 Dtool_KoxtTmv9 7 484 1879 1348 14 Dtool_KoxtTmv9 2 1 n 1 1815  5 value 1 1882  
502 14 Dtool_Koxtx6ks 7 485 1879 1348 14 Dtool_Koxtx6ks 1 1 n 1 1815  
503 14 Dtool_KoxtZxGV 6 486 1815 0 14 Dtool_KoxtZxGV 1 4 this 3 1880  
504 14 Dtool_Koxt7t3V 6 487 1882 0 14 Dtool_Koxt7t3V 2 4 this 3 1880  1 n 1 1815  
505 14 Dtool_Koxtu15P 4 488 1785 0 14 Dtool_Koxtu15P 3 4 this 3 1879  1 n 1 1815  5 value 1 1882  
506 14 Dtool_KoxtxVTf 4 489 1785 0 14 Dtool_KoxtxVTf 2 4 this 3 1879  1 x 1 1882  
507 14 Dtool_Koxtz2Bp 4 490 1785 0 14 Dtool_Koxtz2Bp 1 4 this 3 1879  
508 14 Dtool_Koxt1Lkk 4 491 1785 0 14 Dtool_Koxt1Lkk 1 4 this 3 1879  
509 14 Dtool_KoxtcLaW 4 482 1785 0 14 Dtool_KoxtcLaW 1 4 this 3 1883  
510 14 Dtool_KoxtWyqz 4 483 1785 0 14 Dtool_KoxtWyqz 2 4 this 3 1884  3 out 1 1793  
511 14 Dtool_Koxtd5kQ 7 494 1886 1352 14 Dtool_Koxtd5kQ 0 
512 14 Dtool_KoxtiaPN 7 494 1886 1352 14 Dtool_KoxtiaPN 1 4 copy 1 1887  
513 14 Dtool_KoxtFege 7 494 1886 1352 14 Dtool_KoxtFege 1 4 copy 1 1880  
514 14 Dtool_Koxt6lat 6 495 1815 0 14 Dtool_Koxt6lat 1 4 this 3 1887  
515 14 Dtool_KoxtZSAv 6 496 1882 0 14 Dtool_KoxtZSAv 2 4 this 3 1887  1 n 1 1815  
516 14 Dtool_KoxtCJxx 7 499 1889 1290 14 Dtool_KoxtCJxx 0 
517 14 Dtool_KoxteUaC 7 499 1889 1290 14 Dtool_KoxteUaC 1 4 copy 1 1890  
518 14 Dtool_Koxtgu3g 7 499 1889 1290 14 Dtool_Koxtgu3g 1 4 data 1 1777  
519 14 Dtool_KoxtfPb_ 6 500 1889 0 14 Dtool_KoxtfPb_ 2 4 this 3 1889  4 copy 1 1890  
520 14 Dtool_KoxtSYfy 4 501 1785 0 14 Dtool_KoxtSYfy 1 4 this 3 1889  
521 14 Dtool_KoxtPUpE 4 502 1785 0 14 Dtool_KoxtPUpE 2 4 this 3 1890  3 out 1 1793  
522 14 Dtool_KoxtO0pV 4 503 1785 0 14 Dtool_KoxtO0pV 2 4 this 3 1889  5 value 1 1778  
523 14 Dtool_KoxtmQ0b 4 504 1785 0 14 Dtool_KoxtmQ0b 2 4 this 3 1889  5 value 1 1892  
524 14 Dtool_KoxttZzT 4 505 1785 0 14 Dtool_KoxttZzT 2 4 this 3 1889  5 value 1 1882  
525 14 Dtool_KoxtR6wM 4 506 1785 0 14 Dtool_KoxtR6wM 2 4 this 3 1889  5 value 1 1893  
526 14 Dtool_Koxtyw0y 4 507 1785 0 14 Dtool_Koxtyw0y 2 4 this 3 1889  5 value 1 1779  
527 14 Dtool_Koxt2_qH 4 508 1785 0 14 Dtool_Koxt2_qH 2 4 this 3 1889  5 value 1 1894  
528 14 Dtool_KoxtPwfl 4 509 1785 0 14 Dtool_KoxtPwfl 2 4 this 3 1889  5 value 1 1895  
529 14 Dtool_KoxtZc5Z 4 510 1785 0 14 Dtool_KoxtZc5Z 2 4 this 3 1889  5 value 1 1815  
530 14 Dtool_Koxtkyp3 4 511 1785 0 14 Dtool_Koxtkyp3 2 4 this 3 1889  5 value 1 1896  
531 14 Dtool_Koxt9aTM 4 512 1785 0 14 Dtool_Koxt9aTM 2 4 this 3 1889  5 value 1 1780  
532 14 Dtool_Koxth7H7 4 513 1785 0 14 Dtool_Koxth7H7 2 4 this 3 1889  5 value 1 1781  
533 14 Dtool_KoxtStGs 4 514 1785 0 14 Dtool_KoxtStGs 2 4 this 3 1889  5 value 1 1893  
534 14 Dtool_Koxt0Dch 4 515 1785 0 14 Dtool_Koxt0Dch 2 4 this 3 1889  5 value 1 1779  
535 14 Dtool_Koxtia1n 4 516 1785 0 14 Dtool_Koxtia1n 2 4 this 3 1889  5 value 1 1894  
536 14 Dtool_Koxtvmv8 4 517 1785 0 14 Dtool_Koxtvmv8 2 4 this 3 1889  5 value 1 1895  
537 14 Dtool_KoxtkGod 4 518 1785 0 14 Dtool_KoxtkGod 2 4 this 3 1889  5 value 1 1815  
538 14 Dtool_KoxtfEpz 4 519 1785 0 14 Dtool_KoxtfEpz 2 4 this 3 1889  5 value 1 1896  
539 14 Dtool_KoxtvJGy 4 520 1785 0 14 Dtool_KoxtvJGy 2 4 this 3 1889  5 value 1 1780  
540 14 Dtool_Koxtk_M8 4 521 1785 0 14 Dtool_Koxtk_M8 2 4 this 3 1889  5 value 1 1781  
541 14 Dtool_KoxtLkWU 4 522 1785 0 14 Dtool_KoxtLkWU 2 4 this 3 1889  3 str 1 1777  
542 14 Dtool_KoxtWlwF 4 523 1785 0 14 Dtool_KoxtWlwF 2 4 this 3 1889  3 str 1 1777  
543 14 Dtool_KoxtfOXB 4 524 1785 0 14 Dtool_KoxtfOXB 2 4 this 3 1889  3 str 1 1777  
544 14 Dtool_Koxt6J1o 4 525 1785 0 14 Dtool_Koxt6J1o 3 4 this 3 1889  3 str 1 1777  4 size 1 1815  
545 14 Dtool_KoxtwzVX 4 526 1785 0 14 Dtool_KoxtwzVX 2 4 this 3 1889  3 str 1 1777  
546 14 Dtool_Koxtqdvo 4 527 1785 0 14 Dtool_Koxtqdvo 2 4 this 3 1889  4 size 1 1815  
547 14 Dtool_Koxt1lCb 4 528 1785 0 14 Dtool_Koxt1lCb 2 4 this 3 1889  4 data 1 1777  
548 14 Dtool_KoxtrWvj 6 529 1777 0 14 Dtool_KoxtrWvj 1 4 this 3 1890  
549 14 Dtool_KoxtT0sE 4 530 1785 0 14 Dtool_KoxtT0sE 1 4 this 3 1890  
550 14 Dtool_Koxtkk_0 6 531 1815 0 14 Dtool_Koxtkk_0 1 4 this 3 1890  
551 14 Dtool_KoxtgvMz 4 532 1785 0 14 Dtool_KoxtgvMz 2 4 this 3 1889  4 data 1 1879  
552 14 Dtool_Koxtv3Ez 4 533 1785 0 14 Dtool_Koxtv3Ez 2 4 this 3 1889  4 data 1 1886  
553 14 Dtool_Koxt27U6 7 534 1886 1352 14 Dtool_Koxt27U6 1 4 this 3 1890  
554 14 Dtool_KoxtDsO3 7 535 1879 1348 14 Dtool_KoxtDsO3 1 4 this 3 1889  
555 14 Dtool_KoxtN2MM 6 536 1778 0 14 Dtool_KoxtN2MM 2 4 this 3 1890  5 other 1 1890  
556 14 Dtool_Koxtrt7L 6 537 1778 0 14 Dtool_Koxtrt7L 2 4 this 3 1890  5 other 1 1890  
557 14 Dtool_KoxthPT3 6 538 1778 0 14 Dtool_KoxthPT3 2 4 this 3 1890  5 other 1 1890  
558 14 Dtool_Koxt9OXp 4 539 1785 0 14 Dtool_Koxt9OXp 2 4 this 3 1890  3 out 1 1793  
559 14 Dtool_Koxtm1mc 4 540 1785 0 14 Dtool_Koxtm1mc 3 4 this 3 1890  3 out 1 1793  6 indent 1 1815  
560 14 Dtool_KoxtXtYv 4 540 1785 0 14 Dtool_KoxtXtYv 2 4 this 3 1890  3 out 1 1793  
561 14 Dtool_Koxt4Vv_ 7 541 1859 1275 14 Dtool_Koxt4Vv_ 0 
562 14 Dtool_KoxtlJZb 7 543 1897 1398 14 Dtool_KoxtlJZb 0 
563 14 Dtool_KoxtEwZZ 7 543 1897 1398 14 Dtool_KoxtEwZZ 2 8 datagram 1 1890  6 offset 1 1815  
564 14 Dtool_Koxtz_OF 7 543 1897 1398 14 Dtool_Koxtz_OF 1 8 datagram 1 1890  
565 14 Dtool_KoxtYg7_ 7 543 1897 1398 14 Dtool_KoxtYg7_ 1 4 copy 1 1898  
566 14 Dtool_KoxtnHKF 6 544 1897 0 14 Dtool_KoxtnHKF 2 4 this 3 1897  4 copy 1 1898  
567 14 Dtool_KoxtgFgv 6 546 1778 0 14 Dtool_KoxtgFgv 1 4 this 3 1897  
568 14 Dtool_KoxtFX9M 6 547 1892 0 14 Dtool_KoxtFX9M 1 4 this 3 1897  
569 14 Dtool_KoxtD6SU 6 548 1882 0 14 Dtool_KoxtD6SU 1 4 this 3 1897  
570 14 Dtool_KoxtEVNl 6 549 1893 0 14 Dtool_KoxtEVNl 1 4 this 3 1897  
571 14 Dtool_KoxtFcUY 6 550 1779 0 14 Dtool_KoxtFcUY 1 4 this 3 1897  
572 14 Dtool_KoxtkKNB 6 551 1894 0 14 Dtool_KoxtkKNB 1 4 this 3 1897  
573 14 Dtool_KoxtX2ad 6 552 1895 0 14 Dtool_KoxtX2ad 1 4 this 3 1897  
574 14 Dtool_KoxtpR_A 6 553 1815 0 14 Dtool_KoxtpR_A 1 4 this 3 1897  
575 14 Dtool_KoxtFGTd 6 554 1896 0 14 Dtool_KoxtFGTd 1 4 this 3 1897  
576 14 Dtool_KoxtvFBB 6 555 1780 0 14 Dtool_KoxtvFBB 1 4 this 3 1897  
577 14 Dtool_Koxt0JoL 6 556 1781 0 14 Dtool_Koxt0JoL 1 4 this 3 1897  
578 14 Dtool_KoxtzzGa 6 557 1893 0 14 Dtool_KoxtzzGa 1 4 this 3 1897  
579 14 Dtool_Koxt6U9R 6 558 1779 0 14 Dtool_Koxt6U9R 1 4 this 3 1897  
580 14 Dtool_KoxtAdBm 6 559 1894 0 14 Dtool_KoxtAdBm 1 4 this 3 1897  
581 14 Dtool_Koxte_MA 6 560 1895 0 14 Dtool_Koxte_MA 1 4 this 3 1897  
582 14 Dtool_Koxt7bZ7 6 561 1815 0 14 Dtool_Koxt7bZ7 1 4 this 3 1897  
583 14 Dtool_KoxtF489 6 562 1896 0 14 Dtool_KoxtF489 1 4 this 3 1897  
584 14 Dtool_KoxtgTRq 6 563 1780 0 14 Dtool_KoxtgTRq 1 4 this 3 1897  
585 14 Dtool_KoxtjsC8 6 564 1781 0 14 Dtool_KoxtjsC8 1 4 this 3 1897  
586 14 Dtool_KoxtxS8B 6 565 1777 0 14 Dtool_KoxtxS8B 1 4 this 3 1897  
587 14 Dtool_Koxtp2Xo 6 566 1777 0 14 Dtool_Koxtp2Xo 1 4 this 3 1897  
588 14 Dtool_KoxtjyF6 6 567 1777 0 14 Dtool_KoxtjyF6 1 4 this 3 1897  
589 14 Dtool_KoxtmT0q 6 568 1777 0 14 Dtool_KoxtmT0q 2 4 this 3 1897  4 size 1 1815  
590 14 Dtool_KoxtPayl 6 569 1777 0 14 Dtool_KoxtPayl 1 4 this 3 1897  
591 14 Dtool_KoxtTwSY 4 570 1785 0 14 Dtool_KoxtTwSY 2 4 this 3 1897  4 size 1 1815  
592 14 Dtool_Koxt3j8S 6 571 1777 0 14 Dtool_Koxt3j8S 2 4 this 3 1897  4 size 1 1815  
593 14 Dtool_KoxtyKhi 6 572 1777 0 14 Dtool_KoxtyKhi 1 4 this 3 1898  
594 14 Dtool_KoxtOxKa 6 573 1779 0 14 Dtool_KoxtOxKa 1 4 this 3 1898  
595 14 Dtool_Koxtdg_H 6 574 1890 0 14 Dtool_Koxtdg_H 1 4 this 3 1898  
596 14 Dtool_Koxt_KNH 6 575 1815 0 14 Dtool_Koxt_KNH 1 4 this 3 1898  
597 14 Dtool_KoxtG38c 4 576 1785 0 14 Dtool_KoxtG38c 2 4 this 3 1898  3 out 1 1793  
598 14 Dtool_KoxtcoYU 4 577 1785 0 14 Dtool_KoxtcoYU 3 4 this 3 1898  3 out 1 1793  6 indent 1 1815  
599 14 Dtool_KoxtuJe3 4 577 1785 0 14 Dtool_KoxtuJe3 2 4 this 3 1898  3 out 1 1793  
600 14 Dtool_KoxtzbIp 7 586 1900 1443 14 Dtool_KoxtzbIp 0 
601 14 Dtool_KoxtKGYV 4 587 1785 0 14 Dtool_KoxtKGYV 2 4 this 3 1900  3 pos 1 1815  
602 14 Dtool_KoxtQvNL 6 588 1815 0 14 Dtool_KoxtQvNL 1 4 this 3 1901  
603 14 Dtool_KoxtAU2w 6 589 1777 0 14 Dtool_KoxtAU2w 2 4 this 3 1900  6 length 1 1815  
604 14 Dtool_KoxtCYbY 6 590 1777 0 14 Dtool_KoxtCYbY 1 4 this 3 1900  
605 14 Dtool_KoxtBwPQ 6 591 1777 0 14 Dtool_KoxtBwPQ 1 4 this 3 1901  
606 14 Dtool_Koxt9OZ1 7 594 1905 1446 14 Dtool_Koxt9OZ1 1 4 copy 1 1903  
607 14 Dtool_KoxtKElO 7 594 1905 1446 14 Dtool_KoxtKElO 1 3 out 1 1793  
608 14 Dtool_KoxtDFlt 6 595 1905 0 14 Dtool_KoxtDFlt 2 4 this 3 1905  4 copy 1 1903  
609 14 Dtool_KoxtUDoY 6 597 1793 0 14 Dtool_KoxtUDoY 1 4 this 3 1903  
610 14 Dtool_Koxt3JN5 4 598 1785 0 14 Dtool_Koxt3JN5 2 4 this 3 1905  5 value 1 1778  
611 14 Dtool_KoxtTGkZ 4 599 1785 0 14 Dtool_KoxtTGkZ 2 4 this 3 1905  5 value 1 1892  
612 14 Dtool_KoxtEVDZ 4 600 1785 0 14 Dtool_KoxtEVDZ 2 4 this 3 1905  5 value 1 1882  
613 14 Dtool_KoxtmnpY 4 601 1785 0 14 Dtool_KoxtmnpY 2 4 this 3 1905  5 value 1 1893  
614 14 Dtool_KoxtIJDD 4 602 1785 0 14 Dtool_KoxtIJDD 2 4 this 3 1905  5 value 1 1779  
615 14 Dtool_KoxtWgUQ 4 603 1785 0 14 Dtool_KoxtWgUQ 2 4 this 3 1905  5 value 1 1894  
616 14 Dtool_Koxtq_Hu 4 604 1785 0 14 Dtool_Koxtq_Hu 2 4 this 3 1905  5 value 1 1895  
617 14 Dtool_KoxtT9bJ 4 605 1785 0 14 Dtool_KoxtT9bJ 2 4 this 3 1905  5 value 1 1815  
618 14 Dtool_Koxt31RL 4 606 1785 0 14 Dtool_Koxt31RL 2 4 this 3 1905  5 value 1 1896  
619 14 Dtool_KoxtyymY 4 607 1785 0 14 Dtool_KoxtyymY 2 4 this 3 1905  5 value 1 1780  
620 14 Dtool_KoxtREib 4 608 1785 0 14 Dtool_KoxtREib 2 4 this 3 1905  5 value 1 1781  
621 14 Dtool_KoxtoxlG 4 609 1785 0 14 Dtool_KoxtoxlG 2 4 this 3 1905  5 value 1 1893  
622 14 Dtool_KoxtPp6h 4 610 1785 0 14 Dtool_KoxtPp6h 2 4 this 3 1905  5 value 1 1779  
623 14 Dtool_KoxtboTe 4 611 1785 0 14 Dtool_KoxtboTe 2 4 this 3 1905  5 value 1 1894  
624 14 Dtool_Koxtt7kL 4 612 1785 0 14 Dtool_Koxtt7kL 2 4 this 3 1905  5 value 1 1895  
625 14 Dtool_KoxtQrp1 4 613 1785 0 14 Dtool_KoxtQrp1 2 4 this 3 1905  5 value 1 1815  
626 14 Dtool_KoxtGgAL 4 614 1785 0 14 Dtool_KoxtGgAL 2 4 this 3 1905  5 value 1 1896  
627 14 Dtool_Koxtgr8S 4 615 1785 0 14 Dtool_Koxtgr8S 2 4 this 3 1905  5 value 1 1780  
628 14 Dtool_KoxtgAln 4 616 1785 0 14 Dtool_KoxtgAln 2 4 this 3 1905  5 value 1 1781  
629 14 Dtool_KoxtV9F1 4 617 1785 0 14 Dtool_KoxtV9F1 2 4 this 3 1905  3 str 1 1777  
630 14 Dtool_KoxtMtIk 4 618 1785 0 14 Dtool_KoxtMtIk 2 4 this 3 1905  3 str 1 1777  
631 14 Dtool_KoxtYv3_ 4 619 1785 0 14 Dtool_KoxtYv3_ 2 4 this 3 1905  3 str 1 1777  
632 14 Dtool_KoxtXQSq 4 620 1785 0 14 Dtool_KoxtXQSq 3 4 this 3 1905  3 str 1 1777  4 size 1 1815  
633 14 Dtool_KoxtMjY_ 4 621 1785 0 14 Dtool_KoxtMjY_ 2 4 this 3 1905  4 size 1 1815  
634 14 Dtool_KoxtbBfh 4 622 1785 0 14 Dtool_KoxtbBfh 2 4 this 3 1905  4 data 1 1777  
635 14 Dtool_KoxtFpUz 7 624 1908 1475 14 Dtool_KoxtFpUz 1 4 copy 1 1906  
636 14 Dtool_KoxtRUwl 7 624 1908 1475 14 Dtool_KoxtRUwl 2 2 in 1 1786  11 owns_stream 1 1778  
637 14 Dtool_Koxt9fei 6 625 1908 0 14 Dtool_Koxt9fei 2 4 this 3 1908  4 copy 1 1906  
638 14 Dtool_KoxtBqye 6 627 1786 0 14 Dtool_KoxtBqye 1 4 this 3 1906  
639 14 Dtool_KoxtRU6i 6 628 1778 0 14 Dtool_KoxtRU6i 1 4 this 3 1908  
640 14 Dtool_KoxtKvu5 6 629 1892 0 14 Dtool_KoxtKvu5 1 4 this 3 1908  
641 14 Dtool_Koxt3bcv 6 630 1882 0 14 Dtool_Koxt3bcv 1 4 this 3 1908  
642 14 Dtool_KoxtC3S_ 6 631 1893 0 14 Dtool_KoxtC3S_ 1 4 this 3 1908  
643 14 Dtool_KoxtfHEw 6 632 1779 0 14 Dtool_KoxtfHEw 1 4 this 3 1908  
644 14 Dtool_KoxtVfP_ 6 633 1894 0 14 Dtool_KoxtVfP_ 1 4 this 3 1908  
645 14 Dtool_KoxtCGYB 6 634 1895 0 14 Dtool_KoxtCGYB 1 4 this 3 1908  
646 14 Dtool_Koxtq8Q6 6 635 1815 0 14 Dtool_Koxtq8Q6 1 4 this 3 1908  
647 14 Dtool_KoxtlBk_ 6 636 1896 0 14 Dtool_KoxtlBk_ 1 4 this 3 1908  
648 14 Dtool_KoxtFJu6 6 637 1780 0 14 Dtool_KoxtFJu6 1 4 this 3 1908  
649 14 Dtool_KoxtMMwk 6 638 1781 0 14 Dtool_KoxtMMwk 1 4 this 3 1908  
650 14 Dtool_Koxtx_KM 6 639 1893 0 14 Dtool_Koxtx_KM 1 4 this 3 1908  
651 14 Dtool_KoxtntwJ 6 640 1779 0 14 Dtool_KoxtntwJ 1 4 this 3 1908  
652 14 Dtool_KoxtM_CL 6 641 1894 0 14 Dtool_KoxtM_CL 1 4 this 3 1908  
653 14 Dtool_KoxtiU6t 6 642 1895 0 14 Dtool_KoxtiU6t 1 4 this 3 1908  
654 14 Dtool_KoxthfBh 6 643 1815 0 14 Dtool_KoxthfBh 1 4 this 3 1908  
655 14 Dtool_KoxtCq6J 6 644 1896 0 14 Dtool_KoxtCq6J 1 4 this 3 1908  
656 14 Dtool_KoxttDBP 6 645 1780 0 14 Dtool_KoxttDBP 1 4 this 3 1908  
657 14 Dtool_KoxtxzXr 6 646 1781 0 14 Dtool_KoxtxzXr 1 4 this 3 1908  
658 14 Dtool_KoxtSbCK 6 647 1777 0 14 Dtool_KoxtSbCK 1 4 this 3 1908  
659 14 Dtool_Koxtjatw 6 648 1777 0 14 Dtool_Koxtjatw 1 4 this 3 1908  
660 14 Dtool_KoxttLbM 6 649 1777 0 14 Dtool_KoxttLbM 1 4 this 3 1908  
661 14 Dtool_Koxtdj5Y 6 650 1777 0 14 Dtool_Koxtdj5Y 2 4 this 3 1908  4 size 1 1815  
662 14 Dtool_KoxtRyDw 4 651 1785 0 14 Dtool_KoxtRyDw 2 4 this 3 1908  4 size 1 1815  
663 14 Dtool_Koxtxpca 6 652 1777 0 14 Dtool_Koxtxpca 2 4 this 3 1908  4 size 1 1815  
664 14 Dtool_KoxtUfmk 6 653 1777 0 14 Dtool_KoxtUfmk 1 4 this 3 1908  
665 14 Dtool_KoxtI_Ud 7 655 1909 1531 14 Dtool_KoxtI_Ud 0 
666 14 Dtool_KoxtH_4C 7 655 1909 1531 14 Dtool_KoxtH_4C 1 4 copy 1 1910  
667 14 Dtool_Koxt3FRA 6 656 1909 0 14 Dtool_Koxt3FRA 2 4 this 3 1909  4 copy 1 1910  
668 14 Dtool_Koxtnq7I 6 657 1778 0 14 Dtool_Koxtnq7I 2 4 this 3 1910  5 other 1 1910  
669 14 Dtool_Koxt7G7E 6 658 1778 0 14 Dtool_Koxt7G7E 2 4 this 3 1910  5 other 1 1910  
670 14 Dtool_KoxtyVFW 6 659 1778 0 14 Dtool_KoxtyVFW 2 4 this 3 1910  5 other 1 1910  
671 14 Dtool_KoxtpxYW 6 660 1779 0 14 Dtool_KoxtpxYW 2 4 this 3 1910  5 other 1 1910  
672 14 Dtool_Koxtvbg2 4 661 1785 0 14 Dtool_Koxtvbg2 2 4 this 3 1909  5 other 1 1910  
673 14 Dtool_KoxtPh3K 4 662 1785 0 14 Dtool_KoxtPh3K 2 4 this 3 1910  3 out 1 1793  
674 14 Dtool_Koxtl92_ 4 663 1785 0 14 Dtool_Koxtl92_ 2 4 this 3 1909  2 in 1 1786  
675 14 Dtool_Koxtn_Zx 4 664 1785 0 14 Dtool_Koxtn_Zx 2 4 this 3 1910  3 out 1 1793  
676 14 Dtool_KoxtZ1DR 4 665 1785 0 14 Dtool_KoxtZ1DR 2 4 this 3 1909  2 in 1 1786  
677 14 Dtool_Koxt_T88 4 666 1785 0 14 Dtool_Koxt_T88 2 4 this 3 1910  3 out 1 1793  
678 14 Dtool_Koxt_JzH 4 667 1785 0 14 Dtool_Koxt_JzH 2 4 this 3 1909  2 in 1 1786  
679 14 Dtool_KoxtL3Nu 4 668 1785 0 14 Dtool_KoxtL3Nu 2 4 this 3 1910  3 out 1 1793  
680 14 Dtool_KoxtzYur 6 669 1777 0 14 Dtool_KoxtzYur 1 4 this 3 1910  
681 14 Dtool_KoxtOC7K 6 670 1778 0 14 Dtool_KoxtOC7K 2 4 this 3 1909  4 text 1 1777  
682 14 Dtool_KoxtyITU 6 671 1777 0 14 Dtool_KoxtyITU 1 4 this 3 1910  
683 14 Dtool_KoxtWCVt 6 672 1778 0 14 Dtool_KoxtWCVt 2 4 this 3 1909  4 text 1 1777  
684 14 Dtool_Koxt8zkt 6 673 1777 0 14 Dtool_Koxt8zkt 1 4 this 3 1910  
685 14 Dtool_KoxtIsUA 6 674 1778 0 14 Dtool_KoxtIsUA 2 4 this 3 1909  4 text 1 1777  
686 14 Dtool_Koxticbw 4 675 1785 0 14 Dtool_Koxticbw 2 4 this 3 1910  11 destination 1 1889  
687 14 Dtool_Koxto9e6 4 676 1785 0 14 Dtool_Koxto9e6 2 4 this 3 1909  6 source 1 1897  
688 14 Dtool_Koxtb0yS 4 677 1785 0 14 Dtool_Koxtb0yS 2 4 this 3 1910  11 destination 1 1905  
689 14 Dtool_KoxtUgPU 4 678 1785 0 14 Dtool_KoxtUgPU 2 4 this 3 1909  6 source 1 1908  
690 14 Dtool_Koxt1jdB 6 679 1778 0 14 Dtool_Koxt1jdB 2 4 this 3 1909  8 filename 1 1811  
691 14 Dtool_Koxtk7sL 4 680 1785 0 14 Dtool_Koxtk7sL 2 4 this 3 1909  7 ramfile 1 1901  
692 14 Dtool_KoxtIiKt 4 681 1785 0 14 Dtool_KoxtIiKt 2 4 this 3 1909  4 data 1 1777  
693 14 Dtool_KoxtWiK7 4 682 1785 0 14 Dtool_KoxtWiK7 3 4 this 3 1909  6 buffer 1 1777  6 length 1 1779  
694 14 Dtool_Koxt07zQ 7 685 1872 1533 14 Dtool_Koxt07zQ 0 
695 14 Dtool_Koxt2Eh_ 6 687 1779 0 14 Dtool_Koxt2Eh_ 1 4 this 3 1912  
696 14 Dtool_KoxtTp6p 6 688 1914 0 14 Dtool_KoxtTp6p 2 4 this 3 1912  1 n 1 1779  
697 14 Dtool_Koxt_vMi 6 689 1862 0 14 Dtool_Koxt_vMi 2 4 this 3 1912  1 n 1 1779  
698 14 Dtool_KoxtqdPA 7 690 1859 1275 14 Dtool_KoxtqdPA 2 4 this 3 1912  1 n 1 1779  
699 14 Dtool_KoxtEzrP 6 691 1777 0 14 Dtool_KoxtEzrP 2 4 this 3 1912  1 n 1 1779  
700 14 Dtool_KoxtWkMr 6 692 1781 0 14 Dtool_KoxtWkMr 2 4 this 3 1912  1 n 1 1779  
701 14 Dtool_Koxt0z2G 4 693 1785 0 14 Dtool_Koxt0z2G 1 4 this 3 1872  
702 14 Dtool_Koxtwqaa 7 695 1915 1542 14 Dtool_Koxtwqaa 0 
703 14 Dtool_Koxt9Q56 6 697 1778 0 14 Dtool_Koxt9Q56 2 4 this 3 1915  14 multifile_name 1 1811  
704 14 Dtool_KoxtfyBJ 6 698 1778 0 14 Dtool_KoxtfyBJ 2 4 this 3 1915  14 multifile_name 1 1811  
705 14 Dtool_KoxtIEQv 6 699 1778 0 14 Dtool_KoxtIEQv 2 4 this 3 1915  14 multifile_name 1 1811  
706 14 Dtool_KoxtMa18 4 700 1785 0 14 Dtool_KoxtMa18 1 4 this 3 1915  
707 14 Dtool_Koxtit0K 6 701 1811 0 14 Dtool_Koxtit0K 1 4 this 3 1916  
708 14 Dtool_KoxtbS6p 6 702 1778 0 14 Dtool_KoxtbS6p 1 4 this 3 1916  
709 14 Dtool_KoxtpFGO 6 703 1778 0 14 Dtool_KoxtpFGO 1 4 this 3 1916  
710 14 Dtool_Koxt0bT4 6 704 1778 0 14 Dtool_Koxt0bT4 1 4 this 3 1916  
711 14 Dtool_Koxt2jcN 4 705 1785 0 14 Dtool_Koxt2jcN 2 4 this 3 1915  12 scale_factor 1 1815  
712 14 Dtool_KoxtWN1X 6 706 1815 0 14 Dtool_KoxtWN1X 1 4 this 3 1916  
713 14 Dtool_Koxta6QQ 4 707 1785 0 14 Dtool_Koxta6QQ 2 4 this 3 1915  4 flag 1 1778  
714 14 Dtool_KoxtDazL 6 708 1778 0 14 Dtool_KoxtDazL 1 4 this 3 1916  
715 14 Dtool_Koxt7mjs 4 709 1785 0 14 Dtool_Koxt7mjs 2 4 this 3 1915  8 password 1 1777  
716 14 Dtool_KoxtSjUj 6 710 1777 0 14 Dtool_KoxtSjUj 1 4 this 3 1916  
717 14 Dtool_KoxtDhxy 6 711 1777 0 14 Dtool_KoxtDhxy 4 4 this 3 1915  12 subfile_name 1 1777  8 filename 1 1811  17 compression_level 1 1779  
718 14 Dtool_Koxtz3H7 6 712 1777 0 14 Dtool_Koxtz3H7 4 4 this 3 1915  12 subfile_name 1 1777  8 filename 1 1811  17 compression_level 1 1779  
719 14 Dtool_Koxt7cnZ 6 713 1778 0 14 Dtool_Koxt7cnZ 1 4 this 3 1915  
720 14 Dtool_KoxthLqr 6 714 1778 0 14 Dtool_KoxthLqr 1 4 this 3 1915  
721 14 Dtool_KoxtCa0B 6 715 1779 0 14 Dtool_KoxtCa0B 1 4 this 3 1916  
722 14 Dtool_KoxtAvHU 6 716 1779 0 14 Dtool_KoxtAvHU 2 4 this 3 1916  12 subfile_name 1 1777  
723 14 Dtool_Koxt_fnT 6 717 1778 0 14 Dtool_Koxt_fnT 2 4 this 3 1916  12 subfile_name 1 1777  
724 14 Dtool_KoxtC9bD 6 718 1778 0 14 Dtool_KoxtC9bD 3 4 this 3 1916  8 contents 1 1838  12 subfile_name 1 1777  
725 14 Dtool_KoxtyAb8 4 719 1785 0 14 Dtool_KoxtyAb8 2 4 this 3 1915  5 index 1 1779  
726 14 Dtool_KoxtUz_f 6 720 1777 0 14 Dtool_KoxtUz_f 2 4 this 3 1916  5 index 1 1779  
727 14 Dtool_KoxteCrf 6 721 1815 0 14 Dtool_KoxteCrf 2 4 this 3 1916  5 index 1 1779  
728 14 Dtool_KoxtYA9O 6 722 1778 0 14 Dtool_KoxtYA9O 2 4 this 3 1916  5 index 1 1779  
729 14 Dtool_KoxtlEUv 6 723 1778 0 14 Dtool_KoxtlEUv 2 4 this 3 1916  5 index 1 1779  
730 14 Dtool_KoxtqvJ_ 6 724 1815 0 14 Dtool_KoxtqvJ_ 2 4 this 3 1916  5 index 1 1779  
731 14 Dtool_KoxtNjWf 6 725 1777 0 14 Dtool_KoxtNjWf 2 4 this 3 1915  5 index 1 1779  
732 14 Dtool_KoxtGXxf 6 726 1786 0 14 Dtool_KoxtGXxf 2 4 this 3 1915  5 index 1 1779  
733 14 Dtool_KoxtxPcf 6 727 1778 0 14 Dtool_KoxtxPcf 3 4 this 3 1915  5 index 1 1779  8 filename 1 1811  
734 14 Dtool_Koxt0DCF 6 728 1778 0 14 Dtool_Koxt0DCF 3 4 this 3 1915  5 index 1 1779  8 filename 1 1811  
735 14 Dtool_KoxtHX_Y 4 729 1785 0 14 Dtool_KoxtHX_Y 2 4 this 3 1916  3 out 1 1793  
736 14 Dtool_Koxt_Zzn 4 730 1785 0 14 Dtool_Koxt_Zzn 2 4 this 3 1916  3 out 1 1793  
737 14 Dtool_KoxthACw 4 730 1785 0 14 Dtool_KoxthACw 1 4 this 3 1916  
738 14 Dtool_KoxtxaR_ 7 732 1920 1585 14 Dtool_KoxtxaR_ 1 4 copy 1 1918  
739 14 Dtool_KoxtZXC2 7 732 1920 1585 14 Dtool_KoxtZXC2 1 12 initial_name 1 1777  
740 14 Dtool_KoxtAFnx 7 732 1920 1585 14 Dtool_KoxtAFnx 0 
741 14 Dtool_Koxtp1bI 6 733 1920 0 14 Dtool_Koxtp1bI 2 4 this 3 1920  5 other 1 1918  
742 14 Dtool_KoxtLNBW 4 734 1785 0 14 Dtool_KoxtLNBW 2 4 this 3 1920  4 name 1 1777  
743 14 Dtool_KoxtZvUl 4 735 1785 0 14 Dtool_KoxtZvUl 1 4 this 3 1920  
744 14 Dtool_KoxtYjhC 6 736 1778 0 14 Dtool_KoxtYjhC 1 4 this 3 1918  
745 14 Dtool_KoxtfARN 6 737 1777 0 14 Dtool_KoxtfARN 1 4 this 3 1918  
746 14 Dtool_Koxtoz7q 4 738 1785 0 14 Dtool_Koxtoz7q 2 4 this 3 1918  3 out 1 1793  
747 14 Dtool_Koxt_mnx 7 739 1859 1275 14 Dtool_Koxt_mnx 0 
748 14 Dtool_KoxtYIfo 7 743 1921 1588 14 Dtool_KoxtYIfo 0 
749 14 Dtool_Koxthsa6 7 743 1921 1588 14 Dtool_Koxthsa6 1 6 buffer 1 1922  
750 14 Dtool_KoxtH5YG 6 745 1778 0 14 Dtool_KoxtH5YG 4 4 this 3 1921  9 file_orig 1 1817  8 file_new 1 1817  10 patch_name 1 1817  
751 14 Dtool_KoxtDEDi 6 746 1779 0 14 Dtool_KoxtDEDi 2 4 this 3 1921  10 patch_file 1 1811  
752 14 Dtool_KoxtatBi 6 747 1779 0 14 Dtool_KoxtatBi 3 4 this 3 1921  10 patch_file 1 1811  4 file 1 1811  
753 14 Dtool_KoxtAkYw 6 748 1779 0 14 Dtool_KoxtAkYw 1 4 this 3 1921  
754 14 Dtool_KoxtrMgQ 6 749 1778 0 14 Dtool_KoxtrMgQ 3 4 this 3 1921  10 patch_file 1 1817  4 file 1 1817  
755 14 Dtool_KoxtKJeX 6 750 1780 0 14 Dtool_KoxtKJeX 1 4 this 3 1923  
756 14 Dtool_Koxtbc1x 4 751 1785 0 14 Dtool_Koxtbc1x 2 4 this 3 1921  6 length 1 1779  
757 14 Dtool_KoxtAsYn 6 752 1779 0 14 Dtool_KoxtAsYn 1 4 this 3 1921  
758 14 Dtool_KoxtlU88 4 753 1785 0 14 Dtool_KoxtlU88 1 4 this 3 1921  
759 14 Dtool_KoxtMoom 6 754 1778 0 14 Dtool_KoxtMoom 1 4 this 3 1923  
760 14 Dtool_Koxt4eHg 6 755 1910 0 14 Dtool_Koxt4eHg 1 4 this 3 1923  
761 14 Dtool_KoxtmkYw 6 756 1910 0 14 Dtool_KoxtmkYw 1 4 this 3 1923  
762 14 Dtool_KoxtpaeF 6 758 1781 0 14 Dtool_KoxtpaeF 1 4 this 3 1925  
763 14 Dtool_KoxtzmNC 6 759 1781 0 14 Dtool_KoxtzmNC 1 4 this 3 1925  
764 14 Dtool_Koxtvd5Y 6 760 1779 0 14 Dtool_Koxtvd5Y 1 4 this 3 1926  
765 14 Dtool_KoxtWw9n 6 761 1925 0 14 Dtool_KoxtWw9n 0 
766 14 Dtool_KoxtvclK 7 763 1930 1606 14 Dtool_KoxtvclK 1 5 other 1 1928  
767 14 Dtool_KoxtCJKJ 7 763 1930 1606 14 Dtool_KoxtCJKJ 2 4 name 1 1777  10 maxEntries 1 1779  
768 14 Dtool_Koxt1b5J 7 763 1930 1606 14 Dtool_Koxt1b5J 1 4 name 1 1777  
769 14 Dtool_Koxtyvu0 7 763 1930 1606 14 Dtool_Koxtyvu0 0 
770 14 Dtool_Koxt98tX 4 765 1785 0 14 Dtool_Koxt98tX 3 4 this 3 1930  4 name 1 1777  10 maxEntries 1 1779  
771 14 Dtool_Koxti6RM 4 765 1785 0 14 Dtool_Koxti6RM 2 4 this 3 1930  4 name 1 1777  
772 14 Dtool_Koxt8f04 4 766 1785 0 14 Dtool_Koxt8f04 1 4 this 3 1930  
773 14 Dtool_KoxtZpR4 4 767 1785 0 14 Dtool_KoxtZpR4 2 4 this 3 1930  3 tag 1 1777  
774 14 Dtool_Koxt5qDp 4 768 1785 0 14 Dtool_Koxt5qDp 1 4 this 3 1930  
775 14 Dtool_Koxtez0S 4 768 1785 0 14 Dtool_Koxtez0S 2 4 this 3 1930  3 tag 1 1777  
776 14 Dtool_KoxtQ1Vu 6 769 1781 0 14 Dtool_KoxtQ1Vu 1 4 this 3 1928  
777 14 Dtool_Koxtr9_x 4 770 1785 0 14 Dtool_Koxtr9_x 1 3 out 1 1793  
778 14 Dtool_KoxtQiNX 4 770 1785 0 14 Dtool_KoxtQiNX 0 
779 14 Dtool_KoxtLAMQ 4 771 1785 0 14 Dtool_KoxtLAMQ 2 4 this 3 1928  3 out 1 1793  
780 14 Dtool_KoxtENRS 4 771 1785 0 14 Dtool_KoxtENRS 1 4 this 3 1928  
781 14 Dtool_Koxt0a5y 4 772 1785 0 14 Dtool_Koxt0a5y 1 3 out 1 1793  
782 14 Dtool_Koxtupg_ 4 772 1785 0 14 Dtool_Koxtupg_ 0 
783 14 Dtool_KoxtUUXZ 4 773 1785 0 14 Dtool_KoxtUUXZ 2 4 this 3 1928  3 out 1 1793  
784 14 Dtool_KoxtBgcv 4 773 1785 0 14 Dtool_KoxtBgcv 1 4 this 3 1928  
785 14 Dtool_Koxtfza9 7 776 1931 1654 14 Dtool_Koxtfza9 0 
786 14 Dtool_KoxtrlQJ 4 777 1785 0 14 Dtool_KoxtrlQJ 2 4 this 3 1931  8 encoding 1 1766  
787 14 Dtool_KoxtMWo7 6 778 1766 0 14 Dtool_KoxtMWo7 1 4 this 3 1932  
788 14 Dtool_KoxtFCJv 4 779 1785 0 14 Dtool_KoxtFCJv 1 8 encoding 1 1766  
789 14 Dtool_KoxtroPl 6 780 1766 0 14 Dtool_KoxtroPl 0 
790 14 Dtool_KoxtNXzC 4 781 1785 0 14 Dtool_KoxtNXzC 2 4 this 3 1931  4 text 1 1777  
791 14 Dtool_Koxt5aXk 4 781 1785 0 14 Dtool_Koxt5aXk 3 4 this 3 1931  4 text 1 1777  8 encoding 1 1766  
792 14 Dtool_Koxtz_D5 4 782 1785 0 14 Dtool_Koxtz_D5 1 4 this 3 1931  
793 14 Dtool_Koxt97oh 6 783 1778 0 14 Dtool_Koxt97oh 1 4 this 3 1932  
794 14 Dtool_KoxtqMP7 4 784 1785 0 14 Dtool_KoxtqMP7 1 4 this 3 1931  
795 14 Dtool_KoxtT0Ve 4 785 1785 0 14 Dtool_KoxtT0Ve 1 4 this 3 1931  
796 14 Dtool_Koxtp9Te 6 786 1777 0 14 Dtool_Koxtp9Te 1 4 this 3 1932  
797 14 Dtool_KoxtJTNv 6 786 1777 0 14 Dtool_KoxtJTNv 2 4 this 3 1932  8 encoding 1 1766  
798 14 Dtool_Koxt2ChQ 4 787 1785 0 14 Dtool_Koxt2ChQ 2 4 this 3 1931  4 text 1 1777  
799 14 Dtool_KoxtoBY2 4 788 1785 0 14 Dtool_KoxtoBY2 2 4 this 3 1931  9 character 1 1779  
800 14 Dtool_Koxt5x3n 6 789 1779 0 14 Dtool_Koxt5x3n 1 4 this 3 1932  
801 14 Dtool_KoxtjULv 6 790 1779 0 14 Dtool_KoxtjULv 2 4 this 3 1932  5 index 1 1779  
802 14 Dtool_KoxtSkrk 4 791 1785 0 14 Dtool_KoxtSkrk 3 4 this 3 1931  5 index 1 1779  9 character 1 1779  
803 14 Dtool_KoxtIGUu 6 792 1777 0 14 Dtool_KoxtIGUu 2 4 this 3 1932  5 index 1 1779  
804 14 Dtool_KoxtJIi_ 6 792 1777 0 14 Dtool_KoxtJIi_ 3 4 this 3 1932  5 index 1 1779  8 encoding 1 1766  
805 14 Dtool_KoxtzcrI 6 793 1777 0 14 Dtool_KoxtzcrI 1 4 this 3 1932  
806 14 Dtool_KoxtT63X 6 794 1777 0 14 Dtool_KoxtT63X 3 4 text 1 1777  4 from 1 1766  2 to 1 1766  
807 14 Dtool_Koxtojqf 6 795 1778 0 14 Dtool_Koxtojqf 1 9 character 1 1779  
808 14 Dtool_KoxtvaR4 6 796 1778 0 14 Dtool_KoxtvaR4 1 9 character 1 1779  
809 14 Dtool_KoxtIDmv 6 797 1778 0 14 Dtool_KoxtIDmv 1 9 character 1 1779  
810 14 Dtool_KoxtX0SC 6 798 1778 0 14 Dtool_KoxtX0SC 1 9 character 1 1779  
811 14 Dtool_KoxtrvC8 6 799 1778 0 14 Dtool_KoxtrvC8 1 9 character 1 1779  
812 14 Dtool_KoxtzKc0 6 800 1778 0 14 Dtool_KoxtzKc0 1 9 character 1 1779  
813 14 Dtool_Koxt0HrF 6 801 1779 0 14 Dtool_Koxt0HrF 1 9 character 1 1779  
814 14 Dtool_KoxtFs8L 6 802 1779 0 14 Dtool_KoxtFs8L 1 9 character 1 1779  
815 14 Dtool_Koxts0pk 6 803 1777 0 14 Dtool_Koxts0pk 1 6 source 1 1777  
816 14 Dtool_Koxtxe6q 6 803 1777 0 14 Dtool_Koxtxe6q 2 6 source 1 1777  8 encoding 1 1766  
817 14 Dtool_KoxtiTMW 6 804 1777 0 14 Dtool_KoxtiTMW 1 6 source 1 1777  
818 14 Dtool_Koxt9Pec 6 804 1777 0 14 Dtool_Koxt9Pec 2 6 source 1 1777  8 encoding 1 1766  
819 14 Dtool_KoxtmA0p 4 805 1785 0 14 Dtool_KoxtmA0p 2 4 this 3 1931  5 wtext 1 1777  
820 14 Dtool_Koxt1Bjn 6 806 1777 0 14 Dtool_Koxt1Bjn 1 4 this 3 1932  
821 14 Dtool_KoxtiCsX 4 807 1785 0 14 Dtool_KoxtiCsX 2 4 this 3 1931  4 text 1 1777  
822 14 Dtool_KoxtD9G1 6 808 1777 0 14 Dtool_KoxtD9G1 1 4 this 3 1932  
823 14 Dtool_KoxteSU3 6 809 1778 0 14 Dtool_KoxteSU3 1 4 this 3 1932  
824 14 Dtool_KoxtL6gl 6 810 1777 0 14 Dtool_KoxtL6gl 2 2 ch 1 1934  8 encoding 1 1766  
825 14 Dtool_KoxtDN1f 6 811 1777 0 14 Dtool_KoxtDN1f 2 4 this 3 1932  5 wtext 1 1777  
826 14 Dtool_Koxtk4q6 6 811 1777 0 14 Dtool_Koxtk4q6 2 5 wtext 1 1777  8 encoding 1 1766  
827 14 Dtool_Koxtw6DP 6 812 1777 0 14 Dtool_Koxtw6DP 2 4 this 3 1932  4 text 1 1777  
828 14 Dtool_Koxt5DE9 6 812 1777 0 14 Dtool_Koxt5DE9 2 4 text 1 1777  8 encoding 1 1766  
829 14 Dtool_KoxtnTj2 7 813 1859 1275 14 Dtool_KoxtnTj2 0 
830 14 Dtool_KoxtWE3r 7 820 1859 1275 14 Dtool_KoxtWE3r 0 
831 14 Dtool_KoxtJ7TI 6 816 1862 0 14 Dtool_KoxtJ7TI 1 4 this 3 1935  
832 14 Dtool_Koxt3_Dr 7 817 1935 1660 14 Dtool_Koxt3_Dr 1 4 this 3 1862  
833 14 Dtool_KoxtKE8f 6 818 1914 0 14 Dtool_KoxtKE8f 1 4 this 3 1935  
834 14 Dtool_KoxtsWXj 7 819 1935 1660 14 Dtool_KoxtsWXj 1 4 this 3 1914  
835 14 Dtool_KoxtWaEw 6 823 1938 0 14 Dtool_KoxtWaEw 1 4 this 3 1936  
836 14 Dtool_Koxt7aYo 7 824 1817 1114 14 Dtool_Koxt7aYo 1 4 this 3 1936  
837 14 Dtool_KoxtI9XN 6 825 1811 0 14 Dtool_KoxtI9XN 1 4 this 3 1936  
838 14 Dtool_Koxt3gtu 6 826 1778 0 14 Dtool_Koxt3gtu 1 4 this 3 1936  
839 14 Dtool_KoxtxCeS 6 827 1778 0 14 Dtool_KoxtxCeS 1 4 this 3 1936  
840 14 Dtool_Koxt4egf 7 828 1939 1678 14 Dtool_Koxt4egf 1 4 this 3 1936  
841 14 Dtool_KoxtJKgU 4 829 1785 0 14 Dtool_KoxtJKgU 2 4 this 3 1936  3 out 1 1793  
842 14 Dtool_KoxtkWDV 4 830 1785 0 14 Dtool_KoxtkWDV 2 4 this 3 1936  3 out 1 1793  
843 14 Dtool_Koxt42an 4 830 1785 0 14 Dtool_Koxt42an 1 4 this 3 1936  
844 14 Dtool_KoxtlJmn 4 831 1785 0 14 Dtool_KoxtlJmn 2 4 this 3 1936  3 out 1 1793  
845 14 Dtool_Koxt_9x0 4 831 1785 0 14 Dtool_Koxt_9x0 1 4 this 3 1936  
846 14 Dtool_Koxt6zyQ 6 832 1777 0 14 Dtool_Koxt6zyQ 2 4 this 3 1936  11 auto_unwrap 1 1778  
847 14 Dtool_Koxt_qft 6 833 1786 0 14 Dtool_Koxt_qft 2 4 this 3 1936  11 auto_unwrap 1 1778  
848 14 Dtool_KoxtUTlQ 4 834 1785 0 14 Dtool_KoxtUTlQ 2 4 this 3 1936  6 stream 1 1786  
849 14 Dtool_KoxtklGA 6 835 1779 0 14 Dtool_KoxtklGA 2 4 this 3 1936  6 stream 1 1786  
850 14 Dtool_Koxt1f88 7 836 1859 1275 14 Dtool_Koxt1f88 0 
851 14 Dtool_KoxtghyY 7 839 1859 1275 14 Dtool_KoxtghyY 0 
852 14 Dtool_KoxtqGsI 6 843 1779 0 14 Dtool_KoxtqGsI 1 4 this 3 1940  
853 14 Dtool_Koxt2Wno 7 844 1942 1675 14 Dtool_Koxt2Wno 2 4 this 3 1940  1 n 1 1779  
854 14 Dtool_KoxttrqK 7 846 1859 1275 14 Dtool_KoxttrqK 0 
855 14 Dtool_KoxtEd6o 7 849 1938 1684 14 Dtool_KoxtEd6o 0 
856 14 Dtool_KoxtdT4R 6 852 1778 0 14 Dtool_KoxtdT4R 5 4 this 3 1938  17 physical_filename 1 1811  11 mount_point 1 1777  5 flags 1 1779  8 password 1 1777  
857 14 Dtool_Koxt0Y1P 6 852 1778 0 14 Dtool_Koxt0Y1P 4 4 this 3 1938  17 physical_filename 1 1811  11 mount_point 1 1777  5 flags 1 1779  
858 14 Dtool_KoxtfQsl 6 852 1778 0 14 Dtool_KoxtfQsl 4 4 this 3 1938  9 multifile 1 1915  11 mount_point 1 1777  5 flags 1 1779  
859 14 Dtool_Koxt_kpP 6 853 1779 0 14 Dtool_Koxt_kpP 2 4 this 3 1938  17 physical_filename 1 1811  
860 14 Dtool_Koxty9Qn 6 853 1779 0 14 Dtool_Koxty9Qn 2 4 this 3 1938  9 multifile 1 1915  
861 14 Dtool_KoxtgppP 6 854 1779 0 14 Dtool_KoxtgppP 2 4 this 3 1938  11 mount_point 1 1777  
862 14 Dtool_KoxtatSe 6 855 1779 0 14 Dtool_KoxtatSe 1 4 this 3 1938  
863 14 Dtool_Koxt9T4X 6 856 1778 0 14 Dtool_Koxt9T4X 2 4 this 3 1938  13 new_directory 1 1777  
864 14 Dtool_KoxtDRrG 6 857 1811 0 14 Dtool_KoxtDRrG 1 4 this 3 1943  
865 14 Dtool_Koxty3zk 7 858 1942 1675 14 Dtool_Koxty3zk 2 4 this 3 1943  8 filename 1 1811  
866 14 Dtool_Koxt9oz3 7 859 1942 1675 14 Dtool_Koxt9oz3 3 4 this 3 1943  8 filename 1 1811  10 searchpath 1 1830  
867 14 Dtool_KoxtgtIn 6 860 1778 0 14 Dtool_KoxtgtIn 4 4 this 3 1943  8 filename 1 1817  10 searchpath 1 1830  17 default_extension 1 1777  
868 14 Dtool_KoxtqRwJ 6 860 1778 0 14 Dtool_KoxtqRwJ 3 4 this 3 1943  8 filename 1 1817  10 searchpath 1 1830  
869 14 Dtool_Koxtvy79 6 861 1779 0 14 Dtool_Koxtvy79 4 4 this 3 1943  8 filename 1 1811  10 searchpath 1 1830  7 results 1 1832  
870 14 Dtool_KoxtFDjI 6 862 1778 0 14 Dtool_KoxtFDjI 2 4 this 3 1943  8 filename 1 1811  
871 14 Dtool_KoxtpcNJ 6 863 1778 0 14 Dtool_KoxtpcNJ 2 4 this 3 1943  8 filename 1 1811  
872 14 Dtool_KoxtkO_z 6 864 1778 0 14 Dtool_KoxtkO_z 2 4 this 3 1943  8 filename 1 1811  
873 14 Dtool_Koxt4Fxl 4 865 1785 0 14 Dtool_Koxt4Fxl 2 4 this 3 1943  8 filename 1 1777  
874 14 Dtool_KoxtIQxJ 4 866 1785 0 14 Dtool_KoxtIQxJ 2 4 this 3 1943  8 filename 1 1777  
875 14 Dtool_KoxtGxed 4 867 1785 0 14 Dtool_KoxtGxed 2 4 this 3 1943  3 out 1 1793  
876 14 Dtool_Koxt_zcf 6 868 1938 0 14 Dtool_Koxt_zcf 0 
877 14 Dtool_KoxtONnn 6 869 1777 0 14 Dtool_KoxtONnn 3 4 this 3 1943  8 filename 1 1811  11 auto_unwrap 1 1778  
878 14 Dtool_KoxtcxPd 6 870 1786 0 14 Dtool_KoxtcxPd 3 4 this 3 1943  8 filename 1 1811  11 auto_unwrap 1 1778  
879 14 Dtool_Koxt1PwT 4 871 1785 0 14 Dtool_Koxt1PwT 2 4 this 3 1943  6 stream 1 1786  
880 14 Dtool_Koxt51lz 6 873 1778 0 14 Dtool_Koxt51lz 1 4 this 3 1945  
881 14 Dtool_KoxtEthC 6 874 1778 0 14 Dtool_KoxtEthC 1 4 this 3 1945  
882 14 Dtool_Koxt02db 6 876 1778 0 14 Dtool_Koxt02db 3 3 key 1 1777  4 name 1 1777  5 value 1 1777  
883 14 Dtool_KoxtB50d 6 877 1778 0 14 Dtool_KoxtB50d 3 3 key 1 1777  4 name 1 1777  5 value 1 1779  
884 14 Dtool_KoxtLoxx 6 879 1776 0 14 Dtool_KoxtLoxx 2 3 key 1 1777  4 name 1 1777  
885 14 Dtool_KoxtR21I 6 880 1777 0 14 Dtool_KoxtR21I 3 3 key 1 1777  4 name 1 1777  13 default_value 1 1777  
886 14 Dtool_Koxtk5ML 6 881 1779 0 14 Dtool_Koxtk5ML 3 3 key 1 1777  4 name 1 1777  13 default_value 1 1779  
887 14 Dtool_Koxt_Q2z 6 467 1947 0 14 Dtool_Koxt_Q2z 0 
888 14 Dtool_KoxtiH_H 6 578 1777 0 14 Dtool_KoxtiH_H 2 6 source 1 1777  8 password 1 1777  
889 14 Dtool_KoxtJ1fC 6 579 1777 0 14 Dtool_KoxtJ1fC 2 6 source 1 1777  8 password 1 1777  
890 14 Dtool_Koxts1c1 6 581 1777 0 14 Dtool_Koxts1c1 1 3 err 1 1754  
891 14 Dtool_Koxtp_jp 6 582 1779 0 14 Dtool_Koxtp_jp 0 
892 14 Dtool_Koxtyg1b 6 583 1777 0 14 Dtool_Koxtyg1b 0 
893 14 Dtool_Koxt_VSF 6 584 1779 0 14 Dtool_Koxt_VSF 0 
894 14 Dtool_KoxtG9V_ 6 741 1777 0 14 Dtool_KoxtG9V_ 4 8 password 1 1777  4 salt 1 1777  5 iters 1 1779  6 keylen 1 1779  
236
1713 13 ConfigExpress 26625 21 Config::ConfigExpress 51 Config::Config< ConfigureGetConfig_config_express > 0 0 0 0 895 0 5 896 897 898 899 900 0 0 0 0 0

1714 11 ConfigFlags 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 0 901 0 0 0 0 0 2 1715 1716 414
////////////////////////////////////////////////////////////////////
//       Class : ConfigFlags
// Description : This class is the base class of both ConfigVariable
//               and ConfigVariableCore.  It exists only to provide a
//               convenient name scoping for some enumerated values
//               common to both classes.
////////////////////////////////////////////////////////////////////

1715 9 ValueType 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 1714 0 0 0 0 0 0 0 0 9 12 VT_undefined 25 ConfigFlags::VT_undefined 0 7 VT_list 20 ConfigFlags::VT_list 1 9 VT_string 22 ConfigFlags::VT_string 2 11 VT_filename 24 ConfigFlags::VT_filename 3 7 VT_bool 20 ConfigFlags::VT_bool 4 6 VT_int 19 ConfigFlags::VT_int 5 9 VT_double 22 ConfigFlags::VT_double 6 7 VT_enum 20 ConfigFlags::VT_enum 7 14 VT_search_path 27 ConfigFlags::VT_search_path 8 0 0

1716 13 VariableFlags 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 1714 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 4095 6 F_open 19 ConfigFlags::F_open 4096 8 F_closed 21 ConfigFlags::F_closed 8192 9 F_dynamic 22 ConfigFlags::F_dynamic 16384 9 F_dconfig 22 ConfigFlags::F_dconfig 32768 0 0

1717 10 ConfigPage 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 19 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

1718 17 ConfigPageManager 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 17 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 0 1 0 1714 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : ConfigPageManager
// Description : A global object that maintains the set of ConfigPages
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

1719 14 ConfigVariable 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 950 951 0 16 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 0 1 0 1720 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

1720 18 ConfigVariableBase 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 0 12 938 939 940 941 942 943 944 945 946 947 948 949 0 1 0 1714 0 0 0 0 698
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBase
// Description : This class is the base class for both
//               ConfigVariableList and ConfigVariable (and hence for
//               all of the ConfigVariableBool, ConfigVaribleString,
//               etc. classes).  It collects together the common
//               interface for all generic ConfigVariables.
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

1721 18 ConfigVariableBool 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 968 978 0 8 969 971 972 973 974 975 976 977 1 970 1 0 1719 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBool
// Description : This is a convenience class to specialize
//               ConfigVariable as a boolean type.
////////////////////////////////////////////////////////////////////

1722 20 ConfigVariableDouble 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 979 989 0 8 980 982 983 984 985 986 987 988 1 981 1 0 1719 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableDouble
// Description : This is a convenience class to specialize
//               ConfigVariable as a floating-point type.
////////////////////////////////////////////////////////////////////

1723 22 ConfigVariableFilename 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 990 1011 0 19 991 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1 992 1 0 1719 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableFilename
// Description : This is a convenience class to specialize
//               ConfigVariable as a Filename type.  It is almost the
//               same thing as ConfigVariableString, except it handles
//               an implicit Filename::expand_from() operation so that
//               the user may put OS-specific filenames, or filenames
//               based on environment variables, in the prc file.
////////////////////////////////////////////////////////////////////

1724 17 ConfigVariableInt 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1012 1022 0 8 1013 1015 1016 1017 1018 1019 1020 1021 1 1014 1 0 1719 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt
// Description : This is a convenience class to specialize
//               ConfigVariable as an integer type.
////////////////////////////////////////////////////////////////////

1725 18 ConfigVariableList 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1023 1024 0 8 1025 1026 1027 1028 1029 1030 1031 1032 0 1 0 1720 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableList
// Description : This class is similar to ConfigVariable, but it
//               reports its value as a list of strings.  In this
//               special case, all of the declarations of the variable
//               are returned as the elements of this list, in order.
//
//               Note that this is different from a normal
//               ConfigVariableString, which just returns its topmost
//               value, which can optionally be treated as a number of
//               discrete words by dividing it at the spaces.
//
//               A ConfigVariableList cannot be modified locally.
////////////////////////////////////////////////////////////////////

1726 21 ConfigVariableManager 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 0 13 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 0 0 0 0 391
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableManager
// Description : A global object that maintains the set of
//               ConfigVariables (actually, ConfigVariableCores)
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

1727 24 ConfigVariableSearchPath 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1046 1047 0 14 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1 1048 1 0 1720 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

1728 20 ConfigVariableString 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1063 1078 0 13 1064 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1 1065 1 0 1719 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableString
// Description : This is a convenience class to specialize
//               ConfigVariable as a string type.
////////////////////////////////////////////////////////////////////

1729 11 DSearchPath 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1085 1087 0 14 1086 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 0 0 0 1 1730 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

1730 7 Results 288769 20 DSearchPath::Results 20 DSearchPath::Results 1729 0 0 1 1079 1081 0 4 1080 1082 1083 1084 0 0 0 0 0

1731 20 ExecutionEnvironment 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 0 1112 0 11 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 0 0 0 0 475
////////////////////////////////////////////////////////////////////
//       Class : ExecutionEnvironment
// Description : Encapsulates access to the environment variables and
//               command-line arguments at the time of execution.
//               This is encapsulated to support accessing these
//               things during static init time, which seems to be
//               risky at best.
////////////////////////////////////////////////////////////////////

1732 8 Filename 26625 8 Filename 8 Filename 0 0 0 1 1113 1114 0 69 1115 1116 1117 1118 1119 1120 1121 1122 1123 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1 1124 0 0 1 1733 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1733 4 Type 794624 14 Filename::Type 14 Filename::Type 1732 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 0 5 T_dso 15 Filename::T_dso 1 12 T_executable 22 Filename::T_executable 2 0 0

1734 11 GlobPattern 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1185 1198 0 12 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

1735 6 Notify 26625 6 Notify 6 Notify 0 0 0 1 1199 1200 0 15 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 0 0 0 0 833
////////////////////////////////////////////////////////////////////
//       Class : Notify
// Description : An object that handles general error reporting to the
//               user.  It contains a pointer to an ostream, initially
//               cerr, which can be reset at will to point to
//               different output devices, according to the needs of
//               the application.  All output generated within Panda
//               should vector through the Notify ostream.
//
//               This also includes a collection of Categories and
//               Severities, which may be independently enabled or
//               disabled, so that error messages may be squelched or
//               respected according to the wishes of the user.
////////////////////////////////////////////////////////////////////

1736 14 NotifyCategory 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 0 1237 0 21 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 0 1 0 1714 0 0 0 0 536
////////////////////////////////////////////////////////////////////
//       Class : NotifyCategory
// Description : A particular category of error messages.  Typically
//               there will be one of these per package, so that we
//               can turn on or off error messages at least at a
//               package level; further nested categories can be
//               created within a package if a finer grain of control
//               is required.
////////////////////////////////////////////////////////////////////

1737 14 NotifySeverity 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 0 7 NS_spam 7 NS_spam 1 8 NS_debug 8 NS_debug 2 7 NS_info 7 NS_info 3 10 NS_warning 10 NS_warning 4 8 NS_error 8 NS_error 5 8 NS_fatal 8 NS_fatal 6 0 0

1738 11 PandaSystem 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 0 17 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 0 0 0 0 435
////////////////////////////////////////////////////////////////////
//       Class : PandaSystem
// Description : This class is used as a namespace to group several
//               global properties of Panda.  Application developers
//               can use this class to query the runtime version or
//               capabilities of the current Panda environment.
////////////////////////////////////////////////////////////////////

1739 10 TypeHandle 141313 10 TypeHandle 10 TypeHandle 0 0 0 1 1255 1275 0 19 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1740 12 TypeRegistry 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 0 1289 0 13 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : TypeRegistry
// Description : The TypeRegistry class maintains all the assigned
//               TypeHandles in a given system.  There should be only
//               one TypeRegistry class during the lifetime of the
//               application.  It will be created on the local heap
//               initially, and it should be migrated to shared memory
//               as soon as shared memory becomes available.
////////////////////////////////////////////////////////////////////

1741 11 TypedObject 26625 11 TypedObject 11 TypedObject 0 0 0 0 1290 0 6 1291 1292 1293 1294 1295 1296 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

1742 8 iostream 141313 8 iostream 8 iostream 0 0 0 0 1307 0 1 1306 0 2 3 1743 1299 1300 3 1744 1304 1305 0 0 0

1743 7 istream 141313 7 istream 7 istream 0 0 0 0 1298 0 1 1297 0 0 0 0 0

1744 7 ostream 141313 7 ostream 7 ostream 0 0 0 0 1303 0 2 1301 1302 0 0 0 0 0

1745 11 MemoryUsage 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 0 1327 0 19 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 0 0 0 0 539
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsage
// Description : This class is used strictly for debugging purposes,
//               specifically for tracking memory leaks of
//               reference-counted objects: it keeps a record of every
//               such object currently allocated.
//
//               When compiled with NDEBUG set, this entire class does
//               nothing and compiles to nothing.
////////////////////////////////////////////////////////////////////

1746 14 ReferenceCount 43009 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 5 1329 1330 1331 1332 1333 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1747 6 Buffer 26625 6 Buffer 6 Buffer 0 0 0 0 1334 0 1 1335 0 1 0 1746 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

1748 13 PointerToVoid 43009 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 2 1336 1337 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1749 9 PTA_uchar 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 1340 1348 0 7 1341 1342 1343 1344 1345 1346 1347 0 1 0 1750 0 0 0 0 0

1750 55 PointerToBase< RefCountObj< vector< unsigned char > > > 43009 55 PointerToBase< RefCountObj< vector< unsigned char > > > 55 PointerToBase< RefCountObj< vector< unsigned char > > > 0 0 0 0 0 0 2 1338 1339 0 1 0 1748 0 0 0 0 0

1751 10 CPTA_uchar 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1349 1352 0 2 1350 1351 0 1 0 1750 0 0 0 0 0

1752 8 Datagram 75777 8 Datagram 8 Datagram 0 0 0 1 1353 1290 0 42 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 0 1 0 1741 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

1753 16 DatagramIterator 26625 16 DatagramIterator 16 DatagramIterator 0 0 0 1 1396 1398 0 33 1397 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

1754 13 ErrorUtilCode 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 7 6 EU_eof 6 EU_eof 6 18 EU_network_no_data 18 EU_network_no_data 5 12 EU_write_ram 12 EU_write_ram 4 8 EU_write 8 EU_write 3 5 EU_ok 5 EU_ok 2 10 EU_success 10 EU_success 1 14 EU_error_abort 14 EU_error_abort -1 19 EU_error_file_empty 19 EU_error_file_empty -2 21 EU_error_file_invalid 21 EU_error_file_invalid -3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum -4 21 EU_error_network_dead 21 EU_error_network_dead -30 28 EU_error_network_unreachable 28 EU_error_network_unreachable -31 29 EU_error_network_disconnected 29 EU_error_network_disconnected -32 24 EU_error_network_timeout 24 EU_error_network_timeout -33 24 EU_error_network_no_data 24 EU_error_network_no_data -34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally -40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow -41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded -42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected -50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down -51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable -52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found -53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response -54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files -60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory -61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation -62 24 EU_error_write_disk_full 24 EU_error_write_disk_full -63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found -64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found -65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault -66 26 EU_error_write_file_rename 26 EU_error_write_file_rename -67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout -70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout -71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable -72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication -73 13 EU_error_zlib 13 EU_error_zlib -80 0 0

1755 7 Ramfile 141313 7 Ramfile 7 Ramfile 0 0 0 1 1437 1443 0 5 1438 1439 1440 1441 1442 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

1756 12 StreamWriter 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 1444 1446 0 27 1445 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : StreamWriter
// Description : A StreamWriter object is used to write sequential
//               binary data directly to an ostream.  Its interface is
//               very similar to Datagram by design; it's primarily
//               intended as a convenience to eliminate the overhead
//               of writing bytes to a Datagram and then writing the
//               Datagram to a stream.
////////////////////////////////////////////////////////////////////

1757 12 StreamReader 26625 12 StreamReader 12 StreamReader 0 0 0 1 1473 1475 0 28 1474 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : StreamReader
// Description : A class to read sequential binary data directly from
//               an istream.  Its interface is similar to
//               DatagramIterator by design; see also StreamWriter.
////////////////////////////////////////////////////////////////////

1758 7 HashVal 141313 7 HashVal 7 HashVal 0 0 0 1 1503 1531 0 27 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

1759 19 MemoryUsagePointers 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 1532 1533 0 7 1534 1535 1536 1537 1538 1539 1540 0 0 0 0 1190
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsagePointers
// Description : This is a list of pointers returned by a MemoryUsage
//               object in response to some query.
//
//               Warning: once pointers are stored in a
//               MemoryUsagePointers object, they are
//               reference-counted, and will not be freed until the
//               MemoryUsagePointers object is freed (or clear() is
//               called on the object).  However, they may not even be
//               freed then; pointers may leak once they have been
//               added to this structure.  This is because we don't
//               store enough information in this structure to
//               correctly free the pointers that have been added.
//               Since this is intended primarily as a debugging tool,
//               this is not a major issue.
//
//               This class is just a user interface to talk about
//               pointers stored in a MemoryUsage object.  It doesn't
//               even exist when compiled with NDEBUG.
////////////////////////////////////////////////////////////////////

1760 9 Multifile 26625 9 Multifile 9 Multifile 0 0 0 1 1541 1542 0 34 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 0 1 0 1746 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : Multifile
// Description : A file that contains a set of files.
////////////////////////////////////////////////////////////////////

1761 7 Namable 141313 7 Namable 7 Namable 0 0 0 1 1577 1585 0 7 1578 1579 1580 1581 1582 1583 1584 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1762 9 Patchfile 26625 9 Patchfile 9 Patchfile 0 0 0 1 1587 1588 0 12 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : Patchfile
// Description :
////////////////////////////////////////////////////////////////////

1763 9 TrueClock 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 0 4 1601 1602 1603 1604 0 0 0 0 773
////////////////////////////////////////////////////////////////////
//       Class : TrueClock
// Description : An interface to whatever real-time clock we might
//               have available in the current environment.  There is
//               only one TrueClock in existence, and it constructs
//               itself.
//
//               The TrueClock returns elapsed real time in seconds
//               since some undefined epoch.  Since it is not defined
//               at what time precisely the clock indicates zero, this
//               value can only be meaningfully used to measure
//               elapsed time, by sampling it at two different times
//               and subtracting.
////////////////////////////////////////////////////////////////////

1764 12 ProfileTimer 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 1605 1606 0 9 1607 1608 1609 1610 1611 1612 1613 1614 1615 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

1765 11 TextEncoder 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 1616 1654 0 37 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 0 0 0 1 1766 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

1766 8 Encoding 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 1765 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

1767 19 TypedReferenceCount 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 1660 0 1 1659 0 2 3 1741 1655 1656 3 1746 1657 1658 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1768 11 VirtualFile 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 1675 0 14 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 0 1 0 1767 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

1769 20 VirtualFileComposite 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 1677 0 1 1676 0 1 0 1768 0 0 0 0 450
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileComposite
// Description : A composite directory within the VirtualFileSystem:
//               this maps to more than one directory on different
//               mount points.  The resulting directory appears to be
//               the union of all the individual simple directories.
////////////////////////////////////////////////////////////////////

1770 15 VirtualFileList 26625 15 VirtualFileList 15 VirtualFileList 0 0 0 0 1678 0 2 1679 1680 0 1 0 1746 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileList
// Description : A list of VirtualFiles, as returned by 
//               VirtualDirectory::scan().
////////////////////////////////////////////////////////////////////

1771 17 VirtualFileSimple 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 1682 0 1 1681 0 1 0 1768 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSimple
// Description : A simple file or directory within the
//               VirtualFileSystem: this maps to exactly one file on
//               one mount point.  Most directories, and all regular
//               files, are of this kind.
////////////////////////////////////////////////////////////////////

1772 17 VirtualFileSystem 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 1683 1684 0 20 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 0 0 0 1 1773 621
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSystem
// Description : A hierarchy of directories and files that appears to
//               be one continuous file system, even though the files
//               may originate from several different sources that may
//               not be related to the actual OS's file system.
//
//               For instance, a VirtualFileSystem can transparently
//               mount one or more Multifiles as their own
//               subdirectory hierarchies.
////////////////////////////////////////////////////////////////////

1773 10 MountFlags 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 1772 0 0 0 0 0 0 0 0 2 15 MF_owns_pointer 34 VirtualFileSystem::MF_owns_pointer 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 2 0 0

1774 17 WeakPointerToVoid 43009 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 0 0 2 1705 1706 0 1 0 1748 0 0 0 0 362
////////////////////////////////////////////////////////////////////
//       Class : WeakPointerToVoid
// Description : This is the specialization of PointerToVoid for weak
//               pointers.  It needs an additional flag to indicate
//               that the pointer has been deleted.
////////////////////////////////////////////////////////////////////

1775 15 WindowsRegistry 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 0 1712 0 5 1707 1708 1709 1710 1711 0 0 0 1 1776 484
////////////////////////////////////////////////////////////////////
//       Class : WindowsRegistry
// Description : This class provides a hook to Python to read and
//               write strings and integers to the windows registry.
//               It automatically converts strings from utf-8 encoding
//               and stores them in Unicode (and conversely reconverts
//               them on retrieval).
////////////////////////////////////////////////////////////////////

1776 4 Type 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 1775 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0 5 T_int 22 WindowsRegistry::T_int 1 8 T_string 25 WindowsRegistry::T_string 2 0 0

1777 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

1778 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

1779 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

1780 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

1781 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

1782 12 ConfigPage * 8576 12 ConfigPage * 12 ConfigPage * 0 0 1717 0 0 0 0 0 0 0 0 0

1783 18 ConfigPage const * 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 1784 0 0 0 0 0 0 0 0 0

1784 16 ConfigPage const 8832 16 ConfigPage const 16 ConfigPage const 0 0 1717 0 0 0 0 0 0 0 0 0

1785 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

1786 9 istream * 8576 9 istream * 9 istream * 0 0 1743 0 0 0 0 0 0 0 0 0

1787 20 ConfigVariableCore * 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 1788 0 0 0 0 0 0 0 0 0

1788 18 ConfigVariableCore 2048 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 0 0 0 0 0 0 615
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableCore
// Description : The internal definition of a ConfigVariable.  This
//               object is shared between all instances of a
//               ConfigVariable that use the same variable name.
//
//               You cannot create a ConfigVariableCore instance
//               directly; instead, use the make() method, which may
//               return a shared instance.  Once created, these
//               objects are never destructed.
////////////////////////////////////////////////////////////////////

1789 19 ConfigDeclaration * 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 1790 0 0 0 0 0 0 0 0 0

1790 17 ConfigDeclaration 2048 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 0 0 0 0 0 0 0

1791 25 ConfigDeclaration const * 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 1792 0 0 0 0 0 0 0 0 0

1792 23 ConfigDeclaration const 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 1790 0 0 0 0 0 0 0 0 0

1793 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1744 0 0 0 0 0 0 0 0 0

1794 25 ConfigPageManager const * 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 1795 0 0 0 0 0 0 0 0 0

1795 23 ConfigPageManager const 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 1718 0 0 0 0 0 0 0 0 0

1796 19 ConfigPageManager * 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 1718 0 0 0 0 0 0 0 0 0

1797 13 DSearchPath * 8576 13 DSearchPath * 13 DSearchPath * 0 0 1729 0 0 0 0 0 0 0 0 0

1798 16 ConfigVariable * 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 1719 0 0 0 0 0 0 0 0 0

1799 22 ConfigVariable const * 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 1800 0 0 0 0 0 0 0 0 0

1800 20 ConfigVariable const 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 1719 0 0 0 0 0 0 0 0 0

1801 26 ConfigVariableBase const * 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 1802 0 0 0 0 0 0 0 0 0

1802 24 ConfigVariableBase const 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 1720 0 0 0 0 0 0 0 0 0

1803 20 ConfigVariableBase * 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 1720 0 0 0 0 0 0 0 0 0

1804 20 ConfigVariableBool * 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 1721 0 0 0 0 0 0 0 0 0

1805 26 ConfigVariableBool const * 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 1806 0 0 0 0 0 0 0 0 0

1806 24 ConfigVariableBool const 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 1721 0 0 0 0 0 0 0 0 0

1807 22 ConfigVariableDouble * 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 1722 0 0 0 0 0 0 0 0 0

1808 28 ConfigVariableDouble const * 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 1809 0 0 0 0 0 0 0 0 0

1809 26 ConfigVariableDouble const 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 1722 0 0 0 0 0 0 0 0 0

1810 24 ConfigVariableFilename * 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 1723 0 0 0 0 0 0 0 0 0

1811 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 1812 0 0 0 0 0 0 0 0 0

1812 14 Filename const 8832 14 Filename const 14 Filename const 0 0 1732 0 0 0 0 0 0 0 0 0

1813 30 ConfigVariableFilename const * 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 1814 0 0 0 0 0 0 0 0 0

1814 28 ConfigVariableFilename const 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 1723 0 0 0 0 0 0 0 0 0

1815 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

1816 4 char 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0

1817 10 Filename * 8576 10 Filename * 10 Filename * 0 0 1732 0 0 0 0 0 0 0 0 0

1818 19 ConfigVariableInt * 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 1724 0 0 0 0 0 0 0 0 0

1819 25 ConfigVariableInt const * 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 1820 0 0 0 0 0 0 0 0 0

1820 23 ConfigVariableInt const 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 1724 0 0 0 0 0 0 0 0 0

1821 20 ConfigVariableList * 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 1725 0 0 0 0 0 0 0 0 0

1822 26 ConfigVariableList const * 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 1823 0 0 0 0 0 0 0 0 0

1823 24 ConfigVariableList const 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 1725 0 0 0 0 0 0 0 0 0

1824 23 ConfigVariableManager * 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 1726 0 0 0 0 0 0 0 0 0

1825 29 ConfigVariableManager const * 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 1826 0 0 0 0 0 0 0 0 0

1826 27 ConfigVariableManager const 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 1726 0 0 0 0 0 0 0 0 0

1827 26 ConfigVariableSearchPath * 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 1727 0 0 0 0 0 0 0 0 0

1828 32 ConfigVariableSearchPath const * 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 1829 0 0 0 0 0 0 0 0 0

1829 30 ConfigVariableSearchPath const 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 1727 0 0 0 0 0 0 0 0 0

1830 19 DSearchPath const * 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1831 0 0 0 0 0 0 0 0 0

1831 17 DSearchPath const 8832 17 DSearchPath const 17 DSearchPath const 0 0 1729 0 0 0 0 0 0 0 0 0

1832 9 Results * 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 1730 0 0 0 0 0 0 0 0 0

1833 22 ConfigVariableString * 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 1728 0 0 0 0 0 0 0 0 0

1834 28 ConfigVariableString const * 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 1835 0 0 0 0 0 0 0 0 0

1835 26 ConfigVariableString const 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 1728 0 0 0 0 0 0 0 0 0

1836 15 Results const * 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 1837 0 0 0 0 0 0 0 0 0

1837 13 Results const 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 1730 0 0 0 0 0 0 0 0 0

1838 32 vector< basic_string< char > > * 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 1839 0 0 0 0 0 0 0 0 0

1839 30 vector< basic_string< char > > 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0

1840 10 ifstream * 8576 10 ifstream * 10 ifstream * 0 0 1841 0 0 0 0 0 0 0 0 0

1841 8 ifstream 2048 8 ifstream 8 ifstream 0 0 0 0 0 0 0 0 0 0 0 0

1842 10 ofstream * 8576 10 ofstream * 10 ofstream * 0 0 1843 0 0 0 0 0 0 0 0 0

1843 8 ofstream 2048 8 ofstream 8 ofstream 0 0 0 0 0 0 0 0 0 0 0 0

1844 9 fstream * 8576 9 fstream * 9 fstream * 0 0 1845 0 0 0 0 0 0 0 0 0

1845 7 fstream 2048 7 fstream 7 fstream 0 0 0 0 0 0 0 0 0 0 0 0

1846 19 GlobPattern const * 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 1847 0 0 0 0 0 0 0 0 0

1847 17 GlobPattern const 8832 17 GlobPattern const 17 GlobPattern const 0 0 1734 0 0 0 0 0 0 0 0 0

1848 13 GlobPattern * 8576 13 GlobPattern * 13 GlobPattern * 0 0 1734 0 0 0 0 0 0 0 0 0

1849 8 Notify * 8576 8 Notify * 8 Notify * 0 0 1735 0 0 0 0 0 0 0 0 0

1850 14 Notify const * 8576 14 Notify const * 14 Notify const * 0 0 1851 0 0 0 0 0 0 0 0 0

1851 12 Notify const 8832 12 Notify const 12 Notify const 0 0 1735 0 0 0 0 0 0 0 0 0

1852 16 NotifyCategory * 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 1736 0 0 0 0 0 0 0 0 0

1853 22 NotifyCategory const * 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 1854 0 0 0 0 0 0 0 0 0

1854 20 NotifyCategory const 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 1736 0 0 0 0 0 0 0 0 0

1855 8 long int 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0

1856 19 PandaSystem const * 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 1857 0 0 0 0 0 0 0 0 0

1857 17 PandaSystem const 8832 17 PandaSystem const 17 PandaSystem const 0 0 1738 0 0 0 0 0 0 0 0 0

1858 13 PandaSystem * 8576 13 PandaSystem * 13 PandaSystem * 0 0 1738 0 0 0 0 0 0 0 0 0

1859 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1739 0 0 0 0 0 0 0 0 0

1860 18 TypeHandle const * 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 1861 0 0 0 0 0 0 0 0 0

1861 16 TypeHandle const 8832 16 TypeHandle const 16 TypeHandle const 0 0 1739 0 0 0 0 0 0 0 0 0

1862 13 TypedObject * 8576 13 TypedObject * 13 TypedObject * 0 0 1741 0 0 0 0 0 0 0 0 0

1863 18 set< int > const * 8576 18 set< int > const * 18 set< int > const * 0 0 1864 0 0 0 0 0 0 0 0 0

1864 16 set< int > const 8832 16 set< int > const 16 set< int > const 0 0 1865 0 0 0 0 0 0 0 0 0

1865 10 set< int > 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0

1866 20 TypeRegistry const * 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 1867 0 0 0 0 0 0 0 0 0

1867 18 TypeRegistry const 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 1740 0 0 0 0 0 0 0 0 0

1868 14 TypeRegistry * 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 1740 0 0 0 0 0 0 0 0 0

1869 19 TypedObject const * 8576 19 TypedObject const * 19 TypedObject const * 0 0 1870 0 0 0 0 0 0 0 0 0

1870 17 TypedObject const 8832 17 TypedObject const 17 TypedObject const 0 0 1741 0 0 0 0 0 0 0 0 0

1871 10 iostream * 8576 10 iostream * 10 iostream * 0 0 1742 0 0 0 0 0 0 0 0 0

1872 21 MemoryUsagePointers * 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 1759 0 0 0 0 0 0 0 0 0

1873 22 ReferenceCount const * 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 1874 0 0 0 0 0 0 0 0 0

1874 20 ReferenceCount const 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 1746 0 0 0 0 0 0 0 0 0

1875 14 Buffer const * 8576 14 Buffer const * 14 Buffer const * 0 0 1876 0 0 0 0 0 0 0 0 0

1876 12 Buffer const 8832 12 Buffer const 12 Buffer const 0 0 1747 0 0 0 0 0 0 0 0 0

1877 21 PointerToVoid const * 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 1878 0 0 0 0 0 0 0 0 0

1878 19 PointerToVoid const 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 1748 0 0 0 0 0 0 0 0 0

1879 33 PointerToArray< unsigned char > * 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1749 0 0 0 0 0 0 0 0 0

1880 39 PointerToArray< unsigned char > const * 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 1881 0 0 0 0 0 0 0 0 0

1881 37 PointerToArray< unsigned char > const 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 1749 0 0 0 0 0 0 0 0 0

1882 13 unsigned char 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0

1883 57 PointerToBase< RefCountObj< vector< unsigned char > > > * 8576 57 PointerToBase< RefCountObj< vector< unsigned char > > > * 57 PointerToBase< RefCountObj< vector< unsigned char > > > * 0 0 1750 0 0 0 0 0 0 0 0 0

1884 63 PointerToBase< RefCountObj< vector< unsigned char > > > const * 8576 63 PointerToBase< RefCountObj< vector< unsigned char > > > const * 63 PointerToBase< RefCountObj< vector< unsigned char > > > const * 0 0 1885 0 0 0 0 0 0 0 0 0

1885 61 PointerToBase< RefCountObj< vector< unsigned char > > > const 8832 61 PointerToBase< RefCountObj< vector< unsigned char > > > const 61 PointerToBase< RefCountObj< vector< unsigned char > > > const 0 0 1750 0 0 0 0 0 0 0 0 0

1886 38 ConstPointerToArray< unsigned char > * 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1751 0 0 0 0 0 0 0 0 0

1887 44 ConstPointerToArray< unsigned char > const * 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 1888 0 0 0 0 0 0 0 0 0

1888 42 ConstPointerToArray< unsigned char > const 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 1751 0 0 0 0 0 0 0 0 0

1889 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 1752 0 0 0 0 0 0 0 0 0

1890 16 Datagram const * 8576 16 Datagram const * 16 Datagram const * 0 0 1891 0 0 0 0 0 0 0 0 0

1891 14 Datagram const 8832 14 Datagram const 14 Datagram const 0 0 1752 0 0 0 0 0 0 0 0 0

1892 11 signed char 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0

1893 9 short int 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0

1894 7 __int64 8226 7 __int64 7 __int64 0 8 0 0 0 0 0 0 0 0 0 0

1895 18 unsigned short int 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0

1896 16 unsigned __int64 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0

1897 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1753 0 0 0 0 0 0 0 0 0

1898 24 DatagramIterator const * 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 1899 0 0 0 0 0 0 0 0 0

1899 22 DatagramIterator const 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 1753 0 0 0 0 0 0 0 0 0

1900 9 Ramfile * 8576 9 Ramfile * 9 Ramfile * 0 0 1755 0 0 0 0 0 0 0 0 0

1901 15 Ramfile const * 8576 15 Ramfile const * 15 Ramfile const * 0 0 1902 0 0 0 0 0 0 0 0 0

1902 13 Ramfile const 8832 13 Ramfile const 13 Ramfile const 0 0 1755 0 0 0 0 0 0 0 0 0

1903 20 StreamWriter const * 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 1904 0 0 0 0 0 0 0 0 0

1904 18 StreamWriter const 8832 18 StreamWriter const 18 StreamWriter const 0 0 1756 0 0 0 0 0 0 0 0 0

1905 14 StreamWriter * 8576 14 StreamWriter * 14 StreamWriter * 0 0 1756 0 0 0 0 0 0 0 0 0

1906 20 StreamReader const * 8576 20 StreamReader const * 20 StreamReader const * 0 0 1907 0 0 0 0 0 0 0 0 0

1907 18 StreamReader const 8832 18 StreamReader const 18 StreamReader const 0 0 1757 0 0 0 0 0 0 0 0 0

1908 14 StreamReader * 8576 14 StreamReader * 14 StreamReader * 0 0 1757 0 0 0 0 0 0 0 0 0

1909 9 HashVal * 8576 9 HashVal * 9 HashVal * 0 0 1758 0 0 0 0 0 0 0 0 0

1910 15 HashVal const * 8576 15 HashVal const * 15 HashVal const * 0 0 1911 0 0 0 0 0 0 0 0 0

1911 13 HashVal const 8832 13 HashVal const 13 HashVal const 0 0 1758 0 0 0 0 0 0 0 0 0

1912 27 MemoryUsagePointers const * 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 1913 0 0 0 0 0 0 0 0 0

1913 25 MemoryUsagePointers const 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 1759 0 0 0 0 0 0 0 0 0

1914 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1746 0 0 0 0 0 0 0 0 0

1915 11 Multifile * 8576 11 Multifile * 11 Multifile * 0 0 1760 0 0 0 0 0 0 0 0 0

1916 17 Multifile const * 8576 17 Multifile const * 17 Multifile const * 0 0 1917 0 0 0 0 0 0 0 0 0

1917 15 Multifile const 8832 15 Multifile const 15 Multifile const 0 0 1760 0 0 0 0 0 0 0 0 0

1918 15 Namable const * 8576 15 Namable const * 15 Namable const * 0 0 1919 0 0 0 0 0 0 0 0 0

1919 13 Namable const 8832 13 Namable const 13 Namable const 0 0 1761 0 0 0 0 0 0 0 0 0

1920 9 Namable * 8576 9 Namable * 9 Namable * 0 0 1761 0 0 0 0 0 0 0 0 0

1921 11 Patchfile * 8576 11 Patchfile * 11 Patchfile * 0 0 1762 0 0 0 0 0 0 0 0 0

1922 8 Buffer * 8576 8 Buffer * 8 Buffer * 0 0 1747 0 0 0 0 0 0 0 0 0

1923 17 Patchfile const * 8576 17 Patchfile const * 17 Patchfile const * 0 0 1924 0 0 0 0 0 0 0 0 0

1924 15 Patchfile const 8832 15 Patchfile const 15 Patchfile const 0 0 1762 0 0 0 0 0 0 0 0 0

1925 11 TrueClock * 8576 11 TrueClock * 11 TrueClock * 0 0 1763 0 0 0 0 0 0 0 0 0

1926 17 TrueClock const * 8576 17 TrueClock const * 17 TrueClock const * 0 0 1927 0 0 0 0 0 0 0 0 0

1927 15 TrueClock const 8832 15 TrueClock const 15 TrueClock const 0 0 1763 0 0 0 0 0 0 0 0 0

1928 20 ProfileTimer const * 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 1929 0 0 0 0 0 0 0 0 0

1929 18 ProfileTimer const 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 1764 0 0 0 0 0 0 0 0 0

1930 14 ProfileTimer * 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 1764 0 0 0 0 0 0 0 0 0

1931 13 TextEncoder * 8576 13 TextEncoder * 13 TextEncoder * 0 0 1765 0 0 0 0 0 0 0 0 0

1932 19 TextEncoder const * 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 1933 0 0 0 0 0 0 0 0 0

1933 17 TextEncoder const 8832 17 TextEncoder const 17 TextEncoder const 0 0 1765 0 0 0 0 0 0 0 0 0

1934 7 wchar_t 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0

1935 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1767 0 0 0 0 0 0 0 0 0

1936 19 VirtualFile const * 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1937 0 0 0 0 0 0 0 0 0

1937 17 VirtualFile const 8832 17 VirtualFile const 17 VirtualFile const 0 0 1768 0 0 0 0 0 0 0 0 0

1938 19 VirtualFileSystem * 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 1772 0 0 0 0 0 0 0 0 0

1939 17 VirtualFileList * 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 1770 0 0 0 0 0 0 0 0 0

1940 23 VirtualFileList const * 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 1941 0 0 0 0 0 0 0 0 0

1941 21 VirtualFileList const 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 1770 0 0 0 0 0 0 0 0 0

1942 13 VirtualFile * 8576 13 VirtualFile * 13 VirtualFile * 0 0 1768 0 0 0 0 0 0 0 0 0

1943 25 VirtualFileSystem const * 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 1944 0 0 0 0 0 0 0 0 0

1944 23 VirtualFileSystem const 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 1772 0 0 0 0 0 0 0 0 0

1945 25 WeakPointerToVoid const * 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 1946 0 0 0 0 0 0 0 0 0

1946 23 WeakPointerToVoid const 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 1774 0 0 0 0 0 0 0 0 0

1947 45 Config< ConfigureGetConfig_config_express > * 8576 53 Config::Config< ConfigureGetConfig_config_express > * 53 Config::Config< ConfigureGetConfig_config_express > * 0 0 1713 0 0 0 0 0 0 0 0 0

1948 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
