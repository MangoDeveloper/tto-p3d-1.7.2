1145554298
2 2
9 libpgraph 4 nJyo 5 panda 
1275
1625 10 operator < 4 2900 26 TransformState::operator < 0 1 1 1246
// Filename: transformState.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This is the same as sorts_less(), except the
//               uniquify_matrix value is implicit from the Config.prc
//               file.
////////////////////////////////////////////////////////////////////
74
inline bool TransformState::operator <(TransformState const &other) const;

1626 10 sorts_less 4 2900 26 TransformState::sorts_less 0 1 2 696
////////////////////////////////////////////////////////////////////
//     Function: TransformState::sorts_less
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               If uniquify_matrix is true, then matrix-defined
//               TransformStates are also uniqified.  If
//               uniquify_matrix is false, then only component-defined
//               TransformStates are uniquified, which is less
//               expensive.
////////////////////////////////////////////////////////////////////
89
bool TransformState::sorts_less(TransformState const &other, bool uniquify_matrix) const;

1627 8 get_hash 4 2900 24 TransformState::get_hash 0 1 3 271
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hash()
//       Access: Published
//  Description: Computes a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
50
unsigned int TransformState::get_hash(void) const;

1628 13 make_identity 4 2900 29 TransformState::make_identity 0 1 4 270
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_identity
//       Access: Published, Static
//  Description: Constructs an identity transform.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< TransformState > TransformState::make_identity(void);

1629 12 make_invalid 4 2900 28 TransformState::make_invalid 0 1 5 342
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_invalid
//       Access: Published, Static
//  Description: Constructs an invalid transform; for instance, the
//               result of inverting a singular matrix.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< TransformState > TransformState::make_invalid(void);

1630 8 make_pos 4 2900 24 TransformState::make_pos 0 1 6 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
95
static inline ConstPointerTo< TransformState > TransformState::make_pos(LVecBase3f const &pos);

1631 8 make_hpr 4 2900 24 TransformState::make_hpr 0 1 7 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
95
static inline ConstPointerTo< TransformState > TransformState::make_hpr(LVecBase3f const &hpr);

1632 9 make_quat 4 2900 25 TransformState::make_quat 0 1 8 307
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_quat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
99
static inline ConstPointerTo< TransformState > TransformState::make_quat(LQuaternionf const &quat);

1633 12 make_pos_hpr 4 2900 28 TransformState::make_pos_hpr 0 1 9 310
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
122
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr(LVecBase3f const &pos, LVecBase3f const &hpr);

1634 10 make_scale 4 2900 26 TransformState::make_scale 0 2 10 11 618
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
87
static inline ConstPointerTo< TransformState > TransformState::make_scale(float scale);

1635 10 make_shear 4 2900 26 TransformState::make_shear 0 1 12 308
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
99
static inline ConstPointerTo< TransformState > TransformState::make_shear(LVecBase3f const &shear);

1636 18 make_pos_hpr_scale 4 2900 34 TransformState::make_pos_hpr_scale 0 1 13 316
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
153
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale);

1637 19 make_pos_quat_scale 4 2900 35 TransformState::make_pos_quat_scale 0 1 14 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
157
static inline ConstPointerTo< TransformState > TransformState::make_pos_quat_scale(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale);

1638 24 make_pos_hpr_scale_shear 4 2900 40 TransformState::make_pos_hpr_scale_shear 0 1 15 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
177
static ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale_shear(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale, LVecBase3f const &shear);

1639 25 make_pos_quat_scale_shear 4 2900 41 TransformState::make_pos_quat_scale_shear 0 1 16 323
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
181
static ConstPointerTo< TransformState > TransformState::make_pos_quat_scale_shear(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale, LVecBase3f const &shear);

1640 8 make_mat 4 2900 24 TransformState::make_mat 0 1 17 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               transformation matrix.
////////////////////////////////////////////////////////////////////
87
static ConstPointerTo< TransformState > TransformState::make_mat(LMatrix4f const &mat);

1641 10 make_pos2d 4 2900 26 TransformState::make_pos2d 0 1 18 312
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
97
static inline ConstPointerTo< TransformState > TransformState::make_pos2d(LVecBase2f const &pos);

1642 13 make_rotate2d 4 2900 29 TransformState::make_rotate2d 0 1 19 315
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
91
static inline ConstPointerTo< TransformState > TransformState::make_rotate2d(float rotate);

1643 17 make_pos_rotate2d 4 2900 33 TransformState::make_pos_rotate2d 0 1 20 319
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
118
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate2d(LVecBase2f const &pos, float rotate);

1644 12 make_scale2d 4 2900 28 TransformState::make_scale2d 0 2 21 22 630
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
89
static inline ConstPointerTo< TransformState > TransformState::make_scale2d(float scale);

1645 12 make_shear2d 4 2900 28 TransformState::make_shear2d 0 1 23 314
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
89
static inline ConstPointerTo< TransformState > TransformState::make_shear2d(float shear);

1646 23 make_pos_rotate_scale2d 4 2900 39 TransformState::make_pos_rotate_scale2d 0 1 24 325
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
149
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale2d(LVecBase2f const &pos, float rotate, LVecBase2f const &scale);

1647 29 make_pos_rotate_scale_shear2d 4 2900 45 TransformState::make_pos_rotate_scale_shear2d 0 1 25 343
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale_shear2d
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified components.
////////////////////////////////////////////////////////////////////
161
static ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale_shear2d(LVecBase2f const &pos, float rotate, LVecBase2f const &scale, float shear);

1648 9 make_mat3 4 2900 25 TransformState::make_mat3 0 1 26 338
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat3
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified 3x3 transformation matrix.
////////////////////////////////////////////////////////////////////
88
static ConstPointerTo< TransformState > TransformState::make_mat3(LMatrix3f const &mat);

1649 11 is_identity 4 2900 27 TransformState::is_identity 0 1 27 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_identity
//       Access: Published
//  Description: Returns true if the transform represents the identity
//               matrix, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_identity(void) const;

1650 10 is_invalid 4 2900 26 TransformState::is_invalid 0 1 28 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_invalid
//       Access: Published
//  Description: Returns true if the transform represents an invalid
//               matrix, for instance the result of inverting a
//               singular matrix, or false if the transform is valid.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::is_invalid(void) const;

1651 11 is_singular 4 2900 27 TransformState::is_singular 0 1 29 401
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_singular
//       Access: Published
//  Description: Returns true if the transform represents a singular
//               transform (that is, it has a zero scale, and it
//               cannot be inverted), or false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_singular(void) const;

1652 5 is_2d 4 2900 21 TransformState::is_2d 0 1 30 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_2d
//       Access: Published
//  Description: Returns true if the transform has been constructed
//               entirely using the 2-d transform operations,
//               e.g. make_pos2d(), and therefore operates strictly in
//               two-dimensional space on X and Y only.
////////////////////////////////////////////////////////////////////
46
inline bool TransformState::is_2d(void) const;

1653 14 has_components 4 2900 30 TransformState::has_components 0 1 31 1050
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_components
//       Access: Published
//  Description: Returns true if the transform can be described by
//               separate pos, hpr, and scale components.  Most
//               transforms we use in everyday life can be so
//               described, but some kinds of transforms (for
//               instance, those involving a skew) cannot.
//
//               This is not related to whether the transform was
//               originally described componentwise.  Even a transform
//               that was constructed with a 4x4 may return true here
//               if the matrix is a simple affine matrix with no skew.
//
//               If this returns true, you may safely call get_hpr()
//               and get_scale() to retrieve the components.  (You
//               may always safely call get_pos() whether this returns
//               true or false.)
////////////////////////////////////////////////////////////////////
55
inline bool TransformState::has_components(void) const;

1654 16 components_given 4 2900 32 TransformState::components_given 0 1 32 796
////////////////////////////////////////////////////////////////////
//     Function: TransformState::components_given
//       Access: Published
//  Description: Returns true if the transform was specified
//               componentwise, or false if it was specified with a
//               general 4x4 matrix.  If this is true, the components
//               returned by get_pos() and get_scale() will be exactly
//               those that were set; otherwise, these functions will
//               return computed values.  If this is true, the
//               rotation may have been set either with a hpr trio or
//               with a quaternion; hpr_given() or quat_given() can
//               resolve the difference.
////////////////////////////////////////////////////////////////////
57
inline bool TransformState::components_given(void) const;

1655 9 hpr_given 4 2900 25 TransformState::hpr_given 0 1 33 459
////////////////////////////////////////////////////////////////////
//     Function: TransformState::hpr_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a trio
//               of Euler angles, false otherwise.  If this is true,
//               get_hpr() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::hpr_given(void) const;

1656 10 quat_given 4 2900 26 TransformState::quat_given 0 1 34 452
////////////////////////////////////////////////////////////////////
//     Function: TransformState::quat_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a 
//               quaternion, false otherwise.  If this is true,
//               get_quat() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::quat_given(void) const;

1657 7 has_pos 4 2900 23 TransformState::has_pos 0 1 35 450
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_pos
//       Access: Published
//  Description: Returns true if the transform's pos component can be
//               extracted out separately.  This is generally always
//               true, unless the transform is invalid
//               (i.e. is_invalid() returns true).
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_pos(void) const;

1658 7 has_hpr 4 2900 23 TransformState::has_hpr 0 1 36 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_hpr
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               set of Euler angles.  This is generally true only
//               when has_components() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_hpr(void) const;

1659 8 has_quat 4 2900 24 TransformState::has_quat 0 1 37 448
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_quat
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               quaternion.  This is generally true only when
//               has_components() is true.
////////////////////////////////////////////////////////////////////
49
inline bool TransformState::has_quat(void) const;

1660 9 has_scale 4 2900 25 TransformState::has_scale 0 1 38 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_scale
//       Access: Published
//  Description: Returns true if the transform's scale component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_scale(void) const;

1661 18 has_identity_scale 4 2900 34 TransformState::has_identity_scale 0 1 39 335
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_identity_scale
//       Access: Published
//  Description: Returns true if the scale is uniform 1.0, or false if
//               the scale has some real value.
////////////////////////////////////////////////////////////////////
59
inline bool TransformState::has_identity_scale(void) const;

1662 17 has_uniform_scale 4 2900 33 TransformState::has_uniform_scale 0 1 40 468
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_uniform_scale
//       Access: Published
//  Description: Returns true if the scale is uniform across all three
//               axes (and therefore can be expressed as a single
//               number), or false if the transform has a different
//               scale in different dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_uniform_scale(void) const;

1663 9 has_shear 4 2900 25 TransformState::has_shear 0 1 41 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_shear
//       Access: Published
//  Description: Returns true if the transform's shear component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_shear(void) const;

1664 17 has_nonzero_shear 4 2900 33 TransformState::has_nonzero_shear 0 1 42 374
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_nonzero_shear
//       Access: Published
//  Description: Returns true if the shear component is non-zero,
//               false if it is zero or if the matrix cannot be
//               decomposed.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_nonzero_shear(void) const;

1665 7 has_mat 4 2900 23 TransformState::has_mat 0 1 43 377
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_mat
//       Access: Published
//  Description: Returns true if the transform can be described as a
//               matrix.  This is generally always true, unless
//               is_invalid() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_mat(void) const;

1666 7 get_pos 4 2900 23 TransformState::get_pos 0 1 44 341
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos
//       Access: Published
//  Description: Returns the pos component of the transform.  It is an
//               error to call this if has_pos() returned false.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &TransformState::get_pos(void) const;

1667 7 get_hpr 4 2900 23 TransformState::get_hpr 0 1 45 396
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hpr
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               trio of Euler angles.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &TransformState::get_hpr(void) const;

1668 8 get_quat 4 2900 24 TransformState::get_quat 0 1 46 387
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
64
inline LQuaternionf const &TransformState::get_quat(void) const;

1669 9 get_scale 4 2900 25 TransformState::get_scale 0 1 47 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale
//       Access: Published
//  Description: Returns the scale component of the transform.  It is an
//               error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f const &TransformState::get_scale(void) const;

1670 17 get_uniform_scale 4 2900 33 TransformState::get_uniform_scale 0 1 48 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_uniform_scale
//       Access: Published
//  Description: Returns the scale component of the transform, as a
//               single number.  It is an error to call this if
//               has_uniform_scale() returned false.
////////////////////////////////////////////////////////////////////
59
inline float TransformState::get_uniform_scale(void) const;

1671 9 get_shear 4 2900 25 TransformState::get_shear 0 1 49 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear
//       Access: Published
//  Description: Returns the shear component of the transform.  It is
//               an error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f const &TransformState::get_shear(void) const;

1672 7 get_mat 4 2900 23 TransformState::get_mat 0 1 50 271
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the transform.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4f const &TransformState::get_mat(void) const;

1673 9 get_pos2d 4 2900 25 TransformState::get_pos2d 0 1 51 375
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos2d
//       Access: Published
//  Description: Returns the pos component of the 2-d transform.  It
//               is an error to call this if has_pos() or is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
56
inline LVecBase2f TransformState::get_pos2d(void) const;

1674 12 get_rotate2d 4 2900 28 TransformState::get_rotate2d 0 1 52 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_rotate2d
//       Access: Published
//  Description: Returns the rotation component of the 2-d transform
//               as an angle in degrees clockwise about the origin.
//               It is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
54
inline float TransformState::get_rotate2d(void) const;

1675 11 get_scale2d 4 2900 27 TransformState::get_scale2d 0 1 53 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale2d
//       Access: Published
//  Description: Returns the scale component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
58
inline LVecBase2f TransformState::get_scale2d(void) const;

1676 11 get_shear2d 4 2900 27 TransformState::get_shear2d 0 1 54 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear2d
//       Access: Published
//  Description: Returns the shear component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
53
inline float TransformState::get_shear2d(void) const;

1677 8 get_mat3 4 2900 24 TransformState::get_mat3 0 1 55 370
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat3
//       Access: Published
//  Description: Returns the 3x3 matrix that describes the 2-d
//               transform.  It is an error to call this if is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
54
inline LMatrix3f TransformState::get_mat3(void) const;

1678 7 set_pos 4 2900 23 TransformState::set_pos 0 1 56 394
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< TransformState > TransformState::set_pos(LVecBase3f const &pos) const;

1679 7 set_hpr 4 2900 23 TransformState::set_hpr 0 1 57 412
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_hpr
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< TransformState > TransformState::set_hpr(LVecBase3f const &hpr) const;

1680 8 set_quat 4 2900 24 TransformState::set_quat 0 1 58 413
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_quat
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_quat(LQuaternionf const &quat) const;

1681 9 set_scale 4 2900 25 TransformState::set_scale 0 1 59 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_scale(LVecBase3f const &scale) const;

1682 9 set_shear 4 2900 25 TransformState::set_shear 0 1 60 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_shear(LVecBase3f const &shear) const;

1683 9 set_pos2d 4 2900 25 TransformState::set_pos2d 0 1 61 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< TransformState > TransformState::set_pos2d(LVecBase2f const &pos) const;

1684 12 set_rotate2d 4 2900 28 TransformState::set_rotate2d 0 1 62 421
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_rotate2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< TransformState > TransformState::set_rotate2d(float rotate) const;

1685 11 set_scale2d 4 2900 27 TransformState::set_scale2d 0 1 63 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< TransformState > TransformState::set_scale2d(LVecBase2f const &scale) const;

1686 11 set_shear2d 4 2900 27 TransformState::set_shear2d 0 1 64 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
80
ConstPointerTo< TransformState > TransformState::set_shear2d(float shear) const;

1687 7 compose 4 2900 23 TransformState::compose 0 1 65 723
////////////////////////////////////////////////////////////////////
//     Function: TransformState::compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this TransformState object and
//               the other TransformState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< TransformState > TransformState::compose(TransformState const *other) const;

1688 14 invert_compose 4 2900 30 TransformState::invert_compose 0 1 66 563
////////////////////////////////////////////////////////////////////
//     Function: TransformState::invert_compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
99
ConstPointerTo< TransformState > TransformState::invert_compose(TransformState const *other) const;

1689 11 get_inverse 4 2900 27 TransformState::get_inverse 0 1 67 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_inverse
//       Access: Published
//  Description: Returns the inverse of this transform.  If you are
//               going to immediately compose this result with another
//               TransformState, it is faster to do it in one
//               operation with invert_compose().
////////////////////////////////////////////////////////////////////
80
inline ConstPointerTo< TransformState > TransformState::get_inverse(void) const;

1690 18 get_geom_rendering 4 2900 34 TransformState::get_geom_rendering 0 1 68 560
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TransformState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.  The RenderState's
//               get_geom_rendering() should already have been
//               applied.
////////////////////////////////////////////////////////////////////
72
inline int TransformState::get_geom_rendering(int geom_rendering) const;

1691 5 unref 4 2900 21 TransformState::unref 0 1 69 996
////////////////////////////////////////////////////////////////////
//     Function: TransformState::unref
//       Access: Published
//  Description: This method overrides ReferenceCount::unref() to
//               check whether the remaining reference count is
//               entirely in the cache, and if so, it checks for and
//               breaks a cycle in the cache involving this object.
//               This is designed to prevent leaks from cyclical
//               references within the cache.
//
//               Note that this is not a virtual method, and cannot be
//               because ReferenceCount itself declares no virtual
//               methods (it avoids the overhead of a virtual function
//               pointer).  But this doesn't matter, because
//               PT(TransformState) is a template class, and will call
//               the appropriate method even though it is non-virtual.
////////////////////////////////////////////////////////////////////
39
bool TransformState::unref(void) const;

1692 9 cache_ref 4 2900 25 TransformState::cache_ref 0 1 70 278
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
50
inline void TransformState::cache_ref(void) const;

1693 11 cache_unref 4 2900 27 TransformState::cache_unref 0 1 71 280
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::cache_unref(void) const;

1694 8 node_ref 4 2900 24 TransformState::node_ref 0 1 72 277
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline void TransformState::node_ref(void) const;

1695 10 node_unref 4 2900 26 TransformState::node_unref 0 1 73 279
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::node_unref(void) const;

1696 6 output 4 2900 22 TransformState::output 0 1 74 231
////////////////////////////////////////////////////////////////////
//     Function: TransformState::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
void TransformState::output(ostream &out) const;

1697 5 write 4 2900 21 TransformState::write 0 1 75 230
////////////////////////////////////////////////////////////////////
//     Function: TransformState::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
65
void TransformState::write(ostream &out, int indent_level) const;

1698 14 get_num_states 4 2900 30 TransformState::get_num_states 0 1 76 405
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique TransformState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
48
static int TransformState::get_num_states(void);

1699 21 get_num_unused_states 4 2900 37 TransformState::get_num_unused_states 0 1 77 1008
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               TransformState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base TransformStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" TransformState objects.
////////////////////////////////////////////////////////////////////
55
static int TransformState::get_num_unused_states(void);

1700 11 clear_cache 4 2900 27 TransformState::clear_cache 0 1 78 1021
////////////////////////////////////////////////////////////////////
//     Function: TransformState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed TransformStates.  This
//               makes every TransformState forget what results when
//               it is composed with other TransformStates.
//
//               This will eliminate any TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState map.  It will not
//               eliminate TransformState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of TransformStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
45
static int TransformState::clear_cache(void);

1701 11 list_cycles 4 2900 27 TransformState::list_cycles 0 1 79 951
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_cycles(ostream &out);

1702 11 list_states 4 2900 27 TransformState::list_states 0 1 80 424
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_states
//       Access: Published, Static
//  Description: Lists all of the TransformStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_states(ostream &out);

1703 15 validate_states 4 2900 31 TransformState::validate_states 0 1 81 586
////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const TransformState
//               objects).
////////////////////////////////////////////////////////////////////
50
static bool TransformState::validate_states(void);

1704 14 get_class_type 4 2900 30 TransformState::get_class_type 0 1 82 0
55
static TypeHandle TransformState::get_class_type(void);

1705 10 compare_to 4 2902 24 RenderAttrib::compare_to 0 1 83 671
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderAttribs, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderAttrib
//               class because all equivalent RenderAttrib objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderAttrib::compare_to(RenderAttrib const &other) const;

1706 6 output 4 2902 20 RenderAttrib::output 0 1 84 229
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void RenderAttrib::output(ostream &out) const;

1707 5 write 4 2902 19 RenderAttrib::write 0 1 85 228
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void RenderAttrib::write(ostream &out, int indent_level) const;

1708 15 get_num_attribs 4 2902 29 RenderAttrib::get_num_attribs 0 1 86 402
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_num_attribs
//       Access: Published, Static
//  Description: Returns the total number of unique RenderAttrib
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderAttrib::get_num_attribs(void);

1709 12 list_attribs 4 2902 26 RenderAttrib::list_attribs 0 1 87 421
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::list_attribs
//       Access: Published, Static
//  Description: Lists all of the RenderAttribs in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderAttrib::list_attribs(ostream &out);

1710 16 validate_attribs 4 2902 30 RenderAttrib::validate_attribs 0 1 88 480
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::validate_attribs
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderAttrib objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderAttrib::validate_attribs(void);

1711 14 get_class_type 4 2902 28 RenderAttrib::get_class_type 0 1 89 0
53
static TypeHandle RenderAttrib::get_class_type(void);

1712 4 make 4 2906 22 RenderModeAttrib::make 0 3 90 91 92 1219
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
////////////////////////////////////////////////////////////////////
137
static ConstPointerTo< RenderAttrib > RenderModeAttrib::make(RenderModeAttrib::Mode mode, float thickness = (1), bool perspective = (0));

1713 8 get_mode 4 2906 26 RenderModeAttrib::get_mode 0 1 93 250
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
69
inline RenderModeAttrib::Mode RenderModeAttrib::get_mode(void) const;

1714 13 get_thickness 4 2906 31 RenderModeAttrib::get_thickness 0 1 94 517
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_thickness
//       Access: Published
//  Description: Returns the line width or point thickness.  This is
//               only relevant when rendering points or lines, such as
//               when the mode is M_wireframe or M_point (or when
//               rendering actual points or lines primitives in
//               M_polygon mode).
////////////////////////////////////////////////////////////////////
57
inline float RenderModeAttrib::get_thickness(void) const;

1715 15 get_perspective 4 2906 33 RenderModeAttrib::get_perspective 0 1 95 676
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_perspective
//       Access: Published
//  Description: Returns the perspective flag.  When this is true, the
//               point thickness represented by get_thickness() is
//               actually a width in 3-d units, and the points should
//               scale according to perspective.  When it is false,
//               the default, the point thickness is actually a width
//               in pixels, and points are a uniform size regardless
//               of distance from the camera.
////////////////////////////////////////////////////////////////////
58
inline bool RenderModeAttrib::get_perspective(void) const;

1716 18 get_geom_rendering 4 2906 36 RenderModeAttrib::get_geom_rendering 0 1 96 456
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderModeAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
74
inline int RenderModeAttrib::get_geom_rendering(int geom_rendering) const;

1717 14 get_class_type 4 2906 32 RenderModeAttrib::get_class_type 0 1 97 0
57
static TypeHandle RenderModeAttrib::get_class_type(void);

1718 17 ~RenderModeAttrib 4 2906 35 RenderModeAttrib::~RenderModeAttrib 0 0 0
42
RenderModeAttrib::~RenderModeAttrib(void);

1719 4 make 4 2908 21 TexMatrixAttrib::make 0 3 98 99 100 1034
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies
//               no stages at all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated matrix to the default texture stage.  This
//               interface is deprecated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated transform to the named texture stage.
////////////////////////////////////////////////////////////////////
66
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(void);

1720 9 add_stage 4 2908 26 TexMatrixAttrib::add_stage 0 1 101 425
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
////////////////////////////////////////////////////////////////////
118
ConstPointerTo< RenderAttrib > TexMatrixAttrib::add_stage(TextureStage *stage, TransformState const *transform) const;

1721 12 remove_stage 4 2908 29 TexMatrixAttrib::remove_stage 0 1 102 337
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< RenderAttrib > TexMatrixAttrib::remove_stage(TextureStage *stage) const;

1722 8 is_empty 4 2908 25 TexMatrixAttrib::is_empty 0 1 103 329
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexMatrixAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
43
bool TexMatrixAttrib::is_empty(void) const;

1723 9 has_stage 4 2908 26 TexMatrixAttrib::has_stage 0 1 104 442
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
59
bool TexMatrixAttrib::has_stage(TextureStage *stage) const;

1724 14 get_num_stages 4 2908 31 TexMatrixAttrib::get_num_stages 0 1 105 313
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_num_stages
//       Access: Published
//  Description: Returns the number of stages that are represented by
//               this attrib.
////////////////////////////////////////////////////////////////////
48
int TexMatrixAttrib::get_num_stages(void) const;

1725 9 get_stage 4 2908 26 TexMatrixAttrib::get_stage 0 1 106 364
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_stage
//       Access: Published
//  Description: Returns the nth stage that is represented by this
//               attrib.  The TextureStages are in no particular
//               order.
////////////////////////////////////////////////////////////////////
54
TextureStage *TexMatrixAttrib::get_stage(int n) const;

1726 7 get_mat 4 2908 24 TexMatrixAttrib::get_mat 0 2 107 108 721
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the default texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the named texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
54
LMatrix4f const &TexMatrixAttrib::get_mat(void) const;

1727 13 get_transform 4 2908 30 TexMatrixAttrib::get_transform 0 1 109 401
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_transform
//       Access: Published
//  Description: Returns the transformation associated with
//               the named texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< TransformState > TexMatrixAttrib::get_transform(TextureStage *stage) const;

1728 18 get_geom_rendering 4 2908 35 TexMatrixAttrib::get_geom_rendering 0 1 110 454
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexMatrixAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
73
inline int TexMatrixAttrib::get_geom_rendering(int geom_rendering) const;

1729 14 get_class_type 4 2908 31 TexMatrixAttrib::get_class_type 0 1 111 0
56
static TypeHandle TexMatrixAttrib::get_class_type(void);

1730 10 operator < 4 2909 23 RenderState::operator < 0 1 112 667
////////////////////////////////////////////////////////////////////
//     Function: RenderState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderState
//               class because all equivalent RenderState objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
61
bool RenderState::operator <(RenderState const &other) const;

1731 8 is_empty 4 2909 21 RenderState::is_empty 0 1 113 948
// Filename: renderState.I
// Created by:  drose (21Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderState::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool RenderState::is_empty(void) const;

1732 15 get_num_attribs 4 2909 28 RenderState::get_num_attribs 0 1 114 310
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_attribs
//       Access: Published
//  Description: Returns the number of separate attributes indicated
//               in the state.
////////////////////////////////////////////////////////////////////
52
inline int RenderState::get_num_attribs(void) const;

1733 10 get_attrib 4 2909 23 RenderState::get_attrib 0 2 115 116 643
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Returns the nth attribute in the state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published, Virtual
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////
64
inline RenderAttrib const *RenderState::get_attrib(int n) const;

1734 12 get_override 4 2909 25 RenderState::get_override 0 2 117 118 706
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Returns the override associated with the nth
//               attribute in the state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published, Virtual
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
////////////////////////////////////////////////////////////////////
50
inline int RenderState::get_override(int n) const;

1735 17 has_cull_callback 4 2909 30 RenderState::has_cull_callback 0 1 119 371
////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_cull_callback
//       Access: Published
//  Description: Returns true if any of the RenderAttribs in this
//               state request a cull_callback(), false if none of
//               them do.
////////////////////////////////////////////////////////////////////
55
inline bool RenderState::has_cull_callback(void) const;

1736 13 cull_callback 4 2909 26 RenderState::cull_callback 0 1 120 443
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cull_callback
//       Access: Published
//  Description: Calls cull_callback() on each attrib.  If any attrib
//               returns false, interrupts the list and returns false
//               immediately; otherwise, completes the list and
//               returns true.
////////////////////////////////////////////////////////////////////
90
bool RenderState::cull_callback(CullTraverser *trav, CullTraverserData const &data) const;

1737 11 find_attrib 4 2909 24 RenderState::find_attrib 0 1 121 379
////////////////////////////////////////////////////////////////////
//     Function: RenderState::find_attrib
//       Access: Published
//  Description: Searches for an attribute with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
////////////////////////////////////////////////////////////////////
52
int RenderState::find_attrib(TypeHandle type) const;

1738 10 make_empty 4 2909 23 RenderState::make_empty 0 1 122 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_empty
//       Access: Published, Static
//  Description: Returns a RenderState with no attributes set.
////////////////////////////////////////////////////////////////////
67
static ConstPointerTo< RenderState > RenderState::make_empty(void);

1739 4 make 4 2909 17 RenderState::make 0 10 123 124 125 126 127 128 129 130 131 132 1642
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with n attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState made from the specified slots.
////////////////////////////////////////////////////////////////////
103
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib, int override = (0));

1740 7 compose 4 2909 20 RenderState::compose 0 1 133 711
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this RenderState object and
//               the other RenderState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
83
ConstPointerTo< RenderState > RenderState::compose(RenderState const *other) const;

1741 14 invert_compose 4 2909 27 RenderState::invert_compose 0 1 134 557
////////////////////////////////////////////////////////////////////
//     Function: RenderState::invert_compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderState > RenderState::invert_compose(RenderState const *other) const;

1742 10 add_attrib 4 2909 23 RenderState::add_attrib 0 2 135 136 457
////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced.
////////////////////////////////////////////////////////////////////
108
ConstPointerTo< RenderState > RenderState::add_attrib(RenderAttrib const *attrib, int override = (0)) const;

1743 13 remove_attrib 4 2909 26 RenderState::remove_attrib 0 1 137 379
////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
////////////////////////////////////////////////////////////////////
80
ConstPointerTo< RenderState > RenderState::remove_attrib(TypeHandle type) const;

1744 21 adjust_all_priorities 4 2909 34 RenderState::adjust_all_priorities 0 1 138 535
////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with all attributes'
//               override values incremented (or decremented, if
//               negative) by the indicated amount.  If the override
//               would drop below zero, it is set to zero.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderState > RenderState::adjust_all_priorities(int adjustment) const;

1745 5 unref 4 2909 18 RenderState::unref 0 1 139 993
////////////////////////////////////////////////////////////////////
//     Function: RenderState::unref
//       Access: Published
//  Description: This method overrides ReferenceCount::unref() to
//               check whether the remaining reference count is
//               entirely in the cache, and if so, it checks for and
//               breaks a cycle in the cache involving this object.
//               This is designed to prevent leaks from cyclical
//               references within the cache.
//
//               Note that this is not a virtual method, and cannot be
//               because ReferenceCount itself declares no virtual
//               methods (it avoids the overhead of a virtual function
//               pointer).  But this doesn't matter, because
//               PT(TransformState) is a template class, and will call
//               the appropriate method even though it is non-virtual.
////////////////////////////////////////////////////////////////////
36
bool RenderState::unref(void) const;

1746 9 cache_ref 4 2909 22 RenderState::cache_ref 0 1 140 275
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
47
inline void RenderState::cache_ref(void) const;

1747 11 cache_unref 4 2909 24 RenderState::cache_unref 0 1 141 277
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline bool RenderState::cache_unref(void) const;

1748 8 node_ref 4 2909 21 RenderState::node_ref 0 1 142 274
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
46
inline void RenderState::node_ref(void) const;

1749 10 node_unref 4 2909 23 RenderState::node_unref 0 1 143 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
48
inline bool RenderState::node_unref(void) const;

1750 6 output 4 2909 19 RenderState::output 0 1 144 228
////////////////////////////////////////////////////////////////////
//     Function: RenderState::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
45
void RenderState::output(ostream &out) const;

1751 5 write 4 2909 18 RenderState::write 0 1 145 227
////////////////////////////////////////////////////////////////////
//     Function: RenderState::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
62
void RenderState::write(ostream &out, int indent_level) const;

1752 16 get_max_priority 4 2909 29 RenderState::get_max_priority 0 1 146 599
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_max_priority
//       Access: Published, Static
//  Description: Returns the maximum priority number (sometimes called
//               override) that may be set on any node.  This may or
//               may not be enforced, but the scene graph code assumes
//               that no priority numbers will be larger than this,
//               and some effects may not work properly if you use a
//               larger number.
////////////////////////////////////////////////////////////////////
47
static int RenderState::get_max_priority(void);

1753 14 get_num_states 4 2909 27 RenderState::get_num_states 0 1 147 399
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
45
static int RenderState::get_num_states(void);

1754 21 get_num_unused_states 4 2909 34 RenderState::get_num_unused_states 0 1 148 990
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               RenderState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base RenderStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" RenderState objects.
////////////////////////////////////////////////////////////////////
52
static int RenderState::get_num_unused_states(void);

1755 11 clear_cache 4 2909 24 RenderState::clear_cache 0 1 149 997
////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed RenderStates.  This
//               makes every RenderState forget what results when
//               it is composed with other RenderStates.
//
//               This will eliminate any RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState map.  It will not
//               eliminate RenderState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of RenderStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
42
static int RenderState::clear_cache(void);

1756 11 list_cycles 4 2909 24 RenderState::list_cycles 0 1 150 948
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_cycles(ostream &out);

1757 11 list_states 4 2909 24 RenderState::list_states 0 1 151 418
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_states(ostream &out);

1758 15 validate_states 4 2909 28 RenderState::validate_states 0 1 152 580
////////////////////////////////////////////////////////////////////
//     Function: RenderState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const RenderState
//               objects).
////////////////////////////////////////////////////////////////////
47
static bool RenderState::validate_states(void);

1759 14 get_draw_order 4 2909 27 RenderState::get_draw_order 0 1 153 529
// These methods are intended for use by low-level code, but they're
// also handy enough to expose to high-level users.

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_draw_order
//       Access: Published
//  Description: Returns the draw order indicated by the
//               CullBinAttrib, if any, associated by this state (or 0
//               if there is no CullBinAttrib).  See get_bin_index().
////////////////////////////////////////////////////////////////////
51
inline int RenderState::get_draw_order(void) const;

1760 7 get_fog 4 2909 20 RenderState::get_fog 0 1 154 622
// These methods are intended for use by low-level code, but they're
// also handy enough to expose to high-level users.

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_fog
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a FogAttrib on this state.  It returns a
//               pointer to the FogAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
57
inline FogAttrib const *RenderState::get_fog(void) const;

1761 7 get_bin 4 2909 20 RenderState::get_bin 0 1 155 500
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a BinAttrib on this state.  It returns a
//               pointer to the BinAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
61
inline CullBinAttrib const *RenderState::get_bin(void) const;

1762 16 get_transparency 4 2909 29 RenderState::get_transparency 0 1 156 527
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_transparency
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a TransparencyAttrib on this state.  It returns a
//               pointer to the TransparencyAttrib, if there is one,
//               or NULL if there is not.
////////////////////////////////////////////////////////////////////
75
inline TransparencyAttrib const *RenderState::get_transparency(void) const;

1763 13 get_bin_index 4 2909 26 RenderState::get_bin_index 0 1 157 520
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin_index
//       Access: Published
//  Description: Returns the bin index indicated by the CullBinAttrib,
//               if any, associated by this state (or the default bin
//               index if there is no CullBinAttrib).  This function
//               is provided as an optimization for determining this
//               at render time.
////////////////////////////////////////////////////////////////////
50
inline int RenderState::get_bin_index(void) const;

1764 9 get_color 4 2909 22 RenderState::get_color 0 1 158 506
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_color
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a ColorAttrib on this state.  It returns a
//               pointer to the ColorAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
61
inline ColorAttrib const *RenderState::get_color(void) const;

1765 15 get_color_scale 4 2909 28 RenderState::get_color_scale 0 1 159 522
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_color_scale
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a ColorScaleAttrib on this state.  It returns a
//               pointer to the ColorScaleAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
72
inline ColorScaleAttrib const *RenderState::get_color_scale(void) const;

1766 11 get_texture 4 2909 24 RenderState::get_texture 0 1 160 512
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_texture
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a TextureAttrib on this state.  It returns a
//               pointer to the TextureAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
65
inline TextureAttrib const *RenderState::get_texture(void) const;

1767 11 get_tex_gen 4 2909 24 RenderState::get_tex_gen 0 1 161 510
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_tex_gen
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a TexGenAttrib on this state.  It returns a
//               pointer to the TexGenAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
64
inline TexGenAttrib const *RenderState::get_tex_gen(void) const;

1768 14 get_tex_matrix 4 2909 27 RenderState::get_tex_matrix 0 1 162 519
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_tex_matrix
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a TexMatrixAttrib on this state.  It returns a
//               pointer to the TexMatrixAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
70
inline TexMatrixAttrib const *RenderState::get_tex_matrix(void) const;

1769 15 get_render_mode 4 2909 28 RenderState::get_render_mode 0 1 163 522
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_render_mode
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a RenderModeAttrib on this state.  It returns a
//               pointer to the RenderModeAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
72
inline RenderModeAttrib const *RenderState::get_render_mode(void) const;

1770 14 get_clip_plane 4 2909 27 RenderState::get_clip_plane 0 1 164 519
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_clip_plane
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a ClipPlaneAttrib on this state.  It returns a
//               pointer to the ClipPlaneAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
70
inline ClipPlaneAttrib const *RenderState::get_clip_plane(void) const;

1771 10 get_shader 4 2909 23 RenderState::get_shader 0 1 165 509
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_shader
//       Access: Published
//  Description: This function is provided as an optimization, to
//               speed up the render-time checking for the existance
//               of a ShaderAttrib on this state.  It returns a
//               pointer to the ShaderAttrib, if there is one, or
//               NULL if there is not.
////////////////////////////////////////////////////////////////////
63
inline ShaderAttrib const *RenderState::get_shader(void) const;

1772 18 get_geom_rendering 4 2909 31 RenderState::get_geom_rendering 0 1 166 446
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
62
int RenderState::get_geom_rendering(int geom_rendering) const;

1773 14 get_class_type 4 2909 27 RenderState::get_class_type 0 1 167 0
52
static TypeHandle RenderState::get_class_type(void);

1774 4 make 4 2910 21 AlphaTestAttrib::make 0 1 168 269
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AlphaTestAttrib object.
////////////////////////////////////////////////////////////////////
120
static ConstPointerTo< RenderAttrib > AlphaTestAttrib::make(RenderAttrib::PandaCompareFunc mode, float reference_alpha);

1775 19 get_reference_alpha 4 2910 36 AlphaTestAttrib::get_reference_alpha 0 1 169 259
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha reference value.
////////////////////////////////////////////////////////////////////
62
inline float AlphaTestAttrib::get_reference_alpha(void) const;

1776 8 get_mode 4 2910 25 AlphaTestAttrib::get_mode 0 1 170 254
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc AlphaTestAttrib::get_mode(void) const;

1777 14 get_class_type 4 2910 31 AlphaTestAttrib::get_class_type 0 1 171 0
56
static TypeHandle AlphaTestAttrib::get_class_type(void);

1778 16 ~AlphaTestAttrib 4 2910 33 AlphaTestAttrib::~AlphaTestAttrib 0 0 0
40
AlphaTestAttrib::~AlphaTestAttrib(void);

1779 10 compare_to 4 2911 24 RenderEffect::compare_to 0 1 172 1347
// Filename: renderEffect.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffect
//               class because all equivalent RenderEffect objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderEffect::compare_to(RenderEffect const &other) const;

1780 6 output 4 2911 20 RenderEffect::output 0 1 173 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void RenderEffect::output(ostream &out) const;

1781 5 write 4 2911 19 RenderEffect::write 0 1 174 228
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void RenderEffect::write(ostream &out, int indent_level) const;

1782 15 get_num_effects 4 2911 29 RenderEffect::get_num_effects 0 1 175 402
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::get_num_effects
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffect
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffect::get_num_effects(void);

1783 12 list_effects 4 2911 26 RenderEffect::list_effects 0 1 176 421
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::list_effects
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffect::list_effects(ostream &out);

1784 16 validate_effects 4 2911 30 RenderEffect::validate_effects 0 1 177 480
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::validate_effects
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffect objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffect::validate_effects(void);

1785 14 get_class_type 4 2911 28 RenderEffect::get_class_type 0 1 178 0
53
static TypeHandle RenderEffect::get_class_type(void);

1786 10 operator < 4 2912 25 RenderEffects::operator < 0 1 179 675
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffectss, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffects
//               class because all equivalent RenderEffects objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
65
bool RenderEffects::operator <(RenderEffects const &other) const;

1787 8 is_empty 4 2912 23 RenderEffects::is_empty 0 1 180 275
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool RenderEffects::is_empty(void) const;

1788 15 get_num_effects 4 2912 30 RenderEffects::get_num_effects 0 1 181 309
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_effects
//       Access: Published
//  Description: Returns the number of separate effects indicated
//               in the state.
////////////////////////////////////////////////////////////////////
54
inline int RenderEffects::get_num_effects(void) const;

1789 10 get_effect 4 2912 25 RenderEffects::get_effect 0 2 182 183 644
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published
//  Description: Returns the nth effect in the state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published, Virtual
//  Description: Looks for a RenderEffect of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////
66
inline RenderEffect const *RenderEffects::get_effect(int n) const;

1790 11 find_effect 4 2912 26 RenderEffects::find_effect 0 1 184 378
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::find_effect
//       Access: Published
//  Description: Searches for an effect with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
////////////////////////////////////////////////////////////////////
54
int RenderEffects::find_effect(TypeHandle type) const;

1791 10 make_empty 4 2912 25 RenderEffects::make_empty 0 1 185 277
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make_empty
//       Access: Published, Static
//  Description: Returns a RenderEffects with no effects set.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderEffects > RenderEffects::make_empty(void);

1792 4 make 4 2912 19 RenderEffects::make 0 4 186 187 188 189 1096
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with one effect set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with two effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with three effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with four effects set.
////////////////////////////////////////////////////////////////////
87
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect);

1793 10 add_effect 4 2912 25 RenderEffects::add_effect 0 1 190 461
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::add_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the new RenderEffect
//               added.  If there is already a RenderEffect with the
//               same type, it is replaced.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< RenderEffects > RenderEffects::add_effect(RenderEffect const *effect) const;

1794 13 remove_effect 4 2912 28 RenderEffects::remove_effect 0 1 191 383
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::remove_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the indicated
//               RenderEffect removed.
////////////////////////////////////////////////////////////////////
84
ConstPointerTo< RenderEffects > RenderEffects::remove_effect(TypeHandle type) const;

1795 6 output 4 2912 21 RenderEffects::output 0 1 192 230
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
47
void RenderEffects::output(ostream &out) const;

1796 5 write 4 2912 20 RenderEffects::write 0 1 193 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
void RenderEffects::write(ostream &out, int indent_level) const;

1797 14 get_num_states 4 2912 29 RenderEffects::get_num_states 0 1 194 403
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffects
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffects::get_num_states(void);

1798 11 list_states 4 2912 26 RenderEffects::list_states 0 1 195 422
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderEffectss in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffects::list_states(ostream &out);

1799 15 validate_states 4 2912 30 RenderEffects::validate_states 0 1 196 481
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffects objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffects::validate_states(void);

1800 14 get_class_type 4 2912 29 RenderEffects::get_class_type 0 1 197 0
54
static TypeHandle RenderEffects::get_class_type(void);

1801 23 upcast_to_TypedWritable 12 2913 34 PandaNode::upcast_to_TypedWritable 0 1 287 38
upcast from PandaNode to TypedWritable
56
TypedWritable *PandaNode::upcast_to_TypedWritable(void);

1802 21 downcast_to_PandaNode 12 2914 36 TypedWritable::downcast_to_PandaNode 0 1 288 40
downcast from TypedWritable to PandaNode
54
PandaNode *TypedWritable::downcast_to_PandaNode(void);

1803 17 upcast_to_Namable 12 2913 28 PandaNode::upcast_to_Namable 0 1 289 32
upcast from PandaNode to Namable
44
Namable *PandaNode::upcast_to_Namable(void);

1804 21 downcast_to_PandaNode 12 2915 30 Namable::downcast_to_PandaNode 0 1 290 34
downcast from Namable to PandaNode
48
PandaNode *Namable::downcast_to_PandaNode(void);

1805 24 upcast_to_ReferenceCount 12 2913 35 PandaNode::upcast_to_ReferenceCount 0 1 291 39
upcast from PandaNode to ReferenceCount
58
ReferenceCount *PandaNode::upcast_to_ReferenceCount(void);

1806 9 PandaNode 4 2913 20 PandaNode::PandaNode 0 1 198 1769
//
// There are two different interfaces here for making and breaking
// parent-child connections: the fundamental PandaNode interface, via
// add_child() and remove_child() (and related functions), and the
// NodePath support interface, via attach(), detach(), and reparent().
// They both do essentially the same thing, but with slightly
// different inputs.  The PandaNode interfaces try to guess which
// NodePaths should be updated as a result of the scene graph change,
// while the NodePath interfaces already know.
//
// The NodePath support interface functions are strictly called from
// within the NodePath class, and are used to implement
// NodePath::reparent_to() and NodePath::remove_node(), etc.  The
// fundamental interface, on the other hand, is intended to be called
// directly by the user.
//
// The fundamental interface has a slightly lower overhead because it
// does not need to create a NodePathComponent chain where one does
// not already exist; however, the NodePath support interface is more
// useful when the NodePath already does exist, because it ensures
// that the particular NodePath calling it is kept appropriately
// up-to-date.
//
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
PandaNode::PandaNode(basic_string< char > const &name);

1807 10 ~PandaNode 4 2913 21 PandaNode::~PandaNode 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual PandaNode::~PandaNode(void);

1808 13 copy_subgraph 4 2913 24 PandaNode::copy_subgraph 0 1 199 535
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
////////////////////////////////////////////////////////////////////
60
PointerTo< PandaNode > PandaNode::copy_subgraph(void) const;

1809 15 get_num_parents 4 2913 26 PandaNode::get_num_parents 0 1 200 538
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
////////////////////////////////////////////////////////////////////
50
inline int PandaNode::get_num_parents(void) const;

1810 10 get_parent 4 2913 21 PandaNode::get_parent 0 1 201 303
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().
////////////////////////////////////////////////////////////////////
53
inline PandaNode *PandaNode::get_parent(int n) const;

1811 11 find_parent 4 2913 22 PandaNode::find_parent 0 1 202 325
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
////////////////////////////////////////////////////////////////////
57
inline int PandaNode::find_parent(PandaNode *node) const;

1812 16 get_num_children 4 2913 27 PandaNode::get_num_children 0 1 203 489
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
////////////////////////////////////////////////////////////////////
51
inline int PandaNode::get_num_children(void) const;

1813 9 get_child 4 2913 20 PandaNode::get_child 0 1 204 302
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().
////////////////////////////////////////////////////////////////////
52
inline PandaNode *PandaNode::get_child(int n) const;

1814 14 get_child_sort 4 2913 25 PandaNode::get_child_sort 0 1 205 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
////////////////////////////////////////////////////////////////////
50
inline int PandaNode::get_child_sort(int n) const;

1815 10 find_child 4 2913 21 PandaNode::find_child 0 1 206 322
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
56
inline int PandaNode::find_child(PandaNode *node) const;

1816 9 add_child 4 2913 20 PandaNode::add_child 0 2 207 208 567
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
////////////////////////////////////////////////////////////////////
65
void PandaNode::add_child(PandaNode *child_node, int sort = (0));

1817 12 remove_child 4 2913 23 PandaNode::remove_child 0 2 209 210 736
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
////////////////////////////////////////////////////////////////////
46
void PandaNode::remove_child(int child_index);

1818 13 replace_child 4 2913 24 PandaNode::replace_child 0 1 211 462
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child.
////////////////////////////////////////////////////////////////////
75
bool PandaNode::replace_child(PandaNode *orig_child, PandaNode *new_child);

1819 11 stash_child 4 2913 22 PandaNode::stash_child 0 2 212 213 1708
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
58
inline bool PandaNode::stash_child(PandaNode *child_node);

1820 13 unstash_child 4 2913 24 PandaNode::unstash_child 0 2 214 215 1640
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
60
inline bool PandaNode::unstash_child(PandaNode *child_node);

1821 15 get_num_stashed 4 2913 26 PandaNode::get_num_stashed 0 1 216 416
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
////////////////////////////////////////////////////////////////////
50
inline int PandaNode::get_num_stashed(void) const;

1822 11 get_stashed 4 2913 22 PandaNode::get_stashed 0 1 217 1333
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed node of this node.  See
//               get_num_stashed().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Public
//  Description: Returns an object that can be used to walk through
//               the list of stashed children of the node.  When you
//               intend to visit multiple children, using this is
//               slightly faster than calling get_stashed() directly
//               on the PandaNode, since this object keeps the
//               PipelineCycler open the whole time.
//
//               However, this object does not protect you from
//               self-modifying loops (e.g. adding or removing
//               stashed during traversal).  Furthermore, if Panda is
//               compiled with pipelining enabled, this method is
//               compiled to behave exactly as get_stashed_copy(): it
//               returns a copy.  This is intended to reduce the risk
//               of deadlocks.
////////////////////////////////////////////////////////////////////
54
inline PandaNode *PandaNode::get_stashed(int n) const;

1823 16 get_stashed_sort 4 2913 27 PandaNode::get_stashed_sort 0 1 218 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
////////////////////////////////////////////////////////////////////
52
inline int PandaNode::get_stashed_sort(int n) const;

1824 12 find_stashed 4 2913 23 PandaNode::find_stashed 0 1 219 334
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
58
inline int PandaNode::find_stashed(PandaNode *node) const;

1825 11 add_stashed 4 2913 22 PandaNode::add_stashed 0 2 220 221 675
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
67
void PandaNode::add_stashed(PandaNode *child_node, int sort = (0));

1826 14 remove_stashed 4 2913 25 PandaNode::remove_stashed 0 1 222 269
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
////////////////////////////////////////////////////////////////////
48
void PandaNode::remove_stashed(int child_index);

1827 19 remove_all_children 4 2913 30 PandaNode::remove_all_children 0 1 223 428
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
42
void PandaNode::remove_all_children(void);

1828 14 steal_children 4 2913 25 PandaNode::steal_children 0 1 224 300
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
////////////////////////////////////////////////////////////////////
49
void PandaNode::steal_children(PandaNode *other);

1829 13 copy_children 4 2913 24 PandaNode::copy_children 0 1 225 329
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
////////////////////////////////////////////////////////////////////
48
void PandaNode::copy_children(PandaNode *other);

1830 10 set_attrib 4 2913 21 PandaNode::set_attrib 0 2 226 227 475
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
75
void PandaNode::set_attrib(RenderAttrib const *attrib, int override = (0));

1831 10 get_attrib 4 2913 21 PandaNode::get_attrib 0 1 228 538
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
72
inline RenderAttrib const *PandaNode::get_attrib(TypeHandle type) const;

1832 10 has_attrib 4 2913 21 PandaNode::has_attrib 0 1 229 368
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
57
inline bool PandaNode::has_attrib(TypeHandle type) const;

1833 12 clear_attrib 4 2913 23 PandaNode::clear_attrib 0 1 230 451
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
46
void PandaNode::clear_attrib(TypeHandle type);

1834 10 set_effect 4 2913 21 PandaNode::set_effect 0 1 231 386
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
55
void PandaNode::set_effect(RenderEffect const *effect);

1835 10 get_effect 4 2913 21 PandaNode::get_effect 0 1 232 338
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
72
inline RenderEffect const *PandaNode::get_effect(TypeHandle type) const;

1836 10 has_effect 4 2913 21 PandaNode::has_effect 0 1 233 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
57
inline bool PandaNode::has_effect(TypeHandle type) const;

1837 12 clear_effect 4 2913 23 PandaNode::clear_effect 0 1 234 299
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
46
void PandaNode::clear_effect(TypeHandle type);

1838 9 set_state 4 2913 20 PandaNode::set_state 0 1 235 620
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
////////////////////////////////////////////////////////////////////
52
void PandaNode::set_state(RenderState const *state);

1839 9 get_state 4 2913 20 PandaNode::get_state 0 1 236 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
////////////////////////////////////////////////////////////////////
59
inline RenderState const *PandaNode::get_state(void) const;

1840 11 clear_state 4 2913 22 PandaNode::clear_state 0 1 237 438
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
////////////////////////////////////////////////////////////////////
41
inline void PandaNode::clear_state(void);

1841 11 set_effects 4 2913 22 PandaNode::set_effects 0 1 238 433
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
58
void PandaNode::set_effects(RenderEffects const *effects);

1842 11 get_effects 4 2913 22 PandaNode::get_effects 0 1 239 308
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
63
inline RenderEffects const *PandaNode::get_effects(void) const;

1843 13 clear_effects 4 2913 24 PandaNode::clear_effects 0 1 240 267
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
43
inline void PandaNode::clear_effects(void);

1844 13 set_transform 4 2913 24 PandaNode::set_transform 0 1 241 402
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
////////////////////////////////////////////////////////////////////
63
void PandaNode::set_transform(TransformState const *transform);

1845 13 get_transform 4 2913 24 PandaNode::get_transform 0 1 242 435
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
////////////////////////////////////////////////////////////////////
66
inline TransformState const *PandaNode::get_transform(void) const;

1846 15 clear_transform 4 2913 26 PandaNode::clear_transform 0 1 243 303
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
////////////////////////////////////////////////////////////////////
45
inline void PandaNode::clear_transform(void);

1847 18 set_prev_transform 4 2913 29 PandaNode::set_prev_transform 0 1 244 436
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////
68
void PandaNode::set_prev_transform(TransformState const *transform);

1848 18 get_prev_transform 4 2913 29 PandaNode::get_prev_transform 0 1 245 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////
71
inline TransformState const *PandaNode::get_prev_transform(void) const;

1849 20 reset_prev_transform 4 2913 31 PandaNode::reset_prev_transform 0 1 246 400
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the "previous" transform on this node to be
//               the same as the current transform.  This is not the
//               same as clearing it to identity.
////////////////////////////////////////////////////////////////////
43
void PandaNode::reset_prev_transform(void);

1850 7 set_tag 4 2913 18 PandaNode::set_tag 0 1 247 701
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
92
void PandaNode::set_tag(basic_string< char > const &key, basic_string< char > const &value);

1851 7 get_tag 4 2913 18 PandaNode::get_tag 0 1 248 434
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > PandaNode::get_tag(basic_string< char > const &key) const;

1852 7 has_tag 4 2913 18 PandaNode::has_tag 0 1 249 405
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
70
inline bool PandaNode::has_tag(basic_string< char > const &key) const;

1853 9 clear_tag 4 2913 20 PandaNode::clear_tag 0 1 250 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
59
void PandaNode::clear_tag(basic_string< char > const &key);

1854 14 set_python_tag 4 2913 25 PandaNode::set_python_tag 0 1 251 777
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               is similar to set_tag(), except it can store any
//               Python object instead of just a string.  However, the
//               Python object is not recorded to a bam file.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
81
void PandaNode::set_python_tag(basic_string< char > const &key, PyObject *value);

1855 14 get_python_tag 4 2913 25 PandaNode::get_python_tag 0 1 252 407
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns None.
////////////////////////////////////////////////////////////////////
75
PyObject *PandaNode::get_python_tag(basic_string< char > const &key) const;

1856 14 has_python_tag 4 2913 25 PandaNode::has_python_tag 0 1 253 410
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that object
//               is None), or false if no object has been set.
////////////////////////////////////////////////////////////////////
70
bool PandaNode::has_python_tag(basic_string< char > const &key) const;

1857 16 clear_python_tag 4 2913 27 PandaNode::clear_python_tag 0 1 254 444
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on
//               this particular node.  After a call to
//               clear_python_tag(), has_python_tag() will return
//               false for the indicated key.
////////////////////////////////////////////////////////////////////
66
void PandaNode::clear_python_tag(basic_string< char > const &key);

1858 8 has_tags 4 2913 19 PandaNode::has_tags 0 1 255 340
// HAVE_PYTHON

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tags
//       Access: Published
//  Description: Returns true if the node has any tags (or any Python
//               tags) at all, false if it has none.
////////////////////////////////////////////////////////////////////
44
inline bool PandaNode::has_tags(void) const;

1859 9 copy_tags 4 2913 20 PandaNode::copy_tags 0 1 256 460
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_tags
//       Access: Published
//  Description: Copies all of the tags stored on the other node onto
//               this node.  If a particular tag exists on both nodes,
//               the contents of this node's value is replaced by that
//               of the other.
////////////////////////////////////////////////////////////////////
44
void PandaNode::copy_tags(PandaNode *other);

1860 9 list_tags 4 2913 20 PandaNode::list_tags 0 2 257 258 660
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
////////////////////////////////////////////////////////////////////
94
void PandaNode::list_tags(ostream &out, basic_string< char > const &separator = ("\n")) const;

1861 15 get_overall_bit 4 2913 26 PandaNode::get_overall_bit 0 1 259 457
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_overall_bit
//       Access: Published, Static
//  Description: Returns the special bit that, when specifically
//               cleared in the node's DrawMask, indicates that the
//               node is hidden to all cameras, regardless of the
//               remaining DrawMask bits.
////////////////////////////////////////////////////////////////////
75
static inline BitMask< unsigned int, 32 > PandaNode::get_overall_bit(void);

1862 17 is_overall_hidden 4 2913 28 PandaNode::is_overall_hidden 0 1 260 337
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_overall_hidden
//       Access: Published, Static
//  Description: Returns true if the node has been hidden to all
//               cameras by clearing its overall bit.
////////////////////////////////////////////////////////////////////
53
inline bool PandaNode::is_overall_hidden(void) const;

1863 18 set_overall_hidden 4 2913 29 PandaNode::set_overall_hidden 0 1 261 750
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_overall_hidden
//       Access: Published
//  Description: Sets or clears the hidden flag.  When the hidden flag
//               is true, the node and all of its children are
//               invisible to all cameras, regardless of the setting
//               of any draw masks.  Setting the hidden flag to false
//               restores the previous visibility as established by
//               the draw masks.
//
//               This actually works by twiddling the reserved
//               _overall_bit in the node's draw mask, which has
//               special meaning.
////////////////////////////////////////////////////////////////////
63
inline void PandaNode::set_overall_hidden(bool overall_hidden);

1864 16 adjust_draw_mask 4 2913 27 PandaNode::adjust_draw_mask 0 1 262 1941
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::adjust_draw_mask
//       Access: Published
//  Description: Adjusts the hide/show bits of this particular node.
//
//               These three parameters can be used to adjust the
//               _draw_control_mask and _draw_show_mask independently,
//               which work together to provide per-camera visibility
//               for the node and its descendents.
//
//               _draw_control_mask indicates the bits in
//               _draw_show_mask that are significant.  Each different
//               bit corresponds to a different camera (and these bits
//               are assigned via Camera::set_camera_mask()).
//
//               Where _draw_control_mask has a 1 bit, a 1 bit in
//               _draw_show_mask indicates the node is visible to that
//               camera, and a 0 bit indicates the node is hidden to
//               that camera.  Where _draw_control_mask is 0, the node
//               is hidden only if a parent node is hidden.
//
//               The meaning of the three parameters is as follows:
//
//               * Wherever show_mask is 1, _draw_show_mask and
//               _draw_control_mask will be set 1.  Thus, show_mask
//               indicates the set of cameras to which the node should
//               be shown.
//
//               * Wherever hide_mask is 1, _draw_show_mask will be
//               set 0 and _draw_control_mask will be set 1.  Thus,
//               hide_mask indicates the set of cameras from which the
//               node should be hidden.
//
//               * Wherever clear_mask is 1, _draw_control_mask will
//               be set 0.  Thus, clear_mask indicates the set of
//               cameras from which the hidden state should be
//               inherited from a parent.
////////////////////////////////////////////////////////////////////
151
void PandaNode::adjust_draw_mask(BitMask< unsigned int, 32 > show_mask, BitMask< unsigned int, 32 > hide_mask, BitMask< unsigned int, 32 > clear_mask);

1865 21 get_draw_control_mask 4 2913 32 PandaNode::get_draw_control_mask 0 1 263 347
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in draw_show_mask that are
//               considered meaningful.  See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PandaNode::get_draw_control_mask(void) const;

1866 18 get_draw_show_mask 4 2913 29 PandaNode::get_draw_show_mask 0 1 264 321
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_show_mask
//       Access: Published
//  Description: Returns the hide/show bits of this particular node.
//               See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
77
inline BitMask< unsigned int, 32 > PandaNode::get_draw_show_mask(void) const;

1867 25 get_net_draw_control_mask 4 2913 36 PandaNode::get_net_draw_control_mask 0 1 265 681
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in get_net_draw_show_mask()
//               that have been explicitly set via adjust_draw_mask(),
//               rather than implicitly inherited.
//
//               A 1 bit in any position of this mask indicates that
//               (a) this node has renderable children, and (b) some
//               child of this node has made an explicit hide() or
//               show_through() call for the corresponding bit.
////////////////////////////////////////////////////////////////////
77
BitMask< unsigned int, 32 > PandaNode::get_net_draw_control_mask(void) const;

1868 22 get_net_draw_show_mask 4 2913 33 PandaNode::get_net_draw_show_mask 0 1 266 943
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_show_mask
//       Access: Published
//  Description: Returns the union of all draw_show_mask values--of
//               renderable nodes only--at this level and below.  If
//               any bit in this mask is 0, there is no reason to
//               traverse below this node for a camera with the
//               corresponding camera_mask.
//
//               The bits in this mask that do not correspond to a 1
//               bit in the net_draw_control_mask are meaningless (and
//               will be set to 1).  For bits that *do* correspond to
//               a 1 bit in the net_draw_control_mask, a 1 bit
//               indicates that at least one child should be visible,
//               while a 0 bit indicates that all children are hidden.
////////////////////////////////////////////////////////////////////
74
BitMask< unsigned int, 32 > PandaNode::get_net_draw_show_mask(void) const;

1869 21 set_into_collide_mask 4 2913 32 PandaNode::set_into_collide_mask 0 1 267 882
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  
//
//               This specifies the set of bits that must be shared
//               with a CollisionNode's "from" CollideMask in order
//               for the CollisionNode to detect a collision with this
//               particular node.
//
//               The actual CollideMask that will be set is masked by
//               the return value from get_legal_collide_mask().
//               Thus, the into_collide_mask cannot be set to anything
//               other than nonzero except for those types of nodes
//               that can be collided into, such as CollisionNodes and
//               GeomNodes.
////////////////////////////////////////////////////////////////////
72
void PandaNode::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

1870 21 get_into_collide_mask 4 2913 32 PandaNode::get_into_collide_mask 0 1 268 278
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the "into" collide mask for this node.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PandaNode::get_into_collide_mask(void) const;

1871 22 get_legal_collide_mask 4 2913 33 PandaNode::get_legal_collide_mask 0 1 269 618
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_legal_collide_mask
//       Access: Published, Virtual
//  Description: Returns the subset of CollideMask bits that may be
//               set for this particular type of PandaNode.  For most
//               nodes, this is 0; it doesn't make sense to set a
//               CollideMask for most kinds of nodes.
//
//               For nodes that can be collided with, such as GeomNode
//               and CollisionNode, this returns all bits on.
////////////////////////////////////////////////////////////////////
82
virtual BitMask< unsigned int, 32 > PandaNode::get_legal_collide_mask(void) const;

1872 20 get_net_collide_mask 4 2913 31 PandaNode::get_net_collide_mask 0 1 270 346
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
////////////////////////////////////////////////////////////////////
72
BitMask< unsigned int, 32 > PandaNode::get_net_collide_mask(void) const;

1873 19 get_off_clip_planes 4 2913 30 PandaNode::get_off_clip_planes 0 1 271 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderAttrib > PandaNode::get_off_clip_planes(void) const;

1874 6 output 4 2913 17 PandaNode::output 0 1 272 226
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
51
virtual void PandaNode::output(ostream &out) const;

1875 5 write 4 2913 16 PandaNode::write 0 1 273 225
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
68
virtual void PandaNode::write(ostream &out, int indent_level) const;

1876 2 ls 4 2913 13 PandaNode::ls 0 1 274 295
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::ls
//       Access: Published
//  Description: Lists all the nodes at and below the current path
//               hierarchically.
////////////////////////////////////////////////////////////////////
64
inline void PandaNode::ls(ostream &out, int indent_level) const;

1877 10 set_bounds 4 2913 21 PandaNode::set_bounds 0 1 275 1452
// A node has three bounding volumes: an "external" bounding volume
// that represents the node and all of its children, an "internal"
// bounding volume which represents only the node itself (and is
// usually empty, unless a specific node type sets it otherwise),
// and a "user" bounding volume which is specified by the user.
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed according to the contents of the node
//               itself, for nodes like GeomNodes and TextNodes that
//               contain substance (but the bounding volume will still
//               be automatically expanded to include its children).
//
//               Call clear_bounds() if you would like to return the
//               bounding volume to its default behavior later.
////////////////////////////////////////////////////////////////////
57
void PandaNode::set_bounds(BoundingVolume const *volume);

1878 9 set_bound 4 2913 20 PandaNode::set_bound 0 1 276 904
// A node has three bounding volumes: an "external" bounding volume
// that represents the node and all of its children, an "internal"
// bounding volume which represents only the node itself (and is
// usually empty, unless a specific node type sets it otherwise),
// and a "user" bounding volume which is specified by the user.
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bound
//       Access: Published
//  Description: Deprecated.  Use set_bounds() instead.
////////////////////////////////////////////////////////////////////
56
void PandaNode::set_bound(BoundingVolume const *volume);

1879 12 clear_bounds 4 2913 23 PandaNode::clear_bounds 0 1 277 441
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the node's bounding volume
//               to be automatically computed once more based on the
//               contents of the node.
////////////////////////////////////////////////////////////////////
42
inline void PandaNode::clear_bounds(void);

1880 10 get_bounds 4 2913 21 PandaNode::get_bounds 0 1 278 454
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
////////////////////////////////////////////////////////////////////
67
ConstPointerTo< BoundingVolume > PandaNode::get_bounds(void) const;

1881 19 get_internal_bounds 4 2913 30 PandaNode::get_internal_bounds 0 1 279 892
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Protected
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.
////////////////////////////////////////////////////////////////////
83
inline ConstPointerTo< BoundingVolume > PandaNode::get_internal_bounds(void) const;

1882 17 mark_bounds_stale 4 2913 28 PandaNode::mark_bounds_stale 0 1 280 1453
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Protected
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CDataBounds, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CDataBounds, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
////////////////////////////////////////////////////////////////////
46
void PandaNode::mark_bounds_stale(void) const;

1883 9 set_final 4 2913 20 PandaNode::set_final 0 1 281 995
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_final
//       Access: Published
//  Description: Sets the "final" flag on this PandaNode.  If
//               this is true, than no bounding volume need be tested
//               below it; a positive intersection with this node's
//               bounding volume is deemed to be a positive
//               intersection with all geometry inside.
//
//               This is useful to quickly force a larger bounding
//               volume around a node when the GeomNodes themselves
//               are inaccurate for some reason, without forcing a
//               recompute of every nested bounding volume.  It's also
//               helpful when the bounding volume is tricked by some
//               special properties, like billboards, that may move
//               geometry out of its bounding volume otherwise.
////////////////////////////////////////////////////////////////////
44
inline void PandaNode::set_final(bool flag);

1884 8 is_final 4 2913 19 PandaNode::is_final 0 1 282 429
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
////////////////////////////////////////////////////////////////////
44
inline bool PandaNode::is_final(void) const;

1885 12 is_geom_node 4 2913 23 PandaNode::is_geom_node 0 1 283 570
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_geom_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from GeomNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(GeomNode::get_class_type()), since this
//               test is so important to rendering.
////////////////////////////////////////////////////////////////////
49
virtual bool PandaNode::is_geom_node(void) const;

1886 11 is_lod_node 4 2913 22 PandaNode::is_lod_node 0 1 284 504
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_lod_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from LODNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(LODNode::get_class_type()).
////////////////////////////////////////////////////////////////////
48
virtual bool PandaNode::is_lod_node(void) const;

1887 8 as_light 4 2913 19 PandaNode::as_light 0 1 285 379
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::as_light
//       Access: Published, Virtual
//  Description: Cross-casts the node to a Light pointer, if it is one
//               of the four kinds of Light nodes, or returns NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
41
virtual Light *PandaNode::as_light(void);

1888 14 get_class_type 4 2913 25 PandaNode::get_class_type 0 1 286 0
50
static TypeHandle PandaNode::get_class_type(void);

1889 8 GeomNode 4 2917 18 GeomNode::GeomNode 0 1 292 447
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
53
GeomNode::GeomNode(basic_string< char > const &name);

1890 13 get_num_geoms 4 2917 23 GeomNode::get_num_geoms 0 1 293 260
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_num_geoms
//       Access: Public
//  Description: Returns the number of geoms in the node.
////////////////////////////////////////////////////////////////////
47
inline int GeomNode::get_num_geoms(void) const;

1891 8 get_geom 4 2917 18 GeomNode::get_geom 0 1 294 439
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom
//       Access: Public
//  Description: Returns the nth geom of the node.  This object should
//               not be modified, since the same object might be
//               shared between multiple different GeomNodes, but see
//               get_unique_geom().
////////////////////////////////////////////////////////////////////
51
inline Geom const *GeomNode::get_geom(int n) const;

1892 15 get_unique_geom 4 2917 25 GeomNode::get_unique_geom 0 1 295 304
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_unique_geom
//       Access: Public
//  Description: This method is deprecated; you should call
//               modify_geom() instead.
////////////////////////////////////////////////////////////////////
46
inline Geom *GeomNode::get_unique_geom(int n);

1893 11 modify_geom 4 2917 21 GeomNode::modify_geom 0 1 296 1028
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::modify_geom
//       Access: Public
//  Description: Returns the nth geom of the node, suitable for
//               modifying it.  If the nth Geom has multiple reference
//               counts to it, reassigns it to an identical copy
//               first, and returns the new copy--this provides a
//               "copy on write" that ensures that the Geom that is
//               returned is unique to this GeomNode and is not shared
//               with any other GeomNodes.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
42
inline Geom *GeomNode::modify_geom(int n);

1894 14 get_geom_state 4 2917 24 GeomNode::get_geom_state 0 1 297 582
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom_state
//       Access: Public
//  Description: Returns the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
////////////////////////////////////////////////////////////////////
64
inline RenderState const *GeomNode::get_geom_state(int n) const;

1895 14 set_geom_state 4 2917 24 GeomNode::set_geom_state 0 1 298 962
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom_state
//       Access: Public
//  Description: Changes the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
70
inline void GeomNode::set_geom_state(int n, RenderState const *state);

1896 8 add_geom 4 2917 18 GeomNode::add_geom 0 2 299 300 432
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
////////////////////////////////////////////////////////////////////
81
void GeomNode::add_geom(Geom *geom, RenderState const *state = ((make_empty())));

1897 14 add_geoms_from 4 2917 24 GeomNode::add_geoms_from 0 1 301 336
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geoms_from
//       Access: Published
//  Description: Copies the Geoms (and their associated RenderStates)
//               from the indicated GeomNode into this one.
////////////////////////////////////////////////////////////////////
53
void GeomNode::add_geoms_from(GeomNode const *other);

1898 8 set_geom 4 2917 18 GeomNode::set_geom 0 1 302 708
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom
//       Access: Public
//  Description: Replaces the nth Geom of the node with a new pointer.
//               There must already be a Geom in this slot.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
43
void GeomNode::set_geom(int n, Geom *geom);

1899 11 remove_geom 4 2917 21 GeomNode::remove_geom 0 1 303 256
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_geom
//       Access: Published
//  Description: Removes the nth geom from the node.
////////////////////////////////////////////////////////////////////
41
inline void GeomNode::remove_geom(int n);

1900 16 remove_all_geoms 4 2917 26 GeomNode::remove_all_geoms 0 1 304 270
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_all_geoms
//       Access: Published
//  Description: Removes all the geoms from the node at once.
////////////////////////////////////////////////////////////////////
45
inline void GeomNode::remove_all_geoms(void);

1901 11 check_valid 4 2917 21 GeomNode::check_valid 0 1 305 453
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::check_valid
//       Access: Published
//  Description: Verifies that the each Geom within the GeomNode
//               reference vertices that actually exist within its
//               GeomVertexData.  Returns true if the GeomNode appears
//               to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool GeomNode::check_valid(void) const;

1902 5 unify 4 2917 15 GeomNode::unify 0 1 306 1033
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::unify
//       Access: Published
//  Description: Attempts to unify all of the Geoms contained within
//               this node into a single Geom, or at least as few
//               Geoms as possible.  In turn, the individual
//               GeomPrimitives contained within each resulting Geom
//               are also unified.  The goal is to reduce the number
//               of GeomPrimitives within the node as far as possible.
//               This may result in composite primitives, such as
//               triangle strips and triangle fans, being decomposed
//               into triangles.  See also Geom::unify().
//
//               In order for this to be successful, the primitives
//               must reference the same GeomVertexData, have the same
//               fundamental primitive type, and have compatible shade
//               models.
////////////////////////////////////////////////////////////////////
27
void GeomNode::unify(void);

1903 11 write_geoms 4 2917 21 GeomNode::write_geoms 0 1 307 294
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_geoms
//       Access: Published
//  Description: Writes a short description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
65
void GeomNode::write_geoms(ostream &out, int indent_level) const;

1904 13 write_verbose 4 2917 23 GeomNode::write_verbose 0 1 308 299
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_verbose
//       Access: Published
//  Description: Writes a detailed description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
67
void GeomNode::write_verbose(ostream &out, int indent_level) const;

1905 24 get_default_collide_mask 4 2917 34 GeomNode::get_default_collide_mask 0 1 309 323
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               GeomNodes.
////////////////////////////////////////////////////////////////////
83
static inline BitMask< unsigned int, 32 > GeomNode::get_default_collide_mask(void);

1906 14 get_class_type 4 2917 24 GeomNode::get_class_type 0 1 310 0
49
static TypeHandle GeomNode::get_class_type(void);

1907 24 upcast_to_ReferenceCount 12 2918 31 Light::upcast_to_ReferenceCount 0 1 318 35
upcast from Light to ReferenceCount
54
ReferenceCount *Light::upcast_to_ReferenceCount(void);

1908 6 ~Light 4 2918 13 Light::~Light 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: Light::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
28
virtual Light::~Light(void);

1909 7 as_node 4 2918 14 Light::as_node 0 1 311 0
44
virtual PandaNode *Light::as_node(void) = 0;

1910 9 get_color 4 2918 16 Light::get_color 0 1 312 253
////////////////////////////////////////////////////////////////////
//     Function: Light::get_color
//       Access: Published
//  Description: Returns the basic color of the light.
////////////////////////////////////////////////////////////////////
54
inline LVecBase4f const &Light::get_color(void) const;

1911 9 set_color 4 2918 16 Light::set_color 0 1 313 250
////////////////////////////////////////////////////////////////////
//     Function: Light::set_color
//       Access: Published
//  Description: Sets the basic color of the light.
////////////////////////////////////////////////////////////////////
54
inline void Light::set_color(LVecBase4f const &color);

1912 12 set_priority 4 2918 19 Light::set_priority 0 1 314 740
////////////////////////////////////////////////////////////////////
//     Function: Light::set_priority
//       Access: Published
//  Description: Changes the relative importance of this light
//               relative to the other lights that are applied
//               simultaneously.
//
//               The priority number is used to decide which of the
//               requested lights are to be selected for rendering
//               when more lights are requested than the hardware will
//               support.  The highest-priority n lights are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
46
inline void Light::set_priority(int priority);

1913 12 get_priority 4 2918 19 Light::get_priority 0 1 315 305
////////////////////////////////////////////////////////////////////
//     Function: Light::get_priority
//       Access: Published
//  Description: Returns the priority associated with this light.  See
//               set_priority().
////////////////////////////////////////////////////////////////////
43
inline int Light::get_priority(void) const;

1914 18 get_class_priority 4 2918 25 Light::get_class_priority 0 1 316 0
54
virtual int Light::get_class_priority(void) const = 0;

1915 14 get_class_type 4 2918 21 Light::get_class_type 0 1 317 0
46
static TypeHandle Light::get_class_type(void);

1916 15 upcast_to_Light 12 2919 26 LightNode::upcast_to_Light 0 1 323 30
upcast from LightNode to Light
40
Light *LightNode::upcast_to_Light(void);

1917 21 downcast_to_LightNode 12 2918 28 Light::downcast_to_LightNode 0 1 324 32
downcast from Light to LightNode
46
LightNode *Light::downcast_to_LightNode(void);

1918 19 upcast_to_PandaNode 12 2919 30 LightNode::upcast_to_PandaNode 0 1 325 34
upcast from LightNode to PandaNode
48
PandaNode *LightNode::upcast_to_PandaNode(void);

1919 21 downcast_to_LightNode 12 2913 32 PandaNode::downcast_to_LightNode 0 1 326 36
downcast from PandaNode to LightNode
50
LightNode *PandaNode::downcast_to_LightNode(void);

1920 6 output 4 2919 17 LightNode::output 0 1 319 312
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual void LightNode::output(ostream &out) const;

1921 5 write 4 2919 16 LightNode::write 0 2 320 321 311
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
74
virtual void LightNode::write(ostream &out, int indent_level = (0)) const;

1922 14 get_class_type 4 2919 25 LightNode::get_class_type 0 1 322 0
50
static TypeHandle LightNode::get_class_type(void);

1923 10 ~LightNode 4 2919 21 LightNode::~LightNode 0 0 0
28
LightNode::~LightNode(void);

1924 12 AmbientLight 4 2920 26 AmbientLight::AmbientLight 0 1 327 602
////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
61
AmbientLight::AmbientLight(basic_string< char > const &name);

1925 14 get_class_type 4 2920 28 AmbientLight::get_class_type 0 1 328 0
53
static TypeHandle AmbientLight::get_class_type(void);

1926 13 ~AmbientLight 4 2920 27 AmbientLight::~AmbientLight 0 0 0
34
AmbientLight::~AmbientLight(void);

1927 4 make 4 2921 21 AntialiasAttrib::make 0 1 329 1917
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AntialiasAttrib object.
//
//               The mode should be either M_none, M_auto, or a union
//               of any or all of M_point, M_line, M_polygon, and
//               M_multisample.  Also, in addition to the above
//               choices, it may include either of M_better of
//               M_faster to specify a performance/quality tradeoff
//               hint.
//
//               If M_none is specified, no antialiasing is performed.  
//
//               If M_multisample is specified, it means to use the
//               special framebuffer multisample bits for
//               antialiasing, if it is available.  If so, the
//               M_point, M_line, and M_polygon modes are ignored.
//               This advanced antialiasing mode is only available on
//               certain graphics hardware.  If it is not available,
//               the M_multisample bit is ignored (and the other modes
//               may be used instead, if specified).
//
//               M_point, M_line, and/or M_polygon specify
//               per-primitive smoothing.  When enabled, M_point and
//               M_line may force transparency on.  M_polygon requires
//               a frame buffer that includes an alpha channel, and it
//               works best if the primitives are sorted
//               front-to-back.
//
//               If M_auto is specified, M_multisample is selected if
//               it is available, otherwise M_polygon is selected,
//               unless drawing lines or points, in which case M_line
//               or M_point is selected (these two generally produce
//               better results than M_multisample)
////////////////////////////////////////////////////////////////////
85
static ConstPointerTo< RenderAttrib > AntialiasAttrib::make(unsigned short int mode);

1928 8 get_mode 4 2921 25 AntialiasAttrib::get_mode 0 1 330 262
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode
//       Access: Published
//  Description: Returns the specified antialias mode.
////////////////////////////////////////////////////////////////////
64
inline unsigned short int AntialiasAttrib::get_mode(void) const;

1929 13 get_mode_type 4 2921 30 AntialiasAttrib::get_mode_type 0 1 331 465
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_type
//       Access: Published
//  Description: Returns the specified antialias mode, with the
//               quality bits masked out.  This therefore indicates
//               only the requested type of antialiasing: M_none,
//               M_auto, or some specific combination.
////////////////////////////////////////////////////////////////////
69
inline unsigned short int AntialiasAttrib::get_mode_type(void) const;

1930 16 get_mode_quality 4 2921 33 AntialiasAttrib::get_mode_quality 0 1 332 478
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_quality
//       Access: Published
//  Description: Returns the specified antialias mode, with the type
//               bits masked out.  This therefore indicates only the
//               requested quality settings: one of M_faster,
//               M_better, M_dont_care, or zero (unspecified).
////////////////////////////////////////////////////////////////////
72
inline unsigned short int AntialiasAttrib::get_mode_quality(void) const;

1931 14 get_class_type 4 2921 31 AntialiasAttrib::get_class_type 0 1 333 0
56
static TypeHandle AntialiasAttrib::get_class_type(void);

1932 16 ~AntialiasAttrib 4 2921 33 AntialiasAttrib::~AntialiasAttrib 0 0 0
40
AntialiasAttrib::~AntialiasAttrib(void);

1933 9 PlaneNode 4 2923 20 PlaneNode::PlaneNode 0 2 334 335 446
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
85
PlaneNode::PlaneNode(basic_string< char > const &name, Planef const &plane = ((())));

1934 9 set_plane 4 2923 20 PlaneNode::set_plane 0 1 336 289
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_plane
//       Access: Public
//  Description: Sets the particular plane represented by the
//               PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline void PlaneNode::set_plane(Planef const &plane);

1935 9 get_plane 4 2923 20 PlaneNode::get_plane 0 1 337 264
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_plane
//       Access: Public
//  Description: Returns the plane represented by the PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline Planef const &PlaneNode::get_plane(void) const;

1936 13 set_viz_scale 4 2923 24 PlaneNode::set_viz_scale 0 1 338 339
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_viz_scale
//       Access: Public
//  Description: Specifies the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
54
inline void PlaneNode::set_viz_scale(float viz_scale);

1937 13 get_viz_scale 4 2923 24 PlaneNode::get_viz_scale 0 1 339 337
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_viz_scale
//       Access: Public
//  Description: Returns the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
50
inline float PlaneNode::get_viz_scale(void) const;

1938 12 set_priority 4 2923 23 PlaneNode::set_priority 0 1 340 784
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_priority
//       Access: Published
//  Description: Changes the relative importance of this PlaneNode
//               (when it is used as a clip plane) relative to the
//               other clip planes that are applied simultaneously.
//
//               The priority number is used to decide which of the
//               requested clip planes are to be activated when more
//               clip planes are requested than the hardware will
//               support.  The highest-priority n planes are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
50
inline void PlaneNode::set_priority(int priority);

1939 12 get_priority 4 2923 23 PlaneNode::get_priority 0 1 341 314
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_priority
//       Access: Published
//  Description: Returns the priority associated with this clip
//               plane.  See set_priority().
////////////////////////////////////////////////////////////////////
47
inline int PlaneNode::get_priority(void) const;

1940 14 get_class_type 4 2923 25 PlaneNode::get_class_type 0 1 342 0
50
static TypeHandle PlaneNode::get_class_type(void);

1941 10 ~PlaneNode 4 2923 21 PlaneNode::~PlaneNode 0 0 0
28
PlaneNode::~PlaneNode(void);

1942 4 make 4 2924 24 TransparencyAttrib::make 0 1 343 275
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TransparencyAttrib object.
////////////////////////////////////////////////////////////////////
94
static ConstPointerTo< RenderAttrib > TransparencyAttrib::make(TransparencyAttrib::Mode mode);

1943 8 get_mode 4 2924 28 TransparencyAttrib::get_mode 0 1 344 258
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::get_mode
//       Access: Published
//  Description: Returns the transparency mode.
////////////////////////////////////////////////////////////////////
73
inline TransparencyAttrib::Mode TransparencyAttrib::get_mode(void) const;

1944 14 get_class_type 4 2924 34 TransparencyAttrib::get_class_type 0 1 345 0
59
static TypeHandle TransparencyAttrib::get_class_type(void);

1945 19 ~TransparencyAttrib 4 2924 39 TransparencyAttrib::~TransparencyAttrib 0 0 0
46
TransparencyAttrib::~TransparencyAttrib(void);

1946 8 NodePath 4 2926 18 NodePath::NodePath 0 5 346 347 348 349 350 2622
// Filename: nodePath.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Default Constructor
//       Access: Published
//  Description: This constructs an empty NodePath with no nodes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
32
inline NodePath::NodePath(void);

1947 8 any_path 4 2926 18 NodePath::any_path 0 1 351 531
////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
////////////////////////////////////////////////////////////////////
59
static inline NodePath NodePath::any_path(PandaNode *node);

1948 10 operator = 4 2926 20 NodePath::operator = 0 1 352 233
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void NodePath::operator =(NodePath const &copy);

1949 9 not_found 4 2926 19 NodePath::not_found 0 1 353 318
////////////////////////////////////////////////////////////////////
//     Function: NodePath::not_found named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_not_found error type
//               set.
////////////////////////////////////////////////////////////////////
49
static inline NodePath NodePath::not_found(void);

1950 7 removed 4 2926 17 NodePath::removed 0 1 354 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::removed named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_removed error type
//               set.
////////////////////////////////////////////////////////////////////
47
static inline NodePath NodePath::removed(void);

1951 4 fail 4 2926 14 NodePath::fail 0 1 355 308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::fail named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_fail error type
//               set.
////////////////////////////////////////////////////////////////////
44
static inline NodePath NodePath::fail(void);

1952 20 set_max_search_depth 4 2926 30 NodePath::set_max_search_depth 0 1 356 1267
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_max_search_depth
//       Access: Published, Static
//  Description: Certain operations, such as find() or
//               find_all_matches(), require a traversal of the scene
//               graph to search for the target node or nodes.  This
//               traversal does not attempt to detect cycles, so an
//               arbitrary cap is set on the depth of the traversal as
//               a poor man's cycle detection, in the event that a
//               cycle has inadvertently been introduced into the
//               scene graph.
//
//               There may be other reasons you'd want to truncate a
//               search before the bottom of the scene graph has been
//               reached.  In any event, this function sets the limit
//               on the number of levels that a traversal will
//               continue, and hence the maximum length of a path that
//               may be returned by a traversal.
//
//               This is a static method, and so changing this
//               parameter affects all of the NodePaths in the
//               universe.
////////////////////////////////////////////////////////////////////
72
static inline void NodePath::set_max_search_depth(int max_search_depth);

1953 20 get_max_search_depth 4 2926 30 NodePath::get_max_search_depth 0 1 357 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_max_search_depth
//       Access: Published, Static
//  Description: Returns the current setting of the search depth
//               limit.  See set_max_search_depth.
////////////////////////////////////////////////////////////////////
55
static inline int NodePath::get_max_search_depth(void);

1954 8 is_empty 4 2926 18 NodePath::is_empty 0 1 358 309
// Methods to query a NodePath's contents.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_empty
//       Access: Published
//  Description: Returns true if the NodePath contains no nodes.
////////////////////////////////////////////////////////////////////
43
inline bool NodePath::is_empty(void) const;

1955 12 is_singleton 4 2926 22 NodePath::is_singleton 0 1 359 338
// Methods to query a NodePath's contents.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
////////////////////////////////////////////////////////////////////
47
inline bool NodePath::is_singleton(void) const;

1956 13 get_num_nodes 4 2926 23 NodePath::get_num_nodes 0 1 360 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
////////////////////////////////////////////////////////////////////
40
int NodePath::get_num_nodes(void) const;

1957 8 get_node 4 2926 18 NodePath::get_node 0 1 361 697
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
////////////////////////////////////////////////////////////////////
47
PandaNode *NodePath::get_node(int index) const;

1958 14 get_error_type 4 2926 24 NodePath::get_error_type 0 1 362 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_error_type
//       Access: Published
//  Description: If is_empty() is true, this returns a code that
//               represents the reason why the NodePath is empty.
////////////////////////////////////////////////////////////////////
64
inline NodePath::ErrorType NodePath::get_error_type(void) const;

1959 12 get_top_node 4 2926 22 NodePath::get_top_node 0 1 363 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
////////////////////////////////////////////////////////////////////
46
PandaNode *NodePath::get_top_node(void) const;

1960 7 get_top 4 2926 17 NodePath::get_top 0 1 364 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
////////////////////////////////////////////////////////////////////
39
NodePath NodePath::get_top(void) const;

1961 4 node 4 2926 14 NodePath::node 0 1 365 254
////////////////////////////////////////////////////////////////////
//     Function: NodePath::node
//       Access: Published
//  Description: Returns the referenced node of the path.
////////////////////////////////////////////////////////////////////
45
inline PandaNode *NodePath::node(void) const;

1962 7 get_key 4 2926 17 NodePath::get_key 0 1 366 988
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_key
//       Access: Published
//  Description: Returns an integer that is guaranteed to be the same
//               for all NodePaths that represent the same node
//               instance, and different for all NodePaths that
//               represent a different node instance.  
//
//               The same key will be returned for a particular
//               instance as long as at least one NodePath exists that
//               represents that instance; if all NodePaths for a
//               particular instance destruct and a new one is later
//               created, it may have a different index.  However, a
//               given key will never be reused for a different
//               instance (unless the app has been running long enough
//               that we overflow the integer key value).
////////////////////////////////////////////////////////////////////
41
inline int NodePath::get_key(void) const;

1963 13 is_same_graph 4 2926 23 NodePath::is_same_graph 0 1 367 526
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
////////////////////////////////////////////////////////////////////
65
inline bool NodePath::is_same_graph(NodePath const &other) const;

1964 14 is_ancestor_of 4 2926 24 NodePath::is_ancestor_of 0 1 368 387
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
////////////////////////////////////////////////////////////////////
66
inline bool NodePath::is_ancestor_of(NodePath const &other) const;

1965 19 get_common_ancestor 4 2926 29 NodePath::get_common_ancestor 0 1 369 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
////////////////////////////////////////////////////////////////////
75
inline NodePath NodePath::get_common_ancestor(NodePath const &other) const;

1966 12 get_children 4 2926 22 NodePath::get_children 0 1 370 386
// Methods that return collections of NodePaths derived from or
// related to this one.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
////////////////////////////////////////////////////////////////////
54
NodePathCollection NodePath::get_children(void) const;

1967 16 get_num_children 4 2926 26 NodePath::get_num_children 0 1 371 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
////////////////////////////////////////////////////////////////////
50
inline int NodePath::get_num_children(void) const;

1968 9 get_child 4 2926 19 NodePath::get_child 0 1 372 305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
////////////////////////////////////////////////////////////////////
49
inline NodePath NodePath::get_child(int n) const;

1969 20 get_stashed_children 4 2926 30 NodePath::get_stashed_children 0 1 373 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
////////////////////////////////////////////////////////////////////
62
NodePathCollection NodePath::get_stashed_children(void) const;

1970 10 has_parent 4 2926 20 NodePath::has_parent 0 1 374 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
////////////////////////////////////////////////////////////////////
45
inline bool NodePath::has_parent(void) const;

1971 10 get_parent 4 2926 20 NodePath::get_parent 0 1 375 448
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
////////////////////////////////////////////////////////////////////
49
inline NodePath NodePath::get_parent(void) const;

1972 8 get_sort 4 2926 18 NodePath::get_sort 0 1 376 513
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
////////////////////////////////////////////////////////////////////
35
int NodePath::get_sort(void) const;

1973 4 find 4 2926 14 NodePath::find 0 1 377 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find
//       Access: Published
//  Description: Searches for a node below the referenced node that
//               matches the indicated string.  Returns the shortest
//               match found, if any, or an empty NodePath if no match
//               can be found.
////////////////////////////////////////////////////////////////////
64
NodePath NodePath::find(basic_string< char > const &path) const;

1974 12 find_path_to 4 2926 22 NodePath::find_path_to 0 1 378 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_path_to
//       Access: Published
//  Description: Searches for the indicated node below this node and
//               returns the shortest NodePath that connects them.
////////////////////////////////////////////////////////////////////
55
NodePath NodePath::find_path_to(PandaNode *node) const;

1975 16 find_all_matches 4 2926 26 NodePath::find_all_matches 0 1 379 419
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with this NodePath and can be extended by
//               path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
86
NodePathCollection NodePath::find_all_matches(basic_string< char > const &path) const;

1976 17 find_all_paths_to 4 2926 27 NodePath::find_all_paths_to 0 1 380 394
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_paths_to
//       Access: Published
//  Description: Returns the set of all NodePaths that extend from
//               this NodePath down to the indicated node.  The
//               shortest paths will be listed first.
////////////////////////////////////////////////////////////////////
70
NodePathCollection NodePath::find_all_paths_to(PandaNode *node) const;

1977 11 reparent_to 4 2926 21 NodePath::reparent_to 0 2 381 382 821
// Methods that actually move nodes around in the scene graph.  The
// optional "sort" parameter can be used to force a particular
// ordering between sibling nodes, useful when dealing with LOD's
// and similar switch nodes.  If the sort value is the same, nodes
// will be arranged in the order they were added.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.  
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
////////////////////////////////////////////////////////////////////
66
void NodePath::reparent_to(NodePath const &other, int sort = (0));

1978 15 wrt_reparent_to 4 2926 25 NodePath::wrt_reparent_to 0 2 383 384 829
// Methods that actually move nodes around in the scene graph.  The
// optional "sort" parameter can be used to force a particular
// ordering between sibling nodes, useful when dealing with LOD's
// and similar switch nodes.  If the sort value is the same, nodes
// will be arranged in the order they were added.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
////////////////////////////////////////////////////////////////////
70
void NodePath::wrt_reparent_to(NodePath const &other, int sort = (0));

1979 11 instance_to 4 2926 21 NodePath::instance_to 0 2 385 386 1258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
////////////////////////////////////////////////////////////////////
76
NodePath NodePath::instance_to(NodePath const &other, int sort = (0)) const;

1980 19 instance_under_node 4 2926 29 NodePath::instance_under_node 0 2 387 388 516
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
////////////////////////////////////////////////////////////////////
118
NodePath NodePath::instance_under_node(NodePath const &other, basic_string< char > const &name, int sort = (0)) const;

1981 7 copy_to 4 2926 17 NodePath::copy_to 0 2 389 390 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
////////////////////////////////////////////////////////////////////
72
NodePath NodePath::copy_to(NodePath const &other, int sort = (0)) const;

1982 15 attach_new_node 4 2926 25 NodePath::attach_new_node 0 4 391 392 393 394 1179
////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
////////////////////////////////////////////////////////////////////
74
NodePath NodePath::attach_new_node(PandaNode *node, int sort = (0)) const;

1983 11 remove_node 4 2926 21 NodePath::remove_node 0 1 395 1171
////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
33
void NodePath::remove_node(void);

1984 11 detach_node 4 2926 21 NodePath::detach_node 0 1 396 1153
////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
33
void NodePath::detach_node(void);

1985 6 output 4 2926 16 NodePath::output 0 1 397 389
// Handy ways to look at what's there, and other miscellaneous
// operations.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::output
//       Access: Published
//  Description: Writes a sensible description of the NodePath to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
42
void NodePath::output(ostream &out) const;

1986 2 ls 4 2926 12 NodePath::ls 0 3 398 399 400 532
////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////
37
inline void NodePath::ls(void) const;

1987 10 reverse_ls 4 2926 20 NodePath::reverse_ls 0 3 401 402 403 548
////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////
45
inline void NodePath::reverse_ls(void) const;

1988 9 get_state 4 2926 19 NodePath::get_state 0 2 404 405 703
// Aggregate transform and state information.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
////////////////////////////////////////////////////////////////////
51
RenderState const *NodePath::get_state(void) const;

1989 9 set_state 4 2926 19 NodePath::set_state 0 2 406 407 748
// Aggregate transform and state information.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
58
inline void NodePath::set_state(RenderState const *state);

1990 13 get_net_state 4 2926 23 NodePath::get_net_state 0 1 408 272
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
////////////////////////////////////////////////////////////////////
73
inline ConstPointerTo< RenderState > NodePath::get_net_state(void) const;

1991 10 set_attrib 4 2926 20 NodePath::set_attrib 0 2 409 410 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
81
inline void NodePath::set_attrib(RenderAttrib const *attrib, int priority = (0));

1992 10 get_attrib 4 2926 20 NodePath::get_attrib 0 1 411 537
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
71
inline RenderAttrib const *NodePath::get_attrib(TypeHandle type) const;

1993 10 has_attrib 4 2926 20 NodePath::has_attrib 0 1 412 367
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_attrib(TypeHandle type) const;

1994 12 clear_attrib 4 2926 22 NodePath::clear_attrib 0 1 413 450
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_attrib(TypeHandle type);

1995 10 set_effect 4 2926 20 NodePath::set_effect 0 1 414 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
61
inline void NodePath::set_effect(RenderEffect const *effect);

1996 10 get_effect 4 2926 20 NodePath::get_effect 0 1 415 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
71
inline RenderEffect const *NodePath::get_effect(TypeHandle type) const;

1997 10 has_effect 4 2926 20 NodePath::has_effect 0 1 416 364
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_effect(TypeHandle type) const;

1998 12 clear_effect 4 2926 22 NodePath::clear_effect 0 1 417 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_effect(TypeHandle type);

1999 11 set_effects 4 2926 21 NodePath::set_effects 0 1 418 432
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
64
inline void NodePath::set_effects(RenderEffects const *effects);

2000 11 get_effects 4 2926 21 NodePath::get_effects 0 1 419 307
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
62
inline RenderEffects const *NodePath::get_effects(void) const;

2001 13 clear_effects 4 2926 23 NodePath::clear_effects 0 1 420 266
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
42
inline void NodePath::clear_effects(void);

2002 13 get_transform 4 2926 23 NodePath::get_transform 0 2 421 422 667
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
58
TransformState const *NodePath::get_transform(void) const;

2003 15 clear_transform 4 2926 25 NodePath::clear_transform 0 2 423 424 691
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
////////////////////////////////////////////////////////////////////
44
inline void NodePath::clear_transform(void);

2004 13 set_transform 4 2926 23 NodePath::set_transform 0 2 425 426 721
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
69
inline void NodePath::set_transform(TransformState const *transform);

2005 17 get_net_transform 4 2926 27 NodePath::get_net_transform 0 1 427 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
////////////////////////////////////////////////////////////////////
80
inline ConstPointerTo< TransformState > NodePath::get_net_transform(void) const;

2006 18 get_prev_transform 4 2926 28 NodePath::get_prev_transform 0 2 428 429 823
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
////////////////////////////////////////////////////////////////////
63
TransformState const *NodePath::get_prev_transform(void) const;

2007 18 set_prev_transform 4 2926 28 NodePath::set_prev_transform 0 2 430 431 898
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
////////////////////////////////////////////////////////////////////
74
inline void NodePath::set_prev_transform(TransformState const *transform);

2008 22 get_net_prev_transform 4 2926 32 NodePath::get_net_prev_transform 0 1 432 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
////////////////////////////////////////////////////////////////////
85
inline ConstPointerTo< TransformState > NodePath::get_net_prev_transform(void) const;

2009 7 set_pos 4 2926 17 NodePath::set_pos 0 4 433 434 435 436 2052
// Methods that get and set the matrix transform: pos, hpr, scale,
// in the local coordinate system.

// Methods that get and set the matrix transforms relative to some
// other node in the scene graph.  These perform an implicit wrt().

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//     See Also: NodePath::set_fluid_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
57
inline void NodePath::set_pos(float x, float y, float z);

2010 5 set_x 4 2926 15 NodePath::set_x 0 2 437 438 0
30
void NodePath::set_x(float x);

2011 5 set_y 4 2926 15 NodePath::set_y 0 2 439 440 0
30
void NodePath::set_y(float y);

2012 5 set_z 4 2926 15 NodePath::set_z 0 2 441 442 0
30
void NodePath::set_z(float z);

2013 13 set_fluid_pos 4 2926 23 NodePath::set_fluid_pos 0 4 443 444 445 446 1737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//     See Also: NodePath::set_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
63
inline void NodePath::set_fluid_pos(float x, float y, float z);

2014 11 set_fluid_x 4 2926 21 NodePath::set_fluid_x 0 2 447 448 0
36
void NodePath::set_fluid_x(float x);

2015 11 set_fluid_y 4 2926 21 NodePath::set_fluid_y 0 2 449 450 0
36
void NodePath::set_fluid_y(float y);

2016 11 set_fluid_z 4 2926 21 NodePath::set_fluid_z 0 2 451 452 0
36
void NodePath::set_fluid_z(float z);

2017 7 get_pos 4 2926 17 NodePath::get_pos 0 2 453 454 587
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Retrieves the translation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Returns the relative position of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
39
LPoint3f NodePath::get_pos(void) const;

2018 5 get_x 4 2926 15 NodePath::get_x 0 2 455 456 0
41
inline float NodePath::get_x(void) const;

2019 5 get_y 4 2926 15 NodePath::get_y 0 2 457 458 0
41
inline float NodePath::get_y(void) const;

2020 5 get_z 4 2926 15 NodePath::get_z 0 2 459 460 0
41
inline float NodePath::get_z(void) const;

2021 13 get_pos_delta 4 2926 23 NodePath::get_pos_delta 0 2 461 462 1701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame, as seen in the indicated node's coordinate
//               space.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////
46
LVector3f NodePath::get_pos_delta(void) const;

2022 7 set_hpr 4 2926 17 NodePath::set_hpr 0 4 463 464 465 466 1260
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
57
inline void NodePath::set_hpr(float h, float p, float r);

2023 5 set_h 4 2926 15 NodePath::set_h 0 2 467 468 0
30
void NodePath::set_h(float h);

2024 5 set_p 4 2926 15 NodePath::set_p 0 2 469 470 0
30
void NodePath::set_p(float p);

2025 5 set_r 4 2926 15 NodePath::set_r 0 2 471 472 0
30
void NodePath::set_r(float r);

2026 7 get_hpr 4 2926 17 NodePath::get_hpr 0 2 473 474 583
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
41
LVecBase3f NodePath::get_hpr(void) const;

2027 5 get_h 4 2926 15 NodePath::get_h 0 2 475 476 0
41
inline float NodePath::get_h(void) const;

2028 5 get_p 4 2926 15 NodePath::get_p 0 2 477 478 0
41
inline float NodePath::get_p(void) const;

2029 5 get_r 4 2926 15 NodePath::get_r 0 2 479 480 0
41
inline float NodePath::get_r(void) const;

2030 8 set_quat 4 2926 18 NodePath::set_quat 0 2 481 482 631
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
50
void NodePath::set_quat(LQuaternionf const &quat);

2031 8 get_quat 4 2926 18 NodePath::get_quat 0 2 483 484 585
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
44
LQuaternionf NodePath::get_quat(void) const;

2032 9 set_scale 4 2926 19 NodePath::set_scale 0 6 485 486 487 488 489 490 1570
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
45
inline void NodePath::set_scale(float scale);

2033 6 set_sx 4 2926 16 NodePath::set_sx 0 2 491 492 0
32
void NodePath::set_sx(float sx);

2034 6 set_sy 4 2926 16 NodePath::set_sy 0 2 493 494 0
32
void NodePath::set_sy(float sy);

2035 6 set_sz 4 2926 16 NodePath::set_sz 0 2 495 496 0
32
void NodePath::set_sz(float sz);

2036 9 get_scale 4 2926 19 NodePath::get_scale 0 2 497 498 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Retrieves the scale component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
43
LVecBase3f NodePath::get_scale(void) const;

2037 6 get_sx 4 2926 16 NodePath::get_sx 0 2 499 500 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sx(void) const;

2038 6 get_sy 4 2926 16 NodePath::get_sy 0 2 501 502 0
42
inline float NodePath::get_sy(void) const;

2039 6 get_sz 4 2926 16 NodePath::get_sz 0 2 503 504 0
42
inline float NodePath::get_sz(void) const;

2040 9 set_shear 4 2926 19 NodePath::set_shear 0 4 505 506 507 508 1270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation, rotation, and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
68
inline void NodePath::set_shear(float shxy, float shxz, float shyz);

2041 8 set_shxy 4 2926 18 NodePath::set_shxy 0 2 509 510 0
36
void NodePath::set_shxy(float shxy);

2042 8 set_shxz 4 2926 18 NodePath::set_shxz 0 2 511 512 0
36
void NodePath::set_shxz(float shxz);

2043 8 set_shyz 4 2926 18 NodePath::set_shyz 0 2 513 514 0
36
void NodePath::set_shyz(float shyz);

2044 9 get_shear 4 2926 19 NodePath::get_shear 0 2 515 516 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Retrieves the shear component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
43
LVecBase3f NodePath::get_shear(void) const;

2045 8 get_shxy 4 2926 18 NodePath::get_shxy 0 2 517 518 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
44
inline float NodePath::get_shxy(void) const;

2046 8 get_shxz 4 2926 18 NodePath::get_shxz 0 2 519 520 0
44
inline float NodePath::get_shxz(void) const;

2047 8 get_shyz 4 2926 18 NodePath::get_shyz 0 2 521 522 0
44
inline float NodePath::get_shyz(void) const;

2048 11 set_pos_hpr 4 2926 21 NodePath::set_pos_hpr 0 4 523 524 525 526 1308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
88
inline void NodePath::set_pos_hpr(float x, float y, float z, float h, float p, float r);

2049 12 set_pos_quat 4 2926 22 NodePath::set_pos_quat 0 2 527 528 655
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
77
void NodePath::set_pos_quat(LVecBase3f const &pos, LQuaternionf const &quat);

2050 13 set_hpr_scale 4 2926 23 NodePath::set_hpr_scale 0 4 529 530 531 532 1612
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////
93
inline void NodePath::set_hpr_scale(float h, float p, float r, float sx, float sy, float sz);

2051 14 set_quat_scale 4 2926 24 NodePath::set_quat_scale 0 2 533 534 809
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_quat_scale, is the preferred way to update a
//               transform when both quat and scale are to be changed.
////////////////////////////////////////////////////////////////////
81
void NodePath::set_quat_scale(LQuaternionf const &quat, LVecBase3f const &scale);

2052 17 set_pos_hpr_scale 4 2926 27 NodePath::set_pos_hpr_scale 0 4 535 536 537 538 1452
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
124
inline void NodePath::set_pos_hpr_scale(float x, float y, float z, float h, float p, float r, float sx, float sy, float sz);

2053 18 set_pos_quat_scale 4 2926 28 NodePath::set_pos_quat_scale 0 2 539 540 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
108
void NodePath::set_pos_quat_scale(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale);

2054 23 set_pos_hpr_scale_shear 4 2926 33 NodePath::set_pos_hpr_scale_shear 0 2 541 542 735
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
135
void NodePath::set_pos_hpr_scale_shear(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale, LVecBase3f const &shear);

2055 24 set_pos_quat_scale_shear 4 2926 34 NodePath::set_pos_quat_scale_shear 0 2 543 544 737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
139
void NodePath::set_pos_quat_scale_shear(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale, LVecBase3f const &shear);

2056 7 set_mat 4 2926 17 NodePath::set_mat 0 2 545 546 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Directly sets an arbitrary 4x4 transform matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Converts the indicated matrix from the other's
//               coordinate space to the local coordinate space, and
//               applies it to the node.
////////////////////////////////////////////////////////////////////
45
void NodePath::set_mat(LMatrix4f const &mat);

2057 9 clear_mat 4 2926 19 NodePath::clear_mat 0 1 547 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_mat
//       Access: Published
//  Description: Completely removes any transform from the referenced
//               node.
////////////////////////////////////////////////////////////////////
38
inline void NodePath::clear_mat(void);

2058 7 has_mat 4 2926 17 NodePath::has_mat 0 1 548 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_mat
//       Access: Published
//  Description: Returns true if a non-identity transform matrix has
//               been applied to the referenced node, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool NodePath::has_mat(void) const;

2059 7 get_mat 4 2926 17 NodePath::get_mat 0 2 549 550 767
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the transform matrix that has been applied to
//               the referenced node, or the identity matrix if no
//               matrix has been applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the coordinate
//               space of the bottom node, relative to the other
//               path's bottom node's coordinate space.
////////////////////////////////////////////////////////////////////
54
inline LMatrix4f const &NodePath::get_mat(void) const;

2060 7 look_at 4 2926 17 NodePath::look_at 0 7 551 552 553 554 555 556 557 1555
////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space.  This
//               will overwrite any previously existing scale on the
//               node, although it will preserve any translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it rotates to
//               face the indicated point in space, which is relative
//               to the other NodePath.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
////////////////////////////////////////////////////////////////////
57
inline void NodePath::look_at(float x, float y, float z);

2061 8 heads_up 4 2926 18 NodePath::heads_up 0 7 558 559 560 561 562 563 564 1490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////
58
inline void NodePath::heads_up(float x, float y, float z);

2062 18 get_relative_point 4 2926 28 NodePath::get_relative_point 0 1 565 396
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_point
//       Access: Published
//  Description: Given that the indicated point is in the coordinate
//               system of the other node, returns the same point in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
92
LPoint3f NodePath::get_relative_point(NodePath const &other, LVecBase3f const &point) const;

2063 19 get_relative_vector 4 2926 29 NodePath::get_relative_vector 0 1 566 399
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_vector
//       Access: Published
//  Description: Given that the indicated vector is in the coordinate
//               system of the other node, returns the same vector in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
92
LVector3f NodePath::get_relative_vector(NodePath const &other, LVecBase3f const &vec) const;

2064 12 get_distance 4 2926 22 NodePath::get_distance 0 1 567 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_distance
//       Access: Published
//  Description: Returns the straight-line distance between this
//               referenced node's coordinate frame's origin, and that
//               of the other node's origin.
////////////////////////////////////////////////////////////////////
65
inline float NodePath::get_distance(NodePath const &other) const;

2065 9 set_color 4 2926 19 NodePath::set_color 0 5 568 569 570 571 572 1005
// Methods that affect appearance of geometry: color, texture, etc.
// These affect the state at the bottom level only.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////
87
void NodePath::set_color(float r, float g, float b, float a = (1), int priority = (0));

2066 13 set_color_off 4 2926 23 NodePath::set_color_off 0 2 573 574 565
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
////////////////////////////////////////////////////////////////////
49
void NodePath::set_color_off(int priority = (0));

2067 11 clear_color 4 2926 21 NodePath::clear_color 0 1 575 463
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color
//       Access: Published
//  Description: Completely removes any color adjustment from the node.
//               This allows the natural color of the geometry, or
//               whatever color transitions might be otherwise
//               affecting the geometry, to show instead.
////////////////////////////////////////////////////////////////////
33
void NodePath::clear_color(void);

2068 9 has_color 4 2926 19 NodePath::has_color 0 1 576 312
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color
//       Access: Published
//  Description: Returns true if a color has been applied to the given
//               node, false otherwise.
////////////////////////////////////////////////////////////////////
37
bool NodePath::has_color(void) const;

2069 9 get_color 4 2926 19 NodePath::get_color 0 1 577 329
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color
//       Access: Published
//  Description: Returns the color that has been assigned to the node,
//               or black if no color has been assigned.
////////////////////////////////////////////////////////////////////
43
LVecBase4f NodePath::get_color(void) const;

2070 15 has_color_scale 4 2926 25 NodePath::has_color_scale 0 1 578 453
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color_scale
//       Access: Published
//  Description: Returns true if a color scale has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that color at this node might have been
//               scaled by an ancestor node.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_color_scale(void) const;

2071 17 clear_color_scale 4 2926 27 NodePath::clear_color_scale 0 1 579 499
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color_scale
//       Access: Published
//  Description: Completely removes any color scale from the
//               referenced node.  This is preferable to simply
//               setting the color scale to identity, as it also
//               removes the overhead associated with having a color
//               scale at all.
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_color_scale(void);

2072 15 set_color_scale 4 2926 25 NodePath::set_color_scale 0 4 580 581 582 583 608
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////
76
void NodePath::set_color_scale(LVecBase4f const &scale, int priority = (0));

2073 19 set_color_scale_off 4 2926 29 NodePath::set_color_scale_off 0 2 584 585 900
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
////////////////////////////////////////////////////////////////////
55
void NodePath::set_color_scale_off(int priority = (0));

2074 15 set_alpha_scale 4 2926 25 NodePath::set_alpha_scale 0 2 586 587 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
////////////////////////////////////////////////////////////////////
64
void NodePath::set_alpha_scale(float scale, int priority = (0));

2075 19 set_all_color_scale 4 2926 29 NodePath::set_all_color_scale 0 2 588 589 469
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
////////////////////////////////////////////////////////////////////
68
void NodePath::set_all_color_scale(float scale, int priority = (0));

2076 6 set_sr 4 2926 16 NodePath::set_sr 0 1 590 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sr
//       Access: Published
//  Description: Sets the red scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sr(float sr);

2077 6 set_sg 4 2926 16 NodePath::set_sg 0 1 591 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sg
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sg(float sg);

2078 6 set_sb 4 2926 16 NodePath::set_sb 0 1 592 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sb
//       Access: Published
//  Description: Sets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sb(float sb);

2079 6 set_sa 4 2926 16 NodePath::set_sa 0 1 593 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sa
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sa(float sa);

2080 15 get_color_scale 4 2926 25 NodePath::get_color_scale 0 1 594 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color_scale
//       Access: Published
//  Description: Returns the complete color scale vector that has been
//               applied to this node via a previous call to
//               set_color_scale() and/or set_alpha_scale(), or all
//               1's (identity) if no scale has been applied to this
//               particular node.
////////////////////////////////////////////////////////////////////
56
LVecBase4f const &NodePath::get_color_scale(void) const;

2081 6 get_sr 4 2926 16 NodePath::get_sr 0 1 595 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sr
//       Access: Published
//  Description: Gets the red scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sr(void) const;

2082 6 get_sg 4 2926 16 NodePath::get_sg 0 1 596 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sg
//       Access: Published
//  Description: Gets the green scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sg(void) const;

2083 6 get_sb 4 2926 16 NodePath::get_sb 0 1 597 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sb
//       Access: Published
//  Description: Gets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sb(void) const;

2084 6 get_sa 4 2926 16 NodePath::get_sa 0 1 598 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sa
//       Access: Published
//  Description: Gets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sa(void) const;

2085 9 set_light 4 2926 19 NodePath::set_light 0 2 599 600 593
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
////////////////////////////////////////////////////////////////////
68
void NodePath::set_light(NodePath const &light, int priority = (0));

2086 13 set_light_off 4 2926 23 NodePath::set_light_off 0 4 601 602 603 604 1449
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
49
void NodePath::set_light_off(int priority = (0));

2087 11 clear_light 4 2926 21 NodePath::clear_light 0 2 605 606 702
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Completely removes any lighting operations that may
//               have been set via set_light() or set_light_off()
//               from this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Removes any reference to the indicated Light or
//               PolylightNode from the NodePath.
////////////////////////////////////////////////////////////////////
33
void NodePath::clear_light(void);

2088 9 has_light 4 2926 19 NodePath::has_light 0 1 607 460
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light
//       Access: Published
//  Description: Returns true if the indicated Light or PolylightNode
//               has been specifically enabled on this particular
//               node.  This means that someone called set_light() on
//               this node with the indicated light.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_light(NodePath const &light) const;

2089 13 has_light_off 4 2926 23 NodePath::has_light_off 0 2 608 609 1022
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if all Lights have been specifically
//               disabled on this particular node.  This means that
//               someone called set_light_off() on this node with no
//               parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if the indicated Light has been
//               specifically disabled on this particular node.  This
//               means that someone called set_light_off() on this
//               node with the indicated light.
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_light_off(void) const;

2090 14 set_clip_plane 4 2926 24 NodePath::set_clip_plane 0 2 610 611 609
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
////////////////////////////////////////////////////////////////////
78
void NodePath::set_clip_plane(NodePath const &clip_plane, int priority = (0));

2091 18 set_clip_plane_off 4 2926 28 NodePath::set_clip_plane_off 0 4 612 613 614 615 1434
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
////////////////////////////////////////////////////////////////////
54
void NodePath::set_clip_plane_off(int priority = (0));

2092 16 clear_clip_plane 4 2926 26 NodePath::clear_clip_plane 0 2 616 617 706
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Completely removes any clip planes that may have been
//               set via set_clip_plane() or set_clip_plane_off() from
//               this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Removes any reference to the indicated clipping plane
//               from the NodePath.
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_clip_plane(void);

2093 14 has_clip_plane 4 2926 24 NodePath::has_clip_plane 0 1 618 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically applied to this particular node.  This
//               means that someone called set_clip_plane() on this
//               node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
64
bool NodePath::has_clip_plane(NodePath const &clip_plane) const;

2094 18 has_clip_plane_off 4 2926 28 NodePath::has_clip_plane_off 0 2 619 620 935
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if all clipping planes have been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with no parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
46
bool NodePath::has_clip_plane_off(void) const;

2095 7 set_bin 4 2926 17 NodePath::set_bin 0 2 621 622 1343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
////////////////////////////////////////////////////////////////////
97
void NodePath::set_bin(basic_string< char > const &bin_name, int draw_order, int priority = (0));

2096 9 clear_bin 4 2926 19 NodePath::clear_bin 0 1 623 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_bin
//       Access: Published
//  Description: Completely removes any bin adjustment that may have
//               been set via set_bin() from this particular node.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_bin(void);

2097 7 has_bin 4 2926 17 NodePath::has_bin 0 1 624 359
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_bin
//       Access: Published
//  Description: Returns true if the node has been assigned to the a
//               particular rendering bin via set_bin(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_bin(void) const;

2098 12 get_bin_name 4 2926 22 NodePath::get_bin_name 0 1 625 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin that this particular node
//               was assigned to via set_bin(), or the empty string if
//               no bin was assigned.  See set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
56
basic_string< char > NodePath::get_bin_name(void) const;

2099 18 get_bin_draw_order 4 2926 28 NodePath::get_bin_draw_order 0 1 626 444
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_draw_order
//       Access: Published
//  Description: Returns the drawing order associated with the bin
//               that this particular node was assigned to via
//               set_bin(), or 0 if no bin was assigned.  See
//               set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
45
int NodePath::get_bin_draw_order(void) const;

2100 11 set_texture 4 2926 21 NodePath::set_texture 0 4 627 628 629 630 1335
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
////////////////////////////////////////////////////////////////////
61
void NodePath::set_texture(Texture *tex, int priority = (0));

2101 15 set_texture_off 4 2926 25 NodePath::set_texture_off 0 4 631 632 633 634 1182
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////
51
void NodePath::set_texture_off(int priority = (0));

2102 13 clear_texture 4 2926 23 NodePath::clear_texture 0 2 635 636 824
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Completely removes any texture adjustment that may
//               have been set via set_texture() or set_texture_off()
//               from this particular node.  This allows whatever
//               textures might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Removes any reference to the indicated texture stage
//               from the NodePath.
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_texture(void);

2103 11 has_texture 4 2926 21 NodePath::has_texture 0 2 637 638 1172
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to this
//               particular node via set_texture(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               texturing, as there may be a texture in effect from a
//               higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               enabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture() on this node with the indicated stage
//               name, or the stage_name is the default stage_name,
//               and someone called set_texture() on this node.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_texture(void) const;

2104 15 has_texture_off 4 2926 25 NodePath::has_texture_off 0 2 639 640 1184
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node via
//               set_texture_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered untextured, as there may be a
//               texture in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture_off() on this node with the indicated
//               stage name, or that someone called set_texture_off()
//               on this node to remove all stages.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_texture_off(void) const;

2105 11 get_texture 4 2926 21 NodePath::get_texture 0 2 641 642 1012
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the base-level texture that has been set on
//               this particular node, or NULL if no texture has been
//               set.  This is not necessarily the texture that will
//               be applied to the geometry at or below this level, as
//               another texture at a higher or lower level may
//               override.
//
//               See also find_texture().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the texture that has been set on the
//               indicated stage for this particular node, or NULL if
//               no texture has been set for this stage.
////////////////////////////////////////////////////////////////////
43
Texture *NodePath::get_texture(void) const;

2106 10 set_shader 4 2926 20 NodePath::set_shader 0 2 643 644 220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
void NodePath::set_shader(Shader *sha, int priority = (0));

2107 14 set_shader_off 4 2926 24 NodePath::set_shader_off 0 2 645 646 224
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void NodePath::set_shader_off(int priority = (0));

2108 12 clear_shader 4 2926 22 NodePath::clear_shader 0 1 647 222
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
void NodePath::clear_shader(void);

2109 16 set_shader_input 4 2926 26 NodePath::set_shader_input 0 25 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 2050
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
void NodePath::set_shader_input(ShaderInput const *inp);

2110 18 clear_shader_input 4 2926 28 NodePath::clear_shader_input 0 2 673 674 458
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void NodePath::clear_shader_input(InternalName *id);

2111 10 get_shader 4 2926 20 NodePath::get_shader 0 1 675 220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
Shader const *NodePath::get_shader(void) const;

2112 16 get_shader_input 4 2926 26 NodePath::get_shader_input 0 2 676 677 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
ShaderInput const *NodePath::get_shader_input(InternalName *id) const;

2113 17 set_tex_transform 4 2926 27 NodePath::set_tex_transform 0 2 678 679 672
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////
87
void NodePath::set_tex_transform(TextureStage *stage, TransformState const *transform);

2114 19 clear_tex_transform 4 2926 29 NodePath::clear_tex_transform 0 2 680 681 595
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes all texture matrices from the current node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes the texture matrix on the current node for
//               the given stage.
////////////////////////////////////////////////////////////////////
41
void NodePath::clear_tex_transform(void);

2115 17 has_tex_transform 4 2926 27 NodePath::has_tex_transform 0 1 682 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_transform
//       Access: Published
//  Description: Returns true if there is an explicit texture matrix
//               on the current node for the given stage.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_transform(TextureStage *stage) const;

2116 17 get_tex_transform 4 2926 27 NodePath::get_tex_transform 0 2 683 684 750
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, or identity transform if there is no
//               explicit transform set for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, relative to the other node.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< TransformState > NodePath::get_tex_transform(TextureStage *stage) const;

2117 14 set_tex_offset 4 2926 24 NodePath::set_tex_offset 0 4 685 686 687 688 1770
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
76
inline void NodePath::set_tex_offset(TextureStage *stage, float u, float v);

2118 14 set_tex_rotate 4 2926 24 NodePath::set_tex_rotate 0 2 689 690 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
67
inline void NodePath::set_tex_rotate(TextureStage *stage, float r);

2119 13 set_tex_scale 4 2926 23 NodePath::set_tex_scale 0 10 691 692 693 694 695 696 697 698 699 700 4305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
70
inline void NodePath::set_tex_scale(TextureStage *stage, float scale);

2120 14 get_tex_offset 4 2926 24 NodePath::get_tex_offset 0 2 701 702 836
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
70
inline LVecBase2f NodePath::get_tex_offset(TextureStage *stage) const;

2121 14 get_tex_rotate 4 2926 24 NodePath::get_tex_rotate 0 2 703 704 840
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
65
inline float NodePath::get_tex_rotate(TextureStage *stage) const;

2122 13 get_tex_scale 4 2926 23 NodePath::get_tex_scale 0 2 705 706 832
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
69
inline LVecBase2f NodePath::get_tex_scale(TextureStage *stage) const;

2123 11 set_tex_pos 4 2926 21 NodePath::set_tex_pos 0 4 707 708 709 710 1658
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
82
inline void NodePath::set_tex_pos(TextureStage *stage, float u, float v, float w);

2124 11 set_tex_hpr 4 2926 21 NodePath::set_tex_hpr 0 4 711 712 713 714 1794
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
82
inline void NodePath::set_tex_hpr(TextureStage *stage, float h, float p, float r);

2125 11 get_tex_pos 4 2926 21 NodePath::get_tex_pos 0 2 715 716 780
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f NodePath::get_tex_pos(TextureStage *stage) const;

2126 11 get_tex_hpr 4 2926 21 NodePath::get_tex_hpr 0 2 717 718 782
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f NodePath::get_tex_hpr(TextureStage *stage) const;

2127 16 get_tex_scale_3d 4 2926 26 NodePath::get_tex_scale_3d 0 2 719 720 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f NodePath::get_tex_scale_3d(TextureStage *stage) const;

2128 11 set_tex_gen 4 2926 21 NodePath::set_tex_gen 0 4 721 722 723 724 927
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_light_vector, which
//               requires the name of the texture coordinate set that
//               supplies the tangent and binormal, as well as the
//               specific light to generate coordinates for.
////////////////////////////////////////////////////////////////////
99
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, int priority = (0));

2129 13 clear_tex_gen 4 2926 23 NodePath::clear_tex_gen 0 2 725 726 647
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Removes the texture coordinate generation mode from
//               all texture stages on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Disables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_tex_gen(void);

2130 11 has_tex_gen 4 2926 21 NodePath::has_tex_gen 0 1 727 371
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_gen
//       Access: Published
//  Description: Returns true if there is a mode for automatic texture
//               coordinate generation on the current node for the
//               given stage.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_tex_gen(TextureStage *stage) const;

2131 11 get_tex_gen 4 2926 21 NodePath::get_tex_gen 0 1 728 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen
//       Access: Published
//  Description: Returns the texture coordinate generation mode for
//               the given stage, or M_off if there is no explicit
//               mode set for the given stage.
////////////////////////////////////////////////////////////////////
74
RenderAttrib::TexGenMode NodePath::get_tex_gen(TextureStage *stage) const;

2132 17 get_tex_gen_light 4 2926 27 NodePath::get_tex_gen_light 0 1 729 486
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen_light
//       Access: Published
//  Description: Returns the particular Light set for the indicated
//               texgen mode's texture stage, or empty NodePath if no
//               light is set.  This is only meaningful if the texgen
//               mode (returned by get_tex_gen()) is M_light_vector.
////////////////////////////////////////////////////////////////////
64
NodePath NodePath::get_tex_gen_light(TextureStage *stage) const;

2133 17 set_tex_projector 4 2926 27 NodePath::set_tex_projector 0 1 730 674
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_projector
//       Access: Published
//  Description: Establishes a TexProjectorEffect on this node, which
//               can be used to establish projective texturing (but
//               see also the NodePath::project_texture() convenience
//               function), or it can be used to bind this node's
//               texture transform to particular node's position in
//               space, allowing a LerpInterval (for instance) to
//               adjust this node's texture coordinates.
////////////////////////////////////////////////////////////////////
96
void NodePath::set_tex_projector(TextureStage *stage, NodePath const &from, NodePath const &to);

2134 19 clear_tex_projector 4 2926 29 NodePath::clear_tex_projector 0 2 731 732 625
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for the indicated
//               stage from this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for all stages from
//               this node.
////////////////////////////////////////////////////////////////////
56
void NodePath::clear_tex_projector(TextureStage *stage);

2135 17 has_tex_projector 4 2926 27 NodePath::has_tex_projector 0 1 733 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_projector
//       Access: Published
//  Description: Returns true if this node has a TexProjectorEffect
//               for the indicated stage, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_projector(TextureStage *stage) const;

2136 22 get_tex_projector_from 4 2926 32 NodePath::get_tex_projector_from 0 1 734 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
69
NodePath NodePath::get_tex_projector_from(TextureStage *stage) const;

2137 20 get_tex_projector_to 4 2926 30 NodePath::get_tex_projector_to 0 1 735 506
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
67
NodePath NodePath::get_tex_projector_to(TextureStage *stage) const;

2138 15 project_texture 4 2926 25 NodePath::project_texture 0 1 736 440
////////////////////////////////////////////////////////////////////
//     Function: NodePath::project_texture
//       Access: Published
//  Description: A convenience function to enable projective texturing
//               at this node level and below, using the indicated
//               NodePath (which should contain a LensNode) as the
//               projector.
////////////////////////////////////////////////////////////////////
93
void NodePath::project_texture(TextureStage *stage, Texture *tex, NodePath const &projector);

2139 21 clear_project_texture 4 2926 31 NodePath::clear_project_texture 0 1 737 270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_project_texture
//       Access: Published
//  Description: Undoes the effect of project_texture().
////////////////////////////////////////////////////////////////////
65
inline void NodePath::clear_project_texture(TextureStage *stage);

2140 14 set_normal_map 4 2926 24 NodePath::set_normal_map 0 3 738 739 740 1173
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_normal_map
//       Access: Published
//  Description: A convenience function to set up a normal map on this
//               geometry.  This uses the single highest-priority
//               light on the object only.  It also requires
//               multitexture, and consumes at least two texture
//               stages, in addition to what may already be in use.
//
//               The normal_map parameter is the texture that contains
//               the normal map information (with a 3-d delta vector
//               encoded into the r,g,b of each texel).  texcoord_name is
//               the name of the texture coordinate set that contains
//               the tangent and binormal we wish to use.  If
//               preserve_color is true, then one additional texture
//               stage is consumed to blend in the geometry's original
//               vertex color.
//
//               Only one normal map may be in effect through this
//               interface at any given time.
////////////////////////////////////////////////////////////////////
136
void NodePath::set_normal_map(Texture *normal_map, basic_string< char > const &texcoord_name = ((string())), bool preserve_color = (0));

2141 16 clear_normal_map 4 2926 26 NodePath::clear_normal_map 0 1 741 300
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_normal_map
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_normal_map().
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_normal_map(void);

2142 12 has_texcoord 4 2926 22 NodePath::has_texcoord 0 1 742 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texcoord
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that use the named texture
//               coordinate set, false otherwise.  Pass the empty
//               string for the default texture coordinate set.
////////////////////////////////////////////////////////////////////
84
inline bool NodePath::has_texcoord(basic_string< char > const &texcoord_name) const;

2143 17 has_vertex_column 4 2926 27 NodePath::has_vertex_column 0 1 743 598
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_vertex_column
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that contain a reference to the
//               indicated vertex data column name, false otherwise.
//
//               This is particularly useful for testing whether a
//               particular model has a given texture coordinate set
//               (but see has_texcoord()).
////////////////////////////////////////////////////////////////////
65
bool NodePath::has_vertex_column(InternalName const *name) const;

2144 23 find_all_vertex_columns 4 2926 33 NodePath::find_all_vertex_columns 0 2 744 745 810
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below that
//               match the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
69
InternalNameCollection NodePath::find_all_vertex_columns(void) const;

2145 18 find_all_texcoords 4 2926 28 NodePath::find_all_texcoords 0 2 746 747 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below that match
//               the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
64
InternalNameCollection NodePath::find_all_texcoords(void) const;

2146 12 find_texture 4 2926 22 NodePath::find_texture 0 2 748 749 924
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the texture
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that is assigned to the
//               indicated texture stage.  Returns the texture if it
//               is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
72
Texture *NodePath::find_texture(basic_string< char > const &name) const;

2147 17 find_all_textures 4 2926 27 NodePath::find_all_textures 0 3 750 751 752 1097
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures on geometry at
//               this node and below that are assigned to the
//               indicated texture stage.
////////////////////////////////////////////////////////////////////
58
TextureCollection NodePath::find_all_textures(void) const;

2148 18 find_texture_stage 4 2926 28 NodePath::find_texture_stage 0 1 753 500
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture_stage
//       Access: Published
//  Description: Returns the first TextureStage found applied to
//               geometry at this node or below that matches the
//               indicated name (which may contain wildcards).
//               Returns the TextureStage if it is found, or NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
83
TextureStage *NodePath::find_texture_stage(basic_string< char > const &name) const;

2149 23 find_all_texture_stages 4 2926 33 NodePath::find_all_texture_stages 0 2 754 755 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
69
TextureStageCollection NodePath::find_all_texture_stages(void) const;

2150 20 unify_texture_stages 4 2926 30 NodePath::unify_texture_stages 0 1 756 615
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unify_texture_stages
//       Access: Published
//  Description: Searches through all TextureStages at this node and
//               below.  Any TextureStages that share the same name as
//               the indicated TextureStage object are replaced with
//               this object, thus ensuring that all geometry at this
//               node and below with a particular TextureStage name is
//               using the same TextureStage object.
////////////////////////////////////////////////////////////////////
57
void NodePath::unify_texture_stages(TextureStage *stage);

2151 13 find_material 4 2926 23 NodePath::find_material 0 1 757 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_material
//       Access: Published
//  Description: Returns the first material found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the material
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
74
Material *NodePath::find_material(basic_string< char > const &name) const;

2152 18 find_all_materials 4 2926 28 NodePath::find_all_materials 0 2 758 759 725
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
60
MaterialCollection NodePath::find_all_materials(void) const;

2153 12 set_material 4 2926 22 NodePath::set_material 0 2 760 761 486
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
////////////////////////////////////////////////////////////////////
63
void NodePath::set_material(Material *tex, int priority = (0));

2154 16 set_material_off 4 2926 26 NodePath::set_material_off 0 2 762 763 567
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
////////////////////////////////////////////////////////////////////
52
void NodePath::set_material_off(int priority = (0));

2155 14 clear_material 4 2926 24 NodePath::clear_material 0 1 764 369
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_material
//       Access: Published
//  Description: Completely removes any material adjustment that may
//               have been set via set_material() from this particular
//               node.
////////////////////////////////////////////////////////////////////
36
void NodePath::clear_material(void);

2156 12 has_material 4 2926 22 NodePath::has_material 0 1 765 343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_material
//       Access: Published
//  Description: Returns true if a material has been applied to this
//               particular node via set_material(), false otherwise.
////////////////////////////////////////////////////////////////////
40
bool NodePath::has_material(void) const;

2157 12 get_material 4 2926 22 NodePath::get_material 0 1 766 609
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_material
//       Access: Published
//  Description: Returns the material that has been set on this
//               particular node, or NULL if no material has been set.
//               This is not necessarily the material that will be
//               applied to the geometry at or below this level, as
//               another material at a higher or lower level may
//               override.
//               See also find_material().
////////////////////////////////////////////////////////////////////
57
PointerTo< Material > NodePath::get_material(void) const;

2158 7 set_fog 4 2926 17 NodePath::set_fog 0 2 767 768 310
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
////////////////////////////////////////////////////////////////////
53
void NodePath::set_fog(Fog *fog, int priority = (0));

2159 11 set_fog_off 4 2926 21 NodePath::set_fog_off 0 2 769 770 547
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
////////////////////////////////////////////////////////////////////
47
void NodePath::set_fog_off(int priority = (0));

2160 9 clear_fog 4 2926 19 NodePath::clear_fog 0 1 771 491
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_fog
//       Access: Published
//  Description: Completely removes any fog adjustment that may
//               have been set via set_fog() or set_fog_off()
//               from this particular node.  This allows whatever
//               fogs might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_fog(void);

2161 7 has_fog 4 2926 17 NodePath::has_fog 0 1 772 556
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog
//       Access: Published
//  Description: Returns true if a fog has been applied to this
//               particular node via set_fog(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               fog, as there may be a fog in effect from a higher or
//               lower level.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_fog(void) const;

2162 11 has_fog_off 4 2926 21 NodePath::has_fog_off 0 1 773 579
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog_off
//       Access: Published
//  Description: Returns true if a fog has been specifically
//               disabled on this particular node via
//               set_fog_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered unfogged, as there may be a
//               fog in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_fog_off(void) const;

2163 7 get_fog 4 2926 17 NodePath::get_fog 0 1 774 541
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_fog
//       Access: Published
//  Description: Returns the fog that has been set on this
//               particular node, or NULL if no fog has been set.
//               This is not necessarily the fog that will be
//               applied to the geometry at or below this level, as
//               another fog at a higher or lower level may
//               override.
////////////////////////////////////////////////////////////////////
35
Fog *NodePath::get_fog(void) const;

2164 25 set_render_mode_wireframe 4 2926 35 NodePath::set_render_mode_wireframe 0 2 775 776 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
////////////////////////////////////////////////////////////////////
61
void NodePath::set_render_mode_wireframe(int priority = (0));

2165 22 set_render_mode_filled 4 2926 32 NodePath::set_render_mode_filled 0 2 777 778 377
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
////////////////////////////////////////////////////////////////////
58
void NodePath::set_render_mode_filled(int priority = (0));

2166 15 set_render_mode 4 2926 25 NodePath::set_render_mode 0 2 779 780 407
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
////////////////////////////////////////////////////////////////////
97
void NodePath::set_render_mode(RenderModeAttrib::Mode mode, float thickness, int priority = (0));

2167 17 clear_render_mode 4 2926 27 NodePath::clear_render_mode 0 1 781 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_render_mode
//       Access: Published
//  Description: Completely removes any render mode adjustment that
//               may have been set on this node via
//               set_render_mode_wireframe() or
//               set_render_mode_filled().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_render_mode(void);

2168 15 has_render_mode 4 2926 25 NodePath::has_render_mode 0 1 782 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_render_mode
//       Access: Published
//  Description: Returns true if a render mode has been explicitly set
//               on this particular node via set_render_mode() (or
//               set_render_mode_wireframe() or
//               set_render_mode_filled()), false otherwise.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_render_mode(void) const;

2169 15 get_render_mode 4 2926 25 NodePath::get_render_mode 0 1 783 389
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode
//       Access: Published
//  Description: Returns the render mode that has been specifically
//               set on this node via set_render_mode(), or
//               M_unchanged if nothing has been set.
////////////////////////////////////////////////////////////////////
61
RenderModeAttrib::Mode NodePath::get_render_mode(void) const;

2170 25 get_render_mode_thickness 4 2926 35 NodePath::get_render_mode_thickness 0 1 784 401
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_thickness
//       Access: Published
//  Description: Returns the render mode thickness that has been
//               specifically set on this node via set_render_mode(),
//               or 0.0 if nothing has been set.
////////////////////////////////////////////////////////////////////
54
float NodePath::get_render_mode_thickness(void) const;

2171 13 set_two_sided 4 2926 23 NodePath::set_two_sided 0 2 785 786 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
////////////////////////////////////////////////////////////////////
65
void NodePath::set_two_sided(bool two_sided, int priority = (0));

2172 15 clear_two_sided 4 2926 25 NodePath::clear_two_sided 0 1 787 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_two_sided
//       Access: Published
//  Description: Completely removes any two-sided adjustment that
//               may have been set on this node via set_two_sided().
//               The geometry at this level and below will
//               subsequently be rendered either two-sided or
//               one-sided, according to whatever other nodes may have
//               had set_two_sided() on it, or according to the
//               initial state otherwise.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_two_sided(void);

2173 13 has_two_sided 4 2926 23 NodePath::has_two_sided 0 1 788 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_two_sided
//       Access: Published
//  Description: Returns true if a two-sided adjustment has been
//               explicitly set on this particular node via
//               set_two_sided().  If this returns true, then
//               get_two_sided() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_two_sided(void) const;

2174 13 get_two_sided 4 2926 23 NodePath::get_two_sided 0 1 789 681
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_two_sided
//       Access: Published
//  Description: Returns true if two-sided rendering has been
//               specifically set on this node via set_two_sided(), or
//               false if one-sided rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_two_sided().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               two-sided, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
41
bool NodePath::get_two_sided(void) const;

2175 14 set_depth_test 4 2926 24 NodePath::set_depth_test 0 2 790 791 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
67
void NodePath::set_depth_test(bool depth_test, int priority = (0));

2176 16 clear_depth_test 4 2926 26 NodePath::clear_depth_test 0 1 792 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_test
//       Access: Published
//  Description: Completely removes any depth-test adjustment that
//               may have been set on this node via set_depth_test().
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_depth_test(void);

2177 14 has_depth_test 4 2926 24 NodePath::has_depth_test 0 1 793 493
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_test
//       Access: Published
//  Description: Returns true if a depth-test adjustment has been
//               explicitly set on this particular node via
//               set_depth_test().  If this returns true, then
//               get_depth_test() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
42
bool NodePath::has_depth_test(void) const;

2178 14 get_depth_test 4 2926 24 NodePath::get_depth_test 0 1 794 523
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_test
//       Access: Published
//  Description: Returns true if depth-test rendering has been
//               specifically set on this node via set_depth_test(), or
//               false if depth-test rendering has been specifically
//               disabled, or if nothing has been specifically set.  See
//               also has_depth_test().
////////////////////////////////////////////////////////////////////
42
bool NodePath::get_depth_test(void) const;

2179 15 set_depth_write 4 2926 25 NodePath::set_depth_write 0 2 795 796 512
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
69
void NodePath::set_depth_write(bool depth_write, int priority = (0));

2180 17 clear_depth_write 4 2926 27 NodePath::clear_depth_write 0 1 797 348
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_write
//       Access: Published
//  Description: Completely removes any depth-write adjustment that
//               may have been set on this node via set_depth_write().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_depth_write(void);

2181 15 has_depth_write 4 2926 25 NodePath::has_depth_write 0 1 798 497
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_write
//       Access: Published
//  Description: Returns true if a depth-write adjustment has been
//               explicitly set on this particular node via
//               set_depth_write().  If this returns true, then
//               get_depth_write() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_depth_write(void) const;

2182 15 get_depth_write 4 2926 25 NodePath::get_depth_write 0 1 799 528
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_write
//       Access: Published
//  Description: Returns true if depth-write rendering has been
//               specifically set on this node via set_depth_write(), or
//               false if depth-write rendering has been specifically
//               disabled, or if nothing has been specifically set.  See
//               also has_depth_write().
////////////////////////////////////////////////////////////////////
43
bool NodePath::get_depth_write(void) const;

2183 17 do_billboard_axis 4 2926 27 NodePath::do_billboard_axis 0 1 800 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_axis
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to heads_up().
////////////////////////////////////////////////////////////////////
71
void NodePath::do_billboard_axis(NodePath const &camera, float offset);

2184 22 do_billboard_point_eye 4 2926 32 NodePath::do_billboard_point_eye 0 1 801 546
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_eye
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at(),
//               although the point_eye billboard effect cannot be
//               achieved using the ordinary look_at() call.
////////////////////////////////////////////////////////////////////
76
void NodePath::do_billboard_point_eye(NodePath const &camera, float offset);

2185 24 do_billboard_point_world 4 2926 34 NodePath::do_billboard_point_world 0 1 802 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_world
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at().
////////////////////////////////////////////////////////////////////
78
void NodePath::do_billboard_point_world(NodePath const &camera, float offset);

2186 18 set_billboard_axis 4 2926 28 NodePath::set_billboard_axis 0 3 803 804 805 793
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis,
//               towards a specified "camera" instead of to the
//               viewing camera.
////////////////////////////////////////////////////////////////////
61
inline void NodePath::set_billboard_axis(float offset = (0));

2187 23 set_billboard_point_eye 4 2926 33 NodePath::set_billboard_point_eye 0 3 806 807 808 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera, towards a specified "camera" instead of to
//               the viewing camera.
////////////////////////////////////////////////////////////////////
66
inline void NodePath::set_billboard_point_eye(float offset = (0));

2188 25 set_billboard_point_world 4 2926 35 NodePath::set_billboard_point_world 0 3 809 810 811 910
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky, towards a
//               specified "camera" instead of to the viewing camera.
////////////////////////////////////////////////////////////////////
68
inline void NodePath::set_billboard_point_world(float offset = (0));

2189 15 clear_billboard 4 2926 25 NodePath::clear_billboard 0 1 812 268
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_billboard
//       Access: Published
//  Description: Removes any billboard effect from the node.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_billboard(void);

2190 13 has_billboard 4 2926 23 NodePath::has_billboard 0 1 813 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_billboard
//       Access: Published
//  Description: Returns true if there is any billboard effect on
//               the node.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_billboard(void) const;

2191 11 set_compass 4 2926 21 NodePath::set_compass 0 2 814 815 459
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
////////////////////////////////////////////////////////////////////
63
void NodePath::set_compass(NodePath const &reference = ((())));

2192 13 clear_compass 4 2926 23 NodePath::clear_compass 0 1 816 264
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_compass
//       Access: Published
//  Description: Removes any compass effect from the node.
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_compass(void);

2193 11 has_compass 4 2926 21 NodePath::has_compass 0 1 817 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_compass
//       Access: Published
//  Description: Returns true if there is any compass effect on
//               the node.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_compass(void) const;

2194 16 set_transparency 4 2926 26 NodePath::set_transparency 0 2 818 819 482
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
////////////////////////////////////////////////////////////////////
83
void NodePath::set_transparency(TransparencyAttrib::Mode mode, int priority = (0));

2195 18 clear_transparency 4 2926 28 NodePath::clear_transparency 0 1 820 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transparency
//       Access: Published
//  Description: Completely removes any transparency adjustment that
//               may have been set on this node via set_transparency().
//               The geometry at this level and below will
//               subsequently be rendered either transparent or not,
//               to whatever other nodes may have had
//               set_transparency() on them.
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_transparency(void);

2196 16 has_transparency 4 2926 26 NodePath::has_transparency 0 1 821 594
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_transparency
//       Access: Published
//  Description: Returns true if a transparent-rendering adjustment
//               has been explicitly set on this particular node via
//               set_transparency().  If this returns true, then
//               get_transparency() may be called to determine whether
//               transparency has been explicitly enabled or
//               explicitly disabled for this node.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_transparency(void) const;

2197 16 get_transparency 4 2926 26 NodePath::get_transparency 0 1 822 701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transparency
//       Access: Published
//  Description: Returns the transparent rendering that has been
//               specifically set on this node via set_transparency(), or
//               M_none if nontransparent rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_transparency().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               transparent, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
64
TransparencyAttrib::Mode NodePath::get_transparency(void) const;

2198 13 set_antialias 4 2926 23 NodePath::set_antialias 0 2 823 824 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
////////////////////////////////////////////////////////////////////
74
void NodePath::set_antialias(unsigned short int mode, int priority = (0));

2199 15 clear_antialias 4 2926 25 NodePath::clear_antialias 0 1 825 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_antialias
//       Access: Published
//  Description: Completely removes any antialias setting that
//               may have been set on this node via set_antialias().
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_antialias(void);

2200 13 has_antialias 4 2926 23 NodePath::has_antialias 0 1 826 490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_antialias
//       Access: Published
//  Description: Returns true if an antialias setting has been
//               explicitly mode on this particular node via
//               set_antialias().  If this returns true, then
//               get_antialias() may be called to determine what the
//               setting was.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_antialias(void) const;

2201 13 get_antialias 4 2926 23 NodePath::get_antialias 0 1 827 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_antialias
//       Access: Published
//  Description: Returns the antialias setting that has been
//               specifically set on this node via set_antialias(), or
//               M_none if no setting has been made.
////////////////////////////////////////////////////////////////////
55
unsigned short int NodePath::get_antialias(void) const;

2202 21 adjust_all_priorities 4 2926 31 NodePath::adjust_all_priorities 0 1 828 649
////////////////////////////////////////////////////////////////////
//     Function: NodePath::adjust_all_priorities
//       Access: Published
//  Description: Adds the indicated adjustment amount (which may be
//               negative) to the priority for all transitions on the
//               referenced node, and for all nodes in the subgraph
//               below.  This can be used to force these nodes not to
//               be overridden by a high-level state change above.  If
//               the priority would drop below zero, it is set to
//               zero.
////////////////////////////////////////////////////////////////////
60
inline void NodePath::adjust_all_priorities(int adjustment);

2203 4 show 4 2926 14 NodePath::show 0 2 829 830 1081
// Variants on show and hide

// Variants on show and hide

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Undoes the effect of a previous hide() on this node:
//               makes the referenced node (and the entire subgraph
//               below this node) visible to all cameras.
//
//               This will not reveal the node if a parent node has
//               been hidden.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This undoes the effect of a previous hide() call.  It
//               will not reveal the node if a parent node has been
//               hidden.  However, see show_through().
////////////////////////////////////////////////////////////////////
33
inline void NodePath::show(void);

2204 12 show_through 4 2926 22 NodePath::show_through 0 2 831 832 1220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden, thus "showing through" a
//               parent's hide().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden via the one-parameter
//               hide() method, thus "showing through" a parent's
//               hide().  (However, it will not show through a
//               parent's hide() call if the no-parameter form of
//               hide() was used.)
////////////////////////////////////////////////////////////////////
41
inline void NodePath::show_through(void);

2205 4 hide 4 2926 14 NodePath::hide 0 2 833 834 1139
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node (and the entire subgraph
//               below this node) invisible to all cameras.  It
//               remains part of the scene graph, its bounding volume
//               still contributes to its parent's bounding volume,
//               and it will still be involved in collision tests.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node invisible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This will also hide any nodes below this node in the
//               scene graph, including those nodes for which show()
//               has been called, but it will not hide descendent
//               nodes for which show_through() has been called.
////////////////////////////////////////////////////////////////////
33
inline void NodePath::hide(void);

2206 9 is_hidden 4 2926 19 NodePath::is_hidden 0 2 835 836 380
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
////////////////////////////////////////////////////////////////////
103
inline bool NodePath::is_hidden(BitMask< unsigned int, 32 > camera_mask = ((get_overall_bit()))) const;

2207 19 get_hidden_ancestor 4 2926 29 NodePath::get_hidden_ancestor 0 2 837 838 478
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
////////////////////////////////////////////////////////////////////
110
NodePath NodePath::get_hidden_ancestor(BitMask< unsigned int, 32 > camera_mask = ((get_overall_bit()))) const;

2208 5 stash 4 2926 15 NodePath::stash 0 2 839 840 819
////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
////////////////////////////////////////////////////////////////////
37
void NodePath::stash(int sort = (0));

2209 7 unstash 4 2926 17 NodePath::unstash 0 2 841 842 425
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
////////////////////////////////////////////////////////////////////
39
void NodePath::unstash(int sort = (0));

2210 11 unstash_all 4 2926 21 NodePath::unstash_all 0 1 843 269
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
////////////////////////////////////////////////////////////////////
33
void NodePath::unstash_all(void);

2211 10 is_stashed 4 2926 20 NodePath::is_stashed 0 1 844 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_stashed
//       Access: Published
//  Description: Returns true if the referenced node is stashed either
//               directly, or because some ancestor is stashed.
////////////////////////////////////////////////////////////////////
45
inline bool NodePath::is_stashed(void) const;

2212 20 get_stashed_ancestor 4 2926 30 NodePath::get_stashed_ancestor 0 1 845 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
////////////////////////////////////////////////////////////////////
52
NodePath NodePath::get_stashed_ancestor(void) const;

2213 16 get_collide_mask 4 2926 26 NodePath::get_collide_mask 0 1 846 600
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > NodePath::get_collide_mask(void) const;

2214 16 set_collide_mask 4 2926 26 NodePath::set_collide_mask 0 3 847 848 849 684
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
171
inline void NodePath::set_collide_mask(BitMask< unsigned int, 32 > new_mask, BitMask< unsigned int, 32 > bits_to_change = ((all_on())), TypeHandle node_type = ((none())));

2215 11 operator == 4 2926 21 NodePath::operator == 0 1 850 390
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator ==
//       Access: Published
//  Description: Returns true if the two paths are equivalent; that
//               is, if they contain the same list of nodes in the same
//               order.
////////////////////////////////////////////////////////////////////
63
inline bool NodePath::operator ==(NodePath const &other) const;

2216 11 operator != 4 2926 21 NodePath::operator != 0 1 851 293
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator !=
//       Access: Published
//  Description: Returns true if the two paths are not equivalent.
////////////////////////////////////////////////////////////////////
63
inline bool NodePath::operator !=(NodePath const &other) const;

2217 10 operator < 4 2926 20 NodePath::operator < 0 1 852 521
////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator <
//       Access: Published
//  Description: Returns true if this NodePath sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent NodePaths is consistent but undefined,
//               and is useful only for storing NodePaths in a sorted
//               container like an STL set.
////////////////////////////////////////////////////////////////////
62
inline bool NodePath::operator <(NodePath const &other) const;

2218 10 compare_to 4 2926 20 NodePath::compare_to 0 1 853 830
////////////////////////////////////////////////////////////////////
//     Function: NodePath::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this NodePath
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two NodePaths are considered equivalent if they
//               consist of exactly the same list of nodes in the same
//               order.  Otherwise, they are different; different
//               NodePaths will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the NodePaths in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
61
inline int NodePath::compare_to(NodePath const &other) const;

2219 15 verify_complete 4 2926 25 NodePath::verify_complete 0 1 854 353
// Miscellaneous

////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
////////////////////////////////////////////////////////////////////
43
bool NodePath::verify_complete(void) const;

2220 13 prepare_scene 4 2926 23 NodePath::prepare_scene 0 1 855 854
////////////////////////////////////////////////////////////////////
//     Function: NodePath::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures within
//               the scene are loaded in texture memory, and display
//               lists are built up from static geometry.
////////////////////////////////////////////////////////////////////
61
void NodePath::prepare_scene(GraphicsStateGuardianBase *gsg);

2221 11 show_bounds 4 2926 21 NodePath::show_bounds 0 1 856 542
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_bounds
//       Access: Published
//  Description: Causes the bounding volume of the bottom node and all
//               of its descendants (that is, the bounding volume
//               associated with the the bottom arc) to be rendered,
//               if possible.  The rendering method is less than
//               optimal; this is intended primarily for debugging.
////////////////////////////////////////////////////////////////////
33
void NodePath::show_bounds(void);

2222 17 show_tight_bounds 4 2926 27 NodePath::show_tight_bounds 0 1 857 580
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_tight_bounds
//       Access: Published
//  Description: Similar to show_bounds(), this draws a bounding box
//               representing the "tight" bounds of this node and all
//               of its descendants.  The bounding box is recomputed
//               every frame by reexamining all of the vertices; this
//               is far from efficient, but this is intended for
//               debugging.
////////////////////////////////////////////////////////////////////
39
void NodePath::show_tight_bounds(void);

2223 11 hide_bounds 4 2926 21 NodePath::hide_bounds 0 1 858 306
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide_bounds
//       Access: Published
//  Description: Stops the rendering of the bounding volume begun with
//               show_bounds().
////////////////////////////////////////////////////////////////////
33
void NodePath::hide_bounds(void);

2224 10 get_bounds 4 2926 20 NodePath::get_bounds 0 1 859 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
////////////////////////////////////////////////////////////////////
61
PointerTo< BoundingVolume > NodePath::get_bounds(void) const;

2225 22 force_recompute_bounds 4 2926 32 NodePath::force_recompute_bounds 0 1 860 890
////////////////////////////////////////////////////////////////////
//     Function: NodePath::force_recompute_bounds
//       Access: Published
//  Description: Forces the recomputing of all the bounding volumes at
//               every node in the subgraph beginning at this node and
//               below.
//
//               This should not normally need to be called, since the
//               bounding volumes are supposed to be recomputed
//               automatically when necessary.  It may be useful when
//               debugging, to verify that the bounding volumes have
//               not become inadvertently stale; it may also be useful
//               to force animated characters to update their bounding
//               volumes (which does not presently happen
//               automatically).
////////////////////////////////////////////////////////////////////
44
void NodePath::force_recompute_bounds(void);

2226 12 write_bounds 4 2926 22 NodePath::write_bounds 0 1 861 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bounds
//       Access: Published
//  Description: Writes a description of the bounding volume
//               containing the bottom node and all of its descendants
//               to the indicated output stream.
////////////////////////////////////////////////////////////////////
48
void NodePath::write_bounds(ostream &out) const;

2227 17 calc_tight_bounds 4 2926 27 NodePath::calc_tight_bounds 0 1 862 672
////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
////////////////////////////////////////////////////////////////////
75
bool NodePath::calc_tight_bounds(LPoint3f &min_point, LPoint3f &max_point);

2228 7 analyze 4 2926 17 NodePath::analyze 0 1 863 404
////////////////////////////////////////////////////////////////////
//     Function: NodePath::analyze
//       Access: Published
//  Description: Analyzes the geometry below this node and reports the
//               number of vertices, triangles, etc.  This is the same
//               information reported by the bam-info program.
////////////////////////////////////////////////////////////////////
35
void NodePath::analyze(void) const;

2229 13 flatten_light 4 2926 23 NodePath::flatten_light 0 1 864 1255
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_light
//       Access: Published
//  Description: Lightly flattens out the hierarchy below this node by
//               applying transforms, colors, and texture matrices
//               from the arcs onto the vertices, but does not remove
//               any nodes.
//
//               This can result in improved rendering performance
//               because there will be fewer transforms in the
//               resulting scene graph, but the number of nodes will
//               remain the same.
//
//               Particularly, any NodePaths that reference nodes
//               within this hierarchy will not be damaged.  However,
//               since this operation will remove transforms from the
//               scene graph, it may be dangerous to apply to arcs
//               where you expect to dynamically modify the transform,
//               or where you expect the geometry to remain in a
//               particular local coordinate system.
//
//               The return value is always 0, since flatten_light
//               does not remove any arcs.
////////////////////////////////////////////////////////////////////
34
int NodePath::flatten_light(void);

2230 14 flatten_medium 4 2926 24 NodePath::flatten_medium 0 1 865 1299
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_medium
//       Access: Published
//  Description: A more thorough flattening than flatten_light(), this
//               first applies all the transforms, colors, and texture
//               matrices from the arcs onto the vertices, and then
//               removes unneeded grouping nodes--nodes that have
//               exactly one child, for instance, but have no special
//               properties in themselves.
//
//               This results in improved perforamance over
//               flatten_light() because the number of nodes in the
//               scene graph is reduced.
//
//               If max_children is specified, it represents the
//               maximum number of children a node is allowed to have
//               and still be flattened.  Normally, this is 1; we
//               don't typically want to flatten a node that has
//               multiple children.  However, sometimes this may be
//               desirable; set this parameter to control the limit.
//               If this is set to -1, there is no limit.
//
//               The return value is the number of arcs removed.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_medium(void);

2231 14 flatten_strong 4 2926 24 NodePath::flatten_strong 0 1 866 1005
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_strong
//       Access: Published
//  Description: The strongest possible flattening.  This first
//               applies all of the transforms to the vertices, as in
//               flatten_medium(), but then it will combine sibling
//               nodes together when possible, in addition to removing
//               unnecessary parent-child nodes.  This can result in
//               substantially fewer nodes, but any nicely-grouped
//               hierachical bounding volumes may be lost.
//
//               It is generally a good idea to apply this kind of
//               flattening only to nodes that will be culled largely
//               as a single unit, like a car.  Applying this to an
//               entire scene may result in overall poorer performance
//               because of less-effective culling.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_strong(void);

2232 7 set_tag 4 2926 17 NodePath::set_tag 0 1 867 700
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void NodePath::set_tag(basic_string< char > const &key, basic_string< char > const &value);

2233 7 get_tag 4 2926 17 NodePath::get_tag 0 1 868 458
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.  See also get_net_tag().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > NodePath::get_tag(basic_string< char > const &key) const;

2234 7 has_tag 4 2926 17 NodePath::has_tag 0 1 869 445
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//               See also has_net_tag().
////////////////////////////////////////////////////////////////////
69
inline bool NodePath::has_tag(basic_string< char > const &key) const;

2235 9 clear_tag 4 2926 19 NodePath::clear_tag 0 1 870 397
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void NodePath::clear_tag(basic_string< char > const &key);

2236 11 get_net_tag 4 2926 21 NodePath::get_net_tag 0 1 871 519
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_tag
//       Access: Published
//  Description: Returns the tag value that has been defined on this
//               node, or the nearest ancestor node, for the indicated
//               key.  If no value has been defined for the indicated
//               key on any ancestor node, returns the empty string.
//               See also get_tag().
////////////////////////////////////////////////////////////////////
89
inline basic_string< char > NodePath::get_net_tag(basic_string< char > const &key) const;

2237 11 has_net_tag 4 2926 21 NodePath::has_net_tag 0 1 872 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_tag
//       Access: Published
//  Description: Returns true if the indicated tag value has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_tag().
////////////////////////////////////////////////////////////////////
73
inline bool NodePath::has_net_tag(basic_string< char > const &key) const;

2238 12 find_net_tag 4 2926 22 NodePath::find_net_tag 0 1 873 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_tag().
////////////////////////////////////////////////////////////////////
71
NodePath NodePath::find_net_tag(basic_string< char > const &key) const;

2239 14 set_python_tag 4 2926 24 NodePath::set_python_tag 0 1 874 716
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               object has no meaning to Panda; but it is stored
//               indefinitely on the node until it is requested again.
//
//               Each unique key stores a different Python object.
//               There is no effective limit on the number of
//               different keys that may be stored or on the nature of
//               any one key's object.
////////////////////////////////////////////////////////////////////
87
inline void NodePath::set_python_tag(basic_string< char > const &key, PyObject *value);

2240 14 get_python_tag 4 2926 24 NodePath::get_python_tag 0 1 875 455
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no object has been previously set, returns None.
//               See also get_net_python_tag().
////////////////////////////////////////////////////////////////////
81
inline PyObject *NodePath::get_python_tag(basic_string< char > const &key) const;

2241 14 has_python_tag 4 2926 24 NodePath::has_python_tag 0 1 876 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that value
//               is the empty string), or false if no value has been
//               set.  See also has_net_python_tag().
////////////////////////////////////////////////////////////////////
76
inline bool NodePath::has_python_tag(basic_string< char > const &key) const;

2242 16 clear_python_tag 4 2926 26 NodePath::clear_python_tag 0 1 877 443
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on this
//               particular node.  After a call to clear_python_tag(),
//               has_python_tag() will return false for the indicated
//               key.
////////////////////////////////////////////////////////////////////
72
inline void NodePath::clear_python_tag(basic_string< char > const &key);

2243 18 get_net_python_tag 4 2926 28 NodePath::get_net_python_tag 0 1 878 525
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_python_tag
//       Access: Published
//  Description: Returns the Python object that has been defined on
//               this node, or the nearest ancestor node, for the
//               indicated key.  If no value has been defined for the
//               indicated key on any ancestor node, returns None.
//               See also get_python_tag().
////////////////////////////////////////////////////////////////////
85
inline PyObject *NodePath::get_net_python_tag(basic_string< char > const &key) const;

2244 18 has_net_python_tag 4 2926 28 NodePath::has_net_python_tag 0 1 879 408
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_python_tag
//       Access: Published
//  Description: Returns true if the indicated Python object has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_python_tag().
////////////////////////////////////////////////////////////////////
80
inline bool NodePath::has_net_python_tag(basic_string< char > const &key) const;

2245 19 find_net_python_tag 4 2926 29 NodePath::find_net_python_tag 0 1 880 485
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_python_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_python_tag().
////////////////////////////////////////////////////////////////////
78
NodePath NodePath::find_net_python_tag(basic_string< char > const &key) const;

2246 9 list_tags 4 2926 19 NodePath::list_tags 0 1 881 420
// HAVE_PYTHON

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::list_tags
//       Access: Published
//  Description: Lists the tags to the nout stream, one per line.  See
//               PandaNode::list_tags() for a variant that allows you
//               to specify the output stream.
////////////////////////////////////////////////////////////////////
44
inline void NodePath::list_tags(void) const;

2247 8 set_name 4 2926 18 NodePath::set_name 0 1 882 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_name
//       Access: Published
//  Description: Changes the name of the referenced node.
////////////////////////////////////////////////////////////////////
65
inline void NodePath::set_name(basic_string< char > const &name);

2248 8 get_name 4 2926 18 NodePath::get_name 0 1 883 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_name
//       Access: Published
//  Description: Returns the name of the referenced node.
////////////////////////////////////////////////////////////////////
59
inline basic_string< char > NodePath::get_name(void) const;

2249 14 write_bam_file 4 2926 24 NodePath::write_bam_file 0 1 884 519
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_file
//       Access: Published
//  Description: Writes the contents of this node and below out to a
//               bam file with the indicated filename.  This file may
//               then be read in again, as is, at some later point.
//               Returns true if successful, false on some kind of
//               error.
////////////////////////////////////////////////////////////////////
74
bool NodePath::write_bam_file(basic_string< char > const &filename) const;

2250 14 get_class_type 4 2926 24 NodePath::get_class_type 0 1 885 0
49
static TypeHandle NodePath::get_class_type(void);

2251 9 ~NodePath 4 2926 19 NodePath::~NodePath 0 0 0
26
NodePath::~NodePath(void);

2252 4 make 4 2928 21 ClipPlaneAttrib::make 0 5 886 887 888 889 890 2253
// The following is the new, more general interface to the
// ClipPlaneAttrib.

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that enables (or
//               disables, according to op) the indicated plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
109
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane);

2253 13 get_operation 4 2928 30 ClipPlaneAttrib::get_operation 0 1 891 900
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the ClipPlaneAttrib.
//               If this is O_set, the planes listed here completely
//               replace any planes that were already on.  If this is
//               O_add, the planes here are added to the set of of
//               planes that were already on, and if O_remove, the
//               planes here are removed from the set of planes that
//               were on.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
70
ClipPlaneAttrib::Operation ClipPlaneAttrib::get_operation(void) const;

2254 14 get_num_planes 4 2928 31 ClipPlaneAttrib::get_num_planes 0 1 892 530
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_planes
//       Access: Published
//  Description: Returns the number of planes listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
48
int ClipPlaneAttrib::get_num_planes(void) const;

2255 9 get_plane 4 2928 26 ClipPlaneAttrib::get_plane 0 1 893 518
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_plane
//       Access: Published
//  Description: Returns the nth plane listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
51
PlaneNode *ClipPlaneAttrib::get_plane(int n) const;

2256 9 has_plane 4 2928 26 ClipPlaneAttrib::has_plane 0 1 894 566
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_plane
//       Access: Published
//  Description: Returns true if the indicated plane is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
56
bool ClipPlaneAttrib::has_plane(PlaneNode *plane) const;

2257 9 add_plane 4 2928 26 ClipPlaneAttrib::add_plane 0 1 895 467
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes.
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_plane(PlaneNode *plane) const;

2258 12 remove_plane 4 2928 29 ClipPlaneAttrib::remove_plane 0 1 896 497
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes.
//
//               This method is now deprecated.  Use remove_on_plane()
//               or remove_off_plane() instead.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_plane(PlaneNode *plane) const;

2259 12 make_all_off 4 2928 29 ClipPlaneAttrib::make_all_off 0 1 897 430
// The following is the new, more general interface to the
// ClipPlaneAttrib.

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that disables 
//               all planes (and hence disables clipping).
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make_all_off(void);

2260 17 get_num_on_planes 4 2928 34 ClipPlaneAttrib::get_num_on_planes 0 1 898 314
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_on_planes
//       Access: Published
//  Description: Returns the number of planes that are enabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
58
inline int ClipPlaneAttrib::get_num_on_planes(void) const;

2261 12 get_on_plane 4 2928 29 ClipPlaneAttrib::get_on_plane 0 1 899 317
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_on_plane
//       Access: Published
//  Description: Returns the nth plane enabled by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
59
inline NodePath ClipPlaneAttrib::get_on_plane(int n) const;

2262 12 has_on_plane 4 2928 29 ClipPlaneAttrib::has_on_plane 0 1 900 324
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_on_plane
//       Access: Published
//  Description: Returns true if the indicated plane is enabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
71
inline bool ClipPlaneAttrib::has_on_plane(NodePath const &plane) const;

2263 18 get_num_off_planes 4 2928 35 ClipPlaneAttrib::get_num_off_planes 0 1 901 316
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_off_planes
//       Access: Published
//  Description: Returns the number of planes that are disabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
59
inline int ClipPlaneAttrib::get_num_off_planes(void) const;

2264 13 get_off_plane 4 2928 30 ClipPlaneAttrib::get_off_plane 0 1 902 332
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_off_plane
//       Access: Published
//  Description: Returns the nth plane disabled by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
60
inline NodePath ClipPlaneAttrib::get_off_plane(int n) const;

2265 13 has_off_plane 4 2928 30 ClipPlaneAttrib::has_off_plane 0 1 903 326
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_off_plane
//       Access: Published
//  Description: Returns true if the indicated plane is disabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool ClipPlaneAttrib::has_off_plane(NodePath const &plane) const;

2266 11 has_all_off 4 2928 28 ClipPlaneAttrib::has_all_off 0 1 904 328
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib disables all planes
//               (although it may also enable some).
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::has_all_off(void) const;

2267 11 is_identity 4 2928 28 ClipPlaneAttrib::is_identity 0 1 905 333
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of planes in use.
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::is_identity(void) const;

2268 12 add_on_plane 4 2928 29 ClipPlaneAttrib::add_on_plane 0 1 906 394
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               enabled by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_on_plane(NodePath const &plane) const;

2269 15 remove_on_plane 4 2928 32 ClipPlaneAttrib::remove_on_plane 0 1 907 401
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes enabled by this attrib.
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_on_plane(NodePath const &plane) const;

2270 13 add_off_plane 4 2928 30 ClipPlaneAttrib::add_off_plane 0 1 908 396
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               disabled by this attrib.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_off_plane(NodePath const &plane) const;

2271 16 remove_off_plane 4 2928 33 ClipPlaneAttrib::remove_off_plane 0 1 909 403
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes disabled by this attrib.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_off_plane(NodePath const &plane) const;

2272 13 filter_to_max 4 2928 30 ClipPlaneAttrib::filter_to_max 0 1 910 477
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new ClipPlaneAttrib, very much like this one,
//               but with the number of on_planes reduced to be no
//               more than max_clip_planes.  The number of off_planes in
//               the new ClipPlaneAttrib is undefined.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< ClipPlaneAttrib > ClipPlaneAttrib::filter_to_max(int max_clip_planes) const;

2273 14 get_class_type 4 2928 31 ClipPlaneAttrib::get_class_type 0 1 911 0
56
static TypeHandle ClipPlaneAttrib::get_class_type(void);

2274 16 ~ClipPlaneAttrib 4 2928 33 ClipPlaneAttrib::~ClipPlaneAttrib 0 0 0
40
ClipPlaneAttrib::~ClipPlaneAttrib(void);

2275 11 make_vertex 4 2930 24 ColorAttrib::make_vertex 0 1 912 379
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_vertex
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered according to its own
//               vertex color.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > ColorAttrib::make_vertex(void);

2276 9 make_flat 4 2930 22 ColorAttrib::make_flat 0 1 913 349
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_flat
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in the indicated color.
////////////////////////////////////////////////////////////////////
86
static ConstPointerTo< RenderAttrib > ColorAttrib::make_flat(LVecBase4f const &color);

2277 8 make_off 4 2930 21 ColorAttrib::make_off 0 1 914 376
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered without any color
//               commands at all.
////////////////////////////////////////////////////////////////////
66
static ConstPointerTo< RenderAttrib > ColorAttrib::make_off(void);

2278 14 get_color_type 4 2930 27 ColorAttrib::get_color_type 0 1 915 844
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color_type
//       Access: Published
//  Description: Returns the type of color specified by this
//               ColorAttrib.  The options are:
//
//                 T_vertex - use the vertex color specified in the
//                 geometry itself.
//
//                 T_flat - use the color specified in this
//                 ColorAttrib for all geometry.  You can get this
//                 color via get_color().
//
//                 T_off - do not issue any color commands at all.
//                 This is generally used only in contexts where the
//                 color is meaningless, e.g. when drawing directly to
//                 the depth buffer.
////////////////////////////////////////////////////////////////////
65
inline ColorAttrib::Type ColorAttrib::get_color_type(void) const;

2279 9 get_color 4 2930 22 ColorAttrib::get_color 0 1 916 387
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color
//       Access: Published
//  Description: If the type is T_flat, this returns the color that
//               will be applied to geometry.  If the type is anything
//               else, this is meaningless.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &ColorAttrib::get_color(void) const;

2280 14 get_class_type 4 2930 27 ColorAttrib::get_class_type 0 1 917 0
52
static TypeHandle ColorAttrib::get_class_type(void);

2281 12 ~ColorAttrib 4 2930 25 ColorAttrib::~ColorAttrib 0 0 0
32
ColorAttrib::~ColorAttrib(void);

2282 8 make_off 4 2932 26 ColorBlendAttrib::make_off 0 1 918 396
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that
//               disables special-effect blending, allowing normal
//               transparency to be used instead.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make_off(void);

2283 4 make 4 2932 22 ColorBlendAttrib::make 0 3 919 920 921 779
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object.  This
//               constructor is deprecated; use the one below, which
//               takes three or four parameters, instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make(ColorBlendAttrib::Mode mode);

2284 8 get_mode 4 2932 26 ColorBlendAttrib::get_mode 0 1 922 254
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_mode
//       Access: Published
//  Description: Returns the colorBlend mode.
////////////////////////////////////////////////////////////////////
69
inline ColorBlendAttrib::Mode ColorBlendAttrib::get_mode(void) const;

2285 13 get_operand_a 4 2932 31 ColorBlendAttrib::get_operand_a 0 1 923 278
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_a
//       Access: Published
//  Description: Returns the multiplier for the first component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_a(void) const;

2286 13 get_operand_b 4 2932 31 ColorBlendAttrib::get_operand_b 0 1 924 279
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_b
//       Access: Published
//  Description: Returns the multiplier for the second component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_b(void) const;

2287 9 get_color 4 2932 27 ColorBlendAttrib::get_color 0 1 925 281
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_color
//       Access: Published
//  Description: Returns the constant color associated with the attrib.
////////////////////////////////////////////////////////////////////
58
inline LVecBase4f ColorBlendAttrib::get_color(void) const;

2288 23 involves_constant_color 4 2932 41 ColorBlendAttrib::involves_constant_color 0 2 926 927 678
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////
66
inline bool ColorBlendAttrib::involves_constant_color(void) const;

2289 20 involves_color_scale 4 2932 38 ColorBlendAttrib::involves_color_scale 0 2 928 929 680
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool ColorBlendAttrib::involves_color_scale(void) const;

2290 14 get_class_type 4 2932 32 ColorBlendAttrib::get_class_type 0 1 930 0
57
static TypeHandle ColorBlendAttrib::get_class_type(void);

2291 17 ~ColorBlendAttrib 4 2932 35 ColorBlendAttrib::~ColorBlendAttrib 0 0 0
42
ColorBlendAttrib::~ColorBlendAttrib(void);

2292 13 make_identity 4 2935 31 ColorScaleAttrib::make_identity 0 1 931 275
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity scale attrib.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_identity(void);

2293 4 make 4 2935 22 ColorScaleAttrib::make 0 1 932 353
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that indicates
//               geometry should be scaled by the indicated factor.
////////////////////////////////////////////////////////////////////
86
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make(LVecBase4f const &scale);

2294 8 make_off 4 2935 26 ColorScaleAttrib::make_off 0 1 933 477
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that ignores
//               any ColorScaleAttrib inherited from above.  You may
//               also specify an additional color scale to apply to
//               geometry below (using set_scale()).
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_off(void);

2295 6 is_off 4 2935 24 ColorScaleAttrib::is_off 0 1 934 526
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_off
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               ColorScaleAttrib may have the "off" flag set and also
//               have another scale specified.
////////////////////////////////////////////////////////////////////
49
inline bool ColorScaleAttrib::is_off(void) const;

2296 11 is_identity 4 2935 29 ColorScaleAttrib::is_identity 0 1 935 377
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_identity
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib is an identity
//               attrib, false if it is either an off attrib or it has
//               a scale.
////////////////////////////////////////////////////////////////////
54
inline bool ColorScaleAttrib::is_identity(void) const;

2297 9 has_scale 4 2935 27 ColorScaleAttrib::has_scale 0 1 936 404
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
////////////////////////////////////////////////////////////////////
52
inline bool ColorScaleAttrib::has_scale(void) const;

2298 9 get_scale 4 2935 27 ColorScaleAttrib::get_scale 0 1 937 269
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::get_scale
//       Access: Published
//  Description: Returns the scale to be applied to colors.
////////////////////////////////////////////////////////////////////
65
inline LVecBase4f const &ColorScaleAttrib::get_scale(void) const;

2299 9 set_scale 4 2935 27 ColorScaleAttrib::set_scale 0 1 938 346
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::set_scale
//       Access: Published
//  Description: Returns a new ColorScaleAttrib, just like this one, but
//               with the scale changed to the indicated value.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ColorScaleAttrib::set_scale(LVecBase4f const &scale) const;

2300 14 get_class_type 4 2935 32 ColorScaleAttrib::get_class_type 0 1 939 0
57
static TypeHandle ColorScaleAttrib::get_class_type(void);

2301 17 ~ColorScaleAttrib 4 2935 35 ColorScaleAttrib::~ColorScaleAttrib 0 0 0
42
ColorScaleAttrib::~ColorScaleAttrib(void);

2302 4 make 4 2936 22 ColorWriteAttrib::make 0 1 940 271
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorWriteAttrib object.
////////////////////////////////////////////////////////////////////
84
static ConstPointerTo< RenderAttrib > ColorWriteAttrib::make(unsigned int channels);

2303 12 get_channels 4 2936 30 ColorWriteAttrib::get_channels 0 1 941 314
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::get_channels
//       Access: Published
//  Description: Returns the mask of color channels that are enabled
//               by this attrib.
////////////////////////////////////////////////////////////////////
63
inline unsigned int ColorWriteAttrib::get_channels(void) const;

2304 14 get_class_type 4 2936 32 ColorWriteAttrib::get_class_type 0 1 942 0
57
static TypeHandle ColorWriteAttrib::get_class_type(void);

2305 17 ~ColorWriteAttrib 4 2936 35 ColorWriteAttrib::~ColorWriteAttrib 0 0 0
42
ColorWriteAttrib::~ColorWriteAttrib(void);

2306 4 make 4 2938 19 CullBinAttrib::make 0 1 943 589
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullBinAttrib assigning geometry
//               into the named bin.  If the bin name is the empty
//               string, the default bin is used.
//
//               The draw_order specifies further ordering information
//               which is relevant only to certain kinds of bins (in
//               particular CullBinFixed type bins).
////////////////////////////////////////////////////////////////////
112
static ConstPointerTo< RenderAttrib > CullBinAttrib::make(basic_string< char > const &bin_name, int draw_order);

2307 12 get_bin_name 4 2938 27 CullBinAttrib::get_bin_name 0 1 944 373
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin this attribute specifies.
//               If this is the empty string, it refers to the default
//               bin.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &CullBinAttrib::get_bin_name(void) const;

2308 14 get_draw_order 4 2938 29 CullBinAttrib::get_draw_order 0 1 945 448
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_draw_order
//       Access: Published
//  Description: Returns the draw order this attribute specifies.
//               Some bins (in particular, CullBinFixed bins) use this
//               to further specify the order in which objects should
//               be rendered.
////////////////////////////////////////////////////////////////////
53
inline int CullBinAttrib::get_draw_order(void) const;

2309 14 get_class_type 4 2938 29 CullBinAttrib::get_class_type 0 1 946 0
54
static TypeHandle CullBinAttrib::get_class_type(void);

2310 14 ~CullBinAttrib 4 2938 29 CullBinAttrib::~CullBinAttrib 0 0 0
36
CullBinAttrib::~CullBinAttrib(void);

2311 4 make 4 2939 20 CullFaceAttrib::make 0 2 947 948 739
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
////////////////////////////////////////////////////////////////////
107
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make(CullFaceAttrib::Mode mode = (M_cull_clockwise));

2312 12 make_reverse 4 2939 28 CullFaceAttrib::make_reverse 0 1 949 529
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_reverse
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that reverses
//               the effects of any other CullFaceAttrib objects in
//               the scene graph.  M_cull_clockwise will be treated as
//               M_cull_counter_clockwise, and vice-versa.
//               M_cull_none is unchanged.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make_reverse(void);

2313 15 get_actual_mode 4 2939 31 CullFaceAttrib::get_actual_mode 0 1 950 382
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_actual_mode
//       Access: Published
//  Description: Returns the actual culling mode, without considering
//               the effects of the reverse flag.  See also
//               get_effective_mode().
////////////////////////////////////////////////////////////////////
72
inline CullFaceAttrib::Mode CullFaceAttrib::get_actual_mode(void) const;

2314 11 get_reverse 4 2939 27 CullFaceAttrib::get_reverse 0 1 951 608
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_reverse
//       Access: Published
//  Description: Returns the 'reverse' flag.  If this is true, the
//               actual cull direction (clockwise
//               vs. counterclockwise) is the reverse of what is
//               specified here.  This allows support for
//               make_reverse(), which defines a CullFaceAttrib that
//               reverses whatever the sense of culling would have
//               been.
////////////////////////////////////////////////////////////////////
52
inline bool CullFaceAttrib::get_reverse(void) const;

2315 18 get_effective_mode 4 2939 34 CullFaceAttrib::get_effective_mode 0 1 952 487
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_effective_mode
//       Access: Published
//  Description: Returns the effective culling mode.  This is the same
//               as the actual culling mode, unless the reverse flag
//               is set, which swaps CW for CCW and vice-versa.  Also,
//               M_cull_unchanged is mapped to M_cull_none.
////////////////////////////////////////////////////////////////////
68
CullFaceAttrib::Mode CullFaceAttrib::get_effective_mode(void) const;

2316 14 get_class_type 4 2939 30 CullFaceAttrib::get_class_type 0 1 953 0
55
static TypeHandle CullFaceAttrib::get_class_type(void);

2317 15 ~CullFaceAttrib 4 2939 31 CullFaceAttrib::~CullFaceAttrib 0 0 0
38
CullFaceAttrib::~CullFaceAttrib(void);

2318 4 make 4 2941 23 DepthOffsetAttrib::make 0 2 954 955 403
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
////////////////////////////////////////////////////////////////////
80
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make(int offset = (1));

2319 10 get_offset 4 2941 29 DepthOffsetAttrib::get_offset 0 1 956 281
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_offset
//       Access: Published
//  Description: Returns the depth offset represented by this attrib.
////////////////////////////////////////////////////////////////////
53
inline int DepthOffsetAttrib::get_offset(void) const;

2320 14 get_class_type 4 2941 33 DepthOffsetAttrib::get_class_type 0 1 957 0
58
static TypeHandle DepthOffsetAttrib::get_class_type(void);

2321 18 ~DepthOffsetAttrib 4 2941 37 DepthOffsetAttrib::~DepthOffsetAttrib 0 0 0
44
DepthOffsetAttrib::~DepthOffsetAttrib(void);

2322 4 make 4 2942 21 DepthTestAttrib::make 0 1 958 269
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthTestAttrib object.
////////////////////////////////////////////////////////////////////
97
static ConstPointerTo< RenderAttrib > DepthTestAttrib::make(RenderAttrib::PandaCompareFunc mode);

2323 8 get_mode 4 2942 25 DepthTestAttrib::get_mode 0 1 959 254
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc DepthTestAttrib::get_mode(void) const;

2324 14 get_class_type 4 2942 31 DepthTestAttrib::get_class_type 0 1 960 0
56
static TypeHandle DepthTestAttrib::get_class_type(void);

2325 16 ~DepthTestAttrib 4 2942 33 DepthTestAttrib::~DepthTestAttrib 0 0 0
40
DepthTestAttrib::~DepthTestAttrib(void);

2326 4 make 4 2943 22 DepthWriteAttrib::make 0 1 961 271
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthWriteAttrib object.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > DepthWriteAttrib::make(DepthWriteAttrib::Mode mode);

2327 8 get_mode 4 2943 26 DepthWriteAttrib::get_mode 0 1 962 255
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
69
inline DepthWriteAttrib::Mode DepthWriteAttrib::get_mode(void) const;

2328 14 get_class_type 4 2943 32 DepthWriteAttrib::get_class_type 0 1 963 0
57
static TypeHandle DepthWriteAttrib::get_class_type(void);

2329 17 ~DepthWriteAttrib 4 2943 35 DepthWriteAttrib::~DepthWriteAttrib 0 0 0
42
DepthWriteAttrib::~DepthWriteAttrib(void);

2330 3 Fog 4 2945 8 Fog::Fog 0 1 964 437
////////////////////////////////////////////////////////////////////
//     Function: Fog::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
43
Fog::Fog(basic_string< char > const &name);

2331 8 get_mode 4 2945 13 Fog::get_mode 0 1 965 879
// Filename: fog.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline Fog::Mode Fog::get_mode(void) const;

2332 8 set_mode 4 2945 13 Fog::set_mode 0 1 966 934
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_mode
//       Access: Published
//  Description: Specifies the computation that is used to determine
//               the fog effect.  If this is M_linear, then the fog
//               will range from linearly from the onset point to the
//               opaque point (or for the distances specified in
//               set_linear_range), and the fog object should be
//               parented into the scene graph, or to the camera.
//
//               If this is anything else, the onset point and opaque
//               point are not used, and the fog effect is based on
//               the value specified to set_exp_density(), and it
//               doesn't matter to which node the fog object is
//               parented, or if it is parented anywhere at all.
////////////////////////////////////////////////////////////////////
42
inline void Fog::set_mode(Fog::Mode mode);

2333 9 get_color 4 2945 14 Fog::get_color 0 1 967 243
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_color
//       Access: Published
//  Description: Returns the color of the fog.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f const &Fog::get_color(void) const;

2334 9 set_color 4 2945 14 Fog::set_color 0 2 968 969 533
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.  The alpha component is
//               not used.
////////////////////////////////////////////////////////////////////
54
inline void Fog::set_color(float r, float g, float b);

2335 16 set_linear_range 4 2945 21 Fog::set_linear_range 0 1 970 711
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_range
//       Access: Published
//  Description: Specifies the effects of the fog in linear distance
//               units.  This is only used if the mode is M_linear.
//
//               This specifies a fog that begins at distance onset
//               units from the origin, and becomes totally opaque at
//               distance opaque units from the origin, along the
//               forward axis (usually Y).
//
//               This function also implicitly sets the mode the
//               M_linear, if it is not already set.
////////////////////////////////////////////////////////////////////
61
inline void Fog::set_linear_range(float onset, float opaque);

2336 22 get_linear_onset_point 4 2945 27 Fog::get_linear_onset_point 0 1 971 338
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_onset_point
//       Access: Published
//  Description: Returns the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &Fog::get_linear_onset_point(void) const;

2337 22 set_linear_onset_point 4 2945 27 Fog::set_linear_onset_point 0 2 972 973 682
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
67
inline void Fog::set_linear_onset_point(float x, float y, float z);

2338 23 get_linear_opaque_point 4 2945 28 Fog::get_linear_opaque_point 0 1 974 379
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_opaque_point
//       Access: Published
//  Description: Returns the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f const &Fog::get_linear_opaque_point(void) const;

2339 23 set_linear_opaque_point 4 2945 28 Fog::set_linear_opaque_point 0 2 975 976 764
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
78
inline void Fog::set_linear_opaque_point(LPoint3f const &linear_opaque_point);

2340 19 set_linear_fallback 4 2945 24 Fog::set_linear_fallback 0 1 977 2210
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_fallback
//       Access: Published
//  Description: Fog effects are traditionally defined in
//               camera-relative space, but the Panda Fog node has a
//               special mode in which it can define a linear fog
//               effect in an arbitrary coordinate space.
//
//               This is done by specifying 3-d onset and opaque
//               points, and parenting the Fog object somewhere within
//               the scene graph.  In this mode, the fog will be
//               rendered as if it extended along the vector from the
//               onset point to the opaque point, in 3-d space.
//
//               However, the underlying fog effect supported by
//               hardware is generally only one-dimensional, and must
//               be rendered based on linear distance from the camera
//               plane.  Thus, this in-the-world effect is most
//               effective when the fog vector from onset point to
//               opaque point is most nearly parallel to the camera's
//               eye vector.
//
//               As the angle between the fog vector and the eye
//               vector increases, the accuracy of the effect
//               diminishes, up to a complete breakdown of the effect
//               at a 90 degree angle.
//
//               This function exists to define the workaround to this
//               problem.  The linear fallback parameters given here
//               specify how the fog should be rendered when the
//               parameters are exceeded in this way.
//
//               The angle parameter is the minimum angle, in degrees,
//               of the fog vector to the eye vector, at which the
//               fallback effect should be employed.  The onset and
//               opaque parameters specify the camera-relative onset
//               and opaque distances to pass to the rendering
//               hardware when employing the fallback effect.  This
//               supercedes the 3-d onset point and opaque points.
////////////////////////////////////////////////////////////////////
77
inline void Fog::set_linear_fallback(float angle, float onset, float opaque);

2341 15 get_exp_density 4 2945 20 Fog::get_exp_density 0 1 978 362
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_exp_density
//       Access: Published
//  Description: Returns the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
////////////////////////////////////////////////////////////////////
46
inline float Fog::get_exp_density(void) const;

2342 15 set_exp_density 4 2945 20 Fog::set_exp_density 0 1 979 489
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_exp_density
//       Access: Published
//  Description: Sets the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//
//               If the mode is currently set to M_linear, this
//               function implicitly sets it to M_exponential.
////////////////////////////////////////////////////////////////////
52
inline void Fog::set_exp_density(float exp_density);

2343 14 get_class_type 4 2945 19 Fog::get_class_type 0 1 980 0
44
static TypeHandle Fog::get_class_type(void);

2344 4 make 4 2947 15 FogAttrib::make 0 1 981 329
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering the indicated fog onto geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make(Fog *fog);

2345 8 make_off 4 2947 19 FogAttrib::make_off 0 1 982 317
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering unfogd geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make_off(void);

2346 6 is_off 4 2947 17 FogAttrib::is_off 0 1 983 325
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::is_off
//       Access: Published
//  Description: Returns true if the FogAttrib is an 'off' FogAttrib,
//               indicating that it should disable fog.
////////////////////////////////////////////////////////////////////
42
inline bool FogAttrib::is_off(void) const;

2347 7 get_fog 4 2947 18 FogAttrib::get_fog 0 1 984 356
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::get_fog
//       Access: Published
//  Description: If the FogAttrib is not an 'off' FogAttrib,
//               returns the fog that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
43
inline Fog *FogAttrib::get_fog(void) const;

2348 14 get_class_type 4 2947 25 FogAttrib::get_class_type 0 1 985 0
50
static TypeHandle FogAttrib::get_class_type(void);

2349 10 ~FogAttrib 4 2947 21 FogAttrib::~FogAttrib 0 0 0
28
FogAttrib::~FogAttrib(void);

2350 4 make 4 2948 17 LightAttrib::make 0 5 986 987 988 989 990 2205
// The following is the new, more general interface to the
// LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicated light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
97
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light);

2351 13 get_operation 4 2948 26 LightAttrib::get_operation 0 1 991 888
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the LightAttrib.
//               If this is O_set, the lights listed here completely
//               replace any lights that were already on.  If this is
//               O_add, the lights here are added to the set of of
//               lights that were already on, and if O_remove, the
//               lights here are removed from the set of lights that
//               were on.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
62
LightAttrib::Operation LightAttrib::get_operation(void) const;

2352 14 get_num_lights 4 2948 27 LightAttrib::get_num_lights 0 1 992 522
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_lights
//       Access: Published
//  Description: Returns the number of lights listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
44
int LightAttrib::get_num_lights(void) const;

2353 9 get_light 4 2948 22 LightAttrib::get_light 0 1 993 510
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_light
//       Access: Published
//  Description: Returns the nth light listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
43
Light *LightAttrib::get_light(int n) const;

2354 9 has_light 4 2948 22 LightAttrib::has_light 0 1 994 558
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
48
bool LightAttrib::has_light(Light *light) const;

2355 9 add_light 4 2948 22 LightAttrib::add_light 0 1 995 459
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights.
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderAttrib > LightAttrib::add_light(Light *light) const;

2356 12 remove_light 4 2948 25 LightAttrib::remove_light 0 1 996 489
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights.
//
//               This method is now deprecated.  Use remove_on_light()
//               or remove_off_light() instead.
////////////////////////////////////////////////////////////////////
77
ConstPointerTo< RenderAttrib > LightAttrib::remove_light(Light *light) const;

2357 12 make_all_off 4 2948 25 LightAttrib::make_all_off 0 1 997 418
// The following is the new, more general interface to the
// LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns off
//               all lights (and hence disables lighting).
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > LightAttrib::make_all_off(void);

2358 17 get_num_on_lights 4 2948 30 LightAttrib::get_num_on_lights 0 1 998 312
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_on_lights
//       Access: Published
//  Description: Returns the number of lights that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
54
inline int LightAttrib::get_num_on_lights(void) const;

2359 12 get_on_light 4 2948 25 LightAttrib::get_on_light 0 1 999 315
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_on_light
//       Access: Published
//  Description: Returns the nth light turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
55
inline NodePath LightAttrib::get_on_light(int n) const;

2360 12 has_on_light 4 2948 25 LightAttrib::has_on_light 0 1 1000 322
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_on_light
//       Access: Published
//  Description: Returns true if the indicated light is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool LightAttrib::has_on_light(NodePath const &light) const;

2361 18 get_num_off_lights 4 2948 31 LightAttrib::get_num_off_lights 0 1 1001 314
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_off_lights
//       Access: Published
//  Description: Returns the number of lights that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
55
inline int LightAttrib::get_num_off_lights(void) const;

2362 13 get_off_light 4 2948 26 LightAttrib::get_off_light 0 1 1002 330
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_off_light
//       Access: Published
//  Description: Returns the nth light turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
56
inline NodePath LightAttrib::get_off_light(int n) const;

2363 13 has_off_light 4 2948 26 LightAttrib::has_off_light 0 1 1003 324
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_off_light
//       Access: Published
//  Description: Returns true if the indicated light is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool LightAttrib::has_off_light(NodePath const &light) const;

2364 11 has_all_off 4 2948 24 LightAttrib::has_all_off 0 1 1004 326
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all lights
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::has_all_off(void) const;

2365 11 is_identity 4 2948 24 LightAttrib::is_identity 0 1 1005 329
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of lights in use.
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::is_identity(void) const;

2366 12 add_on_light 4 2948 25 LightAttrib::add_on_light 0 1 1006 388
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > LightAttrib::add_on_light(NodePath const &light) const;

2367 15 remove_on_light 4 2948 28 LightAttrib::remove_on_light 0 1 1007 395
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > LightAttrib::remove_on_light(NodePath const &light) const;

2368 13 add_off_light 4 2948 26 LightAttrib::add_off_light 0 1 1008 390
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderAttrib > LightAttrib::add_off_light(NodePath const &light) const;

2369 16 remove_off_light 4 2948 29 LightAttrib::remove_off_light 0 1 1009 397
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > LightAttrib::remove_off_light(NodePath const &light) const;

2370 13 filter_to_max 4 2948 26 LightAttrib::filter_to_max 0 1 1010 705
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new LightAttrib, very much like this one,
//               but with the number of on_lights reduced to be no
//               more than max_lights.  The number of off_lights in
//               the new LightAttrib is undefined.
//
//               The number of AmbientLights is not included in the
//               count.  All AmbientLights in the original attrib are
//               always included in the result, regardless of the
//               value of max_lights.
////////////////////////////////////////////////////////////////////
79
ConstPointerTo< LightAttrib > LightAttrib::filter_to_max(int max_lights) const;

2371 24 get_most_important_light 4 2948 37 LightAttrib::get_most_important_light 0 1 1011 477
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_most_important_light
//       Access: Public
//  Description: Returns the most important light (that is, the light
//               with the highest priority) in the LightAttrib,
//               excluding any ambient lights.  Returns an empty
//               NodePath if no non-ambient lights are found.
////////////////////////////////////////////////////////////////////
59
NodePath LightAttrib::get_most_important_light(void) const;

2372 14 get_class_type 4 2948 27 LightAttrib::get_class_type 0 1 1012 0
52
static TypeHandle LightAttrib::get_class_type(void);

2373 12 ~LightAttrib 4 2948 25 LightAttrib::~LightAttrib 0 0 0
32
LightAttrib::~LightAttrib(void);

2374 4 make 4 2950 20 MaterialAttrib::make 0 1 1013 344
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering the indicated material onto geometry.
////////////////////////////////////////////////////////////////////
79
static ConstPointerTo< RenderAttrib > MaterialAttrib::make(Material *material);

2375 8 make_off 4 2950 24 MaterialAttrib::make_off 0 1 1014 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering unmateriald geometry.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > MaterialAttrib::make_off(void);

2376 6 is_off 4 2950 22 MaterialAttrib::is_off 0 1 1015 374
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::is_off
//       Access: Published
//  Description: Returns true if the MaterialAttrib is an 'off'
//               MaterialAttrib, indicating that it should disable
//               the use of materials.
////////////////////////////////////////////////////////////////////
47
inline bool MaterialAttrib::is_off(void) const;

2377 12 get_material 4 2950 28 MaterialAttrib::get_material 0 1 1016 381
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::get_material
//       Access: Published
//  Description: If the MaterialAttrib is not an 'off' MaterialAttrib,
//               returns the material that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
58
inline Material *MaterialAttrib::get_material(void) const;

2378 14 get_class_type 4 2950 30 MaterialAttrib::get_class_type 0 1 1017 0
55
static TypeHandle MaterialAttrib::get_class_type(void);

2379 15 ~MaterialAttrib 4 2950 31 MaterialAttrib::~MaterialAttrib 0 0 0
38
MaterialAttrib::~MaterialAttrib(void);

2380 4 make 4 2951 25 RescaleNormalAttrib::make 0 1 1018 419
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RescaleNormalAttrib object that
//               specifies whether to rescale normals to compensate
//               for transform scales or incorrectly defined normals.
////////////////////////////////////////////////////////////////////
96
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make(RescaleNormalAttrib::Mode mode);

2381 12 make_default 4 2951 33 RescaleNormalAttrib::make_default 0 1 1019 483
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a RescaleNoramlAttrib object that's
//               suitable for putting at the top of a scene graph.
//               This will contain whatever attrib was suggested by
//               the user's rescale-normals Config variable.
////////////////////////////////////////////////////////////////////
78
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make_default(void);

2382 8 get_mode 4 2951 29 RescaleNormalAttrib::get_mode 0 1 1020 253
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
75
inline RescaleNormalAttrib::Mode RescaleNormalAttrib::get_mode(void) const;

2383 14 get_class_type 4 2951 35 RescaleNormalAttrib::get_class_type 0 1 1021 0
60
static TypeHandle RescaleNormalAttrib::get_class_type(void);

2384 20 ~RescaleNormalAttrib 4 2951 41 RescaleNormalAttrib::~RescaleNormalAttrib 0 0 0
48
RescaleNormalAttrib::~RescaleNormalAttrib(void);

2385 4 make 4 2953 22 ShadeModelAttrib::make 0 1 1022 399
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShadeModelAttrib object that specifies
//               whether to draw polygons with flat shading or with
//               per-vertex (smooth) shading.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > ShadeModelAttrib::make(ShadeModelAttrib::Mode mode);

2386 8 get_mode 4 2953 26 ShadeModelAttrib::get_mode 0 1 1023 249
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::get_mode
//       Access: Published
//  Description: Returns the shade mode.
////////////////////////////////////////////////////////////////////
69
inline ShadeModelAttrib::Mode ShadeModelAttrib::get_mode(void) const;

2387 14 get_class_type 4 2953 32 ShadeModelAttrib::get_class_type 0 1 1024 0
57
static TypeHandle ShadeModelAttrib::get_class_type(void);

2388 17 ~ShadeModelAttrib 4 2953 35 ShadeModelAttrib::~ShadeModelAttrib 0 0 0
42
ShadeModelAttrib::~ShadeModelAttrib(void);

2389 9 get_blank 4 2955 22 ShaderInput::get_blank 0 1 1033 371
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_blank
//       Access: Public, Static
//  Description: Returns a static ShaderInput object with
//               name NULL, priority zero, type INVALID, and
//               all value-fields cleared.
////////////////////////////////////////////////////////////////////
55
static ShaderInput const *ShaderInput::get_blank(void);

2390 11 ShaderInput 4 2955 24 ShaderInput::ShaderInput 0 8 1025 1026 1027 1028 1029 1030 1031 1032 902
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline ShaderInput::ShaderInput(InternalName *id, int priority = (0));

2391 8 get_name 4 2955 21 ShaderInput::get_name 0 1 1034 221
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline InternalName *ShaderInput::get_name(void) const;

2392 14 get_value_type 4 2955 27 ShaderInput::get_value_type 0 1 1035 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_value_type
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline int ShaderInput::get_value_type(void) const;

2393 12 get_priority 4 2955 25 ShaderInput::get_priority 0 1 1036 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_priority
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline int ShaderInput::get_priority(void) const;

2394 11 get_texture 4 2955 24 ShaderInput::get_texture 0 1 1037 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_texture
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline Texture *ShaderInput::get_texture(void) const;

2395 12 get_nodepath 4 2955 25 ShaderInput::get_nodepath 0 1 1038 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_nodepath
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline NodePath const &ShaderInput::get_nodepath(void) const;

2396 10 get_vector 4 2955 23 ShaderInput::get_vector 0 1 1039 223
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_vector
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline LVector4f const &ShaderInput::get_vector(void) const;

2397 14 get_class_type 4 2955 27 ShaderInput::get_class_type 0 1 1040 0
52
static TypeHandle ShaderInput::get_class_type(void);

2398 4 load 4 2957 12 Shader::load 0 4 1041 1042 1043 1044 440
////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Shader::load
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
91
static ConstPointerTo< Shader > Shader::load(Filename const &file, int preprocessor = (0));

2399 4 make 4 2957 12 Shader::make 0 2 1045 1046 219
////////////////////////////////////////////////////////////////////
//     Function: Shader::make
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
103
static ConstPointerTo< Shader > Shader::make(basic_string< char > const &body, int preprocessor = (0));

2400 8 get_name 4 2957 16 Shader::get_name 0 1 1047 215
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > const &Shader::get_name(void) const;

2401 8 get_file 4 2957 16 Shader::get_file 0 1 1048 967
// Filename: shader.I
// Created by: jyelon (01Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_file
//       Access: Published
//  Description: Returns null string if shader was not loaded from
//               a source file.
////////////////////////////////////////////////////////////////////
52
inline Filename const &Shader::get_file(void) const;

2402 8 get_body 4 2957 16 Shader::get_body 0 1 1049 215
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_body
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > const &Shader::get_body(void) const;

2403 16 get_preprocessor 4 2957 24 Shader::get_preprocessor 0 1 1050 223
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_preprocessor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int Shader::get_preprocessor(void) const;

2404 10 get_loaded 4 2957 18 Shader::get_loaded 0 1 1051 217
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_loaded
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool Shader::get_loaded(void) const;

2405 14 get_load_error 4 2957 22 Shader::get_load_error 0 1 1052 221
////////////////////////////////////////////////////////////////////
//     Function: Shader::get_load_error
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool Shader::get_load_error(void) const;

2406 11 macroexpand 4 2957 19 Shader::macroexpand 0 1 1053 1800
////////////////////////////////////////////////////////////////////
//     Function: Shader::macroexpand
//       Access: Public
//  Description: The eventual plan is that shaders will be run through
//               a macro preprocessor in order to generate the actual
//               shader text in Cg, GLSL, HLSL, or whatever.  The
//               macro preprocessor will be able to query the RenderState
//               and generate different shader code for different states.
//
//               The macroexpansion of the shader is stored in an object
//               of class ShaderExpansion.  This is somewhat expensive
//               to generate, so the ShaderExpansion is cached inside the
//               the RenderState itself.  The ShaderExpansion contains
//               a map of ShaderContexts, each containing a compiled
//               copy of the shader's macroexpansion.
//
//               Any given shader might not contain any ifdefs that
//               depend on the RenderState.  If macroexpand determines
//               that a given shader is not state-sensitive, it can cache
//               the macroexpansion in the field "_fixed_expansion."
//
//               The preprocessing is usually done by a built-in macro
//               preprocessing function.  However, the user can write
//               his own preprocessor if he wishes to do so.  A user-
//               supplied preprocessor can generate arbitrary code ---
//               in fact, it doesn't need to look at the input string
//               if it does not wish to do so.
//
//               Currently, macroexpand is just a stub that returns an
//               expansion which is exactly equal to the input string.
////////////////////////////////////////////////////////////////////
83
PointerTo< ShaderExpansion > Shader::macroexpand(RenderState const *context) const;

2407 14 get_class_type 4 2957 22 Shader::get_class_type 0 1 1054 0
47
static TypeHandle Shader::get_class_type(void);

2408 4 make 4 2958 18 ShaderAttrib::make 0 1 1055 297
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object with nothing
//               set.
////////////////////////////////////////////////////////////////////
63
static ConstPointerTo< RenderAttrib > ShaderAttrib::make(void);

2409 8 make_off 4 2958 22 ShaderAttrib::make_off 0 1 1056 383
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object that disables
//               the use of shaders (it does not clear out all shader
//               data, however.)
////////////////////////////////////////////////////////////////////
67
static ConstPointerTo< RenderAttrib > ShaderAttrib::make_off(void);

2410 10 has_shader 4 2958 24 ShaderAttrib::has_shader 0 1 1057 336
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader
//       Access: Published
//  Description: If true, the shader field of this attribute overrides
//               the shader field of the parent attribute.
////////////////////////////////////////////////////////////////////
49
inline bool ShaderAttrib::has_shader(void) const;

2411 19 get_shader_priority 4 2958 33 ShaderAttrib::get_shader_priority 0 1 1058 233
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_priority
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int ShaderAttrib::get_shader_priority(void) const;

2412 10 set_shader 4 2958 24 ShaderAttrib::set_shader 0 2 1059 1060 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
99
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader(Shader const *s, int priority = (0)) const;

2413 14 set_shader_off 4 2958 28 ShaderAttrib::set_shader_off 0 2 1061 1062 228
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_off(int priority = (0)) const;

2414 12 clear_shader 4 2958 26 ShaderAttrib::clear_shader 0 1 1063 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader(void) const;

2415 16 set_shader_input 4 2958 30 ShaderAttrib::set_shader_input 0 25 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 2086
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(ShaderInput const *inp) const;

2416 18 clear_shader_input 4 2958 32 ShaderAttrib::clear_shader_input 0 2 1089 1090 466
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader_input(InternalName *id) const;

2417 10 get_shader 4 2958 24 ShaderAttrib::get_shader 0 1 1091 444
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader
//       Access: Published
//  Description: Returns the shader object associated with the node.
//               If get_override returns true, but get_shader 
//               returns NULL, that means that this attribute should
//               disable the shader.
////////////////////////////////////////////////////////////////////
51
Shader const *ShaderAttrib::get_shader(void) const;

2418 16 get_shader_input 4 2958 30 ShaderAttrib::get_shader_input 0 2 1092 1093 818
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////
74
ShaderInput const *ShaderAttrib::get_shader_input(InternalName *id) const;

2419 26 register_with_read_factory 4 2958 40 ShaderAttrib::register_with_read_factory 0 1 1094 287
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::register_with_read_factory
//       Access: Public, Static
//  Description: Factory method to generate a Shader object
////////////////////////////////////////////////////////////////////
59
static void ShaderAttrib::register_with_read_factory(void);

2420 14 get_class_type 4 2958 28 ShaderAttrib::get_class_type 0 1 1095 0
53
static TypeHandle ShaderAttrib::get_class_type(void);

2421 13 ~ShaderAttrib 4 2958 27 ShaderAttrib::~ShaderAttrib 0 0 0
34
ShaderAttrib::~ShaderAttrib(void);

2422 4 make 4 2959 18 TexGenAttrib::make 0 4 1096 1097 1098 1099 612
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates no stages at
//               all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates just the
//               indicated stage.
////////////////////////////////////////////////////////////////////
63
static ConstPointerTo< RenderAttrib > TexGenAttrib::make(void);

2423 9 add_stage 4 2959 23 TexGenAttrib::add_stage 0 3 1100 1101 1102 437
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
////////////////////////////////////////////////////////////////////
201
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, RenderAttrib::TexGenMode mode, basic_string< char > const &source_name = ((string())), NodePath const &light = ((()))) const;

2424 12 remove_stage 4 2959 26 TexGenAttrib::remove_stage 0 1 1103 331
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > TexGenAttrib::remove_stage(TextureStage *stage) const;

2425 8 is_empty 4 2959 22 TexGenAttrib::is_empty 0 1 1104 323
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexGenAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
40
bool TexGenAttrib::is_empty(void) const;

2426 9 has_stage 4 2959 23 TexGenAttrib::has_stage 0 1 1105 400
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a mode associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return M_off).
////////////////////////////////////////////////////////////////////
56
bool TexGenAttrib::has_stage(TextureStage *stage) const;

2427 8 get_mode 4 2959 22 TexGenAttrib::get_mode 0 1 1106 384
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_mode
//       Access: Published
//  Description: Returns the generation mode associated with
//               the named texture stage, or M_off if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
75
RenderAttrib::TexGenMode TexGenAttrib::get_mode(TextureStage *stage) const;

2428 15 get_source_name 4 2959 29 TexGenAttrib::get_source_name 0 1 1107 644
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_source_name
//       Access: Published
//  Description: Returns the source name associated with the named
//               texture stage, or the empty string if no name is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector, in which
//               case it indicates the name of the source texture
//               coordinate set from which the tangent and binormal
//               are derived.
////////////////////////////////////////////////////////////////////
78
basic_string< char > TexGenAttrib::get_source_name(TextureStage *stage) const;

2429 9 get_light 4 2959 23 TexGenAttrib::get_light 0 1 1108 462
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_light
//       Access: Published
//  Description: Returns the Light associated with the named texture
//               stage, or the empty NodePath if no light is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector.
////////////////////////////////////////////////////////////////////
60
NodePath TexGenAttrib::get_light(TextureStage *stage) const;

2430 18 get_geom_rendering 4 2959 32 TexGenAttrib::get_geom_rendering 0 1 1109 448
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexGenAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
70
inline int TexGenAttrib::get_geom_rendering(int geom_rendering) const;

2431 14 get_class_type 4 2959 28 TexGenAttrib::get_class_type 0 1 1110 0
53
static TypeHandle TexGenAttrib::get_class_type(void);

2432 4 make 4 2960 19 TextureAttrib::make 0 2 1111 1112 1236
// These methods are deprecated, but they remain for now, for
// backward compatibility.  They treat the TextureAttrib as a
// single-texture application.

// The following methods define the new multitexture mode for
// TextureAttrib.  Each TextureAttrib can add or remove individual
// texture stages from the complete set of textures that are to be
// applied; this is similar to the mechanism of LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering the indicated texture onto geometry.
//
//               This method is deprecated, and is provided for
//               backward compatibility; you should use the
//               multitexture form of this instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make(Texture *tex);

2433 8 make_off 4 2960 23 TextureAttrib::make_off 0 1 1113 664
// These methods are deprecated, but they remain for now, for
// backward compatibility.  They treat the TextureAttrib as a
// single-texture application.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering untextured geometry.
//
//               This method is deprecated, and is provided for
//               backward compatibility; you should use the
//               multitexture form of this instead.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > TextureAttrib::make_off(void);

2434 6 is_off 4 2960 21 TextureAttrib::is_off 0 1 1114 539
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_off
//       Access: Published
//  Description: Returns true if the TextureAttrib is an 'off'
//               TextureAttrib, indicating that it should disable
//               texturing.
//
//               This method is deprecated, and is provided for
//               backward compatibility; you should use the
//               multitexture form of this instead.
////////////////////////////////////////////////////////////////////
46
inline bool TextureAttrib::is_off(void) const;

2435 11 get_texture 4 2960 26 TextureAttrib::get_texture 0 1 1115 386
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_texture
//       Access: Published
//  Description: If the TextureAttrib is not an 'off' TextureAttrib,
//               returns the base-level texture that is associated.
//               Otherwise, return NULL.
////////////////////////////////////////////////////////////////////
55
inline Texture *TextureAttrib::get_texture(void) const;

2436 12 make_all_off 4 2960 27 TextureAttrib::make_all_off 0 1 1116 605
// The following methods define the new multitexture mode for
// TextureAttrib.  Each TextureAttrib can add or remove individual
// texture stages from the complete set of textures that are to be
// applied; this is similar to the mechanism of LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that turns off
//               all stages (and hence disables texturing).
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make_all_off(void);

2437 17 get_num_on_stages 4 2960 32 TextureAttrib::get_num_on_stages 0 1 1117 314
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_stages
//       Access: Published
//  Description: Returns the number of stages that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
56
inline int TextureAttrib::get_num_on_stages(void) const;

2438 12 get_on_stage 4 2960 27 TextureAttrib::get_on_stage 0 1 1118 317
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
62
inline TextureStage *TextureAttrib::get_on_stage(int n) const;

2439 12 has_on_stage 4 2960 27 TextureAttrib::has_on_stage 0 1 1119 324
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_on_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool TextureAttrib::has_on_stage(TextureStage *stage) const;

2440 14 get_on_texture 4 2960 29 TextureAttrib::get_on_texture 0 1 1120 339
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_texture
//       Access: Published
//  Description: Returns the texture associated with the indicated
//               stage, or NULL if no texture is associated.
////////////////////////////////////////////////////////////////////
73
inline Texture *TextureAttrib::get_on_texture(TextureStage *stage) const;

2441 13 find_on_stage 4 2960 28 TextureAttrib::find_on_stage 0 1 1121 390
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::find_on_stage
//       Access: Published
//  Description: Returns the index number of the indicated
//               TextureStage within the list of on_stages, or -1 if
//               the indicated stage is not listed.
////////////////////////////////////////////////////////////////////
66
int TextureAttrib::find_on_stage(TextureStage const *stage) const;

2442 18 get_num_off_stages 4 2960 33 TextureAttrib::get_num_off_stages 0 1 1122 316
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_off_stages
//       Access: Published
//  Description: Returns the number of stages that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
57
inline int TextureAttrib::get_num_off_stages(void) const;

2443 13 get_off_stage 4 2960 28 TextureAttrib::get_off_stage 0 1 1123 332
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_off_stage
//       Access: Published
//  Description: Returns the nth stage turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
63
inline TextureStage *TextureAttrib::get_off_stage(int n) const;

2444 13 has_off_stage 4 2960 28 TextureAttrib::has_off_stage 0 1 1124 326
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_off_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool TextureAttrib::has_off_stage(TextureStage *stage) const;

2445 11 has_all_off 4 2960 26 TextureAttrib::has_all_off 0 1 1125 328
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all stages
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::has_all_off(void) const;

2446 11 is_identity 4 2960 26 TextureAttrib::is_identity 0 1 1126 331
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of stages in use.
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::is_identity(void) const;

2447 12 add_on_stage 4 2960 27 TextureAttrib::add_on_stage 0 1 1127 392
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
100
ConstPointerTo< RenderAttrib > TextureAttrib::add_on_stage(TextureStage *stage, Texture *tex) const;

2448 15 remove_on_stage 4 2960 30 TextureAttrib::remove_on_stage 0 1 1128 399
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > TextureAttrib::remove_on_stage(TextureStage *stage) const;

2449 13 add_off_stage 4 2960 28 TextureAttrib::add_off_stage 0 1 1129 394
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderAttrib > TextureAttrib::add_off_stage(TextureStage *stage) const;

2450 16 remove_off_stage 4 2960 31 TextureAttrib::remove_off_stage 0 1 1130 401
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > TextureAttrib::remove_off_stage(TextureStage *stage) const;

2451 20 unify_texture_stages 4 2960 35 TextureAttrib::unify_texture_stages 0 1 1131 451
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::unify_texture_stages
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with any included TextureAttribs that happen to have
//               the same name as the given object replaced with the
//               object.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > TextureAttrib::unify_texture_stages(TextureStage *stage) const;

2452 14 get_class_type 4 2960 29 TextureAttrib::get_class_type 0 1 1132 0
54
static TypeHandle TextureAttrib::get_class_type(void);

2453 14 ~TextureAttrib 4 2960 29 TextureAttrib::~TextureAttrib 0 0 0
36
TextureAttrib::~TextureAttrib(void);

2454 12 set_duration 4 2961 26 AuxSceneData::set_duration 0 1 1133 402
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_duration
//       Access: Public
//  Description: Specifies the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
56
inline void AuxSceneData::set_duration(double duration);

2455 12 get_duration 4 2961 26 AuxSceneData::get_duration 0 1 1134 400
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_duration
//       Access: Public
//  Description: Returns the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
53
inline double AuxSceneData::get_duration(void) const;

2456 20 set_last_render_time 4 2961 34 AuxSceneData::set_last_render_time 0 1 1135 345
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_last_render_time
//       Access: Public
//  Description: Should be called with the current frame_time each
//               time the AuxSceneData is used during traversal.
////////////////////////////////////////////////////////////////////
67
inline void AuxSceneData::set_last_render_time(double render_time);

2457 20 get_last_render_time 4 2961 34 AuxSceneData::get_last_render_time 0 1 1136 346
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_last_render_time
//       Access: Public
//  Description: Returns the last time this object was used during
//               traversal (according to set_last_render_time()).
////////////////////////////////////////////////////////////////////
61
inline double AuxSceneData::get_last_render_time(void) const;

2458 19 get_expiration_time 4 2961 33 AuxSceneData::get_expiration_time 0 1 1137 379
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_expiration_time
//       Access: Public
//  Description: Returns the frame_time at which this AuxSceneData
//               object is currently scheduled to be removed from the
//               scene graph.
////////////////////////////////////////////////////////////////////
60
inline double AuxSceneData::get_expiration_time(void) const;

2459 6 output 4 2961 20 AuxSceneData::output 0 1 1138 229
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void AuxSceneData::output(ostream &out) const;

2460 5 write 4 2961 19 AuxSceneData::write 0 2 1139 1140 228
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
77
virtual void AuxSceneData::write(ostream &out, int indent_level = (0)) const;

2461 14 get_class_type 4 2961 28 AuxSceneData::get_class_type 0 1 1141 0
53
static TypeHandle AuxSceneData::get_class_type(void);

2462 13 ~AuxSceneData 4 2961 27 AuxSceneData::~AuxSceneData 0 0 0
34
AuxSceneData::~AuxSceneData(void);

2463 7 BamFile 4 2963 16 BamFile::BamFile 0 1 1142 216
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
BamFile::BamFile(void);

2464 8 ~BamFile 4 2963 17 BamFile::~BamFile 0 0 215
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
24
BamFile::~BamFile(void);

2465 9 open_read 4 2963 18 BamFile::open_read 0 5 1143 1144 1145 1146 1147 725
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
80
bool BamFile::open_read(Filename const &bam_filename, bool report_errors = (1));

2466 11 read_object 4 2963 20 BamFile::read_object 0 1 1148 592
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_object
//       Access: Public
//  Description: Reads and returns the next object from the Bam file,
//               or NULL if the end of the file has been reached, or
//               if there is an error condition.  Use is_eof() to
//               differentiate these two cases.
//
//               The pointers returned by this method will not be
//               valid for use until resolve() is subsequently called.
////////////////////////////////////////////////////////////////////
42
TypedWritable *BamFile::read_object(void);

2467 6 is_eof 4 2963 15 BamFile::is_eof 0 1 1149 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_eof
//       Access: Public
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
33
bool BamFile::is_eof(void) const;

2468 7 resolve 4 2963 16 BamFile::resolve 0 1 1150 650
////////////////////////////////////////////////////////////////////
//     Function: BamFile::resolve
//       Access: Public
//  Description: This must be called after one or more objects have
//               been read via calls to read_object() in order to
//               resolve all internal pointer references in the
//               objects read and make all the pointers valid.  It
//               returns true if all objects are successfully
//               resolved, or false if some have not been (in which
//               case you must call resolve() again later).
////////////////////////////////////////////////////////////////////
28
bool BamFile::resolve(void);

2469 9 read_node 4 2963 18 BamFile::read_node 0 2 1151 1152 1170
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
////////////////////////////////////////////////////////////////////
68
PointerTo< PandaNode > BamFile::read_node(bool report_errors = (1));

2470 10 open_write 4 2963 19 BamFile::open_write 0 5 1153 1154 1155 1156 1157 838
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
81
bool BamFile::open_write(Filename const &bam_filename, bool report_errors = (1));

2471 12 write_object 4 2963 21 BamFile::write_object 0 1 1158 324
////////////////////////////////////////////////////////////////////
//     Function: BamFile::write_object
//       Access: Public
//  Description: Writes the indicated object to the Bam file.  Returns
//               true if successful, false on error.
////////////////////////////////////////////////////////////////////
56
bool BamFile::write_object(TypedWritable const *object);

2472 5 close 4 2963 14 BamFile::close 0 1 1159 245
////////////////////////////////////////////////////////////////////
//     Function: BamFile::close
//       Access: Public
//  Description: Closes the input or output stream.
////////////////////////////////////////////////////////////////////
26
void BamFile::close(void);

2473 13 is_valid_read 4 2963 22 BamFile::is_valid_read 0 1 1160 1034
// Filename: bamFile.I
// Created by:  drose (02Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_read
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               reading with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool BamFile::is_valid_read(void) const;

2474 14 is_valid_write 4 2963 23 BamFile::is_valid_write 0 1 1161 364
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_write
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               writing with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool BamFile::is_valid_write(void) const;

2475 18 get_file_major_ver 4 2963 27 BamFile::get_file_major_ver 0 1 1162 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_major_ver
//       Access: Public
//  Description: Returns the major version number of the file
//               currently being read, or the system current major
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_major_ver(void);

2476 18 get_file_minor_ver 4 2963 27 BamFile::get_file_minor_ver 0 1 1163 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_minor_ver
//       Access: Public
//  Description: Returns the minor version number of the file
//               currently being read, or the system current minor
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_minor_ver(void);

2477 15 get_file_endian 4 2963 24 BamFile::get_file_endian 0 1 1164 326
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_endian
//       Access: Public
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read or written.
////////////////////////////////////////////////////////////////////
47
BamEndian BamFile::get_file_endian(void) const;

2478 21 get_current_major_ver 4 2963 30 BamFile::get_current_major_ver 0 1 1165 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_major_ver
//       Access: Public
//  Description: Returns the system current major version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_major_ver(void);

2479 21 get_current_minor_ver 4 2963 30 BamFile::get_current_minor_ver 0 1 1166 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_minor_ver
//       Access: Public
//  Description: Returns the system current minor version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_minor_ver(void);

2480 10 get_reader 4 2963 19 BamFile::get_reader 0 1 1167 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_reader
//       Access: Public
//  Description: Returns the BamReader in charge of performing the
//               read operations.  This will return NULL unless
//               open_read() was called.
////////////////////////////////////////////////////////////////////
37
BamReader *BamFile::get_reader(void);

2481 10 get_writer 4 2963 19 BamFile::get_writer 0 1 1168 372
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_writer
//       Access: Public
//  Description: Returns the BamWriter in charge of performing the
//               write operations.  This will return NULL unless
//               open_write() was called.
////////////////////////////////////////////////////////////////////
37
BamWriter *BamFile::get_writer(void);

2482 4 make 4 2964 21 BillboardEffect::make 0 1 1169 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make
//       Access: Published, Static
//  Description: Constructs a new BillboardEffect object with the
//               indicated properties.
////////////////////////////////////////////////////////////////////
196
static ConstPointerTo< RenderEffect > BillboardEffect::make(LVector3f const &up_vector, bool eye_relative, bool axial_rotate, float offset, NodePath const &look_at, LPoint3f const &look_at_point);

2483 9 make_axis 4 2964 26 BillboardEffect::make_axis 0 1 1170 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_axis
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               axis-rotating billboard.
////////////////////////////////////////////////////////////////////
78
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_axis(void);

2484 14 make_point_eye 4 2964 31 BillboardEffect::make_point_eye 0 1 1171 335
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_eye
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               eye-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
83
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_eye(void);

2485 16 make_point_world 4 2964 33 BillboardEffect::make_point_world 0 1 1172 339
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_world
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               world-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
85
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_world(void);

2486 6 is_off 4 2964 23 BillboardEffect::is_off 0 1 1173 625
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::is_off
//       Access: Published
//  Description: Returns true if the BillboardEffect is an 'off'
//               BillboardEffect, indicating that it does not enable
//               billboarding.  This kind of BillboardEffect isn't
//               particularly useful and isn't normally created or
//               stored in the graph; it might be implicitly
//               discovered as the result of a
//               NodePath::get_rel_state().
////////////////////////////////////////////////////////////////////
48
inline bool BillboardEffect::is_off(void) const;

2487 13 get_up_vector 4 2964 30 BillboardEffect::get_up_vector 0 1 1174 281
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_up_vector
//       Access: Published
//  Description: Returns the up vector in effect for this billboard.
////////////////////////////////////////////////////////////////////
67
inline LVector3f const &BillboardEffect::get_up_vector(void) const;

2488 16 get_eye_relative 4 2964 33 BillboardEffect::get_eye_relative 0 1 1175 387
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_eye_relative
//       Access: Published
//  Description: Returns true if this billboard interprets the up
//               vector relative to the camera, or false if it is
//               relative to the world.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_eye_relative(void) const;

2489 16 get_axial_rotate 4 2964 33 BillboardEffect::get_axial_rotate 0 1 1176 395
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_axial_rotate
//       Access: Published
//  Description: Returns true if this billboard rotates only around
//               the axis of the up vector, or false if it rotates
//               freely in three dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_axial_rotate(void) const;

2490 10 get_offset 4 2964 27 BillboardEffect::get_offset 0 1 1177 465
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_offset
//       Access: Published
//  Description: Returns the distance toward the camera (or the
//               look_at_point) the billboard is moved towards, after
//               rotating.  This can be used to ensure the billboard
//               is not obscured by nearby geometry.
////////////////////////////////////////////////////////////////////
53
inline float BillboardEffect::get_offset(void) const;

2491 11 get_look_at 4 2964 28 BillboardEffect::get_look_at 0 1 1178 450
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at
//       Access: Published
//  Description: Returns the node this billboard will rotate to look
//               towards.  If this is empty, it means the billboard
//               will rotate towards the current camera node, wherever
//               that might be.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &BillboardEffect::get_look_at(void) const;

2492 17 get_look_at_point 4 2964 34 BillboardEffect::get_look_at_point 0 1 1179 386
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at_point
//       Access: Published
//  Description: Returns the point, relative to the look_at node,
//               towards which the billboard will rotate.  Normally
//               this is (0, 0, 0).
////////////////////////////////////////////////////////////////////
70
inline LPoint3f const &BillboardEffect::get_look_at_point(void) const;

2493 14 get_class_type 4 2964 31 BillboardEffect::get_class_type 0 1 1180 0
56
static TypeHandle BillboardEffect::get_class_type(void);

2494 16 ~BillboardEffect 4 2964 33 BillboardEffect::~BillboardEffect 0 0 0
40
BillboardEffect::~BillboardEffect(void);

2495 8 LensNode 4 2965 18 LensNode::LensNode 0 1 1181 447
////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
53
LensNode::LensNode(basic_string< char > const &name);

2496 9 copy_lens 4 2965 19 LensNode::copy_lens 0 1 1182 1076
// Filename: lensNode.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Sets up the LensNode using a copy of the
//               indicated Lens.  If the original Lens is
//               changed or destroyed, this LensNode is not
//               affected.
////////////////////////////////////////////////////////////////////
50
inline void LensNode::copy_lens(Lens const &lens);

2497 8 set_lens 4 2965 18 LensNode::set_lens 0 1 1183 403
////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets up the LensNode using this particular Lens
//               pointer.  If the lens is subsequently modified, the
//               LensNode properties immediately reflect the change.
////////////////////////////////////////////////////////////////////
43
inline void LensNode::set_lens(Lens *lens);

2498 8 get_lens 4 2965 18 LensNode::get_lens 0 1 1184 370
////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.
////////////////////////////////////////////////////////////////////
44
inline Lens *LensNode::get_lens(void) const;

2499 10 is_in_view 4 2965 20 LensNode::is_in_view 0 1 1185 374
////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
////////////////////////////////////////////////////////////////////
47
bool LensNode::is_in_view(LPoint3f const &pos);

2500 12 show_frustum 4 2965 22 LensNode::show_frustum 0 1 1186 391
////////////////////////////////////////////////////////////////////
//     Function: LensNode::show_frustum
//       Access: Published
//  Description: Enables the drawing of the lens's frustum to aid in
//               visualization.  This actually creates a GeomNode
//               which is parented to the LensNode.
////////////////////////////////////////////////////////////////////
34
void LensNode::show_frustum(void);

2501 12 hide_frustum 4 2965 22 LensNode::hide_frustum 0 1 1187 306
////////////////////////////////////////////////////////////////////
//     Function: LensNode::hide_frustum
//       Access: Published
//  Description: Disables the drawing of the lens's frustum to aid in
//               visualization.
////////////////////////////////////////////////////////////////////
34
void LensNode::hide_frustum(void);

2502 14 get_class_type 4 2965 24 LensNode::get_class_type 0 1 1188 0
49
static TypeHandle LensNode::get_class_type(void);

2503 9 ~LensNode 4 2965 19 LensNode::~LensNode 0 0 0
26
LensNode::~LensNode(void);

2504 6 Camera 4 2966 14 Camera::Camera 0 1 1189 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Camera::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
49
Camera::Camera(basic_string< char > const &name);

2505 10 set_active 4 2966 18 Camera::set_active 0 1 1190 998
// Filename: camera.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_active
//       Access: Published
//  Description: Sets the active flag on the camera.  When the camera
//               is not active, nothing will be rendered.
////////////////////////////////////////////////////////////////////
44
inline void Camera::set_active(bool active);

2506 9 is_active 4 2966 17 Camera::is_active 0 1 1191 295
////////////////////////////////////////////////////////////////////
//     Function: Camera::is_active
//       Access: Published
//  Description: Returns the current setting of the active flag on the
//               camera.
////////////////////////////////////////////////////////////////////
42
inline bool Camera::is_active(void) const;

2507 9 set_scene 4 2966 17 Camera::set_scene 0 1 1192 801
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_scene
//       Access: Published
//  Description: Sets the scene that will be rendered by the camera.
//               This is normally the root node of a scene graph,
//               typically a node called 'render', although it could
//               represent the root of any subgraph.
//
//               Note that the use of this method is now deprecated.
//               In the absence of an explicit scene set on the
//               camera, the camera will render whatever scene it is
//               parented into.  This is the preferred way to specify
//               the scene, since it is the more intuitive mechanism.
////////////////////////////////////////////////////////////////////
53
inline void Camera::set_scene(NodePath const &scene);

2508 9 get_scene 4 2966 17 Camera::get_scene 0 1 1193 306
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_scene
//       Access: Published
//  Description: Returns the scene that will be rendered by the
//               camera.  See set_scene().
////////////////////////////////////////////////////////////////////
53
inline NodePath const &Camera::get_scene(void) const;

2509 23 get_num_display_regions 4 2966 31 Camera::get_num_display_regions 0 1 1194 313
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_num_display_regions
//       Access: Published
//  Description: Returns the number of display regions associated with
//               the camera.
////////////////////////////////////////////////////////////////////
55
inline int Camera::get_num_display_regions(void) const;

2510 18 get_display_region 4 2966 26 Camera::get_display_region 0 1 1195 301
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_display_region
//       Access: Published
//  Description: Returns the nth display region associated with the
//               camera.
////////////////////////////////////////////////////////////////////
62
inline DisplayRegion *Camera::get_display_region(int n) const;

2511 15 set_camera_mask 4 2966 23 Camera::set_camera_mask 0 1 1196 717
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_camera_mask
//       Access: Published
//  Description: Changes the set of bits that represent the subset of
//               the scene graph the camera will render.
//
//               During the cull traversal, a node is not visited if
//               none of its draw mask bits intersect with the
//               camera's camera mask bits.  These masks can be used
//               to selectively hide and show different parts of the
//               scene graph from different cameras that are otherwise
//               viewing the same scene.
////////////////////////////////////////////////////////////////////
70
inline void Camera::set_camera_mask(BitMask< unsigned int, 32 > mask);

2512 15 get_camera_mask 4 2966 23 Camera::get_camera_mask 0 1 1197 373
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_camera_mask
//       Access: Published
//  Description: Returns the set of bits that represent the subset of
//               the scene graph the camera will render.  See
//               set_camera_mask().
////////////////////////////////////////////////////////////////////
71
inline BitMask< unsigned int, 32 > Camera::get_camera_mask(void) const;

2513 15 set_cull_center 4 2966 23 Camera::set_cull_center 0 1 1198 606
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_center
//       Access: Published
//  Description: Specifies the point from which the culling operations
//               are performed.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the culling from some other viewpoint, particularly
//               when you are debugging the culling itself.
////////////////////////////////////////////////////////////////////
65
inline void Camera::set_cull_center(NodePath const &cull_center);

2514 15 get_cull_center 4 2966 23 Camera::get_cull_center 0 1 1199 396
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed, if it was set by
//               set_cull_center(), or the empty NodePath otherwise.
////////////////////////////////////////////////////////////////////
59
inline NodePath const &Camera::get_cull_center(void) const;

2515 17 set_initial_state 4 2966 25 Camera::set_initial_state 0 1 1200 374
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
////////////////////////////////////////////////////////////////////
64
inline void Camera::set_initial_state(RenderState const *state);

2516 17 get_initial_state 4 2966 25 Camera::get_initial_state 0 1 1201 317
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
////////////////////////////////////////////////////////////////////
75
inline ConstPointerTo< RenderState > Camera::get_initial_state(void) const;

2517 17 set_tag_state_key 4 2966 25 Camera::set_tag_state_key 0 1 1202 477
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state_key
//       Access: Published
//  Description: Sets the tag key which, when encountered as a tag on
//               nodes in the scene graph, causes this Camera to apply
//               an arbitrary state transition based on the value of
//               the tag (as specified to set_tag_state()).
////////////////////////////////////////////////////////////////////
81
inline void Camera::set_tag_state_key(basic_string< char > const &tag_state_key);

2518 17 get_tag_state_key 4 2966 25 Camera::get_tag_state_key 0 1 1203 311
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state_key
//       Access: Published
//  Description: Returns the tag key as set by a previous call to
//               set_tag_state_key().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &Camera::get_tag_state_key(void) const;

2519 13 set_tag_state 4 2966 21 Camera::set_tag_state 0 1 1204 959
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state
//       Access: Published
//  Description: Associates a particular state transition with the
//               indicated tag value.  When a node is encountered
//               during traversal with the tag key specified by
//               set_tag_state_key(), if the value of that tag matches
//               tag_state, then the indicated state is applied to
//               this node--but only when it is rendered by this
//               camera.
//
//               This can be used to apply special effects to nodes
//               when they are rendered by certain cameras.  It is
//               particularly useful for multipass rendering, in which
//               specialty cameras might be needed to render the scene
//               with a particular set of effects.
////////////////////////////////////////////////////////////////////
92
void Camera::set_tag_state(basic_string< char > const &tag_state, RenderState const *state);

2520 15 clear_tag_state 4 2966 23 Camera::clear_tag_state 0 1 1205 314
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_tag_state
//       Access: Published
//  Description: Removes the association established by a previous
//               call to set_tag_state().
////////////////////////////////////////////////////////////////////
68
void Camera::clear_tag_state(basic_string< char > const &tag_state);

2521 13 has_tag_state 4 2966 21 Camera::has_tag_state 0 1 1206 343
////////////////////////////////////////////////////////////////////
//     Function: Camera::has_tag_state
//       Access: Published
//  Description: Returns true if set_tag_state() has previously been
//               called with the indicated tag state, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool Camera::has_tag_state(basic_string< char > const &tag_state) const;

2522 13 get_tag_state 4 2966 21 Camera::get_tag_state 0 1 1207 402
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state
//       Access: Published
//  Description: Returns the state associated with the indicated tag
//               state by a previous call to set_tag_state(), or the
//               empty state if nothing has been associated.
////////////////////////////////////////////////////////////////////
97
ConstPointerTo< RenderState > Camera::get_tag_state(basic_string< char > const &tag_state) const;

2523 18 set_aux_scene_data 4 2966 26 Camera::set_aux_scene_data 0 1 1208 403
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_aux_scene_data
//       Access: Published
//  Description: Associates the indicated AuxSceneData object with the
//               given NodePath, possibly replacing a previous
//               data defined for the same NodePath, if any.
////////////////////////////////////////////////////////////////////
79
void Camera::set_aux_scene_data(NodePath const &node_path, AuxSceneData *data);

2524 20 clear_aux_scene_data 4 2966 28 Camera::clear_aux_scene_data 0 1 1209 401
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_aux_scene_data
//       Access: Published
//  Description: Removes the AuxSceneData associated with the
//               indicated NodePath.  Returns true if it is removed
//               successfully, false if it was already gone.
////////////////////////////////////////////////////////////////////
61
bool Camera::clear_aux_scene_data(NodePath const &node_path);

2525 18 get_aux_scene_data 4 2966 26 Camera::get_aux_scene_data 0 1 1210 341
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_aux_scene_data
//       Access: Published
//  Description: Returns the AuxSceneData associated with the
//               indicated NodePath, or NULL if nothing is associated.
////////////////////////////////////////////////////////////////////
74
AuxSceneData *Camera::get_aux_scene_data(NodePath const &node_path) const;

2526 19 list_aux_scene_data 4 2966 27 Camera::list_aux_scene_data 0 1 1211 298
////////////////////////////////////////////////////////////////////
//     Function: Camera::list_aux_scene_data
//       Access: Published
//  Description: Outputs all of the NodePaths and AuxSceneDatas in
//               use.
////////////////////////////////////////////////////////////////////
53
void Camera::list_aux_scene_data(ostream &out) const;

2527 22 cleanup_aux_scene_data 4 2966 30 Camera::cleanup_aux_scene_data 0 1 1212 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
////////////////////////////////////////////////////////////////////
41
int Camera::cleanup_aux_scene_data(void);

2528 14 get_class_type 4 2966 22 Camera::get_class_type 0 1 1213 0
47
static TypeHandle Camera::get_class_type(void);

2529 4 make 4 2967 19 CompassEffect::make 0 2 1214 1215 660
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
////////////////////////////////////////////////////////////////////
111
static ConstPointerTo< RenderEffect > CompassEffect::make(NodePath const &reference, int properties = (P_rot));

2530 13 get_reference 4 2967 28 CompassEffect::get_reference 0 1 1216 398
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_reference
//       Access: Published
//  Description: Returns the reference node from which the
//               CompassEffect inherits its transform.  If this is
//               empty, it means the root of the scene graph.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &CompassEffect::get_reference(void) const;

2531 14 get_properties 4 2967 29 CompassEffect::get_properties 0 1 1217 398
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_properties
//       Access: Published
//  Description: 
//               Returns the bitmask of properties that this
//               CompassEffect object inherits from its reference node
//               (or from the root).
////////////////////////////////////////////////////////////////////
53
inline int CompassEffect::get_properties(void) const;

2532 14 get_class_type 4 2967 29 CompassEffect::get_class_type 0 1 1218 0
54
static TypeHandle CompassEffect::get_class_type(void);

2533 14 ~CompassEffect 4 2967 29 CompassEffect::~CompassEffect 0 0 0
36
CompassEffect::~CompassEffect(void);

2534 13 ~CullBinEnums 4 2969 27 CullBinEnums::~CullBinEnums 0 0 0
34
CullBinEnums::~CullBinEnums(void);

2535 7 add_bin 4 2971 23 CullBinManager::add_bin 0 1 1219 507
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::add_bin
//       Access: Published
//  Description: Defines a new bin with the indicated name, and
//               returns the new bin_index.  If there is already a bin
//               with the same name returns its bin_index if it had
//               the same properties; otherwise, reports an error and
//               returns -1.
////////////////////////////////////////////////////////////////////
100
int CullBinManager::add_bin(basic_string< char > const &name, CullBinEnums::BinType type, int sort);

2536 10 remove_bin 4 2971 26 CullBinManager::remove_bin 0 1 1220 663
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::remove_bin
//       Access: Published
//  Description: Permanently removes the indicated bin.  This
//               operation is not protected from the pipeline and will
//               disturb whatever is currently rendering in draw.  You
//               should not call this during the normal course of
//               rendering a frame; it is intended only as an aid to
//               development, to allow the developer to interactively
//               fiddle with the set of bins.
////////////////////////////////////////////////////////////////////
47
void CullBinManager::remove_bin(int bin_index);

2537 12 get_num_bins 4 2971 28 CullBinManager::get_num_bins 0 1 1221 268
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_num_bins
//       Access: Published
//  Description: Returns the number of bins in the world.
////////////////////////////////////////////////////////////////////
52
inline int CullBinManager::get_num_bins(void) const;

2538 7 get_bin 4 2971 23 CullBinManager::get_bin 0 1 1222 511
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin
//       Access: Published
//  Description: Returns the bin_index of the nth bin in the set,
//               where n is a number between 0 and get_num_bins().
//               This returns the list of bin_index numbers, in sorted
//               order (that is, in the order in which the bins should
//               be rendered).
////////////////////////////////////////////////////////////////////
48
inline int CullBinManager::get_bin(int n) const;

2539 8 find_bin 4 2971 24 CullBinManager::find_bin 0 1 1223 336
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::find_bin
//       Access: Published
//  Description: Returns the bin_index associated with the bin of the
//               given name, or -1 if no bin has that name.
////////////////////////////////////////////////////////////////////
69
int CullBinManager::find_bin(basic_string< char > const &name) const;

2540 12 get_bin_name 4 2971 28 CullBinManager::get_bin_name 0 1 1224 458
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).  The bin's name may not be changed
//               during the life of the bin.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > CullBinManager::get_bin_name(int bin_index) const;

2541 12 get_bin_type 4 2971 28 CullBinManager::get_bin_type 0 2 1225 1226 677
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               name.
////////////////////////////////////////////////////////////////////
79
inline CullBinEnums::BinType CullBinManager::get_bin_type(int bin_index) const;

2542 12 set_bin_type 4 2971 28 CullBinManager::set_bin_type 0 2 1227 1228 995
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               name.
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////
84
inline void CullBinManager::set_bin_type(int bin_index, CullBinEnums::BinType type);

2543 12 get_bin_sort 4 2971 28 CullBinManager::get_bin_sort 0 2 1229 1230 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
61
inline int CullBinManager::get_bin_sort(int bin_index) const;

2544 12 set_bin_sort 4 2971 28 CullBinManager::set_bin_sort 0 2 1231 1232 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
66
inline void CullBinManager::set_bin_sort(int bin_index, int sort);

2545 14 get_bin_active 4 2971 30 CullBinManager::get_bin_active 0 2 1233 1234 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
64
inline bool CullBinManager::get_bin_active(int bin_index) const;

2546 14 set_bin_active 4 2971 30 CullBinManager::set_bin_active 0 2 1235 1236 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
71
inline void CullBinManager::set_bin_active(int bin_index, bool active);

2547 5 write 4 2971 21 CullBinManager::write 0 1 1237 221
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void CullBinManager::write(ostream &out) const;

2548 14 get_global_ptr 4 2971 30 CullBinManager::get_global_ptr 0 1 1238 311
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global CullBinManager
//               object.
////////////////////////////////////////////////////////////////////
60
static CullBinManager *CullBinManager::get_global_ptr(void);

2549 4 make 4 2972 17 DecalEffect::make 0 1 1239 261
////////////////////////////////////////////////////////////////////
//     Function: DecalEffect::make
//       Access: Published, Static
//  Description: Constructs a new DecalEffect object.
////////////////////////////////////////////////////////////////////
62
static ConstPointerTo< RenderEffect > DecalEffect::make(void);

2550 14 get_class_type 4 2972 27 DecalEffect::get_class_type 0 1 1240 0
52
static TypeHandle DecalEffect::get_class_type(void);

2551 12 ~DecalEffect 4 2972 25 DecalEffect::~DecalEffect 0 0 0
32
DecalEffect::~DecalEffect(void);

2552 16 DirectionalLight 4 2973 34 DirectionalLight::DirectionalLight 0 1 1241 610
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
69
DirectionalLight::DirectionalLight(basic_string< char > const &name);

2553 18 get_specular_color 4 2973 36 DirectionalLight::get_specular_color 0 1 1242 314
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &DirectionalLight::get_specular_color(void) const;

2554 18 set_specular_color 4 2973 36 DirectionalLight::set_specular_color 0 1 1243 311
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
74
inline void DirectionalLight::set_specular_color(LVecBase4f const &color);

2555 9 get_point 4 2973 27 DirectionalLight::get_point 0 1 1244 652
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &DirectionalLight::get_point(void) const;

2556 9 set_point 4 2973 27 DirectionalLight::set_point 0 1 1245 278
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
63
inline void DirectionalLight::set_point(LPoint3f const &point);

2557 13 get_direction 4 2973 31 DirectionalLight::get_direction 0 1 1246 382
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
////////////////////////////////////////////////////////////////////
68
inline LVector3f const &DirectionalLight::get_direction(void) const;

2558 13 set_direction 4 2973 31 DirectionalLight::set_direction 0 1 1247 275
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
////////////////////////////////////////////////////////////////////
72
inline void DirectionalLight::set_direction(LVector3f const &direction);

2559 14 get_class_type 4 2973 32 DirectionalLight::get_class_type 0 1 1248 0
57
static TypeHandle DirectionalLight::get_class_type(void);

2560 17 ~DirectionalLight 4 2973 35 DirectionalLight::~DirectionalLight 0 0 0
42
DirectionalLight::~DirectionalLight(void);

2561 9 make_hide 4 2974 25 DrawMaskAttrib::make_hide 0 2 1249 1250 582
////////////////////////////////////////////////////////////////////
//     Function: DrawMaskAttrib::make_hide
//       Access: Published, Static
//  Description: Constructs a new DrawMaskAttrib that removes the
//               indicated draw bits from the visibility mask.  That
//               is, it makes any nodes invisible to cameras that have
//               any bits in common with draw_mask.  This is similar
//               to (but not quite identical to)
//               NodePath.hide(draw_mask).
////////////////////////////////////////////////////////////////////
125
static inline ConstPointerTo< RenderAttrib > DrawMaskAttrib::make_hide(BitMask< unsigned int, 32 > draw_mask = ((all_on())));

2562 9 make_show 4 2974 25 DrawMaskAttrib::make_show 0 2 1251 1252 575
////////////////////////////////////////////////////////////////////
//     Function: DrawMaskAttrib::make_show
//       Access: Published, Static
//  Description: Constructs a new DrawMaskAttrib that adds the
//               indicated draw bits to the visibility mask.  That
//               is, it makes any nodes visible to cameras that have
//               any bits in common with draw_mask.  This is similar
//               to (but not quite identical to)
//               NodePath.show(draw_mask).
////////////////////////////////////////////////////////////////////
125
static inline ConstPointerTo< RenderAttrib > DrawMaskAttrib::make_show(BitMask< unsigned int, 32 > draw_mask = ((all_on())));

2563 4 make 4 2974 20 DrawMaskAttrib::make 0 1 1253 502
////////////////////////////////////////////////////////////////////
//     Function: DrawMaskAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DrawMaskAttrib that changes the
//               bits_to_change bits in the current DrawMask to the
//               values of the corresponding bits in new_mask.  Only
//               those bits in common with bits_to_change are
//               affected.
////////////////////////////////////////////////////////////////////
141
static ConstPointerTo< RenderAttrib > DrawMaskAttrib::make(BitMask< unsigned int, 32 > new_mask, BitMask< unsigned int, 32 > bits_to_change);

2564 12 get_new_mask 4 2974 28 DrawMaskAttrib::get_new_mask 0 1 1254 321
////////////////////////////////////////////////////////////////////
//     Function: DrawMaskAttrib::get_new_mask
//       Access: Published
//  Description: Returns the new DrawMask that will be set after the
//               attrib has been applied.
////////////////////////////////////////////////////////////////////
76
inline BitMask< unsigned int, 32 > DrawMaskAttrib::get_new_mask(void) const;

2565 18 get_bits_to_change 4 2974 34 DrawMaskAttrib::get_bits_to_change 0 1 1255 333
////////////////////////////////////////////////////////////////////
//     Function: DrawMaskAttrib::get_bits_to_change
//       Access: Published
//  Description: Returns the set of bits that will be allowed to be
//               changed by this DrawMaskAttrib.
////////////////////////////////////////////////////////////////////
82
inline BitMask< unsigned int, 32 > DrawMaskAttrib::get_bits_to_change(void) const;

2566 14 get_class_type 4 2974 30 DrawMaskAttrib::get_class_type 0 1 1256 0
55
static TypeHandle DrawMaskAttrib::get_class_type(void);

2567 15 ~DrawMaskAttrib 4 2974 31 DrawMaskAttrib::~DrawMaskAttrib 0 0 0
38
DrawMaskAttrib::~DrawMaskAttrib(void);

2568 7 LODNode 4 2975 16 LODNode::LODNode 0 1 1257 445
////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LODNode::LODNode(basic_string< char > const &name);

2569 10 add_switch 4 2975 19 LODNode::add_switch 0 1 1258 896
// The sense of in vs. out distances is as if the object were coming
// towards you from far away: it switches "in" at the far distance,
// and switches "out" at the close distance.  Thus, "in" should be
// larger than "out".

////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
////////////////////////////////////////////////////////////////////
53
inline void LODNode::add_switch(float in, float out);

2570 10 set_switch 4 2975 19 LODNode::set_switch 0 1 1259 320
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
////////////////////////////////////////////////////////////////////
64
inline bool LODNode::set_switch(int index, float in, float out);

2571 14 clear_switches 4 2975 23 LODNode::clear_switches 0 1 1260 389
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
////////////////////////////////////////////////////////////////////
42
inline void LODNode::clear_switches(void);

2572 16 get_num_switches 4 2975 25 LODNode::get_num_switches 0 1 1261 443
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
////////////////////////////////////////////////////////////////////
49
inline int LODNode::get_num_switches(void) const;

2573 6 get_in 4 2975 15 LODNode::get_in 0 1 1262 371
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
46
inline float LODNode::get_in(int index) const;

2574 7 get_out 4 2975 16 LODNode::get_out 0 1 1263 373
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
47
inline float LODNode::get_out(int index) const;

2575 17 get_lowest_switch 4 2975 26 LODNode::get_lowest_switch 0 1 1264 480
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
50
inline int LODNode::get_lowest_switch(void) const;

2576 18 get_highest_switch 4 2975 27 LODNode::get_highest_switch 0 1 1265 489
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
51
inline int LODNode::get_highest_switch(void) const;

2577 12 force_switch 4 2975 21 LODNode::force_switch 0 1 1266 390
////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
////////////////////////////////////////////////////////////////////
45
inline void LODNode::force_switch(int index);

2578 18 clear_force_switch 4 2975 27 LODNode::clear_force_switch 0 1 1267 380
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
////////////////////////////////////////////////////////////////////
46
inline void LODNode::clear_force_switch(void);

2579 10 set_center 4 2975 19 LODNode::set_center 0 1 1268 408
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
56
inline void LODNode::set_center(LPoint3f const &center);

2580 10 get_center 4 2975 19 LODNode::get_center 0 1 1269 406
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
55
inline LPoint3f const &LODNode::get_center(void) const;

2581 14 get_class_type 4 2975 23 LODNode::get_class_type 0 1 1270 0
48
static TypeHandle LODNode::get_class_type(void);

2582 8 ~LODNode 4 2975 17 LODNode::~LODNode 0 0 0
24
LODNode::~LODNode(void);

2583 11 FadeLODNode 4 2976 24 FadeLODNode::FadeLODNode 0 1 1271 1131
// Filename: fadelodNode.I
// Created by:  sshodhan (14Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
FadeLODNode::FadeLODNode(basic_string< char > const &name);

2584 13 set_fade_time 4 2976 26 FadeLODNode::set_fade_time 0 1 1272 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
48
inline void FadeLODNode::set_fade_time(float t);

2585 13 get_fade_time 4 2976 26 FadeLODNode::get_fade_time 0 1 1273 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
52
inline float FadeLODNode::get_fade_time(void) const;

2586 14 get_class_type 4 2976 27 FadeLODNode::get_class_type 0 1 1274 0
52
static TypeHandle FadeLODNode::get_class_type(void);

2587 12 ~FadeLODNode 4 2976 25 FadeLODNode::~FadeLODNode 0 0 0
32
FadeLODNode::~FadeLODNode(void);

2588 22 InternalNameCollection 4 2977 46 InternalNameCollection::InternalNameCollection 0 2 1275 1276 475
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
InternalNameCollection::InternalNameCollection(void);

2589 10 operator = 4 2977 34 InternalNameCollection::operator = 0 1 1277 247
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
void InternalNameCollection::operator =(InternalNameCollection const &copy);

2590 23 ~InternalNameCollection 4 2977 47 InternalNameCollection::~InternalNameCollection 0 0 919
// Filename: internalNameCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline InternalNameCollection::~InternalNameCollection(void);

2591 8 add_name 4 2977 32 InternalNameCollection::add_name 0 1 1278 274
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_name
//       Access: Published
//  Description: Adds a new InternalName to the collection.
////////////////////////////////////////////////////////////////////
58
void InternalNameCollection::add_name(InternalName *name);

2592 11 remove_name 4 2977 35 InternalNameCollection::remove_name 0 1 1279 410
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_name
//       Access: Published
//  Description: Removes the indicated InternalName from the collection.
//               Returns true if the name was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
61
bool InternalNameCollection::remove_name(InternalName *name);

2593 14 add_names_from 4 2977 38 InternalNameCollection::add_names_from 0 1 1280 480
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_names_from
//       Access: Published
//  Description: Adds all the InternalNames indicated in the other
//               collection to this name.  The other names are simply
//               appended to the end of the names in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
81
void InternalNameCollection::add_names_from(InternalNameCollection const &other);

2594 17 remove_names_from 4 2977 41 InternalNameCollection::remove_names_from 0 1 1281 343
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_names_from
//       Access: Published
//  Description: Removes from this collection all of the InternalNames
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
84
void InternalNameCollection::remove_names_from(InternalNameCollection const &other);

2595 22 remove_duplicate_names 4 2977 46 InternalNameCollection::remove_duplicate_names 0 1 1282 485
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_duplicate_names
//       Access: Published
//  Description: Removes any duplicate entries of the same InternalNames
//               on this collection.  If a InternalName appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void InternalNameCollection::remove_duplicate_names(void);

2596 8 has_name 4 2977 32 InternalNameCollection::has_name 0 1 1283 336
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::has_name
//       Access: Published
//  Description: Returns true if the indicated InternalName appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool InternalNameCollection::has_name(InternalName *name) const;

2597 5 clear 4 2977 29 InternalNameCollection::clear 0 1 1284 275
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::clear
//       Access: Published
//  Description: Removes all InternalNames from the collection.
////////////////////////////////////////////////////////////////////
41
void InternalNameCollection::clear(void);

2598 13 get_num_names 4 2977 37 InternalNameCollection::get_num_names 0 1 1285 291
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_num_names
//       Access: Published
//  Description: Returns the number of InternalNames in the collection.
////////////////////////////////////////////////////////////////////
54
int InternalNameCollection::get_num_names(void) const;

2599 8 get_name 4 2977 32 InternalNameCollection::get_name 0 1 1286 279
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_name
//       Access: Published
//  Description: Returns the nth InternalName in the collection.
////////////////////////////////////////////////////////////////////
64
InternalName *InternalNameCollection::get_name(int index) const;

2600 11 operator [] 4 2977 35 InternalNameCollection::operator [] 0 1 1287 399
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator []
//       Access: Published
//  Description: Returns the nth InternalName in the collection.  This is
//               the same as get_name(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
67
InternalName *InternalNameCollection::operator [](int index) const;

2601 6 output 4 2977 30 InternalNameCollection::output 0 1 1288 344
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void InternalNameCollection::output(ostream &out) const;

2602 5 write 4 2977 29 InternalNameCollection::write 0 2 1289 1290 348
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
79
void InternalNameCollection::write(ostream &out, int indent_level = (0)) const;

2603 15 upcast_to_Light 12 2978 30 LightLensNode::upcast_to_Light 0 1 1295 34
upcast from LightLensNode to Light
44
Light *LightLensNode::upcast_to_Light(void);

2604 25 downcast_to_LightLensNode 12 2918 32 Light::downcast_to_LightLensNode 0 1 1296 36
downcast from Light to LightLensNode
54
LightLensNode *Light::downcast_to_LightLensNode(void);

2605 18 upcast_to_LensNode 12 2978 33 LightLensNode::upcast_to_LensNode 0 1 1297 37
upcast from LightLensNode to LensNode
50
LensNode *LightLensNode::upcast_to_LensNode(void);

2606 25 downcast_to_LightLensNode 12 2965 35 LensNode::downcast_to_LightLensNode 0 1 1298 39
downcast from LensNode to LightLensNode
57
LightLensNode *LensNode::downcast_to_LightLensNode(void);

2607 6 output 4 2978 21 LightLensNode::output 0 1 1291 316
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void LightLensNode::output(ostream &out) const;

2608 5 write 4 2978 20 LightLensNode::write 0 2 1292 1293 315
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
78
virtual void LightLensNode::write(ostream &out, int indent_level = (0)) const;

2609 14 get_class_type 4 2978 29 LightLensNode::get_class_type 0 1 1294 0
54
static TypeHandle LightLensNode::get_class_type(void);

2610 14 ~LightLensNode 4 2978 29 LightLensNode::~LightLensNode 0 0 0
36
LightLensNode::~LightLensNode(void);

2611 13 LoaderOptions 4 2979 28 LoaderOptions::LoaderOptions 0 3 1299 1300 1301 1134
// Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline LoaderOptions::LoaderOptions(int flags = ((LF_search | LF_report_errors)));

2612 10 operator = 4 2979 25 LoaderOptions::operator = 0 1 1302 238
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

2613 9 set_flags 4 2979 24 LoaderOptions::set_flags 0 1 1303 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LoaderOptions::set_flags(int flags);

2614 9 get_flags 4 2979 24 LoaderOptions::get_flags 0 1 1304 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int LoaderOptions::get_flags(void) const;

2615 14 ~LoaderOptions 4 2979 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

2616 7 Results 4 2983 24 Loader::Results::Results 0 2 1313 1314 1130
// Filename: loader.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline Loader::Results::Results(void);

2617 10 operator = 4 2983 27 Loader::Results::operator = 0 1 1315 240
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void Loader::Results::operator =(Loader::Results const &copy);

2618 8 ~Results 4 2983 25 Loader::Results::~Results 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline Loader::Results::~Results(void);

2619 5 clear 4 2983 22 Loader::Results::clear 0 1 1316 258
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::clear
//       Access: Published
//  Description: Removes all the files from the list.
////////////////////////////////////////////////////////////////////
41
inline void Loader::Results::clear(void);

2620 13 get_num_files 4 2983 30 Loader::Results::get_num_files 0 1 1317 277
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_num_files
//       Access: Published
//  Description: Returns the number of files on the result list.
////////////////////////////////////////////////////////////////////
54
inline int Loader::Results::get_num_files(void) const;

2621 8 get_file 4 2983 25 Loader::Results::get_file 0 1 1318 265
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file
//       Access: Published
//  Description: Returns the nth file on the result list.
////////////////////////////////////////////////////////////////////
62
inline Filename const &Loader::Results::get_file(int n) const;

2622 13 get_file_type 4 2983 30 Loader::Results::get_file_type 0 1 1319 304
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file_type
//       Access: Published
//  Description: Returns the file type of the nth file on the result
//               list.
////////////////////////////////////////////////////////////////////
67
inline LoaderFileType *Loader::Results::get_file_type(int n) const;

2623 6 Loader 4 2981 14 Loader::Loader 0 1 1305 218
////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
21
Loader::Loader(void);

2624 14 find_all_files 4 2981 22 Loader::find_all_files 0 1 1306 428
////////////////////////////////////////////////////////////////////
//     Function: Loader::find_all_files
//       Access: Published
//  Description: Searches along the given search path for the given
//               file name, and fills up the results list with all
//               possible matches and their associated types, in
//               order.
////////////////////////////////////////////////////////////////////
117
int Loader::find_all_files(Filename const &filename, DSearchPath const &search_path, Loader::Results &results) const;

2625 9 load_sync 4 2981 17 Loader::load_sync 0 2 1307 1308 455
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
////////////////////////////////////////////////////////////////////
119
inline PointerTo< PandaNode > Loader::load_sync(Filename const &filename, LoaderOptions const &options = ((()))) const;

2626 12 request_load 4 2981 20 Loader::request_load 0 2 1309 1310 911
////////////////////////////////////////////////////////////////////
//     Function: Loader::request_load
//       Access: Published
//  Description: Requests an asynchronous load of a file.  The request
//               will be queued and served by the asynchronous thread.
//               If event_name is nonempty, it is the name of the
//               event that will be thrown (with the uint id as its
//               single parameter) when the loading is completed later.
//
//               The return value is an integer which can be used to
//               identify this particular request later to
//               fetch_load(), or 0 if there has been an error.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
////////////////////////////////////////////////////////////////////
119
unsigned int Loader::request_load(basic_string< char > const &event_name, Filename const &filename, bool search = (1));

2627 10 check_load 4 2981 18 Loader::check_load 0 1 1311 334
////////////////////////////////////////////////////////////////////
//     Function: Loader::check_load
//       Access: Published
//  Description: Returns true if the indicated load-request has
//               completed and not yet been fetched, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool Loader::check_load(unsigned int id);

2628 10 fetch_load 4 2981 18 Loader::fetch_load 0 1 1312 401
////////////////////////////////////////////////////////////////////
//     Function: Loader::fetch_load
//       Access: Published
//  Description: Returns the Node associated with the indicated id
//               number (returned by a previous call to request_load),
//               or NULL if the request has not yet completed.
////////////////////////////////////////////////////////////////////
59
PointerTo< PandaNode > Loader::fetch_load(unsigned int id);

2629 8 get_name 4 2984 24 LoaderFileType::get_name 0 1 1320 0
70
virtual basic_string< char > LoaderFileType::get_name(void) const = 0;

2630 13 get_extension 4 2984 29 LoaderFileType::get_extension 0 1 1321 0
75
virtual basic_string< char > LoaderFileType::get_extension(void) const = 0;

2631 25 get_additional_extensions 4 2984 41 LoaderFileType::get_additional_extensions 0 1 1322 416
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_additional_extensions
//       Access: Published, Virtual
//  Description: Returns a space-separated list of extension, in
//               addition to the one returned by get_extension(), that
//               are recognized by this loader.
////////////////////////////////////////////////////////////////////
83
virtual basic_string< char > LoaderFileType::get_additional_extensions(void) const;

2632 19 supports_compressed 4 2984 35 LoaderFileType::supports_compressed 0 1 1323 389
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_compressed
//       Access: Published, Virtual
//  Description: Returns true if this file type can transparently load
//               compressed files (with a .pz extension), false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
virtual bool LoaderFileType::supports_compressed(void) const;

2633 14 get_class_type 4 2984 30 LoaderFileType::get_class_type 0 1 1324 0
55
static TypeHandle LoaderFileType::get_class_type(void);

2634 23 ~LoaderFileTypeRegistry 4 2986 47 LoaderFileTypeRegistry::~LoaderFileTypeRegistry 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
LoaderFileTypeRegistry::~LoaderFileTypeRegistry(void);

2635 13 get_num_types 4 2986 37 LoaderFileTypeRegistry::get_num_types 0 1 1325 282
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
54
int LoaderFileTypeRegistry::get_num_types(void) const;

2636 8 get_type 4 2986 32 LoaderFileTypeRegistry::get_type 0 1 1326 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
62
LoaderFileType *LoaderFileTypeRegistry::get_type(int n) const;

2637 23 get_type_from_extension 4 2986 47 LoaderFileTypeRegistry::get_type_from_extension 0 1 1327 430
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Determines the type of the file based on the indicated
//               extension (without a leading dot).  Returns NULL if
//               the extension matches no known file types.
////////////////////////////////////////////////////////////////////
103
LoaderFileType *LoaderFileTypeRegistry::get_type_from_extension(basic_string< char > const &extension);

2638 5 write 4 2986 29 LoaderFileTypeRegistry::write 0 2 1328 1329 329
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
79
void LoaderFileTypeRegistry::write(ostream &out, int indent_level = (0)) const;

2639 14 get_global_ptr 4 2986 38 LoaderFileTypeRegistry::get_global_ptr 0 1 1330 325
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global LoaderFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
76
static LoaderFileTypeRegistry *LoaderFileTypeRegistry::get_global_ptr(void);

2640 18 MaterialCollection 4 2987 38 MaterialCollection::MaterialCollection 0 2 1331 1332 467
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
MaterialCollection::MaterialCollection(void);

2641 10 operator = 4 2987 30 MaterialCollection::operator = 0 1 1333 243
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
void MaterialCollection::operator =(MaterialCollection const &copy);

2642 19 ~MaterialCollection 4 2987 39 MaterialCollection::~MaterialCollection 0 0 911
// Filename: materialCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline MaterialCollection::~MaterialCollection(void);

2643 12 add_material 4 2987 32 MaterialCollection::add_material 0 1 1334 270
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_material
//       Access: Published
//  Description: Adds a new Material to the collection.
////////////////////////////////////////////////////////////////////
63
void MaterialCollection::add_material(Material *node_material);

2644 15 remove_material 4 2987 35 MaterialCollection::remove_material 0 1 1335 410
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_material
//       Access: Published
//  Description: Removes the indicated Material from the collection.
//               Returns true if the material was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
66
bool MaterialCollection::remove_material(Material *node_material);

2645 18 add_materials_from 4 2987 38 MaterialCollection::add_materials_from 0 1 1336 488
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_materials_from
//       Access: Published
//  Description: Adds all the Materials indicated in the other
//               collection to this material.  The other materials are simply
//               appended to the end of the materials in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
77
void MaterialCollection::add_materials_from(MaterialCollection const &other);

2646 21 remove_materials_from 4 2987 41 MaterialCollection::remove_materials_from 0 1 1337 339
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_materials_from
//       Access: Published
//  Description: Removes from this collection all of the Materials
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
80
void MaterialCollection::remove_materials_from(MaterialCollection const &other);

2647 26 remove_duplicate_materials 4 2987 46 MaterialCollection::remove_duplicate_materials 0 1 1338 477
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_duplicate_materials
//       Access: Published
//  Description: Removes any duplicate entries of the same Materials
//               on this collection.  If a Material appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void MaterialCollection::remove_duplicate_materials(void);

2648 12 has_material 4 2987 32 MaterialCollection::has_material 0 1 1339 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::has_material
//       Access: Published
//  Description: Returns true if the indicated Material appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool MaterialCollection::has_material(Material *material) const;

2649 5 clear 4 2987 25 MaterialCollection::clear 0 1 1340 267
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::clear
//       Access: Published
//  Description: Removes all Materials from the collection.
////////////////////////////////////////////////////////////////////
37
void MaterialCollection::clear(void);

2650 13 find_material 4 2987 33 MaterialCollection::find_material 0 1 1341 376
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::find_material
//       Access: Published
//  Description: Returns the material in the collection with the
//               indicated name, if any, or NULL if no material has
//               that name.
////////////////////////////////////////////////////////////////////
84
Material *MaterialCollection::find_material(basic_string< char > const &name) const;

2651 17 get_num_materials 4 2987 37 MaterialCollection::get_num_materials 0 1 1342 287
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_num_materials
//       Access: Published
//  Description: Returns the number of Materials in the collection.
////////////////////////////////////////////////////////////////////
54
int MaterialCollection::get_num_materials(void) const;

2652 12 get_material 4 2987 32 MaterialCollection::get_material 0 1 1343 275
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_material
//       Access: Published
//  Description: Returns the nth Material in the collection.
////////////////////////////////////////////////////////////////////
60
Material *MaterialCollection::get_material(int index) const;

2653 11 operator [] 4 2987 31 MaterialCollection::operator [] 0 1 1344 395
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator []
//       Access: Published
//  Description: Returns the nth Material in the collection.  This is
//               the same as get_material(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
59
Material *MaterialCollection::operator [](int index) const;

2654 6 output 4 2987 26 MaterialCollection::output 0 1 1345 336
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void MaterialCollection::output(ostream &out) const;

2655 5 write 4 2987 25 MaterialCollection::write 0 2 1346 1347 340
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
75
void MaterialCollection::write(ostream &out, int indent_level = (0)) const;

2656 9 ModelNode 4 2988 20 ModelNode::ModelNode 0 1 1348 1119
// Filename: modelNode.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
62
inline ModelNode::ModelNode(basic_string< char > const &name);

2657 22 set_preserve_transform 4 2988 33 ModelNode::set_preserve_transform 0 1 1349 1113
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_transform
//       Access: Public
//  Description: Sets the preserve_transform flag.  This restricts the
//               ability of a flatten operation to affect the
//               transform stored on this node.  If the flag is:
//
//               PT_none - the transform may be adjusted at will.
//
//               PT_local - the local (and net) transform should not
//               be changed in any way.  If necessary, an extra
//               transform will be left on the node above to guarantee
//               this.  This is the strongest restriction.
//
//               PT_net - preserve the net transform from the
//               root, but it's acceptable to modify the local
//               transform stored on this particular node if
//               necessary, so long as the net transform is not
//               changed.  This eliminates the need to drop an extra
//               transform on the node above.
////////////////////////////////////////////////////////////////////
95
inline void ModelNode::set_preserve_transform(ModelNode::PreserveTransform preserve_transform);

2658 22 get_preserve_transform 4 2988 33 ModelNode::get_preserve_transform 0 1 1350 337
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_transform
//       Access: Public
//  Description: Returns the current setting of the preserve_transform
//               flag.  See set_preserve_transform().
////////////////////////////////////////////////////////////////////
82
inline ModelNode::PreserveTransform ModelNode::get_preserve_transform(void) const;

2659 23 set_preserve_attributes 4 2988 34 ModelNode::set_preserve_attributes 0 1 1351 591
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_attributes
//       Access: Public
//  Description: Sets the preserve_attributes flag.  This restricts the
//               ability of a flatten operation to affect the
//               render attributes stored on this node.
//
//               The value should be the union of bits from
//               SceneGraphReducer::AttribTypes that represent the
//               attributes that should *not* be changed.
////////////////////////////////////////////////////////////////////
64
inline void ModelNode::set_preserve_attributes(int attrib_mask);

2660 23 get_preserve_attributes 4 2988 34 ModelNode::get_preserve_attributes 0 1 1352 340
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_attributes
//       Access: Public
//  Description: Returns the current setting of the preserve_attributes
//               flag.  See set_preserve_attributes().
////////////////////////////////////////////////////////////////////
58
inline int ModelNode::get_preserve_attributes(void) const;

2661 14 get_class_type 4 2988 25 ModelNode::get_class_type 0 1 1353 0
50
static TypeHandle ModelNode::get_class_type(void);

2662 10 ~ModelNode 4 2988 21 ModelNode::~ModelNode 0 0 0
28
ModelNode::~ModelNode(void);

2663 9 has_model 4 2990 20 ModelPool::has_model 0 1 1354 979
// Filename: modelPool.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::has_model
//       Access: Public, Static
//  Description: Returns true if the model has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
78
static inline bool ModelPool::has_model(basic_string< char > const &filename);

2664 12 verify_model 4 2990 23 ModelPool::verify_model 0 1 1355 593
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::verify_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_model() with the same model name will
//               return a valid Node pointer.
////////////////////////////////////////////////////////////////////
81
static inline bool ModelPool::verify_model(basic_string< char > const &filename);

2665 10 load_model 4 2990 21 ModelPool::load_model 0 1 1356 528
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead.  If the model
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
85
static inline PandaNode *ModelPool::load_model(basic_string< char > const &filename);

2666 9 add_model 4 2990 20 ModelPool::add_model 0 1 1357 427
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will always replace any
//               previously-loaded model in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
96
static inline void ModelPool::add_model(basic_string< char > const &filename, PandaNode *model);

2667 13 release_model 4 2990 24 ModelPool::release_model 0 1 1358 543
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
////////////////////////////////////////////////////////////////////
82
static inline void ModelPool::release_model(basic_string< char > const &filename);

2668 18 release_all_models 4 2990 29 ModelPool::release_all_models 0 1 1359 324
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_all_models
//       Access: Public, Static
//  Description: Releases all models in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
55
static inline void ModelPool::release_all_models(void);

2669 15 garbage_collect 4 2990 26 ModelPool::garbage_collect 0 1 1360 469
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those models in the pool that have a
//               reference count of exactly 1; i.e. only those
//               models that are not being used outside of the pool.
//               Returns the number of models released.
////////////////////////////////////////////////////////////////////
51
static inline int ModelPool::garbage_collect(void);

2670 13 list_contents 4 2990 24 ModelPool::list_contents 0 1 1361 314
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
58
static inline void ModelPool::list_contents(ostream &out);

2671 5 write 4 2990 16 ModelPool::write 0 1 1362 348
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::write
//       Access: Published, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//               Helps with debugging.
////////////////////////////////////////////////////////////////////
43
static void ModelPool::write(ostream &out);

2672 10 ~ModelPool 4 2990 21 ModelPool::~ModelPool 0 0 0
28
ModelPool::~ModelPool(void);

2673 9 ModelRoot 4 2991 20 ModelRoot::ModelRoot 0 1 1363 1116
// Filename: modelRoot.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline ModelRoot::ModelRoot(basic_string< char > const &name);

2674 14 get_class_type 4 2991 25 ModelRoot::get_class_type 0 1 1364 0
50
static TypeHandle ModelRoot::get_class_type(void);

2675 10 ~ModelRoot 4 2991 21 ModelRoot::~ModelRoot 0 0 0
28
ModelRoot::~ModelRoot(void);

2676 18 NodePathCollection 4 2992 38 NodePathCollection::NodePathCollection 0 2 1365 1366 467
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
NodePathCollection::NodePathCollection(void);

2677 10 operator = 4 2992 30 NodePathCollection::operator = 0 1 1367 243
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
void NodePathCollection::operator =(NodePathCollection const &copy);

2678 19 ~NodePathCollection 4 2992 39 NodePathCollection::~NodePathCollection 0 0 911
// Filename: nodePathCollection.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline NodePathCollection::~NodePathCollection(void);

2679 8 add_path 4 2992 28 NodePathCollection::add_path 0 1 1368 266
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_path
//       Access: Published
//  Description: Adds a new NodePath to the collection.
////////////////////////////////////////////////////////////////////
61
void NodePathCollection::add_path(NodePath const &node_path);

2680 11 remove_path 4 2992 31 NodePathCollection::remove_path 0 1 1369 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_path
//       Access: Published
//  Description: Removes the indicated NodePath from the collection.
//               Returns true if the path was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
64
bool NodePathCollection::remove_path(NodePath const &node_path);

2681 14 add_paths_from 4 2992 34 NodePathCollection::add_paths_from 0 1 1370 472
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_paths_from
//       Access: Published
//  Description: Adds all the NodePaths indicated in the other
//               collection to this path.  The other paths are simply
//               appended to the end of the paths in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
73
void NodePathCollection::add_paths_from(NodePathCollection const &other);

2682 17 remove_paths_from 4 2992 37 NodePathCollection::remove_paths_from 0 1 1371 335
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_paths_from
//       Access: Published
//  Description: Removes from this collection all of the NodePaths
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
76
void NodePathCollection::remove_paths_from(NodePathCollection const &other);

2683 22 remove_duplicate_paths 4 2992 42 NodePathCollection::remove_duplicate_paths 0 1 1372 473
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_duplicate_paths
//       Access: Published
//  Description: Removes any duplicate entries of the same NodePaths
//               on this collection.  If a NodePath appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
54
void NodePathCollection::remove_duplicate_paths(void);

2684 8 has_path 4 2992 28 NodePathCollection::has_path 0 1 1373 328
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::has_path
//       Access: Published
//  Description: Returns true if the indicated NodePath appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
62
bool NodePathCollection::has_path(NodePath const &path) const;

2685 5 clear 4 2992 25 NodePathCollection::clear 0 1 1374 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::clear
//       Access: Published
//  Description: Removes all NodePaths from the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::clear(void);

2686 8 is_empty 4 2992 28 NodePathCollection::is_empty 0 1 1375 319
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no NodePaths in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool NodePathCollection::is_empty(void) const;

2687 13 get_num_paths 4 2992 33 NodePathCollection::get_num_paths 0 1 1376 283
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_num_paths
//       Access: Published
//  Description: Returns the number of NodePaths in the collection.
////////////////////////////////////////////////////////////////////
50
int NodePathCollection::get_num_paths(void) const;

2688 8 get_path 4 2992 28 NodePathCollection::get_path 0 1 1377 271
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_path
//       Access: Published
//  Description: Returns the nth NodePath in the collection.
////////////////////////////////////////////////////////////////////
55
NodePath NodePathCollection::get_path(int index) const;

2689 11 operator [] 4 2992 31 NodePathCollection::operator [] 0 1 1378 391
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator []
//       Access: Published
//  Description: Returns the nth NodePath in the collection.  This is
//               the same as get_path(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
58
NodePath NodePathCollection::operator [](int index) const;

2690 2 ls 4 2992 22 NodePathCollection::ls 0 3 1379 1380 1381 728
// Handy operations on many NodePaths at once.

// Handy operations on many NodePaths at once.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////
47
inline void NodePathCollection::ls(void) const;

2691 16 find_all_matches 4 2992 36 NodePathCollection::find_all_matches 0 1 1382 447
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with any NodePath in this collection and can be
//               extended by path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
96
NodePathCollection NodePathCollection::find_all_matches(basic_string< char > const &path) const;

2692 11 reparent_to 4 2992 31 NodePathCollection::reparent_to 0 1 1383 316
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node.
////////////////////////////////////////////////////////////////////
60
void NodePathCollection::reparent_to(NodePath const &other);

2693 15 wrt_reparent_to 4 2992 35 NodePathCollection::wrt_reparent_to 0 1 1384 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::wrt_reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node, adjusting each transform so as not to
//               move in world coordinates.
////////////////////////////////////////////////////////////////////
64
void NodePathCollection::wrt_reparent_to(NodePath const &other);

2694 4 show 4 2992 24 NodePathCollection::show 0 1 1385 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Shows all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::show(void);

2695 4 hide 4 2992 24 NodePathCollection::hide 0 1 1386 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Hides all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::hide(void);

2696 5 stash 4 2992 25 NodePathCollection::stash 0 1 1387 265
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::stash
//       Access: Published
//  Description: Stashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::stash(void);

2697 7 unstash 4 2992 27 NodePathCollection::unstash 0 1 1388 269
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::unstash
//       Access: Published
//  Description: Unstashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
39
void NodePathCollection::unstash(void);

2698 6 detach 4 2992 26 NodePathCollection::detach 0 1 1389 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::detach
//       Access: Published
//  Description: Detaches all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
38
void NodePathCollection::detach(void);

2699 16 get_collide_mask 4 2992 36 NodePathCollection::get_collide_mask 0 1 1390 610
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
77
BitMask< unsigned int, 32 > NodePathCollection::get_collide_mask(void) const;

2700 16 set_collide_mask 4 2992 36 NodePathCollection::set_collide_mask 0 3 1391 1392 1393 694
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
174
void NodePathCollection::set_collide_mask(BitMask< unsigned int, 32 > new_mask, BitMask< unsigned int, 32 > bits_to_change = ((all_on())), TypeHandle node_type = ((none())));

2701 9 set_color 4 2992 29 NodePathCollection::set_color 0 5 1394 1395 1396 1397 1398 536
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////
97
void NodePathCollection::set_color(float r, float g, float b, float a = (1), int priority = (0));

2702 6 output 4 2992 26 NodePathCollection::output 0 1 1399 336
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void NodePathCollection::output(ostream &out) const;

2703 5 write 4 2992 25 NodePathCollection::write 0 2 1400 1401 340
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
75
void NodePathCollection::write(ostream &out, int indent_level = (0)) const;

2704 14 PosLerpFunctor 4 2993 30 PosLerpFunctor::PosLerpFunctor 0 4 1402 1403 1404 1405 0
74
PosLerpFunctor::PosLerpFunctor(NodePath np, LPoint3f start, LPoint3f end);

2705 14 get_class_type 4 2993 30 PosLerpFunctor::get_class_type 0 1 1406 27
// now for typehandle stuff
55
static TypeHandle PosLerpFunctor::get_class_type(void);

2706 14 HprLerpFunctor 4 2995 30 HprLerpFunctor::HprLerpFunctor 0 4 1407 1408 1409 1410 0
78
HprLerpFunctor::HprLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end);

2707 13 take_shortest 4 2995 29 HprLerpFunctor::take_shortest 0 1 1411 0
41
void HprLerpFunctor::take_shortest(void);

2708 12 take_longest 4 2995 28 HprLerpFunctor::take_longest 0 1 1412 0
40
void HprLerpFunctor::take_longest(void);

2709 14 get_class_type 4 2995 30 HprLerpFunctor::get_class_type 0 1 1413 27
// now for typehandle stuff
55
static TypeHandle HprLerpFunctor::get_class_type(void);

2710 16 ScaleLerpFunctor 4 2997 34 ScaleLerpFunctor::ScaleLerpFunctor 0 4 1414 1415 1416 1417 0
82
ScaleLerpFunctor::ScaleLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end);

2711 14 get_class_type 4 2997 32 ScaleLerpFunctor::get_class_type 0 1 1418 27
// now for typehandle stuff
57
static TypeHandle ScaleLerpFunctor::get_class_type(void);

2712 16 ColorLerpFunctor 4 2998 34 ColorLerpFunctor::ColorLerpFunctor 0 4 1419 1420 1421 1422 0
82
ColorLerpFunctor::ColorLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end);

2713 14 get_class_type 4 2998 32 ColorLerpFunctor::get_class_type 0 1 1423 27
// now for typehandle stuff
57
static TypeHandle ColorLerpFunctor::get_class_type(void);

2714 17 PosHprLerpFunctor 4 3000 36 PosHprLerpFunctor::PosHprLerpFunctor 0 4 1424 1425 1426 1427 0
118
PosHprLerpFunctor::PosHprLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend);

2715 13 take_shortest 4 3000 32 PosHprLerpFunctor::take_shortest 0 1 1428 0
44
void PosHprLerpFunctor::take_shortest(void);

2716 12 take_longest 4 3000 31 PosHprLerpFunctor::take_longest 0 1 1429 0
43
void PosHprLerpFunctor::take_longest(void);

2717 14 get_class_type 4 3000 33 PosHprLerpFunctor::get_class_type 0 1 1430 27
// now for typehandle stuff
58
static TypeHandle PosHprLerpFunctor::get_class_type(void);

2718 19 HprScaleLerpFunctor 4 3002 40 HprScaleLerpFunctor::HprScaleLerpFunctor 0 4 1431 1432 1433 1434 0
126
HprScaleLerpFunctor::HprScaleLerpFunctor(NodePath np, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send);

2719 13 take_shortest 4 3002 34 HprScaleLerpFunctor::take_shortest 0 1 1435 0
46
void HprScaleLerpFunctor::take_shortest(void);

2720 12 take_longest 4 3002 33 HprScaleLerpFunctor::take_longest 0 1 1436 0
45
void HprScaleLerpFunctor::take_longest(void);

2721 14 get_class_type 4 3002 35 HprScaleLerpFunctor::get_class_type 0 1 1437 27
// now for typehandle stuff
60
static TypeHandle HprScaleLerpFunctor::get_class_type(void);

2722 22 PosHprScaleLerpFunctor 4 3003 46 PosHprScaleLerpFunctor::PosHprScaleLerpFunctor 0 4 1438 1439 1440 1441 0
164
PosHprScaleLerpFunctor::PosHprScaleLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send);

2723 13 take_shortest 4 3003 37 PosHprScaleLerpFunctor::take_shortest 0 1 1442 0
49
void PosHprScaleLerpFunctor::take_shortest(void);

2724 12 take_longest 4 3003 36 PosHprScaleLerpFunctor::take_longest 0 1 1443 0
48
void PosHprScaleLerpFunctor::take_longest(void);

2725 14 get_class_type 4 3003 38 PosHprScaleLerpFunctor::get_class_type 0 1 1444 27
// now for typehandle stuff
63
static TypeHandle PosHprScaleLerpFunctor::get_class_type(void);

2726 21 ColorScaleLerpFunctor 4 3004 44 ColorScaleLerpFunctor::ColorScaleLerpFunctor 0 4 1445 1446 1447 1448 0
92
ColorScaleLerpFunctor::ColorScaleLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end);

2727 14 get_class_type 4 3004 37 ColorScaleLerpFunctor::get_class_type 0 1 1449 27
// now for typehandle stuff
62
static TypeHandle ColorScaleLerpFunctor::get_class_type(void);

2728 10 PointLight 4 3005 22 PointLight::PointLight 0 1 1450 598
////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PointLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
57
PointLight::PointLight(basic_string< char > const &name);

2729 18 get_specular_color 4 3005 30 PointLight::get_specular_color 0 1 1451 308
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f const &PointLight::get_specular_color(void) const;

2730 18 set_specular_color 4 3005 30 PointLight::set_specular_color 0 1 1452 305
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
68
inline void PointLight::set_specular_color(LVecBase4f const &color);

2731 15 get_attenuation 4 3005 27 PointLight::get_attenuation 0 1 1453 451
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
65
inline LVecBase3f const &PointLight::get_attenuation(void) const;

2732 15 set_attenuation 4 3005 27 PointLight::set_attenuation 0 1 1454 448
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
71
inline void PointLight::set_attenuation(LVecBase3f const &attenuation);

2733 9 get_point 4 3005 21 PointLight::get_point 0 1 1455 380
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
////////////////////////////////////////////////////////////////////
57
inline LPoint3f const &PointLight::get_point(void) const;

2734 9 set_point 4 3005 21 PointLight::set_point 0 1 1456 272
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
57
inline void PointLight::set_point(LPoint3f const &point);

2735 14 get_class_type 4 3005 26 PointLight::get_class_type 0 1 1457 0
51
static TypeHandle PointLight::get_class_type(void);

2736 11 ~PointLight 4 3005 23 PointLight::~PointLight 0 0 0
30
PointLight::~PointLight(void);

2737 13 PolylightNode 4 3006 28 PolylightNode::PolylightNode 0 1 1458 303
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::Constructor
//       Access: Published
//  Description: Use PolylightNode() to construct a new
//               PolylightNode object.
////////////////////////////////////////////////////////////////////
63
PolylightNode::PolylightNode(basic_string< char > const &name);

2738 6 enable 4 3006 21 PolylightNode::enable 0 1 1459 238
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::enable
//       Access: Published
//  Description: Enable this light
////////////////////////////////////////////////////////////////////
40
inline void PolylightNode::enable(void);

2739 7 disable 4 3006 22 PolylightNode::disable 0 1 1460 240
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::disable
//       Access: Published
//  Description: Disable this light
////////////////////////////////////////////////////////////////////
41
inline void PolylightNode::disable(void);

2740 7 set_pos 4 3006 22 PolylightNode::set_pos 0 2 1461 1462 496
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////
56
inline void PolylightNode::set_pos(LVecBase3f position);

2741 7 get_pos 4 3006 22 PolylightNode::get_pos 0 1 1463 252
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_pos
//       Access: Published
//  Description: Returns position as a LPoint3f
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f PolylightNode::get_pos(void) const;

2742 9 set_color 4 3006 24 PolylightNode::set_color 0 2 1464 1465 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 3 floats between 0 and 1
////////////////////////////////////////////////////////////////////
55
inline void PolylightNode::set_color(LVecBase4f color);

2743 9 get_color 4 3006 24 PolylightNode::get_color 0 1 1466 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color
//       Access: Published
//  Description: Returns the light's color as Colorf
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f PolylightNode::get_color(void) const;

2744 20 get_color_scenegraph 4 3006 35 PolylightNode::get_color_scenegraph 0 1 1467 443
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color_scenegraph
//       Access: Published
//  Description: This differs from get_color in that when applying
//               the light color we need to make sure that a color
//               flattening external to the PolylightNode is not 
//               ignored.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f PolylightNode::get_color_scenegraph(void) const;

2745 10 set_radius 4 3006 25 PolylightNode::set_radius 0 1 1468 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_radius
//       Access: Published
//  Description: Set radius of the spherical light volume
////////////////////////////////////////////////////////////////////
47
inline void PolylightNode::set_radius(float r);

2746 10 get_radius 4 3006 25 PolylightNode::get_radius 0 1 1469 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_radius
//       Access: Published
//  Description: Get radius of the spherical light volume
////////////////////////////////////////////////////////////////////
51
inline float PolylightNode::get_radius(void) const;

2747 15 set_attenuation 4 3006 30 PolylightNode::set_attenuation 0 1 1470 267
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_attenuation
//       Access: Published
//  Description: Set ALINEAR or AQUADRATIC attenuation
////////////////////////////////////////////////////////////////////
81
inline bool PolylightNode::set_attenuation(PolylightNode::Attenuation_Type type);

2748 15 get_attenuation 4 3006 30 PolylightNode::get_attenuation 0 1 1471 274
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_attenuation
//       Access: Published
//  Description: Get "linear" or "quadratic" attenuation type
////////////////////////////////////////////////////////////////////
82
inline PolylightNode::Attenuation_Type PolylightNode::get_attenuation(void) const;

2749 6 set_a0 4 3006 21 PolylightNode::set_a0 0 1 1472 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a0
//       Access: Published
//  Description: Set the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a0(float a0);

2750 6 set_a1 4 3006 21 PolylightNode::set_a1 0 1 1473 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a1
//       Access: Published
//  Description: Set the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a1(float a1);

2751 6 set_a2 4 3006 21 PolylightNode::set_a2 0 1 1474 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a2
//       Access: Published
//  Description: Set the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a2(float a2);

2752 6 get_a0 4 3006 21 PolylightNode::get_a0 0 1 1475 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a0
//       Access: Published
//  Description: Get the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a0(void) const;

2753 6 get_a1 4 3006 21 PolylightNode::get_a1 0 1 1476 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a1
//       Access: Published
//  Description: Get the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a1(void) const;

2754 6 get_a2 4 3006 21 PolylightNode::get_a2 0 1 1477 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a2
//       Access: Published
//  Description: Get the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a2(void) const;

2755 10 flicker_on 4 3006 25 PolylightNode::flicker_on 0 1 1478 332
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_on
//       Access: Published
//  Description: Set flickering to true so at every loop this light's
//               color is varied based on flicker_type
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::flicker_on(void);

2756 11 flicker_off 4 3006 26 PolylightNode::flicker_off 0 1 1479 245
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_off
//       Access: Published
//  Description: Turn flickering off
////////////////////////////////////////////////////////////////////
45
inline void PolylightNode::flicker_off(void);

2757 13 is_flickering 4 3006 28 PolylightNode::is_flickering 0 1 1480 261
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_flickering
//       Access: Published
//  Description: Check is this light is flickering
////////////////////////////////////////////////////////////////////
53
inline bool PolylightNode::is_flickering(void) const;

2758 16 set_flicker_type 4 3006 31 PolylightNode::set_flicker_type 0 1 1481 446
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_flicker_type
//       Access: Published
//  Description: Flicker type can be FRANDOM or FSIN
//               At a later point there might be a FCUSTOM
//               Custom flicker will be a set of fix points recorded
//               by animating the light's intensity
////////////////////////////////////////////////////////////////////
78
inline bool PolylightNode::set_flicker_type(PolylightNode::Flicker_Type type);

2759 16 get_flicker_type 4 3006 31 PolylightNode::get_flicker_type 0 1 1482 254
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_flicker_type
//       Access: Published
//  Description: Returns FRANDOM or FSIN
////////////////////////////////////////////////////////////////////
79
inline PolylightNode::Flicker_Type PolylightNode::get_flicker_type(void) const;

2760 10 set_offset 4 3006 25 PolylightNode::set_offset 0 1 1483 387
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_offset
//       Access: Published
//  Description: Set the offset value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is added to the variation
////////////////////////////////////////////////////////////////////
52
inline void PolylightNode::set_offset(float offset);

2761 10 get_offset 4 3006 25 PolylightNode::get_offset 0 1 1484 304
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_offset
//       Access: Published
//  Description: Get the offset value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
51
inline float PolylightNode::get_offset(void) const;

2762 9 set_scale 4 3006 24 PolylightNode::set_scale 0 1 1485 392
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_scale
//       Access: Published
//  Description: Set the scale value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is multiplied with the variation
////////////////////////////////////////////////////////////////////
50
inline void PolylightNode::set_scale(float scale);

2763 9 get_scale 4 3006 24 PolylightNode::get_scale 0 1 1486 302
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_scale
//       Access: Published
//  Description: Get the scale value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
50
inline float PolylightNode::get_scale(void) const;

2764 13 set_step_size 4 3006 28 PolylightNode::set_step_size 0 1 1487 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_step_size
//       Access: Published
//  Description: Set the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
53
inline void PolylightNode::set_step_size(float step);

2765 13 get_step_size 4 3006 28 PolylightNode::get_step_size 0 1 1488 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_step_size
//       Access: Published
//  Description: Get the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
54
inline float PolylightNode::get_step_size(void) const;

2766 8 set_freq 4 3006 23 PolylightNode::set_freq 0 1 1489 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_freq
//       Access: Published
//  Description: Set frequency of sin flicker
////////////////////////////////////////////////////////////////////
45
inline void PolylightNode::set_freq(float f);

2767 8 get_freq 4 3006 23 PolylightNode::get_freq 0 1 1490 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_freq
//       Access: Published
//  Description: Get frequency of sin flicker
////////////////////////////////////////////////////////////////////
49
inline float PolylightNode::get_freq(void) const;

2768 11 operator == 4 3006 26 PolylightNode::operator == 0 1 1491 1036
// Comparison methods

// Filename: PolylightNodeEffect.I
// Created by:  sshodhan (02Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator ==
//       Access: Published
//  Description: Returns true if the two lights are equivalent
//               that is, all their properties are same
////////////////////////////////////////////////////////////////////
73
inline bool PolylightNode::operator ==(PolylightNode const &other) const;

2769 11 operator != 4 3006 26 PolylightNode::operator != 0 1 1492 299
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator !=
//       Access: Published
//  Description: Returns true if the two lights are not equivalent.
////////////////////////////////////////////////////////////////////
73
inline bool PolylightNode::operator !=(PolylightNode const &other) const;

2770 10 operator < 4 3006 25 PolylightNode::operator < 0 1 1493 541
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator <
//       Access: Published
//  Description: Returns true if this PolylightNode sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent PolylightNodes is consistent but undefined,
//               and is useful only for storing PolylightNodes in a sorted
//               container like an STL set.
////////////////////////////////////////////////////////////////////
72
inline bool PolylightNode::operator <(PolylightNode const &other) const;

2771 10 compare_to 4 3006 25 PolylightNode::compare_to 0 1 1494 832
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this PolylightNode
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two PolylightNodes are considered equivalent if they
//               consist of exactly the same properties
//               Otherwise, they are different; different
//               PolylightNodes will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the PolylightNodes in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
64
int PolylightNode::compare_to(PolylightNode const &other) const;

2772 10 is_enabled 4 3006 25 PolylightNode::is_enabled 0 1 1495 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_enabled
//       Access: Published
//  Description: Is this light is enabled/disabled?
////////////////////////////////////////////////////////////////////
50
inline bool PolylightNode::is_enabled(void) const;

2773 14 get_class_type 4 3006 29 PolylightNode::get_class_type 0 1 1496 0
54
static TypeHandle PolylightNode::get_class_type(void);

2774 14 ~PolylightNode 4 3006 29 PolylightNode::~PolylightNode 0 0 0
36
PolylightNode::~PolylightNode(void);

2775 4 make 4 3009 21 PolylightEffect::make 0 3 1497 1498 1499 811
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////
66
static ConstPointerTo< RenderEffect > PolylightEffect::make(void);

2776 9 add_light 4 3009 26 PolylightEffect::add_light 0 1 1500 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::add_light
//       Access: Published
//  Description: Add a PolylightNode object to this effect and return
//               a new effect
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderEffect > PolylightEffect::add_light(NodePath const &newlight) const;

2777 12 remove_light 4 3009 29 PolylightEffect::remove_light 0 1 1501 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::remove_light
//       Access: Published
//  Description: Remove a light from this effect. Return the new updated
//               effect
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderEffect > PolylightEffect::remove_light(NodePath const &newlight) const;

2778 10 set_weight 4 3009 27 PolylightEffect::set_weight 0 1 1502 517
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_weight
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderEffect > PolylightEffect::set_weight(float w) const;

2779 11 set_contrib 4 3009 28 PolylightEffect::set_contrib 0 1 1503 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_contrib
//       Access: Published
//  Description: Set Contrib Type and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
98
ConstPointerTo< RenderEffect > PolylightEffect::set_contrib(PolylightEffect::ContribType c) const;

2780 17 set_effect_center 4 3009 34 PolylightEffect::set_effect_center 0 1 1504 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_effect_center
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderEffect > PolylightEffect::set_effect_center(LPoint3f ec) const;

2781 10 get_weight 4 3009 27 PolylightEffect::get_weight 0 1 1505 247
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_weight
//       Access: Published
//  Description: Get the weight value
////////////////////////////////////////////////////////////////////
53
inline float PolylightEffect::get_weight(void) const;

2782 11 get_contrib 4 3009 28 PolylightEffect::get_contrib 0 1 1506 257
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_contrib
//       Access: Published
//  Description: Returns CT_all or CT_proximal
////////////////////////////////////////////////////////////////////
77
inline PolylightEffect::ContribType PolylightEffect::get_contrib(void) const;

2783 17 get_effect_center 4 3009 34 PolylightEffect::get_effect_center 0 1 1507 272
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_effect_center
//       Access: Published
//  Description: Return the value of the _effect_center
////////////////////////////////////////////////////////////////////
63
inline LPoint3f PolylightEffect::get_effect_center(void) const;

2784 9 has_light 4 3009 26 PolylightEffect::has_light 0 1 1508 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               PolylightEffect, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool PolylightEffect::has_light(NodePath const &light) const;

2785 14 get_class_type 4 3009 31 PolylightEffect::get_class_type 0 1 1509 0
56
static TypeHandle PolylightEffect::get_class_type(void);

2786 16 ~PolylightEffect 4 3009 33 PolylightEffect::~PolylightEffect 0 0 0
40
PolylightEffect::~PolylightEffect(void);

2787 10 PortalNode 4 3011 22 PortalNode::PortalNode 0 3 1510 1511 1512 1041
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Default constructor, just an empty node, no geo
//               This is used to read portal from model. You can also
//               use this from python to create an empty portal. Then
//               you can set the vertices yourself, with addVertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
57
PortalNode::PortalNode(basic_string< char > const &name);

2788 15 set_portal_mask 4 3011 27 PortalNode::set_portal_mask 0 1 1513 1001
// Filename: portalNode.I
// Created by:  masad (13May04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               PortalMask values to the same thing.
////////////////////////////////////////////////////////////////////
74
inline void PortalNode::set_portal_mask(BitMask< unsigned int, 32 > mask);

2789 20 set_from_portal_mask 4 3011 32 PortalNode::set_from_portal_mask 0 1 1514 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_from_portal_mask
//       Access: Published
//  Description: Sets the "from" PortalMask.  In order for a
//               portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
79
inline void PortalNode::set_from_portal_mask(BitMask< unsigned int, 32 > mask);

2790 20 set_into_portal_mask 4 3011 32 PortalNode::set_into_portal_mask 0 1 1515 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_into_portal_mask
//       Access: Published
//  Description: Sets the "into" PortalMask.  In order for a
//               portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
79
inline void PortalNode::set_into_portal_mask(BitMask< unsigned int, 32 > mask);

2791 20 get_from_portal_mask 4 3011 32 PortalNode::get_from_portal_mask 0 1 1516 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_from_portal_mask
//       Access: Published
//  Description: Returns the current "from" PortalMask.  In order for
//               a portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PortalNode::get_from_portal_mask(void) const;

2792 20 get_into_portal_mask 4 3011 32 PortalNode::get_into_portal_mask 0 1 1517 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_into_portal_mask
//       Access: Published
//  Description: Returns the current "into" PortalMask.  In order for
//               a portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PortalNode::get_into_portal_mask(void) const;

2793 15 set_portal_geom 4 3011 27 PortalNode::set_portal_geom 0 1 1518 847
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_geom
//       Access: Published
//  Description: Sets the state of the "portal geom" flag for this
//               PortalNode.  Normally, this is false; when this is
//               set true, the PortalSolids in this node will test
//               for portals with actual renderable geometry, in
//               addition to whatever PortalSolids may be indicated
//               by the from_portal_mask.
//
//               Setting this to true causes this to test *all*
//               GeomNodes for portals.  It is an all-or-none
//               thing; there is no way to portal with only some
//               GeomNodes, as GeomNodes have no into_portal_mask.
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_portal_geom(bool flag);

2794 15 get_portal_geom 4 3011 27 PortalNode::get_portal_geom 0 1 1519 317
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_portal_geom
//       Access: Published
//  Description: Returns the current state of the portal_geom flag.
//               See set_portal_geom().
////////////////////////////////////////////////////////////////////
52
inline bool PortalNode::get_portal_geom(void) const;

2795 14 clear_vertices 4 3011 26 PortalNode::clear_vertices 0 1 1520 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::clear_vertices
//       Access: Published
//  Description: Resets the vertices of the portal to the empty list.
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::clear_vertices(void);

2796 10 add_vertex 4 3011 22 PortalNode::add_vertex 0 1 1521 395
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the portal polygon.  The
//               vertices should be defined in a counterclockwise
//               orientation when viewing through the portal.
////////////////////////////////////////////////////////////////////
59
inline void PortalNode::add_vertex(LPoint3f const &vertex);

2797 16 get_num_vertices 4 3011 28 PortalNode::get_num_vertices 0 1 1522 281
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the portal polygon.
////////////////////////////////////////////////////////////////////
52
inline int PortalNode::get_num_vertices(void) const;

2798 10 get_vertex 4 3011 22 PortalNode::get_vertex 0 1 1523 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the portal polygon.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &PortalNode::get_vertex(int n) const;

2799 11 set_cell_in 4 3011 23 PortalNode::set_cell_in 0 1 1524 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
58
inline void PortalNode::set_cell_in(NodePath const &cell);

2800 11 get_cell_in 4 3011 23 PortalNode::get_cell_in 0 1 1525 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
52
inline NodePath PortalNode::get_cell_in(void) const;

2801 12 set_cell_out 4 3011 24 PortalNode::set_cell_out 0 1 1526 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
59
inline void PortalNode::set_cell_out(NodePath const &cell);

2802 12 get_cell_out 4 3011 24 PortalNode::get_cell_out 0 1 1527 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
53
inline NodePath PortalNode::get_cell_out(void) const;

2803 14 set_clip_plane 4 3011 26 PortalNode::set_clip_plane 0 1 1528 313
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_clip_plane
//       Access: Published
//  Description: this is set if the portal will clip against its 
//               left and right planes
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_clip_plane(bool value);

2804 13 is_clip_plane 4 3011 25 PortalNode::is_clip_plane 0 1 1529 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_clip_plane
//       Access: Published
//  Description: Is this portal clipping against its left-right planes
////////////////////////////////////////////////////////////////////
44
inline bool PortalNode::is_clip_plane(void);

2805 11 set_visible 4 3011 23 PortalNode::set_visible 0 1 1530 265
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_visible
//       Access: Published
//  Description: this is set if the portal is facing camera
////////////////////////////////////////////////////////////////////
48
inline void PortalNode::set_visible(bool value);

2806 10 is_visible 4 3011 22 PortalNode::is_visible 0 1 1531 254
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_visible
//       Access: Published
//  Description: Is this portal facing the camera
////////////////////////////////////////////////////////////////////
41
inline bool PortalNode::is_visible(void);

2807 8 set_open 4 3011 20 PortalNode::set_open 0 1 1532 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_open
//       Access: Published
//  Description: Python sets this based on curent camera zone
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::set_open(bool value);

2808 7 is_open 4 3011 19 PortalNode::is_open 0 1 1533 263
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_open
//       Access: Published
//  Description: Is this portal open from current camera zone
////////////////////////////////////////////////////////////////////
38
inline bool PortalNode::is_open(void);

2809 14 get_class_type 4 3011 26 PortalNode::get_class_type 0 1 1534 0
51
static TypeHandle PortalNode::get_class_type(void);

2810 17 SceneGraphReducer 4 3012 36 SceneGraphReducer::SceneGraphReducer 0 1 1535 910
// Filename: sceneGraphReducer.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline SceneGraphReducer::SceneGraphReducer(void);

2811 18 ~SceneGraphReducer 4 3012 37 SceneGraphReducer::~SceneGraphReducer 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline SceneGraphReducer::~SceneGraphReducer(void);

2812 18 set_combine_radius 4 3012 37 SceneGraphReducer::set_combine_radius 0 1 1536 757
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_combine_radius
//       Access: Published
//  Description: Specifies the radius that is used in conjunction with
//               CS_within_radius to decide whether a subgraph's
//               siblings should be combined into a single node or
//               not.
//
//               If the CS_within_radius bit is included in the
//               combine_siblings_bits parameter passed to flatten,
//               than any nodes whose bounding volume is smaller than
//               the indicated radius will be combined together (as if
//               CS_other were set).
////////////////////////////////////////////////////////////////////
72
inline void SceneGraphReducer::set_combine_radius(float combine_radius);

2813 18 get_combine_radius 4 3012 37 SceneGraphReducer::get_combine_radius 0 1 1537 350
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_combine_radius
//       Access: Published
//  Description: Returns the radius that is used in conjunction with
//               CS_within_radius.  See set_combine_radius().
////////////////////////////////////////////////////////////////////
63
inline float SceneGraphReducer::get_combine_radius(void) const;

2814 13 apply_attribs 4 3012 32 SceneGraphReducer::apply_attribs 0 3 1538 1539 1540 1409
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: This flavor of apply_attribs() can be called
//               recursively from within another flatten process
//               (e.g. from PandaNode::apply_attribs_to_vertices()).
//               The parameters were presumably received from a parent
//               SceneGraphReducer object.
////////////////////////////////////////////////////////////////////
90
inline void SceneGraphReducer::apply_attribs(PandaNode *node, int attrib_types = ((~ 0)));

2815 7 flatten 4 3012 26 SceneGraphReducer::flatten 0 1 1541 940
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::flatten
//       Access: Published
//  Description: Simplifies the graph by removing unnecessary nodes
//               and nodes.
//
//               In general, a node (and its parent node) is a
//               candidate for removal if the node has no siblings and
//               the node has no special properties.
//
//               If combine_siblings_bits is nonzero, some sibling
//               nodes (according to the bits set in
//               combine_siblings_bits) may also be collapsed into a
//               single node.  This will further reduce scene graph
//               complexity, sometimes substantially, at the cost of
//               reduced spatial separation.
//
//               Returns the number of nodes removed from the graph.
////////////////////////////////////////////////////////////////////
75
int SceneGraphReducer::flatten(PandaNode *root, int combine_siblings_bits);

2816 19 collect_vertex_data 4 3012 38 SceneGraphReducer::collect_vertex_data 0 2 1542 1543 955
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
////////////////////////////////////////////////////////////////////
95
inline int SceneGraphReducer::collect_vertex_data(PandaNode *root, int collect_bits = ((~ 0)));

2817 15 make_nonindexed 4 3012 34 SceneGraphReducer::make_nonindexed 0 2 1544 1545 604
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
////////////////////////////////////////////////////////////////////
94
inline int SceneGraphReducer::make_nonindexed(PandaNode *root, int nonindexed_bits = ((~ 0)));

2818 5 unify 4 3012 24 SceneGraphReducer::unify 0 1 1546 499
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::unify
//       Access: Published
//  Description: Calls unify() on every GeomNode at this level and
//               below.  This attempts to reduce the total number of
//               individual Geoms and GeomPrimitives by combining
//               these objects wherever possible.  See
//               GeomNode::unify().
////////////////////////////////////////////////////////////////////
54
inline void SceneGraphReducer::unify(PandaNode *root);

2819 18 SelectiveChildNode 4 3017 38 SelectiveChildNode::SelectiveChildNode 0 1 1547 1146
// Filename: selectiveChildNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
80
inline SelectiveChildNode::SelectiveChildNode(basic_string< char > const &name);

2820 14 get_class_type 4 3017 34 SelectiveChildNode::get_class_type 0 1 1548 0
59
static TypeHandle SelectiveChildNode::get_class_type(void);

2821 19 ~SelectiveChildNode 4 3017 39 SelectiveChildNode::~SelectiveChildNode 0 0 0
46
SelectiveChildNode::~SelectiveChildNode(void);

2822 28 upcast_to_SelectiveChildNode 12 3018 42 SequenceNode::upcast_to_SelectiveChildNode 0 1 1553 46
upcast from SequenceNode to SelectiveChildNode
69
SelectiveChildNode *SequenceNode::upcast_to_SelectiveChildNode(void);

2823 24 downcast_to_SequenceNode 12 3017 44 SelectiveChildNode::downcast_to_SequenceNode 0 1 1554 48
downcast from SelectiveChildNode to SequenceNode
65
SequenceNode *SelectiveChildNode::downcast_to_SequenceNode(void);

2824 23 upcast_to_AnimInterface 12 3018 37 SequenceNode::upcast_to_AnimInterface 0 1 1555 41
upcast from SequenceNode to AnimInterface
59
AnimInterface *SequenceNode::upcast_to_AnimInterface(void);

2825 24 downcast_to_SequenceNode 12 3019 39 AnimInterface::downcast_to_SequenceNode 0 1 1556 43
downcast from AnimInterface to SequenceNode
60
SequenceNode *AnimInterface::downcast_to_SequenceNode(void);

2826 12 SequenceNode 4 3018 26 SequenceNode::SequenceNode 0 1 1549 1131
// Filename: sequenceNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
68
inline SequenceNode::SequenceNode(basic_string< char > const &name);

2827 14 get_num_frames 4 3018 28 SequenceNode::get_num_frames 0 1 1550 580
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
53
virtual int SequenceNode::get_num_frames(void) const;

2828 14 set_frame_rate 4 3018 28 SequenceNode::set_frame_rate 0 1 1551 435
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
////////////////////////////////////////////////////////////////////
60
inline void SequenceNode::set_frame_rate(double frame_rate);

2829 14 get_class_type 4 3018 28 SequenceNode::get_class_type 0 1 1552 0
53
static TypeHandle SequenceNode::get_class_type(void);

2830 13 ~SequenceNode 4 3018 27 SequenceNode::~SequenceNode 0 0 0
34
SequenceNode::~SequenceNode(void);

2831 10 has_shader 4 3020 22 ShaderPool::has_shader 0 1 1557 1121
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

// Filename: shaderPool.I
// Created by:  aignacio (Mar06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::has_shader
//       Access: Public, Static
//  Description: Returns true if the shader has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
80
static inline bool ShaderPool::has_shader(basic_string< char > const &filename);

2832 13 verify_shader 4 3020 25 ShaderPool::verify_shader 0 1 1558 739
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::verify_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_shader() with the same shader name will
//               return a valid Shader pointer.
////////////////////////////////////////////////////////////////////
83
static inline bool ShaderPool::verify_shader(basic_string< char > const &filename);

2833 11 load_shader 4 3020 23 ShaderPool::load_shader 0 1 1559 536
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::load_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns the new shader.
//               If a shader with the same filename was previously
//               loaded, returns that one instead.  If the shader
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
101
static inline ConstPointerTo< Shader > ShaderPool::load_shader(basic_string< char > const &filename);

2834 10 add_shader 4 3020 22 ShaderPool::add_shader 0 1 1560 432
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::add_shader
//       Access: Public, Static
//  Description: Adds the indicated already-loaded shader to the
//               pool.  The shader will always replace any
//               previously-loaded shader in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
96
static inline void ShaderPool::add_shader(basic_string< char > const &filename, Shader *shader);

2835 14 release_shader 4 3020 26 ShaderPool::release_shader 0 1 1561 549
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_shader
//       Access: Public, Static
//  Description: Removes the indicated shader from the pool,
//               indicating it will never be loaded again; the shader
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every shader
//               every loaded, and shaders will never be freed.
////////////////////////////////////////////////////////////////////
84
static inline void ShaderPool::release_shader(basic_string< char > const &filename);

2836 19 release_all_shaders 4 3020 31 ShaderPool::release_all_shaders 0 1 1562 327
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_all_shaders
//       Access: Public, Static
//  Description: Releases all shaders in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
57
static inline void ShaderPool::release_all_shaders(void);

2837 15 garbage_collect 4 3020 27 ShaderPool::garbage_collect 0 1 1563 473
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those shaders in the pool that have a
//               reference count of exactly 1; i.e. only those
//               shaders that are not being used outside of the pool.
//               Returns the number of shaders released.
////////////////////////////////////////////////////////////////////
52
static inline int ShaderPool::garbage_collect(void);

2838 13 list_contents 4 3020 25 ShaderPool::list_contents 0 1 1564 316
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
59
static inline void ShaderPool::list_contents(ostream &out);

2839 5 write 4 3020 17 ShaderPool::write 0 1 1565 311
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::write
//       Access: Published, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
44
static void ShaderPool::write(ostream &out);

2840 11 ~ShaderPool 4 3020 23 ShaderPool::~ShaderPool 0 0 0
30
ShaderPool::~ShaderPool(void);

2841 4 make 4 3021 22 ShowBoundsEffect::make 0 2 1566 1567 271
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
////////////////////////////////////////////////////////////////////
79
static ConstPointerTo< RenderEffect > ShowBoundsEffect::make(bool tight = (0));

2842 9 get_tight 4 3021 27 ShowBoundsEffect::get_tight 0 1 1568 404
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::get_tight
//       Access: Published
//  Description: Returns true if the "tight" flag was set, meaning the
//               effect should compute and draw the tight bounding-box
//               of the node's vertices every frame.
////////////////////////////////////////////////////////////////////
52
inline bool ShowBoundsEffect::get_tight(void) const;

2843 14 get_class_type 4 3021 32 ShowBoundsEffect::get_class_type 0 1 1569 0
57
static TypeHandle ShowBoundsEffect::get_class_type(void);

2844 17 ~ShowBoundsEffect 4 3021 35 ShowBoundsEffect::~ShowBoundsEffect 0 0 0
42
ShowBoundsEffect::~ShowBoundsEffect(void);

2845 9 Spotlight 4 3022 20 Spotlight::Spotlight 0 1 1570 596
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
Spotlight::Spotlight(basic_string< char > const &name);

2846 12 get_exponent 4 3022 23 Spotlight::get_exponent 0 1 1571 371
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_exponent
//       Access: Public
//  Description: Returns the exponent that controls the amount of
//               light falloff from the center of the spotlight.  See
//               set_exponent().
////////////////////////////////////////////////////////////////////
49
inline float Spotlight::get_exponent(void) const;

2847 12 set_exponent 4 3022 23 Spotlight::set_exponent 0 1 1572 693
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
////////////////////////////////////////////////////////////////////
52
inline void Spotlight::set_exponent(float exponent);

2848 18 get_specular_color 4 3022 29 Spotlight::get_specular_color 0 1 1573 307
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &Spotlight::get_specular_color(void) const;

2849 18 set_specular_color 4 3022 29 Spotlight::set_specular_color 0 1 1574 304
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
67
inline void Spotlight::set_specular_color(LVecBase4f const &color);

2850 15 get_attenuation 4 3022 26 Spotlight::get_attenuation 0 1 1575 450
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3f const &Spotlight::get_attenuation(void) const;

2851 15 set_attenuation 4 3022 26 Spotlight::set_attenuation 0 1 1576 447
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
70
inline void Spotlight::set_attenuation(LVecBase3f const &attenuation);

2852 9 make_spot 4 3022 20 Spotlight::make_spot 0 1 1577 1015
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
////////////////////////////////////////////////////////////////////
117
static PointerTo< Texture > Spotlight::make_spot(int pixel_width, float full_radius, LVecBase4f &fg, LVecBase4f &bg);

2853 14 get_class_type 4 3022 25 Spotlight::get_class_type 0 1 1578 0
50
static TypeHandle Spotlight::get_class_type(void);

2854 10 ~Spotlight 4 3022 21 Spotlight::~Spotlight 0 0 0
28
Spotlight::~Spotlight(void);

2855 10 SwitchNode 4 3023 22 SwitchNode::SwitchNode 0 1 1579 451
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
64
inline SwitchNode::SwitchNode(basic_string< char > const &name);

2856 17 set_visible_child 4 3023 29 SwitchNode::set_visible_child 0 1 1580 322
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
////////////////////////////////////////////////////////////////////
53
inline void SwitchNode::set_visible_child(int index);

2857 14 get_class_type 4 3023 26 SwitchNode::get_class_type 0 1 1581 0
51
static TypeHandle SwitchNode::get_class_type(void);

2858 11 ~SwitchNode 4 3023 23 SwitchNode::~SwitchNode 0 0 0
30
SwitchNode::~SwitchNode(void);

2859 4 make 4 3024 24 TexProjectorEffect::make 0 1 1582 312
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::make
//       Access: Published, Static
//  Description: Constructs a TexProjectorEffect that modifies
//               no stages at all.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderEffect > TexProjectorEffect::make(void);

2860 9 add_stage 4 3024 29 TexProjectorEffect::add_stage 0 1 1583 800
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::add_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated projection for the given stage.
//               If this stage already exists, its projection
//               definition is replaced.
//
//               The relative transform between the "from" and the
//               "to" nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
////////////////////////////////////////////////////////////////////
130
ConstPointerTo< RenderEffect > TexProjectorEffect::add_stage(TextureStage *stage, NodePath const &from, NodePath const &to) const;

2861 12 remove_stage 4 3024 32 TexProjectorEffect::remove_stage 0 1 1584 343
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderEffect > TexProjectorEffect::remove_stage(TextureStage *stage) const;

2862 8 is_empty 4 3024 28 TexProjectorEffect::is_empty 0 1 1585 335
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexProjectorEffect, false if at least one is.
////////////////////////////////////////////////////////////////////
46
bool TexProjectorEffect::is_empty(void) const;

2863 9 has_stage 4 3024 29 TexProjectorEffect::has_stage 0 1 1586 445
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
62
bool TexProjectorEffect::has_stage(TextureStage *stage) const;

2864 8 get_from 4 3024 28 TexProjectorEffect::get_from 0 1 1587 506
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
65
NodePath TexProjectorEffect::get_from(TextureStage *stage) const;

2865 6 get_to 4 3024 26 TexProjectorEffect::get_to 0 1 1588 665
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
////////////////////////////////////////////////////////////////////
63
NodePath TexProjectorEffect::get_to(TextureStage *stage) const;

2866 14 get_class_type 4 3024 34 TexProjectorEffect::get_class_type 0 1 1589 0
59
static TypeHandle TexProjectorEffect::get_class_type(void);

2867 17 TextureCollection 4 3025 36 TextureCollection::TextureCollection 0 2 1590 1591 465
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
TextureCollection::TextureCollection(void);

2868 10 operator = 4 3025 29 TextureCollection::operator = 0 1 1592 242
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void TextureCollection::operator =(TextureCollection const &copy);

2869 18 ~TextureCollection 4 3025 37 TextureCollection::~TextureCollection 0 0 909
// Filename: textureCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline TextureCollection::~TextureCollection(void);

2870 11 add_texture 4 3025 30 TextureCollection::add_texture 0 1 1593 267
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_texture
//       Access: Published
//  Description: Adds a new Texture to the collection.
////////////////////////////////////////////////////////////////////
59
void TextureCollection::add_texture(Texture *node_texture);

2871 14 remove_texture 4 3025 33 TextureCollection::remove_texture 0 1 1594 406
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_texture
//       Access: Published
//  Description: Removes the indicated Texture from the collection.
//               Returns true if the texture was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
62
bool TextureCollection::remove_texture(Texture *node_texture);

2872 17 add_textures_from 4 3025 36 TextureCollection::add_textures_from 0 1 1595 482
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::add_textures_from
//       Access: Published
//  Description: Adds all the Textures indicated in the other
//               collection to this texture.  The other textures are simply
//               appended to the end of the textures in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
74
void TextureCollection::add_textures_from(TextureCollection const &other);

2873 20 remove_textures_from 4 3025 39 TextureCollection::remove_textures_from 0 1 1596 336
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_textures_from
//       Access: Published
//  Description: Removes from this collection all of the Textures
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
77
void TextureCollection::remove_textures_from(TextureCollection const &other);

2874 25 remove_duplicate_textures 4 3025 44 TextureCollection::remove_duplicate_textures 0 1 1597 473
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::remove_duplicate_textures
//       Access: Published
//  Description: Removes any duplicate entries of the same Textures
//               on this collection.  If a Texture appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
56
void TextureCollection::remove_duplicate_textures(void);

2875 11 has_texture 4 3025 30 TextureCollection::has_texture 0 1 1598 329
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::has_texture
//       Access: Published
//  Description: Returns true if the indicated Texture appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool TextureCollection::has_texture(Texture *texture) const;

2876 5 clear 4 3025 24 TextureCollection::clear 0 1 1599 265
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::clear
//       Access: Published
//  Description: Removes all Textures from the collection.
////////////////////////////////////////////////////////////////////
36
void TextureCollection::clear(void);

2877 12 find_texture 4 3025 31 TextureCollection::find_texture 0 1 1600 372
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::find_texture
//       Access: Published
//  Description: Returns the texture in the collection with the
//               indicated name, if any, or NULL if no texture has
//               that name.
////////////////////////////////////////////////////////////////////
81
Texture *TextureCollection::find_texture(basic_string< char > const &name) const;

2878 16 get_num_textures 4 3025 35 TextureCollection::get_num_textures 0 1 1601 284
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of Textures in the collection.
////////////////////////////////////////////////////////////////////
52
int TextureCollection::get_num_textures(void) const;

2879 11 get_texture 4 3025 30 TextureCollection::get_texture 0 1 1602 272
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth Texture in the collection.
////////////////////////////////////////////////////////////////////
57
Texture *TextureCollection::get_texture(int index) const;

2880 11 operator [] 4 3025 30 TextureCollection::operator [] 0 1 1603 392
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::operator []
//       Access: Published
//  Description: Returns the nth Texture in the collection.  This is
//               the same as get_texture(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
57
Texture *TextureCollection::operator [](int index) const;

2881 6 output 4 3025 25 TextureCollection::output 0 1 1604 334
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
51
void TextureCollection::output(ostream &out) const;

2882 5 write 4 3025 24 TextureCollection::write 0 2 1605 1606 338
////////////////////////////////////////////////////////////////////
//     Function: TextureCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
74
void TextureCollection::write(ostream &out, int indent_level = (0)) const;

2883 22 TextureStageCollection 4 3026 46 TextureStageCollection::TextureStageCollection 0 2 1607 1608 475
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
TextureStageCollection::TextureStageCollection(void);

2884 10 operator = 4 3026 34 TextureStageCollection::operator = 0 1 1609 247
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
void TextureStageCollection::operator =(TextureStageCollection const &copy);

2885 23 ~TextureStageCollection 4 3026 47 TextureStageCollection::~TextureStageCollection 0 0 919
// Filename: textureStageCollection.I
// Created by:  drose (23Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline TextureStageCollection::~TextureStageCollection(void);

2886 17 add_texture_stage 4 3026 41 TextureStageCollection::add_texture_stage 0 1 1610 283
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stage
//       Access: Published
//  Description: Adds a new TextureStage to the collection.
////////////////////////////////////////////////////////////////////
81
void TextureStageCollection::add_texture_stage(TextureStage *node_texture_stage);

2887 20 remove_texture_stage 4 3026 44 TextureStageCollection::remove_texture_stage 0 1 1611 428
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stage
//       Access: Published
//  Description: Removes the indicated TextureStage from the collection.
//               Returns true if the texture_stage was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
84
bool TextureStageCollection::remove_texture_stage(TextureStage *node_texture_stage);

2888 23 add_texture_stages_from 4 3026 47 TextureStageCollection::add_texture_stages_from 0 1 1612 516
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stages_from
//       Access: Published
//  Description: Adds all the TextureStages indicated in the other
//               collection to this texture_stage.  The other texture_stages are simply
//               appended to the end of the texture_stages in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
90
void TextureStageCollection::add_texture_stages_from(TextureStageCollection const &other);

2889 26 remove_texture_stages_from 4 3026 50 TextureStageCollection::remove_texture_stages_from 0 1 1613 352
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stages_from
//       Access: Published
//  Description: Removes from this collection all of the TextureStages
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
93
void TextureStageCollection::remove_texture_stages_from(TextureStageCollection const &other);

2890 31 remove_duplicate_texture_stages 4 3026 55 TextureStageCollection::remove_duplicate_texture_stages 0 1 1614 494
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_duplicate_texture_stages
//       Access: Published
//  Description: Removes any duplicate entries of the same TextureStages
//               on this collection.  If a TextureStage appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
67
void TextureStageCollection::remove_duplicate_texture_stages(void);

2891 17 has_texture_stage 4 3026 41 TextureStageCollection::has_texture_stage 0 1 1615 345
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::has_texture_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
82
bool TextureStageCollection::has_texture_stage(TextureStage *texture_stage) const;

2892 5 clear 4 3026 29 TextureStageCollection::clear 0 1 1616 275
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::clear
//       Access: Published
//  Description: Removes all TextureStages from the collection.
////////////////////////////////////////////////////////////////////
41
void TextureStageCollection::clear(void);

2893 18 find_texture_stage 4 3026 42 TextureStageCollection::find_texture_stage 0 1 1617 395
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::find_texture_stage
//       Access: Published
//  Description: Returns the texture_stage in the collection with the
//               indicated name, if any, or NULL if no texture_stage has
//               that name.
////////////////////////////////////////////////////////////////////
97
TextureStage *TextureStageCollection::find_texture_stage(basic_string< char > const &name) const;

2894 22 get_num_texture_stages 4 3026 46 TextureStageCollection::get_num_texture_stages 0 1 1618 300
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_num_texture_stages
//       Access: Published
//  Description: Returns the number of TextureStages in the collection.
////////////////////////////////////////////////////////////////////
63
int TextureStageCollection::get_num_texture_stages(void) const;

2895 17 get_texture_stage 4 3026 41 TextureStageCollection::get_texture_stage 0 1 1619 288
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_texture_stage
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.
////////////////////////////////////////////////////////////////////
73
TextureStage *TextureStageCollection::get_texture_stage(int index) const;

2896 11 operator [] 4 3026 35 TextureStageCollection::operator [] 0 1 1620 408
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator []
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.  This is
//               the same as get_texture_stage(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
67
TextureStage *TextureStageCollection::operator [](int index) const;

2897 4 sort 4 3026 28 TextureStageCollection::sort 0 1 1621 347
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::sort
//       Access: Published
//  Description: Sorts the TextureStages in this collection into order
//               by TextureStage::sort(), from lowest to highest.
////////////////////////////////////////////////////////////////////
40
void TextureStageCollection::sort(void);

2898 6 output 4 3026 30 TextureStageCollection::output 0 1 1622 344
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void TextureStageCollection::output(ostream &out) const;

2899 5 write 4 3026 29 TextureStageCollection::write 0 2 1623 1624 348
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
79
void TextureStageCollection::write(ostream &out, int indent_level = (0)) const;

1624
1 14 Dtool_nJyoQ1lR 6 3 3029 0 14 Dtool_nJyoQ1lR 2 4 this 3 3027  5 other 1 3027  
2 14 Dtool_nJyoRA4G 6 4 3029 0 14 Dtool_nJyoRA4G 3 4 this 3 3027  5 other 1 3027  15 uniquify_matrix 1 3029  
3 14 Dtool_nJyoNPd4 6 5 3030 0 14 Dtool_nJyoNPd4 1 4 this 3 3027  
4 14 Dtool_nJyooK5A 7 6 3027 0 14 Dtool_nJyooK5A 0 
5 14 Dtool_nJyo0MDC 7 7 3027 0 14 Dtool_nJyo0MDC 0 
6 14 Dtool_nJyoe_gZ 7 8 3027 0 14 Dtool_nJyoe_gZ 1 3 pos 1 3031  
7 14 Dtool_nJyonj11 7 9 3027 0 14 Dtool_nJyonj11 1 3 hpr 1 3031  
8 14 Dtool_nJyo_1bt 7 10 3027 0 14 Dtool_nJyo_1bt 1 4 quat 1 3034  
9 14 Dtool_nJyom6_l 7 11 3027 0 14 Dtool_nJyom6_l 2 3 pos 1 3031  3 hpr 1 3031  
10 14 Dtool_nJyoeCL8 7 12 3027 0 14 Dtool_nJyoeCL8 1 5 scale 1 3031  
11 14 Dtool_nJyoUwg8 7 12 3027 0 14 Dtool_nJyoUwg8 1 5 scale 1 3037  
12 14 Dtool_nJyo7OFW 7 13 3027 0 14 Dtool_nJyo7OFW 1 5 shear 1 3031  
13 14 Dtool_nJyorG32 7 14 3027 0 14 Dtool_nJyorG32 3 3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  
14 14 Dtool_nJyoR_EG 7 15 3027 0 14 Dtool_nJyoR_EG 3 3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  
15 14 Dtool_nJyoFwpz 7 16 3027 0 14 Dtool_nJyoFwpz 4 3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  5 shear 1 3031  
16 14 Dtool_nJyoDFJS 7 17 3027 0 14 Dtool_nJyoDFJS 4 3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  5 shear 1 3031  
17 14 Dtool_nJyoyOW1 7 18 3027 0 14 Dtool_nJyoyOW1 1 3 mat 1 3038  
18 14 Dtool_nJyon4_7 7 19 3027 0 14 Dtool_nJyon4_7 1 3 pos 1 3041  
19 14 Dtool_nJyo6tOv 7 20 3027 0 14 Dtool_nJyo6tOv 1 6 rotate 1 3037  
20 14 Dtool_nJyoJlYf 7 21 3027 0 14 Dtool_nJyoJlYf 2 3 pos 1 3041  6 rotate 1 3037  
21 14 Dtool_nJyo_u6x 7 22 3027 0 14 Dtool_nJyo_u6x 1 5 scale 1 3041  
22 14 Dtool_nJyoMyK9 7 22 3027 0 14 Dtool_nJyoMyK9 1 5 scale 1 3037  
23 14 Dtool_nJyoPaEX 7 23 3027 0 14 Dtool_nJyoPaEX 1 5 shear 1 3037  
24 14 Dtool_nJyozgBF 7 24 3027 0 14 Dtool_nJyozgBF 3 3 pos 1 3041  6 rotate 1 3037  5 scale 1 3041  
25 14 Dtool_nJyoQpLJ 7 25 3027 0 14 Dtool_nJyoQpLJ 4 3 pos 1 3041  6 rotate 1 3037  5 scale 1 3041  5 shear 1 3037  
26 14 Dtool_nJyovwaf 7 26 3027 0 14 Dtool_nJyovwaf 1 3 mat 1 3044  
27 14 Dtool_nJyo70HT 6 27 3029 0 14 Dtool_nJyo70HT 1 4 this 3 3027  
28 14 Dtool_nJyo5m5t 6 28 3029 0 14 Dtool_nJyo5m5t 1 4 this 3 3027  
29 14 Dtool_nJyo83Ub 6 29 3029 0 14 Dtool_nJyo83Ub 1 4 this 3 3027  
30 14 Dtool_nJyoFbzh 6 30 3029 0 14 Dtool_nJyoFbzh 1 4 this 3 3027  
31 14 Dtool_nJyo3N1T 6 31 3029 0 14 Dtool_nJyo3N1T 1 4 this 3 3027  
32 14 Dtool_nJyooeA_ 6 32 3029 0 14 Dtool_nJyooeA_ 1 4 this 3 3027  
33 14 Dtool_nJyoePnm 6 33 3029 0 14 Dtool_nJyoePnm 1 4 this 3 3027  
34 14 Dtool_nJyofBB6 6 34 3029 0 14 Dtool_nJyofBB6 1 4 this 3 3027  
35 14 Dtool_nJyod7_k 6 35 3029 0 14 Dtool_nJyod7_k 1 4 this 3 3027  
36 14 Dtool_nJyoaR4z 6 36 3029 0 14 Dtool_nJyoaR4z 1 4 this 3 3027  
37 14 Dtool_nJyobgn7 6 37 3029 0 14 Dtool_nJyobgn7 1 4 this 3 3027  
38 14 Dtool_nJyoeXCQ 6 38 3029 0 14 Dtool_nJyoeXCQ 1 4 this 3 3027  
39 14 Dtool_nJyotKCi 6 39 3029 0 14 Dtool_nJyotKCi 1 4 this 3 3027  
40 14 Dtool_nJyoCj8m 6 40 3029 0 14 Dtool_nJyoCj8m 1 4 this 3 3027  
41 14 Dtool_nJyoQZ2I 6 41 3029 0 14 Dtool_nJyoQZ2I 1 4 this 3 3027  
42 14 Dtool_nJyoUk2V 6 42 3029 0 14 Dtool_nJyoUk2V 1 4 this 3 3027  
43 14 Dtool_nJyoSx0T 6 43 3029 0 14 Dtool_nJyoSx0T 1 4 this 3 3027  
44 14 Dtool_nJyo1Y_X 6 44 3047 0 14 Dtool_nJyo1Y_X 1 4 this 3 3027  
45 14 Dtool_nJyoyy3m 6 45 3031 0 14 Dtool_nJyoyy3m 1 4 this 3 3027  
46 14 Dtool_nJyozDmu 6 46 3034 0 14 Dtool_nJyozDmu 1 4 this 3 3027  
47 14 Dtool_nJyomyBD 6 47 3031 0 14 Dtool_nJyomyBD 1 4 this 3 3027  
48 14 Dtool_nJyo6_8Z 6 48 3037 0 14 Dtool_nJyo6_8Z 1 4 this 3 3027  
49 14 Dtool_nJyon_27 6 49 3031 0 14 Dtool_nJyon_27 1 4 this 3 3027  
50 14 Dtool_nJyoKS0G 6 50 3038 0 14 Dtool_nJyoKS0G 1 4 this 3 3027  
51 14 Dtool_nJyoGSGD 7 51 3050 0 14 Dtool_nJyoGSGD 1 4 this 3 3027  
52 14 Dtool_nJyoguij 6 52 3037 0 14 Dtool_nJyoguij 1 4 this 3 3027  
53 14 Dtool_nJyoJEJy 7 53 3050 0 14 Dtool_nJyoJEJy 1 4 this 3 3027  
54 14 Dtool_nJyoay8q 6 54 3037 0 14 Dtool_nJyoay8q 1 4 this 3 3027  
55 14 Dtool_nJyojHYM 7 55 3051 0 14 Dtool_nJyojHYM 1 4 this 3 3027  
56 14 Dtool_nJyow_sj 7 56 3027 0 14 Dtool_nJyow_sj 2 4 this 3 3027  3 pos 1 3031  
57 14 Dtool_nJyotUny 7 57 3027 0 14 Dtool_nJyotUny 2 4 this 3 3027  3 hpr 1 3031  
58 14 Dtool_nJyoAH3z 7 58 3027 0 14 Dtool_nJyoAH3z 2 4 this 3 3027  4 quat 1 3034  
59 14 Dtool_nJyo9kl0 7 59 3027 0 14 Dtool_nJyo9kl0 2 4 this 3 3027  5 scale 1 3031  
60 14 Dtool_nJyoIVYt 7 60 3027 0 14 Dtool_nJyoIVYt 2 4 this 3 3027  5 shear 1 3031  
61 14 Dtool_nJyo2_j0 7 61 3027 0 14 Dtool_nJyo2_j0 2 4 this 3 3027  3 pos 1 3041  
62 14 Dtool_nJyowLZY 7 62 3027 0 14 Dtool_nJyowLZY 2 4 this 3 3027  6 rotate 1 3037  
63 14 Dtool_nJyoDWpr 7 63 3027 0 14 Dtool_nJyoDWpr 2 4 this 3 3027  5 scale 1 3041  
64 14 Dtool_nJyouRUH 7 64 3027 0 14 Dtool_nJyouRUH 2 4 this 3 3027  5 shear 1 3037  
65 14 Dtool_nJyoNCSV 7 65 3027 0 14 Dtool_nJyoNCSV 2 4 this 3 3027  5 other 1 3027  
66 14 Dtool_nJyo4b4F 7 66 3027 0 14 Dtool_nJyo4b4F 2 4 this 3 3027  5 other 1 3027  
67 14 Dtool_nJyoQVGV 7 67 3027 0 14 Dtool_nJyoQVGV 1 4 this 3 3027  
68 14 Dtool_nJyo_HK4 6 68 3052 0 14 Dtool_nJyo_HK4 2 4 this 3 3027  14 geom_rendering 1 3052  
69 14 Dtool_nJyo93Y1 6 69 3029 0 14 Dtool_nJyo93Y1 1 4 this 3 3027  
70 14 Dtool_nJyoWr2Z 4 70 3053 0 14 Dtool_nJyoWr2Z 1 4 this 3 3027  
71 14 Dtool_nJyo6hq2 6 71 3029 0 14 Dtool_nJyo6hq2 1 4 this 3 3027  
72 14 Dtool_nJyovh_1 4 72 3053 0 14 Dtool_nJyovh_1 1 4 this 3 3027  
73 14 Dtool_nJyopm4c 6 73 3029 0 14 Dtool_nJyopm4c 1 4 this 3 3027  
74 14 Dtool_nJyopd25 4 74 3053 0 14 Dtool_nJyopd25 2 4 this 3 3027  3 out 1 3054  
75 14 Dtool_nJyoREBo 4 75 3053 0 14 Dtool_nJyoREBo 3 4 this 3 3027  3 out 1 3054  12 indent_level 1 3052  
76 14 Dtool_nJyoft1r 6 76 3052 0 14 Dtool_nJyoft1r 0 
77 14 Dtool_nJyofD2f 6 77 3052 0 14 Dtool_nJyofD2f 0 
78 14 Dtool_nJyo8dXE 6 78 3052 0 14 Dtool_nJyo8dXE 0 
79 14 Dtool_nJyoCbxp 4 79 3053 0 14 Dtool_nJyoCbxp 1 3 out 1 3054  
80 14 Dtool_nJyoIP9P 4 80 3053 0 14 Dtool_nJyoIP9P 1 3 out 1 3054  
81 14 Dtool_nJyoidJ2 6 81 3029 0 14 Dtool_nJyoidJ2 0 
82 14 Dtool_nJyoOzaR 7 82 3057 0 14 Dtool_nJyoOzaR 0 
83 14 Dtool_nJyovruE 6 85 3052 0 14 Dtool_nJyovruE 2 4 this 3 3058  5 other 1 3058  
84 14 Dtool_nJyooTLC 4 86 3053 0 14 Dtool_nJyooTLC 2 4 this 3 3058  3 out 1 3054  
85 14 Dtool_nJyodBRS 4 87 3053 0 14 Dtool_nJyodBRS 3 4 this 3 3058  3 out 1 3054  12 indent_level 1 3052  
86 14 Dtool_nJyoHzox 6 88 3052 0 14 Dtool_nJyoHzox 0 
87 14 Dtool_nJyoHw_H 4 89 3053 0 14 Dtool_nJyoHw_H 1 3 out 1 3054  
88 14 Dtool_nJyonA2d 6 90 3029 0 14 Dtool_nJyonA2d 0 
89 14 Dtool_nJyoLWjP 7 93 3057 0 14 Dtool_nJyoLWjP 0 
90 14 Dtool_nJyoAgj2 7 96 3058 0 14 Dtool_nJyoAgj2 3 4 mode 1 2907  9 thickness 1 3037  11 perspective 1 3029  
91 14 Dtool_nJyo8VB1 7 96 3058 0 14 Dtool_nJyo8VB1 2 4 mode 1 2907  9 thickness 1 3037  
92 14 Dtool_nJyo9BMo 7 96 3058 0 14 Dtool_nJyo9BMo 1 4 mode 1 2907  
93 14 Dtool_nJyoEaf_ 6 97 2907 0 14 Dtool_nJyoEaf_ 1 4 this 3 3060  
94 14 Dtool_nJyo8Zwq 6 98 3037 0 14 Dtool_nJyo8Zwq 1 4 this 3 3060  
95 14 Dtool_nJyozILX 6 99 3029 0 14 Dtool_nJyozILX 1 4 this 3 3060  
96 14 Dtool_nJyoKD5y 6 100 3052 0 14 Dtool_nJyoKD5y 2 4 this 3 3060  14 geom_rendering 1 3052  
97 14 Dtool_nJyoN0p3 7 101 3057 0 14 Dtool_nJyoN0p3 0 
98 14 Dtool_nJyoFUDw 7 104 3058 0 14 Dtool_nJyoFUDw 0 
99 14 Dtool_nJyoiX3D 7 104 3058 0 14 Dtool_nJyoiX3D 1 3 mat 1 3038  
100 14 Dtool_nJyoKQGr 7 104 3058 0 14 Dtool_nJyoKQGr 2 5 stage 1 3062  9 transform 1 3027  
101 14 Dtool_nJyo6Dmh 7 105 3058 0 14 Dtool_nJyo6Dmh 3 4 this 3 3064  5 stage 1 3062  9 transform 1 3027  
102 14 Dtool_nJyolqcR 7 106 3058 0 14 Dtool_nJyolqcR 2 4 this 3 3064  5 stage 1 3062  
103 14 Dtool_nJyo6GHq 6 107 3029 0 14 Dtool_nJyo6GHq 1 4 this 3 3064  
104 14 Dtool_nJyoogDz 6 108 3029 0 14 Dtool_nJyoogDz 2 4 this 3 3064  5 stage 1 3062  
105 14 Dtool_nJyoCetZ 6 109 3052 0 14 Dtool_nJyoCetZ 1 4 this 3 3064  
106 14 Dtool_nJyo8HUI 7 110 3062 0 14 Dtool_nJyo8HUI 2 4 this 3 3064  1 n 1 3052  
107 14 Dtool_nJyojqir 6 111 3038 0 14 Dtool_nJyojqir 1 4 this 3 3064  
108 14 Dtool_nJyod7Oo 6 111 3038 0 14 Dtool_nJyod7Oo 2 4 this 3 3064  5 stage 1 3062  
109 14 Dtool_nJyoQoZM 7 112 3027 0 14 Dtool_nJyoQoZM 2 4 this 3 3064  5 stage 1 3062  
110 14 Dtool_nJyoPyyY 6 113 3052 0 14 Dtool_nJyoPyyY 2 4 this 3 3064  14 geom_rendering 1 3052  
111 14 Dtool_nJyo3OB_ 7 114 3057 0 14 Dtool_nJyo3OB_ 0 
112 14 Dtool_nJyoAt5L 6 116 3029 0 14 Dtool_nJyoAt5L 2 4 this 3 3066  5 other 1 3066  
113 14 Dtool_nJyobG0o 6 117 3029 0 14 Dtool_nJyobG0o 1 4 this 3 3066  
114 14 Dtool_nJyo3N6n 6 118 3052 0 14 Dtool_nJyo3N6n 1 4 this 3 3066  
115 14 Dtool_nJyoQqmu 7 119 3058 0 14 Dtool_nJyoQqmu 2 4 this 3 3066  4 type 1 3057  
116 14 Dtool_nJyoUEFr 7 119 3058 0 14 Dtool_nJyoUEFr 2 4 this 3 3066  1 n 1 3052  
117 14 Dtool_nJyouZNq 6 120 3052 0 14 Dtool_nJyouZNq 2 4 this 3 3066  4 type 1 3057  
118 14 Dtool_nJyobchm 6 120 3052 0 14 Dtool_nJyobchm 2 4 this 3 3066  1 n 1 3052  
119 14 Dtool_nJyo8NWA 6 121 3029 0 14 Dtool_nJyo8NWA 1 4 this 3 3066  
120 14 Dtool_nJyo8pTl 6 122 3029 0 14 Dtool_nJyo8pTl 3 4 this 3 3066  4 trav 1 3068  4 data 1 3070  
121 14 Dtool_nJyoH_dV 6 123 3052 0 14 Dtool_nJyoH_dV 2 4 this 3 3066  4 type 1 3057  
122 14 Dtool_nJyoGuHJ 7 124 3066 0 14 Dtool_nJyoGuHJ 0 
123 14 Dtool_nJyodQwI 7 125 3066 0 14 Dtool_nJyodQwI 2 5 slots 1 3073  8 override 1 3052  
124 14 Dtool_nJyogbts 7 125 3066 0 14 Dtool_nJyogbts 1 5 slots 1 3073  
125 14 Dtool_nJyoRRYz 7 125 3066 0 14 Dtool_nJyoRRYz 5 7 attrib1 1 3058  7 attrib2 1 3058  7 attrib3 1 3058  7 attrib4 1 3058  8 override 1 3052  
126 14 Dtool_nJyojeWF 7 125 3066 0 14 Dtool_nJyojeWF 4 7 attrib1 1 3058  7 attrib2 1 3058  7 attrib3 1 3058  7 attrib4 1 3058  
127 14 Dtool_nJyoK6X3 7 125 3066 0 14 Dtool_nJyoK6X3 4 7 attrib1 1 3058  7 attrib2 1 3058  7 attrib3 1 3058  8 override 1 3052  
128 14 Dtool_nJyobtvX 7 125 3066 0 14 Dtool_nJyobtvX 3 7 attrib1 1 3058  7 attrib2 1 3058  7 attrib3 1 3058  
129 14 Dtool_nJyou7vK 7 125 3066 0 14 Dtool_nJyou7vK 3 7 attrib1 1 3058  7 attrib2 1 3058  8 override 1 3052  
130 14 Dtool_nJyoSK5z 7 125 3066 0 14 Dtool_nJyoSK5z 2 7 attrib1 1 3058  7 attrib2 1 3058  
131 14 Dtool_nJyoiqB_ 7 125 3066 0 14 Dtool_nJyoiqB_ 2 6 attrib 1 3058  8 override 1 3052  
132 14 Dtool_nJyoT9E9 7 125 3066 0 14 Dtool_nJyoT9E9 1 6 attrib 1 3058  
133 14 Dtool_nJyosYED 7 126 3066 0 14 Dtool_nJyosYED 2 4 this 3 3066  5 other 1 3066  
134 14 Dtool_nJyo_7EZ 7 127 3066 0 14 Dtool_nJyo_7EZ 2 4 this 3 3066  5 other 1 3066  
135 14 Dtool_nJyoMVE4 7 128 3066 0 14 Dtool_nJyoMVE4 3 4 this 3 3066  6 attrib 1 3058  8 override 1 3052  
136 14 Dtool_nJyoyvO6 7 128 3066 0 14 Dtool_nJyoyvO6 2 4 this 3 3066  6 attrib 1 3058  
137 14 Dtool_nJyoyYRK 7 129 3066 0 14 Dtool_nJyoyYRK 2 4 this 3 3066  4 type 1 3057  
138 14 Dtool_nJyo_mZy 7 130 3066 0 14 Dtool_nJyo_mZy 2 4 this 3 3066  10 adjustment 1 3052  
139 14 Dtool_nJyoevlZ 6 131 3029 0 14 Dtool_nJyoevlZ 1 4 this 3 3066  
140 14 Dtool_nJyorMAG 4 132 3053 0 14 Dtool_nJyorMAG 1 4 this 3 3066  
141 14 Dtool_nJyoK_kx 6 133 3029 0 14 Dtool_nJyoK_kx 1 4 this 3 3066  
142 14 Dtool_nJyolWCY 4 134 3053 0 14 Dtool_nJyolWCY 1 4 this 3 3066  
143 14 Dtool_nJyoVnZl 6 135 3029 0 14 Dtool_nJyoVnZl 1 4 this 3 3066  
144 14 Dtool_nJyo5YiO 4 136 3053 0 14 Dtool_nJyo5YiO 2 4 this 3 3066  3 out 1 3054  
145 14 Dtool_nJyoArA3 4 137 3053 0 14 Dtool_nJyoArA3 3 4 this 3 3066  3 out 1 3054  12 indent_level 1 3052  
146 14 Dtool_nJyoV3mc 6 138 3052 0 14 Dtool_nJyoV3mc 0 
147 14 Dtool_nJyoSXJI 6 139 3052 0 14 Dtool_nJyoSXJI 0 
148 14 Dtool_nJyoB8ph 6 140 3052 0 14 Dtool_nJyoB8ph 0 
149 14 Dtool_nJyofP1U 6 141 3052 0 14 Dtool_nJyofP1U 0 
150 14 Dtool_nJyoyu1u 4 142 3053 0 14 Dtool_nJyoyu1u 1 3 out 1 3054  
151 14 Dtool_nJyoMySM 4 143 3053 0 14 Dtool_nJyoMySM 1 3 out 1 3054  
152 14 Dtool_nJyoYm1k 6 144 3029 0 14 Dtool_nJyoYm1k 0 
153 14 Dtool_nJyowxn3 6 145 3052 0 14 Dtool_nJyowxn3 1 4 this 3 3066  
154 14 Dtool_nJyosPK8 6 146 3076 0 14 Dtool_nJyosPK8 1 4 this 3 3066  
155 14 Dtool_nJyoqXWB 6 147 3078 0 14 Dtool_nJyoqXWB 1 4 this 3 3066  
156 14 Dtool_nJyoRM0R 6 148 3080 0 14 Dtool_nJyoRM0R 1 4 this 3 3066  
157 14 Dtool_nJyoP6sb 6 149 3052 0 14 Dtool_nJyoP6sb 1 4 this 3 3066  
158 14 Dtool_nJyoPeba 6 150 3082 0 14 Dtool_nJyoPeba 1 4 this 3 3066  
159 14 Dtool_nJyoSqD1 6 151 3084 0 14 Dtool_nJyoSqD1 1 4 this 3 3066  
160 14 Dtool_nJyoCxZ2 6 152 3086 0 14 Dtool_nJyoCxZ2 1 4 this 3 3066  
161 14 Dtool_nJyoV9nH 6 153 3088 0 14 Dtool_nJyoV9nH 1 4 this 3 3066  
162 14 Dtool_nJyoCpc_ 7 154 3064 0 14 Dtool_nJyoCpc_ 1 4 this 3 3066  
163 14 Dtool_nJyoMc3Y 7 155 3060 0 14 Dtool_nJyoMc3Y 1 4 this 3 3066  
164 14 Dtool_nJyoa5Wb 6 156 3090 0 14 Dtool_nJyoa5Wb 1 4 this 3 3066  
165 14 Dtool_nJyoUAPs 6 157 3092 0 14 Dtool_nJyoUAPs 1 4 this 3 3066  
166 14 Dtool_nJyoaUkU 6 158 3052 0 14 Dtool_nJyoaUkU 2 4 this 3 3066  14 geom_rendering 1 3052  
167 14 Dtool_nJyoF592 7 159 3057 0 14 Dtool_nJyoF592 0 
168 14 Dtool_nJyoQcHT 7 161 3058 0 14 Dtool_nJyoQcHT 2 4 mode 1 2904  15 reference_alpha 1 3037  
169 14 Dtool_nJyohz_c 6 162 3037 0 14 Dtool_nJyohz_c 1 4 this 3 3094  
170 14 Dtool_nJyooV_S 6 163 2904 0 14 Dtool_nJyooV_S 1 4 this 3 3094  
171 14 Dtool_nJyoP7w8 7 164 3057 0 14 Dtool_nJyoP7w8 0 
172 14 Dtool_nJyoZvzD 6 167 3052 0 14 Dtool_nJyoZvzD 2 4 this 3 3096  5 other 1 3096  
173 14 Dtool_nJyoLgOf 4 168 3053 0 14 Dtool_nJyoLgOf 2 4 this 3 3096  3 out 1 3054  
174 14 Dtool_nJyoeXUv 4 169 3053 0 14 Dtool_nJyoeXUv 3 4 this 3 3096  3 out 1 3054  12 indent_level 1 3052  
175 14 Dtool_nJyovz2e 6 170 3052 0 14 Dtool_nJyovz2e 0 
176 14 Dtool_nJyorBxm 4 171 3053 0 14 Dtool_nJyorBxm 1 3 out 1 3054  
177 14 Dtool_nJyoLUB_ 6 172 3029 0 14 Dtool_nJyoLUB_ 0 
178 14 Dtool_nJyo3Lms 7 173 3057 0 14 Dtool_nJyo3Lms 0 
179 14 Dtool_nJyomaIr 6 175 3029 0 14 Dtool_nJyomaIr 2 4 this 3 3098  5 other 1 3098  
180 14 Dtool_nJyom56U 6 176 3029 0 14 Dtool_nJyom56U 1 4 this 3 3098  
181 14 Dtool_nJyoiXcl 6 177 3052 0 14 Dtool_nJyoiXcl 1 4 this 3 3098  
182 14 Dtool_nJyo_AJ6 7 178 3096 0 14 Dtool_nJyo_AJ6 2 4 this 3 3098  4 type 1 3057  
183 14 Dtool_nJyopvc2 7 178 3096 0 14 Dtool_nJyopvc2 2 4 this 3 3098  1 n 1 3052  
184 14 Dtool_nJyoNzuE 6 179 3052 0 14 Dtool_nJyoNzuE 2 4 this 3 3098  4 type 1 3057  
185 14 Dtool_nJyogrKD 7 180 3098 0 14 Dtool_nJyogrKD 0 
186 14 Dtool_nJyoiDSO 7 181 3098 0 14 Dtool_nJyoiDSO 1 6 effect 1 3096  
187 14 Dtool_nJyo3y67 7 181 3098 0 14 Dtool_nJyo3y67 2 7 effect1 1 3096  7 effect2 1 3096  
188 14 Dtool_nJyoZQ3C 7 181 3098 0 14 Dtool_nJyoZQ3C 3 7 effect1 1 3096  7 effect2 1 3096  7 effect3 1 3096  
189 14 Dtool_nJyozo_d 7 181 3098 0 14 Dtool_nJyozo_d 4 7 effect1 1 3096  7 effect2 1 3096  7 effect3 1 3096  7 effect4 1 3096  
190 14 Dtool_nJyo8sn3 7 182 3098 0 14 Dtool_nJyo8sn3 2 4 this 3 3098  6 effect 1 3096  
191 14 Dtool_nJyoNxu4 7 183 3098 0 14 Dtool_nJyoNxu4 2 4 this 3 3098  4 type 1 3057  
192 14 Dtool_nJyoxmDR 4 184 3053 0 14 Dtool_nJyoxmDR 2 4 this 3 3098  3 out 1 3054  
193 14 Dtool_nJyo_6eU 4 185 3053 0 14 Dtool_nJyo_6eU 3 4 this 3 3098  3 out 1 3054  12 indent_level 1 3052  
194 14 Dtool_nJyoELqs 6 186 3052 0 14 Dtool_nJyoELqs 0 
195 14 Dtool_nJyoFHwJ 4 187 3053 0 14 Dtool_nJyoFHwJ 1 3 out 1 3054  
196 14 Dtool_nJyoP68o 6 188 3029 0 14 Dtool_nJyoP68o 0 
197 14 Dtool_nJyope17 7 189 3057 0 14 Dtool_nJyope17 0 
198 14 Dtool_nJyomVfc 7 199 3101 1807 14 Dtool_nJyomVfc 1 4 name 1 3100  
199 14 Dtool_nJyoFYnx 7 201 3101 1807 14 Dtool_nJyoFYnx 1 4 this 3 3102  
200 14 Dtool_nJyoI9bH 6 202 3052 0 14 Dtool_nJyoI9bH 1 4 this 3 3102  
201 14 Dtool_nJyoh0xF 7 203 3101 1807 14 Dtool_nJyoh0xF 2 4 this 3 3102  1 n 1 3052  
202 14 Dtool_nJyoMWG_ 6 204 3052 0 14 Dtool_nJyoMWG_ 2 4 this 3 3102  4 node 1 3101  
203 14 Dtool_nJyo78Bo 6 205 3052 0 14 Dtool_nJyo78Bo 1 4 this 3 3102  
204 14 Dtool_nJyokZg9 7 206 3101 1807 14 Dtool_nJyokZg9 2 4 this 3 3102  1 n 1 3052  
205 14 Dtool_nJyoMzeG 6 207 3052 0 14 Dtool_nJyoMzeG 2 4 this 3 3102  1 n 1 3052  
206 14 Dtool_nJyoKHuN 6 208 3052 0 14 Dtool_nJyoKHuN 2 4 this 3 3102  4 node 1 3101  
207 14 Dtool_nJyoA9tQ 4 209 3053 0 14 Dtool_nJyoA9tQ 3 4 this 3 3101  10 child_node 1 3101  4 sort 1 3052  
208 14 Dtool_nJyo27ri 4 209 3053 0 14 Dtool_nJyo27ri 2 4 this 3 3101  10 child_node 1 3101  
209 14 Dtool_nJyozFZb 6 210 3029 0 14 Dtool_nJyozFZb 2 4 this 3 3101  10 child_node 1 3101  
210 14 Dtool_nJyoDqN1 4 210 3053 0 14 Dtool_nJyoDqN1 2 4 this 3 3101  11 child_index 1 3052  
211 14 Dtool_nJyogW5Y 6 211 3029 0 14 Dtool_nJyogW5Y 3 4 this 3 3101  10 orig_child 1 3101  9 new_child 1 3101  
212 14 Dtool_nJyojC1w 6 212 3029 0 14 Dtool_nJyojC1w 2 4 this 3 3101  10 child_node 1 3101  
213 14 Dtool_nJyorWqz 4 212 3053 0 14 Dtool_nJyorWqz 2 4 this 3 3101  11 child_index 1 3052  
214 14 Dtool_nJyoqJGM 6 213 3029 0 14 Dtool_nJyoqJGM 2 4 this 3 3101  10 child_node 1 3101  
215 14 Dtool_nJyoeWxF 4 213 3053 0 14 Dtool_nJyoeWxF 2 4 this 3 3101  13 stashed_index 1 3052  
216 14 Dtool_nJyoOR8_ 6 214 3052 0 14 Dtool_nJyoOR8_ 1 4 this 3 3102  
217 14 Dtool_nJyok8qw 7 215 3101 1807 14 Dtool_nJyok8qw 2 4 this 3 3102  1 n 1 3052  
218 14 Dtool_nJyoE1FX 6 216 3052 0 14 Dtool_nJyoE1FX 2 4 this 3 3102  1 n 1 3052  
219 14 Dtool_nJyoyw9C 6 217 3052 0 14 Dtool_nJyoyw9C 2 4 this 3 3102  4 node 1 3101  
220 14 Dtool_nJyoXQ0n 4 218 3053 0 14 Dtool_nJyoXQ0n 3 4 this 3 3101  10 child_node 1 3101  4 sort 1 3052  
221 14 Dtool_nJyoswLI 4 218 3053 0 14 Dtool_nJyoswLI 2 4 this 3 3101  10 child_node 1 3101  
222 14 Dtool_nJyoZHe7 4 219 3053 0 14 Dtool_nJyoZHe7 2 4 this 3 3101  11 child_index 1 3052  
223 14 Dtool_nJyobyap 4 220 3053 0 14 Dtool_nJyobyap 1 4 this 3 3101  
224 14 Dtool_nJyojgnr 4 221 3053 0 14 Dtool_nJyojgnr 2 4 this 3 3101  5 other 1 3101  
225 14 Dtool_nJyohfED 4 222 3053 0 14 Dtool_nJyohfED 2 4 this 3 3101  5 other 1 3101  
226 14 Dtool_nJyo48Bd 4 223 3053 0 14 Dtool_nJyo48Bd 3 4 this 3 3101  6 attrib 1 3058  8 override 1 3052  
227 14 Dtool_nJyoDD5k 4 223 3053 0 14 Dtool_nJyoDD5k 2 4 this 3 3101  6 attrib 1 3058  
228 14 Dtool_nJyoaDfJ 7 224 3058 0 14 Dtool_nJyoaDfJ 2 4 this 3 3102  4 type 1 3057  
229 14 Dtool_nJyo2W_P 6 225 3029 0 14 Dtool_nJyo2W_P 2 4 this 3 3102  4 type 1 3057  
230 14 Dtool_nJyoDSEu 4 226 3053 0 14 Dtool_nJyoDSEu 2 4 this 3 3101  4 type 1 3057  
231 14 Dtool_nJyoKWvI 4 227 3053 0 14 Dtool_nJyoKWvI 2 4 this 3 3101  6 effect 1 3096  
232 14 Dtool_nJyo07Hl 7 228 3096 0 14 Dtool_nJyo07Hl 2 4 this 3 3102  4 type 1 3057  
233 14 Dtool_nJyoI1nr 6 229 3029 0 14 Dtool_nJyoI1nr 2 4 this 3 3102  4 type 1 3057  
234 14 Dtool_nJyoNUJ2 4 230 3053 0 14 Dtool_nJyoNUJ2 2 4 this 3 3101  4 type 1 3057  
235 14 Dtool_nJyoGDjV 4 231 3053 0 14 Dtool_nJyoGDjV 2 4 this 3 3101  5 state 1 3066  
236 14 Dtool_nJyoJocj 7 232 3066 0 14 Dtool_nJyoJocj 1 4 this 3 3102  
237 14 Dtool_nJyotySF 4 233 3053 0 14 Dtool_nJyotySF 1 4 this 3 3101  
238 14 Dtool_nJyoxlpj 4 234 3053 0 14 Dtool_nJyoxlpj 2 4 this 3 3101  7 effects 1 3098  
239 14 Dtool_nJyo1WLf 7 235 3098 0 14 Dtool_nJyo1WLf 1 4 this 3 3102  
240 14 Dtool_nJyo6yPH 4 236 3053 0 14 Dtool_nJyo6yPH 1 4 this 3 3101  
241 14 Dtool_nJyo55Ti 4 237 3053 0 14 Dtool_nJyo55Ti 2 4 this 3 3101  9 transform 1 3027  
242 14 Dtool_nJyoydH2 7 238 3027 0 14 Dtool_nJyoydH2 1 4 this 3 3102  
243 14 Dtool_nJyoEjK_ 4 239 3053 0 14 Dtool_nJyoEjK_ 1 4 this 3 3101  
244 14 Dtool_nJyo_3nJ 4 240 3053 0 14 Dtool_nJyo_3nJ 2 4 this 3 3101  9 transform 1 3027  
245 14 Dtool_nJyor3cO 7 241 3027 0 14 Dtool_nJyor3cO 1 4 this 3 3102  
246 14 Dtool_nJyoGfcO 4 242 3053 0 14 Dtool_nJyoGfcO 1 4 this 3 3101  
247 14 Dtool_nJyoTNEJ 4 243 3053 0 14 Dtool_nJyoTNEJ 3 4 this 3 3101  3 key 1 3100  5 value 1 3100  
248 14 Dtool_nJyo5tVl 6 244 3100 0 14 Dtool_nJyo5tVl 2 4 this 3 3102  3 key 1 3100  
249 14 Dtool_nJyote2r 6 245 3029 0 14 Dtool_nJyote2r 2 4 this 3 3102  3 key 1 3100  
250 14 Dtool_nJyoiRPE 4 246 3053 0 14 Dtool_nJyoiRPE 2 4 this 3 3101  3 key 1 3100  
251 14 Dtool_nJyonv2I 4 247 3053 0 14 Dtool_nJyonv2I 3 4 this 3 3101  3 key 1 3100  5 value 1 3104  
252 14 Dtool_nJyo_RhW 6 248 3104 0 14 Dtool_nJyo_RhW 2 4 this 3 3102  3 key 1 3100  
253 14 Dtool_nJyoCjBd 6 249 3029 0 14 Dtool_nJyoCjBd 2 4 this 3 3102  3 key 1 3100  
254 14 Dtool_nJyoCWBq 4 250 3053 0 14 Dtool_nJyoCWBq 2 4 this 3 3101  3 key 1 3100  
255 14 Dtool_nJyoUT5V 6 251 3029 0 14 Dtool_nJyoUT5V 1 4 this 3 3102  
256 14 Dtool_nJyoxMQi 4 252 3053 0 14 Dtool_nJyoxMQi 2 4 this 3 3101  5 other 1 3101  
257 14 Dtool_nJyo3itg 4 253 3053 0 14 Dtool_nJyo3itg 3 4 this 3 3102  3 out 1 3054  9 separator 1 3100  
258 14 Dtool_nJyocRES 4 253 3053 0 14 Dtool_nJyocRES 2 4 this 3 3102  3 out 1 3054  
259 14 Dtool_nJyoMVSB 7 254 3107 0 14 Dtool_nJyoMVSB 0 
260 14 Dtool_nJyoc4fq 6 255 3029 0 14 Dtool_nJyoc4fq 1 4 this 3 3102  
261 14 Dtool_nJyopN5m 4 256 3053 0 14 Dtool_nJyopN5m 2 4 this 3 3101  14 overall_hidden 1 3029  
262 14 Dtool_nJyodFVQ 4 257 3053 0 14 Dtool_nJyodFVQ 4 4 this 3 3101  9 show_mask 1 3107  9 hide_mask 1 3107  10 clear_mask 1 3107  
263 14 Dtool_nJyoaVGC 7 258 3107 0 14 Dtool_nJyoaVGC 1 4 this 3 3102  
264 14 Dtool_nJyokxUA 7 259 3107 0 14 Dtool_nJyokxUA 1 4 this 3 3102  
265 14 Dtool_nJyoVZQn 7 260 3107 0 14 Dtool_nJyoVZQn 1 4 this 3 3102  
266 14 Dtool_nJyothHn 7 261 3107 0 14 Dtool_nJyothHn 1 4 this 3 3102  
267 14 Dtool_nJyoAdj3 4 262 3053 0 14 Dtool_nJyoAdj3 2 4 this 3 3101  4 mask 1 3107  
268 14 Dtool_nJyoc3Cf 7 263 3107 0 14 Dtool_nJyoc3Cf 1 4 this 3 3102  
269 14 Dtool_nJyotnOA 7 264 3107 0 14 Dtool_nJyotnOA 1 4 this 3 3102  
270 14 Dtool_nJyo4l_T 7 265 3107 0 14 Dtool_nJyo4l_T 1 4 this 3 3102  
271 14 Dtool_nJyoIxkn 7 266 3058 0 14 Dtool_nJyoIxkn 1 4 this 3 3102  
272 14 Dtool_nJyoW23T 4 267 3053 0 14 Dtool_nJyoW23T 2 4 this 3 3102  3 out 1 3054  
273 14 Dtool_nJyoSz8K 4 268 3053 0 14 Dtool_nJyoSz8K 3 4 this 3 3102  3 out 1 3054  12 indent_level 1 3052  
274 14 Dtool_nJyopBSg 4 269 3053 0 14 Dtool_nJyopBSg 3 4 this 3 3102  3 out 1 3054  12 indent_level 1 3052  
275 14 Dtool_nJyoAQ3k 4 270 3053 0 14 Dtool_nJyoAQ3k 2 4 this 3 3101  6 volume 1 3108  
276 14 Dtool_nJyophxO 4 271 3053 0 14 Dtool_nJyophxO 2 4 this 3 3101  6 volume 1 3108  
277 14 Dtool_nJyozkwy 4 272 3053 0 14 Dtool_nJyozkwy 1 4 this 3 3101  
278 14 Dtool_nJyo9E3v 7 273 3108 0 14 Dtool_nJyo9E3v 1 4 this 3 3102  
279 14 Dtool_nJyojqxf 7 274 3108 0 14 Dtool_nJyojqxf 1 4 this 3 3102  
280 14 Dtool_nJyoddK_ 4 275 3053 0 14 Dtool_nJyoddK_ 1 4 this 3 3102  
281 14 Dtool_nJyofUw8 4 276 3053 0 14 Dtool_nJyofUw8 2 4 this 3 3101  4 flag 1 3029  
282 14 Dtool_nJyo8p0D 6 277 3029 0 14 Dtool_nJyo8p0D 1 4 this 3 3102  
283 14 Dtool_nJyoxAx3 6 278 3029 0 14 Dtool_nJyoxAx3 1 4 this 3 3102  
284 14 Dtool_nJyohW8z 6 279 3029 0 14 Dtool_nJyohW8z 1 4 this 3 3102  
285 14 Dtool_nJyobCbs 6 280 3111 0 14 Dtool_nJyobCbs 1 4 this 3 3101  
286 14 Dtool_nJyo6Ap_ 7 281 3057 0 14 Dtool_nJyo6Ap_ 0 
287 14 Dtool_nJyoEBYy 6 192 3112 0 14 Dtool_nJyoEBYy 1 4 this 3 3101  
288 14 Dtool_nJyovIpo 7 193 3101 1807 14 Dtool_nJyovIpo 1 4 this 3 3112  
289 14 Dtool_nJyojprb 6 195 3113 0 14 Dtool_nJyojprb 1 4 this 3 3101  
290 14 Dtool_nJyoPzAU 7 196 3101 1807 14 Dtool_nJyoPzAU 1 4 this 3 3113  
291 14 Dtool_nJyogdrc 6 198 3114 0 14 Dtool_nJyogdrc 1 4 this 3 3101  
292 14 Dtool_nJyo3eFF 7 283 3115 1807 14 Dtool_nJyo3eFF 1 4 name 1 3100  
293 14 Dtool_nJyoI0Ys 6 284 3052 0 14 Dtool_nJyoI0Ys 1 4 this 3 3116  
294 14 Dtool_nJyoAgFb 7 285 3120 0 14 Dtool_nJyoAgFb 2 4 this 3 3116  1 n 1 3052  
295 14 Dtool_nJyoiPT0 7 286 3121 0 14 Dtool_nJyoiPT0 2 4 this 3 3115  1 n 1 3052  
296 14 Dtool_nJyoh0cC 7 287 3121 0 14 Dtool_nJyoh0cC 2 4 this 3 3115  1 n 1 3052  
297 14 Dtool_nJyoeIGG 7 288 3066 0 14 Dtool_nJyoeIGG 2 4 this 3 3116  1 n 1 3052  
298 14 Dtool_nJyoqNIz 4 289 3053 0 14 Dtool_nJyoqNIz 3 4 this 3 3115  1 n 1 3052  5 state 1 3066  
299 14 Dtool_nJyoA4ql 4 290 3053 0 14 Dtool_nJyoA4ql 3 4 this 3 3115  4 geom 1 3121  5 state 1 3066  
300 14 Dtool_nJyog1uL 4 290 3053 0 14 Dtool_nJyog1uL 2 4 this 3 3115  4 geom 1 3121  
301 14 Dtool_nJyo06du 4 291 3053 0 14 Dtool_nJyo06du 2 4 this 3 3115  5 other 1 3116  
302 14 Dtool_nJyoOrgw 4 292 3053 0 14 Dtool_nJyoOrgw 3 4 this 3 3115  1 n 1 3052  4 geom 1 3121  
303 14 Dtool_nJyoV9b7 4 293 3053 0 14 Dtool_nJyoV9b7 2 4 this 3 3115  1 n 1 3052  
304 14 Dtool_nJyo_NLA 4 294 3053 0 14 Dtool_nJyo_NLA 1 4 this 3 3115  
305 14 Dtool_nJyos0De 6 295 3029 0 14 Dtool_nJyos0De 1 4 this 3 3116  
306 14 Dtool_nJyoUXJN 4 296 3053 0 14 Dtool_nJyoUXJN 1 4 this 3 3115  
307 14 Dtool_nJyoWbSk 4 297 3053 0 14 Dtool_nJyoWbSk 3 4 this 3 3116  3 out 1 3054  12 indent_level 1 3052  
308 14 Dtool_nJyoSkiE 4 298 3053 0 14 Dtool_nJyoSkiE 3 4 this 3 3116  3 out 1 3054  12 indent_level 1 3052  
309 14 Dtool_nJyolm7A 7 299 3107 0 14 Dtool_nJyolm7A 0 
310 14 Dtool_nJyonVK5 7 300 3057 0 14 Dtool_nJyonVK5 0 
311 14 Dtool_nJyoOU8w 7 304 3101 1807 14 Dtool_nJyoOU8w 1 4 this 3 3111  
312 14 Dtool_nJyolF_a 6 305 3124 0 14 Dtool_nJyolF_a 1 4 this 3 3122  
313 14 Dtool_nJyo7_hL 4 306 3053 0 14 Dtool_nJyo7_hL 2 4 this 3 3111  5 color 1 3124  
314 14 Dtool_nJyotH9b 4 307 3053 0 14 Dtool_nJyotH9b 2 4 this 3 3111  8 priority 1 3052  
315 14 Dtool_nJyo07Qw 6 308 3052 0 14 Dtool_nJyo07Qw 1 4 this 3 3122  
316 14 Dtool_nJyoaBVn 6 309 3052 0 14 Dtool_nJyoaBVn 1 4 this 3 3122  
317 14 Dtool_nJyopidT 7 310 3057 0 14 Dtool_nJyopidT 0 
318 14 Dtool_nJyoqIAk 6 302 3114 0 14 Dtool_nJyoqIAk 1 4 this 3 3111  
319 14 Dtool_nJyoNkgn 4 316 3053 0 14 Dtool_nJyoNkgn 2 4 this 3 3127  3 out 1 3054  
320 14 Dtool_nJyozDle 4 317 3053 0 14 Dtool_nJyozDle 3 4 this 3 3127  3 out 1 3054  12 indent_level 1 3052  
321 14 Dtool_nJyoSZ_n 4 317 3053 0 14 Dtool_nJyoSZ_n 2 4 this 3 3127  3 out 1 3054  
322 14 Dtool_nJyo6xST 7 318 3057 0 14 Dtool_nJyo6xST 0 
323 14 Dtool_nJyoC_aQ 7 312 3111 1908 14 Dtool_nJyoC_aQ 1 4 this 3 3129  
324 14 Dtool_nJyoI_qA 7 313 3129 1923 14 Dtool_nJyoI_qA 1 4 this 3 3111  
325 14 Dtool_nJyo0Doz 7 314 3101 1807 14 Dtool_nJyo0Doz 1 4 this 3 3129  
326 14 Dtool_nJyowkdW 7 315 3129 1923 14 Dtool_nJyowkdW 1 4 this 3 3101  
327 14 Dtool_nJyo5oKD 7 321 3130 1926 14 Dtool_nJyo5oKD 1 4 name 1 3100  
328 14 Dtool_nJyof_nS 7 322 3057 0 14 Dtool_nJyof_nS 0 
329 14 Dtool_nJyoPS8H 7 326 3058 0 14 Dtool_nJyoPS8H 1 4 mode 1 3131  
330 14 Dtool_nJyoUNQ4 6 327 3131 0 14 Dtool_nJyoUNQ4 1 4 this 3 3132  
331 14 Dtool_nJyo0ILz 6 328 3131 0 14 Dtool_nJyo0ILz 1 4 this 3 3132  
332 14 Dtool_nJyoodxW 6 329 3131 0 14 Dtool_nJyoodxW 1 4 this 3 3132  
333 14 Dtool_nJyoqzDi 7 330 3057 0 14 Dtool_nJyoqzDi 0 
334 14 Dtool_nJyoTfC3 7 333 3137 1941 14 Dtool_nJyoTfC3 2 4 name 1 3100  5 plane 1 3134  
335 14 Dtool_nJyoTudM 7 333 3137 1941 14 Dtool_nJyoTudM 1 4 name 1 3100  
336 14 Dtool_nJyoBb4d 4 334 3053 0 14 Dtool_nJyoBb4d 2 4 this 3 3137  5 plane 1 3134  
337 14 Dtool_nJyoPSiz 6 335 3134 0 14 Dtool_nJyoPSiz 1 4 this 3 3138  
338 14 Dtool_nJyoFb_8 4 336 3053 0 14 Dtool_nJyoFb_8 2 4 this 3 3137  9 viz_scale 1 3037  
339 14 Dtool_nJyoLHV4 6 337 3037 0 14 Dtool_nJyoLHV4 1 4 this 3 3138  
340 14 Dtool_nJyonpzN 4 338 3053 0 14 Dtool_nJyonpzN 2 4 this 3 3137  8 priority 1 3052  
341 14 Dtool_nJyohUDr 6 339 3052 0 14 Dtool_nJyohUDr 1 4 this 3 3138  
342 14 Dtool_nJyoajRh 7 340 3057 0 14 Dtool_nJyoajRh 0 
343 14 Dtool_nJyoMVvF 7 344 3058 0 14 Dtool_nJyoMVvF 1 4 mode 1 2925  
344 14 Dtool_nJyorW44 6 345 2925 0 14 Dtool_nJyorW44 1 4 this 3 3080  
345 14 Dtool_nJyo2mWN 7 346 3057 0 14 Dtool_nJyo2mWN 0 
346 14 Dtool_nJyodx9g 7 350 3140 2251 14 Dtool_nJyodx9g 0 
347 14 Dtool_nJyoJaJj 7 350 3140 2251 14 Dtool_nJyoJaJj 1 4 copy 1 3141  
348 14 Dtool_nJyonAhm 7 350 3140 2251 14 Dtool_nJyonAhm 2 6 parent 1 3141  10 child_node 1 3101  
349 14 Dtool_nJyoH4wM 7 350 3140 2251 14 Dtool_nJyoH4wM 1 4 node 1 3101  
350 14 Dtool_nJyoH_EQ 7 350 3140 2251 14 Dtool_nJyoH_EQ 1 13 top_node_name 1 3100  
351 14 Dtool_nJyooGNf 7 351 3140 2251 14 Dtool_nJyooGNf 1 4 node 1 3101  
352 14 Dtool_nJyorj60 6 352 3140 0 14 Dtool_nJyorj60 2 4 this 3 3140  4 copy 1 3141  
353 14 Dtool_nJyoH6GR 7 353 3140 2251 14 Dtool_nJyoH6GR 0 
354 14 Dtool_nJyocqkY 7 354 3140 2251 14 Dtool_nJyocqkY 0 
355 14 Dtool_nJyoKvgx 7 355 3140 2251 14 Dtool_nJyoKvgx 0 
356 14 Dtool_nJyoF4FI 4 356 3053 0 14 Dtool_nJyoF4FI 1 16 max_search_depth 1 3052  
357 14 Dtool_nJyojBwf 6 357 3052 0 14 Dtool_nJyojBwf 0 
358 14 Dtool_nJyo6BVO 6 358 3029 0 14 Dtool_nJyo6BVO 1 4 this 3 3141  
359 14 Dtool_nJyonHP3 6 359 3029 0 14 Dtool_nJyonHP3 1 4 this 3 3141  
360 14 Dtool_nJyoMbn0 6 360 3052 0 14 Dtool_nJyoMbn0 1 4 this 3 3141  
361 14 Dtool_nJyo5Kz9 7 361 3101 1807 14 Dtool_nJyo5Kz9 2 4 this 3 3141  5 index 1 3052  
362 14 Dtool_nJyo17Vc 6 362 2927 0 14 Dtool_nJyo17Vc 1 4 this 3 3141  
363 14 Dtool_nJyoCGOI 7 363 3101 1807 14 Dtool_nJyoCGOI 1 4 this 3 3141  
364 14 Dtool_nJyoHiQF 7 364 3140 2251 14 Dtool_nJyoHiQF 1 4 this 3 3141  
365 14 Dtool_nJyoC92U 7 365 3101 1807 14 Dtool_nJyoC92U 1 4 this 3 3141  
366 14 Dtool_nJyoumo_ 6 366 3052 0 14 Dtool_nJyoumo_ 1 4 this 3 3141  
367 14 Dtool_nJyoRlGb 6 367 3029 0 14 Dtool_nJyoRlGb 2 4 this 3 3141  5 other 1 3141  
368 14 Dtool_nJyoFCVk 6 368 3029 0 14 Dtool_nJyoFCVk 2 4 this 3 3141  5 other 1 3141  
369 14 Dtool_nJyoiMjg 7 369 3140 2251 14 Dtool_nJyoiMjg 2 4 this 3 3141  5 other 1 3141  
370 14 Dtool_nJyogb8V 7 370 3143 2678 14 Dtool_nJyogb8V 1 4 this 3 3141  
371 14 Dtool_nJyoSTCh 6 371 3052 0 14 Dtool_nJyoSTCh 1 4 this 3 3141  
372 14 Dtool_nJyoaFtX 7 372 3140 2251 14 Dtool_nJyoaFtX 2 4 this 3 3141  1 n 1 3052  
373 14 Dtool_nJyowedS 7 373 3143 2678 14 Dtool_nJyowedS 1 4 this 3 3141  
374 14 Dtool_nJyohc1w 6 374 3029 0 14 Dtool_nJyohc1w 1 4 this 3 3141  
375 14 Dtool_nJyoDcoI 7 375 3140 2251 14 Dtool_nJyoDcoI 1 4 this 3 3141  
376 14 Dtool_nJyoFeVI 6 376 3052 0 14 Dtool_nJyoFeVI 1 4 this 3 3141  
377 14 Dtool_nJyoO9_b 7 377 3140 2251 14 Dtool_nJyoO9_b 2 4 this 3 3141  4 path 1 3100  
378 14 Dtool_nJyoQFrr 7 378 3140 2251 14 Dtool_nJyoQFrr 2 4 this 3 3141  4 node 1 3101  
379 14 Dtool_nJyoupHP 7 379 3143 2678 14 Dtool_nJyoupHP 2 4 this 3 3141  4 path 1 3100  
380 14 Dtool_nJyoO6Sn 7 380 3143 2678 14 Dtool_nJyoO6Sn 2 4 this 3 3141  4 node 1 3101  
381 14 Dtool_nJyo4WHK 4 381 3053 0 14 Dtool_nJyo4WHK 3 4 this 3 3140  5 other 1 3141  4 sort 1 3052  
382 14 Dtool_nJyozsyP 4 381 3053 0 14 Dtool_nJyozsyP 2 4 this 3 3140  5 other 1 3141  
383 14 Dtool_nJyoln7s 4 382 3053 0 14 Dtool_nJyoln7s 3 4 this 3 3140  5 other 1 3141  4 sort 1 3052  
384 14 Dtool_nJyowFTN 4 382 3053 0 14 Dtool_nJyowFTN 2 4 this 3 3140  5 other 1 3141  
385 14 Dtool_nJyo2Mo6 7 383 3140 2251 14 Dtool_nJyo2Mo6 3 4 this 3 3141  5 other 1 3141  4 sort 1 3052  
386 14 Dtool_nJyoTlPD 7 383 3140 2251 14 Dtool_nJyoTlPD 2 4 this 3 3141  5 other 1 3141  
387 14 Dtool_nJyoHSFZ 7 384 3140 2251 14 Dtool_nJyoHSFZ 4 4 this 3 3141  5 other 1 3141  4 name 1 3100  4 sort 1 3052  
388 14 Dtool_nJyofsm_ 7 384 3140 2251 14 Dtool_nJyofsm_ 3 4 this 3 3141  5 other 1 3141  4 name 1 3100  
389 14 Dtool_nJyoxTlc 7 385 3140 2251 14 Dtool_nJyoxTlc 3 4 this 3 3141  5 other 1 3141  4 sort 1 3052  
390 14 Dtool_nJyotI_l 7 385 3140 2251 14 Dtool_nJyotI_l 2 4 this 3 3141  5 other 1 3141  
391 14 Dtool_nJyonUwe 7 386 3140 2251 14 Dtool_nJyonUwe 3 4 this 3 3141  4 node 1 3101  4 sort 1 3052  
392 14 Dtool_nJyo9EWP 7 386 3140 2251 14 Dtool_nJyo9EWP 2 4 this 3 3141  4 node 1 3101  
393 14 Dtool_nJyolodl 7 386 3140 2251 14 Dtool_nJyolodl 3 4 this 3 3141  4 name 1 3100  4 sort 1 3052  
394 14 Dtool_nJyo8rj7 7 386 3140 2251 14 Dtool_nJyo8rj7 2 4 this 3 3141  4 name 1 3100  
395 14 Dtool_nJyoliuR 4 387 3053 0 14 Dtool_nJyoliuR 1 4 this 3 3140  
396 14 Dtool_nJyogfzy 4 388 3053 0 14 Dtool_nJyogfzy 1 4 this 3 3140  
397 14 Dtool_nJyooCbM 4 389 3053 0 14 Dtool_nJyooCbM 2 4 this 3 3141  3 out 1 3054  
398 14 Dtool_nJyovoLL 4 390 3053 0 14 Dtool_nJyovoLL 1 4 this 3 3141  
399 14 Dtool_nJyo1zyE 4 390 3053 0 14 Dtool_nJyo1zyE 3 4 this 3 3141  3 out 1 3054  12 indent_level 1 3052  
400 14 Dtool_nJyou02a 4 390 3053 0 14 Dtool_nJyou02a 2 4 this 3 3141  3 out 1 3054  
401 14 Dtool_nJyoh7pG 4 391 3053 0 14 Dtool_nJyoh7pG 1 4 this 3 3141  
402 14 Dtool_nJyotiSZ 6 391 3052 0 14 Dtool_nJyotiSZ 3 4 this 3 3141  3 out 1 3054  12 indent_level 1 3052  
403 14 Dtool_nJyo4b6h 6 391 3052 0 14 Dtool_nJyo4b6h 2 4 this 3 3141  3 out 1 3054  
404 14 Dtool_nJyoMd52 7 392 3066 0 14 Dtool_nJyoMd52 1 4 this 3 3141  
405 14 Dtool_nJyou5LY 7 392 3066 0 14 Dtool_nJyou5LY 2 4 this 3 3141  5 other 1 3141  
406 14 Dtool_nJyoojNF 4 393 3053 0 14 Dtool_nJyoojNF 3 4 this 3 3140  5 other 1 3141  5 state 1 3066  
407 14 Dtool_nJyoYTbI 4 393 3053 0 14 Dtool_nJyoYTbI 2 4 this 3 3140  5 state 1 3066  
408 14 Dtool_nJyoxk0S 7 394 3066 0 14 Dtool_nJyoxk0S 1 4 this 3 3141  
409 14 Dtool_nJyo_hqK 4 395 3053 0 14 Dtool_nJyo_hqK 3 4 this 3 3140  6 attrib 1 3058  8 priority 1 3052  
410 14 Dtool_nJyosv7c 4 395 3053 0 14 Dtool_nJyosv7c 2 4 this 3 3140  6 attrib 1 3058  
411 14 Dtool_nJyoEHFA 7 396 3058 0 14 Dtool_nJyoEHFA 2 4 this 3 3141  4 type 1 3057  
412 14 Dtool_nJyo_GQo 6 397 3029 0 14 Dtool_nJyo_GQo 2 4 this 3 3141  4 type 1 3057  
413 14 Dtool_nJyo9ZOD 4 398 3053 0 14 Dtool_nJyo9ZOD 2 4 this 3 3140  4 type 1 3057  
414 14 Dtool_nJyoDDCe 4 399 3053 0 14 Dtool_nJyoDDCe 2 4 this 3 3140  6 effect 1 3096  
415 14 Dtool_nJyoYm6g 7 400 3096 0 14 Dtool_nJyoYm6g 2 4 this 3 3141  4 type 1 3057  
416 14 Dtool_nJyo_pJJ 6 401 3029 0 14 Dtool_nJyo_pJJ 2 4 this 3 3141  4 type 1 3057  
417 14 Dtool_nJyoEpe3 4 402 3053 0 14 Dtool_nJyoEpe3 2 4 this 3 3140  4 type 1 3057  
418 14 Dtool_nJyoPD2Q 4 403 3053 0 14 Dtool_nJyoPD2Q 2 4 this 3 3140  7 effects 1 3098  
419 14 Dtool_nJyouJzu 7 404 3098 0 14 Dtool_nJyouJzu 1 4 this 3 3141  
420 14 Dtool_nJyoZ8BC 4 405 3053 0 14 Dtool_nJyoZ8BC 1 4 this 3 3140  
421 14 Dtool_nJyobFez 7 406 3027 0 14 Dtool_nJyobFez 1 4 this 3 3141  
422 14 Dtool_nJyo25iF 7 406 3027 0 14 Dtool_nJyo25iF 2 4 this 3 3141  5 other 1 3141  
423 14 Dtool_nJyoH5x7 4 407 3053 0 14 Dtool_nJyoH5x7 1 4 this 3 3140  
424 14 Dtool_nJyoQssv 4 407 3053 0 14 Dtool_nJyoQssv 2 4 this 3 3140  5 other 1 3141  
425 14 Dtool_nJyoOC4G 4 408 3053 0 14 Dtool_nJyoOC4G 3 4 this 3 3140  5 other 1 3141  9 transform 1 3027  
426 14 Dtool_nJyoOl1c 4 408 3053 0 14 Dtool_nJyoOl1c 2 4 this 3 3140  9 transform 1 3027  
427 14 Dtool_nJyodCm_ 7 409 3027 0 14 Dtool_nJyodCm_ 1 4 this 3 3141  
428 14 Dtool_nJyoaXOe 7 410 3027 0 14 Dtool_nJyoaXOe 1 4 this 3 3141  
429 14 Dtool_nJyoIeYC 7 410 3027 0 14 Dtool_nJyoIeYC 2 4 this 3 3141  5 other 1 3141  
430 14 Dtool_nJyoKELE 4 411 3053 0 14 Dtool_nJyoKELE 3 4 this 3 3140  5 other 1 3141  9 transform 1 3027  
431 14 Dtool_nJyogmBw 4 411 3053 0 14 Dtool_nJyogmBw 2 4 this 3 3140  9 transform 1 3027  
432 14 Dtool_nJyoq_Pd 7 412 3027 0 14 Dtool_nJyoq_Pd 1 4 this 3 3141  
433 14 Dtool_nJyotVV9 4 413 3053 0 14 Dtool_nJyotVV9 2 4 this 3 3140  3 pos 1 3031  
434 14 Dtool_nJyowgot 4 413 3053 0 14 Dtool_nJyowgot 3 4 this 3 3140  5 other 1 3141  3 pos 1 3031  
435 14 Dtool_nJyo0iUk 4 413 3053 0 14 Dtool_nJyo0iUk 5 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  
436 14 Dtool_nJyoc4_K 4 413 3053 0 14 Dtool_nJyoc4_K 4 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  
437 14 Dtool_nJyoQez_ 4 414 3053 0 14 Dtool_nJyoQez_ 3 4 this 3 3140  5 other 1 3141  1 x 1 3037  
438 14 Dtool_nJyodaZh 4 414 3053 0 14 Dtool_nJyodaZh 2 4 this 3 3140  1 x 1 3037  
439 14 Dtool_nJyoyKzv 4 415 3053 0 14 Dtool_nJyoyKzv 3 4 this 3 3140  5 other 1 3141  1 y 1 3037  
440 14 Dtool_nJyo2gZR 4 415 3053 0 14 Dtool_nJyo2gZR 2 4 this 3 3140  1 y 1 3037  
441 14 Dtool_nJyoU5zf 4 416 3053 0 14 Dtool_nJyoU5zf 3 4 this 3 3140  5 other 1 3141  1 z 1 3037  
442 14 Dtool_nJyoYzZB 4 416 3053 0 14 Dtool_nJyoYzZB 2 4 this 3 3140  1 z 1 3037  
443 14 Dtool_nJyoiI31 4 417 3053 0 14 Dtool_nJyoiI31 2 4 this 3 3140  3 pos 1 3031  
444 14 Dtool_nJyoQamK 4 417 3053 0 14 Dtool_nJyoQamK 3 4 this 3 3140  5 other 1 3141  3 pos 1 3031  
445 14 Dtool_nJyojpk5 4 417 3053 0 14 Dtool_nJyojpk5 5 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  
446 14 Dtool_nJyoDckh 4 417 3053 0 14 Dtool_nJyoDckh 4 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  
447 14 Dtool_nJyomNMV 4 418 3053 0 14 Dtool_nJyomNMV 3 4 this 3 3140  5 other 1 3141  1 x 1 3037  
448 14 Dtool_nJyoFku5 4 418 3053 0 14 Dtool_nJyoFku5 2 4 this 3 3140  1 x 1 3037  
449 14 Dtool_nJyoWvfV 4 419 3053 0 14 Dtool_nJyoWvfV 3 4 this 3 3140  5 other 1 3141  1 y 1 3037  
450 14 Dtool_nJyoVKB6 4 419 3053 0 14 Dtool_nJyoVKB6 2 4 this 3 3140  1 y 1 3037  
451 14 Dtool_nJyoGBzV 4 420 3053 0 14 Dtool_nJyoGBzV 3 4 this 3 3140  5 other 1 3141  1 z 1 3037  
452 14 Dtool_nJyolrV6 4 420 3053 0 14 Dtool_nJyolrV6 2 4 this 3 3140  1 z 1 3037  
453 14 Dtool_nJyoOo4T 7 421 3144 0 14 Dtool_nJyoOo4T 1 4 this 3 3141  
454 14 Dtool_nJyoCfLu 7 421 3144 0 14 Dtool_nJyoCfLu 2 4 this 3 3141  5 other 1 3141  
455 14 Dtool_nJyo0lol 6 422 3037 0 14 Dtool_nJyo0lol 1 4 this 3 3141  
456 14 Dtool_nJyosQU6 6 422 3037 0 14 Dtool_nJyosQU6 2 4 this 3 3141  5 other 1 3141  
457 14 Dtool_nJyoaSpV 6 423 3037 0 14 Dtool_nJyoaSpV 1 4 this 3 3141  
458 14 Dtool_nJyoKEUq 6 423 3037 0 14 Dtool_nJyoKEUq 2 4 this 3 3141  5 other 1 3141  
459 14 Dtool_nJyoxcoF 6 424 3037 0 14 Dtool_nJyoxcoF 1 4 this 3 3141  
460 14 Dtool_nJyoo5Ua 6 424 3037 0 14 Dtool_nJyoo5Ua 2 4 this 3 3141  5 other 1 3141  
461 14 Dtool_nJyodM8H 7 425 3146 0 14 Dtool_nJyodM8H 1 4 this 3 3141  
462 14 Dtool_nJyojYBa 7 425 3146 0 14 Dtool_nJyojYBa 2 4 this 3 3141  5 other 1 3141  
463 14 Dtool_nJyoHdk4 4 426 3053 0 14 Dtool_nJyoHdk4 2 4 this 3 3140  3 hpr 1 3031  
464 14 Dtool_nJyoOo3o 4 426 3053 0 14 Dtool_nJyoOo3o 3 4 this 3 3140  5 other 1 3141  3 hpr 1 3031  
465 14 Dtool_nJyoablf 4 426 3053 0 14 Dtool_nJyoablf 5 4 this 3 3140  5 other 1 3141  1 h 1 3037  1 p 1 3037  1 r 1 3037  
466 14 Dtool_nJyoGhOG 4 426 3053 0 14 Dtool_nJyoGhOG 4 4 this 3 3140  1 h 1 3037  1 p 1 3037  1 r 1 3037  
467 14 Dtool_nJyo0Wu_ 4 427 3053 0 14 Dtool_nJyo0Wu_ 3 4 this 3 3140  5 other 1 3141  1 h 1 3037  
468 14 Dtool_nJyo5SUh 4 427 3053 0 14 Dtool_nJyo5SUh 2 4 this 3 3140  1 h 1 3037  
469 14 Dtool_nJyoCyw_ 4 428 3053 0 14 Dtool_nJyoCyw_ 3 4 this 3 3140  5 other 1 3141  1 p 1 3037  
470 14 Dtool_nJyov_Xh 4 428 3053 0 14 Dtool_nJyov_Xh 2 4 this 3 3140  1 p 1 3037  
471 14 Dtool_nJyoGVwf 4 429 3053 0 14 Dtool_nJyoGVwf 3 4 this 3 3140  5 other 1 3141  1 r 1 3037  
472 14 Dtool_nJyoqXXB 4 429 3053 0 14 Dtool_nJyoqXXB 2 4 this 3 3140  1 r 1 3037  
473 14 Dtool_nJyokhJP 7 430 3147 0 14 Dtool_nJyokhJP 1 4 this 3 3141  
474 14 Dtool_nJyoYUap 7 430 3147 0 14 Dtool_nJyoYUap 2 4 this 3 3141  5 other 1 3141  
475 14 Dtool_nJyoQtjl 6 431 3037 0 14 Dtool_nJyoQtjl 1 4 this 3 3141  
476 14 Dtool_nJyoAZP6 6 431 3037 0 14 Dtool_nJyoAZP6 2 4 this 3 3141  5 other 1 3141  
477 14 Dtool_nJyoCJll 6 432 3037 0 14 Dtool_nJyoCJll 1 4 this 3 3141  
478 14 Dtool_nJyoS1R6 6 432 3037 0 14 Dtool_nJyoS1R6 2 4 this 3 3141  5 other 1 3141  
479 14 Dtool_nJyoHwlF 6 433 3037 0 14 Dtool_nJyoHwlF 1 4 this 3 3141  
480 14 Dtool_nJyoWcRa 6 433 3037 0 14 Dtool_nJyoWcRa 2 4 this 3 3141  5 other 1 3141  
481 14 Dtool_nJyowJgI 4 434 3053 0 14 Dtool_nJyowJgI 2 4 this 3 3140  4 quat 1 3034  
482 14 Dtool_nJyoKI60 4 434 3053 0 14 Dtool_nJyoKI60 3 4 this 3 3140  5 other 1 3141  4 quat 1 3034  
483 14 Dtool_nJyowDPW 7 435 3148 0 14 Dtool_nJyowDPW 1 4 this 3 3141  
484 14 Dtool_nJyoCURf 7 435 3148 0 14 Dtool_nJyoCURf 2 4 this 3 3141  5 other 1 3141  
485 14 Dtool_nJyoZaRp 4 436 3053 0 14 Dtool_nJyoZaRp 2 4 this 3 3140  5 scale 1 3031  
486 14 Dtool_nJyopef1 4 436 3053 0 14 Dtool_nJyopef1 3 4 this 3 3140  5 other 1 3141  5 scale 1 3031  
487 14 Dtool_nJyo_9Ct 4 436 3053 0 14 Dtool_nJyo_9Ct 3 4 this 3 3140  5 other 1 3141  5 scale 1 3037  
488 14 Dtool_nJyoxK_k 4 436 3053 0 14 Dtool_nJyoxK_k 5 4 this 3 3140  5 other 1 3141  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
489 14 Dtool_nJyotTLn 4 436 3053 0 14 Dtool_nJyotTLn 2 4 this 3 3140  5 scale 1 3037  
490 14 Dtool_nJyoNsGl 4 436 3053 0 14 Dtool_nJyoNsGl 4 4 this 3 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
491 14 Dtool_nJyooi3_ 4 437 3053 0 14 Dtool_nJyooi3_ 3 4 this 3 3140  5 other 1 3141  2 sx 1 3037  
492 14 Dtool_nJyoEtIx 4 437 3053 0 14 Dtool_nJyoEtIx 2 4 this 3 3140  2 sx 1 3037  
493 14 Dtool_nJyogVB_ 4 438 3053 0 14 Dtool_nJyogVB_ 3 4 this 3 3140  5 other 1 3141  2 sy 1 3037  
494 14 Dtool_nJyocaRx 4 438 3053 0 14 Dtool_nJyocaRx 2 4 this 3 3140  2 sy 1 3037  
495 14 Dtool_nJyo4EL_ 4 439 3053 0 14 Dtool_nJyo4EL_ 3 4 this 3 3140  5 other 1 3141  2 sz 1 3037  
496 14 Dtool_nJyoULbx 4 439 3053 0 14 Dtool_nJyoULbx 2 4 this 3 3140  2 sz 1 3037  
497 14 Dtool_nJyo5djS 7 440 3147 0 14 Dtool_nJyo5djS 1 4 this 3 3141  
498 14 Dtool_nJyoam1z 7 440 3147 0 14 Dtool_nJyoam1z 2 4 this 3 3141  5 other 1 3141  
499 14 Dtool_nJyon63U 6 441 3037 0 14 Dtool_nJyon63U 1 4 this 3 3141  
500 14 Dtool_nJyoCXrr 6 441 3037 0 14 Dtool_nJyoCXrr 2 4 this 3 3141  5 other 1 3141  
501 14 Dtool_nJyovrBV 6 442 3037 0 14 Dtool_nJyovrBV 1 4 this 3 3141  
502 14 Dtool_nJyoKE1r 6 442 3037 0 14 Dtool_nJyoKE1r 2 4 this 3 3141  5 other 1 3141  
503 14 Dtool_nJyoXULV 6 443 3037 0 14 Dtool_nJyoXULV 1 4 this 3 3141  
504 14 Dtool_nJyoS18r 6 443 3037 0 14 Dtool_nJyoS18r 2 4 this 3 3141  5 other 1 3141  
505 14 Dtool_nJyosuKi 4 444 3053 0 14 Dtool_nJyosuKi 2 4 this 3 3140  5 shear 1 3031  
506 14 Dtool_nJyoiMYu 4 444 3053 0 14 Dtool_nJyoiMYu 3 4 this 3 3140  5 other 1 3141  5 shear 1 3031  
507 14 Dtool_nJyoOe2d 4 444 3053 0 14 Dtool_nJyoOe2d 5 4 this 3 3140  5 other 1 3141  4 shxy 1 3037  4 shxz 1 3037  4 shyz 1 3037  
508 14 Dtool_nJyofHAe 4 444 3053 0 14 Dtool_nJyofHAe 4 4 this 3 3140  4 shxy 1 3037  4 shxz 1 3037  4 shyz 1 3037  
509 14 Dtool_nJyoUJVV 4 445 3053 0 14 Dtool_nJyoUJVV 3 4 this 3 3140  5 other 1 3141  4 shxy 1 3037  
510 14 Dtool_nJyo7PKV 4 445 3053 0 14 Dtool_nJyo7PKV 2 4 this 3 3140  4 shxy 1 3037  
511 14 Dtool_nJyoaJjx 4 446 3053 0 14 Dtool_nJyoaJjx 3 4 this 3 3140  5 other 1 3141  4 shxz 1 3037  
512 14 Dtool_nJyolPYx 4 446 3053 0 14 Dtool_nJyolPYx 2 4 this 3 3140  4 shxz 1 3037  
513 14 Dtool_nJyoatc2 4 447 3053 0 14 Dtool_nJyoatc2 3 4 this 3 3140  5 other 1 3141  4 shyz 1 3037  
514 14 Dtool_nJyolrR2 4 447 3053 0 14 Dtool_nJyolrR2 2 4 this 3 3140  4 shyz 1 3037  
515 14 Dtool_nJyoyRcL 7 448 3147 0 14 Dtool_nJyoyRcL 1 4 this 3 3141  
516 14 Dtool_nJyoXxss 7 448 3147 0 14 Dtool_nJyoXxss 2 4 this 3 3141  5 other 1 3141  
517 14 Dtool_nJyo5jpx 6 449 3037 0 14 Dtool_nJyo5jpx 1 4 this 3 3141  
518 14 Dtool_nJyobLq6 6 449 3037 0 14 Dtool_nJyobLq6 2 4 this 3 3141  5 other 1 3141  
519 14 Dtool_nJyo8j3N 6 450 3037 0 14 Dtool_nJyo8j3N 1 4 this 3 3141  
520 14 Dtool_nJyoWL4W 6 450 3037 0 14 Dtool_nJyoWL4W 2 4 this 3 3141  5 other 1 3141  
521 14 Dtool_nJyo8PuS 6 451 3037 0 14 Dtool_nJyo8PuS 1 4 this 3 3141  
522 14 Dtool_nJyoWXwb 6 451 3037 0 14 Dtool_nJyoWXwb 2 4 this 3 3141  5 other 1 3141  
523 14 Dtool_nJyo_KIO 4 452 3053 0 14 Dtool_nJyo_KIO 3 4 this 3 3140  3 pos 1 3031  3 hpr 1 3031  
524 14 Dtool_nJyobgSC 4 452 3053 0 14 Dtool_nJyobgSC 4 4 this 3 3140  5 other 1 3141  3 pos 1 3031  3 hpr 1 3031  
525 14 Dtool_nJyohbI1 4 452 3053 0 14 Dtool_nJyohbI1 8 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  1 h 1 3037  1 p 1 3037  1 r 1 3037  
526 14 Dtool_nJyoFbxa 4 452 3053 0 14 Dtool_nJyoFbxa 7 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  1 h 1 3037  1 p 1 3037  1 r 1 3037  
527 14 Dtool_nJyoPEZ1 4 453 3053 0 14 Dtool_nJyoPEZ1 3 4 this 3 3140  3 pos 1 3031  4 quat 1 3034  
528 14 Dtool_nJyogdNI 4 453 3053 0 14 Dtool_nJyogdNI 4 4 this 3 3140  5 other 1 3141  3 pos 1 3031  4 quat 1 3034  
529 14 Dtool_nJyoeWuA 4 454 3053 0 14 Dtool_nJyoeWuA 3 4 this 3 3140  3 hpr 1 3031  5 scale 1 3031  
530 14 Dtool_nJyoTEr7 4 454 3053 0 14 Dtool_nJyoTEr7 4 4 this 3 3140  5 other 1 3141  3 hpr 1 3031  5 scale 1 3031  
531 14 Dtool_nJyo4kfC 4 454 3053 0 14 Dtool_nJyo4kfC 8 4 this 3 3140  5 other 1 3141  1 h 1 3037  1 p 1 3037  1 r 1 3037  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
532 14 Dtool_nJyoWIYi 4 454 3053 0 14 Dtool_nJyoWIYi 7 4 this 3 3140  1 h 1 3037  1 p 1 3037  1 r 1 3037  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
533 14 Dtool_nJyoxukU 4 455 3053 0 14 Dtool_nJyoxukU 3 4 this 3 3140  4 quat 1 3034  5 scale 1 3031  
534 14 Dtool_nJyo9poi 4 455 3053 0 14 Dtool_nJyo9poi 4 4 this 3 3140  5 other 1 3141  4 quat 1 3034  5 scale 1 3031  
535 14 Dtool_nJyoWLWQ 4 456 3053 0 14 Dtool_nJyoWLWQ 4 4 this 3 3140  3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  
536 14 Dtool_nJyo6XbK 4 456 3053 0 14 Dtool_nJyo6XbK 5 4 this 3 3140  5 other 1 3141  3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  
537 14 Dtool_nJyoVHTJ 4 456 3053 0 14 Dtool_nJyoVHTJ 11 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  1 h 1 3037  1 p 1 3037  1 r 1 3037  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
538 14 Dtool_nJyoh3Bw 4 456 3053 0 14 Dtool_nJyoh3Bw 10 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  1 h 1 3037  1 p 1 3037  1 r 1 3037  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  
539 14 Dtool_nJyolcNQ 4 457 3053 0 14 Dtool_nJyolcNQ 4 4 this 3 3140  3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  
540 14 Dtool_nJyoAbZX 4 457 3053 0 14 Dtool_nJyoAbZX 5 4 this 3 3140  5 other 1 3141  3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  
541 14 Dtool_nJyo9p1n 4 458 3053 0 14 Dtool_nJyo9p1n 5 4 this 3 3140  3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  5 shear 1 3031  
542 14 Dtool_nJyoyreF 4 458 3053 0 14 Dtool_nJyoyreF 6 4 this 3 3140  5 other 1 3141  3 pos 1 3031  3 hpr 1 3031  5 scale 1 3031  5 shear 1 3031  
543 14 Dtool_nJyoFwaK 4 459 3053 0 14 Dtool_nJyoFwaK 5 4 this 3 3140  3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  5 shear 1 3031  
544 14 Dtool_nJyoSPDh 4 459 3053 0 14 Dtool_nJyoSPDh 6 4 this 3 3140  5 other 1 3141  3 pos 1 3031  4 quat 1 3034  5 scale 1 3031  5 shear 1 3031  
545 14 Dtool_nJyo6Rbe 4 460 3053 0 14 Dtool_nJyo6Rbe 2 4 this 3 3140  3 mat 1 3038  
546 14 Dtool_nJyoe6vZ 4 460 3053 0 14 Dtool_nJyoe6vZ 3 4 this 3 3140  5 other 1 3141  3 mat 1 3038  
547 14 Dtool_nJyoZ8BU 4 461 3053 0 14 Dtool_nJyoZ8BU 1 4 this 3 3140  
548 14 Dtool_nJyouM1u 6 462 3029 0 14 Dtool_nJyouM1u 1 4 this 3 3141  
549 14 Dtool_nJyoIMoG 6 463 3038 0 14 Dtool_nJyoIMoG 1 4 this 3 3141  
550 14 Dtool_nJyo_p5g 7 463 3149 0 14 Dtool_nJyo_p5g 2 4 this 3 3141  5 other 1 3141  
551 14 Dtool_nJyovdrT 4 464 3053 0 14 Dtool_nJyovdrT 3 4 this 3 3140  5 point 1 3047  2 up 1 3150  
552 14 Dtool_nJyoOO_M 4 464 3053 0 14 Dtool_nJyoOO_M 2 4 this 3 3140  5 point 1 3047  
553 14 Dtool_nJyoCkNd 4 464 3053 0 14 Dtool_nJyoCkNd 4 4 this 3 3140  5 other 1 3141  5 point 1 3047  2 up 1 3150  
554 14 Dtool_nJyosdPC 4 464 3053 0 14 Dtool_nJyosdPC 3 4 this 3 3140  5 other 1 3141  5 point 1 3047  
555 14 Dtool_nJyo62Ls 4 464 3053 0 14 Dtool_nJyo62Ls 2 4 this 3 3140  5 other 1 3141  
556 14 Dtool_nJyoooUy 4 464 3053 0 14 Dtool_nJyoooUy 5 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  
557 14 Dtool_nJyoTR_Y 4 464 3053 0 14 Dtool_nJyoTR_Y 4 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  
558 14 Dtool_nJyo45wG 4 465 3053 0 14 Dtool_nJyo45wG 3 4 this 3 3140  5 point 1 3047  2 up 1 3150  
559 14 Dtool_nJyoK5su 4 465 3053 0 14 Dtool_nJyoK5su 2 4 this 3 3140  5 point 1 3047  
560 14 Dtool_nJyo_0_3 4 465 3053 0 14 Dtool_nJyo_0_3 4 4 this 3 3140  5 other 1 3141  5 point 1 3047  2 up 1 3150  
561 14 Dtool_nJyo1SnX 4 465 3053 0 14 Dtool_nJyo1SnX 3 4 this 3 3140  5 other 1 3141  5 point 1 3047  
562 14 Dtool_nJyowIWV 4 465 3053 0 14 Dtool_nJyowIWV 2 4 this 3 3140  5 other 1 3141  
563 14 Dtool_nJyozOob 4 465 3053 0 14 Dtool_nJyozOob 5 4 this 3 3140  5 other 1 3141  1 x 1 3037  1 y 1 3037  1 z 1 3037  
564 14 Dtool_nJyodJov 4 465 3053 0 14 Dtool_nJyodJov 4 4 this 3 3140  1 x 1 3037  1 y 1 3037  1 z 1 3037  
565 14 Dtool_nJyoOttf 7 466 3144 0 14 Dtool_nJyoOttf 3 4 this 3 3141  5 other 1 3141  5 point 1 3031  
566 14 Dtool_nJyojeSO 7 467 3146 0 14 Dtool_nJyojeSO 3 4 this 3 3141  5 other 1 3141  3 vec 1 3031  
567 14 Dtool_nJyogctf 6 468 3037 0 14 Dtool_nJyogctf 2 4 this 3 3141  5 other 1 3141  
568 14 Dtool_nJyoadvm 4 469 3053 0 14 Dtool_nJyoadvm 3 4 this 3 3140  5 color 1 3124  8 priority 1 3052  
569 14 Dtool_nJyoV3Zs 4 469 3053 0 14 Dtool_nJyoV3Zs 2 4 this 3 3140  5 color 1 3124  
570 14 Dtool_nJyo066r 4 469 3053 0 14 Dtool_nJyo066r 6 4 this 3 3140  1 r 1 3037  1 g 1 3037  1 b 1 3037  1 a 1 3037  8 priority 1 3052  
571 14 Dtool_nJyoxcaQ 4 469 3053 0 14 Dtool_nJyoxcaQ 5 4 this 3 3140  1 r 1 3037  1 g 1 3037  1 b 1 3037  1 a 1 3037  
572 14 Dtool_nJyoQ4OM 4 469 3053 0 14 Dtool_nJyoQ4OM 4 4 this 3 3140  1 r 1 3037  1 g 1 3037  1 b 1 3037  
573 14 Dtool_nJyow27z 4 470 3053 0 14 Dtool_nJyow27z 2 4 this 3 3140  8 priority 1 3052  
574 14 Dtool_nJyoE1gC 4 470 3053 0 14 Dtool_nJyoE1gC 1 4 this 3 3140  
575 14 Dtool_nJyo1mr9 4 471 3053 0 14 Dtool_nJyo1mr9 1 4 this 3 3140  
576 14 Dtool_nJyobz4h 6 472 3029 0 14 Dtool_nJyobz4h 1 4 this 3 3141  
577 14 Dtool_nJyokzr5 7 473 3152 0 14 Dtool_nJyokzr5 1 4 this 3 3141  
578 14 Dtool_nJyoh9q2 6 474 3029 0 14 Dtool_nJyoh9q2 1 4 this 3 3141  
579 14 Dtool_nJyoNGLo 4 475 3053 0 14 Dtool_nJyoNGLo 1 4 this 3 3140  
580 14 Dtool_nJyo5CtZ 4 476 3053 0 14 Dtool_nJyo5CtZ 3 4 this 3 3140  5 scale 1 3124  8 priority 1 3052  
581 14 Dtool_nJyoiG1C 4 476 3053 0 14 Dtool_nJyoiG1C 2 4 this 3 3140  5 scale 1 3124  
582 14 Dtool_nJyoO7kn 4 476 3053 0 14 Dtool_nJyoO7kn 6 4 this 3 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 sa 1 3037  8 priority 1 3052  
583 14 Dtool_nJyoUFGH 4 476 3053 0 14 Dtool_nJyoUFGH 5 4 this 3 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 sa 1 3037  
584 14 Dtool_nJyohzGl 4 477 3053 0 14 Dtool_nJyohzGl 2 4 this 3 3140  8 priority 1 3052  
585 14 Dtool_nJyoPZ4L 4 477 3053 0 14 Dtool_nJyoPZ4L 1 4 this 3 3140  
586 14 Dtool_nJyor8w8 4 478 3053 0 14 Dtool_nJyor8w8 3 4 this 3 3140  5 scale 1 3037  8 priority 1 3052  
587 14 Dtool_nJyou4Ux 4 478 3053 0 14 Dtool_nJyou4Ux 2 4 this 3 3140  5 scale 1 3037  
588 14 Dtool_nJyoFCj2 4 479 3053 0 14 Dtool_nJyoFCj2 3 4 this 3 3140  5 scale 1 3037  8 priority 1 3052  
589 14 Dtool_nJyoWf2B 4 479 3053 0 14 Dtool_nJyoWf2B 2 4 this 3 3140  5 scale 1 3037  
590 14 Dtool_nJyoUANw 4 480 3053 0 14 Dtool_nJyoUANw 2 4 this 3 3140  2 sr 1 3037  
591 14 Dtool_nJyoMqiu 4 481 3053 0 14 Dtool_nJyoMqiu 2 4 this 3 3140  2 sg 1 3037  
592 14 Dtool_nJyoU_xt 4 482 3053 0 14 Dtool_nJyoU_xt 2 4 this 3 3140  2 sb 1 3037  
593 14 Dtool_nJyocBnt 4 483 3053 0 14 Dtool_nJyocBnt 2 4 this 3 3140  2 sa 1 3037  
594 14 Dtool_nJyoH9dO 6 484 3124 0 14 Dtool_nJyoH9dO 1 4 this 3 3141  
595 14 Dtool_nJyoXd9T 6 485 3037 0 14 Dtool_nJyoXd9T 1 4 this 3 3141  
596 14 Dtool_nJyo_7RS 6 486 3037 0 14 Dtool_nJyo_7RS 1 4 this 3 3141  
597 14 Dtool_nJyoXPhR 6 487 3037 0 14 Dtool_nJyoXPhR 1 4 this 3 3141  
598 14 Dtool_nJyoveXR 6 488 3037 0 14 Dtool_nJyoveXR 1 4 this 3 3141  
599 14 Dtool_nJyoOmzA 4 489 3053 0 14 Dtool_nJyoOmzA 3 4 this 3 3140  5 light 1 3141  8 priority 1 3052  
600 14 Dtool_nJyoVcVg 4 489 3053 0 14 Dtool_nJyoVcVg 2 4 this 3 3140  5 light 1 3141  
601 14 Dtool_nJyomGGU 4 490 3053 0 14 Dtool_nJyomGGU 3 4 this 3 3140  5 light 1 3141  8 priority 1 3052  
602 14 Dtool_nJyos0Fm 4 490 3053 0 14 Dtool_nJyos0Fm 2 4 this 3 3140  5 light 1 3141  
603 14 Dtool_nJyo3hHT 4 490 3053 0 14 Dtool_nJyo3hHT 2 4 this 3 3140  8 priority 1 3052  
604 14 Dtool_nJyo8iuh 4 490 3053 0 14 Dtool_nJyo8iuh 1 4 this 3 3140  
605 14 Dtool_nJyo_y39 4 491 3053 0 14 Dtool_nJyo_y39 1 4 this 3 3140  
606 14 Dtool_nJyoF_28 4 491 3053 0 14 Dtool_nJyoF_28 2 4 this 3 3140  5 light 1 3141  
607 14 Dtool_nJyoLCWi 6 492 3029 0 14 Dtool_nJyoLCWi 2 4 this 3 3141  5 light 1 3141  
608 14 Dtool_nJyoKg80 6 493 3029 0 14 Dtool_nJyoKg80 1 4 this 3 3141  
609 14 Dtool_nJyo3UBH 6 493 3029 0 14 Dtool_nJyo3UBH 2 4 this 3 3141  5 light 1 3141  
610 14 Dtool_nJyopYL4 4 494 3053 0 14 Dtool_nJyopYL4 3 4 this 3 3140  10 clip_plane 1 3141  8 priority 1 3052  
611 14 Dtool_nJyo1XO3 4 494 3053 0 14 Dtool_nJyo1XO3 2 4 this 3 3140  10 clip_plane 1 3141  
612 14 Dtool_nJyo6bye 4 495 3053 0 14 Dtool_nJyo6bye 3 4 this 3 3140  10 clip_plane 1 3141  8 priority 1 3052  
613 14 Dtool_nJyo2qvC 4 495 3053 0 14 Dtool_nJyo2qvC 2 4 this 3 3140  10 clip_plane 1 3141  
614 14 Dtool_nJyo28yc 4 495 3053 0 14 Dtool_nJyo28yc 2 4 this 3 3140  8 priority 1 3052  
615 14 Dtool_nJyocSB6 4 495 3053 0 14 Dtool_nJyocSB6 1 4 this 3 3140  
616 14 Dtool_nJyoteSh 4 496 3053 0 14 Dtool_nJyoteSh 1 4 this 3 3140  
617 14 Dtool_nJyoBURf 4 496 3053 0 14 Dtool_nJyoBURf 2 4 this 3 3140  10 clip_plane 1 3141  
618 14 Dtool_nJyoUt_T 6 497 3029 0 14 Dtool_nJyoUt_T 2 4 this 3 3141  10 clip_plane 1 3141  
619 14 Dtool_nJyovnN5 6 498 3029 0 14 Dtool_nJyovnN5 1 4 this 3 3141  
620 14 Dtool_nJyoZ8Wd 6 498 3029 0 14 Dtool_nJyoZ8Wd 2 4 this 3 3141  10 clip_plane 1 3141  
621 14 Dtool_nJyoxqDK 4 499 3053 0 14 Dtool_nJyoxqDK 4 4 this 3 3140  8 bin_name 1 3100  10 draw_order 1 3052  8 priority 1 3052  
622 14 Dtool_nJyoZBGG 4 499 3053 0 14 Dtool_nJyoZBGG 3 4 this 3 3140  8 bin_name 1 3100  10 draw_order 1 3052  
623 14 Dtool_nJyobzEW 4 500 3053 0 14 Dtool_nJyobzEW 1 4 this 3 3140  
624 14 Dtool_nJyoTmsC 6 501 3029 0 14 Dtool_nJyoTmsC 1 4 this 3 3141  
625 14 Dtool_nJyoLAFg 6 502 3100 0 14 Dtool_nJyoLAFg 1 4 this 3 3141  
626 14 Dtool_nJyo2Nw9 6 503 3052 0 14 Dtool_nJyo2Nw9 1 4 this 3 3141  
627 14 Dtool_nJyoFEvx 4 504 3053 0 14 Dtool_nJyoFEvx 3 4 this 3 3140  3 tex 1 3153  8 priority 1 3052  
628 14 Dtool_nJyochTm 4 504 3053 0 14 Dtool_nJyochTm 2 4 this 3 3140  3 tex 1 3153  
629 14 Dtool_nJyogM3e 4 504 3053 0 14 Dtool_nJyogM3e 4 4 this 3 3140  5 stage 1 3062  3 tex 1 3153  8 priority 1 3052  
630 14 Dtool_nJyotHou 4 504 3053 0 14 Dtool_nJyotHou 3 4 this 3 3140  5 stage 1 3062  3 tex 1 3153  
631 14 Dtool_nJyoHq1d 4 505 3053 0 14 Dtool_nJyoHq1d 3 4 this 3 3140  5 stage 1 3062  8 priority 1 3052  
632 14 Dtool_nJyowSb0 4 505 3053 0 14 Dtool_nJyowSb0 2 4 this 3 3140  5 stage 1 3062  
633 14 Dtool_nJyow4bU 4 505 3053 0 14 Dtool_nJyow4bU 2 4 this 3 3140  8 priority 1 3052  
634 14 Dtool_nJyo_4vA 4 505 3053 0 14 Dtool_nJyo_4vA 1 4 this 3 3140  
635 14 Dtool_nJyoNNBp 4 506 3053 0 14 Dtool_nJyoNNBp 1 4 this 3 3140  
636 14 Dtool_nJyocr3x 4 506 3053 0 14 Dtool_nJyocr3x 2 4 this 3 3140  5 stage 1 3062  
637 14 Dtool_nJyoqlwf 6 507 3029 0 14 Dtool_nJyoqlwf 1 4 this 3 3141  
638 14 Dtool_nJyoCNaQ 6 507 3029 0 14 Dtool_nJyoCNaQ 2 4 this 3 3141  5 stage 1 3062  
639 14 Dtool_nJyoxE64 6 508 3029 0 14 Dtool_nJyoxE64 1 4 this 3 3141  
640 14 Dtool_nJyoL45P 6 508 3029 0 14 Dtool_nJyoL45P 2 4 this 3 3141  5 stage 1 3062  
641 14 Dtool_nJyoPll3 6 509 3153 0 14 Dtool_nJyoPll3 1 4 this 3 3141  
642 14 Dtool_nJyohMNo 6 509 3153 0 14 Dtool_nJyohMNo 2 4 this 3 3141  5 stage 1 3062  
643 14 Dtool_nJyoR_pQ 4 510 3053 0 14 Dtool_nJyoR_pQ 3 4 this 3 3140  3 sha 1 3155  8 priority 1 3052  
644 14 Dtool_nJyoqe1A 4 510 3053 0 14 Dtool_nJyoqe1A 2 4 this 3 3140  3 sha 1 3155  
645 14 Dtool_nJyoaMRX 4 511 3053 0 14 Dtool_nJyoaMRX 2 4 this 3 3140  8 priority 1 3052  
646 14 Dtool_nJyozipq 4 511 3053 0 14 Dtool_nJyozipq 1 4 this 3 3140  
647 14 Dtool_nJyoWwTt 4 512 3053 0 14 Dtool_nJyoWwTt 1 4 this 3 3140  
648 14 Dtool_nJyo59pe 4 513 3053 0 14 Dtool_nJyo59pe 4 4 this 3 3140  2 id 1 3156  1 v 1 3158  8 priority 1 3052  
649 14 Dtool_nJyodEK_ 4 513 3053 0 14 Dtool_nJyodEK_ 3 4 this 3 3140  2 id 1 3156  1 v 1 3158  
650 14 Dtool_nJyoRf3C 4 513 3053 0 14 Dtool_nJyoRf3C 4 4 this 3 3140  2 id 1 3156  2 np 1 3141  8 priority 1 3052  
651 14 Dtool_nJyo8e3L 4 513 3053 0 14 Dtool_nJyo8e3L 3 4 this 3 3140  2 id 1 3156  2 np 1 3141  
652 14 Dtool_nJyo6LVn 4 513 3053 0 14 Dtool_nJyo6LVn 4 4 this 3 3140  2 id 1 3156  3 tex 1 3153  8 priority 1 3052  
653 14 Dtool_nJyodp1G 4 513 3053 0 14 Dtool_nJyodp1G 3 4 this 3 3140  2 id 1 3156  3 tex 1 3153  
654 14 Dtool_nJyoJYfv 4 513 3053 0 14 Dtool_nJyoJYfv 7 4 this 3 3140  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  8 priority 1 3052  
655 14 Dtool_nJyoArVy 4 513 3053 0 14 Dtool_nJyoArVy 6 4 this 3 3140  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  
656 14 Dtool_nJyofnoG 4 513 3053 0 14 Dtool_nJyofnoG 5 4 this 3 3140  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  
657 14 Dtool_nJyo_OeN 4 513 3053 0 14 Dtool_nJyo_OeN 4 4 this 3 3140  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  
658 14 Dtool_nJyoeaWg 4 513 3053 0 14 Dtool_nJyoeaWg 3 4 this 3 3140  2 id 1 3156  2 n1 1 3161  
659 14 Dtool_nJyoMBp0 4 513 3053 0 14 Dtool_nJyoMBp0 2 4 this 3 3140  2 id 1 3156  
660 14 Dtool_nJyo4rQe 4 513 3053 0 14 Dtool_nJyo4rQe 2 4 this 3 3140  3 inp 1 3162  
661 14 Dtool_nJyowllk 4 513 3053 0 14 Dtool_nJyowllk 4 4 this 3 3140  2 id 1 3100  1 v 1 3158  8 priority 1 3052  
662 14 Dtool_nJyoCd8E 4 513 3053 0 14 Dtool_nJyoCd8E 3 4 this 3 3140  2 id 1 3100  1 v 1 3158  
663 14 Dtool_nJyoZ40x 4 513 3053 0 14 Dtool_nJyoZ40x 4 4 this 3 3140  2 id 1 3100  2 np 1 3141  8 priority 1 3052  
664 14 Dtool_nJyos13w 4 513 3053 0 14 Dtool_nJyos13w 3 4 this 3 3140  2 id 1 3100  2 np 1 3141  
665 14 Dtool_nJyoxy3P 4 513 3053 0 14 Dtool_nJyoxy3P 4 4 this 3 3140  2 id 1 3100  3 tex 1 3153  8 priority 1 3052  
666 14 Dtool_nJyoLvPw 4 513 3053 0 14 Dtool_nJyoLvPw 3 4 this 3 3140  2 id 1 3100  3 tex 1 3153  
667 14 Dtool_nJyom7yf 4 513 3053 0 14 Dtool_nJyom7yf 7 4 this 3 3140  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  8 priority 1 3052  
668 14 Dtool_nJyo6xXU 4 513 3053 0 14 Dtool_nJyo6xXU 6 4 this 3 3140  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  
669 14 Dtool_nJyomMEm 4 513 3053 0 14 Dtool_nJyomMEm 5 4 this 3 3140  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  
670 14 Dtool_nJyoT_ya 4 513 3053 0 14 Dtool_nJyoT_ya 4 4 this 3 3140  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  
671 14 Dtool_nJyo5n6P 4 513 3053 0 14 Dtool_nJyo5n6P 3 4 this 3 3140  2 id 1 3100  2 n1 1 3161  
672 14 Dtool_nJyoegoh 4 513 3053 0 14 Dtool_nJyoegoh 2 4 this 3 3140  2 id 1 3100  
673 14 Dtool_nJyomA_3 4 514 3053 0 14 Dtool_nJyomA_3 2 4 this 3 3140  2 id 1 3156  
674 14 Dtool_nJyoH2LE 4 514 3053 0 14 Dtool_nJyoH2LE 2 4 this 3 3140  2 id 1 3100  
675 14 Dtool_nJyoXRer 6 515 3164 0 14 Dtool_nJyoXRer 1 4 this 3 3141  
676 14 Dtool_nJyoBy46 6 516 3162 0 14 Dtool_nJyoBy46 2 4 this 3 3141  2 id 1 3156  
677 14 Dtool_nJyosHFu 6 516 3162 0 14 Dtool_nJyosHFu 2 4 this 3 3141  2 id 1 3100  
678 14 Dtool_nJyoM5dH 4 517 3053 0 14 Dtool_nJyoM5dH 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  9 transform 1 3027  
679 14 Dtool_nJyo7rVh 4 517 3053 0 14 Dtool_nJyo7rVh 3 4 this 3 3140  5 stage 1 3062  9 transform 1 3027  
680 14 Dtool_nJyoPvbV 4 518 3053 0 14 Dtool_nJyoPvbV 1 4 this 3 3140  
681 14 Dtool_nJyo7hmM 4 518 3053 0 14 Dtool_nJyo7hmM 2 4 this 3 3140  5 stage 1 3062  
682 14 Dtool_nJyoW20G 6 519 3029 0 14 Dtool_nJyoW20G 2 4 this 3 3141  5 stage 1 3062  
683 14 Dtool_nJyokXI_ 7 520 3027 0 14 Dtool_nJyokXI_ 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
684 14 Dtool_nJyoz2ne 7 520 3027 0 14 Dtool_nJyoz2ne 2 4 this 3 3141  5 stage 1 3062  
685 14 Dtool_nJyodjnO 4 521 3053 0 14 Dtool_nJyodjnO 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  2 uv 1 3041  
686 14 Dtool_nJyowlj_ 4 521 3053 0 14 Dtool_nJyowlj_ 5 4 this 3 3140  5 other 1 3141  5 stage 1 3062  1 u 1 3037  1 v 1 3037  
687 14 Dtool_nJyoD4GX 4 521 3053 0 14 Dtool_nJyoD4GX 3 4 this 3 3140  5 stage 1 3062  2 uv 1 3041  
688 14 Dtool_nJyoO2Fz 4 521 3053 0 14 Dtool_nJyoO2Fz 4 4 this 3 3140  5 stage 1 3062  1 u 1 3037  1 v 1 3037  
689 14 Dtool_nJyoa1iX 4 522 3053 0 14 Dtool_nJyoa1iX 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  1 r 1 3037  
690 14 Dtool_nJyoTo9d 4 522 3053 0 14 Dtool_nJyoTo9d 3 4 this 3 3140  5 stage 1 3062  1 r 1 3037  
691 14 Dtool_nJyoKMt1 4 523 3053 0 14 Dtool_nJyoKMt1 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  5 scale 1 3041  
692 14 Dtool_nJyouHy1 4 523 3053 0 14 Dtool_nJyouHy1 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  5 scale 1 3031  
693 14 Dtool_nJyor_zt 4 523 3053 0 14 Dtool_nJyor_zt 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  5 scale 1 3037  
694 14 Dtool_nJyom0Lh 4 523 3053 0 14 Dtool_nJyom0Lh 5 4 this 3 3140  5 other 1 3141  5 stage 1 3062  2 su 1 3037  2 sv 1 3037  
695 14 Dtool_nJyocmSt 4 523 3053 0 14 Dtool_nJyocmSt 6 4 this 3 3140  5 other 1 3141  5 stage 1 3062  2 su 1 3037  2 sv 1 3037  2 sw 1 3037  
696 14 Dtool_nJyoNnAk 4 523 3053 0 14 Dtool_nJyoNnAk 3 4 this 3 3140  5 stage 1 3062  5 scale 1 3041  
697 14 Dtool_nJyo0xBk 4 523 3053 0 14 Dtool_nJyo0xBk 3 4 this 3 3140  5 stage 1 3062  5 scale 1 3031  
698 14 Dtool_nJyoPODC 4 523 3053 0 14 Dtool_nJyoPODC 3 4 this 3 3140  5 stage 1 3062  5 scale 1 3037  
699 14 Dtool_nJyosV2O 4 523 3053 0 14 Dtool_nJyosV2O 4 4 this 3 3140  5 stage 1 3062  2 su 1 3037  2 sv 1 3037  
700 14 Dtool_nJyoge4h 4 523 3053 0 14 Dtool_nJyoge4h 5 4 this 3 3140  5 stage 1 3062  2 su 1 3037  2 sv 1 3037  2 sw 1 3037  
701 14 Dtool_nJyotMN_ 7 524 3050 0 14 Dtool_nJyotMN_ 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
702 14 Dtool_nJyoOSVy 7 524 3050 0 14 Dtool_nJyoOSVy 2 4 this 3 3141  5 stage 1 3062  
703 14 Dtool_nJyogsWE 6 525 3037 0 14 Dtool_nJyogsWE 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
704 14 Dtool_nJyoF4f4 6 525 3037 0 14 Dtool_nJyoF4f4 2 4 this 3 3141  5 stage 1 3062  
705 14 Dtool_nJyohlUo 7 526 3050 0 14 Dtool_nJyohlUo 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
706 14 Dtool_nJyo6J_f 7 526 3050 0 14 Dtool_nJyo6J_f 2 4 this 3 3141  5 stage 1 3062  
707 14 Dtool_nJyo21PM 4 527 3053 0 14 Dtool_nJyo21PM 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  3 uvw 1 3031  
708 14 Dtool_nJyo1363 4 527 3053 0 14 Dtool_nJyo1363 6 4 this 3 3140  5 other 1 3141  5 stage 1 3062  1 u 1 3037  1 v 1 3037  1 w 1 3037  
709 14 Dtool_nJyoABBU 4 527 3053 0 14 Dtool_nJyoABBU 3 4 this 3 3140  5 stage 1 3062  3 uvw 1 3031  
710 14 Dtool_nJyoV77u 4 527 3053 0 14 Dtool_nJyoV77u 5 4 this 3 3140  5 stage 1 3062  1 u 1 3037  1 v 1 3037  1 w 1 3037  
711 14 Dtool_nJyovv9z 4 528 3053 0 14 Dtool_nJyovv9z 4 4 this 3 3140  5 other 1 3141  5 stage 1 3062  3 hpr 1 3031  
712 14 Dtool_nJyoWzpf 4 528 3053 0 14 Dtool_nJyoWzpf 6 4 this 3 3140  5 other 1 3141  5 stage 1 3062  1 h 1 3037  1 p 1 3037  1 r 1 3037  
713 14 Dtool_nJyoMiv7 4 528 3053 0 14 Dtool_nJyoMiv7 3 4 this 3 3140  5 stage 1 3062  3 hpr 1 3031  
714 14 Dtool_nJyoo_oW 4 528 3053 0 14 Dtool_nJyoo_oW 5 4 this 3 3140  5 stage 1 3062  1 h 1 3037  1 p 1 3037  1 r 1 3037  
715 14 Dtool_nJyoJ7Vi 7 529 3147 0 14 Dtool_nJyoJ7Vi 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
716 14 Dtool_nJyopg2Y 7 529 3147 0 14 Dtool_nJyopg2Y 2 4 this 3 3141  5 stage 1 3062  
717 14 Dtool_nJyoH0DK 7 530 3147 0 14 Dtool_nJyoH0DK 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
718 14 Dtool_nJyo_wiA 7 530 3147 0 14 Dtool_nJyo_wiA 2 4 this 3 3141  5 stage 1 3062  
719 14 Dtool_nJyobZgd 7 531 3147 0 14 Dtool_nJyobZgd 3 4 this 3 3141  5 other 1 3141  5 stage 1 3062  
720 14 Dtool_nJyoKAhK 7 531 3147 0 14 Dtool_nJyoKAhK 2 4 this 3 3141  5 stage 1 3062  
721 14 Dtool_nJyoJT_E 4 532 3053 0 14 Dtool_nJyoJT_E 6 4 this 3 3140  5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  5 light 1 3141  8 priority 1 3052  
722 14 Dtool_nJyorgep 4 532 3053 0 14 Dtool_nJyorgep 5 4 this 3 3140  5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  5 light 1 3141  
723 14 Dtool_nJyoEZu2 4 532 3053 0 14 Dtool_nJyoEZu2 4 4 this 3 3140  5 stage 1 3062  4 mode 1 2905  8 priority 1 3052  
724 14 Dtool_nJyoz8w0 4 532 3053 0 14 Dtool_nJyoz8w0 3 4 this 3 3140  5 stage 1 3062  4 mode 1 2905  
725 14 Dtool_nJyoiojB 4 533 3053 0 14 Dtool_nJyoiojB 1 4 this 3 3140  
726 14 Dtool_nJyoY_YK 4 533 3053 0 14 Dtool_nJyoY_YK 2 4 this 3 3140  5 stage 1 3062  
727 14 Dtool_nJyoePbA 6 534 3029 0 14 Dtool_nJyoePbA 2 4 this 3 3141  5 stage 1 3062  
728 14 Dtool_nJyo7MOY 6 535 2905 0 14 Dtool_nJyo7MOY 2 4 this 3 3141  5 stage 1 3062  
729 14 Dtool_nJyouoW2 7 536 3140 2251 14 Dtool_nJyouoW2 2 4 this 3 3141  5 stage 1 3062  
730 14 Dtool_nJyovD7f 4 537 3053 0 14 Dtool_nJyovD7f 4 4 this 3 3140  5 stage 1 3062  4 from 1 3141  2 to 1 3141  
731 14 Dtool_nJyofHQL 4 538 3053 0 14 Dtool_nJyofHQL 1 4 this 3 3140  
732 14 Dtool_nJyoYLcC 4 538 3053 0 14 Dtool_nJyoYLcC 2 4 this 3 3140  5 stage 1 3062  
733 14 Dtool_nJyomg0n 6 539 3029 0 14 Dtool_nJyomg0n 2 4 this 3 3141  5 stage 1 3062  
734 14 Dtool_nJyoqz7d 7 540 3140 2251 14 Dtool_nJyoqz7d 2 4 this 3 3141  5 stage 1 3062  
735 14 Dtool_nJyoQ1wy 7 541 3140 2251 14 Dtool_nJyoQ1wy 2 4 this 3 3141  5 stage 1 3062  
736 14 Dtool_nJyoyMJ7 4 542 3053 0 14 Dtool_nJyoyMJ7 4 4 this 3 3140  5 stage 1 3062  3 tex 1 3153  9 projector 1 3141  
737 14 Dtool_nJyofb_F 4 543 3053 0 14 Dtool_nJyofb_F 2 4 this 3 3140  5 stage 1 3062  
738 14 Dtool_nJyoYC8w 4 544 3053 0 14 Dtool_nJyoYC8w 4 4 this 3 3140  10 normal_map 1 3153  13 texcoord_name 1 3100  14 preserve_color 1 3029  
739 14 Dtool_nJyoJu3s 4 544 3053 0 14 Dtool_nJyoJu3s 3 4 this 3 3140  10 normal_map 1 3153  13 texcoord_name 1 3100  
740 14 Dtool_nJyoKP3Z 4 544 3053 0 14 Dtool_nJyoKP3Z 2 4 this 3 3140  10 normal_map 1 3153  
741 14 Dtool_nJyo8D80 4 545 3053 0 14 Dtool_nJyo8D80 1 4 this 3 3140  
742 14 Dtool_nJyobkyv 6 546 3029 0 14 Dtool_nJyobkyv 2 4 this 3 3141  13 texcoord_name 1 3100  
743 14 Dtool_nJyoO0Oo 6 547 3029 0 14 Dtool_nJyoO0Oo 2 4 this 3 3141  4 name 1 3166  
744 14 Dtool_nJyo5Dji 7 548 3168 2590 14 Dtool_nJyo5Dji 1 4 this 3 3141  
745 14 Dtool_nJyoOz5o 7 548 3168 2590 14 Dtool_nJyoOz5o 2 4 this 3 3141  4 name 1 3100  
746 14 Dtool_nJyoUJtH 7 549 3168 2590 14 Dtool_nJyoUJtH 1 4 this 3 3141  
747 14 Dtool_nJyow73q 7 549 3168 2590 14 Dtool_nJyow73q 2 4 this 3 3141  4 name 1 3100  
748 14 Dtool_nJyolksv 6 550 3153 0 14 Dtool_nJyolksv 2 4 this 3 3141  5 stage 1 3062  
749 14 Dtool_nJyoj98A 6 550 3153 0 14 Dtool_nJyoj98A 2 4 this 3 3141  4 name 1 3100  
750 14 Dtool_nJyo_z1D 7 551 3169 2869 14 Dtool_nJyo_z1D 1 4 this 3 3141  
751 14 Dtool_nJyoZ8Sw 7 551 3169 2869 14 Dtool_nJyoZ8Sw 2 4 this 3 3141  5 stage 1 3062  
752 14 Dtool_nJyoEW3S 7 551 3169 2869 14 Dtool_nJyoEW3S 2 4 this 3 3141  4 name 1 3100  
753 14 Dtool_nJyoLz_1 7 552 3062 0 14 Dtool_nJyoLz_1 2 4 this 3 3141  4 name 1 3100  
754 14 Dtool_nJyocefu 7 553 3170 2885 14 Dtool_nJyocefu 1 4 this 3 3141  
755 14 Dtool_nJyovG20 7 553 3170 2885 14 Dtool_nJyovG20 2 4 this 3 3141  4 name 1 3100  
756 14 Dtool_nJyoPvtN 4 554 3053 0 14 Dtool_nJyoPvtN 2 4 this 3 3140  5 stage 1 3062  
757 14 Dtool_nJyolB4h 6 555 3171 0 14 Dtool_nJyolB4h 2 4 this 3 3141  4 name 1 3100  
758 14 Dtool_nJyonq8r 7 556 3173 2642 14 Dtool_nJyonq8r 1 4 this 3 3141  
759 14 Dtool_nJyo66GP 7 556 3173 2642 14 Dtool_nJyo66GP 2 4 this 3 3141  4 name 1 3100  
760 14 Dtool_nJyofZam 4 557 3053 0 14 Dtool_nJyofZam 3 4 this 3 3140  3 tex 1 3171  8 priority 1 3052  
761 14 Dtool_nJyo2Xcl 4 557 3053 0 14 Dtool_nJyo2Xcl 2 4 this 3 3140  3 tex 1 3171  
762 14 Dtool_nJyogcpR 4 558 3053 0 14 Dtool_nJyogcpR 2 4 this 3 3140  8 priority 1 3052  
763 14 Dtool_nJyo_bEb 4 558 3053 0 14 Dtool_nJyo_bEb 1 4 this 3 3140  
764 14 Dtool_nJyoBVUw 4 559 3053 0 14 Dtool_nJyoBVUw 1 4 this 3 3140  
765 14 Dtool_nJyoV_e6 6 560 3029 0 14 Dtool_nJyoV_e6 1 4 this 3 3141  
766 14 Dtool_nJyor_RS 7 561 3171 0 14 Dtool_nJyor_RS 1 4 this 3 3141  
767 14 Dtool_nJyomIDI 4 562 3053 0 14 Dtool_nJyomIDI 3 4 this 3 3140  3 fog 1 3174  8 priority 1 3052  
768 14 Dtool_nJyovA0X 4 562 3053 0 14 Dtool_nJyovA0X 2 4 this 3 3140  3 fog 1 3174  
769 14 Dtool_nJyo9qa5 4 563 3053 0 14 Dtool_nJyo9qa5 2 4 this 3 3140  8 priority 1 3052  
770 14 Dtool_nJyofgI_ 4 563 3053 0 14 Dtool_nJyofgI_ 1 4 this 3 3140  
771 14 Dtool_nJyoPL5h 4 564 3053 0 14 Dtool_nJyoPL5h 1 4 this 3 3140  
772 14 Dtool_nJyoJ3dh 6 565 3029 0 14 Dtool_nJyoJ3dh 1 4 this 3 3141  
773 14 Dtool_nJyoXW1z 6 566 3029 0 14 Dtool_nJyoXW1z 1 4 this 3 3141  
774 14 Dtool_nJyoW3Q5 6 567 3174 0 14 Dtool_nJyoW3Q5 1 4 this 3 3141  
775 14 Dtool_nJyo3mJB 4 568 3053 0 14 Dtool_nJyo3mJB 2 4 this 3 3140  8 priority 1 3052  
776 14 Dtool_nJyoE5Vy 4 568 3053 0 14 Dtool_nJyoE5Vy 1 4 this 3 3140  
777 14 Dtool_nJyoGdFx 4 569 3053 0 14 Dtool_nJyoGdFx 2 4 this 3 3140  8 priority 1 3052  
778 14 Dtool_nJyoMX6K 4 569 3053 0 14 Dtool_nJyoMX6K 1 4 this 3 3140  
779 14 Dtool_nJyoTIPs 4 570 3053 0 14 Dtool_nJyoTIPs 4 4 this 3 3140  4 mode 1 2907  9 thickness 1 3037  8 priority 1 3052  
780 14 Dtool_nJyoGV0g 4 570 3053 0 14 Dtool_nJyoGV0g 3 4 this 3 3140  4 mode 1 2907  9 thickness 1 3037  
781 14 Dtool_nJyo65TZ 4 571 3053 0 14 Dtool_nJyo65TZ 1 4 this 3 3140  
782 14 Dtool_nJyonDaf 6 572 3029 0 14 Dtool_nJyonDaf 1 4 this 3 3141  
783 14 Dtool_nJyoACN3 6 573 2907 0 14 Dtool_nJyoACN3 1 4 this 3 3141  
784 14 Dtool_nJyoUPaP 6 574 3037 0 14 Dtool_nJyoUPaP 1 4 this 3 3141  
785 14 Dtool_nJyoUKd_ 4 575 3053 0 14 Dtool_nJyoUKd_ 3 4 this 3 3140  9 two_sided 1 3029  8 priority 1 3052  
786 14 Dtool_nJyo_M_e 4 575 3053 0 14 Dtool_nJyo_M_e 2 4 this 3 3140  9 two_sided 1 3029  
787 14 Dtool_nJyooJBF 4 576 3053 0 14 Dtool_nJyooJBF 1 4 this 3 3140  
788 14 Dtool_nJyootTb 6 577 3029 0 14 Dtool_nJyootTb 1 4 this 3 3141  
789 14 Dtool_nJyoFtGz 6 578 3029 0 14 Dtool_nJyoFtGz 1 4 this 3 3141  
790 14 Dtool_nJyoY7DP 4 579 3053 0 14 Dtool_nJyoY7DP 3 4 this 3 3140  10 depth_test 1 3029  8 priority 1 3052  
791 14 Dtool_nJyo2UQ_ 4 579 3053 0 14 Dtool_nJyo2UQ_ 2 4 this 3 3140  10 depth_test 1 3029  
792 14 Dtool_nJyoMMNz 4 580 3053 0 14 Dtool_nJyoMMNz 1 4 this 3 3140  
793 14 Dtool_nJyogl7H 6 581 3029 0 14 Dtool_nJyogl7H 1 4 this 3 3141  
794 14 Dtool_nJyoNiuf 6 582 3029 0 14 Dtool_nJyoNiuf 1 4 this 3 3141  
795 14 Dtool_nJyorwkt 4 583 3053 0 14 Dtool_nJyorwkt 3 4 this 3 3140  11 depth_write 1 3029  8 priority 1 3052  
796 14 Dtool_nJyoADOz 4 583 3053 0 14 Dtool_nJyoADOz 2 4 this 3 3140  11 depth_write 1 3029  
797 14 Dtool_nJyowNqE 4 584 3053 0 14 Dtool_nJyowNqE 1 4 this 3 3140  
798 14 Dtool_nJyoQs8G 6 585 3029 0 14 Dtool_nJyoQs8G 1 4 this 3 3141  
799 14 Dtool_nJyoTsve 6 586 3029 0 14 Dtool_nJyoTsve 1 4 this 3 3141  
800 14 Dtool_nJyoOIal 4 587 3053 0 14 Dtool_nJyoOIal 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
801 14 Dtool_nJyobkbl 4 588 3053 0 14 Dtool_nJyobkbl 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
802 14 Dtool_nJyoXJcU 4 589 3053 0 14 Dtool_nJyoXJcU 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
803 14 Dtool_nJyonoHV 4 590 3053 0 14 Dtool_nJyonoHV 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
804 14 Dtool_nJyoMHYU 4 590 3053 0 14 Dtool_nJyoMHYU 2 4 this 3 3140  6 offset 1 3037  
805 14 Dtool_nJyoxiDy 4 590 3053 0 14 Dtool_nJyoxiDy 1 4 this 3 3140  
806 14 Dtool_nJyo3opV 4 591 3053 0 14 Dtool_nJyo3opV 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
807 14 Dtool_nJyog0MU 4 591 3053 0 14 Dtool_nJyog0MU 2 4 this 3 3140  6 offset 1 3037  
808 14 Dtool_nJyoXCeP 4 591 3053 0 14 Dtool_nJyoXCeP 1 4 this 3 3140  
809 14 Dtool_nJyonjg2 4 592 3053 0 14 Dtool_nJyonjg2 3 4 this 3 3140  6 camera 1 3141  6 offset 1 3037  
810 14 Dtool_nJyoOaqP 4 592 3053 0 14 Dtool_nJyoOaqP 2 4 this 3 3140  6 offset 1 3037  
811 14 Dtool_nJyoKJae 4 592 3053 0 14 Dtool_nJyoKJae 1 4 this 3 3140  
812 14 Dtool_nJyoaATv 4 593 3053 0 14 Dtool_nJyoaATv 1 4 this 3 3140  
813 14 Dtool_nJyo3oWg 6 594 3029 0 14 Dtool_nJyo3oWg 1 4 this 3 3141  
814 14 Dtool_nJyoLfMs 4 595 3053 0 14 Dtool_nJyoLfMs 2 4 this 3 3140  9 reference 1 3141  
815 14 Dtool_nJyopaNt 4 595 3053 0 14 Dtool_nJyopaNt 1 4 this 3 3140  
816 14 Dtool_nJyoT898 4 596 3053 0 14 Dtool_nJyoT898 1 4 this 3 3140  
817 14 Dtool_nJyoqX5i 6 597 3029 0 14 Dtool_nJyoqX5i 1 4 this 3 3141  
818 14 Dtool_nJyoqfz0 4 598 3053 0 14 Dtool_nJyoqfz0 3 4 this 3 3140  4 mode 1 2925  8 priority 1 3052  
819 14 Dtool_nJyodYx9 4 598 3053 0 14 Dtool_nJyodYx9 2 4 this 3 3140  4 mode 1 2925  
820 14 Dtool_nJyocU7Z 4 599 3053 0 14 Dtool_nJyocU7Z 1 4 this 3 3140  
821 14 Dtool_nJyofD3E 6 600 3029 0 14 Dtool_nJyofD3E 1 4 this 3 3141  
822 14 Dtool_nJyo4Coc 6 601 2925 0 14 Dtool_nJyo4Coc 1 4 this 3 3141  
823 14 Dtool_nJyoC4tu 4 602 3053 0 14 Dtool_nJyoC4tu 3 4 this 3 3140  4 mode 1 3131  8 priority 1 3052  
824 14 Dtool_nJyoLHl2 4 602 3053 0 14 Dtool_nJyoLHl2 2 4 this 3 3140  4 mode 1 3131  
825 14 Dtool_nJyoVKqH 4 603 3053 0 14 Dtool_nJyoVKqH 1 4 this 3 3140  
826 14 Dtool_nJyoSWgH 6 604 3029 0 14 Dtool_nJyoSWgH 1 4 this 3 3141  
827 14 Dtool_nJyo9RTf 6 605 3131 0 14 Dtool_nJyo9RTf 1 4 this 3 3141  
828 14 Dtool_nJyoblUl 4 606 3053 0 14 Dtool_nJyoblUl 2 4 this 3 3140  10 adjustment 1 3052  
829 14 Dtool_nJyoDwv_ 4 607 3053 0 14 Dtool_nJyoDwv_ 1 4 this 3 3140  
830 14 Dtool_nJyo4Srv 4 607 3053 0 14 Dtool_nJyo4Srv 2 4 this 3 3140  11 camera_mask 1 3107  
831 14 Dtool_nJyo9Pk3 4 608 3053 0 14 Dtool_nJyo9Pk3 1 4 this 3 3140  
832 14 Dtool_nJyowpqz 4 608 3053 0 14 Dtool_nJyowpqz 2 4 this 3 3140  11 camera_mask 1 3107  
833 14 Dtool_nJyorDIm 4 609 3053 0 14 Dtool_nJyorDIm 1 4 this 3 3140  
834 14 Dtool_nJyonwFX 4 609 3053 0 14 Dtool_nJyonwFX 2 4 this 3 3140  11 camera_mask 1 3107  
835 14 Dtool_nJyo9FXE 6 610 3029 0 14 Dtool_nJyo9FXE 2 4 this 3 3141  11 camera_mask 1 3107  
836 14 Dtool_nJyoYTUU 6 610 3029 0 14 Dtool_nJyoYTUU 1 4 this 3 3141  
837 14 Dtool_nJyonaCb 7 611 3140 2251 14 Dtool_nJyonaCb 2 4 this 3 3141  11 camera_mask 1 3107  
838 14 Dtool_nJyoICma 7 611 3140 2251 14 Dtool_nJyoICma 1 4 this 3 3141  
839 14 Dtool_nJyo2Ms1 4 612 3053 0 14 Dtool_nJyo2Ms1 2 4 this 3 3140  4 sort 1 3052  
840 14 Dtool_nJyoinzQ 4 612 3053 0 14 Dtool_nJyoinzQ 1 4 this 3 3140  
841 14 Dtool_nJyobNQv 4 613 3053 0 14 Dtool_nJyobNQv 2 4 this 3 3140  4 sort 1 3052  
842 14 Dtool_nJyoMkf6 4 613 3053 0 14 Dtool_nJyoMkf6 1 4 this 3 3140  
843 14 Dtool_nJyow2AF 4 614 3053 0 14 Dtool_nJyow2AF 1 4 this 3 3140  
844 14 Dtool_nJyo_PEj 6 615 3029 0 14 Dtool_nJyo_PEj 1 4 this 3 3141  
845 14 Dtool_nJyoZTAQ 7 616 3140 2251 14 Dtool_nJyoZTAQ 1 4 this 3 3141  
846 14 Dtool_nJyoBdNw 7 617 3107 0 14 Dtool_nJyoBdNw 1 4 this 3 3141  
847 14 Dtool_nJyoffJ3 4 618 3053 0 14 Dtool_nJyoffJ3 4 4 this 3 3140  8 new_mask 1 3107  14 bits_to_change 1 3107  9 node_type 1 3057  
848 14 Dtool_nJyoMlkA 4 618 3053 0 14 Dtool_nJyoMlkA 3 4 this 3 3140  8 new_mask 1 3107  14 bits_to_change 1 3107  
849 14 Dtool_nJyoUN_z 4 618 3053 0 14 Dtool_nJyoUN_z 2 4 this 3 3140  8 new_mask 1 3107  
850 14 Dtool_nJyozIl9 6 619 3029 0 14 Dtool_nJyozIl9 2 4 this 3 3141  5 other 1 3141  
851 14 Dtool_nJyoROU9 6 620 3029 0 14 Dtool_nJyoROU9 2 4 this 3 3141  5 other 1 3141  
852 14 Dtool_nJyoM90s 6 621 3029 0 14 Dtool_nJyoM90s 2 4 this 3 3141  5 other 1 3141  
853 14 Dtool_nJyoHPj2 6 622 3052 0 14 Dtool_nJyoHPj2 2 4 this 3 3141  5 other 1 3141  
854 14 Dtool_nJyoTqrp 6 623 3029 0 14 Dtool_nJyoTqrp 1 4 this 3 3141  
855 14 Dtool_nJyo0HH0 4 624 3053 0 14 Dtool_nJyo0HH0 2 4 this 3 3140  3 gsg 1 3175  
856 14 Dtool_nJyo1psR 4 625 3053 0 14 Dtool_nJyo1psR 1 4 this 3 3140  
857 14 Dtool_nJyopl7q 4 626 3053 0 14 Dtool_nJyopl7q 1 4 this 3 3140  
858 14 Dtool_nJyo0fG5 4 627 3053 0 14 Dtool_nJyo0fG5 1 4 this 3 3140  
859 14 Dtool_nJyopOSR 7 628 3177 0 14 Dtool_nJyopOSR 1 4 this 3 3141  
860 14 Dtool_nJyotE3U 4 629 3053 0 14 Dtool_nJyotE3U 1 4 this 3 3140  
861 14 Dtool_nJyo2vwc 4 630 3053 0 14 Dtool_nJyo2vwc 2 4 this 3 3141  3 out 1 3054  
862 14 Dtool_nJyovpR_ 6 631 3029 0 14 Dtool_nJyovpR_ 3 4 this 3 3140  9 min_point 1 3144  9 max_point 1 3144  
863 14 Dtool_nJyo6PN4 4 632 3053 0 14 Dtool_nJyo6PN4 1 4 this 3 3141  
864 14 Dtool_nJyoznLC 6 633 3052 0 14 Dtool_nJyoznLC 1 4 this 3 3140  
865 14 Dtool_nJyoqVep 6 634 3052 0 14 Dtool_nJyoqVep 1 4 this 3 3140  
866 14 Dtool_nJyogdaT 6 635 3052 0 14 Dtool_nJyogdaT 1 4 this 3 3140  
867 14 Dtool_nJyoBD_p 4 636 3053 0 14 Dtool_nJyoBD_p 3 4 this 3 3140  3 key 1 3100  5 value 1 3100  
868 14 Dtool_nJyozT5q 6 637 3100 0 14 Dtool_nJyozT5q 2 4 this 3 3141  3 key 1 3100  
869 14 Dtool_nJyoWQGT 6 638 3029 0 14 Dtool_nJyoWQGT 2 4 this 3 3141  3 key 1 3100  
870 14 Dtool_nJyoHk6_ 4 639 3053 0 14 Dtool_nJyoHk6_ 2 4 this 3 3140  3 key 1 3100  
871 14 Dtool_nJyo4VAu 6 640 3100 0 14 Dtool_nJyo4VAu 2 4 this 3 3141  3 key 1 3100  
872 14 Dtool_nJyobVNW 6 641 3029 0 14 Dtool_nJyobVNW 2 4 this 3 3141  3 key 1 3100  
873 14 Dtool_nJyopJhq 7 642 3140 2251 14 Dtool_nJyopJhq 2 4 this 3 3141  3 key 1 3100  
874 14 Dtool_nJyoSNAU 4 643 3053 0 14 Dtool_nJyoSNAU 3 4 this 3 3140  3 key 1 3100  5 value 1 3104  
875 14 Dtool_nJyoeudG 6 644 3104 0 14 Dtool_nJyoeudG 2 4 this 3 3141  3 key 1 3100  
876 14 Dtool_nJyogtqu 6 645 3029 0 14 Dtool_nJyogtqu 2 4 this 3 3141  3 key 1 3100  
877 14 Dtool_nJyoYEBN 4 646 3053 0 14 Dtool_nJyoYEBN 2 4 this 3 3140  3 key 1 3100  
878 14 Dtool_nJyoeVt_ 6 647 3104 0 14 Dtool_nJyoeVt_ 2 4 this 3 3141  3 key 1 3100  
879 14 Dtool_nJyo5V6n 6 648 3029 0 14 Dtool_nJyo5V6n 2 4 this 3 3141  3 key 1 3100  
880 14 Dtool_nJyoc_lh 7 649 3140 2251 14 Dtool_nJyoc_lh 2 4 this 3 3141  3 key 1 3100  
881 14 Dtool_nJyoM5gv 4 650 3053 0 14 Dtool_nJyoM5gv 1 4 this 3 3141  
882 14 Dtool_nJyo2Rjw 4 651 3053 0 14 Dtool_nJyo2Rjw 2 4 this 3 3140  4 name 1 3100  
883 14 Dtool_nJyobkeW 6 652 3100 0 14 Dtool_nJyobkeW 1 4 this 3 3141  
884 14 Dtool_nJyoDjrd 6 653 3029 0 14 Dtool_nJyoDjrd 2 4 this 3 3141  8 filename 1 3100  
885 14 Dtool_nJyot3wh 7 654 3057 0 14 Dtool_nJyot3wh 0 
886 14 Dtool_nJyoMFqO 7 658 3058 0 14 Dtool_nJyoMFqO 0 
887 14 Dtool_nJyoSf11 7 658 3058 0 14 Dtool_nJyoSf11 2 2 op 1 2929  5 plane 1 3137  
888 14 Dtool_nJyoAiXQ 7 658 3058 0 14 Dtool_nJyoAiXQ 3 2 op 1 2929  6 plane1 1 3137  6 plane2 1 3137  
889 14 Dtool_nJyoCohu 7 658 3058 0 14 Dtool_nJyoCohu 4 2 op 1 2929  6 plane1 1 3137  6 plane2 1 3137  6 plane3 1 3137  
890 14 Dtool_nJyouzti 7 658 3058 0 14 Dtool_nJyouzti 5 2 op 1 2929  6 plane1 1 3137  6 plane2 1 3137  6 plane3 1 3137  6 plane4 1 3137  
891 14 Dtool_nJyojfgg 6 659 2929 0 14 Dtool_nJyojfgg 1 4 this 3 3090  
892 14 Dtool_nJyohARe 6 660 3052 0 14 Dtool_nJyohARe 1 4 this 3 3090  
893 14 Dtool_nJyoS5RG 7 661 3137 1941 14 Dtool_nJyoS5RG 2 4 this 3 3090  1 n 1 3052  
894 14 Dtool_nJyoxcJo 6 662 3029 0 14 Dtool_nJyoxcJo 2 4 this 3 3090  5 plane 1 3137  
895 14 Dtool_nJyohmfX 7 663 3058 0 14 Dtool_nJyohmfX 2 4 this 3 3090  5 plane 1 3137  
896 14 Dtool_nJyor4Ff 7 664 3058 0 14 Dtool_nJyor4Ff 2 4 this 3 3090  5 plane 1 3137  
897 14 Dtool_nJyoIhtw 7 665 3058 0 14 Dtool_nJyoIhtw 0 
898 14 Dtool_nJyomD9r 6 666 3052 0 14 Dtool_nJyomD9r 1 4 this 3 3090  
899 14 Dtool_nJyoc731 7 667 3140 2251 14 Dtool_nJyoc731 2 4 this 3 3090  1 n 1 3052  
900 14 Dtool_nJyo5ejJ 6 668 3029 0 14 Dtool_nJyo5ejJ 2 4 this 3 3090  5 plane 1 3141  
901 14 Dtool_nJyoiwoK 6 669 3052 0 14 Dtool_nJyoiwoK 1 4 this 3 3090  
902 14 Dtool_nJyoQHx4 7 670 3140 2251 14 Dtool_nJyoQHx4 2 4 this 3 3090  1 n 1 3052  
903 14 Dtool_nJyoW4PJ 6 671 3029 0 14 Dtool_nJyoW4PJ 2 4 this 3 3090  5 plane 1 3141  
904 14 Dtool_nJyo77yZ 6 672 3029 0 14 Dtool_nJyo77yZ 1 4 this 3 3090  
905 14 Dtool_nJyo1m0T 6 673 3029 0 14 Dtool_nJyo1m0T 1 4 this 3 3090  
906 14 Dtool_nJyoOV44 7 674 3058 0 14 Dtool_nJyoOV44 2 4 this 3 3090  5 plane 1 3141  
907 14 Dtool_nJyoZNYP 7 675 3058 0 14 Dtool_nJyoZNYP 2 4 this 3 3090  5 plane 1 3141  
908 14 Dtool_nJyohtl4 7 676 3058 0 14 Dtool_nJyohtl4 2 4 this 3 3090  5 plane 1 3141  
909 14 Dtool_nJyondra 7 677 3058 0 14 Dtool_nJyondra 2 4 this 3 3090  5 plane 1 3141  
910 14 Dtool_nJyo7mpB 7 678 3090 0 14 Dtool_nJyo7mpB 2 4 this 3 3090  15 max_clip_planes 1 3052  
911 14 Dtool_nJyoiYmd 7 679 3057 0 14 Dtool_nJyoiYmd 0 
912 14 Dtool_nJyoVIQx 7 683 3058 0 14 Dtool_nJyoVIQx 0 
913 14 Dtool_nJyo_AHD 7 684 3058 0 14 Dtool_nJyo_AHD 1 5 color 1 3124  
914 14 Dtool_nJyotNeS 7 685 3058 0 14 Dtool_nJyotNeS 0 
915 14 Dtool_nJyouDIc 6 686 2931 0 14 Dtool_nJyouDIc 1 4 this 3 3082  
916 14 Dtool_nJyofxu6 6 687 3124 0 14 Dtool_nJyofxu6 1 4 this 3 3082  
917 14 Dtool_nJyoNqSX 7 688 3057 0 14 Dtool_nJyoNqSX 0 
918 14 Dtool_nJyo5AXJ 7 693 3058 0 14 Dtool_nJyo5AXJ 0 
919 14 Dtool_nJyo5Fac 7 694 3058 0 14 Dtool_nJyo5Fac 1 4 mode 1 2933  
920 14 Dtool_nJyo_Hc8 7 694 3058 0 14 Dtool_nJyo_Hc8 4 4 mode 1 2933  1 a 1 2934  1 b 1 2934  5 color 1 3124  
921 14 Dtool_nJyoVZIK 7 694 3058 0 14 Dtool_nJyoVZIK 3 4 mode 1 2933  1 a 1 2934  1 b 1 2934  
922 14 Dtool_nJyoVa3Z 6 695 2933 0 14 Dtool_nJyoVa3Z 1 4 this 3 3178  
923 14 Dtool_nJyo2xBv 6 696 2934 0 14 Dtool_nJyo2xBv 1 4 this 3 3178  
924 14 Dtool_nJyo2oPw 6 697 2934 0 14 Dtool_nJyo2oPw 1 4 this 3 3178  
925 14 Dtool_nJyolK1Z 7 698 3152 0 14 Dtool_nJyolK1Z 1 4 this 3 3178  
926 14 Dtool_nJyos1UW 6 699 3029 0 14 Dtool_nJyos1UW 1 4 this 3 3178  
927 14 Dtool_nJyoZuVD 6 699 3029 0 14 Dtool_nJyoZuVD 1 7 operand 1 2934  
928 14 Dtool_nJyoPd_w 6 700 3029 0 14 Dtool_nJyoPd_w 1 4 this 3 3178  
929 14 Dtool_nJyoDAnV 6 700 3029 0 14 Dtool_nJyoDAnV 1 7 operand 1 2934  
930 14 Dtool_nJyodCAT 7 701 3057 0 14 Dtool_nJyodCAT 0 
931 14 Dtool_nJyoHjWB 7 704 3058 0 14 Dtool_nJyoHjWB 0 
932 14 Dtool_nJyoqphH 7 705 3058 0 14 Dtool_nJyoqphH 1 5 scale 1 3124  
933 14 Dtool_nJyoiYTX 7 706 3058 0 14 Dtool_nJyoiYTX 0 
934 14 Dtool_nJyo4gpd 6 707 3029 0 14 Dtool_nJyo4gpd 1 4 this 3 3084  
935 14 Dtool_nJyobEZp 6 708 3029 0 14 Dtool_nJyobEZp 1 4 this 3 3084  
936 14 Dtool_nJyo5XjN 6 709 3029 0 14 Dtool_nJyo5XjN 1 4 this 3 3084  
937 14 Dtool_nJyolY5G 6 710 3124 0 14 Dtool_nJyolY5G 1 4 this 3 3084  
938 14 Dtool_nJyoB7C2 7 711 3058 0 14 Dtool_nJyoB7C2 2 4 this 3 3084  5 scale 1 3124  
939 14 Dtool_nJyokV8g 7 712 3057 0 14 Dtool_nJyokV8g 0 
940 14 Dtool_nJyozjc0 7 716 3058 0 14 Dtool_nJyozjc0 1 8 channels 1 3030  
941 14 Dtool_nJyoUAsG 6 717 3030 0 14 Dtool_nJyoUAsG 1 4 this 3 3180  
942 14 Dtool_nJyoP935 7 718 3057 0 14 Dtool_nJyoP935 0 
943 14 Dtool_nJyo9_4q 7 721 3058 0 14 Dtool_nJyo9_4q 2 8 bin_name 1 3100  10 draw_order 1 3052  
944 14 Dtool_nJyoKDax 6 722 3100 0 14 Dtool_nJyoKDax 1 4 this 3 3078  
945 14 Dtool_nJyoK03U 6 723 3052 0 14 Dtool_nJyoK03U 1 4 this 3 3078  
946 14 Dtool_nJyoW020 7 724 3057 0 14 Dtool_nJyoW020 0 
947 14 Dtool_nJyoIubb 7 728 3058 0 14 Dtool_nJyoIubb 1 4 mode 1 2940  
948 14 Dtool_nJyonry7 7 728 3058 0 14 Dtool_nJyonry7 0 
949 14 Dtool_nJyo1_sE 7 729 3058 0 14 Dtool_nJyo1_sE 0 
950 14 Dtool_nJyotw1_ 6 730 2940 0 14 Dtool_nJyotw1_ 1 4 this 3 3182  
951 14 Dtool_nJyoZ_zu 6 731 3029 0 14 Dtool_nJyoZ_zu 1 4 this 3 3182  
952 14 Dtool_nJyoN1y1 6 732 2940 0 14 Dtool_nJyoN1y1 1 4 this 3 3182  
953 14 Dtool_nJyodcRA 7 733 3057 0 14 Dtool_nJyodcRA 0 
954 14 Dtool_nJyoYYvF 7 736 3058 0 14 Dtool_nJyoYYvF 1 6 offset 1 3052  
955 14 Dtool_nJyoTJWU 7 736 3058 0 14 Dtool_nJyoTJWU 0 
956 14 Dtool_nJyoQ48q 6 737 3052 0 14 Dtool_nJyoQ48q 1 4 this 3 3184  
957 14 Dtool_nJyorc0x 7 738 3057 0 14 Dtool_nJyorc0x 0 
958 14 Dtool_nJyo4KXK 7 741 3058 0 14 Dtool_nJyo4KXK 1 4 mode 1 2904  
959 14 Dtool_nJyokoRd 6 742 2904 0 14 Dtool_nJyokoRd 1 4 this 3 3186  
960 14 Dtool_nJyo_bEH 7 743 3057 0 14 Dtool_nJyo_bEH 0 
961 14 Dtool_nJyoAW_N 7 747 3058 0 14 Dtool_nJyoAW_N 1 4 mode 1 2944  
962 14 Dtool_nJyokZFl 6 748 2944 0 14 Dtool_nJyokZFl 1 4 this 3 3188  
963 14 Dtool_nJyoNOPe 7 749 3057 0 14 Dtool_nJyoNOPe 0 
964 14 Dtool_nJyoWpyF 7 752 3174 1807 14 Dtool_nJyoWpyF 1 4 name 1 3100  
965 14 Dtool_nJyoNq_P 6 754 2946 0 14 Dtool_nJyoNq_P 1 4 this 3 3190  
966 14 Dtool_nJyoGgPt 4 755 3053 0 14 Dtool_nJyoGgPt 2 4 this 3 3174  4 mode 1 2946  
967 14 Dtool_nJyoRSgO 6 756 3124 0 14 Dtool_nJyoRSgO 1 4 this 3 3190  
968 14 Dtool_nJyoJg2n 4 757 3053 0 14 Dtool_nJyoJg2n 2 4 this 3 3174  5 color 1 3124  
969 14 Dtool_nJyo_xx3 4 757 3053 0 14 Dtool_nJyo_xx3 4 4 this 3 3174  1 r 1 3037  1 g 1 3037  1 b 1 3037  
970 14 Dtool_nJyo3of3 4 758 3053 0 14 Dtool_nJyo3of3 3 4 this 3 3174  5 onset 1 3037  6 opaque 1 3037  
971 14 Dtool_nJyo9LTt 6 759 3047 0 14 Dtool_nJyo9LTt 1 4 this 3 3190  
972 14 Dtool_nJyo6RcW 4 760 3053 0 14 Dtool_nJyo6RcW 2 4 this 3 3174  18 linear_onset_point 1 3047  
973 14 Dtool_nJyo36iG 4 760 3053 0 14 Dtool_nJyo36iG 4 4 this 3 3174  1 x 1 3037  1 y 1 3037  1 z 1 3037  
974 14 Dtool_nJyojQae 6 761 3047 0 14 Dtool_nJyojQae 1 4 this 3 3190  
975 14 Dtool_nJyoHhA1 4 762 3053 0 14 Dtool_nJyoHhA1 2 4 this 3 3174  19 linear_opaque_point 1 3047  
976 14 Dtool_nJyoEcC5 4 762 3053 0 14 Dtool_nJyoEcC5 4 4 this 3 3174  1 x 1 3037  1 y 1 3037  1 z 1 3037  
977 14 Dtool_nJyody8d 4 763 3053 0 14 Dtool_nJyody8d 4 4 this 3 3174  5 angle 1 3037  5 onset 1 3037  6 opaque 1 3037  
978 14 Dtool_nJyoE35n 6 764 3037 0 14 Dtool_nJyoE35n 1 4 this 3 3190  
979 14 Dtool_nJyoGCDe 4 765 3053 0 14 Dtool_nJyoGCDe 2 4 this 3 3174  11 exp_density 1 3037  
980 14 Dtool_nJyofLii 7 766 3057 0 14 Dtool_nJyofLii 0 
981 14 Dtool_nJyoen99 7 768 3058 0 14 Dtool_nJyoen99 1 3 fog 1 3174  
982 14 Dtool_nJyoDJ_4 7 769 3058 0 14 Dtool_nJyoDJ_4 0 
983 14 Dtool_nJyoCvlR 6 770 3029 0 14 Dtool_nJyoCvlR 1 4 this 3 3076  
984 14 Dtool_nJyoZ5_2 7 771 3174 1807 14 Dtool_nJyoZ5_2 1 4 this 3 3076  
985 14 Dtool_nJyosG1H 7 772 3057 0 14 Dtool_nJyosG1H 0 
986 14 Dtool_nJyoZznk 7 776 3058 0 14 Dtool_nJyoZznk 0 
987 14 Dtool_nJyoasHl 7 776 3058 0 14 Dtool_nJyoasHl 2 2 op 1 2949  5 light 1 3111  
988 14 Dtool_nJyoVa32 7 776 3058 0 14 Dtool_nJyoVa32 3 2 op 1 2949  6 light1 1 3111  6 light2 1 3111  
989 14 Dtool_nJyoLIAJ 7 776 3058 0 14 Dtool_nJyoLIAJ 4 2 op 1 2949  6 light1 1 3111  6 light2 1 3111  6 light3 1 3111  
990 14 Dtool_nJyo6FSb 7 776 3058 0 14 Dtool_nJyo6FSb 5 2 op 1 2949  6 light1 1 3111  6 light2 1 3111  6 light3 1 3111  6 light4 1 3111  
991 14 Dtool_nJyoI94C 6 777 2949 0 14 Dtool_nJyoI94C 1 4 this 3 3192  
992 14 Dtool_nJyoSNtr 6 778 3052 0 14 Dtool_nJyoSNtr 1 4 this 3 3192  
993 14 Dtool_nJyowj1p 7 779 3111 1908 14 Dtool_nJyowj1p 2 4 this 3 3192  1 n 1 3052  
994 14 Dtool_nJyoTmqi 6 780 3029 0 14 Dtool_nJyoTmqi 2 4 this 3 3192  5 light 1 3111  
995 14 Dtool_nJyo4p4X 7 781 3058 0 14 Dtool_nJyo4p4X 2 4 this 3 3192  5 light 1 3111  
996 14 Dtool_nJyo_Dht 7 782 3058 0 14 Dtool_nJyo_Dht 2 4 this 3 3192  5 light 1 3111  
997 14 Dtool_nJyo3HyF 7 783 3058 0 14 Dtool_nJyo3HyF 0 
998 14 Dtool_nJyo0Byr 6 784 3052 0 14 Dtool_nJyo0Byr 1 4 this 3 3192  
999 14 Dtool_nJyoGoP5 7 785 3140 2251 14 Dtool_nJyoGoP5 2 4 this 3 3192  1 n 1 3052  
1000 14 Dtool_nJyoCXs0 6 786 3029 0 14 Dtool_nJyoCXs0 2 4 this 3 3192  5 light 1 3141  
1001 14 Dtool_nJyomfMm 6 787 3052 0 14 Dtool_nJyomfMm 1 4 this 3 3192  
1002 14 Dtool_nJyo7rCU 7 788 3140 2251 14 Dtool_nJyo7rCU 2 4 this 3 3192  1 n 1 3052  
1003 14 Dtool_nJyo4Fzb 6 789 3029 0 14 Dtool_nJyo4Fzb 2 4 this 3 3192  5 light 1 3141  
1004 14 Dtool_nJyoqnRX 6 790 3029 0 14 Dtool_nJyoqnRX 1 4 this 3 3192  
1005 14 Dtool_nJyo5lP4 6 791 3029 0 14 Dtool_nJyo5lP4 1 4 this 3 3192  
1006 14 Dtool_nJyo3_7p 7 792 3058 0 14 Dtool_nJyo3_7p 2 4 this 3 3192  5 light 1 3141  
1007 14 Dtool_nJyoQ7jl 7 793 3058 0 14 Dtool_nJyoQ7jl 2 4 this 3 3192  5 light 1 3141  
1008 14 Dtool_nJyo6_CR 7 794 3058 0 14 Dtool_nJyo6_CR 2 4 this 3 3192  5 light 1 3141  
1009 14 Dtool_nJyoIQ_X 7 795 3058 0 14 Dtool_nJyoIQ_X 2 4 this 3 3192  5 light 1 3141  
1010 14 Dtool_nJyo0aOV 7 796 3192 0 14 Dtool_nJyo0aOV 2 4 this 3 3192  10 max_lights 1 3052  
1011 14 Dtool_nJyo1YNJ 7 797 3140 2251 14 Dtool_nJyo1YNJ 1 4 this 3 3192  
1012 14 Dtool_nJyojHBU 7 798 3057 0 14 Dtool_nJyojHBU 0 
1013 14 Dtool_nJyo8GwD 7 801 3058 0 14 Dtool_nJyo8GwD 1 8 material 1 3171  
1014 14 Dtool_nJyoGV47 7 802 3058 0 14 Dtool_nJyoGV47 0 
1015 14 Dtool_nJyoyUFt 6 803 3029 0 14 Dtool_nJyoyUFt 1 4 this 3 3194  
1016 14 Dtool_nJyoJxv4 7 804 3171 0 14 Dtool_nJyoJxv4 1 4 this 3 3194  
1017 14 Dtool_nJyo2NoZ 7 805 3057 0 14 Dtool_nJyo2NoZ 0 
1018 14 Dtool_nJyosZHo 7 809 3058 0 14 Dtool_nJyosZHo 1 4 mode 1 2952  
1019 14 Dtool_nJyoUWoq 7 810 3058 0 14 Dtool_nJyoUWoq 0 
1020 14 Dtool_nJyoTBI4 6 811 2952 0 14 Dtool_nJyoTBI4 1 4 this 3 3196  
1021 14 Dtool_nJyoJ1xG 7 812 3057 0 14 Dtool_nJyoJ1xG 0 
1022 14 Dtool_nJyolxrR 7 816 3058 0 14 Dtool_nJyolxrR 1 4 mode 1 2954  
1023 14 Dtool_nJyoV0vm 6 817 2954 0 14 Dtool_nJyoV0vm 1 4 this 3 3198  
1024 14 Dtool_nJyoVo4f 7 818 3057 0 14 Dtool_nJyoVo4f 0 
1025 14 Dtool_nJyoUAo3 7 822 3200 0 14 Dtool_nJyoUAo3 3 2 id 1 3156  1 v 1 3158  8 priority 1 3052  
1026 14 Dtool_nJyoRu6R 7 822 3200 0 14 Dtool_nJyoRu6R 2 2 id 1 3156  1 v 1 3158  
1027 14 Dtool_nJyoBUp4 7 822 3200 0 14 Dtool_nJyoBUp4 3 2 id 1 3156  2 np 1 3141  8 priority 1 3052  
1028 14 Dtool_nJyoI1f7 7 822 3200 0 14 Dtool_nJyoI1f7 2 2 id 1 3156  2 np 1 3141  
1029 14 Dtool_nJyosD1_ 7 822 3200 0 14 Dtool_nJyosD1_ 3 2 id 1 3156  3 tex 1 3153  8 priority 1 3052  
1030 14 Dtool_nJyoR_Ia 7 822 3200 0 14 Dtool_nJyoR_Ia 2 2 id 1 3156  3 tex 1 3153  
1031 14 Dtool_nJyoDQp5 7 822 3200 0 14 Dtool_nJyoDQp5 2 2 id 1 3156  8 priority 1 3052  
1032 14 Dtool_nJyodFZ6 7 822 3200 0 14 Dtool_nJyodFZ6 1 2 id 1 3156  
1033 14 Dtool_nJyoB963 7 821 3162 0 14 Dtool_nJyoB963 0 
1034 14 Dtool_nJyo72k1 7 824 3156 0 14 Dtool_nJyo72k1 1 4 this 3 3162  
1035 14 Dtool_nJyo2Nv1 6 825 3052 0 14 Dtool_nJyo2Nv1 1 4 this 3 3162  
1036 14 Dtool_nJyovnas 6 826 3052 0 14 Dtool_nJyovnas 1 4 this 3 3162  
1037 14 Dtool_nJyoB_Q3 7 827 3153 0 14 Dtool_nJyoB_Q3 1 4 this 3 3162  
1038 14 Dtool_nJyonygk 6 828 3141 0 14 Dtool_nJyonygk 1 4 this 3 3162  
1039 14 Dtool_nJyoXBST 6 829 3158 0 14 Dtool_nJyoXBST 1 4 this 3 3162  
1040 14 Dtool_nJyoIk03 7 830 3057 0 14 Dtool_nJyoIk03 0 
1041 14 Dtool_nJyoBOXx 7 832 3164 0 14 Dtool_nJyoBOXx 2 4 file 1 3201  12 preprocessor 1 3052  
1042 14 Dtool_nJyoJQge 7 832 3164 0 14 Dtool_nJyoJQge 1 4 file 1 3201  
1043 14 Dtool_nJyo_ZX8 7 832 3164 0 14 Dtool_nJyo_ZX8 2 4 file 1 3100  12 preprocessor 1 3052  
1044 14 Dtool_nJyoEna7 7 832 3164 0 14 Dtool_nJyoEna7 1 4 file 1 3100  
1045 14 Dtool_nJyoGZTR 7 833 3164 0 14 Dtool_nJyoGZTR 2 4 body 1 3100  12 preprocessor 1 3052  
1046 14 Dtool_nJyoZPVQ 7 833 3164 0 14 Dtool_nJyoZPVQ 1 4 body 1 3100  
1047 14 Dtool_nJyo_UN_ 6 834 3100 0 14 Dtool_nJyo_UN_ 1 4 this 3 3164  
1048 14 Dtool_nJyoLCV6 6 835 3201 0 14 Dtool_nJyoLCV6 1 4 this 3 3164  
1049 14 Dtool_nJyojM6Z 6 836 3100 0 14 Dtool_nJyojM6Z 1 4 this 3 3164  
1050 14 Dtool_nJyoEOva 6 837 3052 0 14 Dtool_nJyoEOva 1 4 this 3 3164  
1051 14 Dtool_nJyoa_pF 6 838 3029 0 14 Dtool_nJyoa_pF 1 4 this 3 3164  
1052 14 Dtool_nJyonHJt 6 839 3029 0 14 Dtool_nJyonHJt 1 4 this 3 3164  
1053 14 Dtool_nJyocWMn 7 840 3205 0 14 Dtool_nJyocWMn 2 4 this 3 3164  7 context 1 3066  
1054 14 Dtool_nJyoshVA 7 841 3057 0 14 Dtool_nJyoshVA 0 
1055 14 Dtool_nJyo56zk 7 843 3058 0 14 Dtool_nJyo56zk 0 
1056 14 Dtool_nJyoonB5 7 844 3058 0 14 Dtool_nJyoonB5 0 
1057 14 Dtool_nJyogTqm 6 845 3029 0 14 Dtool_nJyogTqm 1 4 this 3 3092  
1058 14 Dtool_nJyoaasp 6 846 3052 0 14 Dtool_nJyoaasp 1 4 this 3 3092  
1059 14 Dtool_nJyoRCIc 7 847 3058 0 14 Dtool_nJyoRCIc 3 4 this 3 3092  1 s 1 3164  8 priority 1 3052  
1060 14 Dtool_nJyoeBO9 7 847 3058 0 14 Dtool_nJyoeBO9 2 4 this 3 3092  1 s 1 3164  
1061 14 Dtool_nJyovUho 7 848 3058 0 14 Dtool_nJyovUho 2 4 this 3 3092  8 priority 1 3052  
1062 14 Dtool_nJyoAR_j 7 848 3058 0 14 Dtool_nJyoAR_j 1 4 this 3 3092  
1063 14 Dtool_nJyoROF5 7 849 3058 0 14 Dtool_nJyoROF5 1 4 this 3 3092  
1064 14 Dtool_nJyoISlC 7 850 3058 0 14 Dtool_nJyoISlC 4 4 this 3 3092  2 id 1 3156  1 v 1 3158  8 priority 1 3052  
1065 14 Dtool_nJyoFv5a 7 850 3058 0 14 Dtool_nJyoFv5a 3 4 this 3 3092  2 id 1 3156  1 v 1 3158  
1066 14 Dtool_nJyoMvHV 7 850 3058 0 14 Dtool_nJyoMvHV 4 4 this 3 3092  2 id 1 3156  2 np 1 3141  8 priority 1 3052  
1067 14 Dtool_nJyoX65n 7 850 3058 0 14 Dtool_nJyoX65n 3 4 this 3 3092  2 id 1 3156  2 np 1 3141  
1068 14 Dtool_nJyokUJP 7 850 3058 0 14 Dtool_nJyokUJP 4 4 this 3 3092  2 id 1 3156  3 tex 1 3153  8 priority 1 3052  
1069 14 Dtool_nJyogUdn 7 850 3058 0 14 Dtool_nJyogUdn 3 4 this 3 3092  2 id 1 3156  3 tex 1 3153  
1070 14 Dtool_nJyoo_Ew 7 850 3058 0 14 Dtool_nJyoo_Ew 7 4 this 3 3092  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  8 priority 1 3052  
1071 14 Dtool_nJyoeWWI 7 850 3058 0 14 Dtool_nJyoeWWI 6 4 this 3 3092  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  
1072 14 Dtool_nJyoxqNG 7 850 3058 0 14 Dtool_nJyoxqNG 5 4 this 3 3092  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  
1073 14 Dtool_nJyoM4hV 7 850 3058 0 14 Dtool_nJyoM4hV 4 4 this 3 3092  2 id 1 3156  2 n1 1 3161  2 n2 1 3161  
1074 14 Dtool_nJyosBRn 7 850 3058 0 14 Dtool_nJyosBRn 3 4 this 3 3092  2 id 1 3156  2 n1 1 3161  
1075 14 Dtool_nJyog0Hl 7 850 3058 0 14 Dtool_nJyog0Hl 2 4 this 3 3092  2 id 1 3156  
1076 14 Dtool_nJyos2JU 7 850 3058 0 14 Dtool_nJyos2JU 2 4 this 3 3092  3 inp 1 3162  
1077 14 Dtool_nJyoj2lN 7 850 3058 0 14 Dtool_nJyoj2lN 4 4 this 3 3092  2 id 1 3100  1 v 1 3158  8 priority 1 3052  
1078 14 Dtool_nJyoTwng 7 850 3058 0 14 Dtool_nJyoTwng 3 4 this 3 3092  2 id 1 3100  1 v 1 3158  
1079 14 Dtool_nJyoqZJv 7 850 3058 0 14 Dtool_nJyoqZJv 4 4 this 3 3092  2 id 1 3100  2 np 1 3141  8 priority 1 3052  
1080 14 Dtool_nJyokLvf 7 850 3058 0 14 Dtool_nJyokLvf 3 4 this 3 3092  2 id 1 3100  2 np 1 3141  
1081 14 Dtool_nJyof_Sw 7 850 3058 0 14 Dtool_nJyof_Sw 4 4 this 3 3092  2 id 1 3100  3 tex 1 3153  8 priority 1 3052  
1082 14 Dtool_nJyo4EVD 7 850 3058 0 14 Dtool_nJyo4EVD 3 4 this 3 3092  2 id 1 3100  3 tex 1 3153  
1083 14 Dtool_nJyoU6dv 7 850 3058 0 14 Dtool_nJyoU6dv 7 4 this 3 3092  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  8 priority 1 3052  
1084 14 Dtool_nJyoECpA 7 850 3058 0 14 Dtool_nJyoECpA 6 4 this 3 3092  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  2 n4 1 3161  
1085 14 Dtool_nJyoPoh0 7 850 3058 0 14 Dtool_nJyoPoh0 5 4 this 3 3092  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  2 n3 1 3161  
1086 14 Dtool_nJyofZ9I 7 850 3058 0 14 Dtool_nJyofZ9I 4 4 this 3 3092  2 id 1 3100  2 n1 1 3161  2 n2 1 3161  
1087 14 Dtool_nJyo__c4 7 850 3058 0 14 Dtool_nJyo__c4 3 4 this 3 3092  2 id 1 3100  2 n1 1 3161  
1088 14 Dtool_nJyo7TTs 7 850 3058 0 14 Dtool_nJyo7TTs 2 4 this 3 3092  2 id 1 3100  
1089 14 Dtool_nJyoQ9Oa 7 851 3058 0 14 Dtool_nJyoQ9Oa 2 4 this 3 3092  2 id 1 3156  
1090 14 Dtool_nJyoxmfl 7 851 3058 0 14 Dtool_nJyoxmfl 2 4 this 3 3092  2 id 1 3100  
1091 14 Dtool_nJyo9RI8 7 852 3164 0 14 Dtool_nJyo9RI8 1 4 this 3 3092  
1092 14 Dtool_nJyoVpDl 7 853 3162 0 14 Dtool_nJyoVpDl 2 4 this 3 3092  2 id 1 3156  
1093 14 Dtool_nJyoslPs 7 853 3162 0 14 Dtool_nJyoslPs 2 4 this 3 3092  2 id 1 3100  
1094 14 Dtool_nJyoFVkO 4 854 3053 0 14 Dtool_nJyoFVkO 0 
1095 14 Dtool_nJyog_gT 7 855 3057 0 14 Dtool_nJyog_gT 0 
1096 14 Dtool_nJyomQma 7 858 3058 0 14 Dtool_nJyomQma 0 
1097 14 Dtool_nJyomNgO 7 858 3058 0 14 Dtool_nJyomNgO 4 5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  5 light 1 3141  
1098 14 Dtool_nJyolAjR 7 858 3058 0 14 Dtool_nJyolAjR 3 5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  
1099 14 Dtool_nJyoLPjv 7 858 3058 0 14 Dtool_nJyoLPjv 2 5 stage 1 3062  4 mode 1 2905  
1100 14 Dtool_nJyow3gR 7 859 3058 0 14 Dtool_nJyow3gR 5 4 this 3 3088  5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  5 light 1 3141  
1101 14 Dtool_nJyoUvhW 7 859 3058 0 14 Dtool_nJyoUvhW 4 4 this 3 3088  5 stage 1 3062  4 mode 1 2905  11 source_name 1 3100  
1102 14 Dtool_nJyoV2tb 7 859 3058 0 14 Dtool_nJyoV2tb 3 4 this 3 3088  5 stage 1 3062  4 mode 1 2905  
1103 14 Dtool_nJyo5OGR 7 860 3058 0 14 Dtool_nJyo5OGR 2 4 this 3 3088  5 stage 1 3062  
1104 14 Dtool_nJyoBBIE 6 861 3029 0 14 Dtool_nJyoBBIE 1 4 this 3 3088  
1105 14 Dtool_nJyobnHK 6 862 3029 0 14 Dtool_nJyobnHK 2 4 this 3 3088  5 stage 1 3062  
1106 14 Dtool_nJyoeJNN 6 863 2905 0 14 Dtool_nJyoeJNN 2 4 this 3 3088  5 stage 1 3062  
1107 14 Dtool_nJyorGMS 6 864 3100 0 14 Dtool_nJyorGMS 2 4 this 3 3088  5 stage 1 3062  
1108 14 Dtool_nJyoyomo 7 865 3140 2251 14 Dtool_nJyoyomo 2 4 this 3 3088  5 stage 1 3062  
1109 14 Dtool_nJyohRI_ 6 866 3052 0 14 Dtool_nJyohRI_ 2 4 this 3 3088  14 geom_rendering 1 3052  
1110 14 Dtool_nJyoleUJ 7 867 3057 0 14 Dtool_nJyoleUJ 0 
1111 14 Dtool_nJyo92CO 7 869 3058 0 14 Dtool_nJyo92CO 0 
1112 14 Dtool_nJyo0rhz 7 869 3058 0 14 Dtool_nJyo0rhz 1 3 tex 1 3153  
1113 14 Dtool_nJyoHcOV 7 870 3058 0 14 Dtool_nJyoHcOV 0 
1114 14 Dtool_nJyoSDxK 6 871 3029 0 14 Dtool_nJyoSDxK 1 4 this 3 3086  
1115 14 Dtool_nJyoa2tR 7 872 3153 0 14 Dtool_nJyoa2tR 1 4 this 3 3086  
1116 14 Dtool_nJyoiAmG 7 873 3058 0 14 Dtool_nJyoiAmG 0 
1117 14 Dtool_nJyoPts5 6 874 3052 0 14 Dtool_nJyoPts5 1 4 this 3 3086  
1118 14 Dtool_nJyoxAIF 7 875 3062 0 14 Dtool_nJyoxAIF 2 4 this 3 3086  1 n 1 3052  
1119 14 Dtool_nJyoJ52n 6 876 3029 0 14 Dtool_nJyoJ52n 2 4 this 3 3086  5 stage 1 3062  
1120 14 Dtool_nJyoNSWS 7 877 3153 0 14 Dtool_nJyoNSWS 2 4 this 3 3086  5 stage 1 3062  
1121 14 Dtool_nJyocPt4 6 878 3052 0 14 Dtool_nJyocPt4 2 4 this 3 3086  5 stage 1 3206  
1122 14 Dtool_nJyoRCki 6 879 3052 0 14 Dtool_nJyoRCki 1 4 this 3 3086  
1123 14 Dtool_nJyofsjm 7 880 3062 0 14 Dtool_nJyofsjm 2 4 this 3 3086  1 n 1 3052  
1124 14 Dtool_nJyoIoIC 6 881 3029 0 14 Dtool_nJyoIoIC 2 4 this 3 3086  5 stage 1 3062  
1125 14 Dtool_nJyoQEFa 6 882 3029 0 14 Dtool_nJyoQEFa 1 4 this 3 3086  
1126 14 Dtool_nJyoJvNO 6 883 3029 0 14 Dtool_nJyoJvNO 1 4 this 3 3086  
1127 14 Dtool_nJyoCbpG 7 884 3058 0 14 Dtool_nJyoCbpG 3 4 this 3 3086  5 stage 1 3062  3 tex 1 3153  
1128 14 Dtool_nJyopW4_ 7 885 3058 0 14 Dtool_nJyopW4_ 2 4 this 3 3086  5 stage 1 3062  
1129 14 Dtool_nJyo7rdo 7 886 3058 0 14 Dtool_nJyo7rdo 2 4 this 3 3086  5 stage 1 3062  
1130 14 Dtool_nJyopBrg 7 887 3058 0 14 Dtool_nJyopBrg 2 4 this 3 3086  5 stage 1 3062  
1131 14 Dtool_nJyo3f6O 7 888 3058 0 14 Dtool_nJyo3f6O 2 4 this 3 3086  5 stage 1 3062  
1132 14 Dtool_nJyopGJm 7 889 3057 0 14 Dtool_nJyopGJm 0 
1133 14 Dtool_nJyoMBDR 4 893 3053 0 14 Dtool_nJyoMBDR 2 4 this 3 3208  8 duration 1 3161  
1134 14 Dtool_nJyowhQH 6 894 3161 0 14 Dtool_nJyowhQH 1 4 this 3 3209  
1135 14 Dtool_nJyordrX 4 895 3053 0 14 Dtool_nJyordrX 2 4 this 3 3208  11 render_time 1 3161  
1136 14 Dtool_nJyozXEn 6 896 3161 0 14 Dtool_nJyozXEn 1 4 this 3 3209  
1137 14 Dtool_nJyoLlWf 6 897 3161 0 14 Dtool_nJyoLlWf 1 4 this 3 3209  
1138 14 Dtool_nJyood_2 4 898 3053 0 14 Dtool_nJyood_2 2 4 this 3 3209  3 out 1 3054  
1139 14 Dtool_nJyocHFH 4 899 3053 0 14 Dtool_nJyocHFH 3 4 this 3 3209  3 out 1 3054  12 indent_level 1 3052  
1140 14 Dtool_nJyoovWf 4 899 3053 0 14 Dtool_nJyoovWf 2 4 this 3 3209  3 out 1 3054  
1141 14 Dtool_nJyosxVE 7 900 3057 0 14 Dtool_nJyosxVE 0 
1142 14 Dtool_nJyocXSJ 7 903 3211 2464 14 Dtool_nJyocXSJ 0 
1143 14 Dtool_nJyoZ5gF 6 905 3029 0 14 Dtool_nJyoZ5gF 3 4 this 3 3211  12 bam_filename 1 3201  13 report_errors 1 3029  
1144 14 Dtool_nJyozHfD 6 905 3029 0 14 Dtool_nJyozHfD 2 4 this 3 3211  12 bam_filename 1 3201  
1145 14 Dtool_nJyoWZ_Q 6 905 3029 0 14 Dtool_nJyoWZ_Q 4 4 this 3 3211  2 in 1 3212  12 bam_filename 1 3100  13 report_errors 1 3029  
1146 14 Dtool_nJyodf6U 6 905 3029 0 14 Dtool_nJyodf6U 3 4 this 3 3211  2 in 1 3212  12 bam_filename 1 3100  
1147 14 Dtool_nJyoOKs6 6 905 3029 0 14 Dtool_nJyoOKs6 2 4 this 3 3211  2 in 1 3212  
1148 14 Dtool_nJyoERNy 6 906 3112 0 14 Dtool_nJyoERNy 1 4 this 3 3211  
1149 14 Dtool_nJyoyZvF 6 907 3029 0 14 Dtool_nJyoyZvF 1 4 this 3 3214  
1150 14 Dtool_nJyoxWXF 6 908 3029 0 14 Dtool_nJyoxWXF 1 4 this 3 3211  
1151 14 Dtool_nJyoYvGY 7 909 3101 1807 14 Dtool_nJyoYvGY 2 4 this 3 3211  13 report_errors 1 3029  
1152 14 Dtool_nJyohEoM 7 909 3101 1807 14 Dtool_nJyohEoM 1 4 this 3 3211  
1153 14 Dtool_nJyoUyE3 6 910 3029 0 14 Dtool_nJyoUyE3 3 4 this 3 3211  12 bam_filename 1 3201  13 report_errors 1 3029  
1154 14 Dtool_nJyoAij1 6 910 3029 0 14 Dtool_nJyoAij1 2 4 this 3 3211  12 bam_filename 1 3201  
1155 14 Dtool_nJyoMGvp 6 910 3029 0 14 Dtool_nJyoMGvp 4 4 this 3 3211  3 out 1 3054  12 bam_filename 1 3100  13 report_errors 1 3029  
1156 14 Dtool_nJyoHPsn 6 910 3029 0 14 Dtool_nJyoHPsn 3 4 this 3 3211  3 out 1 3054  12 bam_filename 1 3100  
1157 14 Dtool_nJyom4Ne 6 910 3029 0 14 Dtool_nJyom4Ne 2 4 this 3 3211  3 out 1 3054  
1158 14 Dtool_nJyot9v_ 6 911 3029 0 14 Dtool_nJyot9v_ 2 4 this 3 3211  6 object 1 3216  
1159 14 Dtool_nJyo7bSi 4 912 3053 0 14 Dtool_nJyo7bSi 1 4 this 3 3211  
1160 14 Dtool_nJyoSD_c 6 913 3029 0 14 Dtool_nJyoSD_c 1 4 this 3 3214  
1161 14 Dtool_nJyoYb0C 6 914 3029 0 14 Dtool_nJyoYb0C 1 4 this 3 3214  
1162 14 Dtool_nJyoW3p0 6 915 3052 0 14 Dtool_nJyoW3p0 1 4 this 3 3211  
1163 14 Dtool_nJyoKw61 6 916 3052 0 14 Dtool_nJyoKw61 1 4 this 3 3211  
1164 14 Dtool_nJyo2GM6 6 917 3218 0 14 Dtool_nJyo2GM6 1 4 this 3 3214  
1165 14 Dtool_nJyolKS_ 6 918 3052 0 14 Dtool_nJyolKS_ 1 4 this 3 3211  
1166 14 Dtool_nJyoNdy5 6 919 3052 0 14 Dtool_nJyoNdy5 1 4 this 3 3211  
1167 14 Dtool_nJyoRuSP 6 920 3219 0 14 Dtool_nJyoRuSP 1 4 this 3 3211  
1168 14 Dtool_nJyolFLg 6 921 3221 0 14 Dtool_nJyolFLg 1 4 this 3 3211  
1169 14 Dtool_nJyoMLb2 7 923 3096 0 14 Dtool_nJyoMLb2 6 9 up_vector 1 3150  12 eye_relative 1 3029  12 axial_rotate 1 3029  6 offset 1 3037  7 look_at 1 3141  13 look_at_point 1 3047  
1170 14 Dtool_nJyoZkox 7 924 3096 0 14 Dtool_nJyoZkox 0 
1171 14 Dtool_nJyoKjao 7 925 3096 0 14 Dtool_nJyoKjao 0 
1172 14 Dtool_nJyo5nHa 7 926 3096 0 14 Dtool_nJyo5nHa 0 
1173 14 Dtool_nJyoFuxD 6 927 3029 0 14 Dtool_nJyoFuxD 1 4 this 3 3223  
1174 14 Dtool_nJyoamrP 6 928 3150 0 14 Dtool_nJyoamrP 1 4 this 3 3223  
1175 14 Dtool_nJyoDPkT 6 929 3029 0 14 Dtool_nJyoDPkT 1 4 this 3 3223  
1176 14 Dtool_nJyojfqI 6 930 3029 0 14 Dtool_nJyojfqI 1 4 this 3 3223  
1177 14 Dtool_nJyoJ6nm 6 931 3037 0 14 Dtool_nJyoJ6nm 1 4 this 3 3223  
1178 14 Dtool_nJyoeWpx 6 932 3141 0 14 Dtool_nJyoeWpx 1 4 this 3 3223  
1179 14 Dtool_nJyoA3tu 6 933 3047 0 14 Dtool_nJyoA3tu 1 4 this 3 3223  
1180 14 Dtool_nJyoEm5V 7 934 3057 0 14 Dtool_nJyoEm5V 0 
1181 14 Dtool_nJyoZGLe 7 937 3225 2503 14 Dtool_nJyoZGLe 1 4 name 1 3100  
1182 14 Dtool_nJyo1vNW 4 938 3053 0 14 Dtool_nJyo1vNW 2 4 this 3 3225  4 lens 1 3226  
1183 14 Dtool_nJyo_2fA 4 939 3053 0 14 Dtool_nJyo_2fA 2 4 this 3 3225  4 lens 1 3229  
1184 14 Dtool_nJyod5Ow 7 940 3229 0 14 Dtool_nJyod5Ow 1 4 this 3 3230  
1185 14 Dtool_nJyoUo66 6 941 3029 0 14 Dtool_nJyoUo66 2 4 this 3 3225  3 pos 1 3047  
1186 14 Dtool_nJyoCdMV 4 942 3053 0 14 Dtool_nJyoCdMV 1 4 this 3 3225  
1187 14 Dtool_nJyoZDm8 4 943 3053 0 14 Dtool_nJyoZDm8 1 4 this 3 3225  
1188 14 Dtool_nJyoF6_K 7 944 3057 0 14 Dtool_nJyoF6_K 0 
1189 14 Dtool_nJyoDDNS 7 947 3232 2503 14 Dtool_nJyoDDNS 1 4 name 1 3100  
1190 14 Dtool_nJyo3QAN 4 948 3053 0 14 Dtool_nJyo3QAN 2 4 this 3 3232  6 active 1 3029  
1191 14 Dtool_nJyoQY9N 6 949 3029 0 14 Dtool_nJyoQY9N 1 4 this 3 3233  
1192 14 Dtool_nJyo1aj6 4 950 3053 0 14 Dtool_nJyo1aj6 2 4 this 3 3232  5 scene 1 3141  
1193 14 Dtool_nJyo_CJc 6 951 3141 0 14 Dtool_nJyo_CJc 1 4 this 3 3233  
1194 14 Dtool_nJyofkXi 6 952 3052 0 14 Dtool_nJyofkXi 1 4 this 3 3233  
1195 14 Dtool_nJyoHanc 6 953 3235 0 14 Dtool_nJyoHanc 2 4 this 3 3233  1 n 1 3052  
1196 14 Dtool_nJyoSRdR 4 954 3053 0 14 Dtool_nJyoSRdR 2 4 this 3 3232  4 mask 1 3107  
1197 14 Dtool_nJyoXHXi 7 955 3107 0 14 Dtool_nJyoXHXi 1 4 this 3 3233  
1198 14 Dtool_nJyodwtU 4 956 3053 0 14 Dtool_nJyodwtU 2 4 this 3 3232  11 cull_center 1 3141  
1199 14 Dtool_nJyoYdSn 6 957 3141 0 14 Dtool_nJyoYdSn 1 4 this 3 3233  
1200 14 Dtool_nJyoRVZ2 4 958 3053 0 14 Dtool_nJyoRVZ2 2 4 this 3 3232  5 state 1 3066  
1201 14 Dtool_nJyoD4v3 7 959 3066 0 14 Dtool_nJyoD4v3 1 4 this 3 3233  
1202 14 Dtool_nJyoCBek 4 960 3053 0 14 Dtool_nJyoCBek 2 4 this 3 3232  13 tag_state_key 1 3100  
1203 14 Dtool_nJyooh3v 6 961 3100 0 14 Dtool_nJyooh3v 1 4 this 3 3233  
1204 14 Dtool_nJyoT5SH 4 962 3053 0 14 Dtool_nJyoT5SH 3 4 this 3 3232  9 tag_state 1 3100  5 state 1 3066  
1205 14 Dtool_nJyotFjq 4 963 3053 0 14 Dtool_nJyotFjq 2 4 this 3 3232  9 tag_state 1 3100  
1206 14 Dtool_nJyo388o 6 964 3029 0 14 Dtool_nJyo388o 2 4 this 3 3233  9 tag_state 1 3100  
1207 14 Dtool_nJyo7bRn 7 965 3066 0 14 Dtool_nJyo7bRn 2 4 this 3 3233  9 tag_state 1 3100  
1208 14 Dtool_nJyorz56 4 966 3053 0 14 Dtool_nJyorz56 3 4 this 3 3232  9 node_path 1 3141  4 data 1 3208  
1209 14 Dtool_nJyogEb_ 6 967 3029 0 14 Dtool_nJyogEb_ 2 4 this 3 3232  9 node_path 1 3141  
1210 14 Dtool_nJyo9tPd 7 968 3208 2462 14 Dtool_nJyo9tPd 2 4 this 3 3233  9 node_path 1 3141  
1211 14 Dtool_nJyo72v7 4 969 3053 0 14 Dtool_nJyo72v7 2 4 this 3 3233  3 out 1 3054  
1212 14 Dtool_nJyoARBt 6 970 3052 0 14 Dtool_nJyoARBt 1 4 this 3 3232  
1213 14 Dtool_nJyo7jVC 7 971 3057 0 14 Dtool_nJyo7jVC 0 
1214 14 Dtool_nJyo1e7i 7 974 3096 0 14 Dtool_nJyo1e7i 2 9 reference 1 3141  10 properties 1 3052  
1215 14 Dtool_nJyoo3bC 7 974 3096 0 14 Dtool_nJyoo3bC 1 9 reference 1 3141  
1216 14 Dtool_nJyo9Dfu 6 975 3141 0 14 Dtool_nJyo9Dfu 1 4 this 3 3237  
1217 14 Dtool_nJyoNQdF 6 976 3052 0 14 Dtool_nJyoNQdF 1 4 this 3 3237  
1218 14 Dtool_nJyoeHvU 7 977 3057 0 14 Dtool_nJyoeHvU 0 
1219 14 Dtool_nJyoJenF 6 983 3052 0 14 Dtool_nJyoJenF 4 4 this 3 3239  4 name 1 3100  4 type 1 2970  4 sort 1 3052  
1220 14 Dtool_nJyobswe 4 984 3053 0 14 Dtool_nJyobswe 2 4 this 3 3239  9 bin_index 1 3052  
1221 14 Dtool_nJyoj_LX 6 985 3052 0 14 Dtool_nJyoj_LX 1 4 this 3 3240  
1222 14 Dtool_nJyooytP 6 986 3052 0 14 Dtool_nJyooytP 2 4 this 3 3240  1 n 1 3052  
1223 14 Dtool_nJyo5zCj 6 987 3052 0 14 Dtool_nJyo5zCj 2 4 this 3 3240  4 name 1 3100  
1224 14 Dtool_nJyoo76W 6 988 3100 0 14 Dtool_nJyoo76W 2 4 this 3 3240  9 bin_index 1 3052  
1225 14 Dtool_nJyoWa3_ 6 989 2970 0 14 Dtool_nJyoWa3_ 2 4 this 3 3240  4 name 1 3100  
1226 14 Dtool_nJyoxiQg 6 989 2970 0 14 Dtool_nJyoxiQg 2 4 this 3 3240  9 bin_index 1 3052  
1227 14 Dtool_nJyoBZ6R 4 990 3053 0 14 Dtool_nJyoBZ6R 3 4 this 3 3239  4 name 1 3100  4 type 1 2970  
1228 14 Dtool_nJyo8mzD 4 990 3053 0 14 Dtool_nJyo8mzD 3 4 this 3 3239  9 bin_index 1 3052  4 type 1 2970  
1229 14 Dtool_nJyowm68 6 991 3052 0 14 Dtool_nJyowm68 2 4 this 3 3240  4 name 1 3100  
1230 14 Dtool_nJyoJVUe 6 991 3052 0 14 Dtool_nJyoJVUe 2 4 this 3 3240  9 bin_index 1 3052  
1231 14 Dtool_nJyoZvJ2 4 992 3053 0 14 Dtool_nJyoZvJ2 3 4 this 3 3239  4 name 1 3100  4 sort 1 3052  
1232 14 Dtool_nJyoU8RN 4 992 3053 0 14 Dtool_nJyoU8RN 3 4 this 3 3239  9 bin_index 1 3052  4 sort 1 3052  
1233 14 Dtool_nJyocE_B 6 993 3029 0 14 Dtool_nJyocE_B 2 4 this 3 3240  4 name 1 3100  
1234 14 Dtool_nJyowCRb 6 993 3029 0 14 Dtool_nJyowCRb 2 4 this 3 3240  9 bin_index 1 3052  
1235 14 Dtool_nJyoUwxh 4 994 3053 0 14 Dtool_nJyoUwxh 3 4 this 3 3239  4 name 1 3100  6 active 1 3029  
1236 14 Dtool_nJyogtxI 4 994 3053 0 14 Dtool_nJyogtxI 3 4 this 3 3239  9 bin_index 1 3052  6 active 1 3029  
1237 14 Dtool_nJyoShRp 4 995 3053 0 14 Dtool_nJyoShRp 2 4 this 3 3240  3 out 1 3054  
1238 14 Dtool_nJyo_lYP 6 996 3239 0 14 Dtool_nJyo_lYP 0 
1239 14 Dtool_nJyoh4qk 7 998 3096 0 14 Dtool_nJyoh4qk 0 
1240 14 Dtool_nJyoH0FU 7 999 3057 0 14 Dtool_nJyoH0FU 0 
1241 14 Dtool_nJyoFmND 7 1002 3242 2560 14 Dtool_nJyoFmND 1 4 name 1 3100  
1242 14 Dtool_nJyoetKC 6 1003 3124 0 14 Dtool_nJyoetKC 1 4 this 3 3243  
1243 14 Dtool_nJyoCHLU 4 1004 3053 0 14 Dtool_nJyoCHLU 2 4 this 3 3242  5 color 1 3124  
1244 14 Dtool_nJyopsIS 6 1005 3047 0 14 Dtool_nJyopsIS 1 4 this 3 3243  
1245 14 Dtool_nJyoE91O 4 1006 3053 0 14 Dtool_nJyoE91O 2 4 this 3 3242  5 point 1 3047  
1246 14 Dtool_nJyoFGi1 6 1007 3150 0 14 Dtool_nJyoFGi1 1 4 this 3 3243  
1247 14 Dtool_nJyoFGF_ 4 1008 3053 0 14 Dtool_nJyoFGF_ 2 4 this 3 3242  9 direction 1 3150  
1248 14 Dtool_nJyov7PH 7 1009 3057 0 14 Dtool_nJyov7PH 0 
1249 14 Dtool_nJyo_BbQ 7 1012 3058 0 14 Dtool_nJyo_BbQ 1 9 draw_mask 1 3107  
1250 14 Dtool_nJyo__hP 7 1012 3058 0 14 Dtool_nJyo__hP 0 
1251 14 Dtool_nJyovaud 7 1013 3058 0 14 Dtool_nJyovaud 1 9 draw_mask 1 3107  
1252 14 Dtool_nJyoO_1c 7 1013 3058 0 14 Dtool_nJyoO_1c 0 
1253 14 Dtool_nJyo6qM0 7 1014 3058 0 14 Dtool_nJyo6qM0 2 8 new_mask 1 3107  14 bits_to_change 1 3107  
1254 14 Dtool_nJyo5CgI 7 1015 3107 0 14 Dtool_nJyo5CgI 1 4 this 3 3245  
1255 14 Dtool_nJyoygA4 7 1016 3107 0 14 Dtool_nJyoygA4 1 4 this 3 3245  
1256 14 Dtool_nJyoCaHD 7 1017 3057 0 14 Dtool_nJyoCaHD 0 
1257 14 Dtool_nJyonKZh 7 1020 3247 2582 14 Dtool_nJyonKZh 1 4 name 1 3100  
1258 14 Dtool_nJyoRFoz 4 1021 3053 0 14 Dtool_nJyoRFoz 3 4 this 3 3247  2 in 1 3037  3 out 1 3037  
1259 14 Dtool_nJyohpdI 6 1022 3029 0 14 Dtool_nJyohpdI 4 4 this 3 3247  5 index 1 3052  2 in 1 3037  3 out 1 3037  
1260 14 Dtool_nJyo25DC 4 1023 3053 0 14 Dtool_nJyo25DC 1 4 this 3 3247  
1261 14 Dtool_nJyob65Z 6 1024 3052 0 14 Dtool_nJyob65Z 1 4 this 3 3248  
1262 14 Dtool_nJyoSHPo 6 1025 3037 0 14 Dtool_nJyoSHPo 2 4 this 3 3248  5 index 1 3052  
1263 14 Dtool_nJyoWO_6 6 1026 3037 0 14 Dtool_nJyoWO_6 2 4 this 3 3248  5 index 1 3052  
1264 14 Dtool_nJyoXVB9 6 1027 3052 0 14 Dtool_nJyoXVB9 1 4 this 3 3248  
1265 14 Dtool_nJyo0Jag 6 1028 3052 0 14 Dtool_nJyo0Jag 1 4 this 3 3248  
1266 14 Dtool_nJyos5Rf 4 1029 3053 0 14 Dtool_nJyos5Rf 2 4 this 3 3247  5 index 1 3052  
1267 14 Dtool_nJyokueh 4 1030 3053 0 14 Dtool_nJyokueh 1 4 this 3 3247  
1268 14 Dtool_nJyoPHp_ 4 1031 3053 0 14 Dtool_nJyoPHp_ 2 4 this 3 3247  6 center 1 3047  
1269 14 Dtool_nJyo8mat 6 1032 3047 0 14 Dtool_nJyo8mat 1 4 this 3 3248  
1270 14 Dtool_nJyolHCR 7 1033 3057 0 14 Dtool_nJyolHCR 0 
1271 14 Dtool_nJyowaxw 7 1036 3250 2587 14 Dtool_nJyowaxw 1 4 name 1 3100  
1272 14 Dtool_nJyobh3A 4 1037 3053 0 14 Dtool_nJyobh3A 2 4 this 3 3250  1 t 1 3037  
1273 14 Dtool_nJyoXLep 6 1038 3037 0 14 Dtool_nJyoXLep 1 4 this 3 3251  
1274 14 Dtool_nJyorHme 7 1039 3057 0 14 Dtool_nJyorHme 0 
1275 14 Dtool_nJyovkRm 7 1042 3168 2590 14 Dtool_nJyovkRm 0 
1276 14 Dtool_nJyoXDAx 7 1042 3168 2590 14 Dtool_nJyoXDAx 1 4 copy 1 3253  
1277 14 Dtool_nJyojE06 6 1043 3168 0 14 Dtool_nJyojE06 2 4 this 3 3168  4 copy 1 3253  
1278 14 Dtool_nJyoBhP7 4 1045 3053 0 14 Dtool_nJyoBhP7 2 4 this 3 3168  4 name 1 3156  
1279 14 Dtool_nJyoXg1Z 6 1046 3029 0 14 Dtool_nJyoXg1Z 2 4 this 3 3168  4 name 1 3156  
1280 14 Dtool_nJyohz4C 4 1047 3053 0 14 Dtool_nJyohz4C 2 4 this 3 3168  5 other 1 3253  
1281 14 Dtool_nJyoFH6l 4 1048 3053 0 14 Dtool_nJyoFH6l 2 4 this 3 3168  5 other 1 3253  
1282 14 Dtool_nJyosQx_ 4 1049 3053 0 14 Dtool_nJyosQx_ 1 4 this 3 3168  
1283 14 Dtool_nJyo6G0r 6 1050 3029 0 14 Dtool_nJyo6G0r 2 4 this 3 3253  4 name 1 3156  
1284 14 Dtool_nJyoYUtu 4 1051 3053 0 14 Dtool_nJyoYUtu 1 4 this 3 3168  
1285 14 Dtool_nJyoTOFH 6 1052 3052 0 14 Dtool_nJyoTOFH 1 4 this 3 3253  
1286 14 Dtool_nJyo6eLj 7 1053 3156 0 14 Dtool_nJyo6eLj 2 4 this 3 3253  5 index 1 3052  
1287 14 Dtool_nJyoBMpK 7 1054 3156 0 14 Dtool_nJyoBMpK 2 4 this 3 3253  5 index 1 3052  
1288 14 Dtool_nJyofSXc 4 1055 3053 0 14 Dtool_nJyofSXc 2 4 this 3 3253  3 out 1 3054  
1289 14 Dtool_nJyou3zc 4 1056 3053 0 14 Dtool_nJyou3zc 3 4 this 3 3253  3 out 1 3054  12 indent_level 1 3052  
1290 14 Dtool_nJyo_B49 4 1056 3053 0 14 Dtool_nJyo_B49 2 4 this 3 3253  3 out 1 3054  
1291 14 Dtool_nJyo1lQT 4 1062 3053 0 14 Dtool_nJyo1lQT 2 4 this 3 3255  3 out 1 3054  
1292 14 Dtool_nJyoJusW 4 1063 3053 0 14 Dtool_nJyoJusW 3 4 this 3 3255  3 out 1 3054  12 indent_level 1 3052  
1293 14 Dtool_nJyoa_Tf 4 1063 3053 0 14 Dtool_nJyoa_Tf 2 4 this 3 3255  3 out 1 3054  
1294 14 Dtool_nJyokoD_ 7 1064 3057 0 14 Dtool_nJyokoD_ 0 
1295 14 Dtool_nJyo682h 7 1058 3111 1908 14 Dtool_nJyo682h 1 4 this 3 3257  
1296 14 Dtool_nJyon_a1 7 1059 3257 2610 14 Dtool_nJyon_a1 1 4 this 3 3111  
1297 14 Dtool_nJyoP0SH 7 1060 3225 2503 14 Dtool_nJyoP0SH 1 4 this 3 3257  
1298 14 Dtool_nJyos_CG 7 1061 3257 2610 14 Dtool_nJyos_CG 1 4 this 3 3225  
1299 14 Dtool_nJyo5YaZ 7 1068 3260 2615 14 Dtool_nJyo5YaZ 1 4 copy 1 3258  
1300 14 Dtool_nJyo19et 7 1068 3260 2615 14 Dtool_nJyo19et 1 5 flags 1 3052  
1301 14 Dtool_nJyoMYtK 7 1068 3260 2615 14 Dtool_nJyoMYtK 0 
1302 14 Dtool_nJyoERe5 6 1069 3260 0 14 Dtool_nJyoERe5 2 4 this 3 3260  4 copy 1 3258  
1303 14 Dtool_nJyoGDaf 4 1070 3053 0 14 Dtool_nJyoGDaf 2 4 this 3 3260  5 flags 1 3052  
1304 14 Dtool_nJyojYev 6 1071 3052 0 14 Dtool_nJyojYev 1 4 this 3 3258  
1305 14 Dtool_nJyoq8fi 7 1083 3261 0 14 Dtool_nJyoq8fi 0 
1306 14 Dtool_nJyoNTOF 6 1084 3052 0 14 Dtool_nJyoNTOF 4 4 this 3 3262  8 filename 1 3201  11 search_path 1 3264  7 results 1 3267  
1307 14 Dtool_nJyoPkHz 7 1085 3101 1807 14 Dtool_nJyoPkHz 3 4 this 3 3262  8 filename 1 3201  7 options 1 3258  
1308 14 Dtool_nJyoz7yV 7 1085 3101 1807 14 Dtool_nJyoz7yV 2 4 this 3 3262  8 filename 1 3201  
1309 14 Dtool_nJyouYoe 6 1086 3030 0 14 Dtool_nJyouYoe 4 4 this 3 3261  10 event_name 1 3100  8 filename 1 3201  6 search 1 3029  
1310 14 Dtool_nJyonUlc 6 1086 3030 0 14 Dtool_nJyonUlc 3 4 this 3 3261  10 event_name 1 3100  8 filename 1 3201  
1311 14 Dtool_nJyoE4Qu 6 1087 3029 0 14 Dtool_nJyoE4Qu 2 4 this 3 3261  2 id 1 3030  
1312 14 Dtool_nJyo0kTC 7 1088 3101 1807 14 Dtool_nJyo0kTC 2 4 this 3 3261  2 id 1 3030  
1313 14 Dtool_nJyoohem 7 1076 3267 2618 14 Dtool_nJyoohem 0 
1314 14 Dtool_nJyoRMrN 7 1076 3267 2618 14 Dtool_nJyoRMrN 1 4 copy 1 3268  
1315 14 Dtool_nJyopwhN 6 1077 3267 0 14 Dtool_nJyopwhN 2 4 this 3 3267  4 copy 1 3268  
1316 14 Dtool_nJyozgfE 4 1079 3053 0 14 Dtool_nJyozgfE 1 4 this 3 3267  
1317 14 Dtool_nJyolk1z 6 1080 3052 0 14 Dtool_nJyolk1z 1 4 this 3 3268  
1318 14 Dtool_nJyo5XxT 6 1081 3201 0 14 Dtool_nJyo5XxT 2 4 this 3 3268  1 n 1 3052  
1319 14 Dtool_nJyozNYp 6 1082 3270 0 14 Dtool_nJyozNYp 2 4 this 3 3268  1 n 1 3052  
1320 14 Dtool_nJyoQW1H 6 1091 3100 0 14 Dtool_nJyoQW1H 1 4 this 3 3271  
1321 14 Dtool_nJyoaK7M 6 1092 3100 0 14 Dtool_nJyoaK7M 1 4 this 3 3271  
1322 14 Dtool_nJyoq3ZJ 6 1093 3100 0 14 Dtool_nJyoq3ZJ 1 4 this 3 3271  
1323 14 Dtool_nJyoyEHo 6 1094 3029 0 14 Dtool_nJyoyEHo 1 4 this 3 3271  
1324 14 Dtool_nJyoxWmb 7 1095 3057 0 14 Dtool_nJyoxWmb 0 
1325 14 Dtool_nJyo90Sf 6 1098 3052 0 14 Dtool_nJyo90Sf 1 4 this 3 3273  
1326 14 Dtool_nJyookMd 6 1099 3270 0 14 Dtool_nJyookMd 2 4 this 3 3273  1 n 1 3052  
1327 14 Dtool_nJyoEeKb 6 1100 3270 0 14 Dtool_nJyoEeKb 2 4 this 3 3275  9 extension 1 3100  
1328 14 Dtool_nJyoz1Pq 4 1101 3053 0 14 Dtool_nJyoz1Pq 3 4 this 3 3273  3 out 1 3054  12 indent_level 1 3052  
1329 14 Dtool_nJyoBxUL 4 1101 3053 0 14 Dtool_nJyoBxUL 2 4 this 3 3273  3 out 1 3054  
1330 14 Dtool_nJyoTXOP 6 1102 3275 0 14 Dtool_nJyoTXOP 0 
1331 14 Dtool_nJyotZnw 7 1104 3173 2642 14 Dtool_nJyotZnw 0 
1332 14 Dtool_nJyo1XPz 7 1104 3173 2642 14 Dtool_nJyo1XPz 1 4 copy 1 3276  
1333 14 Dtool_nJyoggqO 6 1105 3173 0 14 Dtool_nJyoggqO 2 4 this 3 3173  4 copy 1 3276  
1334 14 Dtool_nJyodzS8 4 1107 3053 0 14 Dtool_nJyodzS8 2 4 this 3 3173  13 node_material 1 3171  
1335 14 Dtool_nJyoLMue 6 1108 3029 0 14 Dtool_nJyoLMue 2 4 this 3 3173  13 node_material 1 3171  
1336 14 Dtool_nJyoNx0z 4 1109 3053 0 14 Dtool_nJyoNx0z 2 4 this 3 3173  5 other 1 3276  
1337 14 Dtool_nJyo8Nhd 4 1110 3053 0 14 Dtool_nJyo8Nhd 2 4 this 3 3173  5 other 1 3276  
1338 14 Dtool_nJyoxQ1g 4 1111 3053 0 14 Dtool_nJyoxQ1g 1 4 this 3 3173  
1339 14 Dtool_nJyoTQqF 6 1112 3029 0 14 Dtool_nJyoTQqF 2 4 this 3 3276  8 material 1 3171  
1340 14 Dtool_nJyo_GvS 4 1113 3053 0 14 Dtool_nJyo_GvS 1 4 this 3 3173  
1341 14 Dtool_nJyoFNZE 7 1114 3171 0 14 Dtool_nJyoFNZE 2 4 this 3 3276  4 name 1 3100  
1342 14 Dtool_nJyoXTd2 6 1115 3052 0 14 Dtool_nJyoXTd2 1 4 this 3 3276  
1343 14 Dtool_nJyoejD6 7 1116 3171 0 14 Dtool_nJyoejD6 2 4 this 3 3276  5 index 1 3052  
1344 14 Dtool_nJyotWZS 7 1117 3171 0 14 Dtool_nJyotWZS 2 4 this 3 3276  5 index 1 3052  
1345 14 Dtool_nJyo_GVu 4 1118 3053 0 14 Dtool_nJyo_GVu 2 4 this 3 3276  3 out 1 3054  
1346 14 Dtool_nJyoMzN1 4 1119 3053 0 14 Dtool_nJyoMzN1 3 4 this 3 3276  3 out 1 3054  12 indent_level 1 3052  
1347 14 Dtool_nJyosTZG 4 1119 3053 0 14 Dtool_nJyosTZG 2 4 this 3 3276  3 out 1 3054  
1348 14 Dtool_nJyoUtdT 7 1121 3278 2662 14 Dtool_nJyoUtdT 1 4 name 1 3100  
1349 14 Dtool_nJyodAt4 4 1123 3053 0 14 Dtool_nJyodAt4 2 4 this 3 3278  18 preserve_transform 1 2989  
1350 14 Dtool_nJyoEjAF 6 1124 2989 0 14 Dtool_nJyoEjAF 1 4 this 3 3279  
1351 14 Dtool_nJyojTxX 4 1125 3053 0 14 Dtool_nJyojTxX 2 4 this 3 3278  11 attrib_mask 1 3052  
1352 14 Dtool_nJyoEXJC 6 1126 3052 0 14 Dtool_nJyoEXJC 1 4 this 3 3279  
1353 14 Dtool_nJyoYGvp 7 1127 3057 0 14 Dtool_nJyoYGvp 0 
1354 14 Dtool_nJyo5EJQ 6 1130 3029 0 14 Dtool_nJyo5EJQ 1 8 filename 1 3100  
1355 14 Dtool_nJyohyNk 6 1131 3029 0 14 Dtool_nJyohyNk 1 8 filename 1 3100  
1356 14 Dtool_nJyo0OhZ 7 1132 3101 1807 14 Dtool_nJyo0OhZ 1 8 filename 1 3100  
1357 14 Dtool_nJyojmu1 4 1133 3053 0 14 Dtool_nJyojmu1 2 8 filename 1 3100  5 model 1 3101  
1358 14 Dtool_nJyoAecZ 4 1134 3053 0 14 Dtool_nJyoAecZ 1 8 filename 1 3100  
1359 14 Dtool_nJyo4zQY 4 1135 3053 0 14 Dtool_nJyo4zQY 0 
1360 14 Dtool_nJyoqWBO 6 1136 3052 0 14 Dtool_nJyoqWBO 0 
1361 14 Dtool_nJyoBOv6 4 1137 3053 0 14 Dtool_nJyoBOv6 1 3 out 1 3054  
1362 14 Dtool_nJyopGeH 4 1138 3053 0 14 Dtool_nJyopGeH 1 3 out 1 3054  
1363 14 Dtool_nJyoeSI8 7 1141 3281 2675 14 Dtool_nJyoeSI8 1 4 name 1 3100  
1364 14 Dtool_nJyo86vR 7 1142 3057 0 14 Dtool_nJyo86vR 0 
1365 14 Dtool_nJyo3iXv 7 1145 3143 2678 14 Dtool_nJyo3iXv 0 
1366 14 Dtool_nJyo2o9H 7 1145 3143 2678 14 Dtool_nJyo2o9H 1 4 copy 1 3282  
1367 14 Dtool_nJyohGif 6 1146 3143 0 14 Dtool_nJyohGif 2 4 this 3 3143  4 copy 1 3282  
1368 14 Dtool_nJyooj7i 4 1148 3053 0 14 Dtool_nJyooj7i 2 4 this 3 3143  9 node_path 1 3141  
1369 14 Dtool_nJyo_4Zw 6 1149 3029 0 14 Dtool_nJyo_4Zw 2 4 this 3 3143  9 node_path 1 3141  
1370 14 Dtool_nJyoD16c 4 1150 3053 0 14 Dtool_nJyoD16c 2 4 this 3 3143  5 other 1 3282  
1371 14 Dtool_nJyoPgsC 4 1151 3053 0 14 Dtool_nJyoPgsC 2 4 this 3 3143  5 other 1 3282  
1372 14 Dtool_nJyofBHO 4 1152 3053 0 14 Dtool_nJyofBHO 1 4 this 3 3143  
1373 14 Dtool_nJyoW5qJ 6 1153 3029 0 14 Dtool_nJyoW5qJ 2 4 this 3 3282  4 path 1 3141  
1374 14 Dtool_nJyoOyfl 4 1154 3053 0 14 Dtool_nJyoOyfl 1 4 this 3 3143  
1375 14 Dtool_nJyoYTzI 6 1155 3029 0 14 Dtool_nJyoYTzI 1 4 this 3 3282  
1376 14 Dtool_nJyo6KKi 6 1156 3052 0 14 Dtool_nJyo6KKi 1 4 this 3 3282  
1377 14 Dtool_nJyo02PJ 7 1157 3140 2251 14 Dtool_nJyo02PJ 2 4 this 3 3282  5 index 1 3052  
1378 14 Dtool_nJyoyiIl 7 1158 3140 2251 14 Dtool_nJyoyiIl 2 4 this 3 3282  5 index 1 3052  
1379 14 Dtool_nJyo3QA8 4 1159 3053 0 14 Dtool_nJyo3QA8 1 4 this 3 3282  
1380 14 Dtool_nJyoRtqi 4 1159 3053 0 14 Dtool_nJyoRtqi 3 4 this 3 3282  3 out 1 3054  12 indent_level 1 3052  
1381 14 Dtool_nJyo1d_6 4 1159 3053 0 14 Dtool_nJyo1d_6 2 4 this 3 3282  3 out 1 3054  
1382 14 Dtool_nJyoXeNM 7 1160 3143 2678 14 Dtool_nJyoXeNM 2 4 this 3 3282  4 path 1 3100  
1383 14 Dtool_nJyob1jO 4 1161 3053 0 14 Dtool_nJyob1jO 2 4 this 3 3143  5 other 1 3141  
1384 14 Dtool_nJyoqRqE 4 1162 3053 0 14 Dtool_nJyoqRqE 2 4 this 3 3143  5 other 1 3141  
1385 14 Dtool_nJyo7UQK 4 1163 3053 0 14 Dtool_nJyo7UQK 1 4 this 3 3143  
1386 14 Dtool_nJyo583n 4 1164 3053 0 14 Dtool_nJyo583n 1 4 this 3 3143  
1387 14 Dtool_nJyoiPiS 4 1165 3053 0 14 Dtool_nJyoiPiS 1 4 this 3 3143  
1388 14 Dtool_nJyoLTV5 4 1166 3053 0 14 Dtool_nJyoLTV5 1 4 this 3 3143  
1389 14 Dtool_nJyoMNIX 4 1167 3053 0 14 Dtool_nJyoMNIX 1 4 this 3 3143  
1390 14 Dtool_nJyoNmTQ 7 1168 3107 0 14 Dtool_nJyoNmTQ 1 4 this 3 3282  
1391 14 Dtool_nJyo__ns 4 1169 3053 0 14 Dtool_nJyo__ns 4 4 this 3 3143  8 new_mask 1 3107  14 bits_to_change 1 3107  9 node_type 1 3057  
1392 14 Dtool_nJyon9QS 4 1169 3053 0 14 Dtool_nJyon9QS 3 4 this 3 3143  8 new_mask 1 3107  14 bits_to_change 1 3107  
1393 14 Dtool_nJyoJ2mf 4 1169 3053 0 14 Dtool_nJyoJ2mf 2 4 this 3 3143  8 new_mask 1 3107  
1394 14 Dtool_nJyoKnbq 4 1170 3053 0 14 Dtool_nJyoKnbq 3 4 this 3 3143  5 color 1 3124  8 priority 1 3052  
1395 14 Dtool_nJyopnAB 4 1170 3053 0 14 Dtool_nJyopnAB 2 4 this 3 3143  5 color 1 3124  
1396 14 Dtool_nJyoOAR_ 4 1170 3053 0 14 Dtool_nJyoOAR_ 6 4 this 3 3143  1 r 1 3037  1 g 1 3037  1 b 1 3037  1 a 1 3037  8 priority 1 3052  
1397 14 Dtool_nJyoM8OR 4 1170 3053 0 14 Dtool_nJyoM8OR 5 4 this 3 3143  1 r 1 3037  1 g 1 3037  1 b 1 3037  1 a 1 3037  
1398 14 Dtool_nJyofNdA 4 1170 3053 0 14 Dtool_nJyofNdA 4 4 this 3 3143  1 r 1 3037  1 g 1 3037  1 b 1 3037  
1399 14 Dtool_nJyouSFB 4 1171 3053 0 14 Dtool_nJyouSFB 2 4 this 3 3282  3 out 1 3054  
1400 14 Dtool_nJyocn9H 4 1172 3053 0 14 Dtool_nJyocn9H 3 4 this 3 3282  3 out 1 3054  12 indent_level 1 3052  
1401 14 Dtool_nJyo_nJZ 4 1172 3053 0 14 Dtool_nJyo_nJZ 2 4 this 3 3282  3 out 1 3054  
1402 14 Dtool_nJyoV2Ej 7 1175 3284 0 14 Dtool_nJyoV2Ej 3 2 np 1 3140  5 start 1 3144  3 end 1 3144  
1403 14 Dtool_nJyonzZ1 7 1175 3284 0 14 Dtool_nJyonzZ1 4 2 np 1 3140  5 start 1 3144  3 end 1 3144  3 wrt 1 3140  
1404 14 Dtool_nJyomjeD 7 1175 3284 0 14 Dtool_nJyomjeD 7 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  
1405 14 Dtool_nJyo_CcA 7 1175 3284 0 14 Dtool_nJyo_CcA 8 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  3 wrt 1 3140  
1406 14 Dtool_nJyoZRn_ 7 1176 3057 0 14 Dtool_nJyoZRn_ 0 
1407 14 Dtool_nJyoqTQ4 7 1179 3285 0 14 Dtool_nJyoqTQ4 3 2 np 1 3140  5 start 1 3147  3 end 1 3147  
1408 14 Dtool_nJyoziY5 7 1179 3285 0 14 Dtool_nJyoziY5 4 2 np 1 3140  5 start 1 3147  3 end 1 3147  3 wrt 1 3140  
1409 14 Dtool_nJyor6ke 7 1179 3285 0 14 Dtool_nJyor6ke 7 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  
1410 14 Dtool_nJyobDib 7 1179 3285 0 14 Dtool_nJyobDib 8 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  3 wrt 1 3140  
1411 14 Dtool_nJyoO8qB 4 1180 3053 0 14 Dtool_nJyoO8qB 1 4 this 3 3285  
1412 14 Dtool_nJyo_PLx 4 1181 3053 0 14 Dtool_nJyo_PLx 1 4 this 3 3285  
1413 14 Dtool_nJyohuir 7 1182 3057 0 14 Dtool_nJyohuir 0 
1414 14 Dtool_nJyoP7Ek 7 1184 3286 0 14 Dtool_nJyoP7Ek 3 2 np 1 3140  5 start 1 3147  3 end 1 3147  
1415 14 Dtool_nJyocsJY 7 1184 3286 0 14 Dtool_nJyocsJY 4 2 np 1 3140  5 start 1 3147  3 end 1 3147  3 wrt 1 3140  
1416 14 Dtool_nJyooNcS 7 1184 3286 0 14 Dtool_nJyooNcS 7 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  
1417 14 Dtool_nJyo3jPG 7 1184 3286 0 14 Dtool_nJyo3jPG 8 2 np 1 3140  2 sx 1 3037  2 sy 1 3037  2 sz 1 3037  2 ex 1 3037  2 ey 1 3037  2 ez 1 3037  3 wrt 1 3140  
1418 14 Dtool_nJyo_dcM 7 1185 3057 0 14 Dtool_nJyo_dcM 0 
1419 14 Dtool_nJyoEMQr 7 1188 3287 0 14 Dtool_nJyoEMQr 3 2 np 1 3140  5 start 1 3152  3 end 1 3152  
1420 14 Dtool_nJyoUrVf 7 1188 3287 0 14 Dtool_nJyoUrVf 4 2 np 1 3140  5 start 1 3152  3 end 1 3152  3 wrt 1 3140  
1421 14 Dtool_nJyonAHg 7 1188 3287 0 14 Dtool_nJyonAHg 9 2 np 1 3140  2 sr 1 3037  2 sg 1 3037  2 sb 1 3037  2 sa 1 3037  2 er 1 3037  2 eg 1 3037  2 eb 1 3037  2 ea 1 3037  
1422 14 Dtool_nJyoALC9 7 1188 3287 0 14 Dtool_nJyoALC9 10 2 np 1 3140  2 sr 1 3037  2 sg 1 3037  2 sb 1 3037  2 sa 1 3037  2 er 1 3037  2 eg 1 3037  2 eb 1 3037  2 ea 1 3037  3 wrt 1 3140  
1423 14 Dtool_nJyouh6o 7 1189 3057 0 14 Dtool_nJyouh6o 0 
1424 14 Dtool_nJyo_6uU 7 1192 3288 0 14 Dtool_nJyo_6uU 5 2 np 1 3140  6 pstart 1 3144  4 pend 1 3144  6 hstart 1 3147  4 hend 1 3147  
1425 14 Dtool_nJyoL66r 7 1192 3288 0 14 Dtool_nJyoL66r 6 2 np 1 3140  6 pstart 1 3144  4 pend 1 3144  6 hstart 1 3147  4 hend 1 3147  3 wrt 1 3140  
1426 14 Dtool_nJyoB14f 7 1192 3288 0 14 Dtool_nJyoB14f 13 2 np 1 3140  3 psx 1 3037  3 psy 1 3037  3 psz 1 3037  3 pex 1 3037  3 pey 1 3037  3 pez 1 3037  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  
1427 14 Dtool_nJyoFS2c 7 1192 3288 0 14 Dtool_nJyoFS2c 14 2 np 1 3140  3 psx 1 3037  3 psy 1 3037  3 psz 1 3037  3 pex 1 3037  3 pey 1 3037  3 pez 1 3037  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  3 wrt 1 3140  
1428 14 Dtool_nJyoeK94 4 1193 3053 0 14 Dtool_nJyoeK94 1 4 this 3 3288  
1429 14 Dtool_nJyoCAL_ 4 1194 3053 0 14 Dtool_nJyoCAL_ 1 4 this 3 3288  
1430 14 Dtool_nJyoDdZH 7 1195 3057 0 14 Dtool_nJyoDdZH 0 
1431 14 Dtool_nJyo1FgG 7 1197 3289 0 14 Dtool_nJyo1FgG 5 2 np 1 3140  6 hstart 1 3147  4 hend 1 3147  6 sstart 1 3147  4 send 1 3147  
1432 14 Dtool_nJyoPeDL 7 1197 3289 0 14 Dtool_nJyoPeDL 6 2 np 1 3140  6 hstart 1 3147  4 hend 1 3147  6 sstart 1 3147  4 send 1 3147  3 wrt 1 3140  
1433 14 Dtool_nJyoLBe9 7 1197 3289 0 14 Dtool_nJyoLBe9 13 2 np 1 3140  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  3 ssx 1 3037  3 ssy 1 3037  3 ssz 1 3037  3 sex 1 3037  3 sey 1 3037  3 sez 1 3037  
1434 14 Dtool_nJyoiyRx 7 1197 3289 0 14 Dtool_nJyoiyRx 14 2 np 1 3140  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  3 ssx 1 3037  3 ssy 1 3037  3 ssz 1 3037  3 sex 1 3037  3 sey 1 3037  3 sez 1 3037  3 wrt 1 3140  
1435 14 Dtool_nJyoHLXo 4 1198 3053 0 14 Dtool_nJyoHLXo 1 4 this 3 3289  
1436 14 Dtool_nJyoqjaH 4 1199 3053 0 14 Dtool_nJyoqjaH 1 4 this 3 3289  
1437 14 Dtool_nJyoB8I8 7 1200 3057 0 14 Dtool_nJyoB8I8 0 
1438 14 Dtool_nJyoP4RJ 7 1202 3290 0 14 Dtool_nJyoP4RJ 7 2 np 1 3140  6 pstart 1 3144  4 pend 1 3144  6 hstart 1 3147  4 hend 1 3147  6 sstart 1 3147  4 send 1 3147  
1439 14 Dtool_nJyotRMm 7 1202 3290 0 14 Dtool_nJyotRMm 8 2 np 1 3140  6 pstart 1 3144  4 pend 1 3144  6 hstart 1 3147  4 hend 1 3147  6 sstart 1 3147  4 send 1 3147  3 wrt 1 3140  
1440 14 Dtool_nJyouyws 7 1202 3290 0 14 Dtool_nJyouyws 19 2 np 1 3140  3 psx 1 3037  3 psy 1 3037  3 psz 1 3037  3 pex 1 3037  3 pey 1 3037  3 pez 1 3037  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  3 ssx 1 3037  3 ssy 1 3037  3 ssz 1 3037  3 sex 1 3037  3 sey 1 3037  3 sez 1 3037  
1441 14 Dtool_nJyoPFig 7 1202 3290 0 14 Dtool_nJyoPFig 20 2 np 1 3140  3 psx 1 3037  3 psy 1 3037  3 psz 1 3037  3 pex 1 3037  3 pey 1 3037  3 pez 1 3037  3 hsx 1 3037  3 hsy 1 3037  3 hsz 1 3037  3 hex 1 3037  3 hey 1 3037  3 hez 1 3037  3 ssx 1 3037  3 ssy 1 3037  3 ssz 1 3037  3 sex 1 3037  3 sey 1 3037  3 sez 1 3037  3 wrt 1 3140  
1442 14 Dtool_nJyo8q_U 4 1203 3053 0 14 Dtool_nJyo8q_U 1 4 this 3 3290  
1443 14 Dtool_nJyoFgah 4 1204 3053 0 14 Dtool_nJyoFgah 1 4 this 3 3290  
1444 14 Dtool_nJyo1G7x 7 1205 3057 0 14 Dtool_nJyo1G7x 0 
1445 14 Dtool_nJyoLC1H 7 1207 3291 0 14 Dtool_nJyoLC1H 3 2 np 1 3140  5 start 1 3152  3 end 1 3152  
1446 14 Dtool_nJyoqMFY 7 1207 3291 0 14 Dtool_nJyoqMFY 4 2 np 1 3140  5 start 1 3152  3 end 1 3152  3 wrt 1 3140  
1447 14 Dtool_nJyojybb 7 1207 3291 0 14 Dtool_nJyojybb 9 2 np 1 3140  2 sr 1 3037  2 sg 1 3037  2 sb 1 3037  2 sa 1 3037  2 er 1 3037  2 eg 1 3037  2 eb 1 3037  2 ea 1 3037  
1448 14 Dtool_nJyoCjMP 7 1207 3291 0 14 Dtool_nJyoCjMP 10 2 np 1 3140  2 sr 1 3037  2 sg 1 3037  2 sb 1 3037  2 sa 1 3037  2 er 1 3037  2 eg 1 3037  2 eb 1 3037  2 ea 1 3037  3 wrt 1 3140  
1449 14 Dtool_nJyotvME 7 1208 3057 0 14 Dtool_nJyotvME 0 
1450 14 Dtool_nJyodSGa 7 1210 3292 2736 14 Dtool_nJyodSGa 1 4 name 1 3100  
1451 14 Dtool_nJyoVj3W 6 1211 3124 0 14 Dtool_nJyoVj3W 1 4 this 3 3293  
1452 14 Dtool_nJyo_PIn 4 1212 3053 0 14 Dtool_nJyo_PIn 2 4 this 3 3292  5 color 1 3124  
1453 14 Dtool_nJyoc4ld 6 1213 3031 0 14 Dtool_nJyoc4ld 1 4 this 3 3293  
1454 14 Dtool_nJyoeO9o 4 1214 3053 0 14 Dtool_nJyoeO9o 2 4 this 3 3292  11 attenuation 1 3031  
1455 14 Dtool_nJyoAjL5 6 1215 3047 0 14 Dtool_nJyoAjL5 1 4 this 3 3293  
1456 14 Dtool_nJyoFPGB 4 1216 3053 0 14 Dtool_nJyoFPGB 2 4 this 3 3292  5 point 1 3047  
1457 14 Dtool_nJyocV_e 7 1217 3057 0 14 Dtool_nJyocV_e 0 
1458 14 Dtool_nJyoQvIh 7 1222 3295 2774 14 Dtool_nJyoQvIh 1 4 name 1 3100  
1459 14 Dtool_nJyoJ7oX 4 1223 3053 0 14 Dtool_nJyoJ7oX 1 4 this 3 3295  
1460 14 Dtool_nJyoqVNP 4 1224 3053 0 14 Dtool_nJyoqVNP 1 4 this 3 3295  
1461 14 Dtool_nJyo5EU0 4 1225 3053 0 14 Dtool_nJyo5EU0 2 4 this 3 3295  8 position 1 3147  
1462 14 Dtool_nJyol5pP 4 1225 3053 0 14 Dtool_nJyol5pP 4 4 this 3 3295  1 x 1 3037  1 y 1 3037  1 z 1 3037  
1463 14 Dtool_nJyo6Ddh 7 1226 3147 0 14 Dtool_nJyo6Ddh 1 4 this 3 3296  
1464 14 Dtool_nJyolWcS 4 1227 3053 0 14 Dtool_nJyolWcS 2 4 this 3 3295  5 color 1 3152  
1465 14 Dtool_nJyorXKS 4 1227 3053 0 14 Dtool_nJyorXKS 4 4 this 3 3295  1 r 1 3037  1 g 1 3037  1 b 1 3037  
1466 14 Dtool_nJyorYAt 7 1228 3152 0 14 Dtool_nJyorYAt 1 4 this 3 3296  
1467 14 Dtool_nJyos21Z 7 1229 3152 0 14 Dtool_nJyos21Z 1 4 this 3 3296  
1468 14 Dtool_nJyojENz 4 1230 3053 0 14 Dtool_nJyojENz 2 4 this 3 3295  1 r 1 3037  
1469 14 Dtool_nJyomN_F 6 1231 3037 0 14 Dtool_nJyomN_F 1 4 this 3 3296  
1470 14 Dtool_nJyoNzMK 6 1232 3029 0 14 Dtool_nJyoNzMK 2 4 this 3 3295  4 type 1 3008  
1471 14 Dtool_nJyogukW 6 1233 3008 0 14 Dtool_nJyogukW 1 4 this 3 3296  
1472 14 Dtool_nJyo6AyF 4 1234 3053 0 14 Dtool_nJyo6AyF 2 4 this 3 3295  2 a0 1 3037  
1473 14 Dtool_nJyoqeGG 4 1235 3053 0 14 Dtool_nJyoqeGG 2 4 this 3 3295  2 a1 1 3037  
1474 14 Dtool_nJyoa8aG 4 1236 3053 0 14 Dtool_nJyoa8aG 2 4 this 3 3295  2 a2 1 3037  
1475 14 Dtool_nJyofYRN 6 1237 3037 0 14 Dtool_nJyofYRN 1 4 this 3 3296  
1476 14 Dtool_nJyov_lN 6 1238 3037 0 14 Dtool_nJyov_lN 1 4 this 3 3296  
1477 14 Dtool_nJyo_c4N 6 1239 3037 0 14 Dtool_nJyo_c4N 1 4 this 3 3296  
1478 14 Dtool_nJyo6XFe 4 1240 3053 0 14 Dtool_nJyo6XFe 1 4 this 3 3295  
1479 14 Dtool_nJyoTEHE 4 1241 3053 0 14 Dtool_nJyoTEHE 1 4 this 3 3295  
1480 14 Dtool_nJyoLCTy 6 1242 3029 0 14 Dtool_nJyoLCTy 1 4 this 3 3296  
1481 14 Dtool_nJyorALY 6 1243 3029 0 14 Dtool_nJyorALY 2 4 this 3 3295  4 type 1 3007  
1482 14 Dtool_nJyol3py 6 1244 3007 0 14 Dtool_nJyol3py 1 4 this 3 3296  
1483 14 Dtool_nJyopyo8 4 1245 3053 0 14 Dtool_nJyopyo8 2 4 this 3 3295  6 offset 1 3037  
1484 14 Dtool_nJyoy2YP 6 1246 3037 0 14 Dtool_nJyoy2YP 1 4 this 3 3296  
1485 14 Dtool_nJyo5u_H 4 1247 3053 0 14 Dtool_nJyo5u_H 2 4 this 3 3295  5 scale 1 3037  
1486 14 Dtool_nJyoriye 6 1248 3037 0 14 Dtool_nJyoriye 1 4 this 3 3296  
1487 14 Dtool_nJyoN2Pf 4 1249 3053 0 14 Dtool_nJyoN2Pf 2 4 this 3 3295  4 step 1 3037  
1488 14 Dtool_nJyoCj7S 6 1250 3037 0 14 Dtool_nJyoCj7S 1 4 this 3 3296  
1489 14 Dtool_nJyo_d8J 4 1251 3053 0 14 Dtool_nJyo_d8J 2 4 this 3 3295  1 f 1 3037  
1490 14 Dtool_nJyopD4C 6 1252 3037 0 14 Dtool_nJyopD4C 1 4 this 3 3296  
1491 14 Dtool_nJyoE3DF 6 1253 3029 0 14 Dtool_nJyoE3DF 2 4 this 3 3296  5 other 1 3296  
1492 14 Dtool_nJyo4ihE 6 1254 3029 0 14 Dtool_nJyo4ihE 2 4 this 3 3296  5 other 1 3296  
1493 14 Dtool_nJyotfyl 6 1255 3029 0 14 Dtool_nJyotfyl 2 4 this 3 3296  5 other 1 3296  
1494 14 Dtool_nJyo2MS5 6 1256 3052 0 14 Dtool_nJyo2MS5 2 4 this 3 3296  5 other 1 3296  
1495 14 Dtool_nJyohYfZ 6 1257 3029 0 14 Dtool_nJyohYfZ 1 4 this 3 3296  
1496 14 Dtool_nJyoz1P9 7 1258 3057 0 14 Dtool_nJyoz1P9 0 
1497 14 Dtool_nJyoX4w6 7 1262 3096 0 14 Dtool_nJyoX4w6 0 
1498 14 Dtool_nJyowQWw 7 1262 3096 0 14 Dtool_nJyowQWw 3 6 weight 1 3037  7 contrib 1 3010  13 effect_center 1 3144  
1499 14 Dtool_nJyogXbG 7 1262 3096 0 14 Dtool_nJyogXbG 4 6 weight 1 3037  7 contrib 1 3010  13 effect_center 1 3144  6 lights 1 3298  
1500 14 Dtool_nJyo5iCT 7 1263 3096 0 14 Dtool_nJyo5iCT 2 4 this 3 3301  8 newlight 1 3141  
1501 14 Dtool_nJyoneGr 7 1264 3096 0 14 Dtool_nJyoneGr 2 4 this 3 3301  8 newlight 1 3141  
1502 14 Dtool_nJyo5_KQ 7 1265 3096 0 14 Dtool_nJyo5_KQ 2 4 this 3 3301  1 w 1 3037  
1503 14 Dtool_nJyoqn_x 7 1266 3096 0 14 Dtool_nJyoqn_x 2 4 this 3 3301  1 c 1 3010  
1504 14 Dtool_nJyo2mzF 7 1267 3096 0 14 Dtool_nJyo2mzF 2 4 this 3 3301  2 ec 1 3144  
1505 14 Dtool_nJyoTSvb 6 1268 3037 0 14 Dtool_nJyoTSvb 1 4 this 3 3301  
1506 14 Dtool_nJyoQ433 6 1269 3010 0 14 Dtool_nJyoQ433 1 4 this 3 3301  
1507 14 Dtool_nJyoGfeT 7 1270 3144 0 14 Dtool_nJyoGfeT 1 4 this 3 3301  
1508 14 Dtool_nJyoedsj 6 1271 3029 0 14 Dtool_nJyoedsj 2 4 this 3 3301  5 light 1 3141  
1509 14 Dtool_nJyoTUuJ 7 1272 3057 0 14 Dtool_nJyoTUuJ 0 
1510 14 Dtool_nJyoI_Vv 7 1275 3303 1807 14 Dtool_nJyoI_Vv 1 4 name 1 3100  
1511 14 Dtool_nJyoJd3Z 7 1275 3303 1807 14 Dtool_nJyoJd3Z 3 4 name 1 3100  3 pos 1 3144  5 scale 1 3037  
1512 14 Dtool_nJyo1A14 7 1275 3303 1807 14 Dtool_nJyo1A14 2 4 name 1 3100  3 pos 1 3144  
1513 14 Dtool_nJyoeCYW 4 1276 3053 0 14 Dtool_nJyoeCYW 2 4 this 3 3303  4 mask 1 3107  
1514 14 Dtool_nJyogmFL 4 1277 3053 0 14 Dtool_nJyogmFL 2 4 this 3 3303  4 mask 1 3107  
1515 14 Dtool_nJyoTI3L 4 1278 3053 0 14 Dtool_nJyoTI3L 2 4 this 3 3303  4 mask 1 3107  
1516 14 Dtool_nJyoK6im 7 1279 3107 0 14 Dtool_nJyoK6im 1 4 this 3 3304  
1517 14 Dtool_nJyoMSVn 7 1280 3107 0 14 Dtool_nJyoMSVn 1 4 this 3 3304  
1518 14 Dtool_nJyohvNY 4 1281 3053 0 14 Dtool_nJyohvNY 2 4 this 3 3303  4 flag 1 3029  
1519 14 Dtool_nJyoWqMg 6 1282 3029 0 14 Dtool_nJyoWqMg 1 4 this 3 3304  
1520 14 Dtool_nJyojFbb 4 1283 3053 0 14 Dtool_nJyojFbb 1 4 this 3 3303  
1521 14 Dtool_nJyopPIP 4 1284 3053 0 14 Dtool_nJyopPIP 2 4 this 3 3303  6 vertex 1 3047  
1522 14 Dtool_nJyo7Gy1 6 1285 3052 0 14 Dtool_nJyo7Gy1 1 4 this 3 3304  
1523 14 Dtool_nJyoXSGA 6 1286 3047 0 14 Dtool_nJyoXSGA 2 4 this 3 3304  1 n 1 3052  
1524 14 Dtool_nJyo7zo5 4 1287 3053 0 14 Dtool_nJyo7zo5 2 4 this 3 3303  4 cell 1 3141  
1525 14 Dtool_nJyoUl43 7 1288 3140 2251 14 Dtool_nJyoUl43 1 4 this 3 3304  
1526 14 Dtool_nJyosRjH 4 1289 3053 0 14 Dtool_nJyosRjH 2 4 this 3 3303  4 cell 1 3141  
1527 14 Dtool_nJyopkJR 7 1290 3140 2251 14 Dtool_nJyopkJR 1 4 this 3 3304  
1528 14 Dtool_nJyoysiG 4 1291 3053 0 14 Dtool_nJyoysiG 2 4 this 3 3303  5 value 1 3029  
1529 14 Dtool_nJyoRkXV 6 1292 3029 0 14 Dtool_nJyoRkXV 1 4 this 3 3303  
1530 14 Dtool_nJyovbBN 4 1293 3053 0 14 Dtool_nJyovbBN 2 4 this 3 3303  5 value 1 3029  
1531 14 Dtool_nJyoKXV7 6 1294 3029 0 14 Dtool_nJyoKXV7 1 4 this 3 3303  
1532 14 Dtool_nJyosf7U 4 1295 3053 0 14 Dtool_nJyosf7U 2 4 this 3 3303  5 value 1 3029  
1533 14 Dtool_nJyozTu1 6 1296 3029 0 14 Dtool_nJyozTu1 1 4 this 3 3303  
1534 14 Dtool_nJyo0Yop 7 1297 3057 0 14 Dtool_nJyo0Yop 0 
1535 14 Dtool_nJyoZ4fC 7 1299 3306 2811 14 Dtool_nJyoZ4fC 0 
1536 14 Dtool_nJyoLWXy 4 1305 3053 0 14 Dtool_nJyoLWXy 2 4 this 3 3306  14 combine_radius 1 3037  
1537 14 Dtool_nJyonG9A 6 1306 3037 0 14 Dtool_nJyonG9A 1 4 this 3 3307  
1538 14 Dtool_nJyo8UjV 4 1307 3053 0 14 Dtool_nJyo8UjV 5 4 this 3 3306  4 node 1 3101  7 attribs 1 3309  12 attrib_types 1 3052  11 transformer 1 3312  
1539 14 Dtool_nJyoTFiF 4 1307 3053 0 14 Dtool_nJyoTFiF 3 4 this 3 3306  4 node 1 3101  12 attrib_types 1 3052  
1540 14 Dtool_nJyoVc_G 4 1307 3053 0 14 Dtool_nJyoVc_G 2 4 this 3 3306  4 node 1 3101  
1541 14 Dtool_nJyo_6fT 6 1308 3052 0 14 Dtool_nJyo_6fT 3 4 this 3 3306  4 root 1 3101  21 combine_siblings_bits 1 3052  
1542 14 Dtool_nJyoO4J5 6 1309 3052 0 14 Dtool_nJyoO4J5 3 4 this 3 3306  4 root 1 3101  12 collect_bits 1 3052  
1543 14 Dtool_nJyonPcT 6 1309 3052 0 14 Dtool_nJyonPcT 2 4 this 3 3306  4 root 1 3101  
1544 14 Dtool_nJyoqC3R 6 1310 3052 0 14 Dtool_nJyoqC3R 3 4 this 3 3306  4 root 1 3101  15 nonindexed_bits 1 3052  
1545 14 Dtool_nJyoITX2 6 1310 3052 0 14 Dtool_nJyoITX2 2 4 this 3 3306  4 root 1 3101  
1546 14 Dtool_nJyokjmo 4 1311 3053 0 14 Dtool_nJyokjmo 2 4 this 3 3306  4 root 1 3101  
1547 14 Dtool_nJyoH2f_ 7 1313 3314 2821 14 Dtool_nJyoH2f_ 1 4 name 1 3100  
1548 14 Dtool_nJyozd_9 7 1314 3057 0 14 Dtool_nJyozd_9 0 
1549 14 Dtool_nJyoLrES 7 1322 3315 2830 14 Dtool_nJyoLrES 1 4 name 1 3100  
1550 14 Dtool_nJyoyMZE 6 1323 3052 0 14 Dtool_nJyoyMZE 1 4 this 3 3316  
1551 14 Dtool_nJyohecj 4 1324 3053 0 14 Dtool_nJyohecj 2 4 this 3 3315  10 frame_rate 1 3161  
1552 14 Dtool_nJyoNJ9E 7 1325 3057 0 14 Dtool_nJyoNJ9E 0 
1553 14 Dtool_nJyofdIH 7 1317 3314 2821 14 Dtool_nJyofdIH 1 4 this 3 3315  
1554 14 Dtool_nJyob1sH 7 1318 3315 2830 14 Dtool_nJyob1sH 1 4 this 3 3314  
1555 14 Dtool_nJyoO8DN 6 1320 3318 0 14 Dtool_nJyoO8DN 1 4 this 3 3315  
1556 14 Dtool_nJyoUCAc 7 1321 3315 2830 14 Dtool_nJyoUCAc 1 4 this 3 3318  
1557 14 Dtool_nJyo4QqY 6 1328 3029 0 14 Dtool_nJyo4QqY 1 8 filename 1 3100  
1558 14 Dtool_nJyof_La 6 1329 3029 0 14 Dtool_nJyof_La 1 8 filename 1 3100  
1559 14 Dtool_nJyofS0L 7 1330 3164 0 14 Dtool_nJyofS0L 1 8 filename 1 3100  
1560 14 Dtool_nJyoOnUn 4 1331 3053 0 14 Dtool_nJyoOnUn 2 8 filename 1 3100  6 shader 1 3155  
1561 14 Dtool_nJyoEALI 4 1332 3053 0 14 Dtool_nJyoEALI 1 8 filename 1 3100  
1562 14 Dtool_nJyoVWS0 4 1333 3053 0 14 Dtool_nJyoVWS0 0 
1563 14 Dtool_nJyoZabE 6 1334 3052 0 14 Dtool_nJyoZabE 0 
1564 14 Dtool_nJyoPPub 4 1335 3053 0 14 Dtool_nJyoPPub 1 3 out 1 3054  
1565 14 Dtool_nJyoYTty 4 1336 3053 0 14 Dtool_nJyoYTty 1 3 out 1 3054  
1566 14 Dtool_nJyoZA7W 7 1339 3096 0 14 Dtool_nJyoZA7W 1 5 tight 1 3029  
1567 14 Dtool_nJyo9fNi 7 1339 3096 0 14 Dtool_nJyo9fNi 0 
1568 14 Dtool_nJyow6EW 6 1340 3029 0 14 Dtool_nJyow6EW 1 4 this 3 3319  
1569 14 Dtool_nJyo6KHB 7 1341 3057 0 14 Dtool_nJyo6KHB 0 
1570 14 Dtool_nJyoJNYH 7 1344 3321 2854 14 Dtool_nJyoJNYH 1 4 name 1 3100  
1571 14 Dtool_nJyoylCB 6 1345 3037 0 14 Dtool_nJyoylCB 1 4 this 3 3322  
1572 14 Dtool_nJyoYQlj 4 1346 3053 0 14 Dtool_nJyoYQlj 2 4 this 3 3321  8 exponent 1 3037  
1573 14 Dtool_nJyoFy11 6 1347 3124 0 14 Dtool_nJyoFy11 1 4 this 3 3322  
1574 14 Dtool_nJyohJVa 4 1348 3053 0 14 Dtool_nJyohJVa 2 4 this 3 3321  5 color 1 3124  
1575 14 Dtool_nJyo8nFC 6 1349 3031 0 14 Dtool_nJyo8nFC 1 4 this 3 3322  
1576 14 Dtool_nJyoFLbM 4 1350 3053 0 14 Dtool_nJyoFLbM 2 4 this 3 3321  11 attenuation 1 3031  
1577 14 Dtool_nJyo4Wtp 7 1351 3153 0 14 Dtool_nJyo4Wtp 4 11 pixel_width 1 3052  11 full_radius 1 3037  2 fg 1 3152  2 bg 1 3152  
1578 14 Dtool_nJyojnHs 7 1352 3057 0 14 Dtool_nJyojnHs 0 
1579 14 Dtool_nJyo48jr 7 1355 3324 2858 14 Dtool_nJyo48jr 1 4 name 1 3100  
1580 14 Dtool_nJyoKBhj 4 1356 3053 0 14 Dtool_nJyoKBhj 2 4 this 3 3324  5 index 1 3052  
1581 14 Dtool_nJyoPjq2 7 1357 3057 0 14 Dtool_nJyoPjq2 0 
1582 14 Dtool_nJyoDEqP 7 1360 3096 0 14 Dtool_nJyoDEqP 0 
1583 14 Dtool_nJyohiLA 7 1361 3096 0 14 Dtool_nJyohiLA 4 4 this 3 3325  5 stage 1 3062  4 from 1 3141  2 to 1 3141  
1584 14 Dtool_nJyoA6h1 7 1362 3096 0 14 Dtool_nJyoA6h1 2 4 this 3 3325  5 stage 1 3062  
1585 14 Dtool_nJyomEHy 6 1363 3029 0 14 Dtool_nJyomEHy 1 4 this 3 3325  
1586 14 Dtool_nJyogRPz 6 1364 3029 0 14 Dtool_nJyogRPz 2 4 this 3 3325  5 stage 1 3062  
1587 14 Dtool_nJyoKzra 7 1365 3140 2251 14 Dtool_nJyoKzra 2 4 this 3 3325  5 stage 1 3062  
1588 14 Dtool_nJyoM8Eo 7 1366 3140 2251 14 Dtool_nJyoM8Eo 2 4 this 3 3325  5 stage 1 3062  
1589 14 Dtool_nJyoC85_ 7 1367 3057 0 14 Dtool_nJyoC85_ 0 
1590 14 Dtool_nJyosz_w 7 1369 3169 2869 14 Dtool_nJyosz_w 0 
1591 14 Dtool_nJyoG2Wq 7 1369 3169 2869 14 Dtool_nJyoG2Wq 1 4 copy 1 3327  
1592 14 Dtool_nJyouUB_ 6 1370 3169 0 14 Dtool_nJyouUB_ 2 4 this 3 3169  4 copy 1 3327  
1593 14 Dtool_nJyoqcTz 4 1372 3053 0 14 Dtool_nJyoqcTz 2 4 this 3 3169  12 node_texture 1 3153  
1594 14 Dtool_nJyo1SuY 6 1373 3029 0 14 Dtool_nJyo1SuY 2 4 this 3 3169  12 node_texture 1 3153  
1595 14 Dtool_nJyoBW2_ 4 1374 3053 0 14 Dtool_nJyoBW2_ 2 4 this 3 3169  5 other 1 3327  
1596 14 Dtool_nJyoubPS 4 1375 3053 0 14 Dtool_nJyoubPS 2 4 this 3 3169  5 other 1 3327  
1597 14 Dtool_nJyoJXB3 4 1376 3053 0 14 Dtool_nJyoJXB3 1 4 this 3 3169  
1598 14 Dtool_nJyoeRIZ 6 1377 3029 0 14 Dtool_nJyoeRIZ 2 4 this 3 3327  7 texture 1 3153  
1599 14 Dtool_nJyof_8F 4 1378 3053 0 14 Dtool_nJyof_8F 1 4 this 3 3169  
1600 14 Dtool_nJyousRb 7 1379 3153 0 14 Dtool_nJyousRb 2 4 this 3 3327  4 name 1 3100  
1601 14 Dtool_nJyorq1E 6 1380 3052 0 14 Dtool_nJyorq1E 1 4 this 3 3327  
1602 14 Dtool_nJyoXzkn 7 1381 3153 0 14 Dtool_nJyoXzkn 2 4 this 3 3327  5 index 1 3052  
1603 14 Dtool_nJyoeP4T 7 1382 3153 0 14 Dtool_nJyoeP4T 2 4 this 3 3327  5 index 1 3052  
1604 14 Dtool_nJyo2Sw8 4 1383 3053 0 14 Dtool_nJyo2Sw8 2 4 this 3 3327  3 out 1 3054  
1605 14 Dtool_nJyofS_c 4 1384 3053 0 14 Dtool_nJyofS_c 3 4 this 3 3327  3 out 1 3054  12 indent_level 1 3052  
1606 14 Dtool_nJyokwgN 4 1384 3053 0 14 Dtool_nJyokwgN 2 4 this 3 3327  3 out 1 3054  
1607 14 Dtool_nJyoxpnH 7 1386 3170 2885 14 Dtool_nJyoxpnH 0 
1608 14 Dtool_nJyoWv2z 7 1386 3170 2885 14 Dtool_nJyoWv2z 1 4 copy 1 3329  
1609 14 Dtool_nJyoNQDB 6 1387 3170 0 14 Dtool_nJyoNQDB 2 4 this 3 3170  4 copy 1 3329  
1610 14 Dtool_nJyoGIjY 4 1389 3053 0 14 Dtool_nJyoGIjY 2 4 this 3 3170  18 node_texture_stage 1 3062  
1611 14 Dtool_nJyoZ9r9 6 1390 3029 0 14 Dtool_nJyoZ9r9 2 4 this 3 3170  18 node_texture_stage 1 3062  
1612 14 Dtool_nJyoVfWB 4 1391 3053 0 14 Dtool_nJyoVfWB 2 4 this 3 3170  5 other 1 3329  
1613 14 Dtool_nJyo8M8q 4 1392 3053 0 14 Dtool_nJyo8M8q 2 4 this 3 3170  5 other 1 3329  
1614 14 Dtool_nJyorJqC 4 1393 3053 0 14 Dtool_nJyorJqC 1 4 this 3 3170  
1615 14 Dtool_nJyoXvY1 6 1394 3029 0 14 Dtool_nJyoXvY1 2 4 this 3 3329  13 texture_stage 1 3062  
1616 14 Dtool_nJyoT2Xf 4 1395 3053 0 14 Dtool_nJyoT2Xf 1 4 this 3 3170  
1617 14 Dtool_nJyo_5YH 7 1396 3062 0 14 Dtool_nJyo_5YH 2 4 this 3 3329  4 name 1 3100  
1618 14 Dtool_nJyotfCs 6 1397 3052 0 14 Dtool_nJyotfCs 1 4 this 3 3329  
1619 14 Dtool_nJyo9Uz2 7 1398 3062 0 14 Dtool_nJyo9Uz2 2 4 this 3 3329  5 index 1 3052  
1620 14 Dtool_nJyo5fT7 7 1399 3062 0 14 Dtool_nJyo5fT7 2 4 this 3 3329  5 index 1 3052  
1621 14 Dtool_nJyolg51 4 1400 3053 0 14 Dtool_nJyolg51 1 4 this 3 3170  
1622 14 Dtool_nJyoI4CN 4 1401 3053 0 14 Dtool_nJyoI4CN 2 4 this 3 3329  3 out 1 3054  
1623 14 Dtool_nJyo5JdN 4 1402 3053 0 14 Dtool_nJyo5JdN 3 4 this 3 3329  3 out 1 3054  12 indent_level 1 3052  
1624 14 Dtool_nJyoqJju 4 1402 3053 0 14 Dtool_nJyoqJju 2 4 this 3 3329  3 out 1 3054  
432
2900 14 TransformState 75777 14 TransformState 14 TransformState 0 0 0 0 0 0 80 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 0 1 0 2901 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

2901 24 NodeCachedReferenceCount 2049 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 1421
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

2902 12 RenderAttrib 75777 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 7 1705 1706 1707 1708 1709 1710 1711 0 1 0 2903 0 0 0 2 2904 2905 1564
////////////////////////////////////////////////////////////////////
//       Class : RenderAttrib
// Description : This is the base class for a number of render
//               attributes (other than transform) that may be set on
//               scene graph nodes to control the appearance of
//               geometry.  This includes TextureAttrib, ColorAttrib,
//               etc.
//
//               RenderAttrib represents render attributes that always
//               propagate down to the leaves without regard to the
//               particular node they are assigned to.  A RenderAttrib
//               will have the same effect on a leaf node whether it
//               is assigned to the graph at the leaf or several nodes
//               above.  This is different from RenderEffect, which
//               represents a particular render property that is
//               applied immediately to the node on which it is
//               encountered, like billboarding or decaling.
//
//               You should not attempt to create or modify a
//               RenderAttrib directly; instead, use the make() method
//               of the appropriate kind of attrib you want.  This
//               will allocate and return a new RenderAttrib of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderAttrib if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

2903 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2904 16 PandaCompareFunc 794624 30 RenderAttrib::PandaCompareFunc 30 RenderAttrib::PandaCompareFunc 2902 0 0 0 0 0 0 0 0 9 6 M_none 20 RenderAttrib::M_none 0 7 M_never 21 RenderAttrib::M_never 1 6 M_less 20 RenderAttrib::M_less 2 7 M_equal 21 RenderAttrib::M_equal 3 12 M_less_equal 26 RenderAttrib::M_less_equal 4 9 M_greater 23 RenderAttrib::M_greater 5 11 M_not_equal 25 RenderAttrib::M_not_equal 6 15 M_greater_equal 29 RenderAttrib::M_greater_equal 7 8 M_always 22 RenderAttrib::M_always 8 0 0

2905 10 TexGenMode 794624 24 RenderAttrib::TexGenMode 24 RenderAttrib::TexGenMode 2902 0 0 0 0 0 0 0 0 11 5 M_off 19 RenderAttrib::M_off 0 16 M_eye_sphere_map 30 RenderAttrib::M_eye_sphere_map 1 16 M_world_cube_map 30 RenderAttrib::M_world_cube_map 2 14 M_eye_cube_map 28 RenderAttrib::M_eye_cube_map 3 14 M_world_normal 28 RenderAttrib::M_world_normal 4 12 M_eye_normal 26 RenderAttrib::M_eye_normal 5 16 M_world_position 30 RenderAttrib::M_world_position 6 8 M_unused 22 RenderAttrib::M_unused 7 14 M_eye_position 28 RenderAttrib::M_eye_position 8 14 M_point_sprite 28 RenderAttrib::M_point_sprite 9 14 M_light_vector 28 RenderAttrib::M_light_vector 10 0 179
// This is the enumerated type for TexGenAttrib.  It is inherited
// into TexGenAttrib.  It is defined up at this level only to avoid
// circular dependencies in the header files.

2906 16 RenderModeAttrib 141313 16 RenderModeAttrib 16 RenderModeAttrib 0 0 0 0 1718 0 6 1712 1713 1714 1715 1716 1717 0 1 0 2902 0 0 0 1 2907 228
////////////////////////////////////////////////////////////////////
//       Class : RenderModeAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

2907 4 Mode 794624 22 RenderModeAttrib::Mode 22 RenderModeAttrib::Mode 2906 0 0 0 0 0 0 0 0 4 11 M_unchanged 29 RenderModeAttrib::M_unchanged 0 8 M_filled 26 RenderModeAttrib::M_filled 1 11 M_wireframe 29 RenderModeAttrib::M_wireframe 2 7 M_point 25 RenderModeAttrib::M_point 3 0 0

2908 15 TexMatrixAttrib 75777 15 TexMatrixAttrib 15 TexMatrixAttrib 0 0 0 0 0 0 11 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 0 1 0 2902 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : TexMatrixAttrib
// Description : Applies a transform matrix to UV's before they are
//               rendered.
////////////////////////////////////////////////////////////////////

2909 11 RenderState 75777 11 RenderState 11 RenderState 0 0 0 0 0 0 44 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 0 1 0 2901 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

2910 15 AlphaTestAttrib 141313 15 AlphaTestAttrib 15 AlphaTestAttrib 0 0 0 0 1778 0 4 1774 1775 1776 1777 0 1 0 2902 0 0 0 0 317
////////////////////////////////////////////////////////////////////
//       Class : AlphaTestAttrib
// Description : Enables or disables writing of pixel to framebuffer
//               based on its alpha value relative to a reference alpha value
////////////////////////////////////////////////////////////////////

2911 12 RenderEffect 75777 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 7 1779 1780 1781 1782 1783 1784 1785 0 1 0 2903 0 0 0 0 1346
////////////////////////////////////////////////////////////////////
//       Class : RenderEffect
// Description : This is the base class for a number of special render
//               effects that may be set on scene graph nodes to
//               change the way they render.  This includes
//               BillboardEffect, DecalEffect, etc.
//
//               RenderEffect represents render properties that must
//               be applied as soon as they are encountered in the
//               scene graph, rather than propagating down to the
//               leaves.  This is different from RenderAttrib, which
//               represents properties like color and texture that
//               don't do anything until they propagate down to a
//               GeomNode.
//
//               You should not attempt to create or modify a
//               RenderEffect directly; instead, use the make() method
//               of the appropriate kind of effect you want.  This
//               will allocate and return a new RenderEffect of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderEffect if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

2912 13 RenderEffects 75777 13 RenderEffects 13 RenderEffects 0 0 0 0 0 0 15 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 0 1 0 2903 0 0 0 0 627
////////////////////////////////////////////////////////////////////
//       Class : RenderEffects
// Description : This represents a unique collection of RenderEffect
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderEffects object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderEffects object, create a
//               new one.
////////////////////////////////////////////////////////////////////

2913 9 PandaNode 26625 9 PandaNode 9 PandaNode 0 0 0 1 1806 1807 0 81 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 0 3 3 2914 1801 1802 3 2915 1803 1804 5 2916 1805 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

2914 13 TypedWritable 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2915 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

2916 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

2917 8 GeomNode 75777 8 GeomNode 8 GeomNode 0 0 0 1 1889 1807 0 17 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 0 1 0 2913 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

2918 5 Light 26625 5 Light 5 Light 0 0 0 0 1908 0 7 1909 1910 1911 1912 1913 1914 1915 0 1 5 2916 1907 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

2919 9 LightNode 141313 9 LightNode 9 LightNode 0 0 0 0 1923 0 3 1920 1921 1922 0 2 3 2918 1916 1917 3 2913 1918 1919 0 0 360
////////////////////////////////////////////////////////////////////
//       Class : LightNode
// Description : A derivative of Light and of PandaNode.  All kinds of
//               Light except Spotlight (which must inherit from
//               LensNode instead) inherit from this class.
////////////////////////////////////////////////////////////////////

2920 12 AmbientLight 141313 12 AmbientLight 12 AmbientLight 0 0 0 1 1924 1926 0 1 1925 0 1 0 2919 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : AmbientLight
// Description : A light source that seems to illuminate all points in
//               space at once.  This kind of light need not actually
//               be part of the scene graph, since it has no meaningful
//               position.
////////////////////////////////////////////////////////////////////

2921 15 AntialiasAttrib 141313 15 AntialiasAttrib 15 AntialiasAttrib 0 0 0 0 1932 0 5 1927 1928 1929 1930 1931 0 1 0 2902 0 0 0 1 2922 291
////////////////////////////////////////////////////////////////////
//       Class : AntialiasAttrib
// Description : Specifies whether or how to enable antialiasing, if
//               supported by the backend renderer.
////////////////////////////////////////////////////////////////////

2922 4 Mode 794624 21 AntialiasAttrib::Mode 21 AntialiasAttrib::Mode 2921 0 0 0 0 0 0 0 0 10 6 M_none 23 AntialiasAttrib::M_none 0 7 M_point 24 AntialiasAttrib::M_point 1 6 M_line 23 AntialiasAttrib::M_line 2 9 M_polygon 26 AntialiasAttrib::M_polygon 4 13 M_multisample 30 AntialiasAttrib::M_multisample 8 6 M_auto 23 AntialiasAttrib::M_auto 31 11 M_type_mask 28 AntialiasAttrib::M_type_mask 31 8 M_faster 25 AntialiasAttrib::M_faster 32 8 M_better 25 AntialiasAttrib::M_better 64 11 M_dont_care 28 AntialiasAttrib::M_dont_care 96 0 0

2923 9 PlaneNode 141313 9 PlaneNode 9 PlaneNode 0 0 0 1 1933 1941 0 7 1934 1935 1936 1937 1938 1939 1940 0 1 0 2913 0 0 0 0 429
////////////////////////////////////////////////////////////////////
//       Class : PlaneNode
// Description : A node that contains a plane.  This is most often
//               used as a clipping plane, but it can serve other
//               purposes as well; whenever a plane is needed to be
//               defined in some coordinate space in the world.
////////////////////////////////////////////////////////////////////

2924 18 TransparencyAttrib 141313 18 TransparencyAttrib 18 TransparencyAttrib 0 0 0 0 1945 0 3 1942 1943 1944 0 1 0 2902 0 0 0 1 2925 727
////////////////////////////////////////////////////////////////////
//       Class : TransparencyAttrib
// Description : This controls the enabling of transparency.  Simply
//               setting an alpha component to non-1 does not in
//               itself make an object transparent; you must also
//               enable transparency mode with a suitable
//               TransparencyAttrib.  Similarly, it is wasteful to
//               render an object with a TransparencyAttrib in
//               effect unless you actually want it to be at least
//               partially transparent (and it has alpha components
//               less than 1).
////////////////////////////////////////////////////////////////////

2925 4 Mode 794624 24 TransparencyAttrib::Mode 24 TransparencyAttrib::Mode 2924 0 0 0 0 0 0 0 0 7 6 M_none 26 TransparencyAttrib::M_none 0 7 M_alpha 27 TransparencyAttrib::M_alpha 1 9 M_notused 29 TransparencyAttrib::M_notused 2 13 M_multisample 33 TransparencyAttrib::M_multisample 3 18 M_multisample_mask 38 TransparencyAttrib::M_multisample_mask 4 8 M_binary 28 TransparencyAttrib::M_binary 5 6 M_dual 26 TransparencyAttrib::M_dual 6 0 0

2926 8 NodePath 141313 8 NodePath 8 NodePath 0 0 0 1 1946 2251 0 304 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 0 0 0 1 2927 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

2927 9 ErrorType 794624 19 NodePath::ErrorType 19 NodePath::ErrorType 2926 0 0 0 0 0 0 0 0 4 5 ET_ok 15 NodePath::ET_ok 0 12 ET_not_found 22 NodePath::ET_not_found 1 10 ET_removed 20 NodePath::ET_removed 2 7 ET_fail 17 NodePath::ET_fail 3 0 109
// This enumeration is returned by get_error_type() for an empty
// NodePath to report the reason it's empty.

2928 15 ClipPlaneAttrib 141313 15 ClipPlaneAttrib 15 ClipPlaneAttrib 0 0 0 0 2274 0 22 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 0 1 0 2902 0 0 0 1 2929 496
////////////////////////////////////////////////////////////////////
//       Class : ClipPlaneAttrib
// Description : This functions similarly to a LightAttrib.  It
//               indicates the set of clipping planes that modify the
//               geometry at this level and below.  A ClipPlaneAttrib
//               can either add planes or remove planes from the total
//               set of clipping planes in effect.
////////////////////////////////////////////////////////////////////

2929 9 Operation 794624 26 ClipPlaneAttrib::Operation 26 ClipPlaneAttrib::Operation 2928 0 0 0 0 0 0 0 0 3 5 O_set 22 ClipPlaneAttrib::O_set 0 5 O_add 22 ClipPlaneAttrib::O_add 1 8 O_remove 25 ClipPlaneAttrib::O_remove 2 0 149
// This is the old, deprecated interface to ClipPlaneAttrib.  Do not
// use any of these methods for new code; these methods will be
// removed soon.

2930 11 ColorAttrib 141313 11 ColorAttrib 11 ColorAttrib 0 0 0 0 2281 0 6 2275 2276 2277 2278 2279 2280 0 1 0 2902 0 0 0 1 2931 263
////////////////////////////////////////////////////////////////////
//       Class : ColorAttrib
// Description : Indicates what color should be applied to renderable
//               geometry.
////////////////////////////////////////////////////////////////////

2931 4 Type 794624 17 ColorAttrib::Type 17 ColorAttrib::Type 2930 0 0 0 0 0 0 0 0 3 8 T_vertex 21 ColorAttrib::T_vertex 0 6 T_flat 19 ColorAttrib::T_flat 1 5 T_off 18 ColorAttrib::T_off 2 0 0

2932 16 ColorBlendAttrib 141313 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 2291 0 9 2282 2283 2284 2285 2286 2287 2288 2289 2290 0 1 0 2902 0 0 0 2 2933 2934 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

2933 4 Mode 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 2932 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 0 5 M_add 23 ColorBlendAttrib::M_add 1 10 M_subtract 28 ColorBlendAttrib::M_subtract 2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 3 5 M_min 23 ColorBlendAttrib::M_min 4 5 M_max 23 ColorBlendAttrib::M_max 5 0 0

2934 7 Operand 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 2932 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0 5 O_one 23 ColorBlendAttrib::O_one 1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 18 0 0

2935 16 ColorScaleAttrib 141313 16 ColorScaleAttrib 16 ColorScaleAttrib 0 0 0 0 2301 0 9 2292 2293 2294 2295 2296 2297 2298 2299 2300 0 1 0 2902 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : ColorScaleAttrib
// Description : Applies a scale to colors in the scene graph and on
//               vertices.
////////////////////////////////////////////////////////////////////

2936 16 ColorWriteAttrib 141313 16 ColorWriteAttrib 16 ColorWriteAttrib 0 0 0 0 2305 0 3 2302 2303 2304 0 1 0 2902 0 0 0 1 2937 431
////////////////////////////////////////////////////////////////////
//       Class : ColorWriteAttrib
// Description : Enables or disables writing to the color buffer.
//               This is primarily useful for certain special effects
//               in which it is important to write to the depth buffer
//               without affecting the color buffer.
////////////////////////////////////////////////////////////////////

2937 8 Channels 794624 26 ColorWriteAttrib::Channels 26 ColorWriteAttrib::Channels 2936 0 0 0 0 0 0 0 0 7 5 C_off 23 ColorWriteAttrib::C_off 0 5 C_red 23 ColorWriteAttrib::C_red 1 7 C_green 25 ColorWriteAttrib::C_green 2 6 C_blue 24 ColorWriteAttrib::C_blue 4 5 C_rgb 23 ColorWriteAttrib::C_rgb 7 7 C_alpha 25 ColorWriteAttrib::C_alpha 8 5 C_all 23 ColorWriteAttrib::C_all 15 0 0

2938 13 CullBinAttrib 141313 13 CullBinAttrib 13 CullBinAttrib 0 0 0 0 2310 0 4 2306 2307 2308 2309 0 1 0 2902 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : CullBinAttrib
// Description : Assigns geometry to a particular bin by name.  The
//               bins must be created separately via the
//               CullBinManager interface.
////////////////////////////////////////////////////////////////////

2939 14 CullFaceAttrib 141313 14 CullFaceAttrib 14 CullFaceAttrib 0 0 0 0 2317 0 6 2311 2312 2313 2314 2315 2316 0 1 0 2902 0 0 0 1 2940 274
////////////////////////////////////////////////////////////////////
//       Class : CullFaceAttrib
// Description : Indicates which faces should be culled based on their
//               vertex ordering.
////////////////////////////////////////////////////////////////////

2940 4 Mode 794624 20 CullFaceAttrib::Mode 20 CullFaceAttrib::Mode 2939 0 0 0 0 0 0 0 0 4 11 M_cull_none 27 CullFaceAttrib::M_cull_none 0 16 M_cull_clockwise 32 CullFaceAttrib::M_cull_clockwise 1 24 M_cull_counter_clockwise 40 CullFaceAttrib::M_cull_counter_clockwise 2 16 M_cull_unchanged 32 CullFaceAttrib::M_cull_unchanged 3 0 0

2941 17 DepthOffsetAttrib 141313 17 DepthOffsetAttrib 17 DepthOffsetAttrib 0 0 0 0 2321 0 3 2318 2319 2320 0 1 0 2902 0 0 0 0 1595
////////////////////////////////////////////////////////////////////
//       Class : DepthOffsetAttrib
// Description : This is a special kind of attribute that instructs
//               the graphics driver to apply an offset or bias to the
//               generated depth values for rendered polygons, before
//               they are written to the depth buffer.
//
//               This can be used to shift polygons forward slightly,
//               to resolve depth conflicts.  The cull traverser may
//               optionally use this, for instance, to implement
//               decals.  However, driver support for this feature
//               seems to be spotty, so use with caution.
//
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons.  Positive numbers are
//               closer towards the camera.
//
//               Nested DepthOffsetAttrib values accumulate; that is,
//               a DepthOffsetAttrib with a value of 1 beneath another
//               DepthOffsetAttrib with a value of 2 presents a net
//               offset of 3.  (A DepthOffsetAttrib will not, however,
//               combine with any other DepthOffsetAttribs with a
//               lower override parameter.)  The net value should
//               probably not exceed 16 or drop below 0 for maximum
//               portability.
////////////////////////////////////////////////////////////////////

2942 15 DepthTestAttrib 141313 15 DepthTestAttrib 15 DepthTestAttrib 0 0 0 0 2325 0 3 2322 2323 2324 0 1 0 2902 0 0 0 0 236
////////////////////////////////////////////////////////////////////
//       Class : DepthTestAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

2943 16 DepthWriteAttrib 141313 16 DepthWriteAttrib 16 DepthWriteAttrib 0 0 0 0 2329 0 3 2326 2327 2328 0 1 0 2902 0 0 0 1 2944 237
////////////////////////////////////////////////////////////////////
//       Class : DepthWriteAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

2944 4 Mode 794624 22 DepthWriteAttrib::Mode 22 DepthWriteAttrib::Mode 2943 0 0 0 0 0 0 0 0 2 5 M_off 23 DepthWriteAttrib::M_off 0 4 M_on 22 DepthWriteAttrib::M_on 1 0 0

2945 3 Fog 75777 3 Fog 3 Fog 0 0 0 1 2330 1807 0 13 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 0 1 0 2913 0 0 0 1 2946 1150
////////////////////////////////////////////////////////////////////
//       Class : Fog
// Description : Specifies how atmospheric fog effects are applied to
//               geometry.  The Fog object is now a PandaNode, which
//               means it can be used similarly to a Light to define
//               effects relative to a particular coordinate system
//               within the scene graph.
//
//               In exponential mode, the fog effects are always
//               camera-relative, and it does not matter where the Fog
//               node is parented.  However, in linear mode, the onset
//               and opaque distances are defined as offsets along the
//               local forward axis (e.g. the Y axis).  This allows
//               the fog effect to be localized to a particular region
//               in space, rather than always camera-relative.  If the
//               fog object is not parented to any node, it is used to
//               generate traditonal camera-relative fog, as if it
//               were parented to the camera.
////////////////////////////////////////////////////////////////////

2946 4 Mode 794624 9 Fog::Mode 9 Fog::Mode 2945 0 0 0 0 0 0 0 0 3 8 M_linear 13 Fog::M_linear 0 13 M_exponential 18 Fog::M_exponential 1 21 M_exponential_squared 26 Fog::M_exponential_squared 2 0 0

2947 9 FogAttrib 141313 9 FogAttrib 9 FogAttrib 0 0 0 0 2349 0 5 2344 2345 2346 2347 2348 0 1 0 2902 0 0 0 0 235
////////////////////////////////////////////////////////////////////
//       Class : FogAttrib
// Description : Applies a Fog to the geometry at and below this node.
////////////////////////////////////////////////////////////////////

2948 11 LightAttrib 141313 11 LightAttrib 11 LightAttrib 0 0 0 0 2373 0 23 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 0 1 0 2902 0 0 0 1 2949 426
////////////////////////////////////////////////////////////////////
//       Class : LightAttrib
// Description : Indicates which set of lights should be considered
//               "on" to illuminate geometry at this level and below.
//               A LightAttrib can either add lights or remove lights
//               from the total set of "on" lights.
////////////////////////////////////////////////////////////////////

2949 9 Operation 794624 22 LightAttrib::Operation 22 LightAttrib::Operation 2948 0 0 0 0 0 0 0 0 3 5 O_set 18 LightAttrib::O_set 0 5 O_add 18 LightAttrib::O_add 1 8 O_remove 21 LightAttrib::O_remove 2 0 145
// This is the old, deprecated interface to LightAttrib.  Do not use
// any of these methods for new code; these methods will be removed
// soon.

2950 14 MaterialAttrib 141313 14 MaterialAttrib 14 MaterialAttrib 0 0 0 0 2379 0 5 2374 2375 2376 2377 2378 0 1 0 2902 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : MaterialAttrib
// Description : Indicates which, if any, material should be applied
//               to geometry.  The material is used primarily to
//               control lighting effects, and isn't necessary (or
//               useful) in the absence of lighting.
////////////////////////////////////////////////////////////////////

2951 19 RescaleNormalAttrib 141313 19 RescaleNormalAttrib 19 RescaleNormalAttrib 0 0 0 0 2384 0 4 2380 2381 2382 2383 0 1 0 2902 0 0 0 1 2952 231
////////////////////////////////////////////////////////////////////
//       Class : RescaleNormalAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

2952 4 Mode 794624 25 RescaleNormalAttrib::Mode 25 RescaleNormalAttrib::Mode 2951 0 0 0 0 0 0 0 0 4 6 M_none 27 RescaleNormalAttrib::M_none 0 9 M_rescale 30 RescaleNormalAttrib::M_rescale 1 11 M_normalize 32 RescaleNormalAttrib::M_normalize 2 6 M_auto 27 RescaleNormalAttrib::M_auto 3 0 0

2953 16 ShadeModelAttrib 141313 16 ShadeModelAttrib 16 ShadeModelAttrib 0 0 0 0 2388 0 3 2385 2386 2387 0 1 0 2902 0 0 0 1 2954 295
////////////////////////////////////////////////////////////////////
//       Class : ShadeModelAttrib
// Description : Specifies whether flat shading (per-polygon) or
//               smooth shading (per-vertex) is in effect.
////////////////////////////////////////////////////////////////////

2954 4 Mode 794624 22 ShadeModelAttrib::Mode 22 ShadeModelAttrib::Mode 2953 0 0 0 0 0 0 0 0 2 6 M_flat 24 ShadeModelAttrib::M_flat 0 8 M_smooth 26 ShadeModelAttrib::M_smooth 1 0 0

2955 11 ShaderInput 75777 11 ShaderInput 11 ShaderInput 0 0 0 1 2390 0 0 8 2389 2391 2392 2393 2394 2395 2396 2397 0 1 0 2903 0 0 0 1 2956 331
////////////////////////////////////////////////////////////////////
//       Class : ShaderInput
// Description : This is a small container class that can hold any
//               one of the value types that can be passed as input
//               to a shader.
////////////////////////////////////////////////////////////////////

2956 15 ShaderInputType 794624 28 ShaderInput::ShaderInputType 28 ShaderInput::ShaderInputType 2955 0 0 0 0 0 0 0 0 4 9 M_invalid 22 ShaderInput::M_invalid 0 9 M_texture 22 ShaderInput::M_texture 1 10 M_nodepath 23 ShaderInput::M_nodepath 2 8 M_vector 21 ShaderInput::M_vector 3 0 0

2957 6 Shader 75777 6 Shader 6 Shader 0 0 0 0 0 0 10 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 0 1 0 2903 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Shader
// Description :
////////////////////////////////////////////////////////////////////

2958 12 ShaderAttrib 141313 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 2421 0 13 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 0 1 0 2902 0 0 0 0 0

2959 12 TexGenAttrib 75777 12 TexGenAttrib 12 TexGenAttrib 0 0 0 0 0 0 10 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 0 1 0 2902 0 0 0 0 530
////////////////////////////////////////////////////////////////////
//       Class : TexGenAttrib
// Description : Computes texture coordinates for geometry
//               automatically based on vertex position and/or normal.
//               This can be used to implement reflection and/or
//               refraction maps, for instance to make shiny surfaces,
//               as well as other special effects such as projective
//               texturing.
////////////////////////////////////////////////////////////////////

2960 13 TextureAttrib 141313 13 TextureAttrib 13 TextureAttrib 0 0 0 0 2453 0 21 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 0 1 0 2902 0 0 0 0 337
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates which texture should be applied as the
//               primary texture.  Also see TextureAttrib2 for the
//               secondary texture.
////////////////////////////////////////////////////////////////////

2961 12 AuxSceneData 141313 12 AuxSceneData 12 AuxSceneData 0 0 0 0 2462 0 8 2454 2455 2456 2457 2458 2459 2460 2461 0 1 0 2962 0 0 0 0 655
////////////////////////////////////////////////////////////////////
//       Class : AuxSceneData
// Description : This is a base class for a generic data structure
//               that can be attached per-instance to the camera, to
//               store per-instance data that must be preserved over
//               multiple frames.
//
//               In particular, this is used to implement the
//               FadeLODNode, which must remember during traversal at
//               what point it is in the fade, separately for each
//               instance and for each camera.
////////////////////////////////////////////////////////////////////

2962 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2963 7 BamFile 26625 7 BamFile 7 BamFile 0 0 0 1 2463 2464 0 17 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 0 0 0 0 889
////////////////////////////////////////////////////////////////////
//       Class : BamFile
// Description : The principle public interface to reading and writing
//               Bam disk files.  See also BamReader and BamWriter,
//               the more general implementation of this class.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
////////////////////////////////////////////////////////////////////

2964 15 BillboardEffect 141313 15 BillboardEffect 15 BillboardEffect 0 0 0 0 2494 0 12 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 0 1 0 2911 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : BillboardEffect
// Description : Indicates that geometry at this node should
//               automatically rotate to face the camera, or any other
//               arbitrary node.
////////////////////////////////////////////////////////////////////

2965 8 LensNode 141313 8 LensNode 8 LensNode 0 0 0 1 2495 2503 0 7 2496 2497 2498 2499 2500 2501 2502 0 1 0 2913 0 0 0 0 396
////////////////////////////////////////////////////////////////////
//       Class : LensNode
// Description : A node that contains a Lens.  The most important
//               example of this kind of node is a Camera, but other
//               kinds of nodes also contain a lens (for instance, a
//               Spotlight).
////////////////////////////////////////////////////////////////////

2966 6 Camera 75777 6 Camera 6 Camera 0 0 0 1 2504 2503 0 24 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 0 1 0 2965 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

2967 13 CompassEffect 141313 13 CompassEffect 13 CompassEffect 0 0 0 0 2533 0 4 2529 2530 2531 2532 0 1 0 2911 0 0 0 1 2968 1758
////////////////////////////////////////////////////////////////////
//       Class : CompassEffect
// Description : A CompassEffect causes a node to inherit its rotation
//               (or pos or scale, if specified) from some other
//               reference node in the graph, or more often from the
//               root.
//
//               In its purest form, a CompassEffect is used to keep
//               the node's rotation fixed relative to the top of the
//               scene graph, despite other transforms that may exist
//               above the node.  Hence the name: the node behaves
//               like a magnetic compass, always pointing in the same
//               direction.
//
//               As an couple of generalizing extensions, the
//               CompassEffect may also be set up to always orient its
//               node according to some other reference node than the
//               root of the scene graph.  Furthermore, it may
//               optionally adjust any of pos, rotation, or scale,
//               instead of necessarily rotation; and it may adjust
//               individual pos and scale components.  (Rotation may
//               not be adjusted on an individual component basis;
//               that's just asking for trouble.)
//
//               Be careful when using the pos and scale modes.  In
//               these modes, it's possible for the CompassEffect to
//               move its node far from its normal bounding volume,
//               causing culling to fail.  If this is an issue, you
//               may need to explicitly set a large (or infinite)
//               bounding volume on the effect node.
////////////////////////////////////////////////////////////////////

2968 10 Properties 794624 25 CompassEffect::Properties 25 CompassEffect::Properties 2967 0 0 0 0 0 0 0 0 10 3 P_x 18 CompassEffect::P_x 1 3 P_y 18 CompassEffect::P_y 2 3 P_z 18 CompassEffect::P_z 4 5 P_pos 20 CompassEffect::P_pos 7 5 P_rot 20 CompassEffect::P_rot 8 4 P_sx 19 CompassEffect::P_sx 16 4 P_sy 19 CompassEffect::P_sy 32 4 P_sz 19 CompassEffect::P_sz 64 7 P_scale 22 CompassEffect::P_scale 112 5 P_all 20 CompassEffect::P_all 127 0 0

2969 12 CullBinEnums 141313 12 CullBinEnums 12 CullBinEnums 0 0 0 0 2534 0 0 0 0 0 1 2970 280
////////////////////////////////////////////////////////////////////
//       Class : CullBinEnums
// Description : Provides scoping for the enumerated type shared by
//               CullBin and CullBinManager.
////////////////////////////////////////////////////////////////////

2970 7 BinType 794624 21 CullBinEnums::BinType 21 CullBinEnums::BinType 2969 0 0 0 0 0 0 0 0 7 10 BT_invalid 24 CullBinEnums::BT_invalid 0 11 BT_unsorted 25 CullBinEnums::BT_unsorted 1 15 BT_state_sorted 29 CullBinEnums::BT_state_sorted 2 16 BT_back_to_front 30 CullBinEnums::BT_back_to_front 3 16 BT_front_to_back 30 CullBinEnums::BT_front_to_back 4 8 BT_fixed 22 CullBinEnums::BT_fixed 5 17 BT_occlusion_test 31 CullBinEnums::BT_occlusion_test 6 0 0

2971 14 CullBinManager 43009 14 CullBinManager 14 CullBinManager 0 0 0 0 0 0 14 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 0 1 0 2969 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : CullBinManager
// Description : This is a global object that maintains the collection
//               of named CullBins in the world.
////////////////////////////////////////////////////////////////////

2972 11 DecalEffect 141313 11 DecalEffect 11 DecalEffect 0 0 0 0 2551 0 2 2549 2550 0 1 0 2911 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : DecalEffect
// Description : Applied to a GeomNode to indicate that the children
//               of this GeomNode are coplanar and should be drawn as
//               decals (eliminating Z-fighting).
////////////////////////////////////////////////////////////////////

2973 16 DirectionalLight 141313 16 DirectionalLight 16 DirectionalLight 0 0 0 1 2552 2560 0 7 2553 2554 2555 2556 2557 2558 2559 0 1 0 2919 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : DirectionalLight
// Description : A light shining from infinitely far away in a
//               particular direction, like sunlight.
////////////////////////////////////////////////////////////////////

2974 14 DrawMaskAttrib 141313 14 DrawMaskAttrib 14 DrawMaskAttrib 0 0 0 0 2567 0 6 2561 2562 2563 2564 2565 2566 0 1 0 2902 0 0 0 0 867
////////////////////////////////////////////////////////////////////
//       Class : DrawMaskAttrib
// Description : This attrib can be used to control the visibility of
//               certain Geoms from certain cameras.  It is similar in
//               principle to the PandaNode::set_draw_mask()
//               interface, except it does not cause an early prune in
//               the cull traversal; thus, it can be used to show a
//               node even though its parent has been hidden (if the
//               parent was hidden using the same interface).
//
//               It is mainly useful for unusual circumstances in
//               which the visibility of a node is not easy to
//               determine from examining the static hierarchy of the
//               graph.
////////////////////////////////////////////////////////////////////

2975 7 LODNode 141313 7 LODNode 7 LODNode 0 0 0 1 2568 2582 0 13 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 0 1 0 2913 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : LODNode
// Description : A Level-of-Detail node.  This selects only one of its
//               children for rendering, according to the distance
//               from the camera and the table indicated in the
//               associated LOD object.
////////////////////////////////////////////////////////////////////

2976 11 FadeLODNode 141313 11 FadeLODNode 11 FadeLODNode 0 0 0 1 2583 2587 0 3 2584 2585 2586 0 1 0 2975 0 0 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : FadeLODNode
// Description : A Level-of-Detail node with alpha based switching.
////////////////////////////////////////////////////////////////////

2977 22 InternalNameCollection 26625 22 InternalNameCollection 22 InternalNameCollection 0 0 0 1 2588 2590 0 13 2589 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 0 0 0 0 195
////////////////////////////////////////////////////////////////////
//       Class : InternalNameCollection
// Description : 
////////////////////////////////////////////////////////////////////

2978 13 LightLensNode 141313 13 LightLensNode 13 LightLensNode 0 0 0 0 2610 0 3 2607 2608 2609 0 2 3 2918 2603 2604 3 2965 2605 2606 0 0 226
////////////////////////////////////////////////////////////////////
//       Class : LightLensNode
// Description : A derivative of Light and of LensNode.  
////////////////////////////////////////////////////////////////////

2979 13 LoaderOptions 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 2611 2615 0 3 2612 2613 2614 0 0 0 1 2980 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

2980 11 LoaderFlags 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 2979 0 0 0 0 0 0 0 0 5 9 LF_search 24 LoaderOptions::LF_search 1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 12 0 99
// At the moment, we only have this one set of flags.  Maybe one day
// there will be more options.

2981 6 Loader 75777 6 Loader 6 Loader 0 0 0 1 2623 0 0 5 2624 2625 2626 2627 2628 0 1 0 2982 0 0 0 1 2983 251
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : Handles database loading through asynchronous
//               threading
////////////////////////////////////////////////////////////////////

2982 12 AsyncUtility 2049 12 AsyncUtility 12 AsyncUtility 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : AsyncUtility
// Description :
////////////////////////////////////////////////////////////////////

2983 7 Results 288769 15 Loader::Results 15 Loader::Results 2981 0 0 1 2616 2618 0 5 2617 2619 2620 2621 2622 0 0 0 0 0

2984 14 LoaderFileType 75777 14 LoaderFileType 14 LoaderFileType 0 0 0 0 0 0 5 2629 2630 2631 2632 2633 0 1 0 2985 0 0 0 0 436
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileType
// Description : This is the base class for a family of scene-graph
//               file types that the Loader supports.  Each kind of
//               loader that's available should define a corresponding
//               LoaderFileType object and register itself.
////////////////////////////////////////////////////////////////////

2985 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

2986 22 LoaderFileTypeRegistry 26625 22 LoaderFileTypeRegistry 22 LoaderFileTypeRegistry 0 0 0 0 2634 0 5 2635 2636 2637 2638 2639 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileTypeRegistry
// Description : This class maintains the set of all known
//               LoaderFileTypes in the universe.
////////////////////////////////////////////////////////////////////

2987 18 MaterialCollection 26625 18 MaterialCollection 18 MaterialCollection 0 0 0 1 2640 2642 0 14 2641 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : MaterialCollection
// Description : 
////////////////////////////////////////////////////////////////////

2988 9 ModelNode 141313 9 ModelNode 9 ModelNode 0 0 0 1 2656 2662 0 5 2657 2658 2659 2660 2661 0 1 0 2913 0 0 0 1 2989 683
////////////////////////////////////////////////////////////////////
//       Class : ModelNode
// Description : This node is placed at key points within the scene
//               graph to indicate the roots of "models": subtrees
//               that are conceptually to be treated as a single unit,
//               like a car or a room, for instance.  It doesn't
//               affect rendering or any other operations; it's
//               primarily useful as a high-level model indication.
//
//               ModelNodes are created in response to a <Model> { 1 }
//               flag within an egg file.
////////////////////////////////////////////////////////////////////

2989 17 PreserveTransform 794624 28 ModelNode::PreserveTransform 28 ModelNode::PreserveTransform 2988 0 0 0 0 0 0 0 0 3 7 PT_none 18 ModelNode::PT_none 0 8 PT_local 19 ModelNode::PT_local 1 6 PT_net 17 ModelNode::PT_net 2 0 0

2990 9 ModelPool 141313 9 ModelPool 9 ModelPool 0 0 0 0 2672 0 9 2663 2664 2665 2666 2667 2668 2669 2670 2671 0 0 0 0 1066
////////////////////////////////////////////////////////////////////
//       Class : ModelPool
// Description : This is the preferred interface for loading models.
//               It unifies all references to the same filename, so
//               that multiple attempts to load the same model will
//               return the same pointer.  Note that the default
//               behavior is thus to make instances: use with caution.
//               Use the copy_subgraph() method on Node (or use
//               NodePath::copy_to) to make modifiable copies of the
//               node.
//
//               Unlike TexturePool, this class does not automatically
//               resolve the model filenames before loading, so a
//               relative path and an absolute path to the same model
//               will appear to be different filenames.
//
//               This does not presently support asynchronous loading,
//               although it wouldn't be *too* difficult to add.
////////////////////////////////////////////////////////////////////

2991 9 ModelRoot 141313 9 ModelRoot 9 ModelRoot 0 0 0 1 2673 2675 0 1 2674 0 1 0 2988 0 0 0 0 561
////////////////////////////////////////////////////////////////////
//       Class : ModelRoot
// Description : A node of this type is created automatically at the
//               root of each model file that is loaded.  It may
//               eventually contain some information about the
//               contents of the model; at the moment, it contains no
//               special information, but can be used as a flag to
//               indicate the presence of a loaded model file.
////////////////////////////////////////////////////////////////////

2992 18 NodePathCollection 26625 18 NodePathCollection 18 NodePathCollection 0 0 0 1 2676 2678 0 26 2677 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : NodePathCollection
// Description : This is a set of zero or more NodePaths.  It's handy
//               for returning from functions that need to return
//               multiple NodePaths (for instance,
//               NodePaths::get_children).
////////////////////////////////////////////////////////////////////

2993 14 PosLerpFunctor 75777 14 PosLerpFunctor 14 PosLerpFunctor 0 0 0 1 2704 0 0 1 2705 0 1 0 2994 0 0 0 0 231
////////////////////////////////////////////////////////////////////
//       Class : PosLerpFunctor
// Description : Class for Lerping between positions in space
////////////////////////////////////////////////////////////////////

2994 29 SimpleLerpFunctor< LPoint3f > 2049 29 SimpleLerpFunctor< LPoint3f > 29 SimpleLerpFunctor< LPoint3f > 0 0 0 0 0 0 0 0 0 0 0 0

2995 14 HprLerpFunctor 75777 14 HprLerpFunctor 14 HprLerpFunctor 0 0 0 1 2706 0 0 3 2707 2708 2709 0 1 0 2996 0 0 0 0 259
// evil bad bad evil HPR
////////////////////////////////////////////////////////////////////
//       Class : HprLerpFunctor
// Description : Class for Lerping between orientations in space
////////////////////////////////////////////////////////////////////

2996 31 SimpleLerpFunctor< LVecBase3f > 2049 31 SimpleLerpFunctor< LVecBase3f > 31 SimpleLerpFunctor< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0

2997 16 ScaleLerpFunctor 75777 16 ScaleLerpFunctor 16 ScaleLerpFunctor 0 0 0 1 2710 0 0 1 2711 0 1 0 2996 0 0 0 0 221
////////////////////////////////////////////////////////////////////
//       Class : ScaleLerpFunctor
// Description : Class for Lerping between scales
////////////////////////////////////////////////////////////////////

2998 16 ColorLerpFunctor 75777 16 ColorLerpFunctor 16 ColorLerpFunctor 0 0 0 1 2712 0 0 1 2713 0 1 0 2999 0 0 0 0 221
////////////////////////////////////////////////////////////////////
//       Class : ColorLerpFunctor
// Description : Class for Lerping between colors
////////////////////////////////////////////////////////////////////

2999 31 SimpleLerpFunctor< LVecBase4f > 2049 31 SimpleLerpFunctor< LVecBase4f > 31 SimpleLerpFunctor< LVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0

3000 17 PosHprLerpFunctor 75777 17 PosHprLerpFunctor 17 PosHprLerpFunctor 0 0 0 1 2714 0 0 3 2715 2716 2717 0 1 0 3001 0 0 0 0 268
////////////////////////////////////////////////////////////////////
//       Class : PosHprLerpFunctor
// Description : Class for Lerping between positions and orientations
//               in space
////////////////////////////////////////////////////////////////////

3001 11 LerpFunctor 2049 11 LerpFunctor 11 LerpFunctor 0 0 0 0 0 0 0 0 0 0 0 0

3002 19 HprScaleLerpFunctor 75777 19 HprScaleLerpFunctor 19 HprScaleLerpFunctor 0 0 0 1 2718 0 0 3 2719 2720 2721 0 1 0 3001 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : HprScaleLerpFunctor
// Description : Class for Lerping between orientation
//               and scale
////////////////////////////////////////////////////////////////////

3003 22 PosHprScaleLerpFunctor 75777 22 PosHprScaleLerpFunctor 22 PosHprScaleLerpFunctor 0 0 0 1 2722 0 0 3 2723 2724 2725 0 1 0 3001 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : PosHprScaleLerpFunctor
// Description : Class for Lerping between position, orientation,
//               and scale
////////////////////////////////////////////////////////////////////

3004 21 ColorScaleLerpFunctor 75777 21 ColorScaleLerpFunctor 21 ColorScaleLerpFunctor 0 0 0 1 2726 0 0 1 2727 0 1 0 2999 0 0 0 0 232
////////////////////////////////////////////////////////////////////
//       Class : ColorScaleLerpFunctor
// Description : Class for Lerping between color scales
////////////////////////////////////////////////////////////////////

3005 10 PointLight 141313 10 PointLight 10 PointLight 0 0 0 1 2728 2736 0 7 2729 2730 2731 2732 2733 2734 2735 0 1 0 2919 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PointLight
// Description : A light originating from a single point in space, and
//               shining in all directions.
////////////////////////////////////////////////////////////////////

3006 13 PolylightNode 141313 13 PolylightNode 13 PolylightNode 0 0 0 1 2737 2774 0 36 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 0 1 0 2913 0 0 0 2 3007 3008 201
////////////////////////////////////////////////////////////////////
//       Class : PolylightNode
// Description : A PolylightNode
////////////////////////////////////////////////////////////////////

3007 12 Flicker_Type 794624 27 PolylightNode::Flicker_Type 27 PolylightNode::Flicker_Type 3006 0 0 0 0 0 0 0 0 3 7 FRANDOM 22 PolylightNode::FRANDOM 0 4 FSIN 19 PolylightNode::FSIN 1 7 FCUSTOM 22 PolylightNode::FCUSTOM 2 0 0

3008 16 Attenuation_Type 794624 31 PolylightNode::Attenuation_Type 31 PolylightNode::Attenuation_Type 3006 0 0 0 0 0 0 0 0 2 7 ALINEAR 22 PolylightNode::ALINEAR 0 10 AQUADRATIC 25 PolylightNode::AQUADRATIC 1 0 0

3009 15 PolylightEffect 141313 15 PolylightEffect 15 PolylightEffect 0 0 0 0 2786 0 11 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 0 1 0 2911 0 0 0 1 3010 559
////////////////////////////////////////////////////////////////////
//       Class : PolylightEffect
// Description : A PolylightEffect can be used on a node to define a
//               LightGroup  for that node. A LightGroup contains 
//               PolylightNodes which are essentially nodes that add 
//               color to the polygons of a model based on distance.
//               PolylightNode is a cheap way to get lighting effects
//               specially for night scenes
////////////////////////////////////////////////////////////////////

3010 11 ContribType 794624 28 PolylightEffect::ContribType 28 PolylightEffect::ContribType 3009 0 0 0 0 0 0 0 0 2 11 CT_proximal 28 PolylightEffect::CT_proximal 0 6 CT_all 23 PolylightEffect::CT_all 1 0 0

3011 10 PortalNode 75777 10 PortalNode 10 PortalNode 0 0 0 1 2787 1807 0 22 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 0 1 0 2913 0 0 0 0 483
////////////////////////////////////////////////////////////////////
//       Class : PortalNode 
//       Description : A node in the scene graph that can hold a 
//                     Portal Polygon, which is a rectangle. Other 
//                     types of polygons are not supported for
//                     now. It also holds a PT(PandaNode) Cell that 
//                     this portal is connected to
////////////////////////////////////////////////////////////////////

3012 17 SceneGraphReducer 26625 17 SceneGraphReducer 17 SceneGraphReducer 0 0 0 1 2810 2811 0 7 2812 2813 2814 2815 2816 2817 2818 0 0 0 4 3013 3014 3015 3016 610
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphReducer
// Description : An interface for simplifying ("flattening") scene
//               graphs by eliminating unneeded nodes and collapsing
//               out unneeded state changes and transforms.
//
//               This class is designed so that it may be inherited
//               from and specialized, if needed, to fine-tune the
//               flattening behavior, but normally the default
//               behavior is sufficient.
////////////////////////////////////////////////////////////////////

3013 11 AttribTypes 794624 30 SceneGraphReducer::AttribTypes 30 SceneGraphReducer::AttribTypes 3012 0 0 0 0 0 0 0 0 5 12 TT_transform 31 SceneGraphReducer::TT_transform 1 8 TT_color 27 SceneGraphReducer::TT_color 2 14 TT_color_scale 33 SceneGraphReducer::TT_color_scale 4 13 TT_tex_matrix 32 SceneGraphReducer::TT_tex_matrix 8 8 TT_other 27 SceneGraphReducer::TT_other 16 0 0

3014 15 CombineSiblings 794624 34 SceneGraphReducer::CombineSiblings 34 SceneGraphReducer::CombineSiblings 3012 0 0 0 0 0 0 0 0 4 12 CS_geom_node 31 SceneGraphReducer::CS_geom_node 1 16 CS_within_radius 35 SceneGraphReducer::CS_within_radius 2 8 CS_other 27 SceneGraphReducer::CS_other 4 10 CS_recurse 29 SceneGraphReducer::CS_recurse 8 0 0

3015 17 CollectVertexData 794624 36 SceneGraphReducer::CollectVertexData 36 SceneGraphReducer::CollectVertexData 3012 0 0 0 0 0 0 0 0 6 8 CVD_name 27 SceneGraphReducer::CVD_name 1 9 CVD_model 28 SceneGraphReducer::CVD_model 2 13 CVD_transform 32 SceneGraphReducer::CVD_transform 4 17 CVD_avoid_dynamic 36 SceneGraphReducer::CVD_avoid_dynamic 8 17 CVD_one_node_only 36 SceneGraphReducer::CVD_one_node_only 16 10 CVD_format 29 SceneGraphReducer::CVD_format 32 0 0

3016 14 MakeNonindexed 794624 33 SceneGraphReducer::MakeNonindexed 33 SceneGraphReducer::MakeNonindexed 3012 0 0 0 0 0 0 0 0 3 17 MN_composite_only 36 SceneGraphReducer::MN_composite_only 1 17 MN_avoid_animated 36 SceneGraphReducer::MN_avoid_animated 2 16 MN_avoid_dynamic 35 SceneGraphReducer::MN_avoid_dynamic 4 0 0

3017 18 SelectiveChildNode 141313 18 SelectiveChildNode 18 SelectiveChildNode 0 0 0 1 2819 2821 0 1 2820 0 1 0 2913 0 0 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SelectiveChildNode
// Description : A base class for nodes like LODNode and SequenceNode
//               that select only one visible child at a time.
////////////////////////////////////////////////////////////////////

3018 12 SequenceNode 141313 12 SequenceNode 12 SequenceNode 0 0 0 1 2826 2830 0 3 2827 2828 2829 0 2 3 3017 2822 2823 3 3019 2824 2825 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SequenceNode
// Description : A node that automatically cycles through rendering
//               each one of its children according to its frame rate.
////////////////////////////////////////////////////////////////////

3019 13 AnimInterface 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

3020 10 ShaderPool 141313 10 ShaderPool 10 ShaderPool 0 0 0 0 2840 0 9 2831 2832 2833 2834 2835 2836 2837 2838 2839 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : ShaderPool
// Description : This is the preferred interface for loading shaders for
//               the TextNode system.  It is similar to ModelPool and
//               TexturePool in that it unifies references to the same
//               filename.
////////////////////////////////////////////////////////////////////

3021 16 ShowBoundsEffect 141313 16 ShowBoundsEffect 16 ShowBoundsEffect 0 0 0 0 2844 0 3 2841 2842 2843 0 1 0 2911 0 0 0 0 412
////////////////////////////////////////////////////////////////////
//       Class : ShowBoundsEffect
// Description : Applied to a GeomNode to cause a visible bounding
//               volume to be drawn for this node.  This is generally
//               used only during development to help identify
//               bounding volume issues.
////////////////////////////////////////////////////////////////////

3022 9 Spotlight 141313 9 Spotlight 9 Spotlight 0 0 0 1 2845 2854 0 8 2846 2847 2848 2849 2850 2851 2852 2853 0 1 0 2978 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : Spotlight
// Description : A light originating from a single point in space, and
//               shining in a particular direction, with a cone-shaped
//               falloff.
//
//               The Spotlight frustum is defined using a Lens, so it
//               can have any of the properties that a camera lens can
//               have.
//
//               Note that the class is named Spotlight instead of
//               SpotLight, because "spotlight" is a single English
//               word, instead of two words.
////////////////////////////////////////////////////////////////////

3023 10 SwitchNode 141313 10 SwitchNode 10 SwitchNode 0 0 0 1 2855 2858 0 2 2856 2857 0 1 0 3017 0 0 0 0 281
////////////////////////////////////////////////////////////////////
//       Class : SwitchNode
// Description : A node that renders only one of its children,
//               according to the user's indication.
////////////////////////////////////////////////////////////////////

3024 18 TexProjectorEffect 75777 18 TexProjectorEffect 18 TexProjectorEffect 0 0 0 0 0 0 8 2859 2860 2861 2862 2863 2864 2865 2866 0 1 0 2911 0 0 0 0 1911
////////////////////////////////////////////////////////////////////
//       Class : TexProjectorEffect
// Description : This effect automatically applies a computed texture
//               matrix to the specified texture stage, according to
//               the relative position of two specified nodes.
//
//               The relative transform from the "from" node to the
//               "to" node is applied directly to the texture matrix
//               each frame.  If the "to" node happens to be a
//               LensNode, its lens projection matrix is applied as
//               well.
//
//               This can be used to apply a number of special
//               effects.  Fundamentally, it may simply be used to
//               provide a separate PandaNode that may be adjusted
//               (e.g. via a LerpInterval) in order to easily apply a
//               linear transformation to an object's texture
//               coordinates (rather than having to explicitly call
//               NodePath.set_tex_transform() each frame).
//
//               In a more sophisticated case, the TexProjectorEffect
//               is particularly useful in conjunction with a
//               TexGenAttrib that specifies a mode of
//               M_world_position (which copies the world position of
//               each vertex to the texture coordinates).  Then the
//               TexProjector can be used to convert these world
//               coordinates to the relative coordinates of a
//               particular node, causing (for instance) a texture to
//               appear to follow a node around as it moves through
//               the world.  With a LensNode, you can project a
//               texture onto the walls, for instance to apply a
//               flashlight effect or an image-based shadow.
////////////////////////////////////////////////////////////////////

3025 17 TextureCollection 26625 17 TextureCollection 17 TextureCollection 0 0 0 1 2867 2869 0 14 2868 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : TextureCollection
// Description : 
////////////////////////////////////////////////////////////////////

3026 22 TextureStageCollection 26625 22 TextureStageCollection 22 TextureStageCollection 0 0 0 1 2883 2885 0 15 2884 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 0 0 0 0 195
////////////////////////////////////////////////////////////////////
//       Class : TextureStageCollection
// Description : 
////////////////////////////////////////////////////////////////////

3027 22 TransformState const * 8576 22 TransformState const * 22 TransformState const * 0 0 3028 0 0 0 0 0 0 0 0 0

3028 20 TransformState const 8832 20 TransformState const 20 TransformState const 0 0 2900 0 0 0 0 0 0 0 0 0

3029 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

3030 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

3031 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3032 0 0 0 0 0 0 0 0 0

3032 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3033 0 0 0 0 0 0 0 0 0

3033 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3034 20 LQuaternionf const * 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3035 0 0 0 0 0 0 0 0 0

3035 18 LQuaternionf const 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3036 0 0 0 0 0 0 0 0 0

3036 12 LQuaternionf 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 907
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3037 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

3038 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3039 0 0 0 0 0 0 0 0 0

3039 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3040 0 0 0 0 0 0 0 0 0

3040 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3041 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3042 0 0 0 0 0 0 0 0 0

3042 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3043 0 0 0 0 0 0 0 0 0

3043 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3044 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3045 0 0 0 0 0 0 0 0 0

3045 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3046 0 0 0 0 0 0 0 0 0

3046 9 LMatrix3f 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 1138
// Filename: lmatrix3_src.h
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3047 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3048 0 0 0 0 0 0 0 0 0

3048 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 3049 0 0 0 0 0 0 0 0 0

3049 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3050 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3043 0 0 0 0 0 0 0 0 0

3051 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3046 0 0 0 0 0 0 0 0 0

3052 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

3053 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

3054 9 ostream * 8576 9 ostream * 9 ostream * 0 0 3055 0 0 0 0 0 0 0 0 0

3055 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

3056 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3057 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 3056 0 0 0 0 0 0 0 0 0

3058 20 RenderAttrib const * 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 3059 0 0 0 0 0 0 0 0 0

3059 18 RenderAttrib const 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 2902 0 0 0 0 0 0 0 0 0

3060 24 RenderModeAttrib const * 8576 24 RenderModeAttrib const * 24 RenderModeAttrib const * 0 0 3061 0 0 0 0 0 0 0 0 0

3061 22 RenderModeAttrib const 8832 22 RenderModeAttrib const 22 RenderModeAttrib const 0 0 2906 0 0 0 0 0 0 0 0 0

3062 14 TextureStage * 8576 14 TextureStage * 14 TextureStage * 0 0 3063 0 0 0 0 0 0 0 0 0

3063 12 TextureStage 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

3064 23 TexMatrixAttrib const * 8576 23 TexMatrixAttrib const * 23 TexMatrixAttrib const * 0 0 3065 0 0 0 0 0 0 0 0 0

3065 21 TexMatrixAttrib const 8832 21 TexMatrixAttrib const 21 TexMatrixAttrib const 0 0 2908 0 0 0 0 0 0 0 0 0

3066 19 RenderState const * 8576 19 RenderState const * 19 RenderState const * 0 0 3067 0 0 0 0 0 0 0 0 0

3067 17 RenderState const 8832 17 RenderState const 17 RenderState const 0 0 2909 0 0 0 0 0 0 0 0 0

3068 15 CullTraverser * 8576 15 CullTraverser * 15 CullTraverser * 0 0 3069 0 0 0 0 0 0 0 0 0

3069 13 CullTraverser 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0

3070 25 CullTraverserData const * 8576 25 CullTraverserData const * 25 CullTraverserData const * 0 0 3071 0 0 0 0 0 0 0 0 0

3071 23 CullTraverserData const 8832 23 CullTraverserData const 23 CullTraverserData const 0 0 3072 0 0 0 0 0 0 0 0 0

3072 17 CullTraverserData 2048 17 CullTraverserData 17 CullTraverserData 0 0 0 0 0 0 0 0 0 0 0 0

3073 19 AttribSlots const * 8576 19 AttribSlots const * 19 AttribSlots const * 0 0 3074 0 0 0 0 0 0 0 0 0

3074 17 AttribSlots const 8832 17 AttribSlots const 17 AttribSlots const 0 0 3075 0 0 0 0 0 0 0 0 0

3075 11 AttribSlots 2048 11 AttribSlots 11 AttribSlots 0 0 0 0 0 0 0 0 0 0 0 0

3076 17 FogAttrib const * 8576 17 FogAttrib const * 17 FogAttrib const * 0 0 3077 0 0 0 0 0 0 0 0 0

3077 15 FogAttrib const 8832 15 FogAttrib const 15 FogAttrib const 0 0 2947 0 0 0 0 0 0 0 0 0

3078 21 CullBinAttrib const * 8576 21 CullBinAttrib const * 21 CullBinAttrib const * 0 0 3079 0 0 0 0 0 0 0 0 0

3079 19 CullBinAttrib const 8832 19 CullBinAttrib const 19 CullBinAttrib const 0 0 2938 0 0 0 0 0 0 0 0 0

3080 26 TransparencyAttrib const * 8576 26 TransparencyAttrib const * 26 TransparencyAttrib const * 0 0 3081 0 0 0 0 0 0 0 0 0

3081 24 TransparencyAttrib const 8832 24 TransparencyAttrib const 24 TransparencyAttrib const 0 0 2924 0 0 0 0 0 0 0 0 0

3082 19 ColorAttrib const * 8576 19 ColorAttrib const * 19 ColorAttrib const * 0 0 3083 0 0 0 0 0 0 0 0 0

3083 17 ColorAttrib const 8832 17 ColorAttrib const 17 ColorAttrib const 0 0 2930 0 0 0 0 0 0 0 0 0

3084 24 ColorScaleAttrib const * 8576 24 ColorScaleAttrib const * 24 ColorScaleAttrib const * 0 0 3085 0 0 0 0 0 0 0 0 0

3085 22 ColorScaleAttrib const 8832 22 ColorScaleAttrib const 22 ColorScaleAttrib const 0 0 2935 0 0 0 0 0 0 0 0 0

3086 21 TextureAttrib const * 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 3087 0 0 0 0 0 0 0 0 0

3087 19 TextureAttrib const 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 2960 0 0 0 0 0 0 0 0 0

3088 20 TexGenAttrib const * 8576 20 TexGenAttrib const * 20 TexGenAttrib const * 0 0 3089 0 0 0 0 0 0 0 0 0

3089 18 TexGenAttrib const 8832 18 TexGenAttrib const 18 TexGenAttrib const 0 0 2959 0 0 0 0 0 0 0 0 0

3090 23 ClipPlaneAttrib const * 8576 23 ClipPlaneAttrib const * 23 ClipPlaneAttrib const * 0 0 3091 0 0 0 0 0 0 0 0 0

3091 21 ClipPlaneAttrib const 8832 21 ClipPlaneAttrib const 21 ClipPlaneAttrib const 0 0 2928 0 0 0 0 0 0 0 0 0

3092 20 ShaderAttrib const * 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 3093 0 0 0 0 0 0 0 0 0

3093 18 ShaderAttrib const 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 2958 0 0 0 0 0 0 0 0 0

3094 23 AlphaTestAttrib const * 8576 23 AlphaTestAttrib const * 23 AlphaTestAttrib const * 0 0 3095 0 0 0 0 0 0 0 0 0

3095 21 AlphaTestAttrib const 8832 21 AlphaTestAttrib const 21 AlphaTestAttrib const 0 0 2910 0 0 0 0 0 0 0 0 0

3096 20 RenderEffect const * 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 3097 0 0 0 0 0 0 0 0 0

3097 18 RenderEffect const 8832 18 RenderEffect const 18 RenderEffect const 0 0 2911 0 0 0 0 0 0 0 0 0

3098 21 RenderEffects const * 8576 21 RenderEffects const * 21 RenderEffects const * 0 0 3099 0 0 0 0 0 0 0 0 0

3099 19 RenderEffects const 8832 19 RenderEffects const 19 RenderEffects const 0 0 2912 0 0 0 0 0 0 0 0 0

3100 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

3101 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 2913 0 0 0 0 0 0 0 0 0

3102 17 PandaNode const * 8576 17 PandaNode const * 17 PandaNode const * 0 0 3103 0 0 0 0 0 0 0 0 0

3103 15 PandaNode const 8832 15 PandaNode const 15 PandaNode const 0 0 2913 0 0 0 0 0 0 0 0 0

3104 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 3105 0 0 0 0 0 0 0 0 0

3105 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0

3106 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0

3107 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 3106 0 0 0 0 0 0 0 0 0

3108 22 BoundingVolume const * 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 3109 0 0 0 0 0 0 0 0 0

3109 20 BoundingVolume const 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 3110 0 0 0 0 0 0 0 0 0

3110 14 BoundingVolume 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

3111 7 Light * 8576 7 Light * 7 Light * 0 0 2918 0 0 0 0 0 0 0 0 0

3112 15 TypedWritable * 8576 15 TypedWritable * 15 TypedWritable * 0 0 2914 0 0 0 0 0 0 0 0 0

3113 9 Namable * 8576 9 Namable * 9 Namable * 0 0 2915 0 0 0 0 0 0 0 0 0

3114 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2916 0 0 0 0 0 0 0 0 0

3115 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 2917 0 0 0 0 0 0 0 0 0

3116 16 GeomNode const * 8576 16 GeomNode const * 16 GeomNode const * 0 0 3117 0 0 0 0 0 0 0 0 0

3117 14 GeomNode const 8832 14 GeomNode const 14 GeomNode const 0 0 2917 0 0 0 0 0 0 0 0 0

3118 10 Geom const 8832 10 Geom const 10 Geom const 0 0 3119 0 0 0 0 0 0 0 0 0

3119 4 Geom 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

3120 12 Geom const * 8576 12 Geom const * 12 Geom const * 0 0 3118 0 0 0 0 0 0 0 0 0

3121 6 Geom * 8576 6 Geom * 6 Geom * 0 0 3119 0 0 0 0 0 0 0 0 0

3122 13 Light const * 8576 13 Light const * 13 Light const * 0 0 3123 0 0 0 0 0 0 0 0 0

3123 11 Light const 8832 11 Light const 11 Light const 0 0 2918 0 0 0 0 0 0 0 0 0

3124 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3125 0 0 0 0 0 0 0 0 0

3125 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3126 0 0 0 0 0 0 0 0 0

3126 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3127 17 LightNode const * 8576 17 LightNode const * 17 LightNode const * 0 0 3128 0 0 0 0 0 0 0 0 0

3128 15 LightNode const 8832 15 LightNode const 15 LightNode const 0 0 2919 0 0 0 0 0 0 0 0 0

3129 11 LightNode * 8576 11 LightNode * 11 LightNode * 0 0 2919 0 0 0 0 0 0 0 0 0

3130 14 AmbientLight * 8576 14 AmbientLight * 14 AmbientLight * 0 0 2920 0 0 0 0 0 0 0 0 0

3131 18 unsigned short int 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0

3132 23 AntialiasAttrib const * 8576 23 AntialiasAttrib const * 23 AntialiasAttrib const * 0 0 3133 0 0 0 0 0 0 0 0 0

3133 21 AntialiasAttrib const 8832 21 AntialiasAttrib const 21 AntialiasAttrib const 0 0 2921 0 0 0 0 0 0 0 0 0

3134 14 Planef const * 8576 14 Planef const * 14 Planef const * 0 0 3135 0 0 0 0 0 0 0 0 0

3135 12 Planef const 8832 12 Planef const 12 Planef const 0 0 3136 0 0 0 0 0 0 0 0 0

3136 6 Planef 2048 6 Planef 6 Planef 0 0 0 0 0 0 0 0 0 0 0 973
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Plane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

3137 11 PlaneNode * 8576 11 PlaneNode * 11 PlaneNode * 0 0 2923 0 0 0 0 0 0 0 0 0

3138 17 PlaneNode const * 8576 17 PlaneNode const * 17 PlaneNode const * 0 0 3139 0 0 0 0 0 0 0 0 0

3139 15 PlaneNode const 8832 15 PlaneNode const 15 PlaneNode const 0 0 2923 0 0 0 0 0 0 0 0 0

3140 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 2926 0 0 0 0 0 0 0 0 0

3141 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 3142 0 0 0 0 0 0 0 0 0

3142 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 2926 0 0 0 0 0 0 0 0 0

3143 20 NodePathCollection * 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 2992 0 0 0 0 0 0 0 0 0

3144 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 3049 0 0 0 0 0 0 0 0 0

3145 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3146 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 3145 0 0 0 0 0 0 0 0 0

3147 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 3033 0 0 0 0 0 0 0 0 0

3148 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3036 0 0 0 0 0 0 0 0 0

3149 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3040 0 0 0 0 0 0 0 0 0

3150 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 3151 0 0 0 0 0 0 0 0 0

3151 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 3145 0 0 0 0 0 0 0 0 0

3152 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3126 0 0 0 0 0 0 0 0 0

3153 9 Texture * 8576 9 Texture * 9 Texture * 0 0 3154 0 0 0 0 0 0 0 0 0

3154 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

3155 8 Shader * 8576 8 Shader * 8 Shader * 0 0 2957 0 0 0 0 0 0 0 0 0

3156 14 InternalName * 8576 14 InternalName * 14 InternalName * 0 0 3157 0 0 0 0 0 0 0 0 0

3157 12 InternalName 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

3158 17 LVector4f const * 8576 17 LVector4f const * 17 LVector4f const * 0 0 3159 0 0 0 0 0 0 0 0 0

3159 15 LVector4f const 8832 15 LVector4f const 15 LVector4f const 0 0 3160 0 0 0 0 0 0 0 0 0

3160 9 LVector4f 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 898
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3161 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

3162 19 ShaderInput const * 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 3163 0 0 0 0 0 0 0 0 0

3163 17 ShaderInput const 8832 17 ShaderInput const 17 ShaderInput const 0 0 2955 0 0 0 0 0 0 0 0 0

3164 14 Shader const * 8576 14 Shader const * 14 Shader const * 0 0 3165 0 0 0 0 0 0 0 0 0

3165 12 Shader const 8832 12 Shader const 12 Shader const 0 0 2957 0 0 0 0 0 0 0 0 0

3166 20 InternalName const * 8576 20 InternalName const * 20 InternalName const * 0 0 3167 0 0 0 0 0 0 0 0 0

3167 18 InternalName const 8832 18 InternalName const 18 InternalName const 0 0 3157 0 0 0 0 0 0 0 0 0

3168 24 InternalNameCollection * 8576 24 InternalNameCollection * 24 InternalNameCollection * 0 0 2977 0 0 0 0 0 0 0 0 0

3169 19 TextureCollection * 8576 19 TextureCollection * 19 TextureCollection * 0 0 3025 0 0 0 0 0 0 0 0 0

3170 24 TextureStageCollection * 8576 24 TextureStageCollection * 24 TextureStageCollection * 0 0 3026 0 0 0 0 0 0 0 0 0

3171 10 Material * 8576 10 Material * 10 Material * 0 0 3172 0 0 0 0 0 0 0 0 0

3172 8 Material 2048 8 Material 8 Material 0 0 0 0 0 0 0 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : Material
// Description : Defines the way an object appears in the presence of
//               lighting.  A material is only necessary if lighting
//               is to be enabled; otherwise, the material isn't used.
////////////////////////////////////////////////////////////////////

3173 20 MaterialCollection * 8576 20 MaterialCollection * 20 MaterialCollection * 0 0 2987 0 0 0 0 0 0 0 0 0

3174 5 Fog * 8576 5 Fog * 5 Fog * 0 0 2945 0 0 0 0 0 0 0 0 0

3175 27 GraphicsStateGuardianBase * 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 3176 0 0 0 0 0 0 0 0 0

3176 25 GraphicsStateGuardianBase 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

3177 16 BoundingVolume * 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 3110 0 0 0 0 0 0 0 0 0

3178 24 ColorBlendAttrib const * 8576 24 ColorBlendAttrib const * 24 ColorBlendAttrib const * 0 0 3179 0 0 0 0 0 0 0 0 0

3179 22 ColorBlendAttrib const 8832 22 ColorBlendAttrib const 22 ColorBlendAttrib const 0 0 2932 0 0 0 0 0 0 0 0 0

3180 24 ColorWriteAttrib const * 8576 24 ColorWriteAttrib const * 24 ColorWriteAttrib const * 0 0 3181 0 0 0 0 0 0 0 0 0

3181 22 ColorWriteAttrib const 8832 22 ColorWriteAttrib const 22 ColorWriteAttrib const 0 0 2936 0 0 0 0 0 0 0 0 0

3182 22 CullFaceAttrib const * 8576 22 CullFaceAttrib const * 22 CullFaceAttrib const * 0 0 3183 0 0 0 0 0 0 0 0 0

3183 20 CullFaceAttrib const 8832 20 CullFaceAttrib const 20 CullFaceAttrib const 0 0 2939 0 0 0 0 0 0 0 0 0

3184 25 DepthOffsetAttrib const * 8576 25 DepthOffsetAttrib const * 25 DepthOffsetAttrib const * 0 0 3185 0 0 0 0 0 0 0 0 0

3185 23 DepthOffsetAttrib const 8832 23 DepthOffsetAttrib const 23 DepthOffsetAttrib const 0 0 2941 0 0 0 0 0 0 0 0 0

3186 23 DepthTestAttrib const * 8576 23 DepthTestAttrib const * 23 DepthTestAttrib const * 0 0 3187 0 0 0 0 0 0 0 0 0

3187 21 DepthTestAttrib const 8832 21 DepthTestAttrib const 21 DepthTestAttrib const 0 0 2942 0 0 0 0 0 0 0 0 0

3188 24 DepthWriteAttrib const * 8576 24 DepthWriteAttrib const * 24 DepthWriteAttrib const * 0 0 3189 0 0 0 0 0 0 0 0 0

3189 22 DepthWriteAttrib const 8832 22 DepthWriteAttrib const 22 DepthWriteAttrib const 0 0 2943 0 0 0 0 0 0 0 0 0

3190 11 Fog const * 8576 11 Fog const * 11 Fog const * 0 0 3191 0 0 0 0 0 0 0 0 0

3191 9 Fog const 8832 9 Fog const 9 Fog const 0 0 2945 0 0 0 0 0 0 0 0 0

3192 19 LightAttrib const * 8576 19 LightAttrib const * 19 LightAttrib const * 0 0 3193 0 0 0 0 0 0 0 0 0

3193 17 LightAttrib const 8832 17 LightAttrib const 17 LightAttrib const 0 0 2948 0 0 0 0 0 0 0 0 0

3194 22 MaterialAttrib const * 8576 22 MaterialAttrib const * 22 MaterialAttrib const * 0 0 3195 0 0 0 0 0 0 0 0 0

3195 20 MaterialAttrib const 8832 20 MaterialAttrib const 20 MaterialAttrib const 0 0 2950 0 0 0 0 0 0 0 0 0

3196 27 RescaleNormalAttrib const * 8576 27 RescaleNormalAttrib const * 27 RescaleNormalAttrib const * 0 0 3197 0 0 0 0 0 0 0 0 0

3197 25 RescaleNormalAttrib const 8832 25 RescaleNormalAttrib const 25 RescaleNormalAttrib const 0 0 2951 0 0 0 0 0 0 0 0 0

3198 24 ShadeModelAttrib const * 8576 24 ShadeModelAttrib const * 24 ShadeModelAttrib const * 0 0 3199 0 0 0 0 0 0 0 0 0

3199 22 ShadeModelAttrib const 8832 22 ShadeModelAttrib const 22 ShadeModelAttrib const 0 0 2953 0 0 0 0 0 0 0 0 0

3200 13 ShaderInput * 8576 13 ShaderInput * 13 ShaderInput * 0 0 2955 0 0 0 0 0 0 0 0 0

3201 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 3202 0 0 0 0 0 0 0 0 0

3202 14 Filename const 8832 14 Filename const 14 Filename const 0 0 3203 0 0 0 0 0 0 0 0 0

3203 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

3204 15 ShaderExpansion 2048 15 ShaderExpansion 15 ShaderExpansion 0 0 0 0 0 0 0 0 0 0 0 507
////////////////////////////////////////////////////////////////////
//       Class : ShaderExpansion
//      Summary: A shader can contain context-sensitive macros.
//               A ShaderExpansion is the output you get when you
//               run the macro preprocessor on a shader.
//               The ShaderExpansion contains the shader's 
//               macroexpanded text, and a map of ShaderContext
//               objects.
////////////////////////////////////////////////////////////////////

3205 17 ShaderExpansion * 8576 17 ShaderExpansion * 17 ShaderExpansion * 0 0 3204 0 0 0 0 0 0 0 0 0

3206 20 TextureStage const * 8576 20 TextureStage const * 20 TextureStage const * 0 0 3207 0 0 0 0 0 0 0 0 0

3207 18 TextureStage const 8832 18 TextureStage const 18 TextureStage const 0 0 3063 0 0 0 0 0 0 0 0 0

3208 14 AuxSceneData * 8576 14 AuxSceneData * 14 AuxSceneData * 0 0 2961 0 0 0 0 0 0 0 0 0

3209 20 AuxSceneData const * 8576 20 AuxSceneData const * 20 AuxSceneData const * 0 0 3210 0 0 0 0 0 0 0 0 0

3210 18 AuxSceneData const 8832 18 AuxSceneData const 18 AuxSceneData const 0 0 2961 0 0 0 0 0 0 0 0 0

3211 9 BamFile * 8576 9 BamFile * 9 BamFile * 0 0 2963 0 0 0 0 0 0 0 0 0

3212 9 istream * 8576 9 istream * 9 istream * 0 0 3213 0 0 0 0 0 0 0 0 0

3213 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0

3214 15 BamFile const * 8576 15 BamFile const * 15 BamFile const * 0 0 3215 0 0 0 0 0 0 0 0 0

3215 13 BamFile const 8832 13 BamFile const 13 BamFile const 0 0 2963 0 0 0 0 0 0 0 0 0

3216 21 TypedWritable const * 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 3217 0 0 0 0 0 0 0 0 0

3217 19 TypedWritable const 8832 19 TypedWritable const 19 TypedWritable const 0 0 2914 0 0 0 0 0 0 0 0 0

3218 9 BamEndian 1572864 9 BamEndian 9 BamEndian 0 0 0 0 0 0 0 0 0 0 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

3219 11 BamReader * 8576 11 BamReader * 11 BamReader * 0 0 3220 0 0 0 0 0 0 0 0 0

3220 9 BamReader 2048 9 BamReader 9 BamReader 0 0 0 0 0 0 0 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

3221 11 BamWriter * 8576 11 BamWriter * 11 BamWriter * 0 0 3222 0 0 0 0 0 0 0 0 0

3222 9 BamWriter 2048 9 BamWriter 9 BamWriter 0 0 0 0 0 0 0 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

3223 23 BillboardEffect const * 8576 23 BillboardEffect const * 23 BillboardEffect const * 0 0 3224 0 0 0 0 0 0 0 0 0

3224 21 BillboardEffect const 8832 21 BillboardEffect const 21 BillboardEffect const 0 0 2964 0 0 0 0 0 0 0 0 0

3225 10 LensNode * 8576 10 LensNode * 10 LensNode * 0 0 2965 0 0 0 0 0 0 0 0 0

3226 12 Lens const * 8576 12 Lens const * 12 Lens const * 0 0 3227 0 0 0 0 0 0 0 0 0

3227 10 Lens const 8832 10 Lens const 10 Lens const 0 0 3228 0 0 0 0 0 0 0 0 0

3228 4 Lens 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 688
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node
//               (defined in sgraph), which defines the fundamental
//               interface to point-of-view for rendering.  Lenses are
//               also used in other contexts, however; for instance, a
//               Spotlight is also defined using a lens.
////////////////////////////////////////////////////////////////////

3229 6 Lens * 8576 6 Lens * 6 Lens * 0 0 3228 0 0 0 0 0 0 0 0 0

3230 16 LensNode const * 8576 16 LensNode const * 16 LensNode const * 0 0 3231 0 0 0 0 0 0 0 0 0

3231 14 LensNode const 8832 14 LensNode const 14 LensNode const 0 0 2965 0 0 0 0 0 0 0 0 0

3232 8 Camera * 8576 8 Camera * 8 Camera * 0 0 2966 0 0 0 0 0 0 0 0 0

3233 14 Camera const * 8576 14 Camera const * 14 Camera const * 0 0 3234 0 0 0 0 0 0 0 0 0

3234 12 Camera const 8832 12 Camera const 12 Camera const 0 0 2966 0 0 0 0 0 0 0 0 0

3235 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 3236 0 0 0 0 0 0 0 0 0

3236 13 DisplayRegion 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0

3237 21 CompassEffect const * 8576 21 CompassEffect const * 21 CompassEffect const * 0 0 3238 0 0 0 0 0 0 0 0 0

3238 19 CompassEffect const 8832 19 CompassEffect const 19 CompassEffect const 0 0 2967 0 0 0 0 0 0 0 0 0

3239 16 CullBinManager * 8576 16 CullBinManager * 16 CullBinManager * 0 0 2971 0 0 0 0 0 0 0 0 0

3240 22 CullBinManager const * 8576 22 CullBinManager const * 22 CullBinManager const * 0 0 3241 0 0 0 0 0 0 0 0 0

3241 20 CullBinManager const 8832 20 CullBinManager const 20 CullBinManager const 0 0 2971 0 0 0 0 0 0 0 0 0

3242 18 DirectionalLight * 8576 18 DirectionalLight * 18 DirectionalLight * 0 0 2973 0 0 0 0 0 0 0 0 0

3243 24 DirectionalLight const * 8576 24 DirectionalLight const * 24 DirectionalLight const * 0 0 3244 0 0 0 0 0 0 0 0 0

3244 22 DirectionalLight const 8832 22 DirectionalLight const 22 DirectionalLight const 0 0 2973 0 0 0 0 0 0 0 0 0

3245 22 DrawMaskAttrib const * 8576 22 DrawMaskAttrib const * 22 DrawMaskAttrib const * 0 0 3246 0 0 0 0 0 0 0 0 0

3246 20 DrawMaskAttrib const 8832 20 DrawMaskAttrib const 20 DrawMaskAttrib const 0 0 2974 0 0 0 0 0 0 0 0 0

3247 9 LODNode * 8576 9 LODNode * 9 LODNode * 0 0 2975 0 0 0 0 0 0 0 0 0

3248 15 LODNode const * 8576 15 LODNode const * 15 LODNode const * 0 0 3249 0 0 0 0 0 0 0 0 0

3249 13 LODNode const 8832 13 LODNode const 13 LODNode const 0 0 2975 0 0 0 0 0 0 0 0 0

3250 13 FadeLODNode * 8576 13 FadeLODNode * 13 FadeLODNode * 0 0 2976 0 0 0 0 0 0 0 0 0

3251 19 FadeLODNode const * 8576 19 FadeLODNode const * 19 FadeLODNode const * 0 0 3252 0 0 0 0 0 0 0 0 0

3252 17 FadeLODNode const 8832 17 FadeLODNode const 17 FadeLODNode const 0 0 2976 0 0 0 0 0 0 0 0 0

3253 30 InternalNameCollection const * 8576 30 InternalNameCollection const * 30 InternalNameCollection const * 0 0 3254 0 0 0 0 0 0 0 0 0

3254 28 InternalNameCollection const 8832 28 InternalNameCollection const 28 InternalNameCollection const 0 0 2977 0 0 0 0 0 0 0 0 0

3255 21 LightLensNode const * 8576 21 LightLensNode const * 21 LightLensNode const * 0 0 3256 0 0 0 0 0 0 0 0 0

3256 19 LightLensNode const 8832 19 LightLensNode const 19 LightLensNode const 0 0 2978 0 0 0 0 0 0 0 0 0

3257 15 LightLensNode * 8576 15 LightLensNode * 15 LightLensNode * 0 0 2978 0 0 0 0 0 0 0 0 0

3258 21 LoaderOptions const * 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 3259 0 0 0 0 0 0 0 0 0

3259 19 LoaderOptions const 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 2979 0 0 0 0 0 0 0 0 0

3260 15 LoaderOptions * 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 2979 0 0 0 0 0 0 0 0 0

3261 8 Loader * 8576 8 Loader * 8 Loader * 0 0 2981 0 0 0 0 0 0 0 0 0

3262 14 Loader const * 8576 14 Loader const * 14 Loader const * 0 0 3263 0 0 0 0 0 0 0 0 0

3263 12 Loader const 8832 12 Loader const 12 Loader const 0 0 2981 0 0 0 0 0 0 0 0 0

3264 19 DSearchPath const * 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 3265 0 0 0 0 0 0 0 0 0

3265 17 DSearchPath const 8832 17 DSearchPath const 17 DSearchPath const 0 0 3266 0 0 0 0 0 0 0 0 0

3266 11 DSearchPath 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

3267 9 Results * 8576 17 Loader::Results * 17 Loader::Results * 0 0 2983 0 0 0 0 0 0 0 0 0

3268 15 Results const * 8576 23 Loader::Results const * 23 Loader::Results const * 0 0 3269 0 0 0 0 0 0 0 0 0

3269 13 Results const 8832 21 Loader::Results const 21 Loader::Results const 0 0 2983 0 0 0 0 0 0 0 0 0

3270 16 LoaderFileType * 8576 16 LoaderFileType * 16 LoaderFileType * 0 0 2984 0 0 0 0 0 0 0 0 0

3271 22 LoaderFileType const * 8576 22 LoaderFileType const * 22 LoaderFileType const * 0 0 3272 0 0 0 0 0 0 0 0 0

3272 20 LoaderFileType const 8832 20 LoaderFileType const 20 LoaderFileType const 0 0 2984 0 0 0 0 0 0 0 0 0

3273 30 LoaderFileTypeRegistry const * 8576 30 LoaderFileTypeRegistry const * 30 LoaderFileTypeRegistry const * 0 0 3274 0 0 0 0 0 0 0 0 0

3274 28 LoaderFileTypeRegistry const 8832 28 LoaderFileTypeRegistry const 28 LoaderFileTypeRegistry const 0 0 2986 0 0 0 0 0 0 0 0 0

3275 24 LoaderFileTypeRegistry * 8576 24 LoaderFileTypeRegistry * 24 LoaderFileTypeRegistry * 0 0 2986 0 0 0 0 0 0 0 0 0

3276 26 MaterialCollection const * 8576 26 MaterialCollection const * 26 MaterialCollection const * 0 0 3277 0 0 0 0 0 0 0 0 0

3277 24 MaterialCollection const 8832 24 MaterialCollection const 24 MaterialCollection const 0 0 2987 0 0 0 0 0 0 0 0 0

3278 11 ModelNode * 8576 11 ModelNode * 11 ModelNode * 0 0 2988 0 0 0 0 0 0 0 0 0

3279 17 ModelNode const * 8576 17 ModelNode const * 17 ModelNode const * 0 0 3280 0 0 0 0 0 0 0 0 0

3280 15 ModelNode const 8832 15 ModelNode const 15 ModelNode const 0 0 2988 0 0 0 0 0 0 0 0 0

3281 11 ModelRoot * 8576 11 ModelRoot * 11 ModelRoot * 0 0 2991 0 0 0 0 0 0 0 0 0

3282 26 NodePathCollection const * 8576 26 NodePathCollection const * 26 NodePathCollection const * 0 0 3283 0 0 0 0 0 0 0 0 0

3283 24 NodePathCollection const 8832 24 NodePathCollection const 24 NodePathCollection const 0 0 2992 0 0 0 0 0 0 0 0 0

3284 16 PosLerpFunctor * 8576 16 PosLerpFunctor * 16 PosLerpFunctor * 0 0 2993 0 0 0 0 0 0 0 0 0

3285 16 HprLerpFunctor * 8576 16 HprLerpFunctor * 16 HprLerpFunctor * 0 0 2995 0 0 0 0 0 0 0 0 0

3286 18 ScaleLerpFunctor * 8576 18 ScaleLerpFunctor * 18 ScaleLerpFunctor * 0 0 2997 0 0 0 0 0 0 0 0 0

3287 18 ColorLerpFunctor * 8576 18 ColorLerpFunctor * 18 ColorLerpFunctor * 0 0 2998 0 0 0 0 0 0 0 0 0

3288 19 PosHprLerpFunctor * 8576 19 PosHprLerpFunctor * 19 PosHprLerpFunctor * 0 0 3000 0 0 0 0 0 0 0 0 0

3289 21 HprScaleLerpFunctor * 8576 21 HprScaleLerpFunctor * 21 HprScaleLerpFunctor * 0 0 3002 0 0 0 0 0 0 0 0 0

3290 24 PosHprScaleLerpFunctor * 8576 24 PosHprScaleLerpFunctor * 24 PosHprScaleLerpFunctor * 0 0 3003 0 0 0 0 0 0 0 0 0

3291 23 ColorScaleLerpFunctor * 8576 23 ColorScaleLerpFunctor * 23 ColorScaleLerpFunctor * 0 0 3004 0 0 0 0 0 0 0 0 0

3292 12 PointLight * 8576 12 PointLight * 12 PointLight * 0 0 3005 0 0 0 0 0 0 0 0 0

3293 18 PointLight const * 8576 18 PointLight const * 18 PointLight const * 0 0 3294 0 0 0 0 0 0 0 0 0

3294 16 PointLight const 8832 16 PointLight const 16 PointLight const 0 0 3005 0 0 0 0 0 0 0 0 0

3295 15 PolylightNode * 8576 15 PolylightNode * 15 PolylightNode * 0 0 3006 0 0 0 0 0 0 0 0 0

3296 21 PolylightNode const * 8576 21 PolylightNode const * 21 PolylightNode const * 0 0 3297 0 0 0 0 0 0 0 0 0

3297 19 PolylightNode const 8832 19 PolylightNode const 19 PolylightNode const 0 0 3006 0 0 0 0 0 0 0 0 0

3298 26 vector< NodePath > const * 8576 26 vector< NodePath > const * 26 vector< NodePath > const * 0 0 3299 0 0 0 0 0 0 0 0 0

3299 24 vector< NodePath > const 8832 24 vector< NodePath > const 24 vector< NodePath > const 0 0 3300 0 0 0 0 0 0 0 0 0

3300 18 vector< NodePath > 2048 18 vector< NodePath > 18 vector< NodePath > 0 0 0 0 0 0 0 0 0 0 0 0

3301 23 PolylightEffect const * 8576 23 PolylightEffect const * 23 PolylightEffect const * 0 0 3302 0 0 0 0 0 0 0 0 0

3302 21 PolylightEffect const 8832 21 PolylightEffect const 21 PolylightEffect const 0 0 3009 0 0 0 0 0 0 0 0 0

3303 12 PortalNode * 8576 12 PortalNode * 12 PortalNode * 0 0 3011 0 0 0 0 0 0 0 0 0

3304 18 PortalNode const * 8576 18 PortalNode const * 18 PortalNode const * 0 0 3305 0 0 0 0 0 0 0 0 0

3305 16 PortalNode const 8832 16 PortalNode const 16 PortalNode const 0 0 3011 0 0 0 0 0 0 0 0 0

3306 19 SceneGraphReducer * 8576 19 SceneGraphReducer * 19 SceneGraphReducer * 0 0 3012 0 0 0 0 0 0 0 0 0

3307 25 SceneGraphReducer const * 8576 25 SceneGraphReducer const * 25 SceneGraphReducer const * 0 0 3308 0 0 0 0 0 0 0 0 0

3308 23 SceneGraphReducer const 8832 23 SceneGraphReducer const 23 SceneGraphReducer const 0 0 3012 0 0 0 0 0 0 0 0 0

3309 26 AccumulatedAttribs const * 8576 26 AccumulatedAttribs const * 26 AccumulatedAttribs const * 0 0 3310 0 0 0 0 0 0 0 0 0

3310 24 AccumulatedAttribs const 8832 24 AccumulatedAttribs const 24 AccumulatedAttribs const 0 0 3311 0 0 0 0 0 0 0 0 0

3311 18 AccumulatedAttribs 1050624 18 AccumulatedAttribs 18 AccumulatedAttribs 0 0 0 0 0 0 0 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : AccumulatedAttribs
// Description : This class is used by the SceneGraphReducer to
//               maintain and accumulate the set of attributes we have
//               encountered on each node that might eventually be
//               applied to the vertices at the leaves.
////////////////////////////////////////////////////////////////////

3312 17 GeomTransformer * 8576 17 GeomTransformer * 17 GeomTransformer * 0 0 3313 0 0 0 0 0 0 0 0 0

3313 15 GeomTransformer 1050624 15 GeomTransformer 15 GeomTransformer 0 0 0 0 0 0 0 0 0 0 0 970
////////////////////////////////////////////////////////////////////
//       Class : GeomTransformer
// Description : An object specifically designed to transform the
//               vertices of a Geom without disturbing indexing or
//               affecting any other Geoms that may share the same
//               vertex arrays, and without needlessly wasting memory
//               when different Geoms sharing the same vertex arrays
//               are transformed by the same amount.
//
//               If you create a single GeomTransformer and use it to
//               transform a number of different Geoms by various
//               transformations, then those Geoms which happen to
//               share the same arrays and are transformed by the same
//               amounts will still share the same arrays as each
//               other (but different from the original arrays).
////////////////////////////////////////////////////////////////////

3314 20 SelectiveChildNode * 8576 20 SelectiveChildNode * 20 SelectiveChildNode * 0 0 3017 0 0 0 0 0 0 0 0 0

3315 14 SequenceNode * 8576 14 SequenceNode * 14 SequenceNode * 0 0 3018 0 0 0 0 0 0 0 0 0

3316 20 SequenceNode const * 8576 20 SequenceNode const * 20 SequenceNode const * 0 0 3317 0 0 0 0 0 0 0 0 0

3317 18 SequenceNode const 8832 18 SequenceNode const 18 SequenceNode const 0 0 3018 0 0 0 0 0 0 0 0 0

3318 15 AnimInterface * 8576 15 AnimInterface * 15 AnimInterface * 0 0 3019 0 0 0 0 0 0 0 0 0

3319 24 ShowBoundsEffect const * 8576 24 ShowBoundsEffect const * 24 ShowBoundsEffect const * 0 0 3320 0 0 0 0 0 0 0 0 0

3320 22 ShowBoundsEffect const 8832 22 ShowBoundsEffect const 22 ShowBoundsEffect const 0 0 3021 0 0 0 0 0 0 0 0 0

3321 11 Spotlight * 8576 11 Spotlight * 11 Spotlight * 0 0 3022 0 0 0 0 0 0 0 0 0

3322 17 Spotlight const * 8576 17 Spotlight const * 17 Spotlight const * 0 0 3323 0 0 0 0 0 0 0 0 0

3323 15 Spotlight const 8832 15 Spotlight const 15 Spotlight const 0 0 3022 0 0 0 0 0 0 0 0 0

3324 12 SwitchNode * 8576 12 SwitchNode * 12 SwitchNode * 0 0 3023 0 0 0 0 0 0 0 0 0

3325 26 TexProjectorEffect const * 8576 26 TexProjectorEffect const * 26 TexProjectorEffect const * 0 0 3326 0 0 0 0 0 0 0 0 0

3326 24 TexProjectorEffect const 8832 24 TexProjectorEffect const 24 TexProjectorEffect const 0 0 3024 0 0 0 0 0 0 0 0 0

3327 25 TextureCollection const * 8576 25 TextureCollection const * 25 TextureCollection const * 0 0 3328 0 0 0 0 0 0 0 0 0

3328 23 TextureCollection const 8832 23 TextureCollection const 23 TextureCollection const 0 0 3025 0 0 0 0 0 0 0 0 0

3329 30 TextureStageCollection const * 8576 30 TextureStageCollection const * 30 TextureStageCollection const * 0 0 3330 0 0 0 0 0 0 0 0 0

3330 28 TextureStageCollection const 8832 28 TextureStageCollection const 28 TextureStageCollection const 0 0 3026 0 0 0 0 0 0 0 0 0

3331 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
