1145554607
2 2
10 libdisplay 4 O9cY 5 panda 
337
353 16 WindowProperties 4 690 34 WindowProperties::WindowProperties 0 2 1 2 1143
// Filename: windowProperties.I
// Created by:  drose (13Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
WindowProperties::WindowProperties(void);

354 10 operator = 4 690 28 WindowProperties::operator = 0 1 3 241
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void WindowProperties::operator =(WindowProperties const &copy);

355 17 ~WindowProperties 4 690 35 WindowProperties::~WindowProperties 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline WindowProperties::~WindowProperties(void);

356 11 get_default 4 690 29 WindowProperties::get_default 0 1 4 385
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
60
static WindowProperties WindowProperties::get_default(void);

357 11 operator == 4 690 29 WindowProperties::operator == 0 1 5 229
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
bool WindowProperties::operator ==(WindowProperties const &other) const;

358 11 operator != 4 690 29 WindowProperties::operator != 0 1 6 228
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline bool WindowProperties::operator !=(WindowProperties const &other) const;

359 5 clear 4 690 23 WindowProperties::clear 0 1 7 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
35
void WindowProperties::clear(void);

360 16 is_any_specified 4 690 34 WindowProperties::is_any_specified 0 1 8 319
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool WindowProperties::is_any_specified(void) const;

361 10 set_origin 4 690 28 WindowProperties::set_origin 0 1 9 514
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////
69
inline void WindowProperties::set_origin(int x_origin, int y_origin);

362 12 get_x_origin 4 690 30 WindowProperties::get_x_origin 0 1 10 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_x_origin(void) const;

363 12 get_y_origin 4 690 30 WindowProperties::get_y_origin 0 1 11 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_y_origin(void) const;

364 10 has_origin 4 690 28 WindowProperties::has_origin 0 1 12 315
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool WindowProperties::has_origin(void) const;

365 12 clear_origin 4 690 30 WindowProperties::clear_origin 0 1 13 283
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
////////////////////////////////////////////////////////////////////
49
inline void WindowProperties::clear_origin(void);

366 8 set_size 4 690 26 WindowProperties::set_size 0 1 14 393
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
63
inline void WindowProperties::set_size(int x_size, int y_size);

367 10 get_x_size 4 690 28 WindowProperties::get_x_size 0 1 15 401
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_x_size(void) const;

368 10 get_y_size 4 690 28 WindowProperties::get_y_size 0 1 16 402
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_y_size(void) const;

369 8 has_size 4 690 26 WindowProperties::has_size 0 1 17 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_size(void) const;

370 10 clear_size 4 690 28 WindowProperties::clear_size 0 1 18 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_size(void);

371 9 set_title 4 690 27 WindowProperties::set_title 0 1 19 302
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
////////////////////////////////////////////////////////////////////
75
inline void WindowProperties::set_title(basic_string< char > const &title);

372 9 get_title 4 690 27 WindowProperties::get_title 0 1 20 254
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &WindowProperties::get_title(void) const;

373 9 has_title 4 690 27 WindowProperties::has_title 0 1 21 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool WindowProperties::has_title(void) const;

374 11 clear_title 4 690 29 WindowProperties::clear_title 0 1 22 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
////////////////////////////////////////////////////////////////////
48
inline void WindowProperties::clear_title(void);

375 15 set_undecorated 4 690 33 WindowProperties::set_undecorated 0 1 23 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
////////////////////////////////////////////////////////////////////
64
inline void WindowProperties::set_undecorated(bool undecorated);

376 15 get_undecorated 4 690 33 WindowProperties::get_undecorated 0 1 24 274
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::get_undecorated(void) const;

377 15 has_undecorated 4 690 33 WindowProperties::has_undecorated 0 1 25 286
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::has_undecorated(void) const;

378 17 clear_undecorated 4 690 35 WindowProperties::clear_undecorated 0 1 26 293
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
////////////////////////////////////////////////////////////////////
54
inline void WindowProperties::clear_undecorated(void);

379 14 set_fixed_size 4 690 32 WindowProperties::set_fixed_size 0 1 27 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fixed_size(bool fixed_size);

380 14 get_fixed_size 4 690 32 WindowProperties::get_fixed_size 0 1 28 323
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fixed_size(void) const;

381 14 has_fixed_size 4 690 32 WindowProperties::has_fixed_size 0 1 29 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fixed_size(void) const;

382 16 clear_fixed_size 4 690 34 WindowProperties::clear_fixed_size 0 1 30 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fixed_size(void);

383 14 set_fullscreen 4 690 32 WindowProperties::set_fullscreen 0 1 31 383
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fullscreen(bool fullscreen);

384 14 get_fullscreen 4 690 32 WindowProperties::get_fullscreen 0 1 32 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fullscreen(void) const;

385 14 has_fullscreen 4 690 32 WindowProperties::has_fullscreen 0 1 33 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fullscreen(void) const;

386 16 clear_fullscreen 4 690 34 WindowProperties::clear_fullscreen 0 1 34 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fullscreen(void);

387 14 set_foreground 4 690 32 WindowProperties::set_foreground 0 1 35 372
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_foreground(bool foreground);

388 14 get_foreground 4 690 32 WindowProperties::get_foreground 0 1 36 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_foreground(void) const;

389 14 has_foreground 4 690 32 WindowProperties::has_foreground 0 1 37 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_foreground(void) const;

390 16 clear_foreground 4 690 34 WindowProperties::clear_foreground 0 1 38 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_foreground(void);

391 13 set_minimized 4 690 31 WindowProperties::set_minimized 0 1 39 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
////////////////////////////////////////////////////////////////////
60
inline void WindowProperties::set_minimized(bool minimized);

392 13 get_minimized 4 690 31 WindowProperties::get_minimized 0 1 40 271
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::get_minimized(void) const;

393 13 has_minimized 4 690 31 WindowProperties::has_minimized 0 1 41 282
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::has_minimized(void) const;

394 15 clear_minimized 4 690 33 WindowProperties::clear_minimized 0 1 42 289
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
////////////////////////////////////////////////////////////////////
52
inline void WindowProperties::clear_minimized(void);

395 8 set_open 4 690 26 WindowProperties::set_open 0 1 43 417
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::set_open(bool open);

396 8 get_open 4 690 26 WindowProperties::get_open 0 1 44 261
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::get_open(void) const;

397 8 has_open 4 690 26 WindowProperties::has_open 0 1 45 272
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_open(void) const;

398 10 clear_open 4 690 28 WindowProperties::clear_open 0 1 46 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_open(void);

399 17 set_cursor_hidden 4 690 35 WindowProperties::set_cursor_hidden 0 1 47 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
////////////////////////////////////////////////////////////////////
68
inline void WindowProperties::set_cursor_hidden(bool cursor_hidden);

400 17 get_cursor_hidden 4 690 35 WindowProperties::get_cursor_hidden 0 1 48 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::get_cursor_hidden(void) const;

401 17 has_cursor_hidden 4 690 35 WindowProperties::has_cursor_hidden 0 1 49 290
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_cursor_hidden(void) const;

402 19 clear_cursor_hidden 4 690 37 WindowProperties::clear_cursor_hidden 0 1 50 297
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_cursor_hidden(void);

403 17 set_icon_filename 4 690 35 WindowProperties::set_icon_filename 0 1 51 344
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_icon_filename(Filename const &icon_filename);

404 17 get_icon_filename 4 690 35 WindowProperties::get_icon_filename 0 1 52 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
////////////////////////////////////////////////////////////////////
71
inline Filename const &WindowProperties::get_icon_filename(void) const;

405 17 has_icon_filename 4 690 35 WindowProperties::has_icon_filename 0 1 53 307
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_icon_filename(void) const;

406 19 clear_icon_filename 4 690 37 WindowProperties::clear_icon_filename 0 1 54 314
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_icon_filename(void);

407 19 set_cursor_filename 4 690 37 WindowProperties::set_cursor_filename 0 1 55 391
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
////////////////////////////////////////////////////////////////////
83
inline void WindowProperties::set_cursor_filename(Filename const &cursor_filename);

408 19 get_cursor_filename 4 690 37 WindowProperties::get_cursor_filename 0 1 56 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
////////////////////////////////////////////////////////////////////
73
inline Filename const &WindowProperties::get_cursor_filename(void) const;

409 19 has_cursor_filename 4 690 37 WindowProperties::has_cursor_filename 0 1 57 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
62
inline bool WindowProperties::has_cursor_filename(void) const;

410 21 clear_cursor_filename 4 690 39 WindowProperties::clear_cursor_filename 0 1 58 318
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::clear_cursor_filename(void);

411 11 set_z_order 4 690 29 WindowProperties::set_z_order 0 1 59 609
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
////////////////////////////////////////////////////////////////////
76
inline void WindowProperties::set_z_order(WindowProperties::ZOrder z_order);

412 11 get_z_order 4 690 29 WindowProperties::get_z_order 0 1 60 258
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
////////////////////////////////////////////////////////////////////
74
inline WindowProperties::ZOrder WindowProperties::get_z_order(void) const;

413 11 has_z_order 4 690 29 WindowProperties::has_z_order 0 1 61 317
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool WindowProperties::has_z_order(void) const;

414 13 clear_z_order 4 690 31 WindowProperties::clear_z_order 0 1 62 285
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::clear_z_order(void);

415 14 add_properties 4 690 32 WindowProperties::add_properties 0 1 63 376
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
69
void WindowProperties::add_properties(WindowProperties const &other);

416 6 output 4 690 24 WindowProperties::output 0 1 64 368
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
50
void WindowProperties::output(ostream &out) const;

417 15 ~DrawableRegion 4 692 31 DrawableRegion::~DrawableRegion 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual DrawableRegion::~DrawableRegion(void);

418 22 set_clear_color_active 4 692 38 DrawableRegion::set_clear_color_active 0 1 65 523
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_color_active(bool clear_color_active);

419 22 get_clear_color_active 4 692 38 DrawableRegion::get_clear_color_active 0 1 66 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_color_active(void) const;

420 22 set_clear_depth_active 4 692 38 DrawableRegion::set_clear_depth_active 0 1 67 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_depth_active(bool clear_depth_active);

421 22 get_clear_depth_active 4 692 38 DrawableRegion::get_clear_depth_active 0 1 68 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_depth_active(void) const;

422 15 set_clear_color 4 692 31 DrawableRegion::set_clear_color 0 1 69 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline void DrawableRegion::set_clear_color(LVecBase4f const &color);

423 15 get_clear_color 4 692 31 DrawableRegion::get_clear_color 0 1 70 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4f const &DrawableRegion::get_clear_color(void) const;

424 15 set_clear_depth 4 692 31 DrawableRegion::set_clear_depth 0 1 71 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline void DrawableRegion::set_clear_depth(float depth);

425 15 get_clear_depth 4 692 31 DrawableRegion::get_clear_depth 0 1 72 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline float DrawableRegion::get_clear_depth(void) const;

426 14 disable_clears 4 692 30 DrawableRegion::disable_clears 0 1 73 343
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
////////////////////////////////////////////////////////////////////
49
inline void DrawableRegion::disable_clears(void);

427 19 is_any_clear_active 4 692 35 DrawableRegion::is_any_clear_active 0 1 74 452
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
////////////////////////////////////////////////////////////////////
60
inline bool DrawableRegion::is_any_clear_active(void) const;

428 24 upcast_to_ReferenceCount 12 693 39 DisplayRegion::upcast_to_ReferenceCount 0 1 109 43
upcast from DisplayRegion to ReferenceCount
62
ReferenceCount *DisplayRegion::upcast_to_ReferenceCount(void);

429 25 downcast_to_DisplayRegion 12 694 41 ReferenceCount::downcast_to_DisplayRegion 0 1 110 45
downcast from ReferenceCount to DisplayRegion
63
DisplayRegion *ReferenceCount::downcast_to_DisplayRegion(void);

430 24 upcast_to_DrawableRegion 12 693 39 DisplayRegion::upcast_to_DrawableRegion 0 1 111 43
upcast from DisplayRegion to DrawableRegion
62
DrawableRegion *DisplayRegion::upcast_to_DrawableRegion(void);

431 25 downcast_to_DisplayRegion 12 692 41 DrawableRegion::downcast_to_DisplayRegion 0 1 112 45
downcast from DrawableRegion to DisplayRegion
63
DisplayRegion *DrawableRegion::downcast_to_DisplayRegion(void);

432 14 ~DisplayRegion 4 693 29 DisplayRegion::~DisplayRegion 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DisplayRegion::~DisplayRegion(void);

433 14 get_dimensions 4 693 29 DisplayRegion::get_dimensions 0 0 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
81
void DisplayRegion::get_dimensions(float &l, float &r, float &b, float &t) const;

434 8 get_left 4 693 23 DisplayRegion::get_left 0 1 75 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
42
float DisplayRegion::get_left(void) const;

435 9 get_right 4 693 24 DisplayRegion::get_right 0 1 76 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
43
float DisplayRegion::get_right(void) const;

436 10 get_bottom 4 693 25 DisplayRegion::get_bottom 0 1 77 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
////////////////////////////////////////////////////////////////////
44
float DisplayRegion::get_bottom(void) const;

437 7 get_top 4 693 22 DisplayRegion::get_top 0 1 78 384
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
41
float DisplayRegion::get_top(void) const;

438 14 set_dimensions 4 693 29 DisplayRegion::set_dimensions 0 1 79 510
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////
71
void DisplayRegion::set_dimensions(float l, float r, float b, float t);

439 10 get_window 4 693 25 DisplayRegion::get_window 0 1 80 376
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
////////////////////////////////////////////////////////////////////
54
GraphicsOutput *DisplayRegion::get_window(void) const;

440 8 get_pipe 4 693 23 DisplayRegion::get_pipe 0 1 81 370
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
////////////////////////////////////////////////////////////////////
50
GraphicsPipe *DisplayRegion::get_pipe(void) const;

441 10 set_camera 4 693 25 DisplayRegion::set_camera 0 1 82 660
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
////////////////////////////////////////////////////////////////////
55
void DisplayRegion::set_camera(NodePath const &camera);

442 10 get_camera 4 693 25 DisplayRegion::get_camera 0 1 83 362
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
////////////////////////////////////////////////////////////////////
47
NodePath DisplayRegion::get_camera(void) const;

443 10 set_active 4 693 25 DisplayRegion::set_active 0 1 84 377
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
44
void DisplayRegion::set_active(bool active);

444 9 is_active 4 693 24 DisplayRegion::is_active 0 1 85 299
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
49
inline bool DisplayRegion::is_active(void) const;

445 8 set_sort 4 693 23 DisplayRegion::set_sort 0 1 86 430
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
////////////////////////////////////////////////////////////////////
39
void DisplayRegion::set_sort(int sort);

446 8 get_sort 4 693 23 DisplayRegion::get_sort 0 1 87 297
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
47
inline int DisplayRegion::get_sort(void) const;

447 18 set_stereo_channel 4 693 33 DisplayRegion::set_stereo_channel 0 1 88 1437
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
//
//               This controls which direction--to the left or the
//               right--the view from a PerspectiveLens is shifted
//               when it is used to render into this DisplayRegion.
//               Also see Lens::set_interocular_distance() and
//               Lens::set_convergence_distance().
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               When the DisplayRegion is attached to a stereo window
//               (one in which FrameBufferProperties::FM_stereo is
//               set), this also specifies which physical channel the
//               DisplayRegion renders to.
////////////////////////////////////////////////////////////////////
75
void DisplayRegion::set_stereo_channel(Lens::StereoChannel stereo_channel);

448 18 get_stereo_channel 4 693 33 DisplayRegion::get_stereo_channel 0 1 89 448
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
67
inline Lens::StereoChannel DisplayRegion::get_stereo_channel(void);

449 28 set_clear_depth_between_eyes 4 693 43 DisplayRegion::set_clear_depth_between_eyes 0 1 90 786
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_clear_depth_between_eyes
//       Access: Published
//  Description: Specifies whether the depth buffer is cleared again
//               between the left and right eyes of a stereo
//               DisplayRegion.  This has an effect only when
//               get_stereo_channel() returns Lens::SC_stereo; other
//               kinds of DisplayRegions are monocular and do not
//               render two different eyes.
//
//               Normally, you want this to be true, since if you're
//               using a depth buffer you normally need to clear it
//               between the left and right eyes.
////////////////////////////////////////////////////////////////////
87
inline void DisplayRegion::set_clear_depth_between_eyes(bool clear_depth_between_eyes);

450 28 get_clear_depth_between_eyes 4 693 43 DisplayRegion::get_clear_depth_between_eyes 0 1 91 422
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_clear_depth_between_eyes
//       Access: Published
//  Description: Returns whether the depth buffer is cleared again
//               between the left and right eyes of a stereo
//               DisplayRegion.  See set_clear_depth_between_eyes().
////////////////////////////////////////////////////////////////////
68
inline bool DisplayRegion::get_clear_depth_between_eyes(void) const;

451 18 set_cube_map_index 4 693 33 DisplayRegion::set_cube_map_index 0 1 92 681
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map.  Normally you
//               should not need to set it directly.  This sets up the
//               DisplayRegion to render to the nth cube map face; the
//               value must be between 0 and 5, inclusive.  A normal
//               DisplayRegion that is not associated with any
//               particular cube map should be set to -1.
////////////////////////////////////////////////////////////////////
66
inline void DisplayRegion::set_cube_map_index(int cube_map_index);

452 18 get_cube_map_index 4 693 33 DisplayRegion::get_cube_map_index 0 1 93 436
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cube_map_index
//       Access: Published
//  Description: Returns the cube map face index associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a cube map.  See
//               set_cube_map_index().
////////////////////////////////////////////////////////////////////
57
inline int DisplayRegion::get_cube_map_index(void) const;

453 14 compute_pixels 4 693 29 DisplayRegion::compute_pixels 0 2 94 95 762
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::compute_pixels
//       Access: Published
//  Description: Computes the pixel locations of the DisplayRegion
//               within its window.  The DisplayRegion will request
//               the size from the window.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::compute_pixels
//       Access: Published
//  Description: Computes the pixel locations of the DisplayRegion
//               within its window, given the size of the window in
//               pixels.
////////////////////////////////////////////////////////////////////
41
void DisplayRegion::compute_pixels(void);

454 25 compute_pixels_all_stages 4 693 40 DisplayRegion::compute_pixels_all_stages 0 2 96 97 970
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::compute_pixels_all_stages
//       Access: Published
//  Description: Computes the pixel locations of the DisplayRegion
//               within its window.  The DisplayRegion will request
//               the size from the window.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::compute_pixels_all_stages
//       Access: Published
//  Description: Performs a compute_pixels() operation for all stages
//               of the pipeline.  This is appropriate, for instance,
//               when a window changes sizes, since this is a global
//               operation; and you want the new window size to be
//               immediately available even to the downstream stages.
////////////////////////////////////////////////////////////////////
52
void DisplayRegion::compute_pixels_all_stages(void);

455 10 get_pixels 4 693 25 DisplayRegion::get_pixels 0 0 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixels
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion within
//               its window, in pixels.
////////////////////////////////////////////////////////////////////
73
void DisplayRegion::get_pixels(int &pl, int &pr, int &pb, int &pt) const;

456 17 get_region_pixels 4 693 32 DisplayRegion::get_region_pixels 0 0 417
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_region_pixels
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion within
//               its window, as the pixel location of its bottom-left
//               corner, along with a pixel width and height.
////////////////////////////////////////////////////////////////////
78
void DisplayRegion::get_region_pixels(int &xo, int &yo, int &w, int &h) const;

457 19 get_region_pixels_i 4 693 34 DisplayRegion::get_region_pixels_i 0 0 447
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_region_pixels_i
//       Access: Published
//  Description: Similar to get_region_pixels(), but returns the upper
//               left corner, and the pixel numbers are numbered from
//               the top-left corner down, in the DirectX way of
//               things.
////////////////////////////////////////////////////////////////////
80
void DisplayRegion::get_region_pixels_i(int &xo, int &yo, int &w, int &h) const;

458 15 get_pixel_width 4 693 30 DisplayRegion::get_pixel_width 0 1 98 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
47
int DisplayRegion::get_pixel_width(void) const;

459 16 get_pixel_height 4 693 31 DisplayRegion::get_pixel_height 0 1 99 281
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
48
int DisplayRegion::get_pixel_height(void) const;

460 6 output 4 693 21 DisplayRegion::output 0 1 100 220
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void DisplayRegion::output(ostream &out) const;

461 24 make_screenshot_filename 4 693 39 DisplayRegion::make_screenshot_filename 0 2 101 102 757
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
109
static Filename DisplayRegion::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

462 23 save_screenshot_default 4 693 38 DisplayRegion::save_screenshot_default 0 2 103 104 470
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
101
Filename DisplayRegion::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

463 15 save_screenshot 4 693 30 DisplayRegion::save_screenshot 0 2 105 106 350
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
112
bool DisplayRegion::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

464 14 get_screenshot 4 693 29 DisplayRegion::get_screenshot 0 1 107 398
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
52
bool DisplayRegion::get_screenshot(PNMImage &image);

465 14 get_class_type 4 693 29 DisplayRegion::get_class_type 0 1 108 0
54
static TypeHandle DisplayRegion::get_class_type(void);

466 21 FrameBufferProperties 4 695 44 FrameBufferProperties::FrameBufferProperties 0 2 113 114 1158
// Filename: frameBufferProperties.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
FrameBufferProperties::FrameBufferProperties(void);

467 10 operator = 4 695 33 FrameBufferProperties::operator = 0 1 115 246
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void FrameBufferProperties::operator =(FrameBufferProperties const &copy);

468 22 ~FrameBufferProperties 4 695 45 FrameBufferProperties::~FrameBufferProperties 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline FrameBufferProperties::~FrameBufferProperties(void);

469 11 get_default 4 695 34 FrameBufferProperties::get_default 0 1 116 395
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
70
static FrameBufferProperties FrameBufferProperties::get_default(void);

470 11 operator == 4 695 34 FrameBufferProperties::operator == 0 1 117 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
bool FrameBufferProperties::operator ==(FrameBufferProperties const &other) const;

471 11 operator != 4 695 34 FrameBufferProperties::operator != 0 1 118 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
89
inline bool FrameBufferProperties::operator !=(FrameBufferProperties const &other) const;

472 5 clear 4 695 28 FrameBufferProperties::clear 0 1 119 391
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
40
void FrameBufferProperties::clear(void);

473 13 set_specified 4 695 36 FrameBufferProperties::set_specified 0 1 120 393
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_specified
//       Access: Published
//  Description: Sets all the specified bits.  Effectively, this
//               causes the default values to be specified for all
//               not-yet-specified fields.
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_specified(void);

474 15 get_buffer_mask 4 695 38 FrameBufferProperties::get_buffer_mask 0 1 121 314
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Public
//  Description: Returns the buffer mask for the bitplanes
//               in the frame buffer.
////////////////////////////////////////////////////////////////////
62
inline int FrameBufferProperties::get_buffer_mask(void) const;

475 16 is_any_specified 4 695 39 FrameBufferProperties::is_any_specified 0 1 122 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
64
inline bool FrameBufferProperties::is_any_specified(void) const;

476 8 has_mode 4 695 31 FrameBufferProperties::has_mode 0 1 123 439
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_mode
//       Access: Published
//  Description: Returns true if the frame buffer mode, logically
//               anded with the given mask, is nonzero.  This is a
//               convenience function to access this useful tidbit of
//               data.
////////////////////////////////////////////////////////////////////
59
inline bool FrameBufferProperties::has_mode(int bit) const;

477 18 is_single_buffered 4 695 41 FrameBufferProperties::is_single_buffered 0 1 124 479
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description: Returns true if the frame buffer indicates a
//               single-buffered mode, false if it indicates double-
//               or triple-buffering.  This is a convenience function
//               to access this useful tidbit of data.
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::is_single_buffered(void) const;

478 9 is_stereo 4 695 32 FrameBufferProperties::is_stereo 0 1 125 436
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description: Returns true if the frame buffer indicates a
//               hardware stereo mode, false otherwise.  This is a
//               convenience function to access this useful tidbit of
//               data.
////////////////////////////////////////////////////////////////////
57
inline bool FrameBufferProperties::is_stereo(void) const;

479 8 subsumes 4 695 31 FrameBufferProperties::subsumes 0 1 126 405
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
////////////////////////////////////////////////////////////////////
78
bool FrameBufferProperties::subsumes(FrameBufferProperties const &prop) const;

480 21 set_frame_buffer_mode 4 695 44 FrameBufferProperties::set_frame_buffer_mode 0 1 127 474
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_frame_buffer_mode
//       Access: Published
//  Description: Specifies the set of graphics properties that are
//               required for the context associated with the window.
//               This should be the union of the appropriate bits
//               defined in FrameBufferMode.
////////////////////////////////////////////////////////////////////
79
inline void FrameBufferProperties::set_frame_buffer_mode(int frameBuffer_mode);

481 21 get_frame_buffer_mode 4 695 44 FrameBufferProperties::get_frame_buffer_mode 0 1 128 423
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_frame_buffer_mode
//       Access: Published
//  Description: Returns the set of graphics properties that are
//               in effect for the window.  This will be the union of
//               the corresponding bits from FrameBufferMode.
////////////////////////////////////////////////////////////////////
68
inline int FrameBufferProperties::get_frame_buffer_mode(void) const;

482 21 has_frame_buffer_mode 4 695 44 FrameBufferProperties::has_frame_buffer_mode 0 1 129 334
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_frame_buffer_mode
//       Access: Published
//  Description: Returns true if the frameBuffer mode has been
//               specified, false otherwise.
////////////////////////////////////////////////////////////////////
69
inline bool FrameBufferProperties::has_frame_buffer_mode(void) const;

483 23 clear_frame_buffer_mode 4 695 46 FrameBufferProperties::clear_frame_buffer_mode 0 1 130 326
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_frame_buffer_mode
//       Access: Published
//  Description: Removes the frameBuffer_mode specification from the
//               properties.
////////////////////////////////////////////////////////////////////
65
inline void FrameBufferProperties::clear_frame_buffer_mode(void);

484 14 set_depth_bits 4 695 37 FrameBufferProperties::set_depth_bits 0 1 131 330
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description: Specifies the minimum number of bits that are
//               required for the depth buffer.
////////////////////////////////////////////////////////////////////
66
inline void FrameBufferProperties::set_depth_bits(int depth_bits);

485 14 get_depth_bits 4 695 37 FrameBufferProperties::get_depth_bits 0 1 132 312
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description: Returns the number of bits specified for the depth
//               buffer.
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_depth_bits(void) const;

486 14 has_depth_bits 4 695 37 FrameBufferProperties::has_depth_bits 0 1 133 346
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_depth_bits
//       Access: Published
//  Description: Returns true if the number of bits for the depth
//               buffer has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool FrameBufferProperties::has_depth_bits(void) const;

487 16 clear_depth_bits 4 695 39 FrameBufferProperties::clear_depth_bits 0 1 134 313
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_depth_bits
//       Access: Published
//  Description: Removes the depth_bits specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::clear_depth_bits(void);

488 14 set_color_bits 4 695 37 FrameBufferProperties::set_color_bits 0 1 135 450
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: Specifies the minimum number of bits that are
//               required for all three channels of the color buffer.
//               That is, this is the per-channel color requirement
//               times three.
////////////////////////////////////////////////////////////////////
66
inline void FrameBufferProperties::set_color_bits(int color_bits);

489 14 get_color_bits 4 695 37 FrameBufferProperties::get_color_bits 0 1 136 312
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description: Returns the number of bits specified for the color
//               buffer.
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_color_bits(void) const;

490 14 has_color_bits 4 695 37 FrameBufferProperties::has_color_bits 0 1 137 346
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_color_bits
//       Access: Published
//  Description: Returns true if the number of bits for the color
//               buffer has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool FrameBufferProperties::has_color_bits(void) const;

491 16 clear_color_bits 4 695 39 FrameBufferProperties::clear_color_bits 0 1 138 313
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_color_bits
//       Access: Published
//  Description: Removes the color_bits specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::clear_color_bits(void);

492 14 set_alpha_bits 4 695 37 FrameBufferProperties::set_alpha_bits 0 1 139 329
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description: Specifies the minimum number of bits that are
//               required of the alpha buffer.
////////////////////////////////////////////////////////////////////
66
inline void FrameBufferProperties::set_alpha_bits(int alpha_bits);

493 14 get_alpha_bits 4 695 37 FrameBufferProperties::get_alpha_bits 0 1 140 312
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description: Returns the number of bits specified for the alpha
//               buffer.
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_alpha_bits(void) const;

494 14 has_alpha_bits 4 695 37 FrameBufferProperties::has_alpha_bits 0 1 141 346
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_alpha_bits
//       Access: Published
//  Description: Returns true if the number of bits for the alpha
//               buffer has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool FrameBufferProperties::has_alpha_bits(void) const;

495 16 clear_alpha_bits 4 695 39 FrameBufferProperties::clear_alpha_bits 0 1 142 313
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_alpha_bits
//       Access: Published
//  Description: Removes the alpha_bits specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::clear_alpha_bits(void);

496 16 set_stencil_bits 4 695 39 FrameBufferProperties::set_stencil_bits 0 1 143 334
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description: Specifies the minimum number of bits that are
//               required for the stencil buffer.
////////////////////////////////////////////////////////////////////
70
inline void FrameBufferProperties::set_stencil_bits(int stencil_bits);

497 16 get_stencil_bits 4 695 39 FrameBufferProperties::get_stencil_bits 0 1 144 316
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description: Returns the number of bits specified for the stencil
//               buffer.
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_stencil_bits(void) const;

498 16 has_stencil_bits 4 695 39 FrameBufferProperties::has_stencil_bits 0 1 145 350
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_stencil_bits
//       Access: Published
//  Description: Returns true if the number of bits for the stencil
//               buffer has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
64
inline bool FrameBufferProperties::has_stencil_bits(void) const;

499 18 clear_stencil_bits 4 695 41 FrameBufferProperties::clear_stencil_bits 0 1 146 317
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_stencil_bits
//       Access: Published
//  Description: Removes the stencil_bits specification from the
//               properties.
////////////////////////////////////////////////////////////////////
60
inline void FrameBufferProperties::clear_stencil_bits(void);

500 16 set_multisamples 4 695 39 FrameBufferProperties::set_multisamples 0 1 147 341
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description: Specifies the minimum number of samples that are
//               required for the multisample buffer.
////////////////////////////////////////////////////////////////////
70
inline void FrameBufferProperties::set_multisamples(int multisamples);

501 16 get_multisamples 4 695 39 FrameBufferProperties::get_multisamples 0 1 148 323
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description: Returns the number of samples specified for the
//               multisample buffer.
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_multisamples(void) const;

502 16 has_multisamples 4 695 39 FrameBufferProperties::has_multisamples 0 1 149 354
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_multisamples
//       Access: Published
//  Description: Returns true if the number of bits for the multisample
//               buffer has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
64
inline bool FrameBufferProperties::has_multisamples(void) const;

503 18 clear_multisamples 4 695 41 FrameBufferProperties::clear_multisamples 0 1 150 317
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_multisamples
//       Access: Published
//  Description: Removes the multisamples specification from the
//               properties.
////////////////////////////////////////////////////////////////////
60
inline void FrameBufferProperties::clear_multisamples(void);

504 12 set_aux_rgba 4 695 35 FrameBufferProperties::set_aux_rgba 0 1 151 325
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description: Specifies the exact number of auxiliary RGBA
//               bitplanes that are required.
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::set_aux_rgba(int naux);

505 12 get_aux_rgba 4 695 35 FrameBufferProperties::get_aux_rgba 0 1 152 323
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description: Returns the exact number of auxiliary RGBA
//               bitplanes that are required.
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_aux_rgba(void) const;

506 12 has_aux_rgba 4 695 35 FrameBufferProperties::has_aux_rgba 0 1 153 340
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_aux_rgba
//       Access: Published
//  Description: Returns true if the number auxiliary RGBA
//               bitplanes has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool FrameBufferProperties::has_aux_rgba(void) const;

507 14 clear_aux_rgba 4 695 37 FrameBufferProperties::clear_aux_rgba 0 1 154 309
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_aux_rgba
//       Access: Published
//  Description: Removes the aux_rgba specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::clear_aux_rgba(void);

508 13 set_aux_hrgba 4 695 36 FrameBufferProperties::set_aux_hrgba 0 1 155 337
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description: Specifies the exact number of auxiliary half-float
//               RGBA bitplanes that are required.
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_aux_hrgba(int naux);

509 13 get_aux_hrgba 4 695 36 FrameBufferProperties::get_aux_hrgba 0 1 156 335
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description: Returns the exact number of auxiliary half-float
//               RGBA bitplanes that are required.
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_hrgba(void) const;

510 13 has_aux_hrgba 4 695 36 FrameBufferProperties::has_aux_hrgba 0 1 157 355
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_aux_hrgba
//       Access: Published
//  Description: Returns true if the number of auxiliary half-float
//               RGBA bitplanes has been specified, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool FrameBufferProperties::has_aux_hrgba(void) const;

511 15 clear_aux_hrgba 4 695 38 FrameBufferProperties::clear_aux_hrgba 0 1 158 311
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_aux_hrgba
//       Access: Published
//  Description: Removes the aux_hrgba specification from the
//               properties.
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::clear_aux_hrgba(void);

512 13 set_aux_float 4 695 36 FrameBufferProperties::set_aux_float 0 1 159 342
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description: Specifies the exact number of auxiliary float
//               single-channel bitplanes that are required.
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_aux_float(int naux);

513 13 get_aux_float 4 695 36 FrameBufferProperties::get_aux_float 0 1 160 340
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description: Returns the exact number of auxiliary float
//               single-channel bitplanes that are required.
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_float(void) const;

514 13 has_aux_float 4 695 36 FrameBufferProperties::has_aux_float 0 1 161 377
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::has_aux_float
//       Access: Published
//  Description: Returns true if the number of auxiliary float
//               single-channel bitplanes has been specified, false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool FrameBufferProperties::has_aux_float(void) const;

515 15 clear_aux_float 4 695 38 FrameBufferProperties::clear_aux_float 0 1 162 311
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear_aux_float
//       Access: Published
//  Description: Removes the aux_float specification from the
//               properties.
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::clear_aux_float(void);

516 14 add_properties 4 695 37 FrameBufferProperties::add_properties 0 1 163 381
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
79
void FrameBufferProperties::add_properties(FrameBufferProperties const &other);

517 6 output 4 695 29 FrameBufferProperties::output 0 1 164 373
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
55
void FrameBufferProperties::output(ostream &out) const;

518 8 get_pipe 4 697 24 GraphicsDevice::get_pipe 0 1 165 980
// Filename: graphicsDevice.I
// Created by:  masad (21Jul03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsDevice::get_pipe(void) const;

519 14 get_class_type 4 697 30 GraphicsDevice::get_class_type 0 1 166 0
55
static TypeHandle GraphicsDevice::get_class_type(void);

520 8 is_valid 4 699 22 GraphicsPipe::is_valid 0 1 167 1370
// Filename: graphicsPipe.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
////////////////////////////////////////////////////////////////////
47
inline bool GraphicsPipe::is_valid(void) const;

521 19 get_supported_types 4 699 33 GraphicsPipe::get_supported_types 0 1 168 682
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
////////////////////////////////////////////////////////////////////
57
inline int GraphicsPipe::get_supported_types(void) const;

522 13 supports_type 4 699 27 GraphicsPipe::supports_type 0 1 169 766
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsPipe::supports_type(int flags) const;

523 17 get_display_width 4 699 31 GraphicsPipe::get_display_width 0 1 170 547
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
////////////////////////////////////////////////////////////////////
55
inline int GraphicsPipe::get_display_width(void) const;

524 18 get_display_height 4 699 32 GraphicsPipe::get_display_height 0 1 171 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
////////////////////////////////////////////////////////////////////
56
inline int GraphicsPipe::get_display_height(void) const;

525 18 get_interface_name 4 699 32 GraphicsPipe::get_interface_name 0 1 172 0
78
virtual basic_string< char > GraphicsPipe::get_interface_name(void) const = 0;

526 14 get_class_type 4 699 28 GraphicsPipe::get_class_type 0 1 173 0
53
static TypeHandle GraphicsPipe::get_class_type(void);

527 22 GraphicsThreadingModel 4 702 46 GraphicsThreadingModel::GraphicsThreadingModel 0 3 174 175 176 2728
// Filename: graphicsThreadingModel.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
////////////////////////////////////////////////////////////////////
97
GraphicsThreadingModel::GraphicsThreadingModel(basic_string< char > const &model = ((string())));

528 10 operator = 4 702 34 GraphicsThreadingModel::operator = 0 1 177 248
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
83
inline void GraphicsThreadingModel::operator =(GraphicsThreadingModel const &copy);

529 9 get_model 4 702 33 GraphicsThreadingModel::get_model 0 1 178 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
////////////////////////////////////////////////////////////////////
67
basic_string< char > GraphicsThreadingModel::get_model(void) const;

530 13 get_cull_name 4 702 37 GraphicsThreadingModel::get_cull_name 0 1 179 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_cull_name(void) const;

531 14 get_cull_stage 4 702 38 GraphicsThreadingModel::get_cull_stage 0 1 180 454
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_cull_stage(void) const;

532 13 get_draw_name 4 702 37 GraphicsThreadingModel::get_draw_name 0 1 181 392
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_draw_name(void) const;

533 14 get_draw_stage 4 702 38 GraphicsThreadingModel::get_draw_stage 0 1 182 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_draw_stage(void) const;

534 16 get_cull_sorting 4 702 40 GraphicsThreadingModel::get_cull_sorting 0 1 183 396
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsThreadingModel::get_cull_sorting(void) const;

535 18 is_single_threaded 4 702 42 GraphicsThreadingModel::is_single_threaded 0 1 184 372
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
////////////////////////////////////////////////////////////////////
67
inline bool GraphicsThreadingModel::is_single_threaded(void) const;

536 10 is_default 4 702 34 GraphicsThreadingModel::is_default 0 1 185 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsThreadingModel::is_default(void) const;

537 6 output 4 702 30 GraphicsThreadingModel::output 0 1 186 230
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void GraphicsThreadingModel::output(ostream &out) const;

538 23 ~GraphicsThreadingModel 4 702 47 GraphicsThreadingModel::~GraphicsThreadingModel 0 0 0
54
GraphicsThreadingModel::~GraphicsThreadingModel(void);

539 11 release_all 4 703 34 GraphicsStateGuardian::release_all 0 1 187 261
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
////////////////////////////////////////////////////////////////////
53
inline void GraphicsStateGuardian::release_all(void);

540 20 release_all_textures 4 703 43 GraphicsStateGuardian::release_all_textures 0 1 188 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_textures(void);

541 17 release_all_geoms 4 703 40 GraphicsStateGuardian::release_all_geoms 0 1 189 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
58
inline int GraphicsStateGuardian::release_all_geoms(void);

542 26 release_all_vertex_buffers 4 703 49 GraphicsStateGuardian::release_all_vertex_buffers 0 1 190 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
67
inline int GraphicsStateGuardian::release_all_vertex_buffers(void);

543 25 release_all_index_buffers 4 703 48 GraphicsStateGuardian::release_all_index_buffers 0 1 191 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::release_all_index_buffers(void);

544 10 set_active 4 703 33 GraphicsStateGuardian::set_active 0 1 192 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsStateGuardian::set_active(bool active);

545 9 is_active 4 703 32 GraphicsStateGuardian::is_active 0 1 193 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsStateGuardian::is_active(void) const;

546 8 is_valid 4 703 31 GraphicsStateGuardian::is_valid 0 1 194 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsStateGuardian::is_valid(void) const;

547 11 needs_reset 4 703 34 GraphicsStateGuardian::needs_reset 0 1 195 301
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::needs_reset(void) const;

548 22 get_default_properties 4 703 45 GraphicsStateGuardian::get_default_properties 0 1 196 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_properties
//       Access: Published
//  Description: Returns the default frame buffer properties for
//               this GSG.  All windows created for this GSG will be
//               created with these properties, unless explicitly
//               overridden.
////////////////////////////////////////////////////////////////////
94
inline FrameBufferProperties const &GraphicsStateGuardian::get_default_properties(void) const;

549 8 get_pipe 4 703 31 GraphicsStateGuardian::get_pipe 0 1 197 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
////////////////////////////////////////////////////////////////////
65
inline GraphicsPipe *GraphicsStateGuardian::get_pipe(void) const;

550 10 get_engine 4 703 33 GraphicsStateGuardian::get_engine 0 1 198 283
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
////////////////////////////////////////////////////////////////////
69
inline GraphicsEngine *GraphicsStateGuardian::get_engine(void) const;

551 19 get_threading_model 4 703 42 GraphicsStateGuardian::get_threading_model 0 1 199 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
////////////////////////////////////////////////////////////////////
92
inline GraphicsThreadingModel const &GraphicsStateGuardian::get_threading_model(void) const;

552 23 prefers_triangle_strips 4 703 46 GraphicsStateGuardian::prefers_triangle_strips 0 1 200 545
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::prefers_triangle_strips
//       Access: Published
//  Description: Returns true if this GSG strongly prefers triangle
//               strips to individual triangles (such as SGI), or
//               false if it prefers to minimize the number of
//               primitive batches, even at the expense of triangle
//               strips (such as most PC hardware).
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::prefers_triangle_strips(void) const;

553 26 get_max_vertices_per_array 4 703 49 GraphicsStateGuardian::get_max_vertices_per_array 0 1 201 398
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertices_per_array
//       Access: Published
//  Description: Returns the maximum number of vertices that should be
//               put into any one GeomVertexData object for use with
//               this GSG.
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_vertices_per_array(void) const;

554 30 get_max_vertices_per_primitive 4 703 53 GraphicsStateGuardian::get_max_vertices_per_primitive 0 1 202 407
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertices_per_primitive
//       Access: Published
//  Description: Returns the maximum number of vertex indices that
//               should be put into any one GeomPrimitive object for
//               use with this GSG.
////////////////////////////////////////////////////////////////////
77
inline int GraphicsStateGuardian::get_max_vertices_per_primitive(void) const;

555 22 get_max_texture_stages 4 703 45 GraphicsStateGuardian::get_max_texture_stages 0 1 203 859
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
69
inline int GraphicsStateGuardian::get_max_texture_stages(void) const;

556 25 get_max_texture_dimension 4 703 48 GraphicsStateGuardian::get_max_texture_dimension 0 1 204 591
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension supported by the GSG, or -1 if there is no
//               particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_texture_dimension(void) const;

557 28 get_max_3d_texture_dimension 4 703 51 GraphicsStateGuardian::get_max_3d_texture_dimension 0 1 205 654
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
75
inline int GraphicsStateGuardian::get_max_3d_texture_dimension(void) const;

558 26 get_max_cube_map_dimension 4 703 49 GraphicsStateGuardian::get_max_cube_map_dimension 0 1 206 662
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_cube_map_dimension(void) const;

559 28 get_supports_texture_combine 4 703 51 GraphicsStateGuardian::get_supports_texture_combine 0 1 207 595
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_texture_combine(void) const;

560 33 get_supports_texture_saved_result 4 703 56 GraphicsStateGuardian::get_supports_texture_saved_result 0 1 208 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_texture_saved_result(void) const;

561 25 get_supports_texture_dot3 4 703 48 GraphicsStateGuardian::get_supports_texture_dot3 0 1 209 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_texture_dot3(void) const;

562 23 get_supports_3d_texture 4 703 46 GraphicsStateGuardian::get_supports_3d_texture 0 1 210 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_supports_3d_texture(void) const;

563 21 get_supports_cube_map 4 703 44 GraphicsStateGuardian::get_supports_cube_map 0 1 211 298
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
////////////////////////////////////////////////////////////////////
69
inline bool GraphicsStateGuardian::get_supports_cube_map(void) const;

564 25 get_supports_tex_non_pow2 4 703 48 GraphicsStateGuardian::get_supports_tex_non_pow2 0 1 212 333
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_tex_non_pow2(void) const;

565 31 get_supports_compressed_texture 4 703 54 GraphicsStateGuardian::get_supports_compressed_texture 0 1 213 423
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
////////////////////////////////////////////////////////////////////
79
inline bool GraphicsStateGuardian::get_supports_compressed_texture(void) const;

566 38 get_supports_compressed_texture_format 4 703 61 GraphicsStateGuardian::get_supports_compressed_texture_format 0 1 214 362
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture_format
//       Access: Published
//  Description: Returns true if this GSG can accept textures
//               pre-compressed in the indicated format.
////////////////////////////////////////////////////////////////////
118
inline bool GraphicsStateGuardian::get_supports_compressed_texture_format(Texture::CompressionMode compression) const;

567 14 get_max_lights 4 703 37 GraphicsStateGuardian::get_max_lights 0 1 215 579
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::get_max_lights(void) const;

568 19 get_max_clip_planes 4 703 42 GraphicsStateGuardian::get_max_clip_planes 0 1 216 588
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::get_max_clip_planes(void) const;

569 25 get_max_vertex_transforms 4 703 48 GraphicsStateGuardian::get_max_vertex_transforms 0 1 217 818
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_vertex_transforms(void) const;

570 32 get_max_vertex_transform_indices 4 703 55 GraphicsStateGuardian::get_max_vertex_transform_indices 0 1 218 811
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
79
inline int GraphicsStateGuardian::get_max_vertex_transform_indices(void) const;

571 25 get_copy_texture_inverted 4 703 48 GraphicsStateGuardian::get_copy_texture_inverted 0 1 219 976
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_copy_texture_inverted(void) const;

572 28 get_supports_generate_mipmap 4 703 51 GraphicsStateGuardian::get_supports_generate_mipmap 0 1 220 555
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_generate_mipmap(void) const;

573 27 get_supports_render_texture 4 703 50 GraphicsStateGuardian::get_supports_render_texture 0 1 221 464
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_render_texture
//       Access: Published
//  Description: Returns true if this particular GSG can render
//               directly into a texture, or false if it must always
//               copy-to-texture at the end of each frame to achieve
//               this effect.
////////////////////////////////////////////////////////////////////
75
inline bool GraphicsStateGuardian::get_supports_render_texture(void) const;

574 26 get_supports_depth_texture 4 703 49 GraphicsStateGuardian::get_supports_depth_texture 0 1 222 354
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_component.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_texture(void) const;

575 26 get_supports_shadow_filter 4 703 49 GraphicsStateGuardian::get_supports_shadow_filter 0 1 223 356
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_shadow_filter
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               the filter mode FT_shadow for depth textures.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_shadow_filter(void) const;

576 26 get_supports_basic_shaders 4 703 49 GraphicsStateGuardian::get_supports_basic_shaders 0 1 224 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_basic_shaders(void) const;

577 28 get_color_scale_via_lighting 4 703 51 GraphicsStateGuardian::get_color_scale_via_lighting 0 1 225 499
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_color_scale_via_lighting(void) const;

578 21 set_coordinate_system 4 703 44 GraphicsStateGuardian::set_coordinate_system 0 1 226 627
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.
////////////////////////////////////////////////////////////////////
71
void GraphicsStateGuardian::set_coordinate_system(CoordinateSystem cs);

579 21 get_coordinate_system 4 703 44 GraphicsStateGuardian::get_coordinate_system 0 1 227 457
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
////////////////////////////////////////////////////////////////////
81
inline CoordinateSystem GraphicsStateGuardian::get_coordinate_system(void) const;

580 15 make_global_gsg 4 703 38 GraphicsStateGuardian::make_global_gsg 0 1 228 420
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::make_global_gsg
//       Access: Published
//  Description: Marks this particular GraphicsStateGuardian as the
//               "global" GSG, which is used for optimization hints by
//               operations like NodePath::flatten_strong().
////////////////////////////////////////////////////////////////////
57
inline void GraphicsStateGuardian::make_global_gsg(void);

581 14 get_global_gsg 4 703 37 GraphicsStateGuardian::get_global_gsg 0 1 229 659
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_global_gsg
//       Access: Published, Static
//  Description: Returns the "global" GSG, which is to say, the
//               GraphicsStateGuardian object that has most recently
//               had make_global_gsg() called for it.  It may return
//               NULL if there is no such GSG.
//
//               This object should be used for optimization hints
//               where appropriate, for instance by operations like
//               NodePath::flatten_strong().
////////////////////////////////////////////////////////////////////
81
static inline GraphicsStateGuardian *GraphicsStateGuardian::get_global_gsg(void);

582 14 get_class_type 4 703 37 GraphicsStateGuardian::get_class_type 0 1 230 0
62
static TypeHandle GraphicsStateGuardian::get_class_type(void);

583 37 upcast_to_TypedWritableReferenceCount 12 705 53 GraphicsOutput::upcast_to_TypedWritableReferenceCount 0 1 290 57
upcast from GraphicsOutput to TypedWritableReferenceCount
89
TypedWritableReferenceCount *GraphicsOutput::upcast_to_TypedWritableReferenceCount(void);

584 26 downcast_to_GraphicsOutput 12 706 55 TypedWritableReferenceCount::downcast_to_GraphicsOutput 0 1 291 59
downcast from TypedWritableReferenceCount to GraphicsOutput
78
GraphicsOutput *TypedWritableReferenceCount::downcast_to_GraphicsOutput(void);

585 24 upcast_to_DrawableRegion 12 705 40 GraphicsOutput::upcast_to_DrawableRegion 0 1 292 44
upcast from GraphicsOutput to DrawableRegion
63
DrawableRegion *GraphicsOutput::upcast_to_DrawableRegion(void);

586 26 downcast_to_GraphicsOutput 12 692 42 DrawableRegion::downcast_to_GraphicsOutput 0 1 293 46
downcast from DrawableRegion to GraphicsOutput
65
GraphicsOutput *DrawableRegion::downcast_to_GraphicsOutput(void);

587 15 ~GraphicsOutput 4 705 31 GraphicsOutput::~GraphicsOutput 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual GraphicsOutput::~GraphicsOutput(void);

588 7 get_gsg 4 705 23 GraphicsOutput::get_gsg 0 1 231 1284
// Filename: graphicsOutput.I
// Created by:  drose (06Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
////////////////////////////////////////////////////////////////////
66
inline GraphicsStateGuardian *GraphicsOutput::get_gsg(void) const;

589 8 get_pipe 4 705 24 GraphicsOutput::get_pipe 0 1 232 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsOutput::get_pipe(void) const;

590 8 get_name 4 705 24 GraphicsOutput::get_name 0 1 233 308
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GraphicsOutput::get_name(void) const;

591 14 count_textures 4 705 30 GraphicsOutput::count_textures 0 1 234 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::count_textures(void) const;

592 11 has_texture 4 705 27 GraphicsOutput::has_texture 0 1 235 318
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
////////////////////////////////////////////////////////////////////
52
inline bool GraphicsOutput::has_texture(void) const;

593 11 get_texture 4 705 27 GraphicsOutput::get_texture 0 2 236 237 725
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
////////////////////////////////////////////////////////////////////
63
inline Texture *GraphicsOutput::get_texture(int i = (0)) const;

594 17 get_texture_plane 4 705 33 GraphicsOutput::get_texture_plane 0 2 238 239 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
////////////////////////////////////////////////////////////////////
95
inline GraphicsOutput::RenderTexturePlane GraphicsOutput::get_texture_plane(int i = (0)) const;

595 12 get_rtm_mode 4 705 28 GraphicsOutput::get_rtm_mode 0 2 240 241 378
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
////////////////////////////////////////////////////////////////////
89
inline GraphicsOutput::RenderTextureMode GraphicsOutput::get_rtm_mode(int i = (0)) const;

596 21 clear_render_textures 4 705 37 GraphicsOutput::clear_render_textures 0 1 242 387
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::clear_render_textures(void);

597 18 add_render_texture 4 705 34 GraphicsOutput::add_render_texture 0 2 243 244 1873
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the 
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_stencil_index attaches to RTP_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth, it will turn
//               into an F_depth_component texture.
//               
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
////////////////////////////////////////////////////////////////////
153
void GraphicsOutput::add_render_texture(Texture *tex, GraphicsOutput::RenderTextureMode mode, GraphicsOutput::RenderTexturePlane bitplane = (RTP_COUNT));

598 20 setup_render_texture 4 705 36 GraphicsOutput::setup_render_texture 0 1 245 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
////////////////////////////////////////////////////////////////////
86
void GraphicsOutput::setup_render_texture(Texture *tex, bool allow_bind, bool to_ram);

599 10 get_x_size 4 705 26 GraphicsOutput::get_x_size 0 1 246 743
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the width of the graphics frame buffer, if it
//               is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_x_size(void) const;

600 10 get_y_size 4 705 26 GraphicsOutput::get_y_size 0 1 247 744
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the height of the graphics frame buffer, if it
//               is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_y_size(void) const;

601 8 has_size 4 705 24 GraphicsOutput::has_size 0 1 248 530
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::has_size(void) const;

602 8 is_valid 4 705 24 GraphicsOutput::is_valid 0 1 249 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::is_valid(void) const;

603 10 set_active 4 705 26 GraphicsOutput::set_active 0 1 250 380
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
45
void GraphicsOutput::set_active(bool active);

604 9 is_active 4 705 25 GraphicsOutput::is_active 0 1 251 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool GraphicsOutput::is_active(void) const;

605 12 set_one_shot 4 705 28 GraphicsOutput::set_one_shot 0 1 252 512
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically detach its texture (if it has one) and
//               remove itself from the GraphicsEngine after it
//               renders the next frame.
////////////////////////////////////////////////////////////////////
56
inline void GraphicsOutput::set_one_shot(bool one_shot);

606 12 get_one_shot 4 705 28 GraphicsOutput::get_one_shot 0 1 253 512
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically detach its texture (if it has one) and
//               remove itself from the GraphicsEngine after it
//               renders the next frame.
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_one_shot(void) const;

607 12 set_inverted 4 705 28 GraphicsOutput::set_inverted 0 1 254 947
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_inverted(bool inverted);

608 12 get_inverted 4 705 28 GraphicsOutput::get_inverted 0 1 255 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_inverted(void) const;

609 19 set_red_blue_stereo 4 705 35 GraphicsOutput::set_red_blue_stereo 0 1 256 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
////////////////////////////////////////////////////////////////////
139
inline void GraphicsOutput::set_red_blue_stereo(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

610 19 get_red_blue_stereo 4 705 35 GraphicsOutput::get_red_blue_stereo 0 1 257 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_red_blue_stereo(void) const;

611 23 get_left_eye_color_mask 4 705 39 GraphicsOutput::get_left_eye_color_mask 0 1 258 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
72
inline unsigned int GraphicsOutput::get_left_eye_color_mask(void) const;

612 24 get_right_eye_color_mask 4 705 40 GraphicsOutput::get_right_eye_color_mask 0 1 259 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
73
inline unsigned int GraphicsOutput::get_right_eye_color_mask(void) const;

613 17 get_fb_properties 4 705 33 GraphicsOutput::get_fb_properties 0 1 260 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
////////////////////////////////////////////////////////////////////
70
inline FrameBufferProperties &GraphicsOutput::get_fb_properties(void);

614 9 is_stereo 4 705 25 GraphicsOutput::is_stereo 0 1 261 447
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsOutput::is_stereo(void) const;

615 17 clear_delete_flag 4 705 33 GraphicsOutput::clear_delete_flag 0 1 262 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
////////////////////////////////////////////////////////////////////
52
inline void GraphicsOutput::clear_delete_flag(void);

616 15 get_delete_flag 4 705 31 GraphicsOutput::get_delete_flag 0 1 263 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsOutput::get_delete_flag(void) const;

617 8 set_sort 4 705 24 GraphicsOutput::set_sort 0 1 264 336
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
////////////////////////////////////////////////////////////////////
40
void GraphicsOutput::set_sort(int sort);

618 8 get_sort 4 705 24 GraphicsOutput::get_sort 0 1 265 432
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
////////////////////////////////////////////////////////////////////
48
inline int GraphicsOutput::get_sort(void) const;

619 12 trigger_copy 4 705 28 GraphicsOutput::trigger_copy 0 1 266 376
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
////////////////////////////////////////////////////////////////////
47
inline void GraphicsOutput::trigger_copy(void);

620 19 make_display_region 4 705 35 GraphicsOutput::make_display_region 0 2 267 268 705
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
////////////////////////////////////////////////////////////////////
64
inline DisplayRegion *GraphicsOutput::make_display_region(void);

621 21 remove_display_region 4 705 37 GraphicsOutput::remove_display_region 0 1 269 492
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
////////////////////////////////////////////////////////////////////
74
bool GraphicsOutput::remove_display_region(DisplayRegion *display_region);

622 26 remove_all_display_regions 4 705 42 GraphicsOutput::remove_all_display_regions 0 1 270 359
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
////////////////////////////////////////////////////////////////////
54
void GraphicsOutput::remove_all_display_regions(void);

623 23 get_num_display_regions 4 705 39 GraphicsOutput::get_num_display_regions 0 1 271 355
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
////////////////////////////////////////////////////////////////////
56
int GraphicsOutput::get_num_display_regions(void) const;

624 18 get_display_region 4 705 34 GraphicsOutput::get_display_region 0 1 272 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
////////////////////////////////////////////////////////////////////
75
PointerTo< DisplayRegion > GraphicsOutput::get_display_region(int n) const;

625 30 get_num_active_display_regions 4 705 46 GraphicsOutput::get_num_active_display_regions 0 1 273 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
////////////////////////////////////////////////////////////////////
63
int GraphicsOutput::get_num_active_display_regions(void) const;

626 25 get_active_display_region 4 705 41 GraphicsOutput::get_active_display_region 0 1 274 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
////////////////////////////////////////////////////////////////////
82
PointerTo< DisplayRegion > GraphicsOutput::get_active_display_region(int n) const;

627 19 make_texture_buffer 4 705 35 GraphicsOutput::make_texture_buffer 0 3 275 276 277 1888
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
////////////////////////////////////////////////////////////////////
159
GraphicsOutput *GraphicsOutput::make_texture_buffer(basic_string< char > const &name, int x_size, int y_size, Texture *tex = ((void *)(0)), bool to_ram = (0));

628 13 make_cube_map 4 705 29 GraphicsOutput::make_cube_map 0 3 278 279 280 1206
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
////////////////////////////////////////////////////////////////////
187
GraphicsOutput *GraphicsOutput::make_cube_map(basic_string< char > const &name, int size, NodePath &camera_rig, BitMask< unsigned int, 32 > camera_mask = ((all_on())), bool to_ram = (0));

629 24 make_screenshot_filename 4 705 40 GraphicsOutput::make_screenshot_filename 0 2 281 282 806
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
117
static inline Filename GraphicsOutput::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

630 23 save_screenshot_default 4 705 39 GraphicsOutput::save_screenshot_default 0 2 283 284 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
109
inline Filename GraphicsOutput::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

631 15 save_screenshot 4 705 31 GraphicsOutput::save_screenshot 0 2 285 286 600
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
120
inline bool GraphicsOutput::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

632 14 get_screenshot 4 705 30 GraphicsOutput::get_screenshot 0 1 287 399
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_screenshot(PNMImage &image);

633 16 get_texture_card 4 705 32 GraphicsOutput::get_texture_card 0 1 288 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
////////////////////////////////////////////////////////////////////
48
NodePath GraphicsOutput::get_texture_card(void);

634 14 get_class_type 4 705 30 GraphicsOutput::get_class_type 0 1 289 0
55
static TypeHandle GraphicsOutput::get_class_type(void);

635 14 get_class_type 4 710 30 GraphicsBuffer::get_class_type 0 1 294 0
55
static TypeHandle GraphicsBuffer::get_class_type(void);

636 14 get_properties 4 711 30 GraphicsWindow::get_properties 0 1 295 275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
////////////////////////////////////////////////////////////////////
60
WindowProperties GraphicsWindow::get_properties(void) const;

637 24 get_requested_properties 4 711 40 GraphicsWindow::get_requested_properties 0 1 296 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
////////////////////////////////////////////////////////////////////
70
WindowProperties GraphicsWindow::get_requested_properties(void) const;

638 25 clear_rejected_properties 4 711 41 GraphicsWindow::clear_rejected_properties 0 1 297 346
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
////////////////////////////////////////////////////////////////////
53
void GraphicsWindow::clear_rejected_properties(void);

639 23 get_rejected_properties 4 711 39 GraphicsWindow::get_rejected_properties 0 1 298 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
////////////////////////////////////////////////////////////////////
69
WindowProperties GraphicsWindow::get_rejected_properties(void) const;

640 18 request_properties 4 711 34 GraphicsWindow::request_properties 0 1 299 603
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
////////////////////////////////////////////////////////////////////
86
void GraphicsWindow::request_properties(WindowProperties const &requested_properties);

641 9 is_closed 4 711 25 GraphicsWindow::is_closed 0 1 300 1309
// Filename: graphicsWindow.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsWindow::is_closed(void) const;

642 13 is_fullscreen 4 711 29 GraphicsWindow::is_fullscreen 0 1 301 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsWindow::is_fullscreen(void) const;

643 16 set_window_event 4 711 32 GraphicsWindow::set_window_event 0 1 302 630
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
////////////////////////////////////////////////////////////////////
80
void GraphicsWindow::set_window_event(basic_string< char > const &window_event);

644 16 get_window_event 4 711 32 GraphicsWindow::get_window_event 0 1 303 421
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
////////////////////////////////////////////////////////////////////
66
basic_string< char > GraphicsWindow::get_window_event(void) const;

645 23 set_close_request_event 4 711 39 GraphicsWindow::set_close_request_event 0 1 304 1393
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
////////////////////////////////////////////////////////////////////
94
void GraphicsWindow::set_close_request_event(basic_string< char > const &close_request_event);

646 23 get_close_request_event 4 711 39 GraphicsWindow::get_close_request_event 0 1 305 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
////////////////////////////////////////////////////////////////////
73
basic_string< char > GraphicsWindow::get_close_request_event(void) const;

647 21 get_num_input_devices 4 711 37 GraphicsWindow::get_num_input_devices 0 1 306 626
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
////////////////////////////////////////////////////////////////////
54
int GraphicsWindow::get_num_input_devices(void) const;

648 21 get_input_device_name 4 711 37 GraphicsWindow::get_input_device_name 0 1 307 310
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
////////////////////////////////////////////////////////////////////
77
basic_string< char > GraphicsWindow::get_input_device_name(int device) const;

649 11 has_pointer 4 711 27 GraphicsWindow::has_pointer 0 1 308 366
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
bool GraphicsWindow::has_pointer(int device) const;

650 12 has_keyboard 4 711 28 GraphicsWindow::has_keyboard 0 1 309 314
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
bool GraphicsWindow::has_keyboard(int device) const;

651 11 get_pointer 4 711 27 GraphicsWindow::get_pointer 0 1 310 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth input
//               device's pointer.
////////////////////////////////////////////////////////////////////
56
MouseData GraphicsWindow::get_pointer(int device) const;

652 12 move_pointer 4 711 28 GraphicsWindow::move_pointer 0 1 311 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.  
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
////////////////////////////////////////////////////////////////////
68
virtual bool GraphicsWindow::move_pointer(int device, int x, int y);

653 9 close_ime 4 711 25 GraphicsWindow::close_ime 0 1 312 274
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
////////////////////////////////////////////////////////////////////
45
virtual void GraphicsWindow::close_ime(void);

654 14 get_class_type 4 711 30 GraphicsWindow::get_class_type 0 1 313 0
55
static TypeHandle GraphicsWindow::get_class_type(void);

655 14 GraphicsEngine 4 712 30 GraphicsEngine::GraphicsEngine 0 2 314 315 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
////////////////////////////////////////////////////////////////////
67
GraphicsEngine::GraphicsEngine(Pipeline *pipeline = ((void *)(0)));

656 15 ~GraphicsEngine 4 712 31 GraphicsEngine::~GraphicsEngine 0 0 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Destructor
//       Access: Published
//  Description: Gracefully cleans up the graphics engine and its
//               related threads and windows.
////////////////////////////////////////////////////////////////////
38
GraphicsEngine::~GraphicsEngine(void);

657 27 set_frame_buffer_properties 4 712 43 GraphicsEngine::set_frame_buffer_properties 0 1 316 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_frame_buffer_properties
//       Access: Published
//  Description: Specifies the default frame buffer properties for
//               future gsg's created using the one-parameter
//               make_gsg() method.
////////////////////////////////////////////////////////////////////
90
void GraphicsEngine::set_frame_buffer_properties(FrameBufferProperties const &properties);

658 27 get_frame_buffer_properties 4 712 43 GraphicsEngine::get_frame_buffer_properties 0 1 317 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_frame_buffer_properties
//       Access: Published
//  Description: Returns the frame buffer properties for future gsg's.
//               See set_frame_buffer_properties().
////////////////////////////////////////////////////////////////////
78
FrameBufferProperties GraphicsEngine::get_frame_buffer_properties(void) const;

659 19 set_threading_model 4 712 35 GraphicsEngine::set_threading_model 0 1 318 422
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
////////////////////////////////////////////////////////////////////
88
void GraphicsEngine::set_threading_model(GraphicsThreadingModel const &threading_model);

660 19 get_threading_model 4 712 35 GraphicsEngine::get_threading_model 0 1 319 347
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
////////////////////////////////////////////////////////////////////
71
GraphicsThreadingModel GraphicsEngine::get_threading_model(void) const;

661 13 set_auto_flip 4 712 29 GraphicsEngine::set_auto_flip 0 1 320 1603
// Filename: graphicsEngine.I
// Created by:  drose (24Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsEngine::set_auto_flip(bool auto_flip);

662 13 get_auto_flip 4 712 29 GraphicsEngine::get_auto_flip 0 1 321 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsEngine::get_auto_flip(void) const;

663 15 set_portal_cull 4 712 31 GraphicsEngine::set_portal_cull 0 1 322 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
////////////////////////////////////////////////////////////////////
56
inline void GraphicsEngine::set_portal_cull(bool value);

664 15 get_portal_cull 4 712 31 GraphicsEngine::get_portal_cull 0 1 323 287
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsEngine::get_portal_cull(void) const;

665 8 make_gsg 4 712 24 GraphicsEngine::make_gsg 0 3 324 325 326 1893
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_gsg
//       Access: Published
//  Description: Creates a new gsg using the indicated GraphicsPipe
//               and returns it.  The GraphicsEngine does not
//               officially own the pointer to the gsg; but if any
//               windows are created using this GSG, the
//               GraphicsEngine will own the pointers to these
//               windows, which in turn will own the pointer to the
//               GSG.
//
//               There is no explicit way to release a GSG, but it
//               will be destructed when all windows that reference it
//               are destructed, and the draw thread that owns the GSG
//               runs one more time.
//
//               This flavor of make_gsg() uses the default
//               frame buffer properties, specified via
//               set_frame_buffer_properties().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_gsg
//       Access: Published
//  Description: Creates a new gsg using the indicated GraphicsPipe
//               and returns it.  The GraphicsEngine does not
//               officially own the pointer to the gsg; but if any
//               windows are created using this GSG, the
//               GraphicsEngine will own the pointers to these
//               windows, which in turn will own the pointer to the
//               GSG.
//
//               There is no explicit way to release a GSG, but it
//               will be destructed when all windows that reference it
//               are destructed, and the draw thread that owns the GSG
//               runs one more time.
////////////////////////////////////////////////////////////////////
87
inline PointerTo< GraphicsStateGuardian > GraphicsEngine::make_gsg(GraphicsPipe *pipe);

666 11 make_output 4 712 27 GraphicsEngine::make_output 0 3 327 328 329 647
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
////////////////////////////////////////////////////////////////////
240
GraphicsOutput *GraphicsEngine::make_output(GraphicsPipe *pipe, basic_string< char > const &name, int sort, FrameBufferProperties const &prop, int x_size, int y_size, int flags, GraphicsStateGuardian *gsg = (0), GraphicsOutput *host = (0));

667 11 make_window 4 712 27 GraphicsEngine::make_window 0 1 330 310
// Syntactic shorthand versions of make_output

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_window
//       Access: Published
//  Description: Syntactic shorthand for make_output
////////////////////////////////////////////////////////////////////
123
inline GraphicsWindow *GraphicsEngine::make_window(GraphicsStateGuardian *gsg, basic_string< char > const &name, int sort);

668 11 make_buffer 4 712 27 GraphicsEngine::make_buffer 0 1 331 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output
////////////////////////////////////////////////////////////////////
147
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsStateGuardian *gsg, basic_string< char > const &name, int sort, int x_size, int y_size);

669 13 make_parasite 4 712 29 GraphicsEngine::make_parasite 0 1 332 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
////////////////////////////////////////////////////////////////////
143
inline GraphicsOutput *GraphicsEngine::make_parasite(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);

670 13 remove_window 4 712 29 GraphicsEngine::remove_window 0 1 333 1357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
////////////////////////////////////////////////////////////////////
59
bool GraphicsEngine::remove_window(GraphicsOutput *window);

671 18 remove_all_windows 4 712 34 GraphicsEngine::remove_all_windows 0 1 334 412
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
////////////////////////////////////////////////////////////////////
46
void GraphicsEngine::remove_all_windows(void);

672 17 reset_all_windows 4 712 33 GraphicsEngine::reset_all_windows 0 1 335 466
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to 
//               release/create old/new framebuffer
////////////////////////////////////////////////////////////////////
55
void GraphicsEngine::reset_all_windows(bool swapchain);

673 8 is_empty 4 712 24 GraphicsEngine::is_empty 0 1 336 360
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
////////////////////////////////////////////////////////////////////
42
bool GraphicsEngine::is_empty(void) const;

674 15 get_num_windows 4 712 31 GraphicsEngine::get_num_windows 0 1 337 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
////////////////////////////////////////////////////////////////////
48
int GraphicsEngine::get_num_windows(void) const;

675 10 get_window 4 712 26 GraphicsEngine::get_window 0 1 338 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
////////////////////////////////////////////////////////////////////
56
GraphicsOutput *GraphicsEngine::get_window(int n) const;

676 12 render_frame 4 712 28 GraphicsEngine::render_frame 0 1 339 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::render_frame(void);

677 12 open_windows 4 712 28 GraphicsEngine::open_windows 0 1 340 658
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::open_windows(void);

678 10 sync_frame 4 712 26 GraphicsEngine::sync_frame 0 1 341 558
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::sync_frame(void);

679 10 flip_frame 4 712 26 GraphicsEngine::flip_frame 0 1 342 516
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::flip_frame(void);

680 20 extract_texture_data 4 712 36 GraphicsEngine::extract_texture_data 0 1 343 1560
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
84
bool GraphicsEngine::extract_texture_data(Texture *tex, GraphicsStateGuardian *gsg);

681 18 get_num_pipe_types 4 713 41 GraphicsPipeSelection::get_num_pipe_types 0 1 344 382
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
////////////////////////////////////////////////////////////////////
58
int GraphicsPipeSelection::get_num_pipe_types(void) const;

682 13 get_pipe_type 4 713 36 GraphicsPipeSelection::get_pipe_type 0 1 345 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
////////////////////////////////////////////////////////////////////
61
TypeHandle GraphicsPipeSelection::get_pipe_type(int n) const;

683 16 print_pipe_types 4 713 39 GraphicsPipeSelection::print_pipe_types 0 1 346 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
////////////////////////////////////////////////////////////////////
57
void GraphicsPipeSelection::print_pipe_types(void) const;

684 9 make_pipe 4 713 32 GraphicsPipeSelection::make_pipe 0 1 347 456
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
////////////////////////////////////////////////////////////////////
76
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(TypeHandle type);

685 17 make_default_pipe 4 713 40 GraphicsPipeSelection::make_default_pipe 0 1 348 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
////////////////////////////////////////////////////////////////////
73
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_default_pipe(void);

686 19 get_num_aux_modules 4 713 42 GraphicsPipeSelection::get_num_aux_modules 0 1 349 1157
// Filename: graphicsPipeSelection.I
// Created by:  drose (15Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsPipeSelection::get_num_aux_modules(void) const;

687 16 load_aux_modules 4 713 39 GraphicsPipeSelection::load_aux_modules 0 1 350 391
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
////////////////////////////////////////////////////////////////////
51
void GraphicsPipeSelection::load_aux_modules(void);

688 14 get_global_ptr 4 713 37 GraphicsPipeSelection::get_global_ptr 0 1 351 327
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
////////////////////////////////////////////////////////////////////
81
static inline GraphicsPipeSelection *GraphicsPipeSelection::get_global_ptr(void);

689 14 get_class_type 4 714 30 ParasiteBuffer::get_class_type 0 1 352 0
55
static TypeHandle ParasiteBuffer::get_class_type(void);

352
1 14 Dtool_O9cYGNZU 7 3 715 355 14 Dtool_O9cYGNZU 0 
2 14 Dtool_O9cYlceF 7 3 715 355 14 Dtool_O9cYlceF 1 4 copy 1 716  
3 14 Dtool_O9cYZC_R 6 4 715 0 14 Dtool_O9cYZC_R 2 4 this 3 715  4 copy 1 716  
4 14 Dtool_O9cY1hD1 7 6 715 355 14 Dtool_O9cY1hD1 0 
5 14 Dtool_O9cYgRMD 6 7 718 0 14 Dtool_O9cYgRMD 2 4 this 3 716  5 other 1 716  
6 14 Dtool_O9cY_Vsq 6 8 718 0 14 Dtool_O9cY_Vsq 2 4 this 3 716  5 other 1 716  
7 14 Dtool_O9cYIj6c 4 9 719 0 14 Dtool_O9cYIj6c 1 4 this 3 715  
8 14 Dtool_O9cY5Hm3 6 10 718 0 14 Dtool_O9cY5Hm3 1 4 this 3 716  
9 14 Dtool_O9cY_6s1 4 11 719 0 14 Dtool_O9cY_6s1 3 4 this 3 715  8 x_origin 1 720  8 y_origin 1 720  
10 14 Dtool_O9cYmWEm 6 12 720 0 14 Dtool_O9cYmWEm 1 4 this 3 716  
11 14 Dtool_O9cYjWge 6 13 720 0 14 Dtool_O9cYjWge 1 4 this 3 716  
12 14 Dtool_O9cYeNcv 6 14 718 0 14 Dtool_O9cYeNcv 1 4 this 3 716  
13 14 Dtool_O9cYJusE 4 15 719 0 14 Dtool_O9cYJusE 1 4 this 3 715  
14 14 Dtool_O9cY7Ba1 4 16 719 0 14 Dtool_O9cY7Ba1 3 4 this 3 715  6 x_size 1 720  6 y_size 1 720  
15 14 Dtool_O9cYVfNw 6 17 720 0 14 Dtool_O9cYVfNw 1 4 this 3 716  
16 14 Dtool_O9cYQfpo 6 18 720 0 14 Dtool_O9cYQfpo 1 4 this 3 716  
17 14 Dtool_O9cY04_T 6 19 718 0 14 Dtool_O9cY04_T 1 4 this 3 716  
18 14 Dtool_O9cYChuY 4 20 719 0 14 Dtool_O9cYChuY 1 4 this 3 715  
19 14 Dtool_O9cYEtQx 4 21 719 0 14 Dtool_O9cYEtQx 2 4 this 3 715  5 title 1 721  
20 14 Dtool_O9cYLpK6 6 22 721 0 14 Dtool_O9cYLpK6 1 4 this 3 716  
21 14 Dtool_O9cY4p0A 6 23 718 0 14 Dtool_O9cY4p0A 1 4 this 3 716  
22 14 Dtool_O9cY2KzX 4 24 719 0 14 Dtool_O9cY2KzX 1 4 this 3 715  
23 14 Dtool_O9cY1wGY 4 25 719 0 14 Dtool_O9cY1wGY 2 4 this 3 715  11 undecorated 1 718  
24 14 Dtool_O9cYJtRY 6 26 718 0 14 Dtool_O9cYJtRY 1 4 this 3 716  
25 14 Dtool_O9cYds7e 6 27 718 0 14 Dtool_O9cYds7e 1 4 this 3 716  
26 14 Dtool_O9cY6EZL 4 28 719 0 14 Dtool_O9cY6EZL 1 4 this 3 715  
27 14 Dtool_O9cYhxLw 4 29 719 0 14 Dtool_O9cYhxLw 2 4 this 3 715  10 fixed_size 1 718  
28 14 Dtool_O9cYi_y_ 6 30 718 0 14 Dtool_O9cYi_y_ 1 4 this 3 716  
29 14 Dtool_O9cY7wcF 6 31 718 0 14 Dtool_O9cY7wcF 1 4 this 3 716  
30 14 Dtool_O9cYPwhp 4 32 719 0 14 Dtool_O9cYPwhp 1 4 this 3 715  
31 14 Dtool_O9cYq0Uu 4 33 719 0 14 Dtool_O9cYq0Uu 2 4 this 3 715  10 fullscreen 1 718  
32 14 Dtool_O9cYtz98 6 34 718 0 14 Dtool_O9cYtz98 1 4 this 3 716  
33 14 Dtool_O9cYi3nD 6 35 718 0 14 Dtool_O9cYi3nD 1 4 this 3 716  
34 14 Dtool_O9cYwgpW 4 36 719 0 14 Dtool_O9cYwgpW 1 4 this 3 715  
35 14 Dtool_O9cYpPA6 4 37 719 0 14 Dtool_O9cYpPA6 2 4 this 3 715  10 foreground 1 718  
36 14 Dtool_O9cYrFnI 6 38 718 0 14 Dtool_O9cYrFnI 1 4 this 3 716  
37 14 Dtool_O9cY7CRP 6 39 718 0 14 Dtool_O9cY7CRP 1 4 this 3 716  
38 14 Dtool_O9cYNghP 4 40 719 0 14 Dtool_O9cYNghP 1 4 this 3 715  
39 14 Dtool_O9cYJuBm 4 41 719 0 14 Dtool_O9cYJuBm 2 4 this 3 715  9 minimized 1 718  
40 14 Dtool_O9cYUuGt 6 42 718 0 14 Dtool_O9cYUuGt 1 4 this 3 716  
41 14 Dtool_O9cYgrwz 6 43 718 0 14 Dtool_O9cYgrwz 1 4 this 3 716  
42 14 Dtool_O9cYNh8v 4 44 719 0 14 Dtool_O9cYNh8v 1 4 this 3 715  
43 14 Dtool_O9cY0PHZ 4 45 719 0 14 Dtool_O9cY0PHZ 2 4 this 3 715  4 open 1 718  
44 14 Dtool_O9cYnBqS 6 46 718 0 14 Dtool_O9cYnBqS 1 4 this 3 716  
45 14 Dtool_O9cY3AUZ 6 47 718 0 14 Dtool_O9cY3AUZ 1 4 this 3 716  
46 14 Dtool_O9cYXQu6 4 48 719 0 14 Dtool_O9cYXQu6 1 4 this 3 715  
47 14 Dtool_O9cYuag3 4 49 719 0 14 Dtool_O9cYuag3 2 4 this 3 715  13 cursor_hidden 1 718  
48 14 Dtool_O9cYILMV 6 50 718 0 14 Dtool_O9cYILMV 1 4 this 3 716  
49 14 Dtool_O9cY0O2b 6 51 718 0 14 Dtool_O9cY0O2b 1 4 this 3 716  
50 14 Dtool_O9cYnQoK 4 52 719 0 14 Dtool_O9cYnQoK 1 4 this 3 715  
51 14 Dtool_O9cYvab1 4 53 719 0 14 Dtool_O9cYvab1 2 4 this 3 715  13 icon_filename 1 722  
52 14 Dtool_O9cYaEsZ 6 54 722 0 14 Dtool_O9cYaEsZ 1 4 this 3 716  
53 14 Dtool_O9cYqEWg 6 55 718 0 14 Dtool_O9cYqEWg 1 4 this 3 716  
54 14 Dtool_O9cYOBF2 4 56 719 0 14 Dtool_O9cYOBF2 1 4 this 3 715  
55 14 Dtool_O9cYFBsD 4 57 719 0 14 Dtool_O9cYFBsD 2 4 this 3 715  15 cursor_filename 1 722  
56 14 Dtool_O9cYzq6A 6 58 722 0 14 Dtool_O9cYzq6A 1 4 this 3 716  
57 14 Dtool_O9cYjlkH 6 59 718 0 14 Dtool_O9cYjlkH 1 4 this 3 716  
58 14 Dtool_O9cYImNb 4 60 719 0 14 Dtool_O9cYImNb 1 4 this 3 715  
59 14 Dtool_O9cYonGh 4 61 719 0 14 Dtool_O9cYonGh 2 4 this 3 715  7 z_order 1 691  
60 14 Dtool_O9cY_iJo 6 62 691 0 14 Dtool_O9cY_iJo 1 4 this 3 716  
61 14 Dtool_O9cYuhzu 6 63 718 0 14 Dtool_O9cYuhzu 1 4 this 3 716  
62 14 Dtool_O9cYLFwW 4 64 719 0 14 Dtool_O9cYLFwW 1 4 this 3 715  
63 14 Dtool_O9cYcUzF 4 65 719 0 14 Dtool_O9cYcUzF 2 4 this 3 715  5 other 1 716  
64 14 Dtool_O9cYXFj2 4 66 719 0 14 Dtool_O9cYXFj2 2 4 this 3 716  3 out 1 725  
65 14 Dtool_O9cY5_NM 4 69 719 0 14 Dtool_O9cY5_NM 2 4 this 3 727  18 clear_color_active 1 718  
66 14 Dtool_O9cYQ__5 6 70 718 0 14 Dtool_O9cYQ__5 1 4 this 3 728  
67 14 Dtool_O9cY_x_a 4 71 719 0 14 Dtool_O9cY_x_a 2 4 this 3 727  18 clear_depth_active 1 718  
68 14 Dtool_O9cYklwI 6 72 718 0 14 Dtool_O9cYklwI 1 4 this 3 728  
69 14 Dtool_O9cYrSVN 4 73 719 0 14 Dtool_O9cYrSVN 2 4 this 3 727  5 color 1 730  
70 14 Dtool_O9cY4kxz 6 74 730 0 14 Dtool_O9cY4kxz 1 4 this 3 728  
71 14 Dtool_O9cYw_6X 4 75 719 0 14 Dtool_O9cYw_6X 2 4 this 3 727  5 depth 1 733  
72 14 Dtool_O9cYMYjC 6 76 733 0 14 Dtool_O9cYMYjC 1 4 this 3 728  
73 14 Dtool_O9cYtFqI 4 77 719 0 14 Dtool_O9cYtFqI 1 4 this 3 727  
74 14 Dtool_O9cY0Gt_ 6 78 718 0 14 Dtool_O9cY0Gt_ 1 4 this 3 728  
75 14 Dtool_O9cY8EnQ 6 87 733 0 14 Dtool_O9cY8EnQ 1 4 this 3 734  
76 14 Dtool_O9cY85BK 6 88 733 0 14 Dtool_O9cY85BK 1 4 this 3 734  
77 14 Dtool_O9cYCJld 6 89 733 0 14 Dtool_O9cYCJld 1 4 this 3 734  
78 14 Dtool_O9cYpTxi 6 90 733 0 14 Dtool_O9cYpTxi 1 4 this 3 734  
79 14 Dtool_O9cYta7G 4 91 719 0 14 Dtool_O9cYta7G 5 4 this 3 736  1 l 1 733  1 r 1 733  1 b 1 733  1 t 1 733  
80 14 Dtool_O9cYKjj6 6 92 737 0 14 Dtool_O9cYKjj6 1 4 this 3 734  
81 14 Dtool_O9cY668k 6 93 738 0 14 Dtool_O9cY668k 1 4 this 3 734  
82 14 Dtool_O9cYsRD1 4 94 719 0 14 Dtool_O9cYsRD1 2 4 this 3 736  6 camera 1 739  
83 14 Dtool_O9cYM2LQ 7 95 742 0 14 Dtool_O9cYM2LQ 1 4 this 3 734  
84 14 Dtool_O9cYPMVE 4 96 719 0 14 Dtool_O9cYPMVE 2 4 this 3 736  6 active 1 718  
85 14 Dtool_O9cYpe7G 6 97 718 0 14 Dtool_O9cYpe7G 1 4 this 3 734  
86 14 Dtool_O9cYJhLw 4 98 719 0 14 Dtool_O9cYJhLw 2 4 this 3 736  4 sort 1 720  
87 14 Dtool_O9cYkJ4o 6 99 720 0 14 Dtool_O9cYkJ4o 1 4 this 3 734  
88 14 Dtool_O9cYwg4T 4 100 719 0 14 Dtool_O9cYwg4T 2 4 this 3 736  14 stereo_channel 1 743  
89 14 Dtool_O9cYMGiX 6 101 743 0 14 Dtool_O9cYMGiX 1 4 this 3 736  
90 14 Dtool_O9cYwEB_ 4 102 719 0 14 Dtool_O9cYwEB_ 2 4 this 3 736  24 clear_depth_between_eyes 1 718  
91 14 Dtool_O9cYQG4M 6 103 718 0 14 Dtool_O9cYQG4M 1 4 this 3 734  
92 14 Dtool_O9cYVFCA 4 104 719 0 14 Dtool_O9cYVFCA 2 4 this 3 736  14 cube_map_index 1 720  
93 14 Dtool_O9cY1Pdo 6 105 720 0 14 Dtool_O9cY1Pdo 1 4 this 3 734  
94 14 Dtool_O9cYZxAV 4 106 719 0 14 Dtool_O9cYZxAV 1 4 this 3 736  
95 14 Dtool_O9cYjMLv 4 106 719 0 14 Dtool_O9cYjMLv 3 4 this 3 736  6 x_size 1 720  6 y_size 1 720  
96 14 Dtool_O9cYm_3J 4 107 719 0 14 Dtool_O9cYm_3J 1 4 this 3 736  
97 14 Dtool_O9cY8yEm 4 107 719 0 14 Dtool_O9cY8yEm 3 4 this 3 736  6 x_size 1 720  6 y_size 1 720  
98 14 Dtool_O9cY9Qnq 6 111 720 0 14 Dtool_O9cY9Qnq 1 4 this 3 734  
99 14 Dtool_O9cYKQDR 6 112 720 0 14 Dtool_O9cYKQDR 1 4 this 3 734  
100 14 Dtool_O9cYwKBx 4 113 719 0 14 Dtool_O9cYwKBx 2 4 this 3 734  3 out 1 725  
101 14 Dtool_O9cYzVMo 7 114 745 0 14 Dtool_O9cYzVMo 1 6 prefix 1 721  
102 14 Dtool_O9cYWeJc 7 114 745 0 14 Dtool_O9cYWeJc 0 
103 14 Dtool_O9cYcz2s 7 115 745 0 14 Dtool_O9cYcz2s 2 4 this 3 736  6 prefix 1 721  
104 14 Dtool_O9cYJTg6 7 115 745 0 14 Dtool_O9cYJTg6 1 4 this 3 736  
105 14 Dtool_O9cYECpM 6 116 718 0 14 Dtool_O9cYECpM 3 4 this 3 736  8 filename 1 722  13 image_comment 1 721  
106 14 Dtool_O9cYN5lm 6 116 718 0 14 Dtool_O9cYN5lm 2 4 this 3 736  8 filename 1 722  
107 14 Dtool_O9cY__qS 6 117 718 0 14 Dtool_O9cY__qS 2 4 this 3 736  5 image 1 746  
108 14 Dtool_O9cYZZzb 7 118 749 0 14 Dtool_O9cYZZzb 0 
109 14 Dtool_O9cYZ0l9 6 81 750 0 14 Dtool_O9cYZ0l9 1 4 this 3 736  
110 14 Dtool_O9cYGecg 7 82 736 432 14 Dtool_O9cYGecg 1 4 this 3 750  
111 14 Dtool_O9cYlwzo 6 83 727 0 14 Dtool_O9cYlwzo 1 4 this 3 736  
112 14 Dtool_O9cYWozv 7 84 736 432 14 Dtool_O9cYWozv 1 4 this 3 727  
113 14 Dtool_O9cY0P03 7 120 751 468 14 Dtool_O9cY0P03 0 
114 14 Dtool_O9cYOlPt 7 120 751 468 14 Dtool_O9cYOlPt 1 4 copy 1 752  
115 14 Dtool_O9cYLWDE 6 121 751 0 14 Dtool_O9cYLWDE 2 4 this 3 751  4 copy 1 752  
116 14 Dtool_O9cYFGOb 7 123 751 468 14 Dtool_O9cYFGOb 0 
117 14 Dtool_O9cY_xuw 6 124 718 0 14 Dtool_O9cY_xuw 2 4 this 3 752  5 other 1 752  
118 14 Dtool_O9cYiGu_ 6 125 718 0 14 Dtool_O9cYiGu_ 2 4 this 3 752  5 other 1 752  
119 14 Dtool_O9cYfz7q 4 127 719 0 14 Dtool_O9cYfz7q 1 4 this 3 751  
120 14 Dtool_O9cYTXIo 4 128 719 0 14 Dtool_O9cYTXIo 1 4 this 3 751  
121 14 Dtool_O9cYFEQC 6 129 720 0 14 Dtool_O9cYFEQC 1 4 this 3 752  
122 14 Dtool_O9cY5Lag 6 130 718 0 14 Dtool_O9cY5Lag 1 4 this 3 752  
123 14 Dtool_O9cYdgmI 6 131 718 0 14 Dtool_O9cYdgmI 2 4 this 3 752  3 bit 1 720  
124 14 Dtool_O9cYWlX5 6 132 718 0 14 Dtool_O9cYWlX5 1 4 this 3 752  
125 14 Dtool_O9cYx4ZJ 6 133 718 0 14 Dtool_O9cYx4ZJ 1 4 this 3 752  
126 14 Dtool_O9cYrBZu 6 134 718 0 14 Dtool_O9cYrBZu 2 4 this 3 752  4 prop 1 752  
127 14 Dtool_O9cYXX9l 4 135 719 0 14 Dtool_O9cYXX9l 2 4 this 3 751  16 frameBuffer_mode 1 720  
128 14 Dtool_O9cYOUkc 6 136 720 0 14 Dtool_O9cYOUkc 1 4 this 3 752  
129 14 Dtool_O9cYue4p 6 137 718 0 14 Dtool_O9cYue4p 1 4 this 3 752  
130 14 Dtool_O9cYO0YH 4 138 719 0 14 Dtool_O9cYO0YH 1 4 this 3 751  
131 14 Dtool_O9cY4McT 4 139 719 0 14 Dtool_O9cY4McT 2 4 this 3 751  10 depth_bits 1 720  
132 14 Dtool_O9cY6uCK 6 140 720 0 14 Dtool_O9cY6uCK 1 4 this 3 752  
133 14 Dtool_O9cYikWX 6 141 718 0 14 Dtool_O9cYikWX 1 4 this 3 752  
134 14 Dtool_O9cYG8mC 4 142 719 0 14 Dtool_O9cYG8mC 1 4 this 3 751  
135 14 Dtool_O9cYgD26 4 143 719 0 14 Dtool_O9cYgD26 2 4 this 3 751  10 color_bits 1 720  
136 14 Dtool_O9cYp9ex 6 144 720 0 14 Dtool_O9cYp9ex 1 4 this 3 752  
137 14 Dtool_O9cYB7y_ 6 145 718 0 14 Dtool_O9cYB7y_ 1 4 this 3 752  
138 14 Dtool_O9cYCy05 4 146 719 0 14 Dtool_O9cYCy05 1 4 this 3 751  
139 14 Dtool_O9cYjyyk 4 147 719 0 14 Dtool_O9cYjyyk 2 4 this 3 751  10 alpha_bits 1 720  
140 14 Dtool_O9cYYuZb 6 148 720 0 14 Dtool_O9cYYuZb 1 4 this 3 752  
141 14 Dtool_O9cYAUto 6 149 718 0 14 Dtool_O9cYAUto 1 4 this 3 752  
142 14 Dtool_O9cY7UBu 4 150 719 0 14 Dtool_O9cY7UBu 1 4 this 3 751  
143 14 Dtool_O9cYwbci 4 151 719 0 14 Dtool_O9cYwbci 2 4 this 3 751  12 stencil_bits 1 720  
144 14 Dtool_O9cYCuvJ 6 152 720 0 14 Dtool_O9cYCuvJ 1 4 this 3 752  
145 14 Dtool_O9cYqQEX 6 153 718 0 14 Dtool_O9cYqQEX 1 4 this 3 752  
146 14 Dtool_O9cYNwAv 4 154 719 0 14 Dtool_O9cYNwAv 1 4 this 3 751  
147 14 Dtool_O9cY6_qN 4 155 719 0 14 Dtool_O9cY6_qN 2 4 this 3 751  12 multisamples 1 720  
148 14 Dtool_O9cYSH90 6 156 720 0 14 Dtool_O9cYSH90 1 4 this 3 752  
149 14 Dtool_O9cY78QC 6 157 718 0 14 Dtool_O9cY78QC 1 4 this 3 752  
150 14 Dtool_O9cY9kEG 4 158 719 0 14 Dtool_O9cY9kEG 1 4 this 3 751  
151 14 Dtool_O9cYIVH0 4 159 719 0 14 Dtool_O9cYIVH0 2 4 this 3 751  4 naux 1 720  
152 14 Dtool_O9cYi42A 6 160 720 0 14 Dtool_O9cYi42A 1 4 this 3 752  
153 14 Dtool_O9cYV7LO 6 161 718 0 14 Dtool_O9cYV7LO 1 4 this 3 752  
154 14 Dtool_O9cYuJ3Q 4 162 719 0 14 Dtool_O9cYuJ3Q 1 4 this 3 751  
155 14 Dtool_O9cYJ2_Q 4 163 719 0 14 Dtool_O9cYJ2_Q 2 4 this 3 751  4 naux 1 720  
156 14 Dtool_O9cY6m6B 6 164 720 0 14 Dtool_O9cY6m6B 1 4 this 3 752  
157 14 Dtool_O9cYC8OP 6 165 718 0 14 Dtool_O9cYC8OP 1 4 this 3 752  
158 14 Dtool_O9cYV1vZ 4 166 719 0 14 Dtool_O9cYV1vZ 1 4 this 3 751  
159 14 Dtool_O9cYqLrm 4 167 719 0 14 Dtool_O9cYqLrm 2 4 this 3 751  4 naux 1 720  
160 14 Dtool_O9cYFEoX 6 168 720 0 14 Dtool_O9cYFEoX 1 4 this 3 752  
161 14 Dtool_O9cYla8k 6 169 718 0 14 Dtool_O9cYla8k 1 4 this 3 752  
162 14 Dtool_O9cY5NMx 4 170 719 0 14 Dtool_O9cY5NMx 1 4 this 3 751  
163 14 Dtool_O9cYHaxr 4 171 719 0 14 Dtool_O9cYHaxr 2 4 this 3 751  5 other 1 752  
164 14 Dtool_O9cYCzSe 4 172 719 0 14 Dtool_O9cYCzSe 2 4 this 3 752  3 out 1 725  
165 14 Dtool_O9cYQt0n 6 175 738 0 14 Dtool_O9cYQt0n 1 4 this 3 754  
166 14 Dtool_O9cYAajD 7 176 749 0 14 Dtool_O9cYAajD 0 
167 14 Dtool_O9cYnM8A 6 180 718 0 14 Dtool_O9cYnM8A 1 4 this 3 756  
168 14 Dtool_O9cYpKTv 6 181 720 0 14 Dtool_O9cYpKTv 1 4 this 3 756  
169 14 Dtool_O9cYcDZ_ 6 182 718 0 14 Dtool_O9cYcDZ_ 2 4 this 3 756  5 flags 1 720  
170 14 Dtool_O9cYYv10 6 183 720 0 14 Dtool_O9cYYv10 1 4 this 3 756  
171 14 Dtool_O9cYrAPC 6 184 720 0 14 Dtool_O9cYrAPC 1 4 this 3 756  
172 14 Dtool_O9cYheCd 6 185 721 0 14 Dtool_O9cYheCd 1 4 this 3 756  
173 14 Dtool_O9cYkM1K 7 186 749 0 14 Dtool_O9cYkM1K 0 
174 14 Dtool_O9cYwJOi 7 188 760 538 14 Dtool_O9cYwJOi 1 4 copy 1 758  
175 14 Dtool_O9cYtG_c 7 188 760 538 14 Dtool_O9cYtG_c 1 5 model 1 721  
176 14 Dtool_O9cYPBJ_ 7 188 760 538 14 Dtool_O9cYPBJ_ 0 
177 14 Dtool_O9cYGZxc 6 189 760 0 14 Dtool_O9cYGZxc 2 4 this 3 760  4 copy 1 758  
178 14 Dtool_O9cY7c0w 6 190 721 0 14 Dtool_O9cY7c0w 1 4 this 3 758  
179 14 Dtool_O9cY8GWk 6 191 721 0 14 Dtool_O9cY8GWk 1 4 this 3 758  
180 14 Dtool_O9cYMOJd 6 192 720 0 14 Dtool_O9cYMOJd 1 4 this 3 758  
181 14 Dtool_O9cYlbag 6 193 721 0 14 Dtool_O9cYlbag 1 4 this 3 758  
182 14 Dtool_O9cY3ENZ 6 194 720 0 14 Dtool_O9cY3ENZ 1 4 this 3 758  
183 14 Dtool_O9cYzVRl 6 195 718 0 14 Dtool_O9cYzVRl 1 4 this 3 758  
184 14 Dtool_O9cYysdw 6 196 718 0 14 Dtool_O9cYysdw 1 4 this 3 758  
185 14 Dtool_O9cYVNCv 6 197 718 0 14 Dtool_O9cYVNCv 1 4 this 3 758  
186 14 Dtool_O9cYolSI 4 198 719 0 14 Dtool_O9cYolSI 2 4 this 3 758  3 out 1 725  
187 14 Dtool_O9cYhhed 4 202 719 0 14 Dtool_O9cYhhed 1 4 this 3 761  
188 14 Dtool_O9cYNhtg 6 203 720 0 14 Dtool_O9cYNhtg 1 4 this 3 761  
189 14 Dtool_O9cYtq2Y 6 204 720 0 14 Dtool_O9cYtq2Y 1 4 this 3 761  
190 14 Dtool_O9cYbu1d 6 205 720 0 14 Dtool_O9cYbu1d 1 4 this 3 761  
191 14 Dtool_O9cYvg3_ 6 206 720 0 14 Dtool_O9cYvg3_ 1 4 this 3 761  
192 14 Dtool_O9cY41Tn 4 207 719 0 14 Dtool_O9cY41Tn 2 4 this 3 761  6 active 1 718  
193 14 Dtool_O9cYWMEv 6 208 718 0 14 Dtool_O9cYWMEv 1 4 this 3 762  
194 14 Dtool_O9cYBs7Q 6 209 718 0 14 Dtool_O9cYBs7Q 1 4 this 3 762  
195 14 Dtool_O9cYqmCi 6 210 718 0 14 Dtool_O9cYqmCi 1 4 this 3 762  
196 14 Dtool_O9cYgIrz 6 211 752 0 14 Dtool_O9cYgIrz 1 4 this 3 762  
197 14 Dtool_O9cYXe8K 7 212 738 0 14 Dtool_O9cYXe8K 1 4 this 3 762  
198 14 Dtool_O9cYG5DS 6 213 764 0 14 Dtool_O9cYG5DS 1 4 this 3 762  
199 14 Dtool_O9cYax_q 6 214 758 0 14 Dtool_O9cYax_q 1 4 this 3 762  
200 14 Dtool_O9cYwhOw 6 215 718 0 14 Dtool_O9cYwhOw 1 4 this 3 762  
201 14 Dtool_O9cYt8RM 6 216 720 0 14 Dtool_O9cYt8RM 1 4 this 3 762  
202 14 Dtool_O9cYbaz_ 6 217 720 0 14 Dtool_O9cYbaz_ 1 4 this 3 762  
203 14 Dtool_O9cYuf8m 6 218 720 0 14 Dtool_O9cYuf8m 1 4 this 3 762  
204 14 Dtool_O9cYbv4K 6 219 720 0 14 Dtool_O9cYbv4K 1 4 this 3 762  
205 14 Dtool_O9cYN0H1 6 220 720 0 14 Dtool_O9cYN0H1 1 4 this 3 762  
206 14 Dtool_O9cYCoqA 6 221 720 0 14 Dtool_O9cYCoqA 1 4 this 3 762  
207 14 Dtool_O9cY4MTA 6 222 718 0 14 Dtool_O9cY4MTA 1 4 this 3 762  
208 14 Dtool_O9cY8l6n 6 223 718 0 14 Dtool_O9cY8l6n 1 4 this 3 762  
209 14 Dtool_O9cYtTve 6 224 718 0 14 Dtool_O9cYtTve 1 4 this 3 762  
210 14 Dtool_O9cY363k 6 225 718 0 14 Dtool_O9cY363k 1 4 this 3 762  
211 14 Dtool_O9cYLBxF 6 226 718 0 14 Dtool_O9cYLBxF 1 4 this 3 762  
212 14 Dtool_O9cYb7rC 6 227 718 0 14 Dtool_O9cYb7rC 1 4 this 3 762  
213 14 Dtool_O9cYmk5Z 6 228 718 0 14 Dtool_O9cYmk5Z 1 4 this 3 762  
214 14 Dtool_O9cYGXdd 6 229 718 0 14 Dtool_O9cYGXdd 2 4 this 3 762  11 compression 1 765  
215 14 Dtool_O9cY1JaQ 6 230 720 0 14 Dtool_O9cY1JaQ 1 4 this 3 762  
216 14 Dtool_O9cYj53l 6 231 720 0 14 Dtool_O9cYj53l 1 4 this 3 762  
217 14 Dtool_O9cYWirW 6 232 720 0 14 Dtool_O9cYWirW 1 4 this 3 762  
218 14 Dtool_O9cYykA4 6 233 720 0 14 Dtool_O9cYykA4 1 4 this 3 762  
219 14 Dtool_O9cY4Ta6 6 234 718 0 14 Dtool_O9cY4Ta6 1 4 this 3 762  
220 14 Dtool_O9cY9xp9 6 235 718 0 14 Dtool_O9cY9xp9 1 4 this 3 762  
221 14 Dtool_O9cYQbph 6 236 718 0 14 Dtool_O9cYQbph 1 4 this 3 762  
222 14 Dtool_O9cYWzUj 6 237 718 0 14 Dtool_O9cYWzUj 1 4 this 3 762  
223 14 Dtool_O9cYlOjC 6 238 718 0 14 Dtool_O9cYlOjC 1 4 this 3 762  
224 14 Dtool_O9cY9nGe 6 239 718 0 14 Dtool_O9cY9nGe 1 4 this 3 762  
225 14 Dtool_O9cY11LA 6 240 718 0 14 Dtool_O9cY11LA 1 4 this 3 762  
226 14 Dtool_O9cYnlK4 4 241 719 0 14 Dtool_O9cYnlK4 2 4 this 3 761  2 cs 1 767  
227 14 Dtool_O9cYU3J8 6 242 767 0 14 Dtool_O9cYU3J8 1 4 this 3 762  
228 14 Dtool_O9cYYmqN 4 243 719 0 14 Dtool_O9cYYmqN 1 4 this 3 761  
229 14 Dtool_O9cY9_UD 7 244 761 0 14 Dtool_O9cY9_UD 0 
230 14 Dtool_O9cYX9JS 7 245 749 0 14 Dtool_O9cYX9JS 0 
231 14 Dtool_O9cY6R3_ 7 256 761 0 14 Dtool_O9cY6R3_ 1 4 this 3 768  
232 14 Dtool_O9cYRmhe 7 257 738 0 14 Dtool_O9cYRmhe 1 4 this 3 768  
233 14 Dtool_O9cYhafm 6 258 721 0 14 Dtool_O9cYhafm 1 4 this 3 768  
234 14 Dtool_O9cYZzOT 6 259 720 0 14 Dtool_O9cYZzOT 1 4 this 3 768  
235 14 Dtool_O9cYL5u4 6 260 718 0 14 Dtool_O9cYL5u4 1 4 this 3 768  
236 14 Dtool_O9cYOT2F 7 261 770 0 14 Dtool_O9cYOT2F 2 4 this 3 768  1 i 1 720  
237 14 Dtool_O9cYjbtr 7 261 770 0 14 Dtool_O9cYjbtr 1 4 this 3 768  
238 14 Dtool_O9cYr9lk 6 262 708 0 14 Dtool_O9cYr9lk 2 4 this 3 768  1 i 1 720  
239 14 Dtool_O9cYtRfb 6 262 708 0 14 Dtool_O9cYtRfb 1 4 this 3 768  
240 14 Dtool_O9cYtK3h 6 263 707 0 14 Dtool_O9cYtK3h 2 4 this 3 768  1 i 1 720  
241 14 Dtool_O9cYeXTd 6 263 707 0 14 Dtool_O9cYeXTd 1 4 this 3 768  
242 14 Dtool_O9cYy_19 4 264 719 0 14 Dtool_O9cYy_19 1 4 this 3 737  
243 14 Dtool_O9cYrbrM 4 265 719 0 14 Dtool_O9cYrbrM 4 4 this 3 737  3 tex 1 770  4 mode 1 707  8 bitplane 1 708  
244 14 Dtool_O9cYyxSR 4 265 719 0 14 Dtool_O9cYyxSR 3 4 this 3 737  3 tex 1 770  4 mode 1 707  
245 14 Dtool_O9cYcdjE 4 266 719 0 14 Dtool_O9cYcdjE 4 4 this 3 737  3 tex 1 770  10 allow_bind 1 718  6 to_ram 1 718  
246 14 Dtool_O9cYpVEG 6 267 720 0 14 Dtool_O9cYpVEG 1 4 this 3 768  
247 14 Dtool_O9cY5zZG 6 268 720 0 14 Dtool_O9cY5zZG 1 4 this 3 768  
248 14 Dtool_O9cYqgyg 6 269 718 0 14 Dtool_O9cYqgyg 1 4 this 3 768  
249 14 Dtool_O9cYewNA 6 270 718 0 14 Dtool_O9cYewNA 1 4 this 3 768  
250 14 Dtool_O9cYKShL 4 271 719 0 14 Dtool_O9cYKShL 2 4 this 3 737  6 active 1 718  
251 14 Dtool_O9cYCPRe 6 272 718 0 14 Dtool_O9cYCPRe 1 4 this 3 768  
252 14 Dtool_O9cYHoke 4 273 719 0 14 Dtool_O9cYHoke 2 4 this 3 737  8 one_shot 1 718  
253 14 Dtool_O9cY2vFO 6 274 718 0 14 Dtool_O9cY2vFO 1 4 this 3 768  
254 14 Dtool_O9cYNoPm 4 275 719 0 14 Dtool_O9cYNoPm 2 4 this 3 737  8 inverted 1 718  
255 14 Dtool_O9cYx4vV 6 276 718 0 14 Dtool_O9cYx4vV 1 4 this 3 768  
256 14 Dtool_O9cYPGYQ 4 277 719 0 14 Dtool_O9cYPGYQ 4 4 this 3 737  15 red_blue_stereo 1 718  19 left_eye_color_mask 1 771  20 right_eye_color_mask 1 771  
257 14 Dtool_O9cYgl0N 6 278 718 0 14 Dtool_O9cYgl0N 1 4 this 3 768  
258 14 Dtool_O9cYhaUJ 6 279 771 0 14 Dtool_O9cYhaUJ 1 4 this 3 768  
259 14 Dtool_O9cYoNZy 6 280 771 0 14 Dtool_O9cYoNZy 1 4 this 3 768  
260 14 Dtool_O9cYv3aE 6 281 751 0 14 Dtool_O9cYv3aE 1 4 this 3 737  
261 14 Dtool_O9cYp1Tf 6 282 718 0 14 Dtool_O9cYp1Tf 1 4 this 3 768  
262 14 Dtool_O9cYjxx5 4 283 719 0 14 Dtool_O9cYjxx5 1 4 this 3 737  
263 14 Dtool_O9cYsJD_ 6 284 718 0 14 Dtool_O9cYsJD_ 1 4 this 3 768  
264 14 Dtool_O9cYQqjF 4 285 719 0 14 Dtool_O9cYQqjF 2 4 this 3 737  4 sort 1 720  
265 14 Dtool_O9cYcE4c 6 286 720 0 14 Dtool_O9cYcE4c 1 4 this 3 768  
266 14 Dtool_O9cYys0m 4 287 719 0 14 Dtool_O9cYys0m 1 4 this 3 737  
267 14 Dtool_O9cYDSih 7 288 736 432 14 Dtool_O9cYDSih 1 4 this 3 737  
268 14 Dtool_O9cYefSE 7 288 736 432 14 Dtool_O9cYefSE 5 4 this 3 737  1 l 1 733  1 r 1 733  1 b 1 733  1 t 1 733  
269 14 Dtool_O9cYyMVJ 6 289 718 0 14 Dtool_O9cYyMVJ 2 4 this 3 737  14 display_region 1 736  
270 14 Dtool_O9cYVlIl 4 290 719 0 14 Dtool_O9cYVlIl 1 4 this 3 737  
271 14 Dtool_O9cYHxxm 6 291 720 0 14 Dtool_O9cYHxxm 1 4 this 3 768  
272 14 Dtool_O9cY1bhW 7 292 736 432 14 Dtool_O9cY1bhW 2 4 this 3 768  1 n 1 720  
273 14 Dtool_O9cY_TMd 6 293 720 0 14 Dtool_O9cY_TMd 1 4 this 3 768  
274 14 Dtool_O9cYjI4S 7 294 736 432 14 Dtool_O9cYjI4S 2 4 this 3 768  1 n 1 720  
275 14 Dtool_O9cYoo09 7 295 737 587 14 Dtool_O9cYoo09 6 4 this 3 737  4 name 1 721  6 x_size 1 720  6 y_size 1 720  3 tex 1 770  6 to_ram 1 718  
276 14 Dtool_O9cY54eM 7 295 737 587 14 Dtool_O9cY54eM 5 4 this 3 737  4 name 1 721  6 x_size 1 720  6 y_size 1 720  3 tex 1 770  
277 14 Dtool_O9cY6cMF 7 295 737 587 14 Dtool_O9cY6cMF 4 4 this 3 737  4 name 1 721  6 x_size 1 720  6 y_size 1 720  
278 14 Dtool_O9cYA8GH 7 296 737 587 14 Dtool_O9cYA8GH 6 4 this 3 737  4 name 1 721  4 size 1 720  10 camera_rig 1 742  11 camera_mask 1 772  6 to_ram 1 718  
279 14 Dtool_O9cYEFcu 7 296 737 587 14 Dtool_O9cYEFcu 5 4 this 3 737  4 name 1 721  4 size 1 720  10 camera_rig 1 742  11 camera_mask 1 772  
280 14 Dtool_O9cYVD6z 7 296 737 587 14 Dtool_O9cYVD6z 4 4 this 3 737  4 name 1 721  4 size 1 720  10 camera_rig 1 742  
281 14 Dtool_O9cYeFZK 7 297 745 0 14 Dtool_O9cYeFZK 1 6 prefix 1 721  
282 14 Dtool_O9cYPz_F 7 297 745 0 14 Dtool_O9cYPz_F 0 
283 14 Dtool_O9cYbMge 7 298 745 0 14 Dtool_O9cYbMge 2 4 this 3 737  6 prefix 1 721  
284 14 Dtool_O9cY8zcS 7 298 745 0 14 Dtool_O9cY8zcS 1 4 this 3 737  
285 14 Dtool_O9cYrjOY 6 299 718 0 14 Dtool_O9cYrjOY 3 4 this 3 737  8 filename 1 722  13 image_comment 1 721  
286 14 Dtool_O9cYoVLU 6 299 718 0 14 Dtool_O9cYoVLU 2 4 this 3 737  8 filename 1 722  
287 14 Dtool_O9cYIsHW 6 300 718 0 14 Dtool_O9cYIsHW 2 4 this 3 737  5 image 1 746  
288 14 Dtool_O9cYUNk3 7 301 742 0 14 Dtool_O9cYUNk3 1 4 this 3 737  
289 14 Dtool_O9cYg2P6 7 302 749 0 14 Dtool_O9cYg2P6 0 
290 14 Dtool_O9cY58UN 7 248 774 0 14 Dtool_O9cY58UN 1 4 this 3 737  
291 14 Dtool_O9cYKyii 7 249 737 587 14 Dtool_O9cYKyii 1 4 this 3 774  
292 14 Dtool_O9cYpLTb 6 250 727 0 14 Dtool_O9cYpLTb 1 4 this 3 737  
293 14 Dtool_O9cYuJDd 7 251 737 587 14 Dtool_O9cYuJDd 1 4 this 3 727  
294 14 Dtool_O9cYJuQB 7 304 749 0 14 Dtool_O9cYJuQB 0 
295 14 Dtool_O9cYhbmW 7 306 715 355 14 Dtool_O9cYhbmW 1 4 this 3 775  
296 14 Dtool_O9cY0Htu 7 307 715 355 14 Dtool_O9cY0Htu 1 4 this 3 775  
297 14 Dtool_O9cYYZ4X 4 308 719 0 14 Dtool_O9cYYZ4X 1 4 this 3 777  
298 14 Dtool_O9cYcXSI 7 309 715 355 14 Dtool_O9cYcXSI 1 4 this 3 775  
299 14 Dtool_O9cYGdcu 4 310 719 0 14 Dtool_O9cYGdcu 2 4 this 3 777  20 requested_properties 1 716  
300 14 Dtool_O9cYu9q8 6 311 718 0 14 Dtool_O9cYu9q8 1 4 this 3 775  
301 14 Dtool_O9cYJaEs 6 312 718 0 14 Dtool_O9cYJaEs 1 4 this 3 775  
302 14 Dtool_O9cYGNv6 4 313 719 0 14 Dtool_O9cYGNv6 2 4 this 3 777  12 window_event 1 721  
303 14 Dtool_O9cY_R55 6 314 721 0 14 Dtool_O9cY_R55 1 4 this 3 775  
304 14 Dtool_O9cYuHKx 4 315 719 0 14 Dtool_O9cYuHKx 2 4 this 3 777  19 close_request_event 1 721  
305 14 Dtool_O9cYg_ue 6 316 721 0 14 Dtool_O9cYg_ue 1 4 this 3 775  
306 14 Dtool_O9cYWc_C 6 317 720 0 14 Dtool_O9cYWc_C 1 4 this 3 775  
307 14 Dtool_O9cYqhfW 6 318 721 0 14 Dtool_O9cYqhfW 2 4 this 3 775  6 device 1 720  
308 14 Dtool_O9cYYErM 6 319 718 0 14 Dtool_O9cYYErM 2 4 this 3 775  6 device 1 720  
309 14 Dtool_O9cYeEpH 6 320 718 0 14 Dtool_O9cYeEpH 2 4 this 3 775  6 device 1 720  
310 14 Dtool_O9cYxqr_ 7 321 779 0 14 Dtool_O9cYxqr_ 2 4 this 3 775  6 device 1 720  
311 14 Dtool_O9cYPl6f 6 322 718 0 14 Dtool_O9cYPl6f 4 4 this 3 777  6 device 1 720  1 x 1 720  1 y 1 720  
312 14 Dtool_O9cY_nZW 4 323 719 0 14 Dtool_O9cY_nZW 1 4 this 3 777  
313 14 Dtool_O9cYjGVA 7 324 749 0 14 Dtool_O9cYjGVA 0 
314 14 Dtool_O9cYGcAr 7 326 764 656 14 Dtool_O9cYGcAr 1 8 pipeline 1 780  
315 14 Dtool_O9cY3Xr_ 7 326 764 656 14 Dtool_O9cY3Xr_ 0 
316 14 Dtool_O9cYhj_X 4 328 719 0 14 Dtool_O9cYhj_X 2 4 this 3 764  10 properties 1 752  
317 14 Dtool_O9cYTADD 7 329 751 468 14 Dtool_O9cYTADD 1 4 this 3 782  
318 14 Dtool_O9cYkzZy 4 330 719 0 14 Dtool_O9cYkzZy 2 4 this 3 764  15 threading_model 1 758  
319 14 Dtool_O9cY_NLg 7 331 760 538 14 Dtool_O9cY_NLg 1 4 this 3 782  
320 14 Dtool_O9cYpnHT 4 332 719 0 14 Dtool_O9cYpnHT 2 4 this 3 764  9 auto_flip 1 718  
321 14 Dtool_O9cYdDTb 6 333 718 0 14 Dtool_O9cYdDTb 1 4 this 3 782  
322 14 Dtool_O9cY5bdZ 4 334 719 0 14 Dtool_O9cY5bdZ 2 4 this 3 764  5 value 1 718  
323 14 Dtool_O9cYsi85 6 335 718 0 14 Dtool_O9cYsi85 1 4 this 3 782  
324 14 Dtool_O9cYuwfJ 7 336 761 0 14 Dtool_O9cYuwfJ 2 4 this 3 764  4 pipe 1 738  
325 14 Dtool_O9cY01oq 7 336 761 0 14 Dtool_O9cY01oq 4 4 this 3 764  4 pipe 1 738  10 properties 1 752  10 share_with 1 761  
326 14 Dtool_O9cYMY4C 7 336 761 0 14 Dtool_O9cYMY4C 3 4 this 3 764  4 pipe 1 738  10 properties 1 752  
327 14 Dtool_O9cYePio 7 337 737 587 14 Dtool_O9cYePio 10 4 this 3 764  4 pipe 1 738  4 name 1 721  4 sort 1 720  4 prop 1 752  6 x_size 1 720  6 y_size 1 720  5 flags 1 720  3 gsg 1 761  4 host 1 737  
328 14 Dtool_O9cYCPXj 7 337 737 587 14 Dtool_O9cYCPXj 9 4 this 3 764  4 pipe 1 738  4 name 1 721  4 sort 1 720  4 prop 1 752  6 x_size 1 720  6 y_size 1 720  5 flags 1 720  3 gsg 1 761  
329 14 Dtool_O9cY0UmD 7 337 737 587 14 Dtool_O9cY0UmD 8 4 this 3 764  4 pipe 1 738  4 name 1 721  4 sort 1 720  4 prop 1 752  6 x_size 1 720  6 y_size 1 720  5 flags 1 720  
330 14 Dtool_O9cYLYkZ 7 338 777 587 14 Dtool_O9cYLYkZ 4 4 this 3 764  3 gsg 1 761  4 name 1 721  4 sort 1 720  
331 14 Dtool_O9cYG7HJ 7 339 737 587 14 Dtool_O9cYG7HJ 6 4 this 3 764  3 gsg 1 761  4 name 1 721  4 sort 1 720  6 x_size 1 720  6 y_size 1 720  
332 14 Dtool_O9cYs8x6 7 340 737 587 14 Dtool_O9cYs8x6 6 4 this 3 764  4 host 1 737  4 name 1 721  4 sort 1 720  6 x_size 1 720  6 y_size 1 720  
333 14 Dtool_O9cYQEjj 6 341 718 0 14 Dtool_O9cYQEjj 2 4 this 3 764  6 window 1 737  
334 14 Dtool_O9cYbizP 4 342 719 0 14 Dtool_O9cYbizP 1 4 this 3 764  
335 14 Dtool_O9cY7tzD 4 343 719 0 14 Dtool_O9cY7tzD 2 4 this 3 764  9 swapchain 1 718  
336 14 Dtool_O9cYqWta 6 344 718 0 14 Dtool_O9cYqWta 1 4 this 3 782  
337 14 Dtool_O9cYxJBp 6 345 720 0 14 Dtool_O9cYxJBp 1 4 this 3 782  
338 14 Dtool_O9cYLl7l 7 346 737 587 14 Dtool_O9cYLl7l 2 4 this 3 782  1 n 1 720  
339 14 Dtool_O9cY4GAK 4 347 719 0 14 Dtool_O9cY4GAK 1 4 this 3 764  
340 14 Dtool_O9cYfeD_ 4 348 719 0 14 Dtool_O9cYfeD_ 1 4 this 3 764  
341 14 Dtool_O9cYNMb_ 4 349 719 0 14 Dtool_O9cYNMb_ 1 4 this 3 764  
342 14 Dtool_O9cYbWRO 4 350 719 0 14 Dtool_O9cYbWRO 1 4 this 3 764  
343 14 Dtool_O9cY8ADE 6 351 718 0 14 Dtool_O9cY8ADE 3 4 this 3 764  3 tex 1 770  3 gsg 1 761  
344 14 Dtool_O9cYkGJV 6 353 720 0 14 Dtool_O9cYkGJV 1 4 this 3 784  
345 14 Dtool_O9cYdWon 7 354 749 0 14 Dtool_O9cYdWon 2 4 this 3 784  1 n 1 720  
346 14 Dtool_O9cYKhch 4 355 719 0 14 Dtool_O9cYKhch 1 4 this 3 784  
347 14 Dtool_O9cYgtWV 7 356 738 0 14 Dtool_O9cYgtWV 2 4 this 3 786  4 type 1 749  
348 14 Dtool_O9cYJlGM 7 357 738 0 14 Dtool_O9cYJlGM 1 4 this 3 786  
349 14 Dtool_O9cYtQ2r 6 358 720 0 14 Dtool_O9cYtQ2r 1 4 this 3 784  
350 14 Dtool_O9cY4_4n 4 359 719 0 14 Dtool_O9cY4_4n 1 4 this 3 786  
351 14 Dtool_O9cYa86m 6 360 786 0 14 Dtool_O9cYa86m 0 
352 14 Dtool_O9cYKj4L 7 362 749 0 14 Dtool_O9cYKj4L 0 
98
690 16 WindowProperties 26625 16 WindowProperties 16 WindowProperties 0 0 0 1 353 355 0 62 354 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 0 0 0 1 691 436
////////////////////////////////////////////////////////////////////
//       Class : WindowProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics window before we open
//               it.  This also serves to hold the current properties
//               for a window after it has been opened.
////////////////////////////////////////////////////////////////////

691 6 ZOrder 794624 24 WindowProperties::ZOrder 24 WindowProperties::ZOrder 690 0 0 0 0 0 0 0 0 3 8 Z_bottom 26 WindowProperties::Z_bottom 0 8 Z_normal 26 WindowProperties::Z_normal 1 5 Z_top 23 WindowProperties::Z_top 2 0 0

692 14 DrawableRegion 26625 14 DrawableRegion 14 DrawableRegion 0 0 0 0 417 0 10 418 419 420 421 422 423 424 425 426 427 0 0 0 0 655
////////////////////////////////////////////////////////////////////
//       Class : DrawableRegion
// Description : This is a base class for GraphicsWindow (actually,
//               GraphicsOutput) and DisplayRegion, both of which are
//               conceptually rectangular regions into which drawing
//               commands may be issued.  Sometimes you want to deal
//               with a single display region, and sometimes you want
//               to deal with the whole window at once, particularly
//               for issuing clear commands and capturing screenshots.
////////////////////////////////////////////////////////////////////

693 13 DisplayRegion 26625 13 DisplayRegion 13 DisplayRegion 0 0 0 0 432 0 33 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 0 2 3 694 428 429 3 692 430 431 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

694 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

695 21 FrameBufferProperties 26625 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 1 466 468 0 50 467 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 0 0 0 1 696 346
////////////////////////////////////////////////////////////////////
//       Class : FrameBufferProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics frameBuffer before we
//               create a GSG.
////////////////////////////////////////////////////////////////////

696 15 FrameBufferMode 794624 38 FrameBufferProperties::FrameBufferMode 38 FrameBufferProperties::FrameBufferMode 695 0 0 0 0 0 0 0 0 15 6 FM_rgb 29 FrameBufferProperties::FM_rgb 0 8 FM_index 31 FrameBufferProperties::FM_index 1 16 FM_single_buffer 39 FrameBufferProperties::FM_single_buffer 0 16 FM_double_buffer 39 FrameBufferProperties::FM_double_buffer 2 16 FM_triple_buffer 39 FrameBufferProperties::FM_triple_buffer 4 9 FM_buffer 32 FrameBufferProperties::FM_buffer 6 8 FM_accum 31 FrameBufferProperties::FM_accum 8 8 FM_alpha 31 FrameBufferProperties::FM_alpha 16 7 FM_rgba 30 FrameBufferProperties::FM_rgba 16 8 FM_depth 31 FrameBufferProperties::FM_depth 32 10 FM_stencil 33 FrameBufferProperties::FM_stencil 64 14 FM_multisample 37 FrameBufferProperties::FM_multisample 128 9 FM_stereo 32 FrameBufferProperties::FM_stereo 256 11 FM_software 34 FrameBufferProperties::FM_software 512 11 FM_hardware 34 FrameBufferProperties::FM_hardware 1024 0 0

697 14 GraphicsDevice 75777 14 GraphicsDevice 14 GraphicsDevice 0 0 0 0 0 0 2 518 519 0 1 0 698 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : GraphicsDevice
// Description : An abstract device object that is part of Graphics
//               Pipe. This device is set to NULL for OpenGL. But 
//               DirectX uses it to take control of multiple windows
//               under single device or multiple devices (i.e. more
//               than one adapters in the machine).   
//
////////////////////////////////////////////////////////////////////

698 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

699 12 GraphicsPipe 75777 12 GraphicsPipe 12 GraphicsPipe 0 0 0 0 0 0 7 520 521 522 523 524 525 526 0 1 0 698 0 0 0 2 700 701 1126
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipe
// Description : An object to create GraphicsOutputs that share a
//               particular 3-D API.  Normally, there will only be one
//               GraphicsPipe in an application, although it is
//               possible to have multiple of these at once if there
//               are multiple different API's available in the same
//               machine.
//
//               Often, the GraphicsPipe corresponds to a physical
//               output device, hence the term "pipe", but this is not
//               necessarily the case.
//
//               The GraphicsPipe is used by the GraphicsEngine object
//               to create and destroy windows; it keeps ownership of
//               the windows it creates.
//
//               M. Asad added new/interim functionality where GraphicsPipe
//               now contains a device interface to directx/opengl which
//               will be used to handle multiple windows from same device.
//
////////////////////////////////////////////////////////////////////

700 11 OutputTypes 794624 25 GraphicsPipe::OutputTypes 25 GraphicsPipe::OutputTypes 699 0 0 0 0 0 0 0 0 4 9 OT_window 23 GraphicsPipe::OT_window 1 20 OT_fullscreen_window 34 GraphicsPipe::OT_fullscreen_window 2 9 OT_buffer 23 GraphicsPipe::OT_buffer 4 17 OT_texture_buffer 31 GraphicsPipe::OT_texture_buffer 8 0 0

701 19 BufferCreationFlags 794624 33 GraphicsPipe::BufferCreationFlags 33 GraphicsPipe::BufferCreationFlags 699 0 0 0 0 0 0 0 0 10 18 BF_refuse_parasite 32 GraphicsPipe::BF_refuse_parasite 1 19 BF_require_parasite 33 GraphicsPipe::BF_require_parasite 2 16 BF_refuse_window 30 GraphicsPipe::BF_refuse_window 4 17 BF_require_window 31 GraphicsPipe::BF_require_window 8 12 BF_share_gsg 26 GraphicsPipe::BF_share_gsg 16 17 BF_share_textures 31 GraphicsPipe::BF_share_textures 32 17 BF_can_bind_color 31 GraphicsPipe::BF_can_bind_color 64 17 BF_can_bind_every 31 GraphicsPipe::BF_can_bind_every 128 18 BF_size_track_host 32 GraphicsPipe::BF_size_track_host 256 17 BF_rtt_cumulative 31 GraphicsPipe::BF_rtt_cumulative 512 0 0

702 22 GraphicsThreadingModel 141313 22 GraphicsThreadingModel 22 GraphicsThreadingModel 0 0 0 1 527 538 0 10 528 529 530 531 532 533 534 535 536 537 0 0 0 0 313
////////////////////////////////////////////////////////////////////
//       Class : GraphicsThreadingModel
// Description : This represents the user's specification of how a
//               particular frame is handled by the various threads.
////////////////////////////////////////////////////////////////////

703 21 GraphicsStateGuardian 75777 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 44 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 0 1 0 704 0 0 0 0 564
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardian
// Description : Encapsulates all the communication with a particular
//               instance of a given rendering backend.  Tries to
//               guarantee that redundant state-change requests are
//               not issued (hence "state guardian").
//
//               There will be one of these objects for each different
//               graphics context active in the system.
////////////////////////////////////////////////////////////////////

704 25 GraphicsStateGuardianBase 2049 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

705 14 GraphicsOutput 26625 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 587 0 47 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 0 2 3 706 583 584 3 692 585 586 0 3 707 708 709 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

706 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

707 17 RenderTextureMode 794624 33 GraphicsOutput::RenderTextureMode 33 GraphicsOutput::RenderTextureMode 705 0 0 0 0 0 0 0 0 6 8 RTM_none 24 GraphicsOutput::RTM_none 0 16 RTM_bind_or_copy 32 GraphicsOutput::RTM_bind_or_copy 1 16 RTM_copy_texture 32 GraphicsOutput::RTM_copy_texture 2 12 RTM_copy_ram 28 GraphicsOutput::RTM_copy_ram 3 26 RTM_triggered_copy_texture 42 GraphicsOutput::RTM_triggered_copy_texture 4 22 RTM_triggered_copy_ram 38 GraphicsOutput::RTM_triggered_copy_ram 5 0 0

708 18 RenderTexturePlane 794624 34 GraphicsOutput::RenderTexturePlane 34 GraphicsOutput::RenderTexturePlane 705 0 0 0 0 0 0 0 0 16 9 RTP_color 25 GraphicsOutput::RTP_color 0 9 RTP_depth 25 GraphicsOutput::RTP_depth 1 11 RTP_stencil 27 GraphicsOutput::RTP_stencil 2 14 RTP_aux_rgba_0 30 GraphicsOutput::RTP_aux_rgba_0 3 14 RTP_aux_rgba_1 30 GraphicsOutput::RTP_aux_rgba_1 4 14 RTP_aux_rgba_2 30 GraphicsOutput::RTP_aux_rgba_2 5 14 RTP_aux_rgba_3 30 GraphicsOutput::RTP_aux_rgba_3 6 15 RTP_aux_hrgba_0 31 GraphicsOutput::RTP_aux_hrgba_0 7 15 RTP_aux_hrgba_1 31 GraphicsOutput::RTP_aux_hrgba_1 8 15 RTP_aux_hrgba_2 31 GraphicsOutput::RTP_aux_hrgba_2 9 15 RTP_aux_hrgba_3 31 GraphicsOutput::RTP_aux_hrgba_3 10 15 RTP_aux_float_0 31 GraphicsOutput::RTP_aux_float_0 11 15 RTP_aux_float_1 31 GraphicsOutput::RTP_aux_float_1 12 15 RTP_aux_float_2 31 GraphicsOutput::RTP_aux_float_2 13 15 RTP_aux_float_3 31 GraphicsOutput::RTP_aux_float_3 14 9 RTP_COUNT 25 GraphicsOutput::RTP_COUNT 15 0 168
// It seems awkward to have this type, and also
// RenderBuffer::Type.  However, the fact that RenderBuffer::Type
// is a bitmask makes it awfully awkward to work with.

709 9 FrameMode 794624 25 GraphicsOutput::FrameMode 25 GraphicsOutput::FrameMode 705 0 0 0 0 0 0 0 0 3 9 FM_render 25 GraphicsOutput::FM_render 0 11 FM_parasite 27 GraphicsOutput::FM_parasite 1 10 FM_refresh 26 GraphicsOutput::FM_refresh 2 0 56
// There are many reasons to call begin_frame/end_frame.

710 14 GraphicsBuffer 75777 14 GraphicsBuffer 14 GraphicsBuffer 0 0 0 0 587 0 1 635 0 1 0 705 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : GraphicsBuffer
// Description : An offscreen buffer for rendering into.  This is
//               similar in function to a GraphicsWindow, except that
//               the output is not visible to the user.
////////////////////////////////////////////////////////////////////

711 14 GraphicsWindow 75777 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 587 0 19 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 0 1 0 705 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindow
// Description : A window, fullscreen or on a desktop, into which a
//               graphics device sends its output for interactive
//               display.
////////////////////////////////////////////////////////////////////

712 14 GraphicsEngine 26625 14 GraphicsEngine 14 GraphicsEngine 0 0 0 1 655 656 0 24 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 0 0 0 0 823
////////////////////////////////////////////////////////////////////
//       Class : GraphicsEngine
// Description : This class is the main interface to controlling the
//               render process.  There is typically only one
//               GraphicsEngine in an application, and it synchronizes
//               rendering to all all of the active windows; although
//               it is possible to have multiple GraphicsEngine
//               objects if multiple synchronicity groups are
//               required.
//
//               The GraphicsEngine is responsible for managing the
//               various cull and draw threads.  The application
//               simply calls engine->render_frame() and considers it
//               done.
////////////////////////////////////////////////////////////////////

713 21 GraphicsPipeSelection 43009 21 GraphicsPipeSelection 21 GraphicsPipeSelection 0 0 0 0 0 0 8 681 682 683 684 685 686 687 688 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipeSelection
// Description : This maintains a list of GraphicsPipes by type that
//               are available for creation.  Normally there is one
//               default interactive GraphicsPipe, and possibly other
//               types available as well.
////////////////////////////////////////////////////////////////////

714 14 ParasiteBuffer 75777 14 ParasiteBuffer 14 ParasiteBuffer 0 0 0 0 587 0 1 689 0 1 0 705 0 0 0 0 1508
////////////////////////////////////////////////////////////////////
//       Class : ParasiteBuffer
// Description : This is a special GraphicsOutput type that acts a lot
//               like a GraphicsBuffer, effectively allowing rendering
//               to an offscreen buffer, except it does not create any
//               framebuffer space for itself.  Instead, it renders
//               into the framebuffer owned by some other
//               GraphicsOutput.
//
//               The x_size and y_size must therefore fit within the
//               bounds of the source GraphicsOutput.
//
//               Since the framebuffer will be subsequently cleared
//               when the actual owner draws in it later, this only
//               makes sense if we are going to copy the contents of
//               the framebuffer to a texture immediately after we
//               draw it.  Thus, has_texture() is implicitly true for
//               a ParasiteBuffer.
//
//               This class is useful to render offscreen to a texture
//               while preventing the waste of framebuffer memory for
//               API's that are unable to render directly into a
//               texture (and must render into a separate framebuffer
//               first and then copy to texture).  It is also the only
//               way to render to a texture on API's that do not
//               support offscreen rendering.
////////////////////////////////////////////////////////////////////

715 18 WindowProperties * 8576 18 WindowProperties * 18 WindowProperties * 0 0 690 0 0 0 0 0 0 0 0 0

716 24 WindowProperties const * 8576 24 WindowProperties const * 24 WindowProperties const * 0 0 717 0 0 0 0 0 0 0 0 0

717 22 WindowProperties const 8832 22 WindowProperties const 22 WindowProperties const 0 0 690 0 0 0 0 0 0 0 0 0

718 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

719 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

720 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

721 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

722 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 723 0 0 0 0 0 0 0 0 0

723 14 Filename const 8832 14 Filename const 14 Filename const 0 0 724 0 0 0 0 0 0 0 0 0

724 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

725 9 ostream * 8576 9 ostream * 9 ostream * 0 0 726 0 0 0 0 0 0 0 0 0

726 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

727 16 DrawableRegion * 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 692 0 0 0 0 0 0 0 0 0

728 22 DrawableRegion const * 8576 22 DrawableRegion const * 22 DrawableRegion const * 0 0 729 0 0 0 0 0 0 0 0 0

729 20 DrawableRegion const 8832 20 DrawableRegion const 20 DrawableRegion const 0 0 692 0 0 0 0 0 0 0 0 0

730 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 731 0 0 0 0 0 0 0 0 0

731 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 732 0 0 0 0 0 0 0 0 0

732 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

733 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

734 21 DisplayRegion const * 8576 21 DisplayRegion const * 21 DisplayRegion const * 0 0 735 0 0 0 0 0 0 0 0 0

735 19 DisplayRegion const 8832 19 DisplayRegion const 19 DisplayRegion const 0 0 693 0 0 0 0 0 0 0 0 0

736 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 693 0 0 0 0 0 0 0 0 0

737 16 GraphicsOutput * 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 705 0 0 0 0 0 0 0 0 0

738 14 GraphicsPipe * 8576 14 GraphicsPipe * 14 GraphicsPipe * 0 0 699 0 0 0 0 0 0 0 0 0

739 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 740 0 0 0 0 0 0 0 0 0

740 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 741 0 0 0 0 0 0 0 0 0

741 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

742 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 741 0 0 0 0 0 0 0 0 0

743 13 StereoChannel 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 744 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0 7 SC_left 13 Lens::SC_left 1 8 SC_right 14 Lens::SC_right 2 9 SC_stereo 15 Lens::SC_stereo 3 0 0

744 4 Lens 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 688
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node
//               (defined in sgraph), which defines the fundamental
//               interface to point-of-view for rendering.  Lenses are
//               also used in other contexts, however; for instance, a
//               Spotlight is also defined using a lens.
////////////////////////////////////////////////////////////////////

745 10 Filename * 8576 10 Filename * 10 Filename * 0 0 724 0 0 0 0 0 0 0 0 0

746 10 PNMImage * 8576 10 PNMImage * 10 PNMImage * 0 0 747 0 0 0 0 0 0 0 0 0

747 8 PNMImage 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

748 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

749 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 748 0 0 0 0 0 0 0 0 0

750 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 694 0 0 0 0 0 0 0 0 0

751 23 FrameBufferProperties * 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 695 0 0 0 0 0 0 0 0 0

752 29 FrameBufferProperties const * 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 753 0 0 0 0 0 0 0 0 0

753 27 FrameBufferProperties const 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 695 0 0 0 0 0 0 0 0 0

754 22 GraphicsDevice const * 8576 22 GraphicsDevice const * 22 GraphicsDevice const * 0 0 755 0 0 0 0 0 0 0 0 0

755 20 GraphicsDevice const 8832 20 GraphicsDevice const 20 GraphicsDevice const 0 0 697 0 0 0 0 0 0 0 0 0

756 20 GraphicsPipe const * 8576 20 GraphicsPipe const * 20 GraphicsPipe const * 0 0 757 0 0 0 0 0 0 0 0 0

757 18 GraphicsPipe const 8832 18 GraphicsPipe const 18 GraphicsPipe const 0 0 699 0 0 0 0 0 0 0 0 0

758 30 GraphicsThreadingModel const * 8576 30 GraphicsThreadingModel const * 30 GraphicsThreadingModel const * 0 0 759 0 0 0 0 0 0 0 0 0

759 28 GraphicsThreadingModel const 8832 28 GraphicsThreadingModel const 28 GraphicsThreadingModel const 0 0 702 0 0 0 0 0 0 0 0 0

760 24 GraphicsThreadingModel * 8576 24 GraphicsThreadingModel * 24 GraphicsThreadingModel * 0 0 702 0 0 0 0 0 0 0 0 0

761 23 GraphicsStateGuardian * 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 703 0 0 0 0 0 0 0 0 0

762 29 GraphicsStateGuardian const * 8576 29 GraphicsStateGuardian const * 29 GraphicsStateGuardian const * 0 0 763 0 0 0 0 0 0 0 0 0

763 27 GraphicsStateGuardian const 8832 27 GraphicsStateGuardian const 27 GraphicsStateGuardian const 0 0 703 0 0 0 0 0 0 0 0 0

764 16 GraphicsEngine * 8576 16 GraphicsEngine * 16 GraphicsEngine * 0 0 712 0 0 0 0 0 0 0 0 0

765 15 CompressionMode 794624 24 Texture::CompressionMode 24 Texture::CompressionMode 766 0 0 0 0 0 0 0 0 9 10 CM_default 19 Texture::CM_default 0 6 CM_off 15 Texture::CM_off 1 5 CM_on 14 Texture::CM_on 2 7 CM_fxt1 16 Texture::CM_fxt1 3 7 CM_dxt1 16 Texture::CM_dxt1 4 7 CM_dxt2 16 Texture::CM_dxt2 5 7 CM_dxt3 16 Texture::CM_dxt3 6 7 CM_dxt4 16 Texture::CM_dxt4 7 7 CM_dxt5 16 Texture::CM_dxt5 8 0 0

766 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

767 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

768 22 GraphicsOutput const * 8576 22 GraphicsOutput const * 22 GraphicsOutput const * 0 0 769 0 0 0 0 0 0 0 0 0

769 20 GraphicsOutput const 8832 20 GraphicsOutput const 20 GraphicsOutput const 0 0 705 0 0 0 0 0 0 0 0 0

770 9 Texture * 8576 9 Texture * 9 Texture * 0 0 766 0 0 0 0 0 0 0 0 0

771 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

772 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 773 0 0 0 0 0 0 0 0 0

773 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0

774 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 706 0 0 0 0 0 0 0 0 0

775 22 GraphicsWindow const * 8576 22 GraphicsWindow const * 22 GraphicsWindow const * 0 0 776 0 0 0 0 0 0 0 0 0

776 20 GraphicsWindow const 8832 20 GraphicsWindow const 20 GraphicsWindow const 0 0 711 0 0 0 0 0 0 0 0 0

777 16 GraphicsWindow * 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 711 0 0 0 0 0 0 0 0 0

778 9 MouseData 2048 9 MouseData 9 MouseData 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

779 11 MouseData * 8576 11 MouseData * 11 MouseData * 0 0 778 0 0 0 0 0 0 0 0 0

780 10 Pipeline * 8576 10 Pipeline * 10 Pipeline * 0 0 781 0 0 0 0 0 0 0 0 0

781 8 Pipeline 2048 8 Pipeline 8 Pipeline 0 0 0 0 0 0 0 0 0 0 0 0

782 22 GraphicsEngine const * 8576 22 GraphicsEngine const * 22 GraphicsEngine const * 0 0 783 0 0 0 0 0 0 0 0 0

783 20 GraphicsEngine const 8832 20 GraphicsEngine const 20 GraphicsEngine const 0 0 712 0 0 0 0 0 0 0 0 0

784 29 GraphicsPipeSelection const * 8576 29 GraphicsPipeSelection const * 29 GraphicsPipeSelection const * 0 0 785 0 0 0 0 0 0 0 0 0

785 27 GraphicsPipeSelection const 8832 27 GraphicsPipeSelection const 27 GraphicsPipeSelection const 0 0 713 0 0 0 0 0 0 0 0 0

786 23 GraphicsPipeSelection * 8576 23 GraphicsPipeSelection * 23 GraphicsPipeSelection * 0 0 713 0 0 0 0 0 0 0 0 0

787 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
