1145553915
2 2
8 libevent 4 fkxo 5 panda 
44
50 14 EventParameter 4 94 30 EventParameter::EventParameter 0 7 1 2 3 4 5 6 7 2463
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Default constructor
//       Access: Public
//  Description: Defines an EventParameter that stores nothing: the
//               "empty" parameter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Pointer constructor
//       Access: Public
//  Description: Defines an EventParameter that stores a pointer to
//               any kind of TypedWritableReferenceCount object.  This
//               is the most general constructor.
//
//               This accepts a const pointer, even though it stores
//               (and eventually returns) a non-const pointer.  This
//               is just the simplest way to allow both const and
//               non-const pointers to be stored, but it does lose the
//               constness.  Be careful.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Integer constructor
//       Access: Public
//  Description: Defines an EventParameter that stores an integer
//               value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Double constructor
//       Access: Public
//  Description: Defines an EventParameter that stores a
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::String constructor
//       Access: Public
//  Description: Defines an EventParameter that stores a string value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Wstring constructor
//       Access: Public
//  Description: Defines an EventParameter that stores a wstring value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline EventParameter::EventParameter(void);

51 10 operator = 4 94 26 EventParameter::operator = 0 1 8 236
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EventParameter &EventParameter::operator =(EventParameter const &copy);

52 15 ~EventParameter 4 94 31 EventParameter::~EventParameter 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline EventParameter::~EventParameter(void);

53 8 is_empty 4 94 24 EventParameter::is_empty 0 1 9 604
// These functions are conveniences to easily determine if the
// EventParameter is one of the predefined parameter types, and
// retrieve the corresponding value.  Of course, it is possible that
// the EventParameter is some user-defined type, and is none of
// these.

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_empty
//       Access: Public
//  Description: Returns true if the EventParameter is the empty
//               parameter, storing nothing, or false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EventParameter::is_empty(void) const;

54 6 is_int 4 94 22 EventParameter::is_int 0 1 10 583
// These functions are conveniences to easily determine if the
// EventParameter is one of the predefined parameter types, and
// retrieve the corresponding value.  Of course, it is possible that
// the EventParameter is some user-defined type, and is none of
// these.

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_int
//       Access: Public
//  Description: Returns true if the EventParameter stores an integer
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool EventParameter::is_int(void) const;

55 13 get_int_value 4 94 29 EventParameter::get_int_value 0 1 11 379
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_int_value
//       Access: Public
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_int() has already
//               returned true.
////////////////////////////////////////////////////////////////////
53
inline int EventParameter::get_int_value(void) const;

56 9 is_double 4 94 25 EventParameter::is_double 0 1 12 328
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_double
//       Access: Public
//  Description: Returns true if the EventParameter stores a double
//               floating-point value, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EventParameter::is_double(void) const;

57 16 get_double_value 4 94 32 EventParameter::get_double_value 0 1 13 385
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_double_value
//       Access: Public
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_double() has already
//               returned true.
////////////////////////////////////////////////////////////////////
59
inline double EventParameter::get_double_value(void) const;

58 9 is_string 4 94 25 EventParameter::is_string 0 1 14 313
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_string
//       Access: Public
//  Description: Returns true if the EventParameter stores a string
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EventParameter::is_string(void) const;

59 16 get_string_value 4 94 32 EventParameter::get_string_value 0 1 15 385
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_string_value
//       Access: Public
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_string() has already
//               returned true.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > EventParameter::get_string_value(void) const;

60 10 is_wstring 4 94 26 EventParameter::is_wstring 0 1 16 315
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_wstring
//       Access: Public
//  Description: Returns true if the EventParameter stores a wstring
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EventParameter::is_wstring(void) const;

61 17 get_wstring_value 4 94 33 EventParameter::get_wstring_value 0 1 17 387
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_wstring_value
//       Access: Public
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_wstring() has already
//               returned true.
////////////////////////////////////////////////////////////////////
77
inline basic_string< wchar_t > EventParameter::get_wstring_value(void) const;

62 7 get_ptr 4 94 23 EventParameter::get_ptr 0 1 18 549
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_ptr
//       Access: Public
//  Description: Retrieves a pointer to the actual value stored in the
//               parameter.  The TypeHandle of this pointer may be
//               examined to determine the actual type of parameter it
//               contains.  This is the only way to retrieve the value
//               when it is not one of the above predefined types.
////////////////////////////////////////////////////////////////////
72
inline TypedWritableReferenceCount *EventParameter::get_ptr(void) const;

63 6 output 4 94 22 EventParameter::output 0 1 19 219
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EventParameter::output(ostream &out) const;

64 5 Event 4 95 12 Event::Event 0 3 20 21 22 435
////////////////////////////////////////////////////////////////////
//     Function: Event::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Event::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
Event::Event(basic_string< char > const &event_name, EventReceiver *receiver = ((void *)(0)));

65 10 operator = 4 95 17 Event::operator = 0 1 23 227
////////////////////////////////////////////////////////////////////
//     Function: Event::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
void Event::operator =(Event const &copy);

66 8 set_name 4 95 15 Event::set_name 0 1 24 880
// Filename: event.I
// Created by:  drose (15May01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Event::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void Event::set_name(basic_string< char > const &name);

67 10 clear_name 4 95 17 Event::clear_name 0 1 25 247
////////////////////////////////////////////////////////////////////
//     Function: Event::clear_name
//       Access: Public
//  Description: Resets the Event's name to empty.
////////////////////////////////////////////////////////////////////
36
inline void Event::clear_name(void);

68 8 has_name 4 95 15 Event::has_name 0 1 26 307
////////////////////////////////////////////////////////////////////
//     Function: Event::has_name
//       Access: Public
//  Description: Returns true if the Event has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
40
inline bool Event::has_name(void) const;

69 8 get_name 4 95 15 Event::get_name 0 1 27 211
////////////////////////////////////////////////////////////////////
//     Function: Event::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > const &Event::get_name(void) const;

70 13 add_parameter 4 95 20 Event::add_parameter 0 1 28 216
////////////////////////////////////////////////////////////////////
//     Function: Event::add_parameter
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
void Event::add_parameter(EventParameter const &obj);

71 18 get_num_parameters 4 95 25 Event::get_num_parameters 0 1 29 221
////////////////////////////////////////////////////////////////////
//     Function: Event::get_num_parameters
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
int Event::get_num_parameters(void) const;

72 13 get_parameter 4 95 20 Event::get_parameter 0 1 30 216
////////////////////////////////////////////////////////////////////
//     Function: Event::get_parameter
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
EventParameter Event::get_parameter(int n) const;

73 12 has_receiver 4 95 19 Event::has_receiver 0 1 31 215
////////////////////////////////////////////////////////////////////
//     Function: Event::has_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
bool Event::has_receiver(void) const;

74 12 get_receiver 4 95 19 Event::get_receiver 0 1 32 215
////////////////////////////////////////////////////////////////////
//     Function: Event::get_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
EventReceiver *Event::get_receiver(void) const;

75 12 set_receiver 4 95 19 Event::set_receiver 0 1 33 215
////////////////////////////////////////////////////////////////////
//     Function: Event::set_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
void Event::set_receiver(EventReceiver *receiver);

76 14 clear_receiver 4 95 21 Event::clear_receiver 0 1 34 217
////////////////////////////////////////////////////////////////////
//     Function: Event::clear_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
33
void Event::clear_receiver(void);

77 6 output 4 95 13 Event::output 0 1 35 209
////////////////////////////////////////////////////////////////////
//     Function: Event::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
void Event::output(ostream &out) const;

78 14 get_class_type 4 95 21 Event::get_class_type 0 1 36 0
46
static TypeHandle Event::get_class_type(void);

79 12 EventHandler 4 97 26 EventHandler::EventHandler 0 1 37 221
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
EventHandler::EventHandler(EventQueue *queue);

80 14 process_events 4 97 28 EventHandler::process_events 0 1 38 447
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::process_events
//       Access: Public
//  Description: The main processing loop of the EventHandler.  This
//               function must be called periodically to service
//               events.  Walks through each pending event and calls
//               its assigned hooks.
////////////////////////////////////////////////////////////////////
40
void EventHandler::process_events(void);

81 14 dispatch_event 4 97 28 EventHandler::dispatch_event 0 1 39 306
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::dispatch_event
//       Access: Public, Virtual
//  Description: Calls the hooks assigned to the indicated single
//               event.
////////////////////////////////////////////////////////////////////
80
virtual void EventHandler::dispatch_event(ConstPointerTo< Event > const &event);

82 5 write 4 97 19 EventHandler::write 0 1 40 215
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
void EventHandler::write(ostream &out) const;

83 24 get_global_event_handler 4 97 38 EventHandler::get_global_event_handler 0 1 41 1069
// Filename: eventHandler.I
// Created by:  skyler (27Jan04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_handler
//       Access: Public
//  Description: Returns a pointer to the one global EventHandler
//               object.  If the global object has not yet been
//               created, this will create it.
////////////////////////////////////////////////////////////////////
86
static inline EventHandler *EventHandler::get_global_event_handler(EventQueue *queue);

84 14 get_class_type 4 97 28 EventHandler::get_class_type 0 1 42 0
53
static TypeHandle EventHandler::get_class_type(void);

85 13 ~EventHandler 4 97 27 EventHandler::~EventHandler 0 0 0
34
EventHandler::~EventHandler(void);

86 10 EventQueue 4 99 22 EventQueue::EventQueue 0 1 43 222
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
29
EventQueue::EventQueue(void);

87 11 ~EventQueue 4 99 23 EventQueue::~EventQueue 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
EventQueue::~EventQueue(void);

88 11 queue_event 4 99 23 EventQueue::queue_event 0 1 44 222
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::queue_event
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
void EventQueue::queue_event(ConstPointerTo< Event > event);

89 5 clear 4 99 17 EventQueue::clear 0 1 45 294
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::clear
//       Access: Published
//  Description: Empties all events on the queue, throwing them on the
//               floor.
////////////////////////////////////////////////////////////////////
29
void EventQueue::clear(void);

90 14 is_queue_empty 4 99 26 EventQueue::is_queue_empty 0 1 46 225
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
bool EventQueue::is_queue_empty(void) const;

91 13 is_queue_full 4 99 25 EventQueue::is_queue_full 0 1 47 306
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_full
//       Access: Published
//  Description: This function is deprecated--the queue is never full
//               these days.
////////////////////////////////////////////////////////////////////
43
bool EventQueue::is_queue_full(void) const;

92 13 dequeue_event 4 99 25 EventQueue::dequeue_event 0 1 48 224
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::dequeue_event
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
ConstPointerTo< Event > EventQueue::dequeue_event(void);

93 22 get_global_event_queue 4 99 34 EventQueue::get_global_event_queue 0 1 49 1062
// Filename: eventQueue.I
// Created by:  drose (05May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_queue
//       Access: Public
//  Description: Returns a pointer to the one global EventQueue
//               object.  If the global object has not yet been
//               created, this will create it.
////////////////////////////////////////////////////////////////////
67
static inline EventQueue *EventQueue::get_global_event_queue(void);

49
1 14 Dtool_fkxoEmAg 7 2 100 52 14 Dtool_fkxoEmAg 0 
2 14 Dtool_fkxouMqR 7 2 100 52 14 Dtool_fkxouMqR 1 4 copy 1 101  
3 14 Dtool_fkxo3aRa 7 2 100 52 14 Dtool_fkxo3aRa 1 3 ptr 1 103  
4 14 Dtool_fkxofaFB 7 2 100 52 14 Dtool_fkxofaFB 1 5 value 1 106  
5 14 Dtool_fkxoMmWI 7 2 100 52 14 Dtool_fkxoMmWI 1 5 value 1 106  
6 14 Dtool_fkxonJZK 7 2 100 52 14 Dtool_fkxonJZK 1 5 value 1 107  
7 14 Dtool_fkxouZZH 7 2 100 52 14 Dtool_fkxouZZH 1 5 value 1 108  
8 14 Dtool_fkxo4fZ1 6 3 100 0 14 Dtool_fkxo4fZ1 2 4 this 3 100  4 copy 1 101  
9 14 Dtool_fkxoYeRx 6 5 109 0 14 Dtool_fkxoYeRx 1 4 this 3 101  
10 14 Dtool_fkxocncs 6 6 109 0 14 Dtool_fkxocncs 1 4 this 3 101  
11 14 Dtool_fkxoIOzj 6 7 108 0 14 Dtool_fkxoIOzj 1 4 this 3 101  
12 14 Dtool_fkxo9jXI 6 8 109 0 14 Dtool_fkxo9jXI 1 4 this 3 101  
13 14 Dtool_fkxo66KS 6 9 107 0 14 Dtool_fkxo66KS 1 4 this 3 101  
14 14 Dtool_fkxoEB1z 6 10 109 0 14 Dtool_fkxoEB1z 1 4 this 3 101  
15 14 Dtool_fkxogAhB 6 11 106 0 14 Dtool_fkxogAhB 1 4 this 3 101  
16 14 Dtool_fkxouy4v 6 12 109 0 14 Dtool_fkxouy4v 1 4 this 3 101  
17 14 Dtool_fkxoyazl 6 13 106 0 14 Dtool_fkxoyazl 1 4 this 3 101  
18 14 Dtool_fkxoaU2M 7 14 110 0 14 Dtool_fkxoaU2M 1 4 this 3 101  
19 14 Dtool_fkxoevV2 4 15 113 0 14 Dtool_fkxoevV2 2 4 this 3 101  3 out 1 111  
20 14 Dtool_fkxobaOf 7 18 116 0 14 Dtool_fkxobaOf 1 4 copy 1 114  
21 14 Dtool_fkxo_Cqe 7 18 116 0 14 Dtool_fkxo_Cqe 2 10 event_name 1 106  8 receiver 1 117  
22 14 Dtool_fkxoiMjT 7 18 116 0 14 Dtool_fkxoiMjT 1 10 event_name 1 106  
23 14 Dtool_fkxoyjne 7 19 116 0 14 Dtool_fkxoyjne 2 4 this 3 116  4 copy 1 114  
24 14 Dtool_fkxo3_7n 4 20 113 0 14 Dtool_fkxo3_7n 2 4 this 3 116  4 name 1 106  
25 14 Dtool_fkxorUk3 4 21 113 0 14 Dtool_fkxorUk3 1 4 this 3 116  
26 14 Dtool_fkxo9bdj 6 22 109 0 14 Dtool_fkxo9bdj 1 4 this 3 114  
27 14 Dtool_fkxoDka7 6 23 106 0 14 Dtool_fkxoDka7 1 4 this 3 114  
28 14 Dtool_fkxo6aTn 4 24 113 0 14 Dtool_fkxo6aTn 2 4 this 3 116  3 obj 1 101  
29 14 Dtool_fkxouadO 6 25 108 0 14 Dtool_fkxouadO 1 4 this 3 114  
30 14 Dtool_fkxoCpxs 7 26 100 52 14 Dtool_fkxoCpxs 2 4 this 3 114  1 n 1 108  
31 14 Dtool_fkxouqic 6 27 109 0 14 Dtool_fkxouqic 1 4 this 3 114  
32 14 Dtool_fkxog9f0 6 28 117 0 14 Dtool_fkxog9f0 1 4 this 3 114  
33 14 Dtool_fkxof1ch 4 29 113 0 14 Dtool_fkxof1ch 2 4 this 3 116  8 receiver 1 117  
34 14 Dtool_fkxoVAhd 4 30 113 0 14 Dtool_fkxoVAhd 1 4 this 3 116  
35 14 Dtool_fkxoYPzc 4 31 113 0 14 Dtool_fkxoYPzc 2 4 this 3 114  3 out 1 111  
36 14 Dtool_fkxoUXdZ 7 32 120 0 14 Dtool_fkxoUXdZ 0 
37 14 Dtool_fkxowhlR 7 35 122 85 14 Dtool_fkxowhlR 1 5 queue 1 121  
38 14 Dtool_fkxoIZkG 4 36 113 0 14 Dtool_fkxoIZkG 1 4 this 3 122  
39 14 Dtool_fkxouZmX 4 37 113 0 14 Dtool_fkxouZmX 2 4 this 3 122  5 event 1 114  
40 14 Dtool_fkxo9LkH 4 38 113 0 14 Dtool_fkxo9LkH 2 4 this 3 123  3 out 1 111  
41 14 Dtool_fkxocYKa 6 39 122 0 14 Dtool_fkxocYKa 1 5 queue 1 121  
42 14 Dtool_fkxoRkjs 7 40 120 0 14 Dtool_fkxoRkjs 0 
43 14 Dtool_fkxoJzfw 7 43 121 87 14 Dtool_fkxoJzfw 0 
44 14 Dtool_fkxomDd1 4 45 113 0 14 Dtool_fkxomDd1 2 4 this 3 121  5 event 1 114  
45 14 Dtool_fkxoWhuh 4 46 113 0 14 Dtool_fkxoWhuh 1 4 this 3 121  
46 14 Dtool_fkxoXt8W 6 47 109 0 14 Dtool_fkxoXt8W 1 4 this 3 125  
47 14 Dtool_fkxoAyXu 6 48 109 0 14 Dtool_fkxoAyXu 1 4 this 3 125  
48 14 Dtool_fkxoCDK_ 7 49 114 0 14 Dtool_fkxoCDK_ 1 4 this 3 121  
49 14 Dtool_fkxosJeO 6 50 121 0 14 Dtool_fkxosJeO 0 
35
94 14 EventParameter 26625 14 EventParameter 14 EventParameter 0 0 0 1 50 52 0 12 51 53 54 55 56 57 58 59 60 61 62 63 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the EventStoreValue template class, defined
//               below.
////////////////////////////////////////////////////////////////////

95 5 Event 75777 5 Event 5 Event 0 0 0 1 64 0 0 14 65 66 67 68 69 70 71 72 73 74 75 76 77 78 0 1 0 96 0 0 0 0 645
////////////////////////////////////////////////////////////////////
//       Class : Event
// Description : A named event, possibly with parameters.  Anyone in
//               any thread may throw an event at any time; there will
//               be one process responsible for reading and dispacting
//               on the events (but not necessarily immediately).
//
//               This function use to inherit from Namable, but that
//               makes it too expensive to get its name the Python
//               code.  Now it just copies the Namable interface in.
////////////////////////////////////////////////////////////////////

96 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

97 12 EventHandler 141313 12 EventHandler 12 EventHandler 0 0 0 1 79 85 0 5 80 81 82 83 84 0 1 0 98 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

98 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

99 10 EventQueue 26625 10 EventQueue 10 EventQueue 0 0 0 1 86 87 0 6 88 89 90 91 92 93 0 0 0 0 392
////////////////////////////////////////////////////////////////////
//       Class : EventQueue
// Description : A queue of pending events.  As events are thrown,
//               they are added to this queue; eventually, they will
//               be extracted out again by an EventHandler and
//               processed.
////////////////////////////////////////////////////////////////////

100 16 EventParameter * 8576 16 EventParameter * 16 EventParameter * 0 0 94 0 0 0 0 0 0 0 0 0

101 22 EventParameter const * 8576 22 EventParameter const * 22 EventParameter const * 0 0 102 0 0 0 0 0 0 0 0 0

102 20 EventParameter const 8832 20 EventParameter const 20 EventParameter const 0 0 94 0 0 0 0 0 0 0 0 0

103 35 TypedWritableReferenceCount const * 8576 35 TypedWritableReferenceCount const * 35 TypedWritableReferenceCount const * 0 0 104 0 0 0 0 0 0 0 0 0

104 33 TypedWritableReferenceCount const 8832 33 TypedWritableReferenceCount const 33 TypedWritableReferenceCount const 0 0 105 0 0 0 0 0 0 0 0 0

105 27 TypedWritableReferenceCount 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

106 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

107 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

108 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

109 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

110 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 105 0 0 0 0 0 0 0 0 0

111 9 ostream * 8576 9 ostream * 9 ostream * 0 0 112 0 0 0 0 0 0 0 0 0

112 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

113 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

114 13 Event const * 8576 13 Event const * 13 Event const * 0 0 115 0 0 0 0 0 0 0 0 0

115 11 Event const 8832 11 Event const 11 Event const 0 0 95 0 0 0 0 0 0 0 0 0

116 7 Event * 8576 7 Event * 7 Event * 0 0 95 0 0 0 0 0 0 0 0 0

117 15 EventReceiver * 8576 15 EventReceiver * 15 EventReceiver * 0 0 118 0 0 0 0 0 0 0 0 0

118 13 EventReceiver 2048 13 EventReceiver 13 EventReceiver 0 0 0 0 0 0 0 0 0 0 0 0

119 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

120 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 119 0 0 0 0 0 0 0 0 0

121 12 EventQueue * 8576 12 EventQueue * 12 EventQueue * 0 0 99 0 0 0 0 0 0 0 0 0

122 14 EventHandler * 8576 14 EventHandler * 14 EventHandler * 0 0 97 0 0 0 0 0 0 0 0 0

123 20 EventHandler const * 8576 20 EventHandler const * 20 EventHandler const * 0 0 124 0 0 0 0 0 0 0 0 0

124 18 EventHandler const 8832 18 EventHandler const 18 EventHandler const 0 0 97 0 0 0 0 0 0 0 0 0

125 18 EventQueue const * 8576 18 EventQueue const * 18 EventQueue const * 0 0 126 0 0 0 0 0 0 0 0 0

126 16 EventQueue const 8832 16 EventQueue const 16 EventQueue const 0 0 99 0 0 0 0 0 0 0 0 0

127 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

128 7 wstring 2048 23 basic_string< wchar_t > 23 basic_string< wchar_t > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
