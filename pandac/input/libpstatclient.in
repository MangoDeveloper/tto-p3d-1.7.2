1145553987
2 2
14 libpstatclient 4 hqKx 5 panda 
57
74 15 set_client_name 4 131 28 PStatClient::set_client_name 0 1 1 1066
// Filename: pStatClient.I
// Created by:  drose (16Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::set_client_name
//       Access: Published
//  Description: Sets the name of the client.  This is reported to the
//               PStatsServer, and will presumably be written in the
//               title bar or something.
////////////////////////////////////////////////////////////////////
75
inline void PStatClient::set_client_name(basic_string< char > const &name);

75 15 get_client_name 4 131 28 PStatClient::get_client_name 0 1 2 268
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_client_name
//       Access: Published
//  Description: Retrieves the name of the client as set.
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > PStatClient::get_client_name(void) const;

76 12 set_max_rate 4 131 25 PStatClient::set_max_rate 0 1 3 817
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::set_max_rate
//       Access: Published
//  Description: Controls the number of packets that will be sent to
//               the server.  Normally, one packet is sent per frame,
//               but this can flood the server with more packets than
//               it can handle if the frame rate is especially good
//               (e.g. if nothing is onscreen at the moment).  Set
//               this parameter to a reasonable number to prevent this
//               from happening.
//
//               This number specifies the maximum number of packets
//               that will be sent to the server per second, per
//               thread.
////////////////////////////////////////////////////////////////////
50
inline void PStatClient::set_max_rate(float rate);

77 12 get_max_rate 4 131 25 PStatClient::get_max_rate 0 1 4 373
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_max_rate
//       Access: Published
//  Description: Returns the maximum number of packets that will be
//               sent to the server per second, per thread.  See
//               set_max_rate().
////////////////////////////////////////////////////////////////////
51
inline float PStatClient::get_max_rate(void) const;

78 18 get_num_collectors 4 131 31 PStatClient::get_num_collectors 0 1 5 310
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_num_collectors
//       Access: Published
//  Description: Returns the total number of collectors the Client
//               knows about.
////////////////////////////////////////////////////////////////////
55
inline int PStatClient::get_num_collectors(void) const;

79 13 get_collector 4 131 26 PStatClient::get_collector 0 1 6 252
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_collector
//       Access: Published
//  Description: Returns the nth collector.
////////////////////////////////////////////////////////////////////
59
PStatCollector PStatClient::get_collector(int index) const;

80 17 get_collector_def 4 131 30 PStatClient::get_collector_def 0 1 7 279
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_collector_def
//       Access: Published
//  Description: Returns the definition body of the nth collector.
////////////////////////////////////////////////////////////////////
74
inline PStatCollectorDef *PStatClient::get_collector_def(int index) const;

81 18 get_collector_name 4 131 31 PStatClient::get_collector_name 0 1 8 275
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_collector_name
//       Access: Published
//  Description: Returns the name of the indicated collector.
////////////////////////////////////////////////////////////////////
70
basic_string< char > PStatClient::get_collector_name(int index) const;

82 22 get_collector_fullname 4 131 35 PStatClient::get_collector_fullname 0 1 9 454
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_collector_fullname
//       Access: Published
//  Description: Returns the "full name" of the indicated collector.
//               This will be the concatenation of all of the
//               collector's parents' names (except Frame) and the
//               collector's own name.
////////////////////////////////////////////////////////////////////
74
basic_string< char > PStatClient::get_collector_fullname(int index) const;

83 15 get_num_threads 4 131 28 PStatClient::get_num_threads 0 1 10 304
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_num_threads
//       Access: Published
//  Description: Returns the total number of threads the Client
//               knows about.
////////////////////////////////////////////////////////////////////
52
inline int PStatClient::get_num_threads(void) const;

84 10 get_thread 4 131 23 PStatClient::get_thread 0 1 11 246
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_thread
//       Access: Published
//  Description: Returns the nth thread.
////////////////////////////////////////////////////////////////////
53
PStatThread PStatClient::get_thread(int index) const;

85 15 get_thread_name 4 131 28 PStatClient::get_thread_name 0 1 12 269
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_thread_name
//       Access: Published
//  Description: Returns the name of the indicated thread.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > PStatClient::get_thread_name(int index) const;

86 20 get_thread_sync_name 4 131 33 PStatClient::get_thread_sync_name 0 1 13 279
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_thread_sync_name
//       Access: Published
//  Description: Returns the sync_name of the indicated thread.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > PStatClient::get_thread_sync_name(int index) const;

87 17 get_thread_object 4 131 30 PStatClient::get_thread_object 0 1 14 321
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_thread_object
//       Access: Published
//  Description: Returns the Panda Thread object associated with the
//               indicated PStatThread.
////////////////////////////////////////////////////////////////////
63
inline Thread *PStatClient::get_thread_object(int index) const;

88 15 get_main_thread 4 131 28 PStatClient::get_main_thread 0 1 15 340
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_main_thread
//       Access: Published
//  Description: Returns a handle to the client's Main thread.  This
//               is the thread that started the application.
////////////////////////////////////////////////////////////////////
53
PStatThread PStatClient::get_main_thread(void) const;

89 18 get_current_thread 4 131 31 PStatClient::get_current_thread 0 1 16 409
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_current_thread
//       Access: Published
//  Description: Returns a handle to the currently-executing thread.
//               This is the thread that PStatCollectors will be
//               counted in if they do not specify otherwise.
////////////////////////////////////////////////////////////////////
56
PStatThread PStatClient::get_current_thread(void) const;

90 9 get_clock 4 131 22 PStatClient::get_clock 0 1 17 508
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_clock
//       Access: Published
//  Description: Returns a reference to the PStatClient's clock
//               object.  It keeps its own clock, instead of using the
//               global clock object, so the stats won't get mucked up
//               if you put the global clock in non-real-time mode or
//               something.
////////////////////////////////////////////////////////////////////
61
inline ClockObject const &PStatClient::get_clock(void) const;

91 7 connect 4 131 20 PStatClient::connect 0 3 18 19 20 373
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::connect
//       Access: Published, Static
//  Description: Attempts to establish a connection to the indicated
//               PStatServer.  Returns true if successful, false on
//               failure.
////////////////////////////////////////////////////////////////////
110
static inline bool PStatClient::connect(basic_string< char > const &hostname = ((string())), int port = (-1));

92 10 disconnect 4 131 23 PStatClient::disconnect 0 1 21 276
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::disconnect
//       Access: Published, Static
//  Description: Closes the connection previously established.
////////////////////////////////////////////////////////////////////
49
static inline void PStatClient::disconnect(void);

93 12 is_connected 4 131 25 PStatClient::is_connected 0 1 22 344
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::is_connected
//       Access: Published, Static
//  Description: Returns true if the client believes it is connected
//               to a working PStatServer, false otherwise.
////////////////////////////////////////////////////////////////////
51
static inline bool PStatClient::is_connected(void);

94 18 resume_after_pause 4 131 31 PStatClient::resume_after_pause 0 1 23 483
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::resume_after_pause
//       Access: Published, Static
//  Description: Resumes the PStatClient after the simulation has been
//               paused for a while.  This allows the stats to
//               continue exactly where it left off, instead of
//               leaving a big gap that would represent a chug.
////////////////////////////////////////////////////////////////////
57
static inline void PStatClient::resume_after_pause(void);

95 9 main_tick 4 131 22 PStatClient::main_tick 0 1 24 397
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::main_tick
//       Access: Published, Static
//  Description: A convenience function to call new_frame() on the
//               global PStatClient's main thread, and any other
//               threads with a sync_name of "Main".
////////////////////////////////////////////////////////////////////
41
static void PStatClient::main_tick(void);

96 11 thread_tick 4 131 24 PStatClient::thread_tick 0 1 25 335
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::thread_tick
//       Access: Published, Static
//  Description: A convenience function to call new_frame() on any
//               threads with the indicated sync_name
////////////////////////////////////////////////////////////////////
76
static void PStatClient::thread_tick(basic_string< char > const &sync_name);

97 16 client_main_tick 4 131 29 PStatClient::client_main_tick 0 1 26 395
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_main_tick
//       Access: Published
//  Description: A convenience function to call new_frame() on the
//               given PStatClient's main thread, and any other
//               threads with a sync_name of "Main".
////////////////////////////////////////////////////////////////////
41
void PStatClient::client_main_tick(void);

98 18 client_thread_tick 4 131 31 PStatClient::client_thread_tick 0 1 27 342
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_thread_tick
//       Access: Published
//  Description: A convenience function to call new_frame() on all of
//               the threads with the indicated sync name.
////////////////////////////////////////////////////////////////////
76
void PStatClient::client_thread_tick(basic_string< char > const &sync_name);

99 14 client_connect 4 131 27 PStatClient::client_connect 0 1 28 269
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_connect
//       Access: Published
//  Description: The nonstatic implementation of connect().
////////////////////////////////////////////////////////////////////
81
inline bool PStatClient::client_connect(basic_string< char > hostname, int port);

100 17 client_disconnect 4 131 30 PStatClient::client_disconnect 0 1 29 275
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_disconnect
//       Access: Published
//  Description: The nonstatic implementation of disconnect().
////////////////////////////////////////////////////////////////////
42
void PStatClient::client_disconnect(void);

101 19 client_is_connected 4 131 32 PStatClient::client_is_connected 0 1 30 279
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_is_connected
//       Access: Published
//  Description: The nonstatic implementation of is_connected().
////////////////////////////////////////////////////////////////////
57
inline bool PStatClient::client_is_connected(void) const;

102 25 client_resume_after_pause 4 131 38 PStatClient::client_resume_after_pause 0 1 31 482
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::client_resume_after_pause
//       Access: Published
//  Description: Resumes the PStatClient after the simulation has been
//               paused for a while.  This allows the stats to
//               continue exactly where it left off, instead of
//               leaving a big gap that would represent a chug.
////////////////////////////////////////////////////////////////////
57
inline void PStatClient::client_resume_after_pause(void);

103 17 get_global_pstats 4 131 30 PStatClient::get_global_pstats 0 1 32 496
////////////////////////////////////////////////////////////////////
//     Function: PStatClient::get_global_pstats
//       Access: Published, Static
//  Description: Returns a pointer to the global PStatClient object.
//               It's legal to declare your own PStatClient locally,
//               but it's also convenient to have a global one that
//               everyone can register with.  This is the global one.
////////////////////////////////////////////////////////////////////
57
static PStatClient *PStatClient::get_global_pstats(void);

104 11 PStatThread 4 133 24 PStatThread::PStatThread 0 3 33 34 35 2069
// Filename: pStatThread.I
// Created by:  drose (11Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PStatThread::Default Constructor
//       Access: Private
//  Description: Normally, this constructor is called only from
//               PStatClient.  Use one of the constructors below to
//               create your own Thread.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatThread::Constructor
//       Access: Private
//  Description: Normally, this constructor is called only from
//               PStatClient.  Use one of the constructors below to
//               create your own Thread.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatThread::Constructor
//       Access: Public
//  Description: Creates a new named thread.  This will be used to
//               unify tasks that share a common thread, and
//               differentiate tasks that occur in different threads.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatThread::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
85
inline PStatThread::PStatThread(Thread *thread, PStatClient *client = ((void *)(0)));

105 10 operator = 4 133 23 PStatThread::operator = 0 1 36 233
////////////////////////////////////////////////////////////////////
//     Function: PStatThread::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void PStatThread::operator =(PStatThread const &copy);

106 9 new_frame 4 133 22 PStatThread::new_frame 0 1 37 625
////////////////////////////////////////////////////////////////////
//     Function: PStatThread::new_frame
//       Access: Public
//  Description: This must be called at the start of every "frame",
//               whatever a frame may be deemed to be, to accumulate
//               all the stats that have collected so far for the
//               thread and ship them off to the server.
//
//               Calling PStatClient::thread_tick() will automatically
//               call this for any threads with the indicated sync
//               name.
////////////////////////////////////////////////////////////////////
41
inline void PStatThread::new_frame(void);

107 10 get_thread 4 133 23 PStatThread::get_thread 0 1 38 316
////////////////////////////////////////////////////////////////////
//     Function: PStatThread::get_thread
//       Access: Published
//  Description: Returns the Panda Thread object associated with this
//               particular PStatThread.
////////////////////////////////////////////////////////////////////
44
Thread *PStatThread::get_thread(void) const;

108 9 get_index 4 133 22 PStatThread::get_index 0 1 39 313
////////////////////////////////////////////////////////////////////
//     Function: PStatThread::get_index
//       Access: Published
//  Description: Returns the index number of this particular thread
//               within the PStatClient.
////////////////////////////////////////////////////////////////////
46
inline int PStatThread::get_index(void) const;

109 12 ~PStatThread 4 133 25 PStatThread::~PStatThread 0 0 0
32
PStatThread::~PStatThread(void);

110 14 PStatCollector 4 134 30 PStatCollector::PStatCollector 0 4 40 41 42 43 3431
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Default Constructor
//       Access: Private
//  Description: Normally, this constructor is called only from
//               PStatClient.  Use one of the constructors below to
//               create your own Collector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Constructor
//       Access: Private
//  Description: Normally, this constructor is called only from
//               PStatClient.  Use one of the constructors below to
//               create your own Collector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Constructor
//       Access: Published
//  Description: Creates a new PStatCollector, ready to start
//               accumulating data.  The name of the collector
//               uniquely identifies it among the other collectors; if
//               two collectors share the same name then they are
//               really the same collector.
//
//               The name may also be a compound name, something like
//               "Cull:Sort", which indicates that this is a collector
//               named "Sort", a child of the collector named "Cull".
//               The parent may also be named explicitly by reference
//               in the other flavor of the constructor; see further
//               comments on this for that constructor.
//
//               If the client pointer is non-null, it specifies a
//               particular client to register the collector with;
//               otherwise, the global client is used.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Constructor
//       Access: Published
//  Description: Creates a new PStatCollector, ready to start
//               accumulating data.  The name of the collector
//               uniquely identifies it among the other collectors; if
//               two collectors share the same name then they are
//               really the same collector.
//
//               The parent is the collector that conceptually
//               includes all of the time measured for this collector.
//               For instance, a particular character's animation time
//               is owned by the "Animation" collector, which is in
//               turn owned by the "Frame" collector.  It is not
//               strictly necessary that all of the time spent in a
//               particular collector is completely nested within time
//               spent in its parent's collector.  If parent is the
//               empty string, the collector is owned by "Frame".
//
//               This constructor does not take a client pointer; it
//               always creates the new collector on the same client
//               as its parent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
109
inline PStatCollector::PStatCollector(basic_string< char > const &name, PStatClient *client = ((void *)(0)));

111 10 operator = 4 134 26 PStatCollector::operator = 0 1 44 239
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void PStatCollector::operator =(PStatCollector const &copy);

112 9 is_active 4 134 25 PStatCollector::is_active 0 2 45 46 764
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::is_active
//       Access: Published
//  Description: Returns true if this particular collector is active
//               on the default thread, and we are currently
//               transmitting PStats data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::is_active
//       Access: Published
//  Description: Returns true if this particular collector is active
//               on the indicated thread, and we are currently
//               transmitting PStats data.
////////////////////////////////////////////////////////////////////
44
inline bool PStatCollector::is_active(void);

113 10 is_started 4 134 26 PStatCollector::is_started 0 2 47 48 692
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::is_started
//       Access: Published
//  Description: Returns true if this particular collector has been
//               started on the default thread, or false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::is_started
//       Access: Published
//  Description: Returns true if this particular collector has been
//               started on the indicated thread, or false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool PStatCollector::is_started(void);

114 5 start 4 134 21 PStatCollector::start 0 3 49 50 51 1162
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::start
//       Access: Published
//  Description: Starts this particular timer ticking.  This should be
//               called before the code you want to measure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::start
//       Access: Published
//  Description: Starts this timer ticking within a particular thread.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::start
//       Access: Published
//  Description: Marks that the timer should have been started as of
//               the indicated time.  This must be a time based on the
//               PStatClient's clock (see PStatClient::get_clock()),
//               and care should be taken that all such calls exhibit
//               a monotonically increasing series of time values.
////////////////////////////////////////////////////////////////////
40
inline void PStatCollector::start(void);

115 4 stop 4 134 20 PStatCollector::stop 0 3 52 53 54 1129
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::stop
//       Access: Published
//  Description: Stops this timer.  This should be called after the
//               code you want to measure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::stop
//       Access: Published
//  Description: Stops this timer within a particular thread.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::stop
//       Access: Published
//  Description: Marks that the timer should have been stopped as of
//               the indicated time.  This must be a time based on the
//               PStatClient's clock (see PStatClient::get_clock()),
//               and care should be taken that all such calls exhibit
//               a monotonically increasing series of time values.
////////////////////////////////////////////////////////////////////
39
inline void PStatCollector::stop(void);

116 11 clear_level 4 134 27 PStatCollector::clear_level 0 2 55 56 907
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::clear_level
//       Access: Published
//  Description: Removes the level setting associated with this
//               collector for the main thread.  The collector
//               will no longer show up on any level graphs in the
//               main thread.  This implicitly calls flush_level().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::clear_level
//       Access: Published
//  Description: Removes the level setting associated with this
//               collector for the indicated thread.  The collector
//               will no longer show up on any level graphs in this
//               thread.
////////////////////////////////////////////////////////////////////
46
inline void PStatCollector::clear_level(void);

117 9 set_level 4 134 25 PStatCollector::set_level 0 2 57 58 757
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::set_level
//       Access: Published
//  Description: Sets the level setting associated with this
//               collector for the main thread to the indicated
//               value.  This implicitly calls flush_level().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::set_level
//       Access: Published
//  Description: Sets the level setting associated with this
//               collector for the indicated thread to the indicated
//               value.
////////////////////////////////////////////////////////////////////
51
inline void PStatCollector::set_level(float level);

118 9 add_level 4 134 25 PStatCollector::add_level 0 2 59 60 1221
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::add_level
//       Access: Published
//  Description: Adds the indicated increment (which may be negative)
//               to the level setting associated with this collector
//               for the main thread.  If the collector did not
//               already have a level setting for the main thread, it
//               is initialized to 0.
//
//               As an optimization, the data is not immediately set
//               to the PStatClient.  It will be sent the next time
//               flush_level() is called.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::add_level
//       Access: Published
//  Description: Adds the indicated increment (which may be negative)
//               to the level setting associated with this collector
//               for the indicated thread.  If the collector did not
//               already have a level setting for this thread, it is
//               initialized to 0.
////////////////////////////////////////////////////////////////////
55
inline void PStatCollector::add_level(float increment);

119 9 sub_level 4 134 25 PStatCollector::sub_level 0 2 61 62 1231
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::sub_level
//       Access: Published
//  Description: Subtracts the indicated decrement (which may be
//               negative) to the level setting associated with this
//               collector for the main thread.  If the collector did
//               not already have a level setting for the main thread,
//               it is initialized to 0.
//
//               As an optimization, the data is not immediately set
//               to the PStatClient.  It will be sent the next time
//               flush_level() is called.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::sub_level
//       Access: Published
//  Description: Subtracts the indicated decrement (which may be
//               negative) to the level setting associated with this
//               collector for the indicated thread.  If the collector
//               did not already have a level setting for this thread,
//               it is initialized to 0.
////////////////////////////////////////////////////////////////////
55
inline void PStatCollector::sub_level(float decrement);

120 13 add_level_now 4 134 29 PStatCollector::add_level_now 0 1 63 283
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::add_level_now
//       Access: Published
//  Description: Calls add_level() and immediately calls flush_level().
////////////////////////////////////////////////////////////////////
59
inline void PStatCollector::add_level_now(float increment);

121 13 sub_level_now 4 134 29 PStatCollector::sub_level_now 0 1 64 283
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::sub_level_now
//       Access: Published
//  Description: Calls sub_level() and immediately calls flush_level().
////////////////////////////////////////////////////////////////////
59
inline void PStatCollector::sub_level_now(float decrement);

122 11 flush_level 4 134 27 PStatCollector::flush_level 0 1 65 325
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::flush_level
//       Access: Published
//  Description: Updates the PStatClient with the recent results from
//               add_level() and sub_level().
////////////////////////////////////////////////////////////////////
46
inline void PStatCollector::flush_level(void);

123 9 get_level 4 134 25 PStatCollector::get_level 0 2 66 67 653
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::get_level
//       Access: Published
//  Description: Returns the current level value of the given
//               collector in the main thread.  This implicitly calls
//               flush_level().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::get_level
//       Access: Published
//  Description: Returns the current level value of the given collector.
////////////////////////////////////////////////////////////////////
45
inline float PStatCollector::get_level(void);

124 18 clear_thread_level 4 134 34 PStatCollector::clear_thread_level 0 1 68 446
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::clear_thread_level
//       Access: Published
//  Description: Removes the level setting associated with this
//               collector for the current thread.  The collector
//               will no longer show up on any level graphs in the
//               current thread.
////////////////////////////////////////////////////////////////////
53
inline void PStatCollector::clear_thread_level(void);

125 16 set_thread_level 4 134 32 PStatCollector::set_thread_level 0 1 69 366
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::set_thread_level
//       Access: Published
//  Description: Sets the level setting associated with this
//               collector for the current thread to the indicated
//               value.
////////////////////////////////////////////////////////////////////
58
inline void PStatCollector::set_thread_level(float level);

126 16 add_thread_level 4 134 32 PStatCollector::add_thread_level 0 1 70 531
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::add_thread_level
//       Access: Published
//  Description: Adds the indicated increment (which may be negative)
//               to the level setting associated with this collector
//               for the current thread.  If the collector did not
//               already have a level setting for the current thread,
//               it is initialized to 0.
////////////////////////////////////////////////////////////////////
62
inline void PStatCollector::add_thread_level(float increment);

127 16 sub_thread_level 4 134 32 PStatCollector::sub_thread_level 0 1 71 536
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::sub_thread_level
//       Access: Published
//  Description: Subtracts the indicated decrement (which may be
//               negative) to the level setting associated with this
//               collector for the current thread.  If the collector
//               did not already have a level setting for the current
//               thread, it is initialized to 0.
////////////////////////////////////////////////////////////////////
62
inline void PStatCollector::sub_thread_level(float decrement);

128 16 get_thread_level 4 134 32 PStatCollector::get_thread_level 0 1 72 326
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::get_thread_level
//       Access: Published
//  Description: Returns the current level value of the given
//               collector in the current thread.
////////////////////////////////////////////////////////////////////
52
inline float PStatCollector::get_thread_level(void);

129 9 get_index 4 134 25 PStatCollector::get_index 0 1 73 319
////////////////////////////////////////////////////////////////////
//     Function: PStatCollector::get_index
//       Access: Published
//  Description: Returns the index number of this particular collector
//               within the PStatClient.
////////////////////////////////////////////////////////////////////
49
inline int PStatCollector::get_index(void) const;

130 15 ~PStatCollector 4 134 31 PStatCollector::~PStatCollector 0 0 0
38
PStatCollector::~PStatCollector(void);

73
1 14 Dtool_hqKxx0Pk 4 3 137 0 14 Dtool_hqKxx0Pk 2 4 this 3 135  4 name 1 136  
2 14 Dtool_hqKxVKkV 6 4 136 0 14 Dtool_hqKxVKkV 1 4 this 3 138  
3 14 Dtool_hqKxCAev 4 5 137 0 14 Dtool_hqKxCAev 2 4 this 3 135  4 rate 1 140  
4 14 Dtool_hqKx53Ea 6 6 140 0 14 Dtool_hqKx53Ea 1 4 this 3 138  
5 14 Dtool_hqKxbyzM 6 7 141 0 14 Dtool_hqKxbyzM 1 4 this 3 138  
6 14 Dtool_hqKx7TFo 7 8 142 130 14 Dtool_hqKx7TFo 2 4 this 3 138  5 index 1 141  
7 14 Dtool_hqKxBHXD 6 9 143 0 14 Dtool_hqKxBHXD 2 4 this 3 138  5 index 1 141  
8 14 Dtool_hqKxIvlX 6 10 136 0 14 Dtool_hqKxIvlX 2 4 this 3 138  5 index 1 141  
9 14 Dtool_hqKxfhLk 6 11 136 0 14 Dtool_hqKxfhLk 2 4 this 3 138  5 index 1 141  
10 14 Dtool_hqKx0_4k 6 12 141 0 14 Dtool_hqKx0_4k 1 4 this 3 138  
11 14 Dtool_hqKxGWzw 7 13 145 109 14 Dtool_hqKxGWzw 2 4 this 3 138  5 index 1 141  
12 14 Dtool_hqKxGKB4 6 14 136 0 14 Dtool_hqKxGKB4 2 4 this 3 138  5 index 1 141  
13 14 Dtool_hqKxGZAH 6 15 136 0 14 Dtool_hqKxGZAH 2 4 this 3 138  5 index 1 141  
14 14 Dtool_hqKxm0zh 7 16 147 0 14 Dtool_hqKxm0zh 2 4 this 3 138  5 index 1 141  
15 14 Dtool_hqKxMIZ4 7 17 145 109 14 Dtool_hqKxMIZ4 1 4 this 3 138  
16 14 Dtool_hqKxmLKl 7 18 145 109 14 Dtool_hqKxmLKl 1 4 this 3 138  
17 14 Dtool_hqKx5KMA 6 19 148 0 14 Dtool_hqKx5KMA 1 4 this 3 138  
18 14 Dtool_hqKxcCtG 6 20 151 0 14 Dtool_hqKxcCtG 2 8 hostname 1 136  4 port 1 141  
19 14 Dtool_hqKxKb_Y 6 20 151 0 14 Dtool_hqKxKb_Y 1 8 hostname 1 136  
20 14 Dtool_hqKxcnwA 6 20 151 0 14 Dtool_hqKxcnwA 0 
21 14 Dtool_hqKxBM4i 4 21 137 0 14 Dtool_hqKxBM4i 0 
22 14 Dtool_hqKxgHkh 6 22 151 0 14 Dtool_hqKxgHkh 0 
23 14 Dtool_hqKx8MTf 4 23 137 0 14 Dtool_hqKx8MTf 0 
24 14 Dtool_hqKxIvbW 4 24 137 0 14 Dtool_hqKxIvbW 0 
25 14 Dtool_hqKxpdhP 4 25 137 0 14 Dtool_hqKxpdhP 1 9 sync_name 1 136  
26 14 Dtool_hqKxI65T 4 26 137 0 14 Dtool_hqKxI65T 1 4 this 3 135  
27 14 Dtool_hqKxkXuK 4 27 137 0 14 Dtool_hqKxkXuK 2 4 this 3 135  9 sync_name 1 136  
28 14 Dtool_hqKxB8uW 6 28 151 0 14 Dtool_hqKxB8uW 3 4 this 3 135  8 hostname 1 136  4 port 1 141  
29 14 Dtool_hqKxznlc 4 29 137 0 14 Dtool_hqKxznlc 1 4 this 3 135  
30 14 Dtool_hqKxEbPV 6 30 151 0 14 Dtool_hqKxEbPV 1 4 this 3 138  
31 14 Dtool_hqKxw1Vz 4 31 137 0 14 Dtool_hqKxw1Vz 1 4 this 3 135  
32 14 Dtool_hqKxFDeA 6 32 135 0 14 Dtool_hqKxFDeA 0 
33 14 Dtool_hqKxbf9o 7 34 145 109 14 Dtool_hqKxbf9o 1 4 copy 1 152  
34 14 Dtool_hqKx5dC_ 7 34 145 109 14 Dtool_hqKx5dC_ 2 6 thread 1 147  6 client 1 135  
35 14 Dtool_hqKx9jeO 7 34 145 109 14 Dtool_hqKx9jeO 1 6 thread 1 147  
36 14 Dtool_hqKxU01T 6 35 145 0 14 Dtool_hqKxU01T 2 4 this 3 145  4 copy 1 152  
37 14 Dtool_hqKx4lzU 4 36 137 0 14 Dtool_hqKx4lzU 1 4 this 3 145  
38 14 Dtool_hqKxCDjQ 7 37 147 0 14 Dtool_hqKxCDjQ 1 4 this 3 152  
39 14 Dtool_hqKxE3_Y 6 38 141 0 14 Dtool_hqKxE3_Y 1 4 this 3 152  
40 14 Dtool_hqKxV2Gy 7 41 142 130 14 Dtool_hqKxV2Gy 1 4 copy 1 154  
41 14 Dtool_hqKxzIR6 7 41 142 130 14 Dtool_hqKxzIR6 2 6 parent 1 154  4 name 1 136  
42 14 Dtool_hqKx3W_r 7 41 142 130 14 Dtool_hqKx3W_r 2 4 name 1 136  6 client 1 135  
43 14 Dtool_hqKxAnSO 7 41 142 130 14 Dtool_hqKxAnSO 1 4 name 1 136  
44 14 Dtool_hqKx0a0j 6 42 142 0 14 Dtool_hqKx0a0j 2 4 this 3 142  4 copy 1 154  
45 14 Dtool_hqKxIh5b 6 43 151 0 14 Dtool_hqKxIh5b 1 4 this 3 142  
46 14 Dtool_hqKxqMRt 6 43 151 0 14 Dtool_hqKxqMRt 2 4 this 3 142  6 thread 1 152  
47 14 Dtool_hqKx_sps 6 44 151 0 14 Dtool_hqKx_sps 1 4 this 3 142  
48 14 Dtool_hqKxzXSZ 6 44 151 0 14 Dtool_hqKxzXSZ 2 4 this 3 142  6 thread 1 152  
49 14 Dtool_hqKxq9Pr 4 45 137 0 14 Dtool_hqKxq9Pr 1 4 this 3 142  
50 14 Dtool_hqKxbmiB 4 45 137 0 14 Dtool_hqKxbmiB 2 4 this 3 142  6 thread 1 152  
51 14 Dtool_hqKxKUkn 4 45 137 0 14 Dtool_hqKxKUkn 3 4 this 3 142  6 thread 1 152  5 as_of 1 140  
52 14 Dtool_hqKx6E21 4 46 137 0 14 Dtool_hqKx6E21 1 4 this 3 142  
53 14 Dtool_hqKxeBj_ 4 46 137 0 14 Dtool_hqKxeBj_ 2 4 this 3 142  6 thread 1 152  
54 14 Dtool_hqKxrqtr 4 46 137 0 14 Dtool_hqKxrqtr 3 4 this 3 142  6 thread 1 152  5 as_of 1 140  
55 14 Dtool_hqKxrN32 4 47 137 0 14 Dtool_hqKxrN32 1 4 this 3 142  
56 14 Dtool_hqKxKCnM 4 47 137 0 14 Dtool_hqKxKCnM 2 4 this 3 142  6 thread 1 152  
57 14 Dtool_hqKx_Ueg 4 48 137 0 14 Dtool_hqKx_Ueg 3 4 this 3 142  6 thread 1 152  5 level 1 140  
58 14 Dtool_hqKxSICx 4 48 137 0 14 Dtool_hqKxSICx 2 4 this 3 142  5 level 1 140  
59 14 Dtool_hqKxYbZ8 4 49 137 0 14 Dtool_hqKxYbZ8 3 4 this 3 142  6 thread 1 152  9 increment 1 140  
60 14 Dtool_hqKxJc8M 4 49 137 0 14 Dtool_hqKxJc8M 2 4 this 3 142  9 increment 1 140  
61 14 Dtool_hqKxnh_l 4 50 137 0 14 Dtool_hqKxnh_l 3 4 this 3 142  6 thread 1 152  9 decrement 1 140  
62 14 Dtool_hqKx7Ti2 4 50 137 0 14 Dtool_hqKx7Ti2 2 4 this 3 142  9 decrement 1 140  
63 14 Dtool_hqKxtdLq 4 51 137 0 14 Dtool_hqKxtdLq 2 4 this 3 142  9 increment 1 140  
64 14 Dtool_hqKx_HxT 4 52 137 0 14 Dtool_hqKx_HxT 2 4 this 3 142  9 decrement 1 140  
65 14 Dtool_hqKx1Wny 4 53 137 0 14 Dtool_hqKx1Wny 1 4 this 3 142  
66 14 Dtool_hqKxxyK6 6 54 140 0 14 Dtool_hqKxxyK6 1 4 this 3 142  
67 14 Dtool_hqKxNLjL 6 54 140 0 14 Dtool_hqKxNLjL 2 4 this 3 142  6 thread 1 152  
68 14 Dtool_hqKxI9_B 4 55 137 0 14 Dtool_hqKxI9_B 1 4 this 3 142  
69 14 Dtool_hqKxOiGm 4 56 137 0 14 Dtool_hqKxOiGm 2 4 this 3 142  5 level 1 140  
70 14 Dtool_hqKxg9BC 4 57 137 0 14 Dtool_hqKxg9BC 2 4 this 3 142  9 increment 1 140  
71 14 Dtool_hqKxernr 4 58 137 0 14 Dtool_hqKxernr 2 4 this 3 142  9 decrement 1 140  
72 14 Dtool_hqKxzVad 6 59 140 0 14 Dtool_hqKxzVad 1 4 this 3 142  
73 14 Dtool_hqKxLZXq 6 60 141 0 14 Dtool_hqKxLZXq 1 4 this 3 154  
26
131 11 PStatClient 75777 11 PStatClient 11 PStatClient 0 0 0 0 0 0 30 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 0 1 0 132 0 0 0 0 922
////////////////////////////////////////////////////////////////////
//       Class : PStatClient
// Description : Manages the communications to report statistics via a
//               network connection to a remote PStatServer.
//
//               Normally, there is only one PStatClient in the world,
//               although it is possible to have multiple PStatClients
//               if extraordinary circumstances require in.  Since
//               each PStatCollector registers itself with the
//               PStatClient when it is created, having multiple
//               PStatClients requires special care when constructing
//               the various PStatCollectors.
//
//               If DO_PSTATS is not defined, we don't want to use
//               stats at all.  This class is therefore defined as a
//               stub class.
////////////////////////////////////////////////////////////////////

132 17 ConnectionManager 2049 17 ConnectionManager 17 ConnectionManager 0 0 0 0 0 0 0 0 0 0 0 918
////////////////////////////////////////////////////////////////////
//       Class : ConnectionManager
// Description : The primary interface to the low-level networking
//               layer in this package.  A ConnectionManager is used
//               to establish and destroy TCP and UDP connections.
//               Communication on these connections, once established,
//               is handled via ConnectionReader, ConnectionWriter,
//               and ConnectionListener.
//
//               You may use this class directly if you don't care
//               about tracking which connections have been
//               unexpectedly closed; otherwise, you should use
//               QueuedConnectionManager to get reports about these
//               events (or derive your own class to handle these
//               events properly).
////////////////////////////////////////////////////////////////////

133 11 PStatThread 141313 11 PStatThread 11 PStatThread 0 0 0 1 104 109 0 4 105 106 107 108 0 0 0 0 350
////////////////////////////////////////////////////////////////////
//       Class : PStatThread
// Description : A lightweight class that represents a single thread
//               of execution to PStats.  It corresponds one-to-one
//               with Panda's Thread instance.
////////////////////////////////////////////////////////////////////

134 14 PStatCollector 141313 14 PStatCollector 14 PStatCollector 0 0 0 1 110 130 0 19 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 0 0 0 0 1326
////////////////////////////////////////////////////////////////////
//       Class : PStatCollector
// Description : A lightweight class that represents a single element
//               that may be timed and/or counted via stats.
//
//               Collectors can be used to measure two different kinds
//               of values: elapsed time, and "other".
//
//               To measure elapsed time, call start() and stop() as
//               appropriate to bracket the section of code you want
//               to time (or use a PStatTimer to do this
//               automatically).
//
//               To measure anything else, call set_level() and/or
//               add_level() to set the "level" value associated with
//               this collector.  The meaning of the value set for the
//               "level" is entirely up to the user; it may represent
//               the number of triangles rendered or the kilobytes of
//               texture memory consumed, for instance.  The level set
//               will remain fixed across multiple frames until it is
//               reset via another set_level() or adjusted via a call
//               to add_level().  It may also be completely removed
//               via clear_level().
////////////////////////////////////////////////////////////////////

135 13 PStatClient * 8576 13 PStatClient * 13 PStatClient * 0 0 131 0 0 0 0 0 0 0 0 0

136 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

137 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

138 19 PStatClient const * 8576 19 PStatClient const * 19 PStatClient const * 0 0 139 0 0 0 0 0 0 0 0 0

139 17 PStatClient const 8832 17 PStatClient const 17 PStatClient const 0 0 131 0 0 0 0 0 0 0 0 0

140 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

141 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

142 16 PStatCollector * 8576 16 PStatCollector * 16 PStatCollector * 0 0 134 0 0 0 0 0 0 0 0 0

143 19 PStatCollectorDef * 8576 19 PStatCollectorDef * 19 PStatCollectorDef * 0 0 144 0 0 0 0 0 0 0 0 0

144 17 PStatCollectorDef 1050624 17 PStatCollectorDef 17 PStatCollectorDef 0 0 0 0 0 0 0 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : PStatCollectorDef
// Description : Defines the details about the Collectors: the name,
//               the suggested color, etc.
////////////////////////////////////////////////////////////////////

145 13 PStatThread * 8576 13 PStatThread * 13 PStatThread * 0 0 133 0 0 0 0 0 0 0 0 0

146 6 Thread 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

147 8 Thread * 8576 8 Thread * 8 Thread * 0 0 146 0 0 0 0 0 0 0 0 0

148 19 ClockObject const * 8576 19 ClockObject const * 19 ClockObject const * 0 0 149 0 0 0 0 0 0 0 0 0

149 17 ClockObject const 8832 17 ClockObject const 17 ClockObject const 0 0 150 0 0 0 0 0 0 0 0 0

150 11 ClockObject 2048 11 ClockObject 11 ClockObject 0 0 0 0 0 0 0 0 0 0 0 1483
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  It can run in two modes: In normal
//               mode, get_frame_time() returns the time as of the
//               last time tick() was called.  This is the "discrete"
//               time, and is usually used to get the time as of, for
//               instance, the beginning of the current frame.  In
//               non-real-time mode, get_frame_time() returns a
//               constant increment since the last time tick() was
//               called; this is useful when it is desirable to fake
//               the clock out, for instance for non-real-time
//               animation rendering.
//
//               In both modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

151 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

152 19 PStatThread const * 8576 19 PStatThread const * 19 PStatThread const * 0 0 153 0 0 0 0 0 0 0 0 0

153 17 PStatThread const 8832 17 PStatThread const 17 PStatThread const 0 0 133 0 0 0 0 0 0 0 0 0

154 22 PStatCollector const * 8576 22 PStatCollector const * 22 PStatCollector const * 0 0 155 0 0 0 0 0 0 0 0 0

155 20 PStatCollector const 8832 20 PStatCollector const 20 PStatCollector const 0 0 134 0 0 0 0 0 0 0 0 0

156 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
