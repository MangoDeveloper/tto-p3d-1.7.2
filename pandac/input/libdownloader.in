1145553871
2 2
13 libdownloader 4 2KOd 12 pandaexpress 
353
369 13 set_frequency 4 722 27 AsyncUtility::set_frequency 0 1 1 920
// Filename: asyncUtility.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AsyncUtility::set_frequency
//       Access: Public
//  Description: Fraction of a second.
////////////////////////////////////////////////////////////////////
57
inline void AsyncUtility::set_frequency(float frequency);

370 13 get_frequency 4 722 27 AsyncUtility::get_frequency 0 1 2 223
////////////////////////////////////////////////////////////////////
//     Function: AsyncUtility::get_frequency
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline float AsyncUtility::get_frequency(void) const;

371 13 create_thread 4 722 27 AsyncUtility::create_thread 0 1 3 223
////////////////////////////////////////////////////////////////////
//     Function: AsyncUtility::create_thread
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
void AsyncUtility::create_thread(void);

372 13 ~AsyncUtility 4 722 27 AsyncUtility::~AsyncUtility 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: AsyncUtility::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual AsyncUtility::~AsyncUtility(void);

373 9 ~SSReader 4 723 19 SSReader::~SSReader 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: SSReader::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
34
virtual SSReader::~SSReader(void);

374 16 receive_datagram 4 723 26 SSReader::receive_datagram 0 1 4 527
////////////////////////////////////////////////////////////////////
//     Function: SSReader::receive_datagram
//       Access: Published
//  Description: Receives a datagram over the socket by expecting a
//               little-endian 16-bit byte count as a prefix.  If the
//               socket stream is non-blocking, may return false if
//               the data is not available; otherwise, returns false
//               only if the socket closes.
////////////////////////////////////////////////////////////////////
53
inline bool SSReader::receive_datagram(Datagram &dg);

375 9 is_closed 4 723 19 SSReader::is_closed 0 1 5 0
43
virtual bool SSReader::is_closed(void) = 0;

376 5 close 4 723 15 SSReader::close 0 1 6 0
39
virtual void SSReader::close(void) = 0;

377 9 ~SSWriter 4 724 19 SSWriter::~SSWriter 0 0 252
// SIMULATE_NETWORK_DELAY
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
34
virtual SSWriter::~SSWriter(void);

378 13 send_datagram 4 724 23 SSWriter::send_datagram 0 1 7 504
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::send_datagram
//       Access: Public
//  Description: Transmits the indicated datagram over the socket by
//               prepending it with a little-endian 16-bit byte count.
//               Does not return until the data is sent or the
//               connection is closed, even if the socket stream is
//               non-blocking.
////////////////////////////////////////////////////////////////////
49
bool SSWriter::send_datagram(Datagram const &dg);

379 9 is_closed 4 724 19 SSWriter::is_closed 0 1 8 0
43
virtual bool SSWriter::is_closed(void) = 0;

380 5 close 4 724 15 SSWriter::close 0 1 9 0
39
virtual void SSWriter::close(void) = 0;

381 15 set_collect_tcp 4 724 25 SSWriter::set_collect_tcp 0 1 10 1144
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp
//       Access: Published
//  Description: Enables or disables "collect-tcp" mode.  In this
//               mode, individual TCP packets are not sent
//               immediately, but rather they are collected together
//               and accumulated to be sent periodically as one larger
//               TCP packet.  This cuts down on overhead from the
//               TCP/IP protocol, especially if many small packets
//               need to be sent on the same connection, but it
//               introduces additional latency (since packets must be
//               held before they can be sent).
//
//               See set_collect_tcp_interval() to specify the
//               interval of time for which to hold packets before
//               sending them.
//
//               If you enable this mode, you may also need to
//               periodically call consider_flush() to flush the queue
//               if no packets have been sent recently.
////////////////////////////////////////////////////////////////////
56
inline void SSWriter::set_collect_tcp(bool collect_tcp);

382 15 get_collect_tcp 4 724 25 SSWriter::get_collect_tcp 0 1 11 315
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp
//       Access: Published
//  Description: Returns the current setting of "collect-tcp" mode.
//               See set_collect_tcp().
////////////////////////////////////////////////////////////////////
50
inline bool SSWriter::get_collect_tcp(void) const;

383 24 set_collect_tcp_interval 4 724 34 SSWriter::set_collect_tcp_interval 0 1 12 516
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp_interval
//       Access: Published
//  Description: Specifies the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
////////////////////////////////////////////////////////////////////
64
inline void SSWriter::set_collect_tcp_interval(double interval);

384 24 get_collect_tcp_interval 4 724 34 SSWriter::get_collect_tcp_interval 0 1 13 514
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp_interval
//       Access: Published
//  Description: Returns the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
////////////////////////////////////////////////////////////////////
61
inline double SSWriter::get_collect_tcp_interval(void) const;

385 14 consider_flush 4 724 24 SSWriter::consider_flush 0 1 14 387
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::consider_flush
//       Access: Published
//  Description: Sends the most recently queued data if enough time
//               has elapsed.  This only has meaning if
//               set_collect_tcp() has been set to true.
////////////////////////////////////////////////////////////////////
43
inline bool SSWriter::consider_flush(void);

386 5 flush 4 724 15 SSWriter::flush 0 1 15 355
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
34
inline bool SSWriter::flush(void);

387 17 upcast_to_istream 12 725 32 ISocketStream::upcast_to_istream 0 1 18 36
upcast from ISocketStream to istream
48
istream *ISocketStream::upcast_to_istream(void);

388 25 downcast_to_ISocketStream 12 726 34 istream::downcast_to_ISocketStream 0 1 19 38
downcast from istream to ISocketStream
56
ISocketStream *istream::downcast_to_ISocketStream(void);

389 18 upcast_to_SSReader 12 725 33 ISocketStream::upcast_to_SSReader 0 1 20 37
upcast from ISocketStream to SSReader
50
SSReader *ISocketStream::upcast_to_SSReader(void);

390 25 downcast_to_ISocketStream 12 723 35 SSReader::downcast_to_ISocketStream 0 1 21 39
downcast from SSReader to ISocketStream
57
ISocketStream *SSReader::downcast_to_ISocketStream(void);

391 9 is_closed 4 725 24 ISocketStream::is_closed 0 1 16 0
48
virtual bool ISocketStream::is_closed(void) = 0;

392 5 close 4 725 20 ISocketStream::close 0 1 17 0
44
virtual void ISocketStream::close(void) = 0;

393 14 ~ISocketStream 4 725 29 ISocketStream::~ISocketStream 0 0 0
36
ISocketStream::~ISocketStream(void);

394 17 upcast_to_ostream 12 727 32 OSocketStream::upcast_to_ostream 0 1 25 36
upcast from OSocketStream to ostream
48
ostream *OSocketStream::upcast_to_ostream(void);

395 25 downcast_to_OSocketStream 12 728 34 ostream::downcast_to_OSocketStream 0 1 26 38
downcast from ostream to OSocketStream
56
OSocketStream *ostream::downcast_to_OSocketStream(void);

396 18 upcast_to_SSWriter 12 727 33 OSocketStream::upcast_to_SSWriter 0 1 27 37
upcast from OSocketStream to SSWriter
50
SSWriter *OSocketStream::upcast_to_SSWriter(void);

397 25 downcast_to_OSocketStream 12 724 35 SSWriter::downcast_to_OSocketStream 0 1 28 39
downcast from SSWriter to OSocketStream
57
OSocketStream *SSWriter::downcast_to_OSocketStream(void);

398 9 is_closed 4 727 24 OSocketStream::is_closed 0 1 22 0
48
virtual bool OSocketStream::is_closed(void) = 0;

399 5 close 4 727 20 OSocketStream::close 0 1 23 0
44
virtual void OSocketStream::close(void) = 0;

400 5 flush 4 727 20 OSocketStream::flush 0 1 24 360
////////////////////////////////////////////////////////////////////
//     Function: OSocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
39
inline bool OSocketStream::flush(void);

401 14 ~OSocketStream 4 727 29 OSocketStream::~OSocketStream 0 0 0
36
OSocketStream::~OSocketStream(void);

402 18 upcast_to_iostream 12 729 32 SocketStream::upcast_to_iostream 0 1 32 36
upcast from SocketStream to iostream
49
iostream *SocketStream::upcast_to_iostream(void);

403 24 downcast_to_SocketStream 12 730 34 iostream::downcast_to_SocketStream 0 1 33 38
downcast from iostream to SocketStream
55
SocketStream *iostream::downcast_to_SocketStream(void);

404 18 upcast_to_SSReader 12 729 32 SocketStream::upcast_to_SSReader 0 1 34 36
upcast from SocketStream to SSReader
49
SSReader *SocketStream::upcast_to_SSReader(void);

405 24 downcast_to_SocketStream 12 723 34 SSReader::downcast_to_SocketStream 0 1 35 38
downcast from SSReader to SocketStream
55
SocketStream *SSReader::downcast_to_SocketStream(void);

406 18 upcast_to_SSWriter 12 729 32 SocketStream::upcast_to_SSWriter 0 1 36 36
upcast from SocketStream to SSWriter
49
SSWriter *SocketStream::upcast_to_SSWriter(void);

407 24 downcast_to_SocketStream 12 724 34 SSWriter::downcast_to_SocketStream 0 1 37 38
downcast from SSWriter to SocketStream
55
SocketStream *SSWriter::downcast_to_SocketStream(void);

408 9 is_closed 4 729 23 SocketStream::is_closed 0 1 29 0
47
virtual bool SocketStream::is_closed(void) = 0;

409 5 close 4 729 19 SocketStream::close 0 1 30 0
43
virtual void SocketStream::close(void) = 0;

410 5 flush 4 729 19 SocketStream::flush 0 1 31 359
////////////////////////////////////////////////////////////////////
//     Function: SocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
38
inline bool SocketStream::flush(void);

411 13 ~SocketStream 4 729 27 SocketStream::~SocketStream 0 0 0
34
SocketStream::~SocketStream(void);

412 7 URLSpec 4 731 16 URLSpec::URLSpec 0 4 38 39 40 41 1337
// Filename: urlSpec.I
// Created by:  drose (24Sep02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
23
URLSpec::URLSpec(void);

413 10 operator = 4 731 19 URLSpec::operator = 0 2 42 43 461
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void URLSpec::operator =(basic_string< char > const &url);

414 11 operator == 4 731 20 URLSpec::operator == 0 1 44 219
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool URLSpec::operator ==(URLSpec const &other) const;

415 11 operator != 4 731 20 URLSpec::operator != 0 1 45 219
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool URLSpec::operator !=(URLSpec const &other) const;

416 10 operator < 4 731 19 URLSpec::operator < 0 1 46 218
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline bool URLSpec::operator <(URLSpec const &other) const;

417 10 compare_to 4 731 19 URLSpec::compare_to 0 1 47 397
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this URLSpec
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
59
inline int URLSpec::compare_to(URLSpec const &other) const;

418 10 has_scheme 4 731 19 URLSpec::has_scheme 0 1 48 311
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_scheme
//       Access: Published
//  Description: Returns true if the URL specifies a scheme
//               (e.g. "http:"), false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool URLSpec::has_scheme(void) const;

419 13 has_authority 4 731 22 URLSpec::has_authority 0 1 49 366
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_authority
//       Access: Published
//  Description: Returns true if the URL specifies an authority
//               (this includes username, server, and/or port), false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool URLSpec::has_authority(void) const;

420 12 has_username 4 731 21 URLSpec::has_username 0 1 50 318
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_username
//       Access: Published
//  Description: Returns true if the URL specifies a username
//               (and/or password), false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool URLSpec::has_username(void) const;

421 10 has_server 4 731 19 URLSpec::has_server 0 1 51 301
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_server
//       Access: Published
//  Description: Returns true if the URL specifies a server name,
//               false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool URLSpec::has_server(void) const;

422 8 has_port 4 731 17 URLSpec::has_port 0 1 52 299
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_port
//       Access: Published
//  Description: Returns true if the URL specifies a port number,
//               false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool URLSpec::has_port(void) const;

423 8 has_path 4 731 17 URLSpec::has_path 0 1 53 383
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_path
//       Access: Published
//  Description: Returns true if the URL includes a path specification
//               (that is, the particular filename on the server to
//               retrieve), false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool URLSpec::has_path(void) const;

424 9 has_query 4 731 18 URLSpec::has_query 0 1 54 307
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_query
//       Access: Published
//  Description: Returns true if the URL includes a query
//               specification, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool URLSpec::has_query(void) const;

425 10 get_scheme 4 731 19 URLSpec::get_scheme 0 1 55 319
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_scheme
//       Access: Published
//  Description: Returns the scheme specified by the URL, or empty
//               string if no scheme is specified.
////////////////////////////////////////////////////////////////////
53
basic_string< char > URLSpec::get_scheme(void) const;

426 13 get_authority 4 731 22 URLSpec::get_authority 0 1 56 391
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_authority
//       Access: Published
//  Description: Returns the authority specified by the URL (this
//               includes username, server, and/or port), or empty
//               string if no authority is specified.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > URLSpec::get_authority(void) const;

427 12 get_username 4 731 21 URLSpec::get_username 0 1 57 447
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_username
//       Access: Published
//  Description: Returns the username specified by the URL, if any.
//               This might also include a password,
//               e.g. "username:password", although putting a password
//               on the URL is probably a bad idea.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > URLSpec::get_username(void) const;

428 10 get_server 4 731 19 URLSpec::get_server 0 1 58 272
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server
//       Access: Published
//  Description: Returns the server name specified by the URL, if any.
////////////////////////////////////////////////////////////////////
60
inline basic_string< char > URLSpec::get_server(void) const;

429 12 get_port_str 4 731 21 URLSpec::get_port_str 0 1 59 459
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port_str
//       Access: Published
//  Description: Returns the port specified by the URL as a string, or
//               the empty string if no port is specified.  Compare
//               this with get_port(), which returns a default port
//               number if no port is specified.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > URLSpec::get_port_str(void) const;

430 8 get_port 4 731 17 URLSpec::get_port 0 1 60 317
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port
//       Access: Published
//  Description: Returns the port number specified by the URL, or the
//               default port if not specified.
////////////////////////////////////////////////////////////////////
34
int URLSpec::get_port(void) const;

431 19 get_server_and_port 4 731 28 URLSpec::get_server_and_port 0 1 61 483
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server_and_port
//       Access: Published
//  Description: Returns a string consisting of the server name,
//               followed by a colon, followed by the port number.  If
//               the port number is not explicitly given in the URL,
//               this string will include the implicit port number.
////////////////////////////////////////////////////////////////////
62
basic_string< char > URLSpec::get_server_and_port(void) const;

432 8 get_path 4 731 17 URLSpec::get_path 0 1 62 304
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path
//       Access: Published
//  Description: Returns the path specified by the URL, or "/" if no
//               path is specified.
////////////////////////////////////////////////////////////////////
51
basic_string< char > URLSpec::get_path(void) const;

433 9 get_query 4 731 18 URLSpec::get_query 0 1 63 316
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_query
//       Access: Published
//  Description: Returns the query specified by the URL, or empty
//               string if no query is specified.
////////////////////////////////////////////////////////////////////
59
inline basic_string< char > URLSpec::get_query(void) const;

434 18 get_path_and_query 4 731 27 URLSpec::get_path_and_query 0 1 64 336
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path_and_query
//       Access: Published
//  Description: Returns the path (or "/" if no path is specified),
//               followed by the query if it is specified.
////////////////////////////////////////////////////////////////////
61
basic_string< char > URLSpec::get_path_and_query(void) const;

435 6 is_ssl 4 731 15 URLSpec::is_ssl 0 1 65 350
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::is_ssl
//       Access: Published
//  Description: Returns true if the URL's scheme specifies an
//               SSL-secured protocol such as https, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
40
inline bool URLSpec::is_ssl(void) const;

436 7 get_url 4 731 16 URLSpec::get_url 0 1 66 255
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_url
//       Access: Published
//  Description: Returns the complete URL specification.
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > const &URLSpec::get_url(void) const;

437 10 set_scheme 4 731 19 URLSpec::set_scheme 0 1 67 269
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_scheme
//       Access: Published
//  Description: Replaces the scheme part of the URL specification.
////////////////////////////////////////////////////////////////////
61
void URLSpec::set_scheme(basic_string< char > const &scheme);

438 13 set_authority 4 731 22 URLSpec::set_authority 0 1 68 338
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_authority
//       Access: Published
//  Description: Replaces the authority part of the URL specification.
//               This includes the username, server, and port.
////////////////////////////////////////////////////////////////////
67
void URLSpec::set_authority(basic_string< char > const &authority);

439 12 set_username 4 731 21 URLSpec::set_username 0 1 69 273
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_username
//       Access: Published
//  Description: Replaces the username part of the URL specification.
////////////////////////////////////////////////////////////////////
65
void URLSpec::set_username(basic_string< char > const &username);

440 10 set_server 4 731 19 URLSpec::set_server 0 1 70 269
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server
//       Access: Published
//  Description: Replaces the server part of the URL specification.
////////////////////////////////////////////////////////////////////
61
void URLSpec::set_server(basic_string< char > const &server);

441 8 set_port 4 731 17 URLSpec::set_port 0 2 71 72 578
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification,
//               given a numeric port number.
////////////////////////////////////////////////////////////////////
57
void URLSpec::set_port(basic_string< char > const &port);

442 19 set_server_and_port 4 731 28 URLSpec::set_server_and_port 0 1 73 460
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server_and_port
//       Access: Published
//  Description: Replaces the server and port parts of the URL
//               specification simultaneously.  The input string
//               should be of the form "server:port", or just
//               "server" to make the port number implicit.
////////////////////////////////////////////////////////////////////
79
void URLSpec::set_server_and_port(basic_string< char > const &server_and_port);

443 8 set_path 4 731 17 URLSpec::set_path 0 1 74 265
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_path
//       Access: Published
//  Description: Replaces the path part of the URL specification.
////////////////////////////////////////////////////////////////////
57
void URLSpec::set_path(basic_string< char > const &path);

444 9 set_query 4 731 18 URLSpec::set_query 0 1 75 267
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_query
//       Access: Published
//  Description: Replaces the query part of the URL specification.
////////////////////////////////////////////////////////////////////
59
void URLSpec::set_query(basic_string< char > const &query);

445 7 set_url 4 731 16 URLSpec::set_url 0 2 76 77 441
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_url
//       Access: Published
//  Description: Completely replaces the URL with the indicated
//               string.  If server_name_expected is true, it is a
//               hint that an undecorated URL is probably a server
//               name, not a local filename.
////////////////////////////////////////////////////////////////////
88
void URLSpec::set_url(basic_string< char > const &url, bool server_name_expected = (0));

446 17 operator typecast 4 731 26 URLSpec::operator typecast 0 1 90 229
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::string typecast operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &URLSpec::operator typecast(void) const;

447 5 c_str 4 731 14 URLSpec::c_str 0 1 78 210
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline char const *URLSpec::c_str(void) const;

448 5 empty 4 731 14 URLSpec::empty 0 1 79 210
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
inline bool URLSpec::empty(void) const;

449 6 length 4 731 15 URLSpec::length 0 1 80 211
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline unsigned int URLSpec::length(void) const;

450 11 operator [] 4 731 20 URLSpec::operator [] 0 1 81 222
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline char URLSpec::operator [](int n) const;

451 5 input 4 731 14 URLSpec::input 0 1 82 214
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
bool URLSpec::input(istream &in);

452 6 output 4 731 15 URLSpec::output 0 1 83 215
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
void URLSpec::output(ostream &out) const;

453 5 quote 4 731 14 URLSpec::quote 0 2 84 85 617
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote
//       Access: Published, Static
//  Description: Returns the source string with all "unsafe"
//               characters quoted, making a string suitable for
//               placing in a URL.  Letters, digits, and the
//               underscore, comma, period, and hyphen characters, as
//               well as any included in the safe string, are left
//               alone; all others are converted to hex
//               representation.
////////////////////////////////////////////////////////////////////
121
static basic_string< char > URLSpec::quote(basic_string< char > const &source, basic_string< char > const &safe = ("/"));

454 10 quote_plus 4 731 19 URLSpec::quote_plus 0 2 86 87 330
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote_plus
//       Access: Published, Static
//  Description: Behaves like quote() with the additional behavior of
//               replacing spaces with plus signs.
////////////////////////////////////////////////////////////////////
126
static basic_string< char > URLSpec::quote_plus(basic_string< char > const &source, basic_string< char > const &safe = ("/"));

455 7 unquote 4 731 16 URLSpec::unquote 0 1 88 365
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote
//       Access: Published, Static
//  Description: Reverses the operation of quote(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent.
////////////////////////////////////////////////////////////////////
81
static basic_string< char > URLSpec::unquote(basic_string< char > const &source);

456 12 unquote_plus 4 731 21 URLSpec::unquote_plus 0 1 89 415
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote_plus
//       Access: Published, Static
//  Description: Reverses the operation of quote_plus(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent, and also converts plus signs to spaces.
////////////////////////////////////////////////////////////////////
86
static basic_string< char > URLSpec::unquote_plus(basic_string< char > const &source);

457 8 ~URLSpec 4 731 17 URLSpec::~URLSpec 0 0 0
24
URLSpec::~URLSpec(void);

458 9 ~HTTPEnum 4 732 19 HTTPEnum::~HTTPEnum 0 0 0
26
HTTPEnum::~HTTPEnum(void);

459 8 HTTPDate 4 735 18 HTTPDate::HTTPDate 0 4 91 92 93 94 1706
// Filename: httpDate.I
// Created by:  drose (28Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description: Decodes the string into a sensible date.  Returns 0
//               (!is_valid()) if the string cannot be correctly
//               decoded.
////////////////////////////////////////////////////////////////////
32
inline HTTPDate::HTTPDate(void);

460 10 operator = 4 735 20 HTTPDate::operator = 0 1 95 233
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void HTTPDate::operator =(HTTPDate const &copy);

461 3 now 4 735 13 HTTPDate::now 0 1 96 320
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::now (named constructor)
//       Access: Published, Static
//  Description: Returns an HTTPDate that represents the current time
//               and date.
////////////////////////////////////////////////////////////////////
43
static inline HTTPDate HTTPDate::now(void);

462 8 is_valid 4 735 18 HTTPDate::is_valid 0 1 97 379
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::is_valid
//       Access: Published
//  Description: Returns true if the date is meaningful, or false if
//               it is -1 (which generally indicates the source string
//               could not be parsed.)
////////////////////////////////////////////////////////////////////
43
inline bool HTTPDate::is_valid(void) const;

463 10 get_string 4 735 20 HTTPDate::get_string 0 1 98 219
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_string
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
basic_string< char > HTTPDate::get_string(void) const;

464 8 get_time 4 735 18 HTTPDate::get_time 0 1 99 255
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_time
//       Access: Published
//  Description: Returns the date as a C time_t value.
////////////////////////////////////////////////////////////////////
51
inline unsigned int HTTPDate::get_time(void) const;

465 11 operator == 4 735 21 HTTPDate::operator == 0 1 100 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool HTTPDate::operator ==(HTTPDate const &other) const;

466 11 operator != 4 735 21 HTTPDate::operator != 0 1 101 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool HTTPDate::operator !=(HTTPDate const &other) const;

467 10 operator < 4 735 20 HTTPDate::operator < 0 1 102 219
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool HTTPDate::operator <(HTTPDate const &other) const;

468 10 operator > 4 735 20 HTTPDate::operator > 0 1 103 219
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Operator >
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool HTTPDate::operator >(HTTPDate const &other) const;

469 10 compare_to 4 735 20 HTTPDate::compare_to 0 1 104 399
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPDate
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
61
inline int HTTPDate::compare_to(HTTPDate const &other) const;

470 11 operator += 4 735 21 HTTPDate::operator += 0 1 105 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void HTTPDate::operator +=(int seconds);

471 11 operator -= 4 735 21 HTTPDate::operator -= 0 1 106 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void HTTPDate::operator -=(int seconds);

472 10 operator + 4 735 20 HTTPDate::operator + 0 1 107 219
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::operator +
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline HTTPDate HTTPDate::operator +(int seconds) const;

473 10 operator - 4 735 20 HTTPDate::operator - 0 2 108 109 440
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::operator -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::operator -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline HTTPDate HTTPDate::operator -(int seconds) const;

474 5 input 4 735 15 HTTPDate::input 0 1 110 215
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
bool HTTPDate::input(istream &in);

475 6 output 4 735 16 HTTPDate::output 0 1 111 216
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
42
void HTTPDate::output(ostream &out) const;

476 9 ~HTTPDate 4 735 19 HTTPDate::~HTTPDate 0 0 0
26
HTTPDate::~HTTPDate(void);

477 10 HTTPCookie 4 736 22 HTTPCookie::HTTPCookie 0 3 112 113 114 1817
// Filename: httpCookie.I
// Created by:  drose (26Aug04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs an empty cookie.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie according to the indicated
//               string, presumably the tag of a Set-Cookie header.
//               There is no way to detect a formatting error in the
//               string with this constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie with the indicated name, path,
//               and domain values, but no other data.  This is most
//               useful for looking up an existing cookie in the
//               HTTPClient.
////////////////////////////////////////////////////////////////////
36
inline HTTPCookie::HTTPCookie(void);

478 11 ~HTTPCookie 4 736 23 HTTPCookie::~HTTPCookie 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline HTTPCookie::~HTTPCookie(void);

479 8 set_name 4 736 20 HTTPCookie::set_name 0 1 115 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HTTPCookie::set_name(basic_string< char > const &name);

480 8 get_name 4 736 20 HTTPCookie::get_name 0 1 116 316
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_name
//       Access: Published
//  Description: Returns the name of the cookie.  This is the key
//               value specified by the server.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > const &HTTPCookie::get_name(void) const;

481 9 set_value 4 736 21 HTTPCookie::set_value 0 1 117 221
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline void HTTPCookie::set_value(basic_string< char > const &value);

482 9 get_value 4 736 21 HTTPCookie::get_value 0 1 118 380
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_value
//       Access: Published
//  Description: Returns the value of the cookie.  This is the
//               arbitrary string associated with the cookie's name,
//               as specified by the server.
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > const &HTTPCookie::get_value(void) const;

483 10 set_domain 4 736 22 HTTPCookie::set_domain 0 1 119 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_domain
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void HTTPCookie::set_domain(basic_string< char > const &domain);

484 10 get_domain 4 736 22 HTTPCookie::get_domain 0 1 120 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_domain
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &HTTPCookie::get_domain(void) const;

485 8 set_path 4 736 20 HTTPCookie::set_path 0 1 121 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_path
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HTTPCookie::set_path(basic_string< char > const &path);

486 8 get_path 4 736 20 HTTPCookie::get_path 0 1 122 322
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_path
//       Access: Published
//  Description: Returns the prefix of the URL paths on the server for
//               which this cookie will be sent.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > const &HTTPCookie::get_path(void) const;

487 11 set_expires 4 736 23 HTTPCookie::set_expires 0 1 123 223
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_expires
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HTTPCookie::set_expires(HTTPDate const &expires);

488 13 clear_expires 4 736 25 HTTPCookie::clear_expires 0 1 124 267
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::clear_expires
//       Access: Published
//  Description: Removes the expiration date on the cookie.
////////////////////////////////////////////////////////////////////
44
inline void HTTPCookie::clear_expires(void);

489 11 has_expires 4 736 23 HTTPCookie::has_expires 0 1 125 307
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::has_expires
//       Access: Published
//  Description: Returns true if the cookie has an expiration date,
//               false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool HTTPCookie::has_expires(void) const;

490 11 get_expires 4 736 23 HTTPCookie::get_expires 0 1 126 328
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_expires
//       Access: Published
//  Description: Returns the expiration date of the cookie if it is
//               set, or an invalid date if it is not.
////////////////////////////////////////////////////////////////////
52
inline HTTPDate HTTPCookie::get_expires(void) const;

491 10 set_secure 4 736 22 HTTPCookie::set_secure 0 1 127 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_secure
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void HTTPCookie::set_secure(bool flag);

492 10 get_secure 4 736 22 HTTPCookie::get_secure 0 1 128 371
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_secure
//       Access: Published
//  Description: Returns true if the server has indicated this is a
//               "secure" cookie which should only be sent over an
//               HTTPS channel.
////////////////////////////////////////////////////////////////////
47
inline bool HTTPCookie::get_secure(void) const;

493 10 operator < 4 736 22 HTTPCookie::operator < 0 1 129 412
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::operator <
//       Access: Published
//  Description: The sorting operator allows the cookies to be stored
//               in a single dictionary; it returns nonequal only if
//               the cookies are different in name, path, or domain.
////////////////////////////////////////////////////////////////////
59
bool HTTPCookie::operator <(HTTPCookie const &other) const;

494 11 update_from 4 736 23 HTTPCookie::update_from 0 1 130 660
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::update_from
//       Access: Published
//  Description: Assuming the operator < method, above, has already
//               evaluated these two cookies as equal, then assign the
//               remaining values (value, expiration date, secure
//               flag) from the indicated cookie.  This is guaranteed
//               not to change the ordering of the cookie in a set,
//               and so can be used to update an existing cookie
//               within a set with new values.
////////////////////////////////////////////////////////////////////
54
void HTTPCookie::update_from(HTTPCookie const &other);

495 16 parse_set_cookie 4 736 28 HTTPCookie::parse_set_cookie 0 1 131 497
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::parse_set_cookie
//       Access: Published
//  Description: Separates out the parameter/value pairs of the
//               Set-Cookie header and assigns the values of the
//               cookie appropriate.  Returns true if the header is
//               parsed correctly, false if something is not
//               understood.
////////////////////////////////////////////////////////////////////
90
bool HTTPCookie::parse_set_cookie(basic_string< char > const &format, URLSpec const &url);

496 10 is_expired 4 736 22 HTTPCookie::is_expired 0 2 132 133 330
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::is_expired
//       Access: Published
//  Description: Returns true if the cookie's expiration date is
//               before the indicated date, false otherwise.
////////////////////////////////////////////////////////////////////
74
inline bool HTTPCookie::is_expired(HTTPDate const &now = ((now()))) const;

497 11 matches_url 4 736 23 HTTPCookie::matches_url 0 1 134 338
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::matches_url
//       Access: Published
//  Description: Returns true if the cookie is appropriate to send
//               with the indicated URL request, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool HTTPCookie::matches_url(URLSpec const &url) const;

498 6 output 4 736 18 HTTPCookie::output 0 1 135 218
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
void HTTPCookie::output(ostream &out) const;

499 10 HTTPClient 4 737 22 HTTPClient::HTTPClient 0 2 136 137 451
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
29
HTTPClient::HTTPClient(void);

500 10 operator = 4 737 22 HTTPClient::operator = 0 1 138 235
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void HTTPClient::operator =(HTTPClient const &copy);

501 11 ~HTTPClient 4 737 23 HTTPClient::~HTTPClient 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
HTTPClient::~HTTPClient(void);

502 16 init_random_seed 4 737 28 HTTPClient::init_random_seed 0 1 139 934
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::init_random_seed
//       Access: Published, Static
//  Description: This may be called once, presumably at the beginning
//               of an application, to initialize OpenSSL's random
//               seed.  On Windows, it is particularly important to
//               call this at startup if you are going to be perfoming
//               any https operations or otherwise use encryption,
//               since the Windows algorithm for getting a random seed
//               takes 2-3 seconds at startup, but can take 30 seconds
//               or more after you have opened a 3-D graphics window
//               and started rendering.
//
//               There is no harm in calling this method multiple
//               times, or in not calling it at all.
////////////////////////////////////////////////////////////////////
47
static void HTTPClient::init_random_seed(void);

503 14 set_proxy_spec 4 737 26 HTTPClient::set_proxy_spec 0 1 140 859
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_proxy_spec
//       Access: Published
//  Description: Specifies the complete set of proxies to use for all
//               schemes.  This is either a semicolon-delimited set of
//               hostname:ports, or a semicolon-delimited set of pairs
//               of the form "scheme=hostname:port", or a combination.
//               Use the keyword DIRECT, or an empty string, to
//               represent a direct connection.  A particular scheme
//               and/or proxy host may be listed more than once.  This
//               is a convenience function that can be used in place
//               of explicit calls to add_proxy() for each
//               scheme/proxy pair.
////////////////////////////////////////////////////////////////////
72
void HTTPClient::set_proxy_spec(basic_string< char > const &proxy_spec);

504 14 get_proxy_spec 4 737 26 HTTPClient::get_proxy_spec 0 1 141 676
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxy_spec
//       Access: Published
//  Description: Returns the complete set of proxies to use for all
//               schemes.  This is a string of the form specified by
//               set_proxy_spec(), above.  Note that the string
//               returned by this function may not be exactly the same
//               as the string passed into set_proxy_spec(), since the
//               string is regenerated from the internal storage
//               structures and may therefore be reordered.
////////////////////////////////////////////////////////////////////
60
basic_string< char > HTTPClient::get_proxy_spec(void) const;

505 20 set_direct_host_spec 4 737 32 HTTPClient::set_direct_host_spec 0 1 142 463
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_direct_host_spec
//       Access: Published
//  Description: Specifies the set of hosts that should be connected
//               to directly, without using a proxy.  This is a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
////////////////////////////////////////////////////////////////////
84
void HTTPClient::set_direct_host_spec(basic_string< char > const &direct_host_spec);

506 20 get_direct_host_spec 4 737 32 HTTPClient::get_direct_host_spec 0 1 143 455
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_direct_host_spec
//       Access: Published
//  Description: Returns the set of hosts that should be connected
//               to directly, without using a proxy, as a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
////////////////////////////////////////////////////////////////////
66
basic_string< char > HTTPClient::get_direct_host_spec(void) const;

507 18 set_try_all_direct 4 737 30 HTTPClient::set_try_all_direct 0 1 144 1275
// Filename: httpClient.I
// Created by:  drose (24Sep02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_try_all_direct
//       Access: Published
//  Description: If this is set true, then after a connection attempt
//               through a proxy fails, we always try a direct
//               connection, regardless of whether the host is listed
//               on the direct_host_spec list.  If this is false, a
//               direct attempt is not made when we have a proxy in
//               effect, even if the proxy fails.
////////////////////////////////////////////////////////////////////
64
inline void HTTPClient::set_try_all_direct(bool try_all_direct);

508 18 get_try_all_direct 4 737 30 HTTPClient::get_try_all_direct 0 1 145 384
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_try_all_direct
//       Access: Published
//  Description: Returns whether a failed connection through a proxy
//               will be followed up by a direct connection attempt,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool HTTPClient::get_try_all_direct(void) const;

509 11 clear_proxy 4 737 23 HTTPClient::clear_proxy 0 1 146 371
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_proxy
//       Access: Published
//  Description: Resets the proxy spec to empty.  Subsequent calls to
//               add_proxy() may be made to build up the set of proxy
//               servers.
////////////////////////////////////////////////////////////////////
35
void HTTPClient::clear_proxy(void);

510 9 add_proxy 4 737 21 HTTPClient::add_proxy 0 1 147 540
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_proxy
//       Access: Published
//  Description: Adds the indicated proxy host as a proxy for
//               communications on the given scheme.  Usually the
//               scheme is "http" or "https".  It may be the empty
//               string to indicate a general proxy.  The proxy string
//               may be the empty URL to indicate a direct connection.
////////////////////////////////////////////////////////////////////
85
void HTTPClient::add_proxy(basic_string< char > const &scheme, URLSpec const &proxy);

511 17 clear_direct_host 4 737 29 HTTPClient::clear_direct_host 0 1 148 441
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_direct_host
//       Access: Published
//  Description: Resets the set of direct hosts to empty.  Subsequent
//               calls to add_direct_host() may be made to build up
//               the list of hosts that do not require a proxy
//               connection.
////////////////////////////////////////////////////////////////////
41
void HTTPClient::clear_direct_host(void);

512 15 add_direct_host 4 737 27 HTTPClient::add_direct_host 0 1 149 483
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_direct_host
//       Access: Published
//  Description: Adds the indicated name to the set of hostnames that
//               are connected to directly, without using a proxy.
//               This name may be either a DNS name or an IP address,
//               and it may include the * as a wildcard character.
////////////////////////////////////////////////////////////////////
71
void HTTPClient::add_direct_host(basic_string< char > const &hostname);

513 19 get_proxies_for_url 4 737 31 HTTPClient::get_proxies_for_url 0 2 150 151 1210
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxies_for_url
//       Access: Published
//  Description: Fills up the indicated vector with the list of
//               URLSpec objects, in the order in which they should be
//               tried, that are appropriate proxies to try for the
//               indicated URL.  The empty URL is returned for a
//               direct connection.
//
//               It is the user's responsibility to empty this vector
//               before calling this method; otherwise, the proxy
//               URL's will simply be appended to the existing list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxies_for_url
//       Access: Published
//  Description: Returns a semicolon-delimited list of proxies, in the
//               order in which they should be tried, that are
//               appropriate for the indicated URL.  The keyword
//               DIRECT indicates a direct connection should be tried.
////////////////////////////////////////////////////////////////////
91
void HTTPClient::get_proxies_for_url(URLSpec const &url, vector< URLSpec > &proxies) const;

514 12 set_username 4 737 24 HTTPClient::set_username 0 1 152 765
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_username
//       Access: Published
//  Description: Specifies the username:password string corresponding
//               to a particular server and/or realm, when demanded by
//               the server.  Either or both of the server or realm
//               may be empty; if so, they match anything.  Also, the
//               server may be set to the special string "*proxy",
//               which will match any proxy server.
//
//               If the username is set to the empty string, this
//               clears the password for the particular server/realm
//               pair.
////////////////////////////////////////////////////////////////////
139
void HTTPClient::set_username(basic_string< char > const &server, basic_string< char > const &realm, basic_string< char > const &username);

515 12 get_username 4 737 24 HTTPClient::get_username 0 1 153 388
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_username
//       Access: Published
//  Description: Returns the username:password string set for this
//               server/realm pair, or empty string if nothing has
//               been set.  See set_username().
////////////////////////////////////////////////////////////////////
123
basic_string< char > HTTPClient::get_username(basic_string< char > const &server, basic_string< char > const &realm) const;

516 10 set_cookie 4 737 22 HTTPClient::set_cookie 0 1 154 341
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cookie
//       Access: Published
//  Description: Stores the indicated cookie in the client's list of
//               cookies, as if it had been received from a server.
////////////////////////////////////////////////////////////////////
54
void HTTPClient::set_cookie(HTTPCookie const &cookie);

517 12 clear_cookie 4 737 24 HTTPClient::clear_cookie 0 1 155 416
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_cookie
//       Access: Published
//  Description: Removes the cookie with the matching domain/path/name
//               from the client's list of cookies.  Returns true if
//               it was removed, false if the cookie was not matched.
////////////////////////////////////////////////////////////////////
56
bool HTTPClient::clear_cookie(HTTPCookie const &cookie);

518 17 clear_all_cookies 4 737 29 HTTPClient::clear_all_cookies 0 1 156 276
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_all_cookies
//       Access: Published
//  Description: Removes the all stored cookies from the client.
////////////////////////////////////////////////////////////////////
41
void HTTPClient::clear_all_cookies(void);

519 10 has_cookie 4 737 22 HTTPClient::has_cookie 0 1 157 366
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::has_cookie
//       Access: Published
//  Description: Returns true if there is a cookie in the client
//               matching the given cookie's domain/path/name, false
//               otherwise.
////////////////////////////////////////////////////////////////////
60
bool HTTPClient::has_cookie(HTTPCookie const &cookie) const;

520 10 get_cookie 4 737 22 HTTPClient::get_cookie 0 1 158 405
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cookie
//       Access: Published
//  Description: Looks up and returns the cookie in the client
//               matching the given cookie's domain/path/name.  If
//               there is no matching cookie, returns an empty cookie.
////////////////////////////////////////////////////////////////////
66
HTTPCookie HTTPClient::get_cookie(HTTPCookie const &cookie) const;

521 13 write_cookies 4 737 25 HTTPClient::write_cookies 0 1 159 431
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::write_cookies
//       Access: Published
//  Description: Outputs the complete list of cookies stored on the
//               client, for all domains, including the expired
//               cookies (which will normally not be sent back to a
//               host).
////////////////////////////////////////////////////////////////////
51
void HTTPClient::write_cookies(ostream &out) const;

522 12 send_cookies 4 737 24 HTTPClient::send_cookies 0 1 160 450
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::send_cookies
//       Access: Published
//  Description: Writes to the indicated ostream a "Cookie" header
//               line for sending the cookies appropriate to the
//               indicated URL along with an HTTP request.  This also
//               removes expired cookies.
////////////////////////////////////////////////////////////////////
64
void HTTPClient::send_cookies(ostream &out, URLSpec const &url);

523 31 set_client_certificate_filename 4 737 43 HTTPClient::set_client_certificate_filename 0 1 161 542
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_filename
//       Access: Published
//  Description: Sets the filename of the pem-formatted file that will
//               be read for the client public and private keys if an
//               SSL server requests a certificate.  Either this or
//               set_client_certificate_pem() may be used to specify a
//               client certificate.
////////////////////////////////////////////////////////////////////
82
inline void HTTPClient::set_client_certificate_filename(Filename const &filename);

524 26 set_client_certificate_pem 4 737 38 HTTPClient::set_client_certificate_pem 0 1 162 551
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_pem
//       Access: Published
//  Description: Sets the pem-formatted contents of the certificate
//               that will be parsed for the client public and private
//               keys if an SSL server requests a certificate.  Either
//               this or set_client_certificate_filename() may be used
//               to specify a client certificate.
////////////////////////////////////////////////////////////////////
84
inline void HTTPClient::set_client_certificate_pem(basic_string< char > const &pem);

525 33 set_client_certificate_passphrase 4 737 45 HTTPClient::set_client_certificate_passphrase 0 1 163 442
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_passphrase
//       Access: Published
//  Description: Sets the passphrase used to decrypt the private key
//               in the certificate named by
//               set_client_certificate_filename() or
//               set_client_certificate_pem().
////////////////////////////////////////////////////////////////////
98
inline void HTTPClient::set_client_certificate_passphrase(basic_string< char > const &passphrase);

526 23 load_client_certificate 4 737 35 HTTPClient::load_client_certificate 0 1 164 690
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_client_certificate
//       Access: Published
//  Description: Attempts to load the certificate named by
//               set_client_certificate_filename() immediately, and
//               returns true if successful, false otherwise.
//
//               Normally this need not be explicitly called, since it
//               will be called automatically if the server requests a
//               certificate, but it may be useful to determine ahead
//               of time if the certificate can be loaded correctly.
////////////////////////////////////////////////////////////////////
47
bool HTTPClient::load_client_certificate(void);

527 16 set_http_version 4 737 28 HTTPClient::set_http_version 0 1 165 483
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_http_version
//       Access: Published
//  Description: Specifies the version of HTTP that the client uses to
//               identify itself to the server.  The default is HV_11,
//               or HTTP 1.0; you can set this to HV_10 (HTTP 1.0) to
//               request the server use the older interface.
////////////////////////////////////////////////////////////////////
72
inline void HTTPClient::set_http_version(HTTPEnum::HTTPVersion version);

528 16 get_http_version 4 737 28 HTTPClient::get_http_version 0 1 166 324
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version
//       Access: Published
//  Description: Returns the client's current setting for HTTP
//               version.  See set_http_version().
////////////////////////////////////////////////////////////////////
70
inline HTTPEnum::HTTPVersion HTTPClient::get_http_version(void) const;

529 23 get_http_version_string 4 737 35 HTTPClient::get_http_version_string 0 1 167 336
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version_string
//       Access: Published
//  Description: Returns the current HTTP version setting as a string,
//               e.g. "HTTP/1.0" or "HTTP/1.1".
////////////////////////////////////////////////////////////////////
69
basic_string< char > HTTPClient::get_http_version_string(void) const;

530 25 parse_http_version_string 4 737 37 HTTPClient::parse_http_version_string 0 1 168 464
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::parse_http_version_string
//       Access: Published
//  Description: Matches the string representing a particular HTTP
//               version against any of the known versions and returns
//               the appropriate enumerated value, or HV_other if the
//               version is unknown.
////////////////////////////////////////////////////////////////////
104
static HTTPEnum::HTTPVersion HTTPClient::parse_http_version_string(basic_string< char > const &version);

531 17 load_certificates 4 737 29 HTTPClient::load_certificates 0 1 169 539
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_certificates
//       Access: Published
//  Description: Reads the certificate(s) (delimited by -----BEGIN
//               CERTIFICATE----- and -----END CERTIFICATE-----) from
//               the indicated file and makes them known as trusted
//               public keys for validating future connections.
//               Returns true on success, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HTTPClient::load_certificates(Filename const &filename);

532 14 set_verify_ssl 4 737 26 HTTPClient::set_verify_ssl 0 1 170 556
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_verify_ssl
//       Access: Published
//  Description: Specifies whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  
//
//               The parameter value is an enumerated type which
//               indicates the level of security to which the client
//               will insist upon.
////////////////////////////////////////////////////////////////////
73
inline void HTTPClient::set_verify_ssl(HTTPClient::VerifySSL verify_ssl);

533 14 get_verify_ssl 4 737 26 HTTPClient::get_verify_ssl 0 1 171 403
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_verify_ssl
//       Access: Published
//  Description: Returns whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  See set_verify_ssl().
////////////////////////////////////////////////////////////////////
68
inline HTTPClient::VerifySSL HTTPClient::get_verify_ssl(void) const;

534 15 set_cipher_list 4 737 27 HTTPClient::set_cipher_list 0 1 172 715
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cipher_list
//       Access: Published
//  Description: Specifies the set of ciphers that are to be made
//               available for SSL connections.  This is a string as
//               described in the ciphers(1) man page of the OpenSSL
//               documentation (or see
//               http://www.openssl.org/docs/apps/ciphers.html ).  If
//               this is not specified, the default is provided by the
//               Config file.  You may also specify "DEFAULT" to use
//               the built-in OpenSSL default value.
////////////////////////////////////////////////////////////////////
81
inline void HTTPClient::set_cipher_list(basic_string< char > const &cipher_list);

535 15 get_cipher_list 4 737 27 HTTPClient::get_cipher_list 0 1 173 323
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cipher_list
//       Access: Published
//  Description: Returns the set of ciphers as set by
//               set_cipher_list().  See set_cipher_list().
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &HTTPClient::get_cipher_list(void) const;

536 19 add_expected_server 4 737 31 HTTPClient::add_expected_server 0 1 174 1009
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_expected_server
//       Access: Published
//  Description: Adds the indicated string as a definition of a valid
//               server to contact via https.  If no servers have been
//               been added, an https connection will be allowed to
//               any server.  If at least one server has been added,
//               an https connection will be allowed to any of the
//               named servers, but none others.
//
//               The string passed in defines a subset of the server
//               properties that are to be insisted on, using the X509
//               naming convention, e.g. O=WDI/OU=VRStudio/CN=ttown.
//
//               It makes sense to use this in conjunction with
//               set_verify_ssl(), which insists that the https
//               connection uses a verifiable certificate.
////////////////////////////////////////////////////////////////////
84
bool HTTPClient::add_expected_server(basic_string< char > const &server_attributes);

537 22 clear_expected_servers 4 737 34 HTTPClient::clear_expected_servers 0 1 175 347
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_expected_servers
//       Access: Published
//  Description: Clears the set of expected servers; the HTTPClient
//               will allow an https connection to any server.
////////////////////////////////////////////////////////////////////
46
void HTTPClient::clear_expected_servers(void);

538 12 make_channel 4 737 24 HTTPClient::make_channel 0 1 176 1184
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::make_channel
//       Access: Published
//  Description: Returns a new HTTPChannel object that may be used
//               for reading multiple documents using the same
//               connection, for greater network efficiency than
//               calling HTTPClient::get_document() repeatedly (which
//               would force a new connection for each document).
//
//               Also, HTTPChannel has some additional, less common
//               interface methods than the basic interface methods
//               that exist on HTTPClient; if you wish to call any of
//               these methods you must first obtain an HTTPChannel.
//
//               Pass true for persistent_connection to gain this
//               network efficiency.  If, on the other hand, your
//               intention is to use the channel to retrieve only one
//               document, then pass false to inform the server that
//               we will be dropping the connection after the first
//               document.
////////////////////////////////////////////////////////////////////
78
PointerTo< HTTPChannel > HTTPClient::make_channel(bool persistent_connection);

539 9 post_form 4 737 21 HTTPClient::post_form 0 1 177 531
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.  Returns a new HTTPChannel object whether
//               the document is successfully read or not; you can
//               test is_valid() and get_return_code() to determine
//               whether the document was retrieved.
////////////////////////////////////////////////////////////////////
101
PointerTo< HTTPChannel > HTTPClient::post_form(URLSpec const &url, basic_string< char > const &body);

540 12 get_document 4 737 24 HTTPClient::get_document 0 1 178 508
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_document
//       Access: Published
//  Description: Opens the named document for reading.  Returns a new
//               HTTPChannel object whether the document is
//               successfully read or not; you can test is_valid() and
//               get_return_code() to determine whether the document
//               was retrieved.
////////////////////////////////////////////////////////////////////
70
PointerTo< HTTPChannel > HTTPClient::get_document(URLSpec const &url);

541 10 get_header 4 737 22 HTTPClient::get_header 0 1 179 522
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
////////////////////////////////////////////////////////////////////
68
PointerTo< HTTPChannel > HTTPClient::get_header(URLSpec const &url);

542 13 base64_encode 4 737 25 HTTPClient::base64_encode 0 1 180 489
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_encode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_encode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
////////////////////////////////////////////////////////////////////
92
static inline basic_string< char > HTTPClient::base64_encode(basic_string< char > const &s);

543 13 base64_decode 4 737 25 HTTPClient::base64_decode 0 1 181 489
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_decode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_decode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
////////////////////////////////////////////////////////////////////
92
static inline basic_string< char > HTTPClient::base64_decode(basic_string< char > const &s);

544 13 HTTPEntityTag 4 739 28 HTTPEntityTag::HTTPEntityTag 0 4 182 183 184 185 1847
// Filename: httpEntityTag.I
// Created by:  drose (28Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts an explicit weak flag and a
//               literal (not quoted) tag string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts a string as formatted from
//               an HTTP server (e.g. the tag is quoted, with an
//               optional W/ prefix.)
////////////////////////////////////////////////////////////////////
42
inline HTTPEntityTag::HTTPEntityTag(void);

545 10 operator = 4 739 25 HTTPEntityTag::operator = 0 1 186 238
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void HTTPEntityTag::operator =(HTTPEntityTag const &copy);

546 7 is_weak 4 739 22 HTTPEntityTag::is_weak 0 1 187 525
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::is_weak
//       Access: Published
//  Description: Returns true if the entity tag is marked as "weak".
//               A consistent weak entity tag does not guarantee that
//               its resource has not changed in any way, but it does
//               promise that the resource has not changed in any
//               semantically meaningful way.
////////////////////////////////////////////////////////////////////
47
inline bool HTTPEntityTag::is_weak(void) const;

547 7 get_tag 4 739 22 HTTPEntityTag::get_tag 0 1 188 258
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_tag
//       Access: Published
//  Description: Returns the tag as a literal string.
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &HTTPEntityTag::get_tag(void) const;

548 10 get_string 4 739 25 HTTPEntityTag::get_string 0 1 189 372
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_string
//       Access: Published
//  Description: Returns the entity tag formatted for sending to an
//               HTTP server (the tag is quoted, with a conditional W/
//               prefix).
////////////////////////////////////////////////////////////////////
59
basic_string< char > HTTPEntityTag::get_string(void) const;

549 12 strong_equiv 4 739 27 HTTPEntityTag::strong_equiv 0 1 190 345
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::strong_equiv
//       Access: Published
//  Description: Returns true if the two tags have "strong" equivalence:
//               they are the same tag, and both are "strong".
////////////////////////////////////////////////////////////////////
74
inline bool HTTPEntityTag::strong_equiv(HTTPEntityTag const &other) const;

550 10 weak_equiv 4 739 25 HTTPEntityTag::weak_equiv 0 1 191 349
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::weak_equiv
//       Access: Published
//  Description: Returns true if the two tags have "weak" equivalence:
//               they are the same tag, and one or both may be "weak".
////////////////////////////////////////////////////////////////////
72
inline bool HTTPEntityTag::weak_equiv(HTTPEntityTag const &other) const;

551 11 operator == 4 739 26 HTTPEntityTag::operator == 0 1 192 381
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Operator ==
//       Access: Published
//  Description: The == operator tests object equivalence; see also
//               strong_equiv() and weak_equiv() for the two kinds of
//               HTTP equivalence.
////////////////////////////////////////////////////////////////////
73
inline bool HTTPEntityTag::operator ==(HTTPEntityTag const &other) const;

552 11 operator != 4 739 26 HTTPEntityTag::operator != 0 1 193 225
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool HTTPEntityTag::operator !=(HTTPEntityTag const &other) const;

553 10 operator < 4 739 25 HTTPEntityTag::operator < 0 1 194 224
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline bool HTTPEntityTag::operator <(HTTPEntityTag const &other) const;

554 10 compare_to 4 739 25 HTTPEntityTag::compare_to 0 1 195 409
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPEntityTag
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
71
inline int HTTPEntityTag::compare_to(HTTPEntityTag const &other) const;

555 6 output 4 739 21 HTTPEntityTag::output 0 1 196 221
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline void HTTPEntityTag::output(ostream &out) const;

556 14 ~HTTPEntityTag 4 739 29 HTTPEntityTag::~HTTPEntityTag 0 0 0
36
HTTPEntityTag::~HTTPEntityTag(void);

557 12 DocumentSpec 4 740 26 DocumentSpec::DocumentSpec 0 4 197 198 199 200 1583
// Filename: documentSpec.I
// Created by:  drose (28Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline DocumentSpec::DocumentSpec(void);

558 10 operator = 4 740 24 DocumentSpec::operator = 0 1 201 237
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void DocumentSpec::operator =(DocumentSpec const &copy);

559 11 operator == 4 740 25 DocumentSpec::operator == 0 1 202 224
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline bool DocumentSpec::operator ==(DocumentSpec const &other) const;

560 11 operator != 4 740 25 DocumentSpec::operator != 0 1 203 224
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline bool DocumentSpec::operator !=(DocumentSpec const &other) const;

561 10 operator < 4 740 24 DocumentSpec::operator < 0 1 204 223
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline bool DocumentSpec::operator <(DocumentSpec const &other) const;

562 10 compare_to 4 740 24 DocumentSpec::compare_to 0 1 205 224
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::compare_to
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
int DocumentSpec::compare_to(DocumentSpec const &other) const;

563 7 set_url 4 740 21 DocumentSpec::set_url 0 1 206 598
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_url
//       Access: Published
//  Description: Changes the URL of the DocumentSpec without modifying
//               its other properties.  Normally this would be a
//               strange thing to do, because the tag and date are
//               usually strongly associated with the URL.  To get a
//               DocumentSpec pointing to a new URL, you would
//               normally create a new DocumentSpec object.
////////////////////////////////////////////////////////////////////
54
inline void DocumentSpec::set_url(URLSpec const &url);

564 7 get_url 4 740 21 DocumentSpec::get_url 0 1 207 259
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_url
//       Access: Published
//  Description: Retrieves the URL of the DocumentSpec.
////////////////////////////////////////////////////////////////////
56
inline URLSpec const &DocumentSpec::get_url(void) const;

565 7 set_tag 4 740 21 DocumentSpec::set_tag 0 1 208 296
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_tag
//       Access: Published
//  Description: Changes the identity tag associated with the
//               DocumentSpec.
////////////////////////////////////////////////////////////////////
60
inline void DocumentSpec::set_tag(HTTPEntityTag const &tag);

566 7 has_tag 4 740 21 DocumentSpec::has_tag 0 1 209 306
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_tag
//       Access: Published
//  Description: Returns true if an identity tag is associated with
//               the DocumentSpec.
////////////////////////////////////////////////////////////////////
46
inline bool DocumentSpec::has_tag(void) const;

567 7 get_tag 4 740 21 DocumentSpec::get_tag 0 1 210 524
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_tag
//       Access: Published
//  Description: Returns the identity tag associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_tag() returns false.
//
//               The identity tag is set by the HTTP server to
//               uniquely refer to a particular version of a document.
////////////////////////////////////////////////////////////////////
62
inline HTTPEntityTag const &DocumentSpec::get_tag(void) const;

568 9 clear_tag 4 740 23 DocumentSpec::clear_tag 0 1 211 315
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_tag
//       Access: Published
//  Description: Removes the identity tag associated with the
//               DocumentSpec, if there is one.
////////////////////////////////////////////////////////////////////
42
inline void DocumentSpec::clear_tag(void);

569 8 set_date 4 740 22 DocumentSpec::set_date 0 1 212 303
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_date
//       Access: Published
//  Description: Changes the last-modified date associated with the
//               DocumentSpec.
////////////////////////////////////////////////////////////////////
57
inline void DocumentSpec::set_date(HTTPDate const &date);

570 8 has_date 4 740 22 DocumentSpec::has_date 0 1 213 312
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_date
//       Access: Published
//  Description: Returns true if a last-modified date is associated
//               with the DocumentSpec.
////////////////////////////////////////////////////////////////////
47
inline bool DocumentSpec::has_date(void) const;

571 8 get_date 4 740 22 DocumentSpec::get_date 0 1 214 395
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_date
//       Access: Published
//  Description: Returns the last-modified date associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_date() returns false.
////////////////////////////////////////////////////////////////////
58
inline HTTPDate const &DocumentSpec::get_date(void) const;

572 10 clear_date 4 740 24 DocumentSpec::clear_date 0 1 215 322
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_date
//       Access: Published
//  Description: Removes the last-modified date associated with the
//               DocumentSpec, if there is one.
////////////////////////////////////////////////////////////////////
43
inline void DocumentSpec::clear_date(void);

573 16 set_request_mode 4 740 30 DocumentSpec::set_request_mode 0 1 216 1984
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_request_mode
//       Access: Published
//  Description: Sets the request mode of this DocumentSpec.  This is
//               only relevant when using the DocumentSpec to generate
//               a request (for instance, in HTTPChannel).  This
//               specifies whether the document request will ask the
//               server for a newer version than the indicated
//               version, or the exact version, neither, or either.
//
//               The possible values are:
//
//                 RM_any: ignore date and tag (if specified), and
//                 retrieve any document that matches the URL.  For a
//                 subrange request, if the document matches the
//                 version indicated exactly, retrieve the subrange
//                 only; otherwise, retrieve the entire document.
//
//                 RM_equal: request only the precise version of the
//                 document that matches the particular date and/or
//                 tag exactly, if specified; fail if this version is
//                 not available.
//
//                 RM_newer: request any document that is newer than
//                 the version indicated by the particular date and/or
//                 tag; fail if only that version (or older versions)
//                 are available.
//
//                 RM_newer_or_equal: request any document that
//                 matches the version indicated by the particular
//                 date and/or tag, or is a newer version; fail if
//                 only older versions are available.
//
//               In any of the above, you may specify either or both
//               of the last-modified date and the identity tag,
//               whichever is known to the client.
//
//               The default mode is RM_any.
////////////////////////////////////////////////////////////////////
83
inline void DocumentSpec::set_request_mode(DocumentSpec::RequestMode request_mode);

574 16 get_request_mode 4 740 30 DocumentSpec::get_request_mode 0 1 217 318
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_request_mode
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_request_mode().
////////////////////////////////////////////////////////////////////
76
inline DocumentSpec::RequestMode DocumentSpec::get_request_mode(void) const;

575 17 set_cache_control 4 740 31 DocumentSpec::set_cache_control 0 1 218 1075
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_cache_control
//       Access: Published
//  Description: Specifies what kind of cached value is acceptable for
//               this document.  Warning: some HTTP proxies may not
//               respect this setting and may return a cached result
//               anyway.
//
//                 CC_allow_cache: the normal HTTP behavior; the
//                 server may return a cached value if it believes it
//                 is valid.
//
//                 CC_revalidate: a proxy is forced to contact the
//                 origin server and verify that is cached value is in
//                 fact still valid before it returns it.
//
//                 CC_no_cache: a proxy must not return its cached
//                 value at all, but is forced to go all the way back
//                 to the origin server for the official document.
//
//               The default mode is CC_allow_cache.
////////////////////////////////////////////////////////////////////
86
inline void DocumentSpec::set_cache_control(DocumentSpec::CacheControl cache_control);

576 17 get_cache_control 4 740 31 DocumentSpec::get_cache_control 0 1 219 320
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_cache_control
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_cache_control().
////////////////////////////////////////////////////////////////////
78
inline DocumentSpec::CacheControl DocumentSpec::get_cache_control(void) const;

577 5 input 4 740 19 DocumentSpec::input 0 1 220 391
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::input
//       Access: Published
//  Description: Can be used to read in the DocumentSpec from a stream
//               generated either by output() or write().  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
38
bool DocumentSpec::input(istream &in);

578 6 output 4 740 20 DocumentSpec::output 0 1 221 220
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void DocumentSpec::output(ostream &out) const;

579 5 write 4 740 19 DocumentSpec::write 0 2 222 223 219
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DocumentSpec::write(ostream &out, int indent_level = (0)) const;

580 13 ~DocumentSpec 4 740 27 DocumentSpec::~DocumentSpec 0 0 0
34
DocumentSpec::~DocumentSpec(void);

581 8 is_valid 4 743 21 HTTPChannel::is_valid 0 1 224 1042
// Filename: httpChannel.I
// Created by:  drose (24Sep02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_valid
//       Access: Published
//  Description: Returns true if the last-requested document was
//               successfully retrieved and is ready to be read, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool HTTPChannel::is_valid(void) const;

582 19 is_connection_ready 4 743 32 HTTPChannel::is_connection_ready 0 1 225 410
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_connection_ready
//       Access: Published
//  Description: Returns true if a connection has been established to
//               the named server in a previous call to connect_to()
//               or begin_connect_to(), false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool HTTPChannel::is_connection_ready(void) const;

583 7 get_url 4 743 20 HTTPChannel::get_url 0 1 226 572
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_url
//       Access: Published
//  Description: Returns the URL that was used to retrieve the
//               most recent document: whatever URL was last passed to
//               get_document() or get_header().  If a redirect has
//               transparently occurred, this will return the new,
//               redirected URL (the actual URL at which the document
//               was located).
////////////////////////////////////////////////////////////////////
55
inline URLSpec const &HTTPChannel::get_url(void) const;

584 17 get_document_spec 4 743 30 HTTPChannel::get_document_spec 0 1 227 703
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document_spec
//       Access: Published
//  Description: Returns the DocumentSpec associated with the most
//               recent document.  This includes its actual URL
//               (following redirects) along with the identity tag and
//               last-modified date, if supplied by the server.
//
//               This structure may be saved and used to retrieve the
//               same version of the document later, or to
//               conditionally retrieve a newer version if it is
//               available.
////////////////////////////////////////////////////////////////////
70
inline DocumentSpec const &HTTPChannel::get_document_spec(void) const;

585 16 get_http_version 4 743 29 HTTPChannel::get_http_version 0 1 228 385
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, as one of the HTTPClient enumerated types,
//               e.g. HTTPClient::HV_11.
////////////////////////////////////////////////////////////////////
71
inline HTTPEnum::HTTPVersion HTTPChannel::get_http_version(void) const;

586 23 get_http_version_string 4 743 36 HTTPChannel::get_http_version_string 0 1 229 348
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version_string
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, formatted as a string, e.g. "HTTP/1.1".
////////////////////////////////////////////////////////////////////
84
inline basic_string< char > const &HTTPChannel::get_http_version_string(void) const;

587 15 get_status_code 4 743 28 HTTPChannel::get_status_code 0 1 230 853
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_code
//       Access: Published
//  Description: Returns the HTML return code from the document
//               retrieval request.  This will be in the 200 range if
//               the document is successfully retrieved, or some other
//               value in the case of an error.
//
//               Some proxy errors during an https-over-proxy request
//               would return the same status code as a different
//               error that occurred on the host server.  To
//               differentiate these cases, status codes that are
//               returned by the proxy during the CONNECT phase
//               (except code 407) are incremented by 1000.
////////////////////////////////////////////////////////////////////
52
inline int HTTPChannel::get_status_code(void) const;

588 17 get_status_string 4 743 30 HTTPChannel::get_status_string 0 1 231 383
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_string
//       Access: Published
//  Description: Returns the string as returned by the server
//               describing the status code for humans.  This may or
//               may not be meaningful.
////////////////////////////////////////////////////////////////////
64
basic_string< char > HTTPChannel::get_status_string(void) const;

589 13 get_www_realm 4 743 26 HTTPChannel::get_www_realm 0 1 232 668
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_www_realm
//       Access: Published
//  Description: If the document failed to connect because of a 401
//               (Authorization required), this method will return the
//               "realm" returned by the server in which the requested
//               document must be authenticated.  This string may be
//               presented to the user to request an associated
//               username and password (which then should be stored in
//               HTTPClient::set_username()).
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &HTTPChannel::get_www_realm(void) const;

590 15 get_proxy_realm 4 743 28 HTTPChannel::get_proxy_realm 0 1 233 604
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_realm
//       Access: Published
//  Description: If the document failed to connect because of a 407
//               (Proxy authorization required), this method will
//               return the "realm" returned by the proxy.  This
//               string may be presented to the user to request an
//               associated username and password (which then should
//               be stored in HTTPClient::set_username()).
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &HTTPChannel::get_proxy_realm(void) const;

591 12 get_redirect 4 743 25 HTTPChannel::get_redirect 0 1 234 669
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect
//       Access: Published
//  Description: If the document failed with a redirect code (300
//               series), this will generally contain the new URL the
//               server wants us to try.  In many cases, the client
//               will automatically follow redirects; if these are
//               succesful the client will return a successful code
//               and get_redirect() will return empty, but get_url()
//               will return the new, redirected URL.
////////////////////////////////////////////////////////////////////
60
inline URLSpec const &HTTPChannel::get_redirect(void) const;

592 16 get_header_value 4 743 29 HTTPChannel::get_header_value 0 1 235 409
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header_value
//       Access: Published
//  Description: Returns the HTML header value associated with the
//               indicated key, or empty string if the key was not
//               defined in the message returned by the server.
////////////////////////////////////////////////////////////////////
90
basic_string< char > HTTPChannel::get_header_value(basic_string< char > const &key) const;

593 22 get_num_redirect_trail 4 743 35 HTTPChannel::get_num_redirect_trail 0 1 236 499
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_num_redirect_trail
//       Access: Published
//  Description: If the document automatically followed one or more
//               redirects, this will return the number of redirects
//               that were automatically followed.  Use
//               get_redirect_trail() to retrieve each URL in
//               sequence.
////////////////////////////////////////////////////////////////////
59
inline int HTTPChannel::get_num_redirect_trail(void) const;

594 18 get_redirect_trail 4 743 31 HTTPChannel::get_redirect_trail 0 1 237 447
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect_trail
//       Access: Published
//  Description: Use in conjunction with get_num_redirect_trail() to
//               extract the chain of URL's that the channel was
//               automatically redirected through to arrive at the
//               final document.
////////////////////////////////////////////////////////////////////
67
inline URLSpec const &HTTPChannel::get_redirect_trail(int n) const;

595 25 set_persistent_connection 4 743 38 HTTPChannel::set_persistent_connection 0 1 238 894
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_persistent_connection
//       Access: Published
//  Description: Indicates whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  Set this true to keep the connections
//               around when possible, false to recycle them.
//
//               It makes most sense to set this false when the
//               HTTPChannel will be used only once to retrieve a
//               single document, true when you will be using the same
//               HTTPChannel object to retrieve multiple documents.
////////////////////////////////////////////////////////////////////
79
inline void HTTPChannel::set_persistent_connection(bool persistent_connection);

596 25 get_persistent_connection 4 743 38 HTTPChannel::get_persistent_connection 0 1 239 553
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_persistent_connection
//       Access: Published
//  Description: Returns whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  See set_persistent_connection().
////////////////////////////////////////////////////////////////////
63
inline bool HTTPChannel::get_persistent_connection(void) const;

597 15 set_allow_proxy 4 743 28 HTTPChannel::set_allow_proxy 0 1 240 615
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
////////////////////////////////////////////////////////////////////
59
inline void HTTPChannel::set_allow_proxy(bool allow_proxy);

598 15 get_allow_proxy 4 743 28 HTTPChannel::get_allow_proxy 0 1 241 615
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
////////////////////////////////////////////////////////////////////
53
inline bool HTTPChannel::get_allow_proxy(void) const;

599 16 set_proxy_tunnel 4 743 29 HTTPChannel::set_proxy_tunnel 0 1 242 1220
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_proxy_tunnel
//       Access: Published
//  Description: Normally, a proxy is itself asked for ordinary URL's,
//               and the proxy decides whether to hand the client a
//               cached version of the document or to contact the
//               server for a fresh version.  The proxy may also
//               modify the headers and transfer encoding on the way.
//
//               If this is set to true, then instead of asking for
//               URL's from the proxy, we will ask the proxy to open a
//               connection to the server (for instance, on port 80);
//               if the proxy honors this request, then we contact the
//               server directly through this connection to retrieve
//               the document.  If the proxy does not honor the
//               connect request, then the retrieve operation fails.
//
//               SSL connections (e.g. https), and connections through
//               a Socks proxy, are always tunneled, regardless of the
//               setting of this flag.
////////////////////////////////////////////////////////////////////
61
inline void HTTPChannel::set_proxy_tunnel(bool proxy_tunnel);

600 16 get_proxy_tunnel 4 743 29 HTTPChannel::get_proxy_tunnel 0 1 243 418
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_tunnel
//       Access: Published
//  Description: Returns true if connections always tunnel through a
//               proxy, or false (the normal case) if we allow the
//               proxy to serve up documents.  See set_proxy_tunnel().
////////////////////////////////////////////////////////////////////
54
inline bool HTTPChannel::get_proxy_tunnel(void) const;

601 19 set_connect_timeout 4 743 32 HTTPChannel::set_connect_timeout 0 1 244 633
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_connect_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait before giving up on establishing a
//               TCP connection.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::set_connect_timeout(double timeout_seconds);

602 19 get_connect_timeout 4 743 32 HTTPChannel::get_connect_timeout 0 1 245 382
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connect_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for a
//               new nonblocking socket to connect.  See
//               set_connect_timeout().
////////////////////////////////////////////////////////////////////
59
inline double HTTPChannel::get_connect_timeout(void) const;

603 20 set_blocking_connect 4 743 33 HTTPChannel::set_blocking_connect 0 1 246 1040
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
//               Setting this true is useful when you want to use
//               non-blocking I/O once you have established the
//               connection, but you don't want to bother with polling
//               for the initial connection.  It's also useful when
//               you don't particularly care about non-blocking I/O,
//               but you need to respect timeouts like connect_timeout
//               and http_timeout.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::set_blocking_connect(bool blocking_connect);

604 20 get_blocking_connect 4 743 33 HTTPChannel::get_blocking_connect 0 1 247 596
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
////////////////////////////////////////////////////////////////////
58
inline bool HTTPChannel::get_blocking_connect(void) const;

605 16 set_http_timeout 4 743 29 HTTPChannel::set_http_timeout 0 1 248 838
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_http_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait for the HTTP server to finish
//               sending its response to our request.
//
//               The timer starts counting after the TCP connection
//               has been established (see set_connect_timeout(),
//               above) and the request has been sent.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
////////////////////////////////////////////////////////////////////
66
inline void HTTPChannel::set_http_timeout(double timeout_seconds);

606 16 get_http_timeout 4 743 29 HTTPChannel::get_http_timeout 0 1 249 383
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for 
//               the HTTP server to respond to our request.  See
//               set_http_timeout().
////////////////////////////////////////////////////////////////////
56
inline double HTTPChannel::get_http_timeout(void) const;

607 21 set_download_throttle 4 743 34 HTTPChannel::set_download_throttle 0 1 250 1100
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_download_throttle
//       Access: Published
//  Description: Specifies whether nonblocking downloads (via
//               download_to_file() or download_to_ram()) will be
//               limited so as not to use all available bandwidth.
//
//               If this is true, when a download has been started on
//               this channel it will be invoked no more frequently
//               than get_max_updates_per_second(), and the total
//               bandwidth used by the download will be no more than
//               get_max_bytes_per_second().  If this is false,
//               downloads will proceed as fast as the server can send
//               the data.
//
//               This only has effect on the nonblocking I/O methods
//               like begin_get_document(), etc.  The blocking methods
//               like get_document() always use as much CPU and
//               bandwidth as they can get.
////////////////////////////////////////////////////////////////////
71
inline void HTTPChannel::set_download_throttle(bool download_throttle);

608 21 get_download_throttle 4 743 34 HTTPChannel::get_download_throttle 0 1 251 349
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_download_throttle
//       Access: Published
//  Description: Returns whether the nonblocking downloads will be
//               bandwidth-limited.  See set_download_throttle().
////////////////////////////////////////////////////////////////////
59
inline bool HTTPChannel::get_download_throttle(void) const;

609 24 set_max_bytes_per_second 4 743 37 HTTPChannel::set_max_bytes_per_second 0 1 252 449
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_bytes_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of bytes per second that may be consumed by
//               this channel.
////////////////////////////////////////////////////////////////////
79
inline void HTTPChannel::set_max_bytes_per_second(double max_bytes_per_second);

610 24 get_max_bytes_per_second 4 743 37 HTTPChannel::get_max_bytes_per_second 0 1 253 392
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_bytes_per_second
//       Access: Published
//  Description: Returns the maximum number of bytes per second that
//               may be consumed by this channel when
//               get_download_throttle() is true.
////////////////////////////////////////////////////////////////////
64
inline double HTTPChannel::get_max_bytes_per_second(void) const;

611 26 set_max_updates_per_second 4 743 39 HTTPChannel::set_max_updates_per_second 0 1 254 467
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_updates_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of times per second that run() will attempt to
//               do any downloading at all.
////////////////////////////////////////////////////////////////////
83
inline void HTTPChannel::set_max_updates_per_second(double max_updates_per_second);

612 26 get_max_updates_per_second 4 743 39 HTTPChannel::get_max_updates_per_second 0 1 255 393
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_updates_per_second
//       Access: Published
//  Description: Returns the maximum number of times per second that
//               run() will do anything at all, when
//               get_download_throttle() is true.
////////////////////////////////////////////////////////////////////
66
inline double HTTPChannel::get_max_updates_per_second(void) const;

613 22 set_expected_file_size 4 743 35 HTTPChannel::set_expected_file_size 0 1 256 617
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_expected_file_size
//       Access: Published
//  Description: This may be called immediately after a call to
//               get_document() or some related function to specify
//               the expected size of the document we are retrieving,
//               if we happen to know.  This is used as the return
//               value to get_file_size() only in the case that the
//               server does not tell us the actual file size.
////////////////////////////////////////////////////////////////////
72
inline void HTTPChannel::set_expected_file_size(unsigned int file_size);

614 13 get_file_size 4 743 26 HTTPChannel::get_file_size 0 1 257 868
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_file_size
//       Access: Published
//  Description: Returns the size of the file, if it is known.
//               Returns the value set by set_expected_file_size() if
//               the file size is not known, or 0 if this value was
//               not set.
//
//               If the file is dynamically generated, the size may
//               not be available until a read has started
//               (e.g. open_read_file() has been called); and even
//               then it may increase as more of the file is read due
//               to the nature of HTTP/1.1 requests which can change
//               their minds midstream about how much data they're
//               sending you.
////////////////////////////////////////////////////////////////////
52
unsigned int HTTPChannel::get_file_size(void) const;

615 18 is_file_size_known 4 743 31 HTTPChannel::is_file_size_known 0 1 258 637
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_file_size_known
//       Access: Published
//  Description: Returns true if the size of the file we are currently
//               retrieving was told us by the server and thus is
//               reliably known, or false if the size reported by
//               get_file_size() represents an educated guess
//               (possibly as set by set_expected_file_size(), or as
//               inferred from a chunked transfer encoding in
//               progress).
////////////////////////////////////////////////////////////////////
56
inline bool HTTPChannel::is_file_size_known(void) const;

616 13 write_headers 4 743 26 HTTPChannel::write_headers 0 1 259 326
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::write_headers
//       Access: Published
//  Description: Outputs a list of all headers defined by the server
//               to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void HTTPChannel::write_headers(ostream &out) const;

617 5 reset 4 743 18 HTTPChannel::reset 0 1 260 894
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::reset
//       Access: Published
//  Description: Stops whatever file transaction is currently in
//               progress, closes the connection, and resets to begin
//               anew.  You shouldn't ever need to call this, since
//               the channel should be able to reset itself cleanly
//               between requests, but it is provided in case you are
//               an especially nervous type.
//
//               Don't call this after every request unless you set
//               set_persistent_connection() to false, since calling
//               reset() rudely closes the connection regardless of
//               whether we have told the server we intend to keep it
//               open or not.
////////////////////////////////////////////////////////////////////
37
inline void HTTPChannel::reset(void);

618 15 preserve_status 4 743 28 HTTPChannel::preserve_status 0 1 261 838
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::preserve_status
//       Access: Published
//  Description: Preserves the previous status code (presumably a
//               failure) from the previous connection attempt.  If
//               the subsequent connection attempt also fails, the
//               returned status code will be the better of the
//               previous code and the current code.
//
//               This can be called to daisy-chain subsequent attempts
//               to download the same document from different servers.
//               After all servers have been attempted, the final
//               status code will reflect the attempt that most nearly
//               succeeded.
////////////////////////////////////////////////////////////////////
47
inline void HTTPChannel::preserve_status(void);

619 19 clear_extra_headers 4 743 32 HTTPChannel::clear_extra_headers 0 1 262 334
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::clear_extra_headers
//       Access: Published
//  Description: Resets the extra headers that were previously added
//               via calls to send_extra_header().
////////////////////////////////////////////////////////////////////
51
inline void HTTPChannel::clear_extra_headers(void);

620 17 send_extra_header 4 743 30 HTTPChannel::send_extra_header 0 1 263 658
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::send_extra_header
//       Access: Published
//  Description: Specifies an additional key: value pair that is added
//               into the header sent to the server with the next
//               request.  This is passed along with no interpretation
//               by the HTTPChannel code.  You may call this
//               repeatedly to append multiple headers.
//
//               This is persistent for one request only; it must be
//               set again for each new request.
////////////////////////////////////////////////////////////////////
111
inline void HTTPChannel::send_extra_header(basic_string< char > const &key, basic_string< char > const &value);

621 12 get_document 4 743 25 HTTPChannel::get_document 0 1 264 338
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document
//       Access: Published
//  Description: Opens the named document for reading, if available.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool HTTPChannel::get_document(DocumentSpec const &url);

622 15 get_subdocument 4 743 28 HTTPChannel::get_subdocument 0 1 265 603
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_subdocument
//       Access: Published
//  Description: Retrieves only the specified byte range of the
//               indicated document.  If last_byte is 0, it stands for
//               the last byte of the document.  When a subdocument is
//               requested, get_file_size() and get_bytes_downloaded()
//               will report the number of bytes of the subdocument,
//               not of the complete document.
////////////////////////////////////////////////////////////////////
115
inline bool HTTPChannel::get_subdocument(DocumentSpec const &url, unsigned int first_byte, unsigned int last_byte);

623 10 get_header 4 743 23 HTTPChannel::get_header 0 1 266 523
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
////////////////////////////////////////////////////////////////////
61
inline bool HTTPChannel::get_header(DocumentSpec const &url);

624 9 post_form 4 743 22 HTTPChannel::post_form 0 1 267 302
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.
////////////////////////////////////////////////////////////////////
94
inline bool HTTPChannel::post_form(DocumentSpec const &url, basic_string< char > const &body);

625 12 put_document 4 743 25 HTTPChannel::put_document 0 1 268 339
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::put_document
//       Access: Published
//  Description: Uploads the indicated body to the server to replace
//               the indicated URL, if the server allows this.
////////////////////////////////////////////////////////////////////
97
inline bool HTTPChannel::put_document(DocumentSpec const &url, basic_string< char > const &body);

626 15 delete_document 4 743 28 HTTPChannel::delete_document 0 1 269 276
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::delete_document
//       Access: Published
//  Description: Requests the server to remove the indicated URL.
////////////////////////////////////////////////////////////////////
66
inline bool HTTPChannel::delete_document(DocumentSpec const &url);

627 9 get_trace 4 743 22 HTTPChannel::get_trace 0 1 270 401
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_trace
//       Access: Published
//  Description: Sends a TRACE message to the server, which should
//               return back the same message as the server received
//               it, allowing inspection of proxy hops, etc.
////////////////////////////////////////////////////////////////////
60
inline bool HTTPChannel::get_trace(DocumentSpec const &url);

628 10 connect_to 4 743 23 HTTPChannel::connect_to 0 1 271 624
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::connect_to
//       Access: Published
//  Description: Establish a direct connection to the server and port
//               indicated by the URL, but do not issue any HTTP
//               requests.  If successful, the connection may then be
//               taken to use for whatever purposes you like by
//               calling get_connection().
//
//               This establishes a blocking I/O socket.  Also see
//               begin_connect_to().
////////////////////////////////////////////////////////////////////
61
inline bool HTTPChannel::connect_to(DocumentSpec const &url);

629 11 get_options 4 743 24 HTTPChannel::get_options 0 1 272 380
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_options
//       Access: Published
//  Description: Sends an OPTIONS message to the server, which should
//               query the available options, possibly in relation to
//               a specified URL.
////////////////////////////////////////////////////////////////////
62
inline bool HTTPChannel::get_options(DocumentSpec const &url);

630 18 begin_get_document 4 743 31 HTTPChannel::begin_get_document 0 1 273 785
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_document
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               document.  This method will return immediately, even
//               before a connection to the server has necessarily
//               been established; you must then call run() from time
//               to time until the return value of run() is false.
//               Then you may check is_valid() and get_status_code()
//               to determine the status of your request.
//
//               If a previous request had been pending, that request
//               is discarded.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::begin_get_document(DocumentSpec const &url);

631 21 begin_get_subdocument 4 743 34 HTTPChannel::begin_get_subdocument 0 1 274 658
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_subdocument
//       Access: Published
//  Description: Begins a non-blocking request to retrieve only the
//               specified byte range of the indicated document.  If
//               last_byte is 0, it stands for the last byte of the
//               document.  When a subdocument is requested,
//               get_file_size() and get_bytes_downloaded() will
//               report the number of bytes of the subdocument, not of
//               the complete document.
////////////////////////////////////////////////////////////////////
121
inline void HTTPChannel::begin_get_subdocument(DocumentSpec const &url, unsigned int first_byte, unsigned int last_byte);

632 16 begin_get_header 4 743 29 HTTPChannel::begin_get_header 0 1 275 347
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_header
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               header.  See begin_get_document() and get_header().
////////////////////////////////////////////////////////////////////
67
inline void HTTPChannel::begin_get_header(DocumentSpec const &url);

633 15 begin_post_form 4 743 28 HTTPChannel::begin_post_form 0 1 276 769
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response, all using non-blocking I/O.  See
//               begin_get_document() and post_form().
//
//               It is important to note that you *must* call run()
//               repeatedly after calling this method until run()
//               returns false, and you may not call any other
//               document posting or retrieving methods using the
//               HTTPChannel object in the interim, or your form data
//               may not get posted.
////////////////////////////////////////////////////////////////////
100
inline void HTTPChannel::begin_post_form(DocumentSpec const &url, basic_string< char > const &body);

634 3 run 4 743 16 HTTPChannel::run 0 1 277 731
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::run
//       Access: Published
//  Description: This must be called from time to time when
//               non-blocking I/O is in use.  It checks for data
//               coming in on the socket and writes data out to the
//               socket when possible, and does whatever processing is
//               required towards completing the current task.
//
//               The return value is true if the task is still pending
//               (and run() will need to be called again in the
//               future), or false if the current task is complete.
////////////////////////////////////////////////////////////////////
28
bool HTTPChannel::run(void);

635 16 begin_connect_to 4 743 29 HTTPChannel::begin_connect_to 0 1 278 920
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_connect_to
//       Access: Published
//  Description: Begins a non-blocking request to establish a direct
//               connection to the server and port indicated by the
//               URL.  No HTTP requests will be issued beyond what is
//               necessary to establish the connection.  When run()
//               has finished, you may call is_connection_ready() to
//               determine if the connection was successfully
//               established.
//
//               If successful, the connection may then be taken to
//               use for whatever purposes you like by calling
//               get_connection().
//
//               This establishes a nonblocking I/O socket.  Also see
//               connect_to().
////////////////////////////////////////////////////////////////////
67
inline void HTTPChannel::begin_connect_to(DocumentSpec const &url);

636 9 read_body 4 743 22 HTTPChannel::read_body 0 1 279 601
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::read_body
//       Access: Published
//  Description: Returns a newly-allocated istream suitable for
//               reading the body of the document.  This may only be
//               called immediately after a call to get_document() or
//               post_form(), or after a call to run() has returned
//               false.
//
//               The user is responsible for deleting the returned
//               istream later.
////////////////////////////////////////////////////////////////////
44
ISocketStream *HTTPChannel::read_body(void);

637 16 download_to_file 4 743 29 HTTPChannel::download_to_file 0 2 280 281 1950
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_file
//       Access: Published
//  Description: Specifies the name of a file to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the file and return true if it was
//               successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated file.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the file for writing the
//               output.  In this case, the file must already exist
//               and must have at least first_byte bytes in it.  If
//               subdocument_resumes is false, a subdocument will
//               always be downloaded beginning at the first byte of
//               the file.
////////////////////////////////////////////////////////////////////
93
bool HTTPChannel::download_to_file(Filename const &filename, bool subdocument_resumes = (1));

638 15 download_to_ram 4 743 28 HTTPChannel::download_to_ram 0 2 282 283 1778
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_ram
//       Access: Published
//  Description: Specifies a Ramfile object to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the Ramfile and return true if it
//               was successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated Ramfile.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the Ramfile for writing
//               the output.  In this case, the Ramfile must already
//               have at least first_byte bytes in it.
////////////////////////////////////////////////////////////////////
84
bool HTTPChannel::download_to_ram(Ramfile *ramfile, bool subdocument_resumes = (1));

639 14 get_connection 4 743 27 HTTPChannel::get_connection 0 1 284 656
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connection
//       Access: Published
//  Description: Returns the connection that was established via a
//               previous call to connect_to() or begin_connect_to(),
//               or NULL if the connection attempt failed or if those
//               methods have not recently been called.
//
//               This stream has been allocated from the free store.
//               It is the user's responsibility to delete this
//               pointer when finished with it.
////////////////////////////////////////////////////////////////////
48
SocketStream *HTTPChannel::get_connection(void);

640 20 get_bytes_downloaded 4 743 33 HTTPChannel::get_bytes_downloaded 0 1 285 643
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_downloaded
//       Access: Published
//  Description: Returns the number of bytes downloaded during the
//               last (or current) download_to_file() or
//               download_to_ram operation().  This can be used in
//               conjunction with get_file_size() to report the
//               percent complete (but be careful, since
//               get_file_size() may return 0 if the server has not
//               told us the size of the file).
////////////////////////////////////////////////////////////////////
66
inline unsigned int HTTPChannel::get_bytes_downloaded(void) const;

641 19 get_bytes_requested 4 743 32 HTTPChannel::get_bytes_requested 0 1 286 1059
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_requested
//       Access: Published
//  Description: When download throttling is in effect
//               (set_download_throttle() has been set to true) and
//               non-blocking I/O methods (like begin_get_document())
//               are used, this returns the number of bytes
//               "requested" from the server so far: that is, the
//               theoretical maximum value for get_bytes_downloaded(),
//               if the server has been keeping up with our demand.
//
//               If this number is less than get_bytes_downloaded(),
//               then the server has not been supplying bytes fast
//               enough to meet our own download throttle rate.
//
//               When download throttling is not in effect, or when
//               the blocking I/O methods (like get_document(), etc.)
//               are used, this returns 0.
////////////////////////////////////////////////////////////////////
65
inline unsigned int HTTPChannel::get_bytes_requested(void) const;

642 20 is_download_complete 4 743 33 HTTPChannel::is_download_complete 0 1 287 984
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_download_complete
//       Access: Published
//  Description: Returns true when a download_to() or
//               download_to_ram() has executed and the file has been
//               fully downloaded.  If this still returns false after
//               processing has completed, there was an error in
//               transmission.
//
//               Note that simply testing is_download_complete() does
//               not prove that the requested document was succesfully
//               retrieved--you might have just downloaded the "404
//               not found" stub (for instance) that a server would
//               provide in response to some error condition.  You
//               should also check is_valid() to prove that the file
//               you expected has been successfully retrieved.
////////////////////////////////////////////////////////////////////
58
inline bool HTTPChannel::is_download_complete(void) const;

643 14 get_class_type 4 743 27 HTTPChannel::get_class_type 0 1 288 0
52
static TypeHandle HTTPChannel::get_class_type(void);

644 12 Decompressor 4 746 26 Decompressor::Decompressor 0 1 289 221
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
33
Decompressor::Decompressor(void);

645 13 ~Decompressor 4 746 27 Decompressor::~Decompressor 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
Decompressor::~Decompressor(void);

646 8 initiate 4 746 22 Decompressor::initiate 0 2 290 291 857
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression of the named file
//               (whose filename must end in ".pz") to a new file
//               without the .pz extension.  The source file is
//               removed after successful completion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression from the named
//               source file to the named destination file.  The
//               source file is removed after successful completion.
////////////////////////////////////////////////////////////////////
56
int Decompressor::initiate(Filename const &source_file);

647 3 run 4 746 17 Decompressor::run 0 1 292 493
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::run
//       Access: Public
//  Description: Called each frame to do the next bit of work in the
//               background task.  Returns EU_ok if a chunk is
//               completed but there is more to go, or EU_success when
//               we're all done.  Any other return value indicates an
//               error.
////////////////////////////////////////////////////////////////////
28
int Decompressor::run(void);

648 10 decompress 4 746 24 Decompressor::decompress 0 2 293 294 757
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Performs a foreground decompression of the named
//               file; does not return until the decompression is
//               complete.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Does an in-memory decompression of the indicated
//               Ramfile.  The decompressed contents are written back
//               into the same Ramfile on completion.
////////////////////////////////////////////////////////////////////
59
bool Decompressor::decompress(Filename const &source_file);

649 12 get_progress 4 746 26 Decompressor::get_progress 0 1 295 307
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::get_progress
//       Access: Public
//  Description: Returns the ratio through the decompression step
//               in the background.
////////////////////////////////////////////////////////////////////
45
float Decompressor::get_progress(void) const;

650 10 DownloadDb 4 747 22 DownloadDb::DownloadDb 0 3 296 297 298 797
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Primarily used for testing.
////////////////////////////////////////////////////////////////////
29
DownloadDb::DownloadDb(void);

651 11 ~DownloadDb 4 747 23 DownloadDb::~DownloadDb 0 0 218
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
30
DownloadDb::~DownloadDb(void);

652 6 output 4 747 18 DownloadDb::output 0 1 299 214
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void DownloadDb::output(ostream &out) const;

653 5 write 4 747 17 DownloadDb::write 0 1 300 213
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void DownloadDb::write(ostream &out) const;

654 17 write_version_map 4 747 29 DownloadDb::write_version_map 0 1 301 455
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_version_map
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_version_map
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
void DownloadDb::write_version_map(ostream &out) const;

655 15 write_client_db 4 747 27 DownloadDb::write_client_db 0 1 302 234
// Write a database file

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
bool DownloadDb::write_client_db(Filename &file);

656 15 write_server_db 4 747 27 DownloadDb::write_server_db 0 1 303 234
// Write a database file

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
bool DownloadDb::write_server_db(Filename &file);

657 25 get_client_num_multifiles 4 747 37 DownloadDb::get_client_num_multifiles 0 1 304 884
// Filename: downloadDb.I
// Created by:  shochet (08Sep00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int DownloadDb::get_client_num_multifiles(void) const;

658 25 get_server_num_multifiles 4 747 37 DownloadDb::get_server_num_multifiles 0 1 305 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int DownloadDb::get_server_num_multifiles(void) const;

659 25 get_client_multifile_name 4 747 37 DownloadDb::get_client_multifile_name 0 1 306 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > DownloadDb::get_client_multifile_name(int index) const;

660 25 get_server_multifile_name 4 747 37 DownloadDb::get_server_multifile_name 0 1 307 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > DownloadDb::get_server_multifile_name(int index) const;

661 25 get_client_multifile_size 4 747 37 DownloadDb::get_client_multifile_size 0 1 308 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
84
inline int DownloadDb::get_client_multifile_size(basic_string< char > mfname) const;

662 25 set_client_multifile_size 4 747 37 DownloadDb::set_client_multifile_size 0 1 309 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
inline void DownloadDb::set_client_multifile_size(basic_string< char > mfname, int size);

663 31 set_client_multifile_delta_size 4 747 43 DownloadDb::set_client_multifile_delta_size 0 1 310 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
inline int DownloadDb::set_client_multifile_delta_size(basic_string< char > mfname, int size);

664 25 get_server_multifile_size 4 747 37 DownloadDb::get_server_multifile_size 0 1 311 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
84
inline int DownloadDb::get_server_multifile_size(basic_string< char > mfname) const;

665 25 set_server_multifile_size 4 747 37 DownloadDb::set_server_multifile_size 0 1 312 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
inline void DownloadDb::set_server_multifile_size(basic_string< char > mfname, int size);

666 26 get_client_multifile_phase 4 747 38 DownloadDb::get_client_multifile_phase 0 1 313 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline float DownloadDb::get_client_multifile_phase(basic_string< char > mfname) const;

667 26 get_server_multifile_phase 4 747 38 DownloadDb::get_server_multifile_phase 0 1 314 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline float DownloadDb::get_server_multifile_phase(basic_string< char > mfname) const;

668 31 set_client_multifile_incomplete 4 747 43 DownloadDb::set_client_multifile_incomplete 0 1 315 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
85
inline void DownloadDb::set_client_multifile_incomplete(basic_string< char > mfname);

669 29 set_client_multifile_complete 4 747 41 DownloadDb::set_client_multifile_complete 0 1 316 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
83
inline void DownloadDb::set_client_multifile_complete(basic_string< char > mfname);

670 33 set_client_multifile_decompressed 4 747 45 DownloadDb::set_client_multifile_decompressed 0 1 317 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline void DownloadDb::set_client_multifile_decompressed(basic_string< char > mfname);

671 30 set_client_multifile_extracted 4 747 42 DownloadDb::set_client_multifile_extracted 0 1 318 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
84
inline void DownloadDb::set_client_multifile_extracted(basic_string< char > mfname);

672 20 get_server_num_files 4 747 32 DownloadDb::get_server_num_files 0 1 319 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline int DownloadDb::get_server_num_files(basic_string< char > mfname) const;

673 20 get_server_file_name 4 747 32 DownloadDb::get_server_file_name 0 1 320 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
107
inline basic_string< char > DownloadDb::get_server_file_name(basic_string< char > mfname, int index) const;

674 23 client_multifile_exists 4 747 35 DownloadDb::client_multifile_exists 0 1 321 238
// Queries from the Launcher

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
bool DownloadDb::client_multifile_exists(basic_string< char > mfname) const;

675 25 client_multifile_complete 4 747 37 DownloadDb::client_multifile_complete 0 1 322 405
// Queries from the Launcher

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: A multifile is complete when it is completely
//               downloaded. Note: it may already be decompressed
//               or extracted and it is still complete
////////////////////////////////////////////////////////////////////
78
bool DownloadDb::client_multifile_complete(basic_string< char > mfname) const;

676 29 client_multifile_decompressed 4 747 41 DownloadDb::client_multifile_decompressed 0 1 323 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
82
bool DownloadDb::client_multifile_decompressed(basic_string< char > mfname) const;

677 26 client_multifile_extracted 4 747 38 DownloadDb::client_multifile_extracted 0 1 324 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
bool DownloadDb::client_multifile_extracted(basic_string< char > mfname) const;

678 25 get_client_multifile_hash 4 747 37 DownloadDb::get_client_multifile_hash 0 1 325 320
// Ask what version (told with the hash) this multifile is

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the file we are working on
////////////////////////////////////////////////////////////////////
81
HashVal DownloadDb::get_client_multifile_hash(basic_string< char > mfname) const;

679 25 set_client_multifile_hash 4 747 37 DownloadDb::set_client_multifile_hash 0 1 326 313
// Ask what version (told with the hash) this multifile is

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
////////////////////////////////////////////////////////////////////
85
void DownloadDb::set_client_multifile_hash(basic_string< char > mfname, HashVal val);

680 25 get_server_multifile_hash 4 747 37 DownloadDb::get_server_multifile_hash 0 1 327 249
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the server file
////////////////////////////////////////////////////////////////////
81
HashVal DownloadDb::get_server_multifile_hash(basic_string< char > mfname) const;

681 25 set_server_multifile_hash 4 747 37 DownloadDb::set_server_multifile_hash 0 1 328 253
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
////////////////////////////////////////////////////////////////////
85
void DownloadDb::set_server_multifile_hash(basic_string< char > mfname, HashVal val);

682 23 delete_client_multifile 4 747 35 DownloadDb::delete_client_multifile 0 1 329 265
// Operations on multifiles

// Operations on multifiles
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
void DownloadDb::delete_client_multifile(basic_string< char > mfname);

683 20 add_client_multifile 4 747 32 DownloadDb::add_client_multifile 0 1 330 237
// Operations on multifiles

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
74
void DownloadDb::add_client_multifile(basic_string< char > server_mfname);

684 23 expand_client_multifile 4 747 35 DownloadDb::expand_client_multifile 0 1 331 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
void DownloadDb::expand_client_multifile(basic_string< char > mfname);

685 20 create_new_server_db 4 747 32 DownloadDb::create_new_server_db 0 1 332 366
// Server side operations to create multifile records

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::create_new_server_db
//       Access: Public
//  Description: Used on the server side makefiles to create a
//               new clean server db
////////////////////////////////////////////////////////////////////
44
void DownloadDb::create_new_server_db(void);

686 20 server_add_multifile 4 747 32 DownloadDb::server_add_multifile 0 1 333 263
// Server side operations to create multifile records

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
102
void DownloadDb::server_add_multifile(basic_string< char > mfname, float phase, int size, int status);

687 15 server_add_file 4 747 27 DownloadDb::server_add_file 0 1 334 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
90
void DownloadDb::server_add_file(basic_string< char > mfname, basic_string< char > fname);

688 7 read_db 4 747 19 DownloadDb::read_db 0 2 335 336 438
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
DownloadDb::Db DownloadDb::read_db(Filename &file, bool want_server_info);

689 8 write_db 4 747 20 DownloadDb::write_db 0 1 337 219
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
bool DownloadDb::write_db(Filename &file, DownloadDb::Db db, bool want_server_info);

690 11 add_version 4 747 23 DownloadDb::add_version 0 1 338 433
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::add_version
//       Access: Published
//  Description: Appends a new version of the file onto the end of the
//               list, or changes the hash associated with a version
//               previously added.
//
//               Note: version numbers start at 1
////////////////////////////////////////////////////////////////////
85
void DownloadDb::add_version(Filename const &name, HashVal const &hash, int version);

691 18 insert_new_version 4 747 30 DownloadDb::insert_new_version 0 1 339 330
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::insert_new_version
//       Access: Published
//  Description: Inserts a new version 1 copy of the file, sliding all
//               the other versions up by one.
////////////////////////////////////////////////////////////////////
79
void DownloadDb::insert_new_version(Filename const &name, HashVal const &hash);

692 11 has_version 4 747 23 DownloadDb::has_version 0 1 340 404
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::has_version
//       Access: Published
//  Description: Returns true if the indicated file has version
//               information, false otherwise.  Some files recorded in
//               the database may not bother to track versions.
////////////////////////////////////////////////////////////////////
57
bool DownloadDb::has_version(Filename const &name) const;

693 16 get_num_versions 4 747 28 DownloadDb::get_num_versions 0 1 341 306
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_num_versions
//       Access: Published
//  Description: Returns the number of versions stored for the
//               indicated file.
////////////////////////////////////////////////////////////////////
61
int DownloadDb::get_num_versions(Filename const &name) const;

694 16 set_num_versions 4 747 28 DownloadDb::set_num_versions 0 1 342 394
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::set_num_versions
//       Access: Published
//  Description: Reduces the number of versions of a particular file
//               stored in the ddb by throwing away all versions
//               higher than the indicated index.
////////////////////////////////////////////////////////////////////
74
void DownloadDb::set_num_versions(Filename const &name, int num_versions);

695 11 get_version 4 747 23 DownloadDb::get_version 0 1 343 440
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_version
//       Access: Published
//  Description: Returns the version number of this particular file,
//               determined by looking up the hash generated from the
//               file.  Returns -1 if the version number cannot be
//               determined.
////////////////////////////////////////////////////////////////////
77
int DownloadDb::get_version(Filename const &name, HashVal const &hash) const;

696 8 get_hash 4 747 20 DownloadDb::get_hash 0 1 344 318
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_hash
//       Access: Published
//  Description: Returns the MD5 hash associated with the indicated
//               version of the indicated file.
////////////////////////////////////////////////////////////////////
77
HashVal const &DownloadDb::get_hash(Filename const &name, int version) const;

697 9 check_crc 1 0 9 check_crc 0 1 367 0
43
unsigned long int check_crc(Filename name);

698 11 check_adler 1 0 11 check_adler 0 1 368 0
45
unsigned long int check_adler(Filename name);

699 9 Extractor 4 749 20 Extractor::Extractor 0 1 345 221
////////////////////////////////////////////////////////////////////
//     Function: Extractor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
27
Extractor::Extractor(void);

700 10 ~Extractor 4 749 21 Extractor::~Extractor 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Extractor::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
Extractor::~Extractor(void);

701 13 set_multifile 4 749 24 Extractor::set_multifile 0 1 346 392
////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_multifile
//       Access: Published
//  Description: Specifies the filename of the Multifile that the
//               Extractor will read.  Returns true on success, false
//               if the mulifile name is invalid.
////////////////////////////////////////////////////////////////////
62
bool Extractor::set_multifile(Filename const &multifile_name);

702 15 set_extract_dir 4 749 26 Extractor::set_extract_dir 0 1 347 453
////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_extract_dir
//       Access: Published
//  Description: Specifies the directory into which all extracted
//               subfiles will be written.  Relative paths of subfiles
//               within the Multifile will be written as relative
//               paths to this directory.
////////////////////////////////////////////////////////////////////
61
void Extractor::set_extract_dir(Filename const &extract_dir);

703 5 reset 4 749 16 Extractor::reset 0 1 348 368
////////////////////////////////////////////////////////////////////
//     Function: Extractor::reset
//       Access: Published
//  Description: Interrupts the Extractor in the middle of its
//               business and makes it ready to accept a new list of
//               subfiles to extract.
////////////////////////////////////////////////////////////////////
28
void Extractor::reset(void);

704 15 request_subfile 4 749 26 Extractor::request_subfile 0 1 349 391
////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_subfile
//       Access: Published
//  Description: Requests a particular subfile to be extracted when
//               step() or run() is called.  Returns true if the
//               subfile exists, false otherwise.
////////////////////////////////////////////////////////////////////
62
bool Extractor::request_subfile(Filename const &subfile_name);

705 20 request_all_subfiles 4 749 31 Extractor::request_all_subfiles 0 1 350 334
////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_all_subfiles
//       Access: Published
//  Description: Requests all subfiles in the Multifile to be
//               extracted.  Returns the number requested.
////////////////////////////////////////////////////////////////////
42
int Extractor::request_all_subfiles(void);

706 4 step 4 749 15 Extractor::step 0 1 351 695
////////////////////////////////////////////////////////////////////
//     Function: Extractor::step
//       Access: Published
//  Description: After all of the requests have been made via
//               request_file() or request_all_subfiles(), call step()
//               repeatedly until it stops returning EU_ok.
//
//               step() extracts the next small unit of data from the
//               Multifile.  Returns EU_ok if progress is continuing,
//               EU_error_abort if there is a problem, or EU_success
//               when the last piece has been extracted.
//
//               Also see run().
////////////////////////////////////////////////////////////////////
26
int Extractor::step(void);

707 12 get_progress 4 749 23 Extractor::get_progress 0 1 352 292
////////////////////////////////////////////////////////////////////
//     Function: Extractor::get_progress
//       Access: Public
//  Description: Returns the fraction of the Multifile extracted so
//               far.
////////////////////////////////////////////////////////////////////
42
float Extractor::get_progress(void) const;

708 3 run 4 749 14 Extractor::run 0 1 353 674
////////////////////////////////////////////////////////////////////
//     Function: Extractor::run
//       Access: Published
//  Description: A convenience function to extract the Multifile all
//               at once, when you don't care about doing it in the
//               background.
//
//               First, call request_file() or request_all_files() to
//               specify the files you would like to extract, then
//               call run() to do the extraction.  Also see step() for
//               when you would like the extraction to happen as a
//               background task.
////////////////////////////////////////////////////////////////////
26
bool Extractor::run(void);

709 15 MultiplexStream 4 750 32 MultiplexStream::MultiplexStream 0 1 354 903
// Filename: multiplexStream.I
// Created by:  drose (27Nov00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline MultiplexStream::MultiplexStream(void);

710 11 add_ostream 4 750 28 MultiplexStream::add_ostream 0 2 355 356 379
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_ostream
//       Access: Public
//  Description: Adds the indicated generic ostream to the multiplex
//               output.  The ostream will receive whatever data is
//               sent to the pipe.
////////////////////////////////////////////////////////////////////
80
inline void MultiplexStream::add_ostream(ostream *out, bool delete_later = (0));

711 14 add_stdio_file 4 750 31 MultiplexStream::add_stdio_file 0 1 357 335
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_stdio_file
//       Access: Public
//  Description: Adds the given file, previously opened using the C
//               stdio library, to the multiplex output.
////////////////////////////////////////////////////////////////////
78
inline bool MultiplexStream::add_stdio_file(FILE *file, bool close_when_done);

712 19 add_standard_output 4 750 36 MultiplexStream::add_standard_output 0 1 358 266
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_standard_output
//       Access: Public
//  Description: Adds the standard output channel.
////////////////////////////////////////////////////////////////////
55
inline void MultiplexStream::add_standard_output(void);

713 8 add_file 4 750 25 MultiplexStream::add_file 0 1 359 400
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_file
//       Access: Public
//  Description: Adds the given file to the multiplex output.  The
//               file is opened in append mode with line buffering.
//               Returns false if the file cannot be opened.
////////////////////////////////////////////////////////////////////
53
inline bool MultiplexStream::add_file(Filename file);

714 16 add_system_debug 4 750 33 MultiplexStream::add_system_debug 0 1 360 542
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_system_debug
//       Access: Public
//  Description: Adds the system debug output the the multiplex
//               output.  This may map to a syslog or some such
//               os-specific output system.  It may do nothing on a
//               particular system.
//
//               Presently, this maps only to OutputDebugString() on
//               Windows.
////////////////////////////////////////////////////////////////////
52
inline void MultiplexStream::add_system_debug(void);

715 5 flush 4 750 22 MultiplexStream::flush 0 1 361 270
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::flush
//       Access: Public
//  Description: Forces out all output that hasn't yet been written.
////////////////////////////////////////////////////////////////////
41
inline void MultiplexStream::flush(void);

716 16 ~MultiplexStream 4 750 33 MultiplexStream::~MultiplexStream 0 0 0
40
MultiplexStream::~MultiplexStream(void);

717 7 Patcher 4 751 16 Patcher::Patcher 0 2 362 363 434
////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
Patcher::Patcher(void);

718 8 ~Patcher 4 751 17 Patcher::~Patcher 0 0 215
////////////////////////////////////////////////////////////////////
//     Function: Patcher::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual Patcher::~Patcher(void);

719 8 initiate 4 751 17 Patcher::initiate 0 1 364 213
////////////////////////////////////////////////////////////////////
//     Function: Patcher::initiate
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
int Patcher::initiate(Filename &patch, Filename &infile);

720 3 run 4 751 12 Patcher::run 0 1 365 208
////////////////////////////////////////////////////////////////////
//     Function: Patcher::run
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
int Patcher::run(void);

721 12 get_progress 4 751 21 Patcher::get_progress 0 1 366 889
// Filename: patcher.I
// Created by:  darren (20Dec00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Patcher::get_progress
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float Patcher::get_progress(void) const;

368
1 14 Dtool_2KOdZi1H 4 2 754 0 14 Dtool_2KOdZi1H 2 4 this 3 752  9 frequency 1 753  
2 14 Dtool_2KOdBEcb 6 3 753 0 14 Dtool_2KOdBEcb 1 4 this 3 755  
3 14 Dtool_2KOd0BFM 4 4 754 0 14 Dtool_2KOd0BFM 1 4 this 3 752  
4 14 Dtool_2KOd67qN 6 8 760 0 14 Dtool_2KOd67qN 2 4 this 3 757  2 dg 1 758  
5 14 Dtool_2KOd_aY4 6 9 760 0 14 Dtool_2KOd_aY4 1 4 this 3 757  
6 14 Dtool_2KOdMYcR 4 10 754 0 14 Dtool_2KOdMYcR 1 4 this 3 757  
7 14 Dtool_2KOd6KI4 6 13 760 0 14 Dtool_2KOd6KI4 2 4 this 3 761  2 dg 1 762  
8 14 Dtool_2KOda9A2 6 14 760 0 14 Dtool_2KOda9A2 1 4 this 3 761  
9 14 Dtool_2KOdvnFP 4 15 754 0 14 Dtool_2KOdvnFP 1 4 this 3 761  
10 14 Dtool_2KOdI4mc 4 16 754 0 14 Dtool_2KOdI4mc 2 4 this 3 761  11 collect_tcp 1 760  
11 14 Dtool_2KOdsxGI 6 17 760 0 14 Dtool_2KOdsxGI 1 4 this 3 764  
12 14 Dtool_2KOd8JD3 4 18 754 0 14 Dtool_2KOd8JD3 2 4 this 3 761  8 interval 1 766  
13 14 Dtool_2KOdZ9kF 6 19 766 0 14 Dtool_2KOdZ9kF 1 4 this 3 764  
14 14 Dtool_2KOdZ9wc 6 20 760 0 14 Dtool_2KOdZ9wc 1 4 this 3 761  
15 14 Dtool_2KOdvr_z 6 21 760 0 14 Dtool_2KOdvr_z 1 4 this 3 761  
16 14 Dtool_2KOdQnLp 6 28 760 0 14 Dtool_2KOdQnLp 1 4 this 3 767  
17 14 Dtool_2KOdrVVb 4 29 754 0 14 Dtool_2KOdrVVb 1 4 this 3 767  
18 14 Dtool_2KOd6pzq 6 24 768 0 14 Dtool_2KOd6pzq 1 4 this 3 767  
19 14 Dtool_2KOdKSzi 6 25 767 0 14 Dtool_2KOdKSzi 1 4 this 3 768  
20 14 Dtool_2KOd5yaa 6 26 757 0 14 Dtool_2KOd5yaa 1 4 this 3 767  
21 14 Dtool_2KOdrr6b 6 27 767 0 14 Dtool_2KOdrr6b 1 4 this 3 757  
22 14 Dtool_2KOd6STp 6 37 760 0 14 Dtool_2KOd6STp 1 4 this 3 769  
23 14 Dtool_2KOdR4ab 4 38 754 0 14 Dtool_2KOdR4ab 1 4 this 3 769  
24 14 Dtool_2KOdeCPl 6 39 760 0 14 Dtool_2KOdeCPl 1 4 this 3 769  
25 14 Dtool_2KOdQTlu 6 33 770 0 14 Dtool_2KOdQTlu 1 4 this 3 769  
26 14 Dtool_2KOdf_gd 6 34 769 0 14 Dtool_2KOdf_gd 1 4 this 3 770  
27 14 Dtool_2KOdJ5xO 6 35 761 0 14 Dtool_2KOdJ5xO 1 4 this 3 769  
28 14 Dtool_2KOdhyJs 6 36 769 0 14 Dtool_2KOdhyJs 1 4 this 3 761  
29 14 Dtool_2KOdC8Lh 6 49 760 0 14 Dtool_2KOdC8Lh 1 4 this 3 771  
30 14 Dtool_2KOd_VvS 4 50 754 0 14 Dtool_2KOd_VvS 1 4 this 3 771  
31 14 Dtool_2KOdPzDV 6 51 760 0 14 Dtool_2KOdPzDV 1 4 this 3 771  
32 14 Dtool_2KOd8JpJ 6 43 772 0 14 Dtool_2KOd8JpJ 1 4 this 3 771  
33 14 Dtool_2KOdvaoG 6 44 771 0 14 Dtool_2KOdvaoG 1 4 this 3 772  
34 14 Dtool_2KOd_nsC 6 45 757 0 14 Dtool_2KOd_nsC 1 4 this 3 771  
35 14 Dtool_2KOdKst_ 6 46 771 0 14 Dtool_2KOdKst_ 1 4 this 3 757  
36 14 Dtool_2KOdSRUA 6 47 761 0 14 Dtool_2KOdSRUA 1 4 this 3 771  
37 14 Dtool_2KOdp0U9 6 48 771 0 14 Dtool_2KOdp0U9 1 4 this 3 761  
38 14 Dtool_2KOdd3sO 7 54 773 457 14 Dtool_2KOdd3sO 0 
39 14 Dtool_2KOdKJ80 7 54 773 457 14 Dtool_2KOdKJ80 1 4 copy 1 774  
40 14 Dtool_2KOdbRSb 7 54 773 457 14 Dtool_2KOdbRSb 2 3 url 1 776  20 server_name_expected 1 760  
41 14 Dtool_2KOdqRHT 7 54 773 457 14 Dtool_2KOdqRHT 1 3 url 1 776  
42 14 Dtool_2KOdeMOO 6 55 773 0 14 Dtool_2KOdeMOO 2 4 this 3 773  4 copy 1 774  
43 14 Dtool_2KOdhCwY 6 55 773 0 14 Dtool_2KOdhCwY 2 4 this 3 773  3 url 1 776  
44 14 Dtool_2KOdUZVF 6 56 760 0 14 Dtool_2KOdUZVF 2 4 this 3 774  5 other 1 774  
45 14 Dtool_2KOdj_VB 6 57 760 0 14 Dtool_2KOdj_VB 2 4 this 3 774  5 other 1 774  
46 14 Dtool_2KOdp_Dk 6 58 760 0 14 Dtool_2KOdp_Dk 2 4 this 3 774  5 other 1 774  
47 14 Dtool_2KOdOeWk 6 59 777 0 14 Dtool_2KOdOeWk 2 4 this 3 774  5 other 1 774  
48 14 Dtool_2KOdbXfj 6 60 760 0 14 Dtool_2KOdbXfj 1 4 this 3 774  
49 14 Dtool_2KOd7GBb 6 61 760 0 14 Dtool_2KOd7GBb 1 4 this 3 774  
50 14 Dtool_2KOdNvY8 6 62 760 0 14 Dtool_2KOdNvY8 1 4 this 3 774  
51 14 Dtool_2KOd7ZQR 6 63 760 0 14 Dtool_2KOd7ZQR 1 4 this 3 774  
52 14 Dtool_2KOdNCN_ 6 64 760 0 14 Dtool_2KOdNCN_ 1 4 this 3 774  
53 14 Dtool_2KOdvN5k 6 65 760 0 14 Dtool_2KOdvN5k 1 4 this 3 774  
54 14 Dtool_2KOdSAZN 6 66 760 0 14 Dtool_2KOdSAZN 1 4 this 3 774  
55 14 Dtool_2KOdLoNu 6 67 776 0 14 Dtool_2KOdLoNu 1 4 this 3 774  
56 14 Dtool_2KOd7ewl 6 68 776 0 14 Dtool_2KOd7ewl 1 4 this 3 774  
57 14 Dtool_2KOdiXGH 6 69 776 0 14 Dtool_2KOdiXGH 1 4 this 3 774  
58 14 Dtool_2KOdz1_b 6 70 776 0 14 Dtool_2KOdz1_b 1 4 this 3 774  
59 14 Dtool_2KOdZGG8 6 71 776 0 14 Dtool_2KOdZGG8 1 4 this 3 774  
60 14 Dtool_2KOdqS8J 6 72 777 0 14 Dtool_2KOdqS8J 1 4 this 3 774  
61 14 Dtool_2KOdDsHV 6 73 776 0 14 Dtool_2KOdDsHV 1 4 this 3 774  
62 14 Dtool_2KOdHWmv 6 74 776 0 14 Dtool_2KOdHWmv 1 4 this 3 774  
63 14 Dtool_2KOdU1HY 6 75 776 0 14 Dtool_2KOdU1HY 1 4 this 3 774  
64 14 Dtool_2KOdXspr 6 76 776 0 14 Dtool_2KOdXspr 1 4 this 3 774  
65 14 Dtool_2KOdDXzo 6 77 760 0 14 Dtool_2KOdDXzo 1 4 this 3 774  
66 14 Dtool_2KOdDCPV 6 78 776 0 14 Dtool_2KOdDCPV 1 4 this 3 774  
67 14 Dtool_2KOdiPvz 4 79 754 0 14 Dtool_2KOdiPvz 2 4 this 3 773  6 scheme 1 776  
68 14 Dtool_2KOdOWTX 4 80 754 0 14 Dtool_2KOdOWTX 2 4 this 3 773  9 authority 1 776  
69 14 Dtool_2KOd37oh 4 81 754 0 14 Dtool_2KOd37oh 2 4 this 3 773  8 username 1 776  
70 14 Dtool_2KOdzigh 4 82 754 0 14 Dtool_2KOdzigh 2 4 this 3 773  6 server 1 776  
71 14 Dtool_2KOd11tS 4 83 754 0 14 Dtool_2KOd11tS 2 4 this 3 773  4 port 1 776  
72 14 Dtool_2KOdU1E4 4 83 754 0 14 Dtool_2KOdU1E4 2 4 this 3 773  4 port 1 777  
73 14 Dtool_2KOdJbzZ 4 84 754 0 14 Dtool_2KOdJbzZ 2 4 this 3 773  15 server_and_port 1 776  
74 14 Dtool_2KOdbhX4 4 85 754 0 14 Dtool_2KOdbhX4 2 4 this 3 773  4 path 1 776  
75 14 Dtool_2KOd11SR 4 86 754 0 14 Dtool_2KOd11SR 2 4 this 3 773  5 query 1 776  
76 14 Dtool_2KOdLfs6 4 87 754 0 14 Dtool_2KOdLfs6 3 4 this 3 773  3 url 1 776  20 server_name_expected 1 760  
77 14 Dtool_2KOdAXhy 4 87 754 0 14 Dtool_2KOdAXhy 2 4 this 3 773  3 url 1 776  
78 14 Dtool_2KOd0Ix1 6 89 776 0 14 Dtool_2KOd0Ix1 1 4 this 3 774  
79 14 Dtool_2KOd_kB4 6 90 760 0 14 Dtool_2KOd_kB4 1 4 this 3 774  
80 14 Dtool_2KOdNVhO 6 91 778 0 14 Dtool_2KOdNVhO 1 4 this 3 774  
81 14 Dtool_2KOd4pUs 6 92 779 0 14 Dtool_2KOd4pUs 2 4 this 3 774  1 n 1 777  
82 14 Dtool_2KOdTPRh 6 93 760 0 14 Dtool_2KOdTPRh 2 4 this 3 773  2 in 1 768  
83 14 Dtool_2KOdeXk2 4 94 754 0 14 Dtool_2KOdeXk2 2 4 this 3 774  3 out 1 770  
84 14 Dtool_2KOdko8E 6 95 776 0 14 Dtool_2KOdko8E 2 6 source 1 776  4 safe 1 776  
85 14 Dtool_2KOdcj8i 6 95 776 0 14 Dtool_2KOdcj8i 1 6 source 1 776  
86 14 Dtool_2KOdCXNb 6 96 776 0 14 Dtool_2KOdCXNb 2 6 source 1 776  4 safe 1 776  
87 14 Dtool_2KOdo8IX 6 96 776 0 14 Dtool_2KOdo8IX 1 6 source 1 776  
88 14 Dtool_2KOdsqPc 6 97 776 0 14 Dtool_2KOdsqPc 1 6 source 1 776  
89 14 Dtool_2KOdF1dJ 6 98 776 0 14 Dtool_2KOdF1dJ 1 6 source 1 776  
90 14 Dtool_2KOdqwwt 6 88 776 0 14 Dtool_2KOdqwwt 1 4 this 3 774  
91 14 Dtool_2KOdxUCO 7 105 780 476 14 Dtool_2KOdxUCO 0 
92 14 Dtool_2KOdDU7n 7 105 780 476 14 Dtool_2KOdDU7n 1 4 copy 1 781  
93 14 Dtool_2KOd2lK9 7 105 780 476 14 Dtool_2KOd2lK9 1 6 format 1 776  
94 14 Dtool_2KOdi8vm 7 105 780 476 14 Dtool_2KOdi8vm 1 4 time 1 778  
95 14 Dtool_2KOdSJN6 6 106 780 0 14 Dtool_2KOdSJN6 2 4 this 3 780  4 copy 1 781  
96 14 Dtool_2KOdDz_E 7 107 780 476 14 Dtool_2KOdDz_E 0 
97 14 Dtool_2KOdXkTy 6 108 760 0 14 Dtool_2KOdXkTy 1 4 this 3 781  
98 14 Dtool_2KOdLLsb 6 109 776 0 14 Dtool_2KOdLLsb 1 4 this 3 781  
99 14 Dtool_2KOdiMJn 6 110 778 0 14 Dtool_2KOdiMJn 1 4 this 3 781  
100 14 Dtool_2KOdb8yo 6 111 760 0 14 Dtool_2KOdb8yo 2 4 this 3 781  5 other 1 781  
101 14 Dtool_2KOd95ho 6 112 760 0 14 Dtool_2KOd95ho 2 4 this 3 781  5 other 1 781  
102 14 Dtool_2KOdf7Fy 6 113 760 0 14 Dtool_2KOdf7Fy 2 4 this 3 781  5 other 1 781  
103 14 Dtool_2KOdUJHy 6 114 760 0 14 Dtool_2KOdUJHy 2 4 this 3 781  5 other 1 781  
104 14 Dtool_2KOd_D07 6 115 777 0 14 Dtool_2KOd_D07 2 4 this 3 781  5 other 1 781  
105 14 Dtool_2KOdjIFs 6 116 780 0 14 Dtool_2KOdjIFs 2 4 this 3 780  7 seconds 1 777  
106 14 Dtool_2KOdq_Hs 6 117 780 0 14 Dtool_2KOdq_Hs 2 4 this 3 780  7 seconds 1 777  
107 14 Dtool_2KOdNh_f 7 118 780 476 14 Dtool_2KOdNh_f 2 4 this 3 781  7 seconds 1 777  
108 14 Dtool_2KOdTh8R 6 119 777 0 14 Dtool_2KOdTh8R 2 4 this 3 781  5 other 1 781  
109 14 Dtool_2KOd2wBg 7 119 780 476 14 Dtool_2KOd2wBg 2 4 this 3 781  7 seconds 1 777  
110 14 Dtool_2KOdDJiR 6 120 760 0 14 Dtool_2KOdDJiR 2 4 this 3 780  2 in 1 768  
111 14 Dtool_2KOdfj07 4 121 754 0 14 Dtool_2KOdfj07 2 4 this 3 781  3 out 1 770  
112 14 Dtool_2KOd2hG5 7 124 783 478 14 Dtool_2KOd2hG5 0 
113 14 Dtool_2KOdWucY 7 124 783 478 14 Dtool_2KOdWucY 2 6 format 1 776  3 url 1 774  
114 14 Dtool_2KOdAtcu 7 124 783 478 14 Dtool_2KOdAtcu 3 4 name 1 776  4 path 1 776  6 domain 1 776  
115 14 Dtool_2KOdOck5 4 126 754 0 14 Dtool_2KOdOck5 2 4 this 3 783  4 name 1 776  
116 14 Dtool_2KOdyFhg 6 127 776 0 14 Dtool_2KOdyFhg 1 4 this 3 784  
117 14 Dtool_2KOdi2Qd 4 128 754 0 14 Dtool_2KOdi2Qd 2 4 this 3 783  5 value 1 776  
118 14 Dtool_2KOdFSc5 6 129 776 0 14 Dtool_2KOdFSc5 1 4 this 3 784  
119 14 Dtool_2KOdVNff 4 130 754 0 14 Dtool_2KOdVNff 2 4 this 3 783  6 domain 1 776  
120 14 Dtool_2KOdBGrk 6 131 776 0 14 Dtool_2KOdBGrk 1 4 this 3 784  
121 14 Dtool_2KOdgXYU 4 132 754 0 14 Dtool_2KOdgXYU 2 4 this 3 783  4 path 1 776  
122 14 Dtool_2KOdP4T7 6 133 776 0 14 Dtool_2KOdP4T7 1 4 this 3 784  
123 14 Dtool_2KOdpqyy 4 134 754 0 14 Dtool_2KOdpqyy 2 4 this 3 783  7 expires 1 781  
124 14 Dtool_2KOdAto1 4 135 754 0 14 Dtool_2KOdAto1 1 4 this 3 783  
125 14 Dtool_2KOdNpuR 6 136 760 0 14 Dtool_2KOdNpuR 1 4 this 3 784  
126 14 Dtool_2KOdRhpB 7 137 780 476 14 Dtool_2KOdRhpB 1 4 this 3 784  
127 14 Dtool_2KOd8wcJ 4 138 754 0 14 Dtool_2KOd8wcJ 2 4 this 3 783  4 flag 1 760  
128 14 Dtool_2KOdlxx4 6 139 760 0 14 Dtool_2KOdlxx4 1 4 this 3 784  
129 14 Dtool_2KOdFRXJ 6 140 760 0 14 Dtool_2KOdFRXJ 2 4 this 3 784  5 other 1 784  
130 14 Dtool_2KOdf06y 4 141 754 0 14 Dtool_2KOdf06y 2 4 this 3 783  5 other 1 784  
131 14 Dtool_2KOdu1Zp 6 142 760 0 14 Dtool_2KOdu1Zp 3 4 this 3 783  6 format 1 776  3 url 1 774  
132 14 Dtool_2KOddC4P 6 143 760 0 14 Dtool_2KOddC4P 2 4 this 3 784  3 now 1 781  
133 14 Dtool_2KOdv13h 6 143 760 0 14 Dtool_2KOdv13h 1 4 this 3 784  
134 14 Dtool_2KOd6_jU 6 144 760 0 14 Dtool_2KOd6_jU 2 4 this 3 784  3 url 1 774  
135 14 Dtool_2KOdDQSj 4 145 754 0 14 Dtool_2KOdDQSj 2 4 this 3 784  3 out 1 770  
136 14 Dtool_2KOdhdYN 7 147 786 501 14 Dtool_2KOdhdYN 0 
137 14 Dtool_2KOdf2lz 7 147 786 501 14 Dtool_2KOdf2lz 1 4 copy 1 787  
138 14 Dtool_2KOdKPp_ 6 148 786 0 14 Dtool_2KOdKPp_ 2 4 this 3 786  4 copy 1 787  
139 14 Dtool_2KOdIeNt 4 150 754 0 14 Dtool_2KOdIeNt 0 
140 14 Dtool_2KOd0gjL 4 151 754 0 14 Dtool_2KOd0gjL 2 4 this 3 786  10 proxy_spec 1 776  
141 14 Dtool_2KOdcdMt 6 152 776 0 14 Dtool_2KOdcdMt 1 4 this 3 787  
142 14 Dtool_2KOdCtsw 4 153 754 0 14 Dtool_2KOdCtsw 2 4 this 3 786  16 direct_host_spec 1 776  
143 14 Dtool_2KOd_OJB 6 154 776 0 14 Dtool_2KOd_OJB 1 4 this 3 787  
144 14 Dtool_2KOdqHMi 4 155 754 0 14 Dtool_2KOdqHMi 2 4 this 3 786  14 try_all_direct 1 760  
145 14 Dtool_2KOd95uR 6 156 760 0 14 Dtool_2KOd95uR 1 4 this 3 787  
146 14 Dtool_2KOd6XUO 4 157 754 0 14 Dtool_2KOd6XUO 1 4 this 3 786  
147 14 Dtool_2KOdgkTU 4 158 754 0 14 Dtool_2KOdgkTU 3 4 this 3 786  6 scheme 1 776  5 proxy 1 774  
148 14 Dtool_2KOdMVZA 4 159 754 0 14 Dtool_2KOdMVZA 1 4 this 3 786  
149 14 Dtool_2KOdlCAB 4 160 754 0 14 Dtool_2KOdlCAB 2 4 this 3 786  8 hostname 1 776  
150 14 Dtool_2KOdJHk7 6 161 776 0 14 Dtool_2KOdJHk7 2 4 this 3 787  3 url 1 774  
151 14 Dtool_2KOdXtH7 4 161 754 0 14 Dtool_2KOdXtH7 3 4 this 3 787  3 url 1 774  7 proxies 1 789  
152 14 Dtool_2KOdhpQq 4 162 754 0 14 Dtool_2KOdhpQq 4 4 this 3 786  6 server 1 776  5 realm 1 776  8 username 1 776  
153 14 Dtool_2KOdlElE 6 163 776 0 14 Dtool_2KOdlElE 3 4 this 3 787  6 server 1 776  5 realm 1 776  
154 14 Dtool_2KOdjuM1 4 164 754 0 14 Dtool_2KOdjuM1 2 4 this 3 786  6 cookie 1 784  
155 14 Dtool_2KOd16l5 6 165 760 0 14 Dtool_2KOd16l5 2 4 this 3 786  6 cookie 1 784  
156 14 Dtool_2KOdGzuN 4 166 754 0 14 Dtool_2KOdGzuN 1 4 this 3 786  
157 14 Dtool_2KOd_mcR 6 167 760 0 14 Dtool_2KOd_mcR 2 4 this 3 787  6 cookie 1 784  
158 14 Dtool_2KOdjqXB 7 168 783 478 14 Dtool_2KOdjqXB 2 4 this 3 787  6 cookie 1 784  
159 14 Dtool_2KOd0N9X 4 169 754 0 14 Dtool_2KOd0N9X 2 4 this 3 787  3 out 1 770  
160 14 Dtool_2KOd4_Fk 4 170 754 0 14 Dtool_2KOd4_Fk 3 4 this 3 786  3 out 1 770  3 url 1 774  
161 14 Dtool_2KOdQVI3 4 171 754 0 14 Dtool_2KOdQVI3 2 4 this 3 786  8 filename 1 791  
162 14 Dtool_2KOdWLUz 4 172 754 0 14 Dtool_2KOdWLUz 2 4 this 3 786  3 pem 1 776  
163 14 Dtool_2KOdjJrF 4 173 754 0 14 Dtool_2KOdjJrF 2 4 this 3 786  10 passphrase 1 776  
164 14 Dtool_2KOdYTL6 6 174 760 0 14 Dtool_2KOdYTL6 1 4 this 3 786  
165 14 Dtool_2KOdsU3G 4 175 754 0 14 Dtool_2KOdsU3G 2 4 this 3 786  7 version 1 733  
166 14 Dtool_2KOdNyb3 6 176 733 0 14 Dtool_2KOdNyb3 1 4 this 3 787  
167 14 Dtool_2KOd9nwv 6 177 776 0 14 Dtool_2KOd9nwv 1 4 this 3 787  
168 14 Dtool_2KOdG_NH 6 178 733 0 14 Dtool_2KOdG_NH 1 7 version 1 776  
169 14 Dtool_2KOdcD3X 6 179 760 0 14 Dtool_2KOdcD3X 2 4 this 3 786  8 filename 1 791  
170 14 Dtool_2KOd7Lvd 4 181 754 0 14 Dtool_2KOd7Lvd 2 4 this 3 786  10 verify_ssl 1 738  
171 14 Dtool_2KOdZMkP 6 182 738 0 14 Dtool_2KOdZMkP 1 4 this 3 787  
172 14 Dtool_2KOdR6r0 4 183 754 0 14 Dtool_2KOdR6r0 2 4 this 3 786  11 cipher_list 1 776  
173 14 Dtool_2KOdpJQo 6 184 776 0 14 Dtool_2KOdpJQo 1 4 this 3 787  
174 14 Dtool_2KOdcDTY 6 185 760 0 14 Dtool_2KOdcDTY 2 4 this 3 786  17 server_attributes 1 776  
175 14 Dtool_2KOdnGYo 4 186 754 0 14 Dtool_2KOdnGYo 1 4 this 3 786  
176 14 Dtool_2KOdDV90 7 187 794 0 14 Dtool_2KOdDV90 2 4 this 3 786  21 persistent_connection 1 760  
177 14 Dtool_2KOdd7dJ 7 188 794 0 14 Dtool_2KOdd7dJ 3 4 this 3 786  3 url 1 774  4 body 1 776  
178 14 Dtool_2KOdUmtQ 7 189 794 0 14 Dtool_2KOdUmtQ 2 4 this 3 786  3 url 1 774  
179 14 Dtool_2KOdC6NS 7 190 794 0 14 Dtool_2KOdC6NS 2 4 this 3 786  3 url 1 774  
180 14 Dtool_2KOdKC9x 6 191 776 0 14 Dtool_2KOdKC9x 1 1 s 1 776  
181 14 Dtool_2KOd9KMP 6 192 776 0 14 Dtool_2KOd9KMP 1 1 s 1 776  
182 14 Dtool_2KOd4tMA 7 194 795 556 14 Dtool_2KOd4tMA 0 
183 14 Dtool_2KOdQDIw 7 194 795 556 14 Dtool_2KOdQDIw 1 4 copy 1 796  
184 14 Dtool_2KOd5Xv8 7 194 795 556 14 Dtool_2KOd5Xv8 1 4 text 1 776  
185 14 Dtool_2KOdZ_ii 7 194 795 556 14 Dtool_2KOdZ_ii 2 4 weak 1 760  3 tag 1 776  
186 14 Dtool_2KOdF2kZ 6 195 795 0 14 Dtool_2KOdF2kZ 2 4 this 3 795  4 copy 1 796  
187 14 Dtool_2KOds54_ 6 196 760 0 14 Dtool_2KOds54_ 1 4 this 3 796  
188 14 Dtool_2KOdHG7c 6 197 776 0 14 Dtool_2KOdHG7c 1 4 this 3 796  
189 14 Dtool_2KOdJDGH 6 198 776 0 14 Dtool_2KOdJDGH 1 4 this 3 796  
190 14 Dtool_2KOdICzc 6 199 760 0 14 Dtool_2KOdICzc 2 4 this 3 796  5 other 1 796  
191 14 Dtool_2KOduDMa 6 200 760 0 14 Dtool_2KOduDMa 2 4 this 3 796  5 other 1 796  
192 14 Dtool_2KOduwLK 6 201 760 0 14 Dtool_2KOduwLK 2 4 this 3 796  5 other 1 796  
193 14 Dtool_2KOdqnpJ 6 202 760 0 14 Dtool_2KOdqnpJ 2 4 this 3 796  5 other 1 796  
194 14 Dtool_2KOdT6L5 6 203 760 0 14 Dtool_2KOdT6L5 2 4 this 3 796  5 other 1 796  
195 14 Dtool_2KOddIqM 6 204 777 0 14 Dtool_2KOddIqM 2 4 this 3 796  5 other 1 796  
196 14 Dtool_2KOdGXUH 4 205 754 0 14 Dtool_2KOdGXUH 2 4 this 3 796  3 out 1 770  
197 14 Dtool_2KOdaGVJ 7 208 798 580 14 Dtool_2KOdaGVJ 0 
198 14 Dtool_2KOdrhhh 7 208 798 580 14 Dtool_2KOdrhhh 1 4 copy 1 799  
199 14 Dtool_2KOdBmXi 7 208 798 580 14 Dtool_2KOdBmXi 1 3 url 1 774  
200 14 Dtool_2KOdctNb 7 208 798 580 14 Dtool_2KOdctNb 1 3 url 1 776  
201 14 Dtool_2KOdpTpy 6 209 798 0 14 Dtool_2KOdpTpy 2 4 this 3 798  4 copy 1 799  
202 14 Dtool_2KOdiL7f 6 210 760 0 14 Dtool_2KOdiL7f 2 4 this 3 799  5 other 1 799  
203 14 Dtool_2KOdzx6X 6 211 760 0 14 Dtool_2KOdzx6X 2 4 this 3 799  5 other 1 799  
204 14 Dtool_2KOd2Z_X 6 212 760 0 14 Dtool_2KOd2Z_X 2 4 this 3 799  5 other 1 799  
205 14 Dtool_2KOd4ZmY 6 213 777 0 14 Dtool_2KOd4ZmY 2 4 this 3 799  5 other 1 799  
206 14 Dtool_2KOdUTc6 4 214 754 0 14 Dtool_2KOdUTc6 2 4 this 3 798  3 url 1 774  
207 14 Dtool_2KOdUTT8 6 215 774 0 14 Dtool_2KOdUTT8 1 4 this 3 799  
208 14 Dtool_2KOdKAZX 4 216 754 0 14 Dtool_2KOdKAZX 2 4 this 3 798  3 tag 1 796  
209 14 Dtool_2KOdbgI_ 6 217 760 0 14 Dtool_2KOdbgI_ 1 4 this 3 799  
210 14 Dtool_2KOdTNmT 6 218 796 0 14 Dtool_2KOdTNmT 1 4 this 3 799  
211 14 Dtool_2KOdHg2z 4 219 754 0 14 Dtool_2KOdHg2z 1 4 this 3 798  
212 14 Dtool_2KOdBu_L 4 220 754 0 14 Dtool_2KOdBu_L 2 4 this 3 798  4 date 1 781  
213 14 Dtool_2KOdwwOq 6 221 760 0 14 Dtool_2KOdwwOq 1 4 this 3 799  
214 14 Dtool_2KOd16s_ 6 222 781 0 14 Dtool_2KOd16s_ 1 4 this 3 799  
215 14 Dtool_2KOd1ns7 4 223 754 0 14 Dtool_2KOd1ns7 1 4 this 3 798  
216 14 Dtool_2KOdOwGy 4 225 754 0 14 Dtool_2KOdOwGy 2 4 this 3 798  12 request_mode 1 741  
217 14 Dtool_2KOdis_z 6 226 741 0 14 Dtool_2KOdis_z 1 4 this 3 799  
218 14 Dtool_2KOdaqta 4 228 754 0 14 Dtool_2KOdaqta 2 4 this 3 798  13 cache_control 1 742  
219 14 Dtool_2KOdiIC1 6 229 742 0 14 Dtool_2KOdiIC1 1 4 this 3 799  
220 14 Dtool_2KOdXwSU 6 230 760 0 14 Dtool_2KOdXwSU 2 4 this 3 798  2 in 1 768  
221 14 Dtool_2KOdg56_ 4 231 754 0 14 Dtool_2KOdg56_ 2 4 this 3 799  3 out 1 770  
222 14 Dtool_2KOdEH_O 4 232 754 0 14 Dtool_2KOdEH_O 3 4 this 3 799  3 out 1 770  12 indent_level 1 777  
223 14 Dtool_2KOdf_Sn 4 232 754 0 14 Dtool_2KOdf_Sn 2 4 this 3 799  3 out 1 770  
224 14 Dtool_2KOdVoes 6 237 760 0 14 Dtool_2KOdVoes 1 4 this 3 801  
225 14 Dtool_2KOdnmy8 6 238 760 0 14 Dtool_2KOdnmy8 1 4 this 3 801  
226 14 Dtool_2KOd_XTe 6 239 774 0 14 Dtool_2KOd_XTe 1 4 this 3 801  
227 14 Dtool_2KOdbGRg 6 240 799 0 14 Dtool_2KOdbGRg 1 4 this 3 801  
228 14 Dtool_2KOdFji4 6 241 733 0 14 Dtool_2KOdFji4 1 4 this 3 801  
229 14 Dtool_2KOd8qBF 6 242 776 0 14 Dtool_2KOd8qBF 1 4 this 3 801  
230 14 Dtool_2KOdd4Hd 6 243 777 0 14 Dtool_2KOdd4Hd 1 4 this 3 801  
231 14 Dtool_2KOdvrvb 6 244 776 0 14 Dtool_2KOdvrvb 1 4 this 3 801  
232 14 Dtool_2KOdHxhf 6 245 776 0 14 Dtool_2KOdHxhf 1 4 this 3 801  
233 14 Dtool_2KOd8j1e 6 246 776 0 14 Dtool_2KOd8j1e 1 4 this 3 801  
234 14 Dtool_2KOd2aFd 6 247 774 0 14 Dtool_2KOd2aFd 1 4 this 3 801  
235 14 Dtool_2KOdTcPw 6 248 776 0 14 Dtool_2KOdTcPw 2 4 this 3 801  3 key 1 776  
236 14 Dtool_2KOd4FC1 6 249 777 0 14 Dtool_2KOd4FC1 1 4 this 3 801  
237 14 Dtool_2KOdI2L3 6 250 774 0 14 Dtool_2KOdI2L3 2 4 this 3 801  1 n 1 777  
238 14 Dtool_2KOdf944 4 251 754 0 14 Dtool_2KOdf944 2 4 this 3 794  21 persistent_connection 1 760  
239 14 Dtool_2KOdiWP3 6 252 760 0 14 Dtool_2KOdiWP3 1 4 this 3 801  
240 14 Dtool_2KOdqU04 4 253 754 0 14 Dtool_2KOdqU04 2 4 this 3 794  11 allow_proxy 1 760  
241 14 Dtool_2KOdOM44 6 254 760 0 14 Dtool_2KOdOM44 1 4 this 3 801  
242 14 Dtool_2KOdqHlR 4 255 754 0 14 Dtool_2KOdqHlR 2 4 this 3 794  12 proxy_tunnel 1 760  
243 14 Dtool_2KOdCBWq 6 256 760 0 14 Dtool_2KOdCBWq 1 4 this 3 801  
244 14 Dtool_2KOdv_Dp 4 257 754 0 14 Dtool_2KOdv_Dp 2 4 this 3 794  15 timeout_seconds 1 766  
245 14 Dtool_2KOdR14O 6 258 766 0 14 Dtool_2KOdR14O 1 4 this 3 801  
246 14 Dtool_2KOdDZOE 4 259 754 0 14 Dtool_2KOdDZOE 2 4 this 3 794  16 blocking_connect 1 760  
247 14 Dtool_2KOdndZu 6 260 760 0 14 Dtool_2KOdndZu 1 4 this 3 801  
248 14 Dtool_2KOdlXv7 4 261 754 0 14 Dtool_2KOdlXv7 2 4 this 3 794  15 timeout_seconds 1 766  
249 14 Dtool_2KOdfwd5 6 262 766 0 14 Dtool_2KOdfwd5 1 4 this 3 801  
250 14 Dtool_2KOdFJnS 4 263 754 0 14 Dtool_2KOdFJnS 2 4 this 3 794  17 download_throttle 1 760  
251 14 Dtool_2KOdqGLu 6 264 760 0 14 Dtool_2KOdqGLu 1 4 this 3 801  
252 14 Dtool_2KOdqw0a 4 265 754 0 14 Dtool_2KOdqw0a 2 4 this 3 794  20 max_bytes_per_second 1 766  
253 14 Dtool_2KOdi_cQ 6 266 766 0 14 Dtool_2KOdi_cQ 1 4 this 3 801  
254 14 Dtool_2KOd5shL 4 267 754 0 14 Dtool_2KOd5shL 2 4 this 3 794  22 max_updates_per_second 1 766  
255 14 Dtool_2KOdHMcA 6 268 766 0 14 Dtool_2KOdHMcA 1 4 this 3 801  
256 14 Dtool_2KOdhZWP 4 269 754 0 14 Dtool_2KOdhZWP 2 4 this 3 794  9 file_size 1 778  
257 14 Dtool_2KOdsNiH 6 270 778 0 14 Dtool_2KOdsNiH 1 4 this 3 801  
258 14 Dtool_2KOdEQik 6 271 760 0 14 Dtool_2KOdEQik 1 4 this 3 801  
259 14 Dtool_2KOdN8ab 4 272 754 0 14 Dtool_2KOdN8ab 2 4 this 3 801  3 out 1 770  
260 14 Dtool_2KOdIvGa 4 273 754 0 14 Dtool_2KOdIvGa 1 4 this 3 794  
261 14 Dtool_2KOdPZJB 4 274 754 0 14 Dtool_2KOdPZJB 1 4 this 3 794  
262 14 Dtool_2KOdBzJt 4 275 754 0 14 Dtool_2KOdBzJt 1 4 this 3 794  
263 14 Dtool_2KOddFsV 4 276 754 0 14 Dtool_2KOddFsV 3 4 this 3 794  3 key 1 776  5 value 1 776  
264 14 Dtool_2KOdwPqu 6 277 760 0 14 Dtool_2KOdwPqu 2 4 this 3 794  3 url 1 799  
265 14 Dtool_2KOd4V7o 6 278 760 0 14 Dtool_2KOd4V7o 4 4 this 3 794  3 url 1 799  10 first_byte 1 778  9 last_byte 1 778  
266 14 Dtool_2KOdLWd4 6 279 760 0 14 Dtool_2KOdLWd4 2 4 this 3 794  3 url 1 799  
267 14 Dtool_2KOdss5e 6 280 760 0 14 Dtool_2KOdss5e 3 4 this 3 794  3 url 1 799  4 body 1 776  
268 14 Dtool_2KOdxlX3 6 281 760 0 14 Dtool_2KOdxlX3 3 4 this 3 794  3 url 1 799  4 body 1 776  
269 14 Dtool_2KOdAciN 6 282 760 0 14 Dtool_2KOdAciN 2 4 this 3 794  3 url 1 799  
270 14 Dtool_2KOde1xo 6 283 760 0 14 Dtool_2KOde1xo 2 4 this 3 794  3 url 1 799  
271 14 Dtool_2KOdaL93 6 284 760 0 14 Dtool_2KOdaL93 2 4 this 3 794  3 url 1 799  
272 14 Dtool_2KOdDbra 6 285 760 0 14 Dtool_2KOdDbra 2 4 this 3 794  3 url 1 799  
273 14 Dtool_2KOdez8L 4 286 754 0 14 Dtool_2KOdez8L 2 4 this 3 794  3 url 1 799  
274 14 Dtool_2KOd4Z2h 4 287 754 0 14 Dtool_2KOd4Z2h 4 4 this 3 794  3 url 1 799  10 first_byte 1 778  9 last_byte 1 778  
275 14 Dtool_2KOdV0p8 4 288 754 0 14 Dtool_2KOdV0p8 2 4 this 3 794  3 url 1 799  
276 14 Dtool_2KOd8VHe 4 289 754 0 14 Dtool_2KOd8VHe 3 4 this 3 794  3 url 1 799  4 body 1 776  
277 14 Dtool_2KOdV81y 6 290 760 0 14 Dtool_2KOdV81y 1 4 this 3 794  
278 14 Dtool_2KOdc0qc 4 291 754 0 14 Dtool_2KOdc0qc 2 4 this 3 794  3 url 1 799  
279 14 Dtool_2KOdR1_j 6 292 767 0 14 Dtool_2KOdR1_j 1 4 this 3 794  
280 14 Dtool_2KOdPbQV 6 293 760 0 14 Dtool_2KOdPbQV 3 4 this 3 794  8 filename 1 791  19 subdocument_resumes 1 760  
281 14 Dtool_2KOdKhGP 6 293 760 0 14 Dtool_2KOdKhGP 2 4 this 3 794  8 filename 1 791  
282 14 Dtool_2KOdovIW 6 294 760 0 14 Dtool_2KOdovIW 3 4 this 3 794  7 ramfile 1 803  19 subdocument_resumes 1 760  
283 14 Dtool_2KOdlZ_P 6 294 760 0 14 Dtool_2KOdlZ_P 2 4 this 3 794  7 ramfile 1 803  
284 14 Dtool_2KOdRUR4 6 295 771 0 14 Dtool_2KOdRUR4 1 4 this 3 794  
285 14 Dtool_2KOdH2KX 6 296 778 0 14 Dtool_2KOdH2KX 1 4 this 3 801  
286 14 Dtool_2KOdwOVm 6 297 778 0 14 Dtool_2KOdwOVm 1 4 this 3 801  
287 14 Dtool_2KOdXuSB 6 298 760 0 14 Dtool_2KOdXuSB 1 4 this 3 801  
288 14 Dtool_2KOde2x8 7 299 806 0 14 Dtool_2KOde2x8 0 
289 14 Dtool_2KOdB4PE 7 301 807 645 14 Dtool_2KOdB4PE 0 
290 14 Dtool_2KOdw6VS 6 303 777 0 14 Dtool_2KOdw6VS 2 4 this 3 807  11 source_file 1 791  
291 14 Dtool_2KOdP1ck 6 303 777 0 14 Dtool_2KOdP1ck 3 4 this 3 807  11 source_file 1 791  9 dest_file 1 791  
292 14 Dtool_2KOd4YBi 6 304 777 0 14 Dtool_2KOd4YBi 1 4 this 3 807  
293 14 Dtool_2KOdHZkY 6 305 760 0 14 Dtool_2KOdHZkY 2 4 this 3 807  11 source_file 1 791  
294 14 Dtool_2KOdDUun 6 305 760 0 14 Dtool_2KOdDUun 2 4 this 3 807  20 source_and_dest_file 1 803  
295 14 Dtool_2KOdujks 6 306 753 0 14 Dtool_2KOdujks 1 4 this 3 808  
296 14 Dtool_2KOd_aVY 7 309 810 651 14 Dtool_2KOd_aVY 0 
297 14 Dtool_2KOdR1U1 7 309 810 651 14 Dtool_2KOdR1U1 2 11 server_file 1 811  11 client_file 1 811  
298 14 Dtool_2KOd6i5v 7 309 810 651 14 Dtool_2KOd6i5v 2 11 server_file 1 803  11 client_file 1 811  
299 14 Dtool_2KOdXINq 4 311 754 0 14 Dtool_2KOdXINq 2 4 this 3 812  3 out 1 770  
300 14 Dtool_2KOd3Ao5 4 312 754 0 14 Dtool_2KOd3Ao5 2 4 this 3 812  3 out 1 770  
301 14 Dtool_2KOdV2oK 4 313 754 0 14 Dtool_2KOdV2oK 2 4 this 3 812  3 out 1 770  
302 14 Dtool_2KOddnHR 6 314 760 0 14 Dtool_2KOddnHR 2 4 this 3 810  4 file 1 811  
303 14 Dtool_2KOdtu0x 6 315 760 0 14 Dtool_2KOdtu0x 2 4 this 3 810  4 file 1 811  
304 14 Dtool_2KOdd__n 6 316 777 0 14 Dtool_2KOdd__n 1 4 this 3 812  
305 14 Dtool_2KOdXid5 6 317 777 0 14 Dtool_2KOdXid5 1 4 this 3 812  
306 14 Dtool_2KOdC6SH 6 318 776 0 14 Dtool_2KOdC6SH 2 4 this 3 812  5 index 1 777  
307 14 Dtool_2KOdtjxY 6 319 776 0 14 Dtool_2KOdtjxY 2 4 this 3 812  5 index 1 777  
308 14 Dtool_2KOdQDcT 6 320 777 0 14 Dtool_2KOdQDcT 2 4 this 3 812  6 mfname 1 776  
309 14 Dtool_2KOd5_ms 4 321 754 0 14 Dtool_2KOd5_ms 3 4 this 3 810  6 mfname 1 776  4 size 1 777  
310 14 Dtool_2KOdMBMJ 6 322 777 0 14 Dtool_2KOdMBMJ 3 4 this 3 810  6 mfname 1 776  4 size 1 777  
311 14 Dtool_2KOdTy7k 6 323 777 0 14 Dtool_2KOdTy7k 2 4 this 3 812  6 mfname 1 776  
312 14 Dtool_2KOd_6E_ 4 324 754 0 14 Dtool_2KOd_6E_ 3 4 this 3 810  6 mfname 1 776  4 size 1 777  
313 14 Dtool_2KOdyAuk 6 325 753 0 14 Dtool_2KOdyAuk 2 4 this 3 812  6 mfname 1 776  
314 14 Dtool_2KOd2HN2 6 326 753 0 14 Dtool_2KOd2HN2 2 4 this 3 812  6 mfname 1 776  
315 14 Dtool_2KOddYJ4 4 327 754 0 14 Dtool_2KOddYJ4 2 4 this 3 810  6 mfname 1 776  
316 14 Dtool_2KOd0bjV 4 328 754 0 14 Dtool_2KOd0bjV 2 4 this 3 810  6 mfname 1 776  
317 14 Dtool_2KOdwEYN 4 329 754 0 14 Dtool_2KOdwEYN 2 4 this 3 810  6 mfname 1 776  
318 14 Dtool_2KOdBgOD 4 330 754 0 14 Dtool_2KOdBgOD 2 4 this 3 810  6 mfname 1 776  
319 14 Dtool_2KOdvRAy 6 331 777 0 14 Dtool_2KOdvRAy 2 4 this 3 812  6 mfname 1 776  
320 14 Dtool_2KOdlMf6 6 332 776 0 14 Dtool_2KOdlMf6 3 4 this 3 812  6 mfname 1 776  5 index 1 777  
321 14 Dtool_2KOdOqV1 6 333 760 0 14 Dtool_2KOdOqV1 2 4 this 3 812  6 mfname 1 776  
322 14 Dtool_2KOdNg5P 6 334 760 0 14 Dtool_2KOdNg5P 2 4 this 3 812  6 mfname 1 776  
323 14 Dtool_2KOdSEoI 6 335 760 0 14 Dtool_2KOdSEoI 2 4 this 3 812  6 mfname 1 776  
324 14 Dtool_2KOd8yC1 6 336 760 0 14 Dtool_2KOd8yC1 2 4 this 3 812  6 mfname 1 776  
325 14 Dtool_2KOdzdCE 7 337 815 0 14 Dtool_2KOdzdCE 2 4 this 3 812  6 mfname 1 776  
326 14 Dtool_2KOdiMJh 4 338 754 0 14 Dtool_2KOdiMJh 3 4 this 3 810  6 mfname 1 776  3 val 1 815  
327 14 Dtool_2KOd1YhV 7 339 815 0 14 Dtool_2KOd1YhV 2 4 this 3 812  6 mfname 1 776  
328 14 Dtool_2KOd7_my 4 340 754 0 14 Dtool_2KOd7_my 3 4 this 3 810  6 mfname 1 776  3 val 1 815  
329 14 Dtool_2KOdU638 4 341 754 0 14 Dtool_2KOdU638 2 4 this 3 810  6 mfname 1 776  
330 14 Dtool_2KOduOKg 4 342 754 0 14 Dtool_2KOduOKg 2 4 this 3 810  13 server_mfname 1 776  
331 14 Dtool_2KOdrRXT 4 343 754 0 14 Dtool_2KOdrRXT 2 4 this 3 810  6 mfname 1 776  
332 14 Dtool_2KOdsfrv 4 344 754 0 14 Dtool_2KOdsfrv 1 4 this 3 810  
333 14 Dtool_2KOdcfl4 4 345 754 0 14 Dtool_2KOdcfl4 5 4 this 3 810  6 mfname 1 776  5 phase 1 753  4 size 1 777  6 status 1 777  
334 14 Dtool_2KOdRAQv 4 346 754 0 14 Dtool_2KOdRAQv 3 4 this 3 810  6 mfname 1 776  5 fname 1 776  
335 14 Dtool_2KOdQsdt 7 347 817 0 14 Dtool_2KOdQsdt 3 4 this 3 810  4 file 1 811  16 want_server_info 1 760  
336 14 Dtool_2KOdUwJj 7 347 817 0 14 Dtool_2KOdUwJj 3 4 this 3 810  4 file 1 803  16 want_server_info 1 760  
337 14 Dtool_2KOdM7K5 6 348 760 0 14 Dtool_2KOdM7K5 4 4 this 3 810  4 file 1 811  2 db 1 817  16 want_server_info 1 760  
338 14 Dtool_2KOdm3aE 4 349 754 0 14 Dtool_2KOdm3aE 4 4 this 3 810  4 name 1 791  4 hash 1 818  7 version 1 777  
339 14 Dtool_2KOd05Zn 4 350 754 0 14 Dtool_2KOd05Zn 3 4 this 3 810  4 name 1 791  4 hash 1 818  
340 14 Dtool_2KOdVFEb 6 351 760 0 14 Dtool_2KOdVFEb 2 4 this 3 812  4 name 1 791  
341 14 Dtool_2KOdbMUC 6 352 777 0 14 Dtool_2KOdbMUC 2 4 this 3 812  4 name 1 791  
342 14 Dtool_2KOdLJWU 4 353 754 0 14 Dtool_2KOdLJWU 3 4 this 3 810  4 name 1 791  12 num_versions 1 777  
343 14 Dtool_2KOdeTF2 6 354 777 0 14 Dtool_2KOdeTF2 3 4 this 3 812  4 name 1 791  4 hash 1 818  
344 14 Dtool_2KOd6zuc 6 355 818 0 14 Dtool_2KOd6zuc 3 4 this 3 812  4 name 1 791  7 version 1 777  
345 14 Dtool_2KOdUQPe 7 359 820 700 14 Dtool_2KOdUQPe 0 
346 14 Dtool_2KOdszJD 6 361 760 0 14 Dtool_2KOdszJD 2 4 this 3 820  14 multifile_name 1 791  
347 14 Dtool_2KOdbwYp 4 362 754 0 14 Dtool_2KOdbwYp 2 4 this 3 820  11 extract_dir 1 791  
348 14 Dtool_2KOdZFSE 4 363 754 0 14 Dtool_2KOdZFSE 1 4 this 3 820  
349 14 Dtool_2KOd22R_ 6 364 760 0 14 Dtool_2KOd22R_ 2 4 this 3 820  12 subfile_name 1 791  
350 14 Dtool_2KOdRYjW 6 365 777 0 14 Dtool_2KOdRYjW 1 4 this 3 820  
351 14 Dtool_2KOdCcut 6 366 777 0 14 Dtool_2KOdCcut 1 4 this 3 820  
352 14 Dtool_2KOdhtp3 6 367 753 0 14 Dtool_2KOdhtp3 1 4 this 3 821  
353 14 Dtool_2KOdaBlQ 6 368 760 0 14 Dtool_2KOdaBlQ 1 4 this 3 820  
354 14 Dtool_2KOdZfxv 7 370 823 716 14 Dtool_2KOdZfxv 0 
355 14 Dtool_2KOdZXC6 4 371 754 0 14 Dtool_2KOdZXC6 3 4 this 3 823  3 out 1 770  12 delete_later 1 760  
356 14 Dtool_2KOddq5z 4 371 754 0 14 Dtool_2KOddq5z 2 4 this 3 823  3 out 1 770  
357 14 Dtool_2KOdFGvk 6 372 760 0 14 Dtool_2KOdFGvk 3 4 this 3 823  4 file 1 824  15 close_when_done 1 760  
358 14 Dtool_2KOdk5Dq 4 373 754 0 14 Dtool_2KOdk5Dq 1 4 this 3 823  
359 14 Dtool_2KOdrLNF 6 374 760 0 14 Dtool_2KOdrLNF 2 4 this 3 823  4 file 1 811  
360 14 Dtool_2KOdJUTf 4 375 754 0 14 Dtool_2KOdJUTf 1 4 this 3 823  
361 14 Dtool_2KOdJH3n 4 376 754 0 14 Dtool_2KOdJH3n 1 4 this 3 823  
362 14 Dtool_2KOdXe93 7 379 826 718 14 Dtool_2KOdXe93 0 
363 14 Dtool_2KOd8YxX 7 379 826 718 14 Dtool_2KOd8YxX 1 6 buffer 1 827  
364 14 Dtool_2KOdYc1E 6 381 777 0 14 Dtool_2KOdYc1E 3 4 this 3 826  5 patch 1 811  6 infile 1 811  
365 14 Dtool_2KOd_N2z 6 382 777 0 14 Dtool_2KOd_N2z 1 4 this 3 826  
366 14 Dtool_2KOdx_F5 6 383 753 0 14 Dtool_2KOdx_F5 1 4 this 3 829  
367 14 Dtool_2KOdZj2d 6 356 831 0 14 Dtool_2KOdZj2d 1 4 name 1 811  
368 14 Dtool_2KOdwHLZ 6 357 831 0 14 Dtool_2KOdwHLZ 1 4 name 1 811  
111
722 12 AsyncUtility 26625 12 AsyncUtility 12 AsyncUtility 0 0 0 0 372 0 3 369 370 371 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : AsyncUtility
// Description :
////////////////////////////////////////////////////////////////////

723 8 SSReader 26625 8 SSReader 8 SSReader 0 0 0 0 373 0 3 374 375 376 0 0 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : SSReader
// Description : An internal class for reading from a socket stream.
//               This serves as a base class for both ISocketStream
//               and SocketStream; its purpose is to minimize
//               redundant code between them.  Do not use it directly.
////////////////////////////////////////////////////////////////////

724 8 SSWriter 26625 8 SSWriter 8 SSWriter 0 0 0 0 377 0 9 378 379 380 381 382 383 384 385 386 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : SSWriter
// Description : An internal class for writing to a socket stream.
//               This serves as a base class for both OSocketStream
//               and SocketStream; its purpose is to minimize
//               redundant code between them.  Do not use it directly.
////////////////////////////////////////////////////////////////////

725 13 ISocketStream 141313 13 ISocketStream 13 ISocketStream 0 0 0 0 393 0 2 391 392 0 2 3 726 387 388 3 723 389 390 0 0 529
////////////////////////////////////////////////////////////////////
//       Class : ISocketStream
// Description : This is a base class for istreams implemented in
//               Panda that read from a (possibly non-blocking)
//               socket.  It adds is_closed(), which can be called
//               after an eof condition to check whether the socket
//               has been closed, or whether more data may be
//               available later.
////////////////////////////////////////////////////////////////////

726 7 istream 2049 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0

727 13 OSocketStream 141313 13 OSocketStream 13 OSocketStream 0 0 0 0 401 0 3 398 399 400 0 2 3 728 394 395 3 724 396 397 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : OSocketStream
// Description : A base class for ostreams that write to a (possibly
//               non-blocking) socket.  It adds is_closed(), which can
//               be called after any write operation fails to check
//               whether the socket has been closed, or whether more
//               data may be sent later.
////////////////////////////////////////////////////////////////////

728 7 ostream 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

729 12 SocketStream 141313 12 SocketStream 12 SocketStream 0 0 0 0 411 0 3 408 409 410 0 3 3 730 402 403 3 723 404 405 3 724 406 407 0 0 285
////////////////////////////////////////////////////////////////////
//       Class : SocketStream
// Description : A base class for iostreams that read and write to a
//               (possibly non-blocking) socket.
////////////////////////////////////////////////////////////////////

730 8 iostream 2049 8 iostream 8 iostream 0 0 0 0 0 0 0 0 0 0 0 0

731 7 URLSpec 141313 7 URLSpec 7 URLSpec 0 0 0 1 412 457 0 43 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 447 448 449 450 451 452 453 454 455 456 1 446 0 0 0 437
////////////////////////////////////////////////////////////////////
//       Class : URLSpec
// Description : A container for a URL, e.g. "http://server:port/path".
//
//               The URLSpec object is similar to a Filename in that
//               it contains logic to identify the various parts of a
//               URL and return (or modify) them separately.
////////////////////////////////////////////////////////////////////

732 8 HTTPEnum 141313 8 HTTPEnum 8 HTTPEnum 0 0 0 0 458 0 0 0 0 0 2 733 734 348
////////////////////////////////////////////////////////////////////
//       Class : HTTPEnum
// Description : This class is just used as a namespace wrapper for
//               some of the enumerated types used by various classes
//               within the HTTPClient family.
////////////////////////////////////////////////////////////////////

733 11 HTTPVersion 794624 21 HTTPEnum::HTTPVersion 21 HTTPEnum::HTTPVersion 732 0 0 0 0 0 0 0 0 4 5 HV_09 15 HTTPEnum::HV_09 0 5 HV_10 15 HTTPEnum::HV_10 1 5 HV_11 15 HTTPEnum::HV_11 2 8 HV_other 18 HTTPEnum::HV_other 3 0 0

734 6 Method 794624 16 HTTPEnum::Method 16 HTTPEnum::Method 732 0 0 0 0 0 0 0 0 8 9 M_options 19 HTTPEnum::M_options 0 5 M_get 15 HTTPEnum::M_get 1 6 M_head 16 HTTPEnum::M_head 2 6 M_post 16 HTTPEnum::M_post 3 5 M_put 15 HTTPEnum::M_put 4 8 M_delete 18 HTTPEnum::M_delete 5 7 M_trace 17 HTTPEnum::M_trace 6 9 M_connect 19 HTTPEnum::M_connect 7 0 0

735 8 HTTPDate 141313 8 HTTPDate 8 HTTPDate 0 0 0 1 459 476 0 16 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 0 0 0 0 466
////////////////////////////////////////////////////////////////////
//       Class : HTTPDate
// Description : A container for an HTTP-legal time/date indication.
//               This can accept a string from an HTTP header and will
//               decode it into a C time_t value; conversely, it can
//               accept a time_t value and encode it for output as a
//               string.
////////////////////////////////////////////////////////////////////

736 10 HTTPCookie 26625 10 HTTPCookie 10 HTTPCookie 0 0 0 1 477 478 0 20 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 0 0 0 0 327
////////////////////////////////////////////////////////////////////
//       Class : HTTPCookie
// Description : A cookie sent from an HTTP server to be stored on the
//               client and returned when the path and/or domain
//               matches.
////////////////////////////////////////////////////////////////////

737 10 HTTPClient 26625 10 HTTPClient 10 HTTPClient 0 0 0 1 499 501 0 43 500 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 0 0 0 1 738 522
////////////////////////////////////////////////////////////////////
//       Class : HTTPClient
// Description : Handles contacting an HTTP server and retrieving a
//               document.  Each HTTPClient object represents a
//               separate context; it is up to the programmer whether
//               one HTTPClient should be used to retrieve all
//               documents, or a separate one should be created each
//               time.
////////////////////////////////////////////////////////////////////

738 9 VerifySSL 794624 21 HTTPClient::VerifySSL 21 HTTPClient::VerifySSL 737 0 0 0 0 0 0 0 0 3 12 VS_no_verify 24 HTTPClient::VS_no_verify 0 16 VS_no_date_check 28 HTTPClient::VS_no_date_check 1 9 VS_normal 21 HTTPClient::VS_normal 2 0 0

739 13 HTTPEntityTag 141313 13 HTTPEntityTag 13 HTTPEntityTag 0 0 0 1 544 556 0 11 545 546 547 548 549 550 551 552 553 554 555 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : HTTPEntityTag
// Description : A container for an "entity tag" from an HTTP server.
//               This is used to identify a particular version of a
//               document or resource, particularly useful for
//               verifying caches.
////////////////////////////////////////////////////////////////////

740 12 DocumentSpec 141313 12 DocumentSpec 12 DocumentSpec 0 0 0 1 557 580 0 22 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 0 0 0 2 741 742 562
////////////////////////////////////////////////////////////////////
//       Class : DocumentSpec
// Description : A descriptor that refers to a particular version of a
//               document.  This includes the URL of the document and
//               its identity tag and last-modified dates.
//
//               The DocumentSpec may also be used to request a newer
//               document than a particular one if available, for
//               instance to refresh a cached document.
////////////////////////////////////////////////////////////////////

741 11 RequestMode 794624 25 DocumentSpec::RequestMode 25 DocumentSpec::RequestMode 740 0 0 0 0 0 0 0 0 4 6 RM_any 20 DocumentSpec::RM_any 0 8 RM_equal 22 DocumentSpec::RM_equal 1 8 RM_newer 22 DocumentSpec::RM_newer 2 17 RM_equal_or_newer 31 DocumentSpec::RM_equal_or_newer 3 0 0

742 12 CacheControl 794624 26 DocumentSpec::CacheControl 26 DocumentSpec::CacheControl 740 0 0 0 0 0 0 0 0 3 14 CC_allow_cache 28 DocumentSpec::CC_allow_cache 0 13 CC_revalidate 27 DocumentSpec::CC_revalidate 1 11 CC_no_cache 25 DocumentSpec::CC_no_cache 2 0 0

743 11 HTTPChannel 75777 11 HTTPChannel 11 HTTPChannel 0 0 0 0 0 0 63 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 0 1 0 744 0 0 0 1 745 875
////////////////////////////////////////////////////////////////////
//       Class : HTTPChannel
// Description : A single channel of communication from an HTTPClient.
//               This is similar to the concept of a 'connection',
//               except that HTTP is technically connectionless; in
//               fact, a channel may represent one unbroken connection
//               or it may transparently close and reopen a new
//               connection with each request.
//
//               A channel is conceptually a single thread of I/O.
//               One document at a time may be requested using a
//               channel; a new document may (in general) not be
//               requested from the same HTTPChannel until the first
//               document has been fully retrieved.
////////////////////////////////////////////////////////////////////

744 11 VirtualFile 2049 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

745 10 StatusCode 794624 23 HTTPChannel::StatusCode 23 HTTPChannel::StatusCode 743 0 0 0 0 0 0 0 0 17 13 SC_incomplete 26 HTTPChannel::SC_incomplete 0 17 SC_internal_error 30 HTTPChannel::SC_internal_error 1 16 SC_no_connection 29 HTTPChannel::SC_no_connection 2 10 SC_timeout 23 HTTPChannel::SC_timeout 3 18 SC_lost_connection 31 HTTPChannel::SC_lost_connection 4 20 SC_non_http_response 33 HTTPChannel::SC_non_http_response 5 15 SC_invalid_http 28 HTTPChannel::SC_invalid_http 6 24 SC_socks_invalid_version 37 HTTPChannel::SC_socks_invalid_version 7 35 SC_socks_no_acceptable_login_method 48 HTTPChannel::SC_socks_no_acceptable_login_method 8 16 SC_socks_refused 29 HTTPChannel::SC_socks_refused 9 22 SC_socks_no_connection 35 HTTPChannel::SC_socks_no_connection 10 23 SC_ssl_internal_failure 36 HTTPChannel::SC_ssl_internal_failure 11 19 SC_ssl_no_handshake 32 HTTPChannel::SC_ssl_no_handshake 12 23 SC_http_error_watermark 36 HTTPChannel::SC_http_error_watermark 13 33 SC_ssl_invalid_server_certificate 46 HTTPChannel::SC_ssl_invalid_server_certificate 14 24 SC_ssl_unexpected_server 37 HTTPChannel::SC_ssl_unexpected_server 15 23 SC_download_write_error 36 HTTPChannel::SC_download_write_error 16 0 194
// get_status_code() will either return an HTTP-style status code >=
// 100 (e.g. 404), or one of the following values.  In general,
// these are ordered from less-successful to more-successful.

746 12 Decompressor 26625 12 Decompressor 12 Decompressor 0 0 0 1 644 645 0 4 646 647 648 649 0 0 0 0 319
////////////////////////////////////////////////////////////////////
//       Class : Decompressor
// Description : This manages run-time decompression of a
//               zlib-compressed stream, as a background or foreground
//               task.
////////////////////////////////////////////////////////////////////

747 10 DownloadDb 26625 10 DownloadDb 10 DownloadDb 0 0 0 1 650 651 0 45 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 0 0 0 1 748 594
////////////////////////////////////////////////////////////////////
//       Class : DownloadDb
// Description : A listing of files within multifiles for management
//               of client-side synchronization with a server-provided
//               set of files.
//
//               This class manages one copy of the database for the
//               client, representing the files on the client system,
//               and another copy for the server, representing the
//               files the server has available.
////////////////////////////////////////////////////////////////////

748 6 Status 794624 18 DownloadDb::Status 18 DownloadDb::Status 747 0 0 0 0 0 0 0 0 4 17 Status_incomplete 29 DownloadDb::Status_incomplete 0 15 Status_complete 27 DownloadDb::Status_complete 1 19 Status_decompressed 31 DownloadDb::Status_decompressed 2 16 Status_extracted 28 DownloadDb::Status_extracted 3 0 213
// Status of a multifile is stored in this enum
// Note these values are in increasing order of "doneness"
// So if you are decompressed, you are complete
// If you are extracted, you are decompressed and complete

749 9 Extractor 26625 9 Extractor 9 Extractor 0 0 0 1 699 700 0 8 701 702 703 704 705 706 707 708 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : Extractor
// Description : This class automatically extracts the contents of a
//               Multifile to the current directory (or to a specified
//               directory) in the background.
//
//               It is designed to limit its use of system resources
//               and run unobtrusively in the background.  After
//               specifying the files you wish to extract via repeated
//               calls to request_subfile(), begin the process by
//               calling run() repeatedly.  Each call to run()
//               extracts another small portion of the Multifile.
//               Call run() whenever you have spare cycles until run()
//               returns EU_success.
////////////////////////////////////////////////////////////////////

750 15 MultiplexStream 141313 15 MultiplexStream 15 MultiplexStream 0 0 0 1 709 716 0 6 710 711 712 713 714 715 0 1 0 728 0 0 0 0 544
////////////////////////////////////////////////////////////////////
//       Class : MultiplexStream
// Description : This is a special ostream that forwards the data that
//               is written to it to any number of other sources, for
//               instance other ostreams, or explicitly to a disk file
//               or to system logging utilities.  It's a very handy
//               thing to set Notify to refer to when running in batch
//               mode.
////////////////////////////////////////////////////////////////////

751 7 Patcher 26625 7 Patcher 7 Patcher 0 0 0 1 717 718 0 3 719 720 721 0 0 0 0 209
////////////////////////////////////////////////////////////////////
//       Class : Patcher
// Description : Applies a patch synchronously
////////////////////////////////////////////////////////////////////

752 14 AsyncUtility * 8576 14 AsyncUtility * 14 AsyncUtility * 0 0 722 0 0 0 0 0 0 0 0 0

753 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

754 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

755 20 AsyncUtility const * 8576 20 AsyncUtility const * 20 AsyncUtility const * 0 0 756 0 0 0 0 0 0 0 0 0

756 18 AsyncUtility const 8832 18 AsyncUtility const 18 AsyncUtility const 0 0 722 0 0 0 0 0 0 0 0 0

757 10 SSReader * 8576 10 SSReader * 10 SSReader * 0 0 723 0 0 0 0 0 0 0 0 0

758 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 759 0 0 0 0 0 0 0 0 0

759 8 Datagram 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

760 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

761 10 SSWriter * 8576 10 SSWriter * 10 SSWriter * 0 0 724 0 0 0 0 0 0 0 0 0

762 16 Datagram const * 8576 16 Datagram const * 16 Datagram const * 0 0 763 0 0 0 0 0 0 0 0 0

763 14 Datagram const 8832 14 Datagram const 14 Datagram const 0 0 759 0 0 0 0 0 0 0 0 0

764 16 SSWriter const * 8576 16 SSWriter const * 16 SSWriter const * 0 0 765 0 0 0 0 0 0 0 0 0

765 14 SSWriter const 8832 14 SSWriter const 14 SSWriter const 0 0 724 0 0 0 0 0 0 0 0 0

766 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

767 15 ISocketStream * 8576 15 ISocketStream * 15 ISocketStream * 0 0 725 0 0 0 0 0 0 0 0 0

768 9 istream * 8576 9 istream * 9 istream * 0 0 726 0 0 0 0 0 0 0 0 0

769 15 OSocketStream * 8576 15 OSocketStream * 15 OSocketStream * 0 0 727 0 0 0 0 0 0 0 0 0

770 9 ostream * 8576 9 ostream * 9 ostream * 0 0 728 0 0 0 0 0 0 0 0 0

771 14 SocketStream * 8576 14 SocketStream * 14 SocketStream * 0 0 729 0 0 0 0 0 0 0 0 0

772 10 iostream * 8576 10 iostream * 10 iostream * 0 0 730 0 0 0 0 0 0 0 0 0

773 9 URLSpec * 8576 9 URLSpec * 9 URLSpec * 0 0 731 0 0 0 0 0 0 0 0 0

774 15 URLSpec const * 8576 15 URLSpec const * 15 URLSpec const * 0 0 775 0 0 0 0 0 0 0 0 0

775 13 URLSpec const 8832 13 URLSpec const 13 URLSpec const 0 0 731 0 0 0 0 0 0 0 0 0

776 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

777 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

778 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

779 4 char 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0

780 10 HTTPDate * 8576 10 HTTPDate * 10 HTTPDate * 0 0 735 0 0 0 0 0 0 0 0 0

781 16 HTTPDate const * 8576 16 HTTPDate const * 16 HTTPDate const * 0 0 782 0 0 0 0 0 0 0 0 0

782 14 HTTPDate const 8832 14 HTTPDate const 14 HTTPDate const 0 0 735 0 0 0 0 0 0 0 0 0

783 12 HTTPCookie * 8576 12 HTTPCookie * 12 HTTPCookie * 0 0 736 0 0 0 0 0 0 0 0 0

784 18 HTTPCookie const * 8576 18 HTTPCookie const * 18 HTTPCookie const * 0 0 785 0 0 0 0 0 0 0 0 0

785 16 HTTPCookie const 8832 16 HTTPCookie const 16 HTTPCookie const 0 0 736 0 0 0 0 0 0 0 0 0

786 12 HTTPClient * 8576 12 HTTPClient * 12 HTTPClient * 0 0 737 0 0 0 0 0 0 0 0 0

787 18 HTTPClient const * 8576 18 HTTPClient const * 18 HTTPClient const * 0 0 788 0 0 0 0 0 0 0 0 0

788 16 HTTPClient const 8832 16 HTTPClient const 16 HTTPClient const 0 0 737 0 0 0 0 0 0 0 0 0

789 19 vector< URLSpec > * 8576 19 vector< URLSpec > * 19 vector< URLSpec > * 0 0 790 0 0 0 0 0 0 0 0 0

790 17 vector< URLSpec > 2048 17 vector< URLSpec > 17 vector< URLSpec > 0 0 0 0 0 0 0 0 0 0 0 0

791 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 792 0 0 0 0 0 0 0 0 0

792 14 Filename const 8832 14 Filename const 14 Filename const 0 0 793 0 0 0 0 0 0 0 0 0

793 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

794 13 HTTPChannel * 8576 13 HTTPChannel * 13 HTTPChannel * 0 0 743 0 0 0 0 0 0 0 0 0

795 15 HTTPEntityTag * 8576 15 HTTPEntityTag * 15 HTTPEntityTag * 0 0 739 0 0 0 0 0 0 0 0 0

796 21 HTTPEntityTag const * 8576 21 HTTPEntityTag const * 21 HTTPEntityTag const * 0 0 797 0 0 0 0 0 0 0 0 0

797 19 HTTPEntityTag const 8832 19 HTTPEntityTag const 19 HTTPEntityTag const 0 0 739 0 0 0 0 0 0 0 0 0

798 14 DocumentSpec * 8576 14 DocumentSpec * 14 DocumentSpec * 0 0 740 0 0 0 0 0 0 0 0 0

799 20 DocumentSpec const * 8576 20 DocumentSpec const * 20 DocumentSpec const * 0 0 800 0 0 0 0 0 0 0 0 0

800 18 DocumentSpec const 8832 18 DocumentSpec const 18 DocumentSpec const 0 0 740 0 0 0 0 0 0 0 0 0

801 19 HTTPChannel const * 8576 19 HTTPChannel const * 19 HTTPChannel const * 0 0 802 0 0 0 0 0 0 0 0 0

802 17 HTTPChannel const 8832 17 HTTPChannel const 17 HTTPChannel const 0 0 743 0 0 0 0 0 0 0 0 0

803 9 Ramfile * 8576 9 Ramfile * 9 Ramfile * 0 0 804 0 0 0 0 0 0 0 0 0

804 7 Ramfile 2048 7 Ramfile 7 Ramfile 0 0 0 0 0 0 0 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

805 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

806 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 805 0 0 0 0 0 0 0 0 0

807 14 Decompressor * 8576 14 Decompressor * 14 Decompressor * 0 0 746 0 0 0 0 0 0 0 0 0

808 20 Decompressor const * 8576 20 Decompressor const * 20 Decompressor const * 0 0 809 0 0 0 0 0 0 0 0 0

809 18 Decompressor const 8832 18 Decompressor const 18 Decompressor const 0 0 746 0 0 0 0 0 0 0 0 0

810 12 DownloadDb * 8576 12 DownloadDb * 12 DownloadDb * 0 0 747 0 0 0 0 0 0 0 0 0

811 10 Filename * 8576 10 Filename * 10 Filename * 0 0 793 0 0 0 0 0 0 0 0 0

812 18 DownloadDb const * 8576 18 DownloadDb const * 18 DownloadDb const * 0 0 813 0 0 0 0 0 0 0 0 0

813 16 DownloadDb const 8832 16 DownloadDb const 16 DownloadDb const 0 0 747 0 0 0 0 0 0 0 0 0

814 7 HashVal 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

815 9 HashVal * 8576 9 HashVal * 9 HashVal * 0 0 814 0 0 0 0 0 0 0 0 0

816 2 Db 1312768 14 DownloadDb::Db 14 DownloadDb::Db 747 0 0 0 0 0 0 0 0 0 0 0

817 4 Db * 8576 16 DownloadDb::Db * 16 DownloadDb::Db * 0 0 816 0 0 0 0 0 0 0 0 0

818 15 HashVal const * 8576 15 HashVal const * 15 HashVal const * 0 0 819 0 0 0 0 0 0 0 0 0

819 13 HashVal const 8832 13 HashVal const 13 HashVal const 0 0 814 0 0 0 0 0 0 0 0 0

820 11 Extractor * 8576 11 Extractor * 11 Extractor * 0 0 749 0 0 0 0 0 0 0 0 0

821 17 Extractor const * 8576 17 Extractor const * 17 Extractor const * 0 0 822 0 0 0 0 0 0 0 0 0

822 15 Extractor const 8832 15 Extractor const 15 Extractor const 0 0 749 0 0 0 0 0 0 0 0 0

823 17 MultiplexStream * 8576 17 MultiplexStream * 17 MultiplexStream * 0 0 750 0 0 0 0 0 0 0 0 0

824 6 FILE * 8576 6 FILE * 6 FILE * 0 0 825 0 0 0 0 0 0 0 0 0

825 4 FILE 1024 4 FILE 4 FILE 0 0 0 0 0 0 0 0 0 0 0 0

826 9 Patcher * 8576 9 Patcher * 9 Patcher * 0 0 751 0 0 0 0 0 0 0 0 0

827 8 Buffer * 8576 8 Buffer * 8 Buffer * 0 0 828 0 0 0 0 0 0 0 0 0

828 6 Buffer 2048 6 Buffer 6 Buffer 0 0 0 0 0 0 0 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

829 15 Patcher const * 8576 15 Patcher const * 15 Patcher const * 0 0 830 0 0 0 0 0 0 0 0 0

830 13 Patcher const 8832 13 Patcher const 13 Patcher const 0 0 751 0 0 0 0 0 0 0 0 0

831 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0

832 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
