1145553883
2 2
11 libpipeline 4 AkFD 5 panda 
20
19 11 bind_thread 4 39 19 Thread::bind_thread 0 1 1 1438
////////////////////////////////////////////////////////////////////
//     Function: Thread::bind_thread
//       Access: Published, Static
//  Description: Returns a new Panda Thread object associated with the
//               current thread (which has been created externally).
//               This can be used to bind a unique Panda Thread object
//               with an external thread, such as a new Python thread.
//
//               It is particularly useful to bind a Panda Thread
//               object to an external thread for the purposes of
//               PStats monitoring.  Without this call, each external
//               thread will be assigned the same global
//               ExternalThread object, which means they will all
//               appear in the same PStats graph.
//
//               It is the caller's responsibility to save the
//               returned Thread pointer for the lifetime of the
//               external thread.  It is an error for the Thread
//               pointer to destruct while the external thread is
//               still in the system.
//
//               It is also an error to call this method from the main
//               thread, or twice within a given thread, unless it is
//               given the same name each time (in which case the same
//               pointer will be returned each time).
////////////////////////////////////////////////////////////////////
120
static PointerTo< Thread > Thread::bind_thread(basic_string< char > const &name, basic_string< char > const &sync_name);

20 8 get_name 4 39 16 Thread::get_name 0 1 2 384
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_name
//       Access: Published
//  Description: Returns the name of the thread.  Each thread should
//               probably have a unique name, but this is not enforced
//               (and not strictly required).
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > const &Thread::get_name(void) const;

21 13 get_sync_name 4 39 21 Thread::get_sync_name 0 1 3 565
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_sync_name
//       Access: Published
//  Description: Returns the sync name of the thread.  This name
//               collects threads into "sync groups", which are
//               expected to run synchronously.  This is mainly used
//               for the benefit of PStats; threads with the same sync
//               name can be ticked all at once via the thread_tick()
//               call.
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > const &Thread::get_sync_name(void) const;

22 16 get_pstats_index 4 39 24 Thread::get_pstats_index 0 1 4 476
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_pstats_index
//       Access: Published
//  Description: Returns the PStats index associated with this thread,
//               or -1 if no index has yet been associated with this
//               thread.  This is used internally by the PStatClient;
//               you should not need to call this directly.
////////////////////////////////////////////////////////////////////
48
inline int Thread::get_pstats_index(void) const;

23 16 set_pstats_index 4 39 24 Thread::set_pstats_index 0 1 5 402
////////////////////////////////////////////////////////////////////
//     Function: Thread::set_pstats_index
//       Access: Published
//  Description: Stores a PStats index to be associated with this
//               thread.  This is used internally by the PStatClient;
//               you should not need to call this directly.
////////////////////////////////////////////////////////////////////
55
inline void Thread::set_pstats_index(int pstats_index);

24 18 get_pipeline_stage 4 39 26 Thread::get_pipeline_stage 0 1 6 409
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_pipeline_stage
//       Access: Published
//  Description: Returns the Pipeline stage number associated with
//               this thread.  The default stage is 0 if no stage is
//               specified otherwise.  See set_pipeline_stage().
////////////////////////////////////////////////////////////////////
50
inline int Thread::get_pipeline_stage(void) const;

25 18 set_pipeline_stage 4 39 26 Thread::set_pipeline_stage 0 1 7 831
////////////////////////////////////////////////////////////////////
//     Function: Thread::set_pipeline_stage
//       Access: Published
//  Description: Specifies the Pipeline stage number associated with
//               this thread.  The default stage is 0 if no stage is
//               specified otherwise.
//
//               This must be a value in the range [0
//               .. pipeline->get_num_stages() - 1].  It specifies the
//               values that this thread observes for all pipelined
//               data.  Typically, an application thread will leave
//               this at 0, but a render thread may set it to 1 or 2
//               (to operate on the previous frame's data, or the
//               second previous frame's data).
////////////////////////////////////////////////////////////////////
52
void Thread::set_pipeline_stage(int pipeline_stage);

26 22 set_min_pipeline_stage 4 39 30 Thread::set_min_pipeline_stage 0 1 8 392
////////////////////////////////////////////////////////////////////
//     Function: Thread::set_min_pipeline_stage
//       Access: Published
//  Description: Sets this thread's pipeline stage number to at least
//               the indicated value, unless it is already larger.
//               See set_pipeline_stage().
////////////////////////////////////////////////////////////////////
67
inline void Thread::set_min_pipeline_stage(int min_pipeline_stage);

27 15 get_main_thread 4 39 23 Thread::get_main_thread 0 1 9 345
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_main_thread
//       Access: Published, Static
//  Description: Returns a pointer to the "main" Thread object--this
//               is the Thread that started the whole process.
////////////////////////////////////////////////////////////////////
52
static inline Thread *Thread::get_main_thread(void);

28 19 get_external_thread 4 39 27 Thread::get_external_thread 0 1 10 531
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_external_thread
//       Access: Published, Static
//  Description: Returns a pointer to the "external" Thread
//               object--this is a special Thread object that
//               corresponds to any thread spawned outside of Panda's
//               threading interface.  Note that multiple different
//               threads may share this same pointer.
////////////////////////////////////////////////////////////////////
56
static inline Thread *Thread::get_external_thread(void);

29 18 get_current_thread 4 39 26 Thread::get_current_thread 0 1 11 738
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_current_thread
//       Access: Published, Static
//  Description: Returns a pointer to the currently-executing Thread
//               object.  If this is called from the main thread, this
//               will return the same value as get_main_thread().
//
//               This will always return some valid Thread pointer.
//               It will never return NULL, even if the current thread
//               was spawned outside of Panda's threading system,
//               although all non-Panda threads will return the exact
//               same Thread pointer.
////////////////////////////////////////////////////////////////////
55
static inline Thread *Thread::get_current_thread(void);

30 26 get_current_pipeline_stage 4 39 34 Thread::get_current_pipeline_stage 0 1 12 485
////////////////////////////////////////////////////////////////////
//     Function: Thread::get_current_pipeline_stage
//       Access: Published, Static
//  Description: Returns the integer pipeline stage associated with
//               the current thread.  This is the same thing as
//               get_current_thread()->get_pipeline_stage(), but it
//               may be faster to retrieve in some contexts.
////////////////////////////////////////////////////////////////////
59
static inline int Thread::get_current_pipeline_stage(void);

31 22 is_threading_supported 4 39 30 Thread::is_threading_supported 0 1 13 451
////////////////////////////////////////////////////////////////////
//     Function: Thread::is_threading_supported
//       Access: Published, Static
//  Description: Returns true if a real threading library is available
//               that supports threads, or false if no threading
//               library is available (and Thread::start() will always
//               fail).
////////////////////////////////////////////////////////////////////
56
static inline bool Thread::is_threading_supported(void);

32 5 sleep 4 39 13 Thread::sleep 0 1 14 360
////////////////////////////////////////////////////////////////////
//     Function: Thread::sleep
//       Access: Published, Static
//  Description: Suspends the current thread for at least the
//               indicated amount of time.  It might be suspended for
//               longer.
////////////////////////////////////////////////////////////////////
49
static inline void Thread::sleep(double seconds);

33 6 output 4 39 14 Thread::output 0 1 15 222
////////////////////////////////////////////////////////////////////
//     Function: Thread::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
48
virtual void Thread::output(ostream &out) const;

34 14 get_class_type 4 39 22 Thread::get_class_type 0 1 16 0
47
static TypeHandle Thread::get_class_type(void);

35 14 get_class_type 4 41 30 ExternalThread::get_class_type 0 1 17 0
55
static TypeHandle ExternalThread::get_class_type(void);

36 15 ~ExternalThread 4 41 31 ExternalThread::~ExternalThread 0 0 0
38
ExternalThread::~ExternalThread(void);

37 14 get_class_type 4 42 26 MainThread::get_class_type 0 1 18 0
51
static TypeHandle MainThread::get_class_type(void);

38 11 ~MainThread 4 42 23 MainThread::~MainThread 0 0 0
30
MainThread::~MainThread(void);

18
1 14 Dtool_AkFDRc6P 7 3 44 0 14 Dtool_AkFDRc6P 2 4 name 1 43  9 sync_name 1 43  
2 14 Dtool_AkFDvGiL 6 4 43 0 14 Dtool_AkFDvGiL 1 4 this 3 45  
3 14 Dtool_AkFDjq87 6 5 43 0 14 Dtool_AkFDjq87 1 4 this 3 45  
4 14 Dtool_AkFDH7ri 6 6 47 0 14 Dtool_AkFDH7ri 1 4 this 3 45  
5 14 Dtool_AkFD77wl 4 7 48 0 14 Dtool_AkFD77wl 2 4 this 3 44  12 pstats_index 1 47  
6 14 Dtool_AkFDmKhn 6 8 47 0 14 Dtool_AkFDmKhn 1 4 this 3 45  
7 14 Dtool_AkFDiVSW 4 9 48 0 14 Dtool_AkFDiVSW 2 4 this 3 44  14 pipeline_stage 1 47  
8 14 Dtool_AkFDOmlk 4 10 48 0 14 Dtool_AkFDOmlk 2 4 this 3 44  18 min_pipeline_stage 1 47  
9 14 Dtool_AkFDY2Dw 7 11 44 0 14 Dtool_AkFDY2Dw 0 
10 14 Dtool_AkFDD1UC 7 12 44 0 14 Dtool_AkFDD1UC 0 
11 14 Dtool_AkFD3TiV 7 13 44 0 14 Dtool_AkFD3TiV 0 
12 14 Dtool_AkFDqF2R 6 14 47 0 14 Dtool_AkFDqF2R 0 
13 14 Dtool_AkFD5vLQ 6 15 49 0 14 Dtool_AkFD5vLQ 0 
14 14 Dtool_AkFDEK72 4 16 48 0 14 Dtool_AkFDEK72 1 7 seconds 1 50  
15 14 Dtool_AkFDffd4 4 17 48 0 14 Dtool_AkFDffd4 2 4 this 3 45  3 out 1 51  
16 14 Dtool_AkFD_lqM 7 18 54 0 14 Dtool_AkFD_lqM 0 
17 14 Dtool_AkFDSmL_ 7 20 54 0 14 Dtool_AkFDSmL_ 0 
18 14 Dtool_AkFDLWAo 7 23 54 0 14 Dtool_AkFDLWAo 0 
16
39 6 Thread 75777 6 Thread 6 Thread 0 0 0 0 0 0 16 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 0 1 0 40 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

40 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

41 14 ExternalThread 141313 14 ExternalThread 14 ExternalThread 0 0 0 0 36 0 1 35 0 1 0 39 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : ExternalThread
// Description : The special "external thread" class.  There is one
//               instance of these in the world, and it is returned by
//               Thread::get_external_thread().
////////////////////////////////////////////////////////////////////

42 10 MainThread 141313 10 MainThread 10 MainThread 0 0 0 0 38 0 1 37 0 1 0 39 0 0 0 0 344
////////////////////////////////////////////////////////////////////
//       Class : MainThread
// Description : The special "main thread" class.  There is one
//               instance of these in the world, and it is returned by
//               Thread::get_main_thread().
////////////////////////////////////////////////////////////////////

43 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

44 8 Thread * 8576 8 Thread * 8 Thread * 0 0 39 0 0 0 0 0 0 0 0 0

45 14 Thread const * 8576 14 Thread const * 14 Thread const * 0 0 46 0 0 0 0 0 0 0 0 0

46 12 Thread const 8832 12 Thread const 12 Thread const 0 0 39 0 0 0 0 0 0 0 0 0

47 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

48 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

49 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

50 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

51 9 ostream * 8576 9 ostream * 9 ostream * 0 0 52 0 0 0 0 0 0 0 0 0

52 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

53 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

54 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 53 0 0 0 0 0 0 0 0 0

0
0
