1145554867
2 2
8 libtform 4 yiw5 5 panda 
222
234 13 ButtonThrower 4 456 28 ButtonThrower::ButtonThrower 0 1 1 222
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
ButtonThrower::ButtonThrower(basic_string< char > const &name);

235 21 set_button_down_event 4 456 36 ButtonThrower::set_button_down_event 0 1 2 1544
// Filename: buttonThrower.I
// Created by:  drose (26Dec03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
96
inline void ButtonThrower::set_button_down_event(basic_string< char > const &button_down_event);

236 21 get_button_down_event 4 456 36 ButtonThrower::get_button_down_event 0 1 3 353
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
////////////////////////////////////////////////////////////////////
84
inline basic_string< char > const &ButtonThrower::get_button_down_event(void) const;

237 19 set_button_up_event 4 456 34 ButtonThrower::set_button_up_event 0 1 4 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_button_up_event(basic_string< char > const &button_up_event);

238 19 get_button_up_event 4 456 34 ButtonThrower::get_button_up_event 0 1 5 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_button_up_event(void) const;

239 19 set_keystroke_event 4 456 34 ButtonThrower::set_keystroke_event 0 1 6 984
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_keystroke_event(basic_string< char > const &keystroke_event);

240 19 get_keystroke_event 4 456 34 ButtonThrower::get_keystroke_event 0 1 7 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_keystroke_event(void) const;

241 19 set_candidate_event 4 456 34 ButtonThrower::set_candidate_event 0 1 8 1252
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_candidate_event(basic_string< char > const &candidate_event);

242 19 get_candidate_event 4 456 34 ButtonThrower::get_candidate_event 0 1 9 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_candidate_event(void) const;

243 14 set_move_event 4 456 29 ButtonThrower::set_move_event 0 1 10 340
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
////////////////////////////////////////////////////////////////////
82
inline void ButtonThrower::set_move_event(basic_string< char > const &move_event);

244 14 get_move_event 4 456 29 ButtonThrower::get_move_event 0 1 11 332
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &ButtonThrower::get_move_event(void) const;

245 10 set_prefix 4 456 25 ButtonThrower::set_prefix 0 1 12 505
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
////////////////////////////////////////////////////////////////////
74
inline void ButtonThrower::set_prefix(basic_string< char > const &prefix);

246 10 get_prefix 4 456 25 ButtonThrower::get_prefix 0 1 13 320
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ButtonThrower::get_prefix(void) const;

247 17 set_specific_flag 4 456 32 ButtonThrower::set_specific_flag 0 1 14 604
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
////////////////////////////////////////////////////////////////////
65
inline void ButtonThrower::set_specific_flag(bool specific_flag);

248 17 get_specific_flag 4 456 32 ButtonThrower::get_specific_flag 0 1 15 351
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
////////////////////////////////////////////////////////////////////
57
inline bool ButtonThrower::get_specific_flag(void) const;

249 13 set_time_flag 4 456 28 ButtonThrower::set_time_flag 0 1 16 720
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
////////////////////////////////////////////////////////////////////
57
inline void ButtonThrower::set_time_flag(bool time_flag);

250 13 get_time_flag 4 456 28 ButtonThrower::get_time_flag 0 1 17 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
////////////////////////////////////////////////////////////////////
53
inline bool ButtonThrower::get_time_flag(void) const;

251 13 add_parameter 4 456 28 ButtonThrower::add_parameter 0 1 18 382
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
61
void ButtonThrower::add_parameter(EventParameter const &obj);

252 18 get_num_parameters 4 456 33 ButtonThrower::get_num_parameters 0 1 19 405
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
50
int ButtonThrower::get_num_parameters(void) const;

253 13 get_parameter 4 456 28 ButtonThrower::get_parameter 0 1 20 386
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
////////////////////////////////////////////////////////////////////
57
EventParameter ButtonThrower::get_parameter(int n) const;

254 20 get_modifier_buttons 4 456 35 ButtonThrower::get_modifier_buttons 0 1 21 808
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
////////////////////////////////////////////////////////////////////
78
inline ModifierButtons const &ButtonThrower::get_modifier_buttons(void) const;

255 20 set_modifier_buttons 4 456 35 ButtonThrower::set_modifier_buttons 0 1 22 1054
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
////////////////////////////////////////////////////////////////////
77
inline void ButtonThrower::set_modifier_buttons(ModifierButtons const &mods);

256 24 set_throw_buttons_active 4 456 39 ButtonThrower::set_throw_buttons_active 0 1 23 597
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
////////////////////////////////////////////////////////////////////
63
inline void ButtonThrower::set_throw_buttons_active(bool flag);

257 24 get_throw_buttons_active 4 456 39 ButtonThrower::get_throw_buttons_active 0 1 24 446
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
////////////////////////////////////////////////////////////////////
64
inline bool ButtonThrower::get_throw_buttons_active(void) const;

258 16 add_throw_button 4 456 31 ButtonThrower::add_throw_button 0 1 25 1056
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
////////////////////////////////////////////////////////////////////
94
bool ButtonThrower::add_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

259 19 remove_throw_button 4 456 34 ButtonThrower::remove_throw_button 0 1 26 513
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
////////////////////////////////////////////////////////////////////
97
bool ButtonThrower::remove_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

260 16 has_throw_button 4 456 31 ButtonThrower::has_throw_button 0 2 27 28 1059
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
////////////////////////////////////////////////////////////////////
100
bool ButtonThrower::has_throw_button(ModifierButtons const &mods, ButtonHandle const &button) const;

261 19 clear_throw_buttons 4 456 34 ButtonThrower::clear_throw_buttons 0 1 29 342
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
////////////////////////////////////////////////////////////////////
46
void ButtonThrower::clear_throw_buttons(void);

262 14 get_class_type 4 456 29 ButtonThrower::get_class_type 0 1 30 0
54
static TypeHandle ButtonThrower::get_class_type(void);

263 14 require_button 4 458 34 MouseInterfaceNode::require_button 0 1 31 589
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
////////////////////////////////////////////////////////////////////
82
void MouseInterfaceNode::require_button(ButtonHandle const &button, bool is_down);

264 12 clear_button 4 458 32 MouseInterfaceNode::clear_button 0 1 32 340
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
////////////////////////////////////////////////////////////////////
66
void MouseInterfaceNode::clear_button(ButtonHandle const &button);

265 17 clear_all_buttons 4 458 37 MouseInterfaceNode::clear_all_buttons 0 1 33 332
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
////////////////////////////////////////////////////////////////////
49
void MouseInterfaceNode::clear_all_buttons(void);

266 14 get_class_type 4 458 34 MouseInterfaceNode::get_class_type 0 1 34 0
59
static TypeHandle MouseInterfaceNode::get_class_type(void);

267 14 DriveInterface 4 459 30 DriveInterface::DriveInterface 0 2 35 36 226
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
DriveInterface::DriveInterface(basic_string< char > const &name = (""));

268 17 set_forward_speed 4 459 33 DriveInterface::set_forward_speed 0 1 37 1074
// Filename: driveInterface.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_forward_speed(float speed);

269 17 get_forward_speed 4 459 33 DriveInterface::get_forward_speed 0 1 38 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_forward_speed(void) const;

270 17 set_reverse_speed 4 459 33 DriveInterface::set_reverse_speed 0 1 39 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_reverse_speed(float speed);

271 17 get_reverse_speed 4 459 33 DriveInterface::get_reverse_speed 0 1 40 402
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_reverse_speed(void) const;

272 16 set_rotate_speed 4 459 32 DriveInterface::set_rotate_speed 0 1 41 413
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline void DriveInterface::set_rotate_speed(float speed);

273 16 get_rotate_speed 4 459 32 DriveInterface::get_rotate_speed 0 1 42 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline float DriveInterface::get_rotate_speed(void) const;

274 22 set_vertical_dead_zone 4 459 38 DriveInterface::set_vertical_dead_zone 0 1 43 603
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
63
inline void DriveInterface::set_vertical_dead_zone(float zone);

275 22 get_vertical_dead_zone 4 459 38 DriveInterface::get_vertical_dead_zone 0 1 44 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
64
inline float DriveInterface::get_vertical_dead_zone(void) const;

276 24 set_horizontal_dead_zone 4 459 40 DriveInterface::set_horizontal_dead_zone 0 1 45 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_horizontal_dead_zone(float zone);

277 24 get_horizontal_dead_zone 4 459 40 DriveInterface::get_horizontal_dead_zone 0 1 46 609
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
66
inline float DriveInterface::get_horizontal_dead_zone(void) const;

278 25 set_vertical_ramp_up_time 4 459 41 DriveInterface::set_vertical_ramp_up_time 0 1 47 431
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
////////////////////////////////////////////////////////////////////
74
inline void DriveInterface::set_vertical_ramp_up_time(float ramp_up_time);

279 25 get_vertical_ramp_up_time 4 459 41 DriveInterface::get_vertical_ramp_up_time 0 1 48 451
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
////////////////////////////////////////////////////////////////////
67
inline float DriveInterface::get_vertical_ramp_up_time(void) const;

280 27 set_vertical_ramp_down_time 4 459 43 DriveInterface::set_vertical_ramp_down_time 0 1 49 412
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
78
inline void DriveInterface::set_vertical_ramp_down_time(float ramp_down_time);

281 27 get_vertical_ramp_down_time 4 459 43 DriveInterface::get_vertical_ramp_down_time 0 1 50 415
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_vertical_ramp_down_time(void) const;

282 27 set_horizontal_ramp_up_time 4 459 43 DriveInterface::set_horizontal_ramp_up_time 0 1 51 417
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
////////////////////////////////////////////////////////////////////
76
inline void DriveInterface::set_horizontal_ramp_up_time(float ramp_up_time);

283 27 get_horizontal_ramp_up_time 4 459 43 DriveInterface::get_horizontal_ramp_up_time 0 1 52 420
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_horizontal_ramp_up_time(void) const;

284 29 set_horizontal_ramp_down_time 4 459 45 DriveInterface::set_horizontal_ramp_down_time 0 1 53 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
80
inline void DriveInterface::set_horizontal_ramp_down_time(float ramp_down_time);

285 29 get_horizontal_ramp_down_time 4 459 45 DriveInterface::get_horizontal_ramp_down_time 0 1 54 419
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
71
inline float DriveInterface::get_horizontal_ramp_down_time(void) const;

286 9 get_speed 4 459 25 DriveInterface::get_speed 0 1 55 278
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
51
inline float DriveInterface::get_speed(void) const;

287 13 get_rot_speed 4 459 29 DriveInterface::get_rot_speed 0 1 56 286
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
55
inline float DriveInterface::get_rot_speed(void) const;

288 5 reset 4 459 21 DriveInterface::reset 0 1 57 332
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
////////////////////////////////////////////////////////////////////
33
void DriveInterface::reset(void);

289 7 get_pos 4 459 23 DriveInterface::get_pos 0 1 58 280
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &DriveInterface::get_pos(void) const;

290 5 get_x 4 459 21 DriveInterface::get_x 0 1 59 0
47
inline float DriveInterface::get_x(void) const;

291 5 get_y 4 459 21 DriveInterface::get_y 0 1 60 0
47
inline float DriveInterface::get_y(void) const;

292 5 get_z 4 459 21 DriveInterface::get_z 0 1 61 0
47
inline float DriveInterface::get_z(void) const;

293 7 set_pos 4 459 23 DriveInterface::set_pos 0 2 62 63 259
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_pos(LVecBase3f const &vec);

294 5 set_x 4 459 21 DriveInterface::set_x 0 1 64 0
43
inline void DriveInterface::set_x(float x);

295 5 set_y 4 459 21 DriveInterface::set_y 0 1 65 0
43
inline void DriveInterface::set_y(float y);

296 5 set_z 4 459 21 DriveInterface::set_z 0 1 66 0
43
inline void DriveInterface::set_z(float z);

297 7 get_hpr 4 459 23 DriveInterface::get_hpr 0 1 67 280
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &DriveInterface::get_hpr(void) const;

298 5 get_h 4 459 21 DriveInterface::get_h 0 1 68 0
47
inline float DriveInterface::get_h(void) const;

299 5 get_p 4 459 21 DriveInterface::get_p 0 1 69 0
47
inline float DriveInterface::get_p(void) const;

300 5 get_r 4 459 21 DriveInterface::get_r 0 1 70 0
47
inline float DriveInterface::get_r(void) const;

301 7 set_hpr 4 459 23 DriveInterface::set_hpr 0 2 71 72 262
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_hpr(LVecBase3f const &hpr);

302 5 set_h 4 459 21 DriveInterface::set_h 0 1 73 0
43
inline void DriveInterface::set_h(float h);

303 5 set_p 4 459 21 DriveInterface::set_p 0 1 74 0
43
inline void DriveInterface::set_p(float p);

304 5 set_r 4 459 21 DriveInterface::set_r 0 1 75 0
43
inline void DriveInterface::set_r(float r);

305 14 set_force_roll 4 459 30 DriveInterface::set_force_roll 0 1 76 322
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
////////////////////////////////////////////////////////////////////
54
void DriveInterface::set_force_roll(float force_roll);

306 16 set_ignore_mouse 4 459 32 DriveInterface::set_ignore_mouse 0 1 77 736
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_ignore_mouse(bool ignore_mouse);

307 16 get_ignore_mouse 4 459 32 DriveInterface::get_ignore_mouse 0 1 78 326
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
////////////////////////////////////////////////////////////////////
57
inline bool DriveInterface::get_ignore_mouse(void) const;

308 15 set_force_mouse 4 459 31 DriveInterface::set_force_mouse 0 1 79 406
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
////////////////////////////////////////////////////////////////////
62
inline void DriveInterface::set_force_mouse(bool force_mouse);

309 15 get_force_mouse 4 459 31 DriveInterface::get_force_mouse 0 1 80 323
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
////////////////////////////////////////////////////////////////////
56
inline bool DriveInterface::get_force_mouse(void) const;

310 19 set_stop_this_frame 4 459 35 DriveInterface::set_stop_this_frame 0 1 81 649
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
////////////////////////////////////////////////////////////////////
70
inline void DriveInterface::set_stop_this_frame(bool stop_this_frame);

311 19 get_stop_this_frame 4 459 35 DriveInterface::get_stop_this_frame 0 1 82 336
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
////////////////////////////////////////////////////////////////////
60
inline bool DriveInterface::get_stop_this_frame(void) const;

312 7 set_mat 4 459 23 DriveInterface::set_mat 0 1 83 276
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
////////////////////////////////////////////////////////////////////
51
void DriveInterface::set_mat(LMatrix4f const &mat);

313 7 get_mat 4 459 23 DriveInterface::get_mat 0 1 84 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
////////////////////////////////////////////////////////////////////
47
LMatrix4f const &DriveInterface::get_mat(void);

314 12 force_dgraph 4 459 28 DriveInterface::force_dgraph 0 1 85 558
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
////////////////////////////////////////////////////////////////////
40
void DriveInterface::force_dgraph(void);

315 14 get_class_type 4 459 30 DriveInterface::get_class_type 0 1 86 0
55
static TypeHandle DriveInterface::get_class_type(void);

316 14 MouseSubregion 4 460 30 MouseSubregion::MouseSubregion 0 1 87 223
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
MouseSubregion::MouseSubregion(basic_string< char > const &name);

317 8 get_left 4 460 24 MouseSubregion::get_left 0 1 88 1057
// Filename: mouseSubregion.I
// Created by:  drose (13May05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float MouseSubregion::get_left(void) const;

318 9 get_right 4 460 25 MouseSubregion::get_right 0 1 89 381
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float MouseSubregion::get_right(void) const;

319 10 get_bottom 4 460 26 MouseSubregion::get_bottom 0 1 90 384
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
////////////////////////////////////////////////////////////////////
52
inline float MouseSubregion::get_bottom(void) const;

320 7 get_top 4 460 23 MouseSubregion::get_top 0 1 91 377
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float MouseSubregion::get_top(void) const;

321 14 set_dimensions 4 460 30 MouseSubregion::set_dimensions 0 1 92 583
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
////////////////////////////////////////////////////////////////////
79
inline void MouseSubregion::set_dimensions(float l, float r, float b, float t);

322 14 get_class_type 4 460 30 MouseSubregion::get_class_type 0 1 93 0
55
static TypeHandle MouseSubregion::get_class_type(void);

323 37 upcast_to_TypedWritableReferenceCount 12 461 57 MouseWatcherRegion::upcast_to_TypedWritableReferenceCount 0 1 112 61
upcast from MouseWatcherRegion to TypedWritableReferenceCount
93
TypedWritableReferenceCount *MouseWatcherRegion::upcast_to_TypedWritableReferenceCount(void);

324 30 downcast_to_MouseWatcherRegion 12 462 59 TypedWritableReferenceCount::downcast_to_MouseWatcherRegion 0 1 113 63
downcast from TypedWritableReferenceCount to MouseWatcherRegion
86
MouseWatcherRegion *TypedWritableReferenceCount::downcast_to_MouseWatcherRegion(void);

325 17 upcast_to_Namable 12 461 37 MouseWatcherRegion::upcast_to_Namable 0 1 114 41
upcast from MouseWatcherRegion to Namable
53
Namable *MouseWatcherRegion::upcast_to_Namable(void);

326 30 downcast_to_MouseWatcherRegion 12 463 39 Namable::downcast_to_MouseWatcherRegion 0 1 115 43
downcast from Namable to MouseWatcherRegion
66
MouseWatcherRegion *Namable::downcast_to_MouseWatcherRegion(void);

327 18 MouseWatcherRegion 4 461 38 MouseWatcherRegion::MouseWatcherRegion 0 2 94 95 1144
// Filename: mouseWatcherRegion.I
// Created by:  drose (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, float left, float right, float bottom, float top);

328 9 set_frame 4 461 29 MouseWatcherRegion::set_frame 0 2 96 97 458
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline void MouseWatcherRegion::set_frame(float left, float right, float bottom, float top);

329 9 get_frame 4 461 29 MouseWatcherRegion::get_frame 0 1 98 228
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &MouseWatcherRegion::get_frame(void) const;

330 8 get_area 4 461 28 MouseWatcherRegion::get_area 0 1 99 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
////////////////////////////////////////////////////////////////////
54
inline float MouseWatcherRegion::get_area(void) const;

331 8 set_sort 4 461 28 MouseWatcherRegion::set_sort 0 1 100 672
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
////////////////////////////////////////////////////////////////////
51
inline void MouseWatcherRegion::set_sort(int sort);

332 8 get_sort 4 461 28 MouseWatcherRegion::get_sort 0 1 101 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
////////////////////////////////////////////////////////////////////
52
inline int MouseWatcherRegion::get_sort(void) const;

333 10 set_active 4 461 30 MouseWatcherRegion::set_active 0 1 102 515
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcherRegion::set_active(bool active);

334 10 get_active 4 461 30 MouseWatcherRegion::get_active 0 1 103 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
////////////////////////////////////////////////////////////////////
55
inline bool MouseWatcherRegion::get_active(void) const;

335 12 set_keyboard 4 461 32 MouseWatcherRegion::set_keyboard 0 1 104 598
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
////////////////////////////////////////////////////////////////////
60
inline void MouseWatcherRegion::set_keyboard(bool keyboard);

336 12 get_keyboard 4 461 32 MouseWatcherRegion::get_keyboard 0 1 105 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherRegion::get_keyboard(void) const;

337 18 set_suppress_flags 4 461 38 MouseWatcherRegion::set_suppress_flags 0 1 106 725
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcherRegion::set_suppress_flags(int suppress_flags);

338 18 get_suppress_flags 4 461 38 MouseWatcherRegion::get_suppress_flags 0 1 107 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
////////////////////////////////////////////////////////////////////
62
inline int MouseWatcherRegion::get_suppress_flags(void) const;

339 6 output 4 461 26 MouseWatcherRegion::output 0 1 108 225
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void MouseWatcherRegion::output(ostream &out) const;

340 5 write 4 461 25 MouseWatcherRegion::write 0 2 109 110 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
void MouseWatcherRegion::write(ostream &out, int indent_level = (0)) const;

341 14 get_class_type 4 461 34 MouseWatcherRegion::get_class_type 0 1 111 0
59
static TypeHandle MouseWatcherRegion::get_class_type(void);

342 19 ~MouseWatcherRegion 4 461 39 MouseWatcherRegion::~MouseWatcherRegion 0 0 0
46
MouseWatcherRegion::~MouseWatcherRegion(void);

343 24 upcast_to_ReferenceCount 12 465 43 MouseWatcherGroup::upcast_to_ReferenceCount 0 1 130 47
upcast from MouseWatcherGroup to ReferenceCount
66
ReferenceCount *MouseWatcherGroup::upcast_to_ReferenceCount(void);

344 18 ~MouseWatcherGroup 4 465 37 MouseWatcherGroup::~MouseWatcherGroup 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual MouseWatcherGroup::~MouseWatcherGroup(void);

345 10 add_region 4 465 29 MouseWatcherGroup::add_region 0 1 116 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
////////////////////////////////////////////////////////////////////
63
void MouseWatcherGroup::add_region(MouseWatcherRegion *region);

346 10 has_region 4 465 29 MouseWatcherGroup::has_region 0 1 117 348
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherGroup, false otherwise.
////////////////////////////////////////////////////////////////////
69
bool MouseWatcherGroup::has_region(MouseWatcherRegion *region) const;

347 13 remove_region 4 465 32 MouseWatcherGroup::remove_region 0 1 118 403
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
66
bool MouseWatcherGroup::remove_region(MouseWatcherRegion *region);

348 11 find_region 4 465 30 MouseWatcherGroup::find_region 0 1 119 417
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
////////////////////////////////////////////////////////////////////
91
MouseWatcherRegion *MouseWatcherGroup::find_region(basic_string< char > const &name) const;

349 13 clear_regions 4 465 32 MouseWatcherGroup::clear_regions 0 1 120 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
////////////////////////////////////////////////////////////////////
44
void MouseWatcherGroup::clear_regions(void);

350 15 get_num_regions 4 465 34 MouseWatcherGroup::get_num_regions 0 1 121 277
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
////////////////////////////////////////////////////////////////////
51
int MouseWatcherGroup::get_num_regions(void) const;

351 10 get_region 4 465 29 MouseWatcherGroup::get_region 0 1 122 472
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
////////////////////////////////////////////////////////////////////
63
MouseWatcherRegion *MouseWatcherGroup::get_region(int n) const;

352 6 output 4 465 25 MouseWatcherGroup::output 0 1 123 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
void MouseWatcherGroup::output(ostream &out) const;

353 5 write 4 465 24 MouseWatcherGroup::write 0 2 124 125 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void MouseWatcherGroup::write(ostream &out, int indent_level = (0)) const;

354 12 show_regions 4 465 31 MouseWatcherGroup::show_regions 0 1 126 445
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherGroup.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
////////////////////////////////////////////////////////////////////
63
void MouseWatcherGroup::show_regions(NodePath const &render2d);

355 9 set_color 4 465 28 MouseWatcherGroup::set_color 0 1 127 362
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
////////////////////////////////////////////////////////////////////
59
void MouseWatcherGroup::set_color(LVecBase4f const &color);

356 12 hide_regions 4 465 31 MouseWatcherGroup::hide_regions 0 1 128 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
////////////////////////////////////////////////////////////////////
43
void MouseWatcherGroup::hide_regions(void);

357 14 get_class_type 4 465 33 MouseWatcherGroup::get_class_type 0 1 129 0
58
static TypeHandle MouseWatcherGroup::get_class_type(void);

358 18 upcast_to_DataNode 12 467 32 MouseWatcher::upcast_to_DataNode 0 1 175 36
upcast from MouseWatcher to DataNode
49
DataNode *MouseWatcher::upcast_to_DataNode(void);

359 24 downcast_to_MouseWatcher 12 457 34 DataNode::downcast_to_MouseWatcher 0 1 176 38
downcast from DataNode to MouseWatcher
55
MouseWatcher *DataNode::downcast_to_MouseWatcher(void);

360 27 upcast_to_MouseWatcherGroup 12 467 41 MouseWatcher::upcast_to_MouseWatcherGroup 0 1 177 45
upcast from MouseWatcher to MouseWatcherGroup
67
MouseWatcherGroup *MouseWatcher::upcast_to_MouseWatcherGroup(void);

361 24 downcast_to_MouseWatcher 12 465 43 MouseWatcherGroup::downcast_to_MouseWatcher 0 1 178 47
downcast from MouseWatcherGroup to MouseWatcher
64
MouseWatcher *MouseWatcherGroup::downcast_to_MouseWatcher(void);

362 12 MouseWatcher 4 467 26 MouseWatcher::MouseWatcher 0 2 131 132 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
MouseWatcher::MouseWatcher(basic_string< char > const &name = (""));

363 13 ~MouseWatcher 4 467 27 MouseWatcher::~MouseWatcher 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual MouseWatcher::~MouseWatcher(void);

364 13 remove_region 4 467 27 MouseWatcher::remove_region 0 1 133 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
61
bool MouseWatcher::remove_region(MouseWatcherRegion *region);

365 9 has_mouse 4 467 23 MouseWatcher::has_mouse 0 1 134 1016
// Filename: mouseWatcher.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
////////////////////////////////////////////////////////////////////
48
inline bool MouseWatcher::has_mouse(void) const;

366 13 is_mouse_open 4 467 27 MouseWatcher::is_mouse_open 0 1 135 473
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
////////////////////////////////////////////////////////////////////
52
inline bool MouseWatcher::is_mouse_open(void) const;

367 9 get_mouse 4 467 23 MouseWatcher::get_mouse 0 1 136 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
59
inline LPoint2f const &MouseWatcher::get_mouse(void) const;

368 11 get_mouse_x 4 467 25 MouseWatcher::get_mouse_x 0 1 137 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_x(void) const;

369 11 get_mouse_y 4 467 25 MouseWatcher::get_mouse_y 0 1 138 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_y(void) const;

370 14 is_over_region 4 467 28 MouseWatcher::is_over_region 0 3 139 140 141 961
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool MouseWatcher::is_over_region(void) const;

371 15 get_over_region 4 467 29 MouseWatcher::get_over_region 0 3 142 143 144 1187
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
////////////////////////////////////////////////////////////////////
69
inline MouseWatcherRegion *MouseWatcher::get_over_region(void) const;

372 23 set_button_down_pattern 4 467 37 MouseWatcher::set_button_down_pattern 0 1 145 762
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
87
inline void MouseWatcher::set_button_down_pattern(basic_string< char > const &pattern);

373 23 get_button_down_pattern 4 467 37 MouseWatcher::get_button_down_pattern 0 1 146 394
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &MouseWatcher::get_button_down_pattern(void) const;

374 21 set_button_up_pattern 4 467 35 MouseWatcher::set_button_up_pattern 0 1 147 400
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline void MouseWatcher::set_button_up_pattern(basic_string< char > const &pattern);

375 21 get_button_up_pattern 4 467 35 MouseWatcher::get_button_up_pattern 0 1 148 391
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &MouseWatcher::get_button_up_pattern(void) const;

376 17 set_enter_pattern 4 467 31 MouseWatcher::set_enter_pattern 0 1 149 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_enter_pattern(basic_string< char > const &pattern);

377 17 get_enter_pattern 4 467 31 MouseWatcher::get_enter_pattern 0 1 150 559
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_enter_pattern(void) const;

378 17 set_leave_pattern 4 467 31 MouseWatcher::set_leave_pattern 0 1 151 585
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_leave_pattern(basic_string< char > const &pattern);

379 17 get_leave_pattern 4 467 31 MouseWatcher::get_leave_pattern 0 1 152 560
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_leave_pattern(void) const;

380 18 set_within_pattern 4 467 32 MouseWatcher::set_within_pattern 0 1 153 591
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
82
inline void MouseWatcher::set_within_pattern(basic_string< char > const &pattern);

381 18 get_within_pattern 4 467 32 MouseWatcher::get_within_pattern 0 1 154 565
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &MouseWatcher::get_within_pattern(void) const;

382 19 set_without_pattern 4 467 33 MouseWatcher::set_without_pattern 0 1 155 594
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
83
inline void MouseWatcher::set_without_pattern(basic_string< char > const &pattern);

383 19 get_without_pattern 4 467 33 MouseWatcher::get_without_pattern 0 1 156 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > const &MouseWatcher::get_without_pattern(void) const;

384 12 set_geometry 4 467 26 MouseWatcher::set_geometry 0 1 157 553
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcher::set_geometry(PandaNode *node);

385 12 has_geometry 4 467 26 MouseWatcher::has_geometry 0 1 158 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
////////////////////////////////////////////////////////////////////
51
inline bool MouseWatcher::has_geometry(void) const;

386 12 get_geometry 4 467 26 MouseWatcher::get_geometry 0 1 159 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
////////////////////////////////////////////////////////////////////
57
inline PandaNode *MouseWatcher::get_geometry(void) const;

387 14 clear_geometry 4 467 28 MouseWatcher::clear_geometry 0 1 160 308
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
////////////////////////////////////////////////////////////////////
47
inline void MouseWatcher::clear_geometry(void);

388 17 set_extra_handler 4 467 31 MouseWatcher::set_extra_handler 0 1 161 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
62
inline void MouseWatcher::set_extra_handler(EventHandler *eh);

389 17 get_extra_handler 4 467 31 MouseWatcher::get_extra_handler 0 1 162 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
65
inline EventHandler *MouseWatcher::get_extra_handler(void) const;

390 20 set_modifier_buttons 4 467 34 MouseWatcher::set_modifier_buttons 0 1 163 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_modifier_buttons(ModifierButtons const &mods);

391 20 get_modifier_buttons 4 467 34 MouseWatcher::get_modifier_buttons 0 1 164 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
////////////////////////////////////////////////////////////////////
70
inline ModifierButtons MouseWatcher::get_modifier_buttons(void) const;

392 18 set_display_region 4 467 32 MouseWatcher::set_display_region 0 1 165 743
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
////////////////////////////////////////////////////////////////////
64
inline void MouseWatcher::set_display_region(DisplayRegion *dr);

393 20 clear_display_region 4 467 34 MouseWatcher::clear_display_region 0 1 166 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
////////////////////////////////////////////////////////////////////
53
inline void MouseWatcher::clear_display_region(void);

394 18 get_display_region 4 467 32 MouseWatcher::get_display_region 0 1 167 386
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
////////////////////////////////////////////////////////////////////
67
inline DisplayRegion *MouseWatcher::get_display_region(void) const;

395 18 has_display_region 4 467 32 MouseWatcher::has_display_region 0 1 168 525
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcher::has_display_region(void) const;

396 9 add_group 4 467 23 MouseWatcher::add_group 0 1 169 841
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherGroup, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
////////////////////////////////////////////////////////////////////
55
bool MouseWatcher::add_group(MouseWatcherGroup *group);

397 12 remove_group 4 467 26 MouseWatcher::remove_group 0 1 170 474
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
////////////////////////////////////////////////////////////////////
58
bool MouseWatcher::remove_group(MouseWatcherGroup *group);

398 13 replace_group 4 467 27 MouseWatcher::replace_group 0 1 171 664
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group fom the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
////////////////////////////////////////////////////////////////////
93
bool MouseWatcher::replace_group(MouseWatcherGroup *old_group, MouseWatcherGroup *new_group);

399 14 get_num_groups 4 467 28 MouseWatcher::get_num_groups 0 1 172 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
////////////////////////////////////////////////////////////////////
45
int MouseWatcher::get_num_groups(void) const;

400 9 get_group 4 467 23 MouseWatcher::get_group 0 1 173 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
////////////////////////////////////////////////////////////////////
56
MouseWatcherGroup *MouseWatcher::get_group(int n) const;

401 14 get_class_type 4 467 28 MouseWatcher::get_class_type 0 1 174 0
53
static TypeHandle MouseWatcher::get_class_type(void);

402 22 ~MouseWatcherParameter 4 468 45 MouseWatcherParameter::~MouseWatcherParameter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline MouseWatcherParameter::~MouseWatcherParameter(void);

403 10 has_button 4 468 33 MouseWatcherParameter::has_button 0 1 179 341
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::has_button(void) const;

404 10 get_button 4 468 33 MouseWatcherParameter::get_button 0 1 180 406
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
66
inline ButtonHandle MouseWatcherParameter::get_button(void) const;

405 11 has_keycode 4 468 34 MouseWatcherParameter::has_keycode 0 1 181 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool MouseWatcherParameter::has_keycode(void) const;

406 11 get_keycode 4 468 34 MouseWatcherParameter::get_keycode 0 1 182 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
////////////////////////////////////////////////////////////////////
58
inline int MouseWatcherParameter::get_keycode(void) const;

407 13 has_candidate 4 468 36 MouseWatcherParameter::has_candidate 0 1 183 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcherParameter::has_candidate(void) const;

408 28 get_candidate_string_encoded 4 468 51 MouseWatcherParameter::get_candidate_string_encoded 0 2 184 185 832
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////
92
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(void) const;

409 19 get_highlight_start 4 468 42 MouseWatcherParameter::get_highlight_start 0 1 186 323
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
////////////////////////////////////////////////////////////////////
75
inline unsigned int MouseWatcherParameter::get_highlight_start(void) const;

410 17 get_highlight_end 4 468 40 MouseWatcherParameter::get_highlight_end 0 1 187 334
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
////////////////////////////////////////////////////////////////////
73
inline unsigned int MouseWatcherParameter::get_highlight_end(void) const;

411 14 get_cursor_pos 4 468 37 MouseWatcherParameter::get_cursor_pos 0 1 188 329
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
////////////////////////////////////////////////////////////////////
70
inline unsigned int MouseWatcherParameter::get_cursor_pos(void) const;

412 20 get_modifier_buttons 4 468 43 MouseWatcherParameter::get_modifier_buttons 0 1 189 352
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
////////////////////////////////////////////////////////////////////
86
inline ModifierButtons const &MouseWatcherParameter::get_modifier_buttons(void) const;

413 9 has_mouse 4 468 32 MouseWatcherParameter::has_mouse 0 1 190 330
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherParameter::has_mouse(void) const;

414 9 get_mouse 4 468 32 MouseWatcherParameter::get_mouse 0 1 191 425
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
////////////////////////////////////////////////////////////////////
68
inline LPoint2f const &MouseWatcherParameter::get_mouse(void) const;

415 10 is_outside 4 468 33 MouseWatcherParameter::is_outside 0 1 192 415
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::is_outside(void) const;

416 6 output 4 468 29 MouseWatcherParameter::output 0 1 193 229
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void MouseWatcherParameter::output(ostream &out) const;

417 9 Trackball 4 469 20 Trackball::Trackball 0 1 194 218
////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
Trackball::Trackball(basic_string< char > const &name);

418 5 reset 4 469 16 Trackball::reset 0 1 195 257
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
////////////////////////////////////////////////////////////////////
28
void Trackball::reset(void);

419 17 get_forward_scale 4 469 28 Trackball::get_forward_scale 0 1 196 335
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
////////////////////////////////////////////////////////////////////
47
float Trackball::get_forward_scale(void) const;

420 17 set_forward_scale 4 469 28 Trackball::set_forward_scale 0 1 197 435
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
////////////////////////////////////////////////////////////////////
50
void Trackball::set_forward_scale(float fwdscale);

421 7 get_pos 4 469 18 Trackball::get_pos 0 1 198 291
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
////////////////////////////////////////////////////////////////////
47
LPoint3f const &Trackball::get_pos(void) const;

422 5 get_x 4 469 16 Trackball::get_x 0 1 199 0
35
float Trackball::get_x(void) const;

423 5 get_y 4 469 16 Trackball::get_y 0 1 200 0
35
float Trackball::get_y(void) const;

424 5 get_z 4 469 16 Trackball::get_z 0 1 201 0
35
float Trackball::get_z(void) const;

425 7 set_pos 4 469 18 Trackball::set_pos 0 2 202 203 269
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
////////////////////////////////////////////////////////////////////
47
void Trackball::set_pos(LVecBase3f const &vec);

426 5 set_x 4 469 16 Trackball::set_x 0 1 204 0
31
void Trackball::set_x(float x);

427 5 set_y 4 469 16 Trackball::set_y 0 1 205 0
31
void Trackball::set_y(float y);

428 5 set_z 4 469 16 Trackball::set_z 0 1 206 0
31
void Trackball::set_z(float z);

429 7 get_hpr 4 469 18 Trackball::get_hpr 0 1 207 277
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
////////////////////////////////////////////////////////////////////
42
LVecBase3f Trackball::get_hpr(void) const;

430 5 get_h 4 469 16 Trackball::get_h 0 1 208 0
35
float Trackball::get_h(void) const;

431 5 get_p 4 469 16 Trackball::get_p 0 1 209 0
35
float Trackball::get_p(void) const;

432 5 get_r 4 469 16 Trackball::get_r 0 1 210 0
35
float Trackball::get_r(void) const;

433 7 set_hpr 4 469 18 Trackball::set_hpr 0 2 211 212 255
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
////////////////////////////////////////////////////////////////////
47
void Trackball::set_hpr(LVecBase3f const &hpr);

434 5 set_h 4 469 16 Trackball::set_h 0 1 213 0
31
void Trackball::set_h(float h);

435 5 set_p 4 469 16 Trackball::set_p 0 1 214 0
31
void Trackball::set_p(float p);

436 5 set_r 4 469 16 Trackball::set_r 0 1 215 0
31
void Trackball::set_r(float r);

437 17 reset_origin_here 4 469 28 Trackball::reset_origin_here 0 1 216 430
/// **** Origin of Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
////////////////////////////////////////////////////////////////////
40
void Trackball::reset_origin_here(void);

438 11 move_origin 4 469 22 Trackball::move_origin 0 1 217 271
////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
////////////////////////////////////////////////////////////////////
55
void Trackball::move_origin(float x, float y, float z);

439 10 get_origin 4 469 21 Trackball::get_origin 0 1 218 260
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
////////////////////////////////////////////////////////////////////
43
LPoint3f Trackball::get_origin(void) const;

440 10 set_origin 4 469 21 Trackball::set_origin 0 1 219 258
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
////////////////////////////////////////////////////////////////////
53
void Trackball::set_origin(LVecBase3f const &origin);

441 10 set_invert 4 469 21 Trackball::set_invert 0 1 220 423
/// **** Misc ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
38
void Trackball::set_invert(bool flag);

442 10 get_invert 4 469 21 Trackball::get_invert 0 1 221 406
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
39
bool Trackball::get_invert(void) const;

443 10 set_rel_to 4 469 21 Trackball::set_rel_to 0 1 222 561
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
////////////////////////////////////////////////////////////////////
51
void Trackball::set_rel_to(NodePath const &rel_to);

444 10 get_rel_to 4 469 21 Trackball::get_rel_to 0 1 223 327
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
////////////////////////////////////////////////////////////////////
50
NodePath const &Trackball::get_rel_to(void) const;

445 21 set_coordinate_system 4 469 32 Trackball::set_coordinate_system 0 1 224 524
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
////////////////////////////////////////////////////////////////////
59
void Trackball::set_coordinate_system(CoordinateSystem cs);

446 21 get_coordinate_system 4 469 32 Trackball::get_coordinate_system 0 1 225 325
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
////////////////////////////////////////////////////////////////////
62
CoordinateSystem Trackball::get_coordinate_system(void) const;

447 7 set_mat 4 469 18 Trackball::set_mat 0 1 226 368
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
////////////////////////////////////////////////////////////////////
46
void Trackball::set_mat(LMatrix4f const &mat);

448 7 get_mat 4 469 18 Trackball::get_mat 0 1 227 292
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Trackball::get_mat(void) const;

449 13 get_trans_mat 4 469 24 Trackball::get_trans_mat 0 1 228 387
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
////////////////////////////////////////////////////////////////////
54
LMatrix4f const &Trackball::get_trans_mat(void) const;

450 14 get_class_type 4 469 25 Trackball::get_class_type 0 1 229 0
50
static TypeHandle Trackball::get_class_type(void);

451 12 Transform2SG 4 470 26 Transform2SG::Transform2SG 0 1 230 221
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
Transform2SG::Transform2SG(basic_string< char > const &name);

452 8 set_node 4 470 22 Transform2SG::set_node 0 1 231 262
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
////////////////////////////////////////////////////////////////////
45
void Transform2SG::set_node(PandaNode *node);

453 8 get_node 4 470 22 Transform2SG::get_node 0 1 232 324
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
////////////////////////////////////////////////////////////////////
46
PandaNode *Transform2SG::get_node(void) const;

454 14 get_class_type 4 470 28 Transform2SG::get_class_type 0 1 233 0
53
static TypeHandle Transform2SG::get_class_type(void);

455 13 ~Transform2SG 4 470 27 Transform2SG::~Transform2SG 0 0 0
34
Transform2SG::~Transform2SG(void);

233
1 14 Dtool_yiw5k4xy 7 3 472 0 14 Dtool_yiw5k4xy 1 4 name 1 471  
2 14 Dtool_yiw5gXgW 4 4 473 0 14 Dtool_yiw5gXgW 2 4 this 3 472  17 button_down_event 1 471  
3 14 Dtool_yiw5arVA 6 5 471 0 14 Dtool_yiw5arVA 1 4 this 3 474  
4 14 Dtool_yiw5I2Hn 4 6 473 0 14 Dtool_yiw5I2Hn 2 4 this 3 472  15 button_up_event 1 471  
5 14 Dtool_yiw5z4X5 6 7 471 0 14 Dtool_yiw5z4X5 1 4 this 3 474  
6 14 Dtool_yiw5_Oot 4 8 473 0 14 Dtool_yiw5_Oot 2 4 this 3 472  15 keystroke_event 1 471  
7 14 Dtool_yiw51s5_ 6 9 471 0 14 Dtool_yiw51s5_ 1 4 this 3 474  
8 14 Dtool_yiw5zQU_ 4 10 473 0 14 Dtool_yiw5zQU_ 2 4 this 3 472  15 candidate_event 1 471  
9 14 Dtool_yiw5tajR 6 11 471 0 14 Dtool_yiw5tajR 1 4 this 3 474  
10 14 Dtool_yiw5n2SG 4 12 473 0 14 Dtool_yiw5n2SG 2 4 this 3 472  10 move_event 1 471  
11 14 Dtool_yiw5sPhu 6 13 471 0 14 Dtool_yiw5sPhu 1 4 this 3 474  
12 14 Dtool_yiw58tb8 4 14 473 0 14 Dtool_yiw58tb8 2 4 this 3 472  6 prefix 1 471  
13 14 Dtool_yiw53m_a 6 15 471 0 14 Dtool_yiw53m_a 1 4 this 3 474  
14 14 Dtool_yiw5mYQj 4 16 473 0 14 Dtool_yiw5mYQj 2 4 this 3 472  13 specific_flag 1 476  
15 14 Dtool_yiw5pjBE 6 17 476 0 14 Dtool_yiw5pjBE 1 4 this 3 474  
16 14 Dtool_yiw5Y3F7 4 18 473 0 14 Dtool_yiw5Y3F7 2 4 this 3 472  9 time_flag 1 476  
17 14 Dtool_yiw5WTVj 6 19 476 0 14 Dtool_yiw5WTVj 1 4 this 3 474  
18 14 Dtool_yiw5HaR_ 4 20 473 0 14 Dtool_yiw5HaR_ 2 4 this 3 472  3 obj 1 477  
19 14 Dtool_yiw5bj99 6 21 480 0 14 Dtool_yiw5bj99 1 4 this 3 474  
20 14 Dtool_yiw5amFl 7 22 481 0 14 Dtool_yiw5amFl 2 4 this 3 474  1 n 1 480  
21 14 Dtool_yiw5GlsX 6 23 482 0 14 Dtool_yiw5GlsX 1 4 this 3 474  
22 14 Dtool_yiw57l_D 4 24 473 0 14 Dtool_yiw57l_D 2 4 this 3 472  4 mods 1 482  
23 14 Dtool_yiw5uTqR 4 25 473 0 14 Dtool_yiw5uTqR 2 4 this 3 472  4 flag 1 476  
24 14 Dtool_yiw55I8a 6 26 476 0 14 Dtool_yiw55I8a 1 4 this 3 474  
25 14 Dtool_yiw5Ji9T 6 27 476 0 14 Dtool_yiw5Ji9T 3 4 this 3 472  4 mods 1 482  6 button 1 485  
26 14 Dtool_yiw5psxI 6 28 476 0 14 Dtool_yiw5psxI 3 4 this 3 472  4 mods 1 482  6 button 1 485  
27 14 Dtool_yiw5UvSd 6 29 476 0 14 Dtool_yiw5UvSd 2 4 this 3 474  6 button 1 485  
28 14 Dtool_yiw5cX_g 6 29 476 0 14 Dtool_yiw5cX_g 3 4 this 3 474  4 mods 1 482  6 button 1 485  
29 14 Dtool_yiw5MSSv 4 30 473 0 14 Dtool_yiw5MSSv 1 4 this 3 472  
30 14 Dtool_yiw5mOhU 7 31 489 0 14 Dtool_yiw5mOhU 0 
31 14 Dtool_yiw5slm1 4 33 473 0 14 Dtool_yiw5slm1 3 4 this 3 490  6 button 1 485  7 is_down 1 476  
32 14 Dtool_yiw5zD5_ 4 34 473 0 14 Dtool_yiw5zD5_ 2 4 this 3 490  6 button 1 485  
33 14 Dtool_yiw5P5gT 4 35 473 0 14 Dtool_yiw5P5gT 1 4 this 3 490  
34 14 Dtool_yiw523QH 7 36 489 0 14 Dtool_yiw523QH 0 
35 14 Dtool_yiw5qXDJ 7 38 491 0 14 Dtool_yiw5qXDJ 1 4 name 1 471  
36 14 Dtool_yiw5Iz9n 7 38 491 0 14 Dtool_yiw5Iz9n 0 
37 14 Dtool_yiw5KTpq 4 39 473 0 14 Dtool_yiw5KTpq 2 4 this 3 491  5 speed 1 492  
38 14 Dtool_yiw5fKJb 6 40 492 0 14 Dtool_yiw5fKJb 1 4 this 3 493  
39 14 Dtool_yiw5924G 4 41 473 0 14 Dtool_yiw5924G 2 4 this 3 491  5 speed 1 492  
40 14 Dtool_yiw5sNX3 6 42 492 0 14 Dtool_yiw5sNX3 1 4 this 3 493  
41 14 Dtool_yiw5MuQt 4 43 473 0 14 Dtool_yiw5MuQt 2 4 this 3 491  5 speed 1 492  
42 14 Dtool_yiw582Ba 6 44 492 0 14 Dtool_yiw582Ba 1 4 this 3 493  
43 14 Dtool_yiw5_K6o 4 45 473 0 14 Dtool_yiw5_K6o 2 4 this 3 491  4 zone 1 492  
44 14 Dtool_yiw5WqfE 6 46 492 0 14 Dtool_yiw5WqfE 1 4 this 3 493  
45 14 Dtool_yiw5yXFf 4 47 473 0 14 Dtool_yiw5yXFf 2 4 this 3 491  4 zone 1 492  
46 14 Dtool_yiw5h_JJ 6 48 492 0 14 Dtool_yiw5h_JJ 1 4 this 3 493  
47 14 Dtool_yiw5aQ8o 4 49 473 0 14 Dtool_yiw5aQ8o 2 4 this 3 491  12 ramp_up_time 1 492  
48 14 Dtool_yiw5q_RD 6 50 492 0 14 Dtool_yiw5q_RD 1 4 this 3 493  
49 14 Dtool_yiw5kWik 4 51 473 0 14 Dtool_yiw5kWik 2 4 this 3 491  14 ramp_down_time 1 492  
50 14 Dtool_yiw5i7QW 6 52 492 0 14 Dtool_yiw5i7QW 1 4 this 3 493  
51 14 Dtool_yiw561dH 4 53 473 0 14 Dtool_yiw561dH 2 4 this 3 491  12 ramp_up_time 1 492  
52 14 Dtool_yiw5NIM5 6 54 492 0 14 Dtool_yiw5NIM5 1 4 this 3 493  
53 14 Dtool_yiw52qn5 4 55 473 0 14 Dtool_yiw52qn5 2 4 this 3 491  14 ramp_down_time 1 492  
54 14 Dtool_yiw5ACXI 6 56 492 0 14 Dtool_yiw5ACXI 1 4 this 3 493  
55 14 Dtool_yiw5v7hx 6 57 492 0 14 Dtool_yiw5v7hx 1 4 this 3 493  
56 14 Dtool_yiw5QzD6 6 58 492 0 14 Dtool_yiw5QzD6 1 4 this 3 493  
57 14 Dtool_yiw5KbcV 4 59 473 0 14 Dtool_yiw5KbcV 1 4 this 3 491  
58 14 Dtool_yiw5dmzH 6 60 495 0 14 Dtool_yiw5dmzH 1 4 this 3 493  
59 14 Dtool_yiw5BRV2 6 61 492 0 14 Dtool_yiw5BRV2 1 4 this 3 493  
60 14 Dtool_yiw5Rvo2 6 62 492 0 14 Dtool_yiw5Rvo2 1 4 this 3 493  
61 14 Dtool_yiw5hN82 6 63 492 0 14 Dtool_yiw5hN82 1 4 this 3 493  
62 14 Dtool_yiw5Amwj 4 64 473 0 14 Dtool_yiw5Amwj 2 4 this 3 491  3 vec 1 498  
63 14 Dtool_yiw5jVcP 4 64 473 0 14 Dtool_yiw5jVcP 4 4 this 3 491  1 x 1 492  1 y 1 492  1 z 1 492  
64 14 Dtool_yiw5pTmn 4 65 473 0 14 Dtool_yiw5pTmn 2 4 this 3 491  1 x 1 492  
65 14 Dtool_yiw5Zx6n 4 66 473 0 14 Dtool_yiw5Zx6n 2 4 this 3 491  1 y 1 492  
66 14 Dtool_yiw5JXNo 4 67 473 0 14 Dtool_yiw5JXNo 2 4 this 3 491  1 z 1 492  
67 14 Dtool_yiw5Y8sW 6 68 498 0 14 Dtool_yiw5Y8sW 1 4 this 3 493  
68 14 Dtool_yiw5Btcx 6 69 492 0 14 Dtool_yiw5Btcx 1 4 this 3 493  
69 14 Dtool_yiw5Bf5z 6 70 492 0 14 Dtool_yiw5Bf5z 1 4 this 3 493  
70 14 Dtool_yiw5hbg0 6 71 492 0 14 Dtool_yiw5hbg0 1 4 this 3 493  
71 14 Dtool_yiw5Fcoy 4 72 473 0 14 Dtool_yiw5Fcoy 2 4 this 3 491  3 hpr 1 498  
72 14 Dtool_yiw54DVe 4 72 473 0 14 Dtool_yiw54DVe 4 4 this 3 491  1 h 1 492  1 p 1 492  1 r 1 492  
73 14 Dtool_yiw5p3ui 4 73 473 0 14 Dtool_yiw5p3ui 2 4 this 3 491  1 h 1 492  
74 14 Dtool_yiw5pBKl 4 74 473 0 14 Dtool_yiw5pBKl 2 4 this 3 491  1 p 1 492  
75 14 Dtool_yiw5JFxl 4 75 473 0 14 Dtool_yiw5JFxl 2 4 this 3 491  1 r 1 492  
76 14 Dtool_yiw5I1Ry 4 76 473 0 14 Dtool_yiw5I1Ry 2 4 this 3 491  10 force_roll 1 492  
77 14 Dtool_yiw5sn9J 4 77 473 0 14 Dtool_yiw5sn9J 2 4 this 3 491  12 ignore_mouse 1 476  
78 14 Dtool_yiw5HO_x 6 78 476 0 14 Dtool_yiw5HO_x 1 4 this 3 493  
79 14 Dtool_yiw5pmA_ 4 79 473 0 14 Dtool_yiw5pmA_ 2 4 this 3 491  11 force_mouse 1 476  
80 14 Dtool_yiw5lWhe 6 80 476 0 14 Dtool_yiw5lWhe 1 4 this 3 493  
81 14 Dtool_yiw5xaMx 4 81 473 0 14 Dtool_yiw5xaMx 2 4 this 3 491  15 stop_this_frame 1 476  
82 14 Dtool_yiw5jdTo 6 82 476 0 14 Dtool_yiw5jdTo 1 4 this 3 493  
83 14 Dtool_yiw5TToo 4 83 473 0 14 Dtool_yiw5TToo 2 4 this 3 491  3 mat 1 501  
84 14 Dtool_yiw5oJtK 6 84 501 0 14 Dtool_yiw5oJtK 1 4 this 3 491  
85 14 Dtool_yiw5Q2Wr 4 85 473 0 14 Dtool_yiw5Q2Wr 1 4 this 3 491  
86 14 Dtool_yiw50qRB 7 86 489 0 14 Dtool_yiw50qRB 0 
87 14 Dtool_yiw5czRD 7 88 504 0 14 Dtool_yiw5czRD 1 4 name 1 471  
88 14 Dtool_yiw5VI_1 6 89 492 0 14 Dtool_yiw5VI_1 1 4 this 3 505  
89 14 Dtool_yiw5VfJj 6 90 492 0 14 Dtool_yiw5VfJj 1 4 this 3 505  
90 14 Dtool_yiw5aA1U 6 91 492 0 14 Dtool_yiw5aA1U 1 4 this 3 505  
91 14 Dtool_yiw5hR06 6 92 492 0 14 Dtool_yiw5hR06 1 4 this 3 505  
92 14 Dtool_yiw5lkoB 4 93 473 0 14 Dtool_yiw5lkoB 5 4 this 3 504  1 l 1 492  1 r 1 492  1 b 1 492  1 t 1 492  
93 14 Dtool_yiw5yuXc 7 94 489 0 14 Dtool_yiw5yuXc 0 
94 14 Dtool_yiw5XN0b 7 102 510 342 14 Dtool_yiw5XN0b 2 4 name 1 471  5 frame 1 507  
95 14 Dtool_yiw5VKEG 7 102 510 342 14 Dtool_yiw5VKEG 5 4 name 1 471  4 left 1 492  5 right 1 492  6 bottom 1 492  3 top 1 492  
96 14 Dtool_yiw5vRlo 4 103 473 0 14 Dtool_yiw5vRlo 2 4 this 3 510  5 frame 1 507  
97 14 Dtool_yiw5TI04 4 103 473 0 14 Dtool_yiw5TI04 5 4 this 3 510  4 left 1 492  5 right 1 492  6 bottom 1 492  3 top 1 492  
98 14 Dtool_yiw5C2td 6 104 507 0 14 Dtool_yiw5C2td 1 4 this 3 511  
99 14 Dtool_yiw5xwAe 6 105 492 0 14 Dtool_yiw5xwAe 1 4 this 3 511  
100 14 Dtool_yiw5uUjJ 4 106 473 0 14 Dtool_yiw5uUjJ 2 4 this 3 510  4 sort 1 480  
101 14 Dtool_yiw5wQ_6 6 107 480 0 14 Dtool_yiw5wQ_6 1 4 this 3 511  
102 14 Dtool_yiw5H96x 4 108 473 0 14 Dtool_yiw5H96x 2 4 this 3 510  6 active 1 476  
103 14 Dtool_yiw5BoGH 6 109 476 0 14 Dtool_yiw5BoGH 1 4 this 3 511  
104 14 Dtool_yiw5_wOd 4 110 473 0 14 Dtool_yiw5_wOd 2 4 this 3 510  8 keyboard 1 476  
105 14 Dtool_yiw52JK8 6 111 476 0 14 Dtool_yiw52JK8 1 4 this 3 511  
106 14 Dtool_yiw5TWvO 4 113 473 0 14 Dtool_yiw5TWvO 2 4 this 3 510  14 suppress_flags 1 480  
107 14 Dtool_yiw5yKjf 6 114 480 0 14 Dtool_yiw5yKjf 1 4 this 3 511  
108 14 Dtool_yiw5kvVL 4 115 473 0 14 Dtool_yiw5kvVL 2 4 this 3 511  3 out 1 513  
109 14 Dtool_yiw5ijOS 4 116 473 0 14 Dtool_yiw5ijOS 3 4 this 3 511  3 out 1 513  12 indent_level 1 480  
110 14 Dtool_yiw51qaj 4 116 473 0 14 Dtool_yiw51qaj 2 4 this 3 511  3 out 1 513  
111 14 Dtool_yiw5et1g 7 117 489 0 14 Dtool_yiw5et1g 0 
112 14 Dtool_yiw5S1_F 7 97 515 0 14 Dtool_yiw5S1_F 1 4 this 3 510  
113 14 Dtool_yiw576md 7 98 510 342 14 Dtool_yiw576md 1 4 this 3 515  
114 14 Dtool_yiw5uEXk 6 100 516 0 14 Dtool_yiw5uEXk 1 4 this 3 510  
115 14 Dtool_yiw57Z9h 7 101 510 342 14 Dtool_yiw57Z9h 1 4 this 3 516  
116 14 Dtool_yiw5xUMA 4 123 473 0 14 Dtool_yiw5xUMA 2 4 this 3 517  6 region 1 510  
117 14 Dtool_yiw575tC 6 124 476 0 14 Dtool_yiw575tC 2 4 this 3 518  6 region 1 510  
118 14 Dtool_yiw5nY6C 6 125 476 0 14 Dtool_yiw5nY6C 2 4 this 3 517  6 region 1 510  
119 14 Dtool_yiw52SzS 7 126 510 342 14 Dtool_yiw52SzS 2 4 this 3 518  4 name 1 471  
120 14 Dtool_yiw59D_y 4 127 473 0 14 Dtool_yiw59D_y 1 4 this 3 517  
121 14 Dtool_yiw5Fnk1 6 128 480 0 14 Dtool_yiw5Fnk1 1 4 this 3 518  
122 14 Dtool_yiw5YyXb 7 129 510 342 14 Dtool_yiw5YyXb 2 4 this 3 518  1 n 1 480  
123 14 Dtool_yiw5tX2N 4 130 473 0 14 Dtool_yiw5tX2N 2 4 this 3 518  3 out 1 513  
124 14 Dtool_yiw5lVEu 4 131 473 0 14 Dtool_yiw5lVEu 3 4 this 3 518  3 out 1 513  12 indent_level 1 480  
125 14 Dtool_yiw5F5ne 4 131 473 0 14 Dtool_yiw5F5ne 2 4 this 3 518  3 out 1 513  
126 14 Dtool_yiw55OAH 4 132 473 0 14 Dtool_yiw55OAH 2 4 this 3 517  8 render2d 1 520  
127 14 Dtool_yiw5kq3J 4 133 473 0 14 Dtool_yiw5kq3J 2 4 this 3 517  5 color 1 507  
128 14 Dtool_yiw5sd8H 4 134 473 0 14 Dtool_yiw5sd8H 1 4 this 3 517  
129 14 Dtool_yiw53_jo 7 135 489 0 14 Dtool_yiw53_jo 0 
130 14 Dtool_yiw5XWnS 6 121 523 0 14 Dtool_yiw5XWnS 1 4 this 3 517  
131 14 Dtool_yiw5cC1c 7 141 524 363 14 Dtool_yiw5cC1c 1 4 name 1 471  
132 14 Dtool_yiw5a1_K 7 141 524 363 14 Dtool_yiw5a1_K 0 
133 14 Dtool_yiw5NVgH 6 143 476 0 14 Dtool_yiw5NVgH 2 4 this 3 524  6 region 1 510  
134 14 Dtool_yiw5NnfE 6 144 476 0 14 Dtool_yiw5NnfE 1 4 this 3 525  
135 14 Dtool_yiw5Iirl 6 145 476 0 14 Dtool_yiw5Iirl 1 4 this 3 525  
136 14 Dtool_yiw5P88Z 6 146 527 0 14 Dtool_yiw5P88Z 1 4 this 3 525  
137 14 Dtool_yiw5Y5e7 6 147 492 0 14 Dtool_yiw5Y5e7 1 4 this 3 525  
138 14 Dtool_yiw5hnf7 6 148 492 0 14 Dtool_yiw5hnf7 1 4 this 3 525  
139 14 Dtool_yiw5cWJO 6 149 476 0 14 Dtool_yiw5cWJO 1 4 this 3 525  
140 14 Dtool_yiw5voLV 6 149 476 0 14 Dtool_yiw5voLV 2 4 this 3 525  3 pos 1 527  
141 14 Dtool_yiw5O62h 6 149 476 0 14 Dtool_yiw5O62h 3 4 this 3 525  1 x 1 492  1 y 1 492  
142 14 Dtool_yiw5eZEz 7 150 510 342 14 Dtool_yiw5eZEz 1 4 this 3 525  
143 14 Dtool_yiw5g7zU 7 150 510 342 14 Dtool_yiw5g7zU 2 4 this 3 525  3 pos 1 527  
144 14 Dtool_yiw5wQqr 7 150 510 342 14 Dtool_yiw5wQqr 3 4 this 3 525  1 x 1 492  1 y 1 492  
145 14 Dtool_yiw5cEcO 4 151 473 0 14 Dtool_yiw5cEcO 2 4 this 3 524  7 pattern 1 471  
146 14 Dtool_yiw5ht1B 6 152 471 0 14 Dtool_yiw5ht1B 1 4 this 3 525  
147 14 Dtool_yiw5m2Gd 4 153 473 0 14 Dtool_yiw5m2Gd 2 4 this 3 524  7 pattern 1 471  
148 14 Dtool_yiw5i4be 6 154 471 0 14 Dtool_yiw5i4be 1 4 this 3 525  
149 14 Dtool_yiw5Yndk 4 155 473 0 14 Dtool_yiw5Yndk 2 4 this 3 524  7 pattern 1 471  
150 14 Dtool_yiw5AuR6 6 156 471 0 14 Dtool_yiw5AuR6 1 4 this 3 525  
151 14 Dtool_yiw5HX33 4 157 473 0 14 Dtool_yiw5HX33 2 4 this 3 524  7 pattern 1 471  
152 14 Dtool_yiw5WyqN 6 158 471 0 14 Dtool_yiw5WyqN 1 4 this 3 525  
153 14 Dtool_yiw5lQGQ 4 159 473 0 14 Dtool_yiw5lQGQ 2 4 this 3 524  7 pattern 1 471  
154 14 Dtool_yiw5tUxJ 6 160 471 0 14 Dtool_yiw5tUxJ 1 4 this 3 525  
155 14 Dtool_yiw5q8_O 4 161 473 0 14 Dtool_yiw5q8_O 2 4 this 3 524  7 pattern 1 471  
156 14 Dtool_yiw5a5mF 6 162 471 0 14 Dtool_yiw5a5mF 1 4 this 3 525  
157 14 Dtool_yiw5CINK 4 163 473 0 14 Dtool_yiw5CINK 2 4 this 3 524  4 node 1 530  
158 14 Dtool_yiw5nnGj 6 164 476 0 14 Dtool_yiw5nnGj 1 4 this 3 525  
159 14 Dtool_yiw5gJl4 7 165 530 0 14 Dtool_yiw5gJl4 1 4 this 3 525  
160 14 Dtool_yiw5alHk 4 166 473 0 14 Dtool_yiw5alHk 1 4 this 3 524  
161 14 Dtool_yiw5T4a_ 4 167 473 0 14 Dtool_yiw5T4a_ 2 4 this 3 524  2 eh 1 532  
162 14 Dtool_yiw5pC6_ 6 168 532 0 14 Dtool_yiw5pC6_ 1 4 this 3 525  
163 14 Dtool_yiw5tFyZ 4 169 473 0 14 Dtool_yiw5tFyZ 2 4 this 3 524  4 mods 1 482  
164 14 Dtool_yiw5I0bg 7 170 534 0 14 Dtool_yiw5I0bg 1 4 this 3 525  
165 14 Dtool_yiw5in8K 4 171 473 0 14 Dtool_yiw5in8K 2 4 this 3 524  2 dr 1 535  
166 14 Dtool_yiw51V8S 4 172 473 0 14 Dtool_yiw51V8S 1 4 this 3 524  
167 14 Dtool_yiw5bAU7 6 173 535 0 14 Dtool_yiw5bAU7 1 4 this 3 525  
168 14 Dtool_yiw5Zp2l 6 174 476 0 14 Dtool_yiw5Zp2l 1 4 this 3 525  
169 14 Dtool_yiw56Y8I 6 175 476 0 14 Dtool_yiw56Y8I 2 4 this 3 524  5 group 1 517  
170 14 Dtool_yiw5e1yD 6 176 476 0 14 Dtool_yiw5e1yD 2 4 this 3 524  5 group 1 517  
171 14 Dtool_yiw5eayk 6 177 476 0 14 Dtool_yiw5eayk 3 4 this 3 524  9 old_group 1 517  9 new_group 1 517  
172 14 Dtool_yiw5lrMu 6 178 480 0 14 Dtool_yiw5lrMu 1 4 this 3 525  
173 14 Dtool_yiw5t9yw 7 179 517 344 14 Dtool_yiw5t9yw 2 4 this 3 525  1 n 1 480  
174 14 Dtool_yiw5fzXa 7 180 489 0 14 Dtool_yiw5fzXa 0 
175 14 Dtool_yiw5Kzc_ 7 137 537 0 14 Dtool_yiw5Kzc_ 1 4 this 3 524  
176 14 Dtool_yiw5hM9_ 7 138 524 363 14 Dtool_yiw5hM9_ 1 4 this 3 537  
177 14 Dtool_yiw5LdxH 7 139 517 344 14 Dtool_yiw5LdxH 1 4 this 3 524  
178 14 Dtool_yiw5k8r2 7 140 524 363 14 Dtool_yiw5k8r2 1 4 this 3 517  
179 14 Dtool_yiw5HdBJ 6 183 476 0 14 Dtool_yiw5HdBJ 1 4 this 3 538  
180 14 Dtool_yiw5Wbt7 7 184 540 0 14 Dtool_yiw5Wbt7 1 4 this 3 538  
181 14 Dtool_yiw5jsPh 6 185 476 0 14 Dtool_yiw5jsPh 1 4 this 3 538  
182 14 Dtool_yiw5Lr7T 6 186 480 0 14 Dtool_yiw5Lr7T 1 4 this 3 538  
183 14 Dtool_yiw5m3E2 6 187 476 0 14 Dtool_yiw5m3E2 1 4 this 3 538  
184 14 Dtool_yiw5JON1 6 188 471 0 14 Dtool_yiw5JON1 1 4 this 3 538  
185 14 Dtool_yiw5ggbz 6 188 471 0 14 Dtool_yiw5ggbz 2 4 this 3 538  8 encoding 1 541  
186 14 Dtool_yiw52Qq_ 6 189 543 0 14 Dtool_yiw52Qq_ 1 4 this 3 538  
187 14 Dtool_yiw5wcQ5 6 190 543 0 14 Dtool_yiw5wcQ5 1 4 this 3 538  
188 14 Dtool_yiw55fsc 6 191 543 0 14 Dtool_yiw55fsc 1 4 this 3 538  
189 14 Dtool_yiw5D2au 6 192 482 0 14 Dtool_yiw5D2au 1 4 this 3 538  
190 14 Dtool_yiw53Y9y 6 193 476 0 14 Dtool_yiw53Y9y 1 4 this 3 538  
191 14 Dtool_yiw5nFpl 6 194 527 0 14 Dtool_yiw5nFpl 1 4 this 3 538  
192 14 Dtool_yiw5CuZd 6 195 476 0 14 Dtool_yiw5CuZd 1 4 this 3 538  
193 14 Dtool_yiw5P1BE 4 196 473 0 14 Dtool_yiw5P1BE 2 4 this 3 538  3 out 1 513  
194 14 Dtool_yiw5FM2w 7 198 544 0 14 Dtool_yiw5FM2w 1 4 name 1 471  
195 14 Dtool_yiw5QM3x 4 199 473 0 14 Dtool_yiw5QM3x 1 4 this 3 544  
196 14 Dtool_yiw5ylhr 6 200 492 0 14 Dtool_yiw5ylhr 1 4 this 3 545  
197 14 Dtool_yiw5eGTT 4 201 473 0 14 Dtool_yiw5eGTT 2 4 this 3 544  8 fwdscale 1 492  
198 14 Dtool_yiw5AeAL 6 202 495 0 14 Dtool_yiw5AeAL 1 4 this 3 545  
199 14 Dtool_yiw52VRC 6 203 492 0 14 Dtool_yiw52VRC 1 4 this 3 545  
200 14 Dtool_yiw5_EbC 6 204 492 0 14 Dtool_yiw5_EbC 1 4 this 3 545  
201 14 Dtool_yiw5m3kC 6 205 492 0 14 Dtool_yiw5m3kC 1 4 this 3 545  
202 14 Dtool_yiw52sA5 4 206 473 0 14 Dtool_yiw52sA5 2 4 this 3 544  3 vec 1 498  
203 14 Dtool_yiw5Sryu 4 206 473 0 14 Dtool_yiw5Sryu 4 4 this 3 544  1 x 1 492  1 y 1 492  1 z 1 492  
204 14 Dtool_yiw5CF66 4 207 473 0 14 Dtool_yiw5CF66 2 4 this 3 544  1 x 1 492  
205 14 Dtool_yiw5a0E7 4 208 473 0 14 Dtool_yiw5a0E7 2 4 this 3 544  1 y 1 492  
206 14 Dtool_yiw5SnO7 4 209 473 0 14 Dtool_yiw5SnO7 2 4 this 3 544  1 z 1 492  
207 14 Dtool_yiw59kcy 7 210 547 0 14 Dtool_yiw59kcy 1 4 this 3 545  
208 14 Dtool_yiw51H1_ 6 211 492 0 14 Dtool_yiw51H1_ 1 4 this 3 545  
209 14 Dtool_yiw52MDB 6 212 492 0 14 Dtool_yiw52MDB 1 4 this 3 545  
210 14 Dtool_yiw5muWB 6 213 492 0 14 Dtool_yiw5muWB 1 4 this 3 545  
211 14 Dtool_yiw5w7cg 4 214 473 0 14 Dtool_yiw5w7cg 2 4 this 3 544  3 hpr 1 498  
212 14 Dtool_yiw5QARW 4 214 473 0 14 Dtool_yiw5QARW 4 4 this 3 544  1 h 1 492  1 p 1 492  1 r 1 492  
213 14 Dtool_yiw5C3e4 4 215 473 0 14 Dtool_yiw5C3e4 2 4 this 3 544  1 h 1 492  
214 14 Dtool_yiw5CMs5 4 216 473 0 14 Dtool_yiw5CMs5 2 4 this 3 544  1 p 1 492  
215 14 Dtool_yiw5SuA6 4 217 473 0 14 Dtool_yiw5SuA6 2 4 this 3 544  1 r 1 492  
216 14 Dtool_yiw5QuKj 4 218 473 0 14 Dtool_yiw5QuKj 1 4 this 3 544  
217 14 Dtool_yiw5gy67 4 219 473 0 14 Dtool_yiw5gy67 4 4 this 3 544  1 x 1 492  1 y 1 492  1 z 1 492  
218 14 Dtool_yiw58Sdj 7 220 548 0 14 Dtool_yiw58Sdj 1 4 this 3 545  
219 14 Dtool_yiw5szQ3 4 221 473 0 14 Dtool_yiw5szQ3 2 4 this 3 544  6 origin 1 498  
220 14 Dtool_yiw5UESo 4 222 473 0 14 Dtool_yiw5UESo 2 4 this 3 544  4 flag 1 476  
221 14 Dtool_yiw5P3xR 6 223 476 0 14 Dtool_yiw5P3xR 1 4 this 3 545  
222 14 Dtool_yiw5lgYv 4 224 473 0 14 Dtool_yiw5lgYv 2 4 this 3 544  6 rel_to 1 520  
223 14 Dtool_yiw5Mggh 6 225 520 0 14 Dtool_yiw5Mggh 1 4 this 3 545  
224 14 Dtool_yiw52veS 4 226 473 0 14 Dtool_yiw52veS 2 4 this 3 544  2 cs 1 549  
225 14 Dtool_yiw55ZF5 6 227 549 0 14 Dtool_yiw55ZF5 1 4 this 3 545  
226 14 Dtool_yiw5inab 4 228 473 0 14 Dtool_yiw5inab 2 4 this 3 544  3 mat 1 501  
227 14 Dtool_yiw5Z1ai 6 229 501 0 14 Dtool_yiw5Z1ai 1 4 this 3 545  
228 14 Dtool_yiw5WvGL 6 230 501 0 14 Dtool_yiw5WvGL 1 4 this 3 545  
229 14 Dtool_yiw5ATvH 7 231 489 0 14 Dtool_yiw5ATvH 0 
230 14 Dtool_yiw5DG5A 7 233 550 455 14 Dtool_yiw5DG5A 1 4 name 1 471  
231 14 Dtool_yiw5dpGS 4 234 473 0 14 Dtool_yiw5dpGS 2 4 this 3 550  4 node 1 530  
232 14 Dtool_yiw5Czs4 7 235 530 0 14 Dtool_yiw5Czs4 1 4 this 3 551  
233 14 Dtool_yiw5DfAE 7 236 489 0 14 Dtool_yiw5DfAE 0 
97
456 13 ButtonThrower 75777 13 ButtonThrower 13 ButtonThrower 0 0 0 1 234 0 0 28 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 0 1 0 457 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : ButtonThrower
// Description : Throws Panda Events for button down/up events
//               generated within the data graph.
//
//               This is a DataNode which is intended to be parented
//               to the data graph below a device which is generating
//               a sequence of button events, like a MouseAndKeyboard
//               device.  It simply takes each button it finds and
//               throws a corresponding event based on the button name
//               via the throw_event() call.
////////////////////////////////////////////////////////////////////

457 8 DataNode 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

458 18 MouseInterfaceNode 75777 18 MouseInterfaceNode 18 MouseInterfaceNode 0 0 0 0 0 0 4 263 264 265 266 0 1 0 457 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : MouseInterfaceNode
// Description : This is the base class for some classes that monitor
//               the mouse and keyboard input and perform some action
//               due to their state.
//
//               It collects together some common interface; in
//               particular, the require_button() and related methods.
////////////////////////////////////////////////////////////////////

459 14 DriveInterface 75777 14 DriveInterface 14 DriveInterface 0 0 0 1 267 0 0 48 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 0 1 0 458 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

460 14 MouseSubregion 75777 14 MouseSubregion 14 MouseSubregion 0 0 0 1 316 0 0 6 317 318 319 320 321 322 0 1 0 458 0 0 0 0 587
////////////////////////////////////////////////////////////////////
//       Class : MouseSubregion
// Description : The MouseSubregion object scales the mouse inputs
//               from within a rectangular region of the screen, as if
//               they were the full-screen inputs.
//
//               If you choose your MouseSubregion coordinates to
//               exactly match a DisplayRegion within your window, you
//               end up with a virtual mouse within your
//               DisplayRegion.
////////////////////////////////////////////////////////////////////

461 18 MouseWatcherRegion 141313 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 1 327 342 0 14 328 329 330 331 332 333 334 335 336 337 338 339 340 341 0 2 3 462 323 324 3 463 325 326 0 1 464 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

462 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

463 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

464 13 SuppressFlags 794624 33 MouseWatcherRegion::SuppressFlags 33 MouseWatcherRegion::SuppressFlags 461 0 0 0 0 0 0 0 0 4 15 SF_mouse_button 35 MouseWatcherRegion::SF_mouse_button 1 15 SF_other_button 35 MouseWatcherRegion::SF_other_button 2 13 SF_any_button 33 MouseWatcherRegion::SF_any_button 3 17 SF_mouse_position 37 MouseWatcherRegion::SF_mouse_position 4 0 0

465 17 MouseWatcherGroup 26625 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 344 0 13 345 346 347 348 349 350 351 352 353 354 355 356 357 0 1 5 466 343 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.
////////////////////////////////////////////////////////////////////

466 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

467 12 MouseWatcher 26625 12 MouseWatcher 12 MouseWatcher 0 0 0 1 362 363 0 38 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 0 2 3 457 358 359 3 465 360 361 0 0 1022
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
////////////////////////////////////////////////////////////////////

468 21 MouseWatcherParameter 26625 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 402 0 14 403 404 405 406 407 408 409 410 411 412 413 414 415 416 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

469 9 Trackball 75777 9 Trackball 9 Trackball 0 0 0 1 417 0 0 33 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 0 1 0 458 0 0 0 0 702
////////////////////////////////////////////////////////////////////
//       Class : Trackball
// Description : Trackball acts like Performer in trackball mode.  It
//               can either spin around a piece of geometry directly,
//               or it can spin around a camera with the inverse
//               transform to make it appear that the whole world is
//               spinning.
//
//               The Trackball object actually just places a transform
//               in the data graph; parent a Transform2SG node under
//               it to actually transform objects (or cameras) in the
//               world.
////////////////////////////////////////////////////////////////////

470 12 Transform2SG 141313 12 Transform2SG 12 Transform2SG 0 0 0 1 451 455 0 3 452 453 454 0 1 0 457 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : Transform2SG
// Description : input: Transform (matrix)
//
//               output: none, but applies the matrix as the transform
//               transition for a given arc of the scene graph.
////////////////////////////////////////////////////////////////////

471 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

472 15 ButtonThrower * 8576 15 ButtonThrower * 15 ButtonThrower * 0 0 456 0 0 0 0 0 0 0 0 0

473 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

474 21 ButtonThrower const * 8576 21 ButtonThrower const * 21 ButtonThrower const * 0 0 475 0 0 0 0 0 0 0 0 0

475 19 ButtonThrower const 8832 19 ButtonThrower const 19 ButtonThrower const 0 0 456 0 0 0 0 0 0 0 0 0

476 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

477 22 EventParameter const * 8576 22 EventParameter const * 22 EventParameter const * 0 0 478 0 0 0 0 0 0 0 0 0

478 20 EventParameter const 8832 20 EventParameter const 20 EventParameter const 0 0 479 0 0 0 0 0 0 0 0 0

479 14 EventParameter 2048 14 EventParameter 14 EventParameter 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the EventStoreValue template class, defined
//               below.
////////////////////////////////////////////////////////////////////

480 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

481 16 EventParameter * 8576 16 EventParameter * 16 EventParameter * 0 0 479 0 0 0 0 0 0 0 0 0

482 23 ModifierButtons const * 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 483 0 0 0 0 0 0 0 0 0

483 21 ModifierButtons const 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 484 0 0 0 0 0 0 0 0 0

484 15 ModifierButtons 2048 15 ModifierButtons 15 ModifierButtons 0 0 0 0 0 0 0 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

485 20 ButtonHandle const * 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 486 0 0 0 0 0 0 0 0 0

486 18 ButtonHandle const 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 487 0 0 0 0 0 0 0 0 0

487 12 ButtonHandle 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

488 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

489 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 488 0 0 0 0 0 0 0 0 0

490 20 MouseInterfaceNode * 8576 20 MouseInterfaceNode * 20 MouseInterfaceNode * 0 0 458 0 0 0 0 0 0 0 0 0

491 16 DriveInterface * 8576 16 DriveInterface * 16 DriveInterface * 0 0 459 0 0 0 0 0 0 0 0 0

492 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

493 22 DriveInterface const * 8576 22 DriveInterface const * 22 DriveInterface const * 0 0 494 0 0 0 0 0 0 0 0 0

494 20 DriveInterface const 8832 20 DriveInterface const 20 DriveInterface const 0 0 459 0 0 0 0 0 0 0 0 0

495 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 496 0 0 0 0 0 0 0 0 0

496 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 497 0 0 0 0 0 0 0 0 0

497 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

498 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 499 0 0 0 0 0 0 0 0 0

499 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 500 0 0 0 0 0 0 0 0 0

500 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

501 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 502 0 0 0 0 0 0 0 0 0

502 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 503 0 0 0 0 0 0 0 0 0

503 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

504 16 MouseSubregion * 8576 16 MouseSubregion * 16 MouseSubregion * 0 0 460 0 0 0 0 0 0 0 0 0

505 22 MouseSubregion const * 8576 22 MouseSubregion const * 22 MouseSubregion const * 0 0 506 0 0 0 0 0 0 0 0 0

506 20 MouseSubregion const 8832 20 MouseSubregion const 20 MouseSubregion const 0 0 460 0 0 0 0 0 0 0 0 0

507 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 508 0 0 0 0 0 0 0 0 0

508 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 509 0 0 0 0 0 0 0 0 0

509 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

510 20 MouseWatcherRegion * 8576 20 MouseWatcherRegion * 20 MouseWatcherRegion * 0 0 461 0 0 0 0 0 0 0 0 0

511 26 MouseWatcherRegion const * 8576 26 MouseWatcherRegion const * 26 MouseWatcherRegion const * 0 0 512 0 0 0 0 0 0 0 0 0

512 24 MouseWatcherRegion const 8832 24 MouseWatcherRegion const 24 MouseWatcherRegion const 0 0 461 0 0 0 0 0 0 0 0 0

513 9 ostream * 8576 9 ostream * 9 ostream * 0 0 514 0 0 0 0 0 0 0 0 0

514 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

515 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 462 0 0 0 0 0 0 0 0 0

516 9 Namable * 8576 9 Namable * 9 Namable * 0 0 463 0 0 0 0 0 0 0 0 0

517 19 MouseWatcherGroup * 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 465 0 0 0 0 0 0 0 0 0

518 25 MouseWatcherGroup const * 8576 25 MouseWatcherGroup const * 25 MouseWatcherGroup const * 0 0 519 0 0 0 0 0 0 0 0 0

519 23 MouseWatcherGroup const 8832 23 MouseWatcherGroup const 23 MouseWatcherGroup const 0 0 465 0 0 0 0 0 0 0 0 0

520 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 521 0 0 0 0 0 0 0 0 0

521 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 522 0 0 0 0 0 0 0 0 0

522 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

523 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 466 0 0 0 0 0 0 0 0 0

524 14 MouseWatcher * 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 467 0 0 0 0 0 0 0 0 0

525 20 MouseWatcher const * 8576 20 MouseWatcher const * 20 MouseWatcher const * 0 0 526 0 0 0 0 0 0 0 0 0

526 18 MouseWatcher const 8832 18 MouseWatcher const 18 MouseWatcher const 0 0 467 0 0 0 0 0 0 0 0 0

527 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 528 0 0 0 0 0 0 0 0 0

528 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 529 0 0 0 0 0 0 0 0 0

529 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

530 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 531 0 0 0 0 0 0 0 0 0

531 9 PandaNode 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

532 14 EventHandler * 8576 14 EventHandler * 14 EventHandler * 0 0 533 0 0 0 0 0 0 0 0 0

533 12 EventHandler 2048 12 EventHandler 12 EventHandler 0 0 0 0 0 0 0 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

534 17 ModifierButtons * 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 484 0 0 0 0 0 0 0 0 0

535 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 536 0 0 0 0 0 0 0 0 0

536 13 DisplayRegion 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

537 10 DataNode * 8576 10 DataNode * 10 DataNode * 0 0 457 0 0 0 0 0 0 0 0 0

538 29 MouseWatcherParameter const * 8576 29 MouseWatcherParameter const * 29 MouseWatcherParameter const * 0 0 539 0 0 0 0 0 0 0 0 0

539 27 MouseWatcherParameter const 8832 27 MouseWatcherParameter const 27 MouseWatcherParameter const 0 0 468 0 0 0 0 0 0 0 0 0

540 14 ButtonHandle * 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 487 0 0 0 0 0 0 0 0 0

541 8 Encoding 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 542 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

542 11 TextEncoder 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

543 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

544 11 Trackball * 8576 11 Trackball * 11 Trackball * 0 0 469 0 0 0 0 0 0 0 0 0

545 17 Trackball const * 8576 17 Trackball const * 17 Trackball const * 0 0 546 0 0 0 0 0 0 0 0 0

546 15 Trackball const 8832 15 Trackball const 15 Trackball const 0 0 469 0 0 0 0 0 0 0 0 0

547 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 500 0 0 0 0 0 0 0 0 0

548 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 497 0 0 0 0 0 0 0 0 0

549 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

550 14 Transform2SG * 8576 14 Transform2SG * 14 Transform2SG * 0 0 470 0 0 0 0 0 0 0 0 0

551 20 Transform2SG const * 8576 20 Transform2SG const * 20 Transform2SG const * 0 0 552 0 0 0 0 0 0 0 0 0

552 18 Transform2SG const 8832 18 Transform2SG const 18 Transform2SG const 0 0 470 0 0 0 0 0 0 0 0 0

0
0
