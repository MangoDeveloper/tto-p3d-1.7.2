1145554730
2 2
7 libtext 4 pUk_ 5 panda 
255
267 29 upcast_to_TypedReferenceCount 12 522 39 TextFont::upcast_to_TypedReferenceCount 0 1 8 43
upcast from TextFont to TypedReferenceCount
67
TypedReferenceCount *TextFont::upcast_to_TypedReferenceCount(void);

268 20 downcast_to_TextFont 12 523 41 TypedReferenceCount::downcast_to_TextFont 0 1 9 45
downcast from TypedReferenceCount to TextFont
58
TextFont *TypedReferenceCount::downcast_to_TextFont(void);

269 17 upcast_to_Namable 12 522 27 TextFont::upcast_to_Namable 0 1 10 31
upcast from TextFont to Namable
43
Namable *TextFont::upcast_to_Namable(void);

270 20 downcast_to_TextFont 12 524 29 Namable::downcast_to_TextFont 0 1 11 33
downcast from Namable to TextFont
46
TextFont *Namable::downcast_to_TextFont(void);

271 9 ~TextFont 4 522 19 TextFont::~TextFont 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: TextFont::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual TextFont::~TextFont(void);

272 8 is_valid 4 522 18 TextFont::is_valid 0 1 1 975
// Filename: textFont.I
// Created by:  drose (08Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextFont::is_valid
//       Access: Published
//  Description: Returns true if the font is valid and ready to use,
//               false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool TextFont::is_valid(void) const;

273 15 get_line_height 4 522 25 TextFont::get_line_height 0 1 2 296
////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
51
inline float TextFont::get_line_height(void) const;

274 15 set_line_height 4 522 25 TextFont::set_line_height 0 1 3 296
////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_line_height
//       Access: Published
//  Description: Changes the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
57
inline void TextFont::set_line_height(float line_height);

275 17 get_space_advance 4 522 27 TextFont::get_space_advance 0 1 4 271
////////////////////////////////////////////////////////////////////
//     Function: TextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
////////////////////////////////////////////////////////////////////
53
inline float TextFont::get_space_advance(void) const;

276 17 set_space_advance 4 522 27 TextFont::set_space_advance 0 1 5 271
////////////////////////////////////////////////////////////////////
//     Function: TextFont::set_space_advance
//       Access: Published
//  Description: Changes the number of units wide a space is.
////////////////////////////////////////////////////////////////////
61
inline void TextFont::set_space_advance(float space_advance);

277 5 write 4 522 15 TextFont::write 0 1 6 223
////////////////////////////////////////////////////////////////////
//     Function: TextFont::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
67
virtual void TextFont::write(ostream &out, int indent_level) const;

278 14 get_class_type 4 522 24 TextFont::get_class_type 0 1 7 0
49
static TypeHandle TextFont::get_class_type(void);

279 8 is_empty 4 525 25 DynamicTextPage::is_empty 0 1 12 298
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextPage::is_empty
//       Access: Published
//  Description: Returns true if the page has no glyphs, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool DynamicTextPage::is_empty(void) const;

280 14 get_class_type 4 525 31 DynamicTextPage::get_class_type 0 1 13 0
56
static TypeHandle DynamicTextPage::get_class_type(void);

281 16 ~DynamicTextPage 4 525 33 DynamicTextPage::~DynamicTextPage 0 0 0
40
DynamicTextPage::~DynamicTextPage(void);

282 18 upcast_to_TextFont 12 527 35 DynamicTextFont::upcast_to_TextFont 0 1 48 39
upcast from DynamicTextFont to TextFont
52
TextFont *DynamicTextFont::upcast_to_TextFont(void);

283 27 downcast_to_DynamicTextFont 12 522 37 TextFont::downcast_to_DynamicTextFont 0 1 49 41
downcast from TextFont to DynamicTextFont
61
DynamicTextFont *TextFont::downcast_to_DynamicTextFont(void);

284 22 upcast_to_FreetypeFont 12 527 39 DynamicTextFont::upcast_to_FreetypeFont 0 1 50 43
upcast from DynamicTextFont to FreetypeFont
60
FreetypeFont *DynamicTextFont::upcast_to_FreetypeFont(void);

285 27 downcast_to_DynamicTextFont 12 528 41 FreetypeFont::downcast_to_DynamicTextFont 0 1 51 45
downcast from FreetypeFont to DynamicTextFont
65
DynamicTextFont *FreetypeFont::downcast_to_DynamicTextFont(void);

286 15 DynamicTextFont 4 527 32 DynamicTextFont::DynamicTextFont 0 3 14 15 16 822
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the name of some font file
//               that FreeType can read, along with face_index,
//               indicating which font within the file to load
//               (usually 0).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Constructor
//       Access: Published
//  Description: This constructor accepts a table of data representing
//               the font file, loaded from some source other than a
//               filename on disk.
////////////////////////////////////////////////////////////////////
86
DynamicTextFont::DynamicTextFont(Filename const &font_filename, int face_index = (0));

287 16 ~DynamicTextFont 4 527 33 DynamicTextFont::~DynamicTextFont 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
virtual DynamicTextFont::~DynamicTextFont(void);

288 8 get_name 4 527 25 DynamicTextFont::get_name 0 1 17 1048
// Filename: dynamicTextFont.I
// Created by:  drose (08Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_name
//       Access: Published
//  Description: Disambiguates the get_name() method between that
//               inherited from TextFont and that inherited from
//               FreetypeFont.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &DynamicTextFont::get_name(void) const;

289 14 set_point_size 4 527 31 DynamicTextFont::set_point_size 0 1 18 591
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_point_size
//       Access: Published
//  Description: Sets the point size of the font.  This controls the
//               apparent size of the font onscreen.  By convention, a
//               10 point font is about 1 screen unit high.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
62
inline bool DynamicTextFont::set_point_size(float point_size);

290 14 get_point_size 4 527 31 DynamicTextFont::get_point_size 0 1 19 266
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_point_size
//       Access: Published
//  Description: Returns the point size of the font.
////////////////////////////////////////////////////////////////////
57
inline float DynamicTextFont::get_point_size(void) const;

291 19 set_pixels_per_unit 4 527 36 DynamicTextFont::set_pixels_per_unit 0 1 20 776
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_pixels_per_unit
//       Access: Published
//  Description: Set the resolution of the texture map, and hence the
//               clarity of the resulting font.  This sets the number
//               of pixels in the texture map that are used for each
//               onscreen unit.
//
//               Setting this number larger results in an easier to
//               read font, but at the cost of more texture memory.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
72
inline bool DynamicTextFont::set_pixels_per_unit(float pixels_per_unit);

292 19 get_pixels_per_unit 4 527 36 DynamicTextFont::get_pixels_per_unit 0 1 21 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_pixels_per_unit
//       Access: Published
//  Description: Returns the resolution of the texture map.  See
//               set_pixels_per_unit().
////////////////////////////////////////////////////////////////////
62
inline float DynamicTextFont::get_pixels_per_unit(void) const;

293 16 set_scale_factor 4 527 33 DynamicTextFont::set_scale_factor 0 1 22 936
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_scale_factor
//       Access: Published
//  Description: Sets the factor by which the font is rendered larger
//               by the FreeType library before being filtered down to
//               its actual size in the texture as specified by
//               set_pixels_per_unit().  This may be set to a number
//               larger than 1.0 to improve the font's antialiasing
//               (since FreeType doesn't really do a swell job of
//               antialiasing by itself).  There is some performance
//               implication for setting this different than 1.0.
//
//               This should only be called before any characters have
//               been requested out of the font, or immediately after
//               calling clear().
////////////////////////////////////////////////////////////////////
66
inline bool DynamicTextFont::set_scale_factor(float scale_factor);

294 16 get_scale_factor 4 527 33 DynamicTextFont::get_scale_factor 0 1 23 313
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_scale_factor
//       Access: Published
//  Description: Returns the antialiasing scale factor.  See
//               set_scale_factor().
////////////////////////////////////////////////////////////////////
59
inline float DynamicTextFont::get_scale_factor(void) const;

295 20 set_native_antialias 4 527 37 DynamicTextFont::set_native_antialias 0 1 24 833
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_native_antialias
//       Access: Published
//  Description: Sets whether the Freetype library's built-in
//               antialias mode is enabled.  There are two unrelated
//               ways to achieve antialiasing: with Freetype's native
//               antialias mode, and with the use of a scale_factor
//               greater than one.  By default, both modes are
//               enabled.
//
//               At low resolutions, some fonts may do better with one
//               mode or the other.  In general, Freetype's native
//               antialiasing will produce less blurry results, but
//               may introduce more artifacts.
////////////////////////////////////////////////////////////////////
73
inline void DynamicTextFont::set_native_antialias(bool native_antialias);

296 20 get_native_antialias 4 527 37 DynamicTextFont::get_native_antialias 0 1 25 345
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_native_antialias
//       Access: Published
//  Description: Returns whether Freetype's built-in antialias mode is
//               enabled.  See set_native_antialias().
////////////////////////////////////////////////////////////////////
62
inline bool DynamicTextFont::get_native_antialias(void) const;

297 19 get_font_pixel_size 4 527 36 DynamicTextFont::get_font_pixel_size 0 1 26 715
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_font_pixel_size
//       Access: Published
//  Description: This is used to report whether the requested pixel
//               size is being only approximated by a fixed-pixel-size
//               font.  This returns 0 in the normal case, in which a
//               scalable font is used, or the fixed-pixel-size font
//               has exactly the requested pixel size.
//
//               If this returns non-zero, it is the pixel size of the
//               font that we are using to approximate our desired
//               size.
////////////////////////////////////////////////////////////////////
60
inline int DynamicTextFont::get_font_pixel_size(void) const;

298 15 get_line_height 4 527 32 DynamicTextFont::get_line_height 0 1 27 303
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.
////////////////////////////////////////////////////////////////////
58
inline float DynamicTextFont::get_line_height(void) const;

299 17 get_space_advance 4 527 34 DynamicTextFont::get_space_advance 0 1 28 278
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_space_advance
//       Access: Published
//  Description: Returns the number of units wide a space is.
////////////////////////////////////////////////////////////////////
60
inline float DynamicTextFont::get_space_advance(void) const;

300 18 set_texture_margin 4 527 35 DynamicTextFont::set_texture_margin 0 1 29 476
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_texture_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is added
//               around the border of each glyph before adding it to
//               the texture map.  This reduces the bleed in from
//               neighboring glyphs in the texture map.
////////////////////////////////////////////////////////////////////
68
inline void DynamicTextFont::set_texture_margin(int texture_margin);

301 18 get_texture_margin 4 527 35 DynamicTextFont::get_texture_margin 0 1 30 400
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_texture_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is added
//               around the border of each glyph in the texture map.
//               See set_texture_margin().
////////////////////////////////////////////////////////////////////
59
inline int DynamicTextFont::get_texture_margin(void) const;

302 15 set_poly_margin 4 527 32 DynamicTextFont::set_poly_margin 0 1 31 794
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_poly_margin
//       Access: Published
//  Description: Sets the number of pixels of padding that is included
//               around each glyph in the generated polygons.  This
//               helps prevent the edges of the glyphs from being cut
//               off at small minifications.  It is not related to the
//               amount of extra pixels reserved in the texture map
//               (but it should be set somewhat smaller than this
//               number, which is controlled by set_texture_margin(),
//               to prevent bleed-in from neighboring letters in the
//               texture).
////////////////////////////////////////////////////////////////////
64
inline void DynamicTextFont::set_poly_margin(float poly_margin);

303 15 get_poly_margin 4 527 32 DynamicTextFont::get_poly_margin 0 1 32 390
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_poly_margin
//       Access: Published
//  Description: Returns the number of pixels of padding that is
//               included around each glyph in the generated polygons.
//               See set_poly_margin().
////////////////////////////////////////////////////////////////////
58
inline float DynamicTextFont::get_poly_margin(void) const;

304 13 set_page_size 4 527 30 DynamicTextFont::set_page_size 0 1 33 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_page_size
//       Access: Published
//  Description: Sets the x, y size of the textures that are created
//               for the DynamicTextFont.
////////////////////////////////////////////////////////////////////
67
inline void DynamicTextFont::set_page_size(int x_size, int y_size);

305 15 get_page_x_size 4 527 32 DynamicTextFont::get_page_x_size 0 1 34 347
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_x_size
//       Access: Published
//  Description: Returns the x size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
////////////////////////////////////////////////////////////////////
56
inline int DynamicTextFont::get_page_x_size(void) const;

306 15 get_page_y_size 4 527 32 DynamicTextFont::get_page_y_size 0 1 35 347
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page_y_size
//       Access: Published
//  Description: Returns the y size of the textures that are created
//               for the DynamicTextFont.  See set_page_size().
////////////////////////////////////////////////////////////////////
56
inline int DynamicTextFont::get_page_y_size(void) const;

307 13 set_minfilter 4 527 30 DynamicTextFont::set_minfilter 0 1 36 324
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_minfilter
//       Access: Published
//  Description: Sets the filter type used when minimizing the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
71
inline void DynamicTextFont::set_minfilter(Texture::FilterType filter);

308 13 get_minfilter 4 527 30 DynamicTextFont::get_minfilter 0 1 37 327
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_minfilter
//       Access: Published
//  Description: Returns the filter type used when minimizing the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
70
inline Texture::FilterType DynamicTextFont::get_minfilter(void) const;

309 13 set_magfilter 4 527 30 DynamicTextFont::set_magfilter 0 1 38 323
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_magfilter
//       Access: Published
//  Description: Sets the filter type used when enlarging the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
71
inline void DynamicTextFont::set_magfilter(Texture::FilterType filter);

310 13 get_magfilter 4 527 30 DynamicTextFont::get_magfilter 0 1 39 326
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_magfilter
//       Access: Published
//  Description: Returns the filter type used when enlarging the
//               textures created for this font.
////////////////////////////////////////////////////////////////////
70
inline Texture::FilterType DynamicTextFont::get_magfilter(void) const;

311 22 set_anisotropic_degree 4 527 39 DynamicTextFont::set_anisotropic_degree 0 1 40 451
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::set_anisotropic_degree
//       Access: Published
//  Description: Enables or disables anisotropic filtering on the
//               textures created for this font.  The default value is
//               usually 1, or off.  See
//               Texture::set_anisotropic_degree().
////////////////////////////////////////////////////////////////////
76
inline void DynamicTextFont::set_anisotropic_degree(int anisotropic_degree);

312 22 get_anisotropic_degree 4 527 39 DynamicTextFont::get_anisotropic_degree 0 1 41 361
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_anisotropic_degree
//       Access: Published
//  Description: Returns the current anisotropic degree for textures
//               created for this font.  See set_anisotropic_degree().
////////////////////////////////////////////////////////////////////
63
inline int DynamicTextFont::get_anisotropic_degree(void) const;

313 13 get_num_pages 4 527 30 DynamicTextFont::get_num_pages 0 1 42 607
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_num_pages
//       Access: Published
//  Description: Returns the number of pages associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
////////////////////////////////////////////////////////////////////
47
int DynamicTextFont::get_num_pages(void) const;

314 8 get_page 4 527 25 DynamicTextFont::get_page 0 1 43 595
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::get_page
//       Access: Published
//  Description: Returns the nth page associated with the font.
//               Initially, the font has zero pages; when the first
//               piece of text is rendered with the font, it will add
//               additional pages as needed.  Each page is a Texture
//               object that contains the images for each of the
//               glyphs currently in use somewhere.
////////////////////////////////////////////////////////////////////
56
DynamicTextPage *DynamicTextFont::get_page(int n) const;

315 15 garbage_collect 4 527 32 DynamicTextFont::garbage_collect 0 1 44 388
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::garbage_collect
//       Access: Published
//  Description: Removes all of the glyphs from the font that are no
//               longer being used by any Geoms.  Returns the number
//               of glyphs removed.
////////////////////////////////////////////////////////////////////
43
int DynamicTextFont::garbage_collect(void);

316 5 clear 4 527 22 DynamicTextFont::clear 0 1 45 699
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::clear
//       Access: Published
//  Description: Drops all the glyphs out of the cache and frees any
//               association with any previously-generated pages.
//
//               Calling this frequently can result in wasted texture
//               memory, as any previously rendered text will still
//               keep a pointer to the old, previously-generated
//               pages.  As long as the previously rendered text
//               remains around, the old pages will also remain
//               around.
////////////////////////////////////////////////////////////////////
34
void DynamicTextFont::clear(void);

317 5 write 4 527 22 DynamicTextFont::write 0 1 46 230
////////////////////////////////////////////////////////////////////
//     Function: DynamicTextFont::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
74
virtual void DynamicTextFont::write(ostream &out, int indent_level) const;

318 14 get_class_type 4 527 31 DynamicTextFont::get_class_type 0 1 47 0
56
static TypeHandle DynamicTextFont::get_class_type(void);

319 8 has_font 4 529 18 FontPool::has_font 0 1 52 1112
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

// Filename: fontPool.I
// Created by:  drose (31Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FontPool::has_font
//       Access: Public, Static
//  Description: Returns true if the font has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
76
static inline bool FontPool::has_font(basic_string< char > const &filename);

320 11 verify_font 4 529 21 FontPool::verify_font 0 1 53 727
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

////////////////////////////////////////////////////////////////////
//     Function: FontPool::verify_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_font() with the same font name will
//               return a valid Font pointer.
////////////////////////////////////////////////////////////////////
79
static inline bool FontPool::verify_font(basic_string< char > const &filename);

321 9 load_font 4 529 19 FontPool::load_font 0 1 54 524
////////////////////////////////////////////////////////////////////
//     Function: FontPool::load_font
//       Access: Public, Static
//  Description: Loads the given filename up into a font, if it has
//               not already been loaded, and returns the new font.
//               If a font with the same filename was previously
//               loaded, returns that one instead.  If the font
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
82
static inline TextFont *FontPool::load_font(basic_string< char > const &filename);

322 8 add_font 4 529 18 FontPool::add_font 0 1 55 422
////////////////////////////////////////////////////////////////////
//     Function: FontPool::add_font
//       Access: Public, Static
//  Description: Adds the indicated already-loaded font to the
//               pool.  The font will always replace any
//               previously-loaded font in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
92
static inline void FontPool::add_font(basic_string< char > const &filename, TextFont *font);

323 12 release_font 4 529 22 FontPool::release_font 0 1 56 537
////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_font
//       Access: Public, Static
//  Description: Removes the indicated font from the pool,
//               indicating it will never be loaded again; the font
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every font
//               every loaded, and fonts will never be freed.
////////////////////////////////////////////////////////////////////
80
static inline void FontPool::release_font(basic_string< char > const &filename);

324 17 release_all_fonts 4 529 27 FontPool::release_all_fonts 0 1 57 321
////////////////////////////////////////////////////////////////////
//     Function: FontPool::release_all_fonts
//       Access: Public, Static
//  Description: Releases all fonts in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
53
static inline void FontPool::release_all_fonts(void);

325 15 garbage_collect 4 529 25 FontPool::garbage_collect 0 1 58 465
////////////////////////////////////////////////////////////////////
//     Function: FontPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those fonts in the pool that have a
//               reference count of exactly 1; i.e. only those
//               fonts that are not being used outside of the pool.
//               Returns the number of fonts released.
////////////////////////////////////////////////////////////////////
50
static inline int FontPool::garbage_collect(void);

326 13 list_contents 4 529 23 FontPool::list_contents 0 1 59 312
////////////////////////////////////////////////////////////////////
//     Function: FontPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
57
static inline void FontPool::list_contents(ostream &out);

327 5 write 4 529 15 FontPool::write 0 1 60 307
////////////////////////////////////////////////////////////////////
//     Function: FontPool::write
//       Access: Published, Static
//  Description: Lists the contents of the font pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
42
static void FontPool::write(ostream &out);

328 9 ~FontPool 4 529 19 FontPool::~FontPool 0 0 0
26
FontPool::~FontPool(void);

329 14 get_class_type 4 530 29 GeomTextGlyph::get_class_type 0 1 61 0
54
static TypeHandle GeomTextGlyph::get_class_type(void);

330 14 StaticTextFont 4 532 30 StaticTextFont::StaticTextFont 0 1 62 406
////////////////////////////////////////////////////////////////////
//     Function: StaticTextFont::Constructor
//       Access: Published
//  Description: The constructor expects the root node to a model
//               generated via egg-mkfont, which consists of a set of
//               models, one per each character in the font.
////////////////////////////////////////////////////////////////////
52
StaticTextFont::StaticTextFont(PandaNode *font_def);

331 14 get_class_type 4 532 30 StaticTextFont::get_class_type 0 1 63 0
55
static TypeHandle StaticTextFont::get_class_type(void);

332 15 ~StaticTextFont 4 532 31 StaticTextFont::~StaticTextFont 0 0 0
38
StaticTextFont::~StaticTextFont(void);

333 14 TextProperties 4 533 30 TextProperties::TextProperties 0 2 64 65 459
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
TextProperties::TextProperties(void);

334 10 operator = 4 533 26 TextProperties::operator = 0 1 66 239
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
void TextProperties::operator =(TextProperties const &copy);

335 5 clear 4 533 21 TextProperties::clear 0 1 67 377
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the TextProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
33
void TextProperties::clear(void);

336 16 is_any_specified 4 533 32 TextProperties::is_any_specified 0 1 68 995
// Filename: textProperties.I
// Created by:  drose (06Apr04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool TextProperties::is_any_specified(void) const;

337 16 set_default_font 4 533 32 TextProperties::set_default_font 0 1 69 382
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
////////////////////////////////////////////////////////////////////
64
static inline void TextProperties::set_default_font(TextFont *);

338 16 get_default_font 4 533 32 TextProperties::get_default_font 0 1 70 382
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_default_font
//       Access: Published, Static
//  Description: Specifies the default font to be used for any
//               TextNode whose font is uninitialized or NULL.  See
//               set_font().
////////////////////////////////////////////////////////////////////
63
static inline TextFont *TextProperties::get_default_font(void);

339 8 set_font 4 533 24 TextProperties::set_font 0 1 71 404
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
////////////////////////////////////////////////////////////////////
53
inline void TextProperties::set_font(TextFont *font);

340 10 clear_font 4 533 26 TextProperties::clear_font 0 1 72 264
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_font
//       Access: Published
//  Description: Restores the default font to the text.
////////////////////////////////////////////////////////////////////
45
inline void TextProperties::clear_font(void);

341 8 has_font 4 533 24 TextProperties::has_font 0 1 73 223
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_font
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool TextProperties::has_font(void) const;

342 8 get_font 4 533 24 TextProperties::get_font 0 1 74 337
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_font
//       Access: Published
//  Description: Returns the font currently in use, if any.  If no
//               font is in use, this returns the default font.
////////////////////////////////////////////////////////////////////
54
inline TextFont *TextProperties::get_font(void) const;

343 14 set_small_caps 4 533 30 TextProperties::set_small_caps 0 1 75 1137
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
////////////////////////////////////////////////////////////////////
60
inline void TextProperties::set_small_caps(bool small_caps);

344 16 clear_small_caps 4 533 32 TextProperties::clear_small_caps 0 1 76 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_small_caps(void);

345 14 has_small_caps 4 533 30 TextProperties::has_small_caps 0 1 77 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_small_caps(void) const;

346 14 get_small_caps 4 533 30 TextProperties::get_small_caps 0 1 78 281
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps
//       Access: Published
//  Description: Returns the small_caps flag.  See set_small_caps().
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::get_small_caps(void) const;

347 20 set_small_caps_scale 4 533 36 TextProperties::set_small_caps_scale 0 1 79 481
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
////////////////////////////////////////////////////////////////////
73
inline void TextProperties::set_small_caps_scale(float small_caps_scale);

348 22 clear_small_caps_scale 4 533 38 TextProperties::clear_small_caps_scale 0 1 80 237
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_small_caps_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void TextProperties::clear_small_caps_scale(void);

349 20 has_small_caps_scale 4 533 36 TextProperties::has_small_caps_scale 0 1 81 235
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_small_caps_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool TextProperties::has_small_caps_scale(void) const;

350 20 get_small_caps_scale 4 533 36 TextProperties::get_small_caps_scale 0 1 82 463
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_small_caps_scale
//       Access: Published
//  Description: Returns the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps() and
//               set_small_caps_scale().
////////////////////////////////////////////////////////////////////
62
inline float TextProperties::get_small_caps_scale(void) const;

351 9 set_slant 4 533 25 TextProperties::set_slant 0 1 83 301
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_slant
//       Access: Published
//  Description: Specifies the factor by which the text slants to the
//               right.
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::set_slant(float slant);

352 11 clear_slant 4 533 27 TextProperties::clear_slant 0 1 84 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_slant
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextProperties::clear_slant(void);

353 9 has_slant 4 533 25 TextProperties::has_slant 0 1 85 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_slant
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextProperties::has_slant(void) const;

354 9 get_slant 4 533 25 TextProperties::get_slant 0 1 86 314
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_slant
//       Access: Published
//  Description: Returns the factor by which the text is specified to
//               slant to the right.
////////////////////////////////////////////////////////////////////
51
inline float TextProperties::get_slant(void) const;

355 9 set_align 4 533 25 TextProperties::set_align 0 1 87 297
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_align
//       Access: Published
//  Description: Specifies the alignment of the text within its
//               margins.
////////////////////////////////////////////////////////////////////
76
inline void TextProperties::set_align(TextProperties::Alignment align_type);

356 11 clear_align 4 533 27 TextProperties::clear_align 0 1 88 270
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_align
//       Access: Published
//  Description: Restores the default alignment of the text.
////////////////////////////////////////////////////////////////////
46
inline void TextProperties::clear_align(void);

357 9 has_align 4 533 25 TextProperties::has_align 0 1 89 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextProperties::has_align(void) const;

358 9 get_align 4 533 25 TextProperties::get_align 0 1 90 224
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline TextProperties::Alignment TextProperties::get_align(void) const;

359 10 set_indent 4 533 26 TextProperties::set_indent 0 1 91 395
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
////////////////////////////////////////////////////////////////////
53
inline void TextProperties::set_indent(float indent);

360 12 clear_indent 4 533 28 TextProperties::clear_indent 0 1 92 318
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_indent
//       Access: Published
//  Description: Removes the indent setting from the text.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
47
inline void TextProperties::clear_indent(void);

361 10 has_indent 4 533 26 TextProperties::has_indent 0 1 93 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_indent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextProperties::has_indent(void) const;

362 10 get_indent 4 533 26 TextProperties::get_indent 0 1 94 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_indent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline float TextProperties::get_indent(void) const;

363 12 set_wordwrap 4 533 28 TextProperties::set_wordwrap 0 1 95 400
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
////////////////////////////////////////////////////////////////////
57
inline void TextProperties::set_wordwrap(float wordwrap);

364 14 clear_wordwrap 4 533 30 TextProperties::clear_wordwrap 0 1 96 322
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the text.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
49
inline void TextProperties::clear_wordwrap(void);

365 12 has_wordwrap 4 533 28 TextProperties::has_wordwrap 0 1 97 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_wordwrap
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool TextProperties::has_wordwrap(void) const;

366 12 get_wordwrap 4 533 28 TextProperties::get_wordwrap 0 1 98 227
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_wordwrap
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline float TextProperties::get_wordwrap(void) const;

367 32 set_preserve_trailing_whitespace 4 533 48 TextProperties::set_preserve_trailing_whitespace 0 1 99 671
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_preserve_trailing_whitespace
//       Access: Published
//  Description: Sets the preserve_trailing_whitespace flag.  When
//               this is set, trailing whitespace at the end of the
//               line is not stripped when the text is wordwrapped (it
//               is stripped by default).  Since the trailing
//               whitespace is invisible, this is important primarily
//               for determining the proper width of a frame or card
//               behind the text.
////////////////////////////////////////////////////////////////////
96
inline void TextProperties::set_preserve_trailing_whitespace(bool preserve_trailing_whitespace);

368 34 clear_preserve_trailing_whitespace 4 533 50 TextProperties::clear_preserve_trailing_whitespace 0 1 100 249
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_preserve_trailing_whitespace
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::clear_preserve_trailing_whitespace(void);

369 32 has_preserve_trailing_whitespace 4 533 48 TextProperties::has_preserve_trailing_whitespace 0 1 101 247
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_preserve_trailing_whitespace
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool TextProperties::has_preserve_trailing_whitespace(void) const;

370 32 get_preserve_trailing_whitespace 4 533 48 TextProperties::get_preserve_trailing_whitespace 0 1 102 352
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_preserve_trailing_whitespace
//       Access: Published
//  Description: Returns the preserve_trailing_whitespace flag.  See
//               set_preserve_trailing_whitespace().
////////////////////////////////////////////////////////////////////
73
inline bool TextProperties::get_preserve_trailing_whitespace(void) const;

371 14 set_text_color 4 533 30 TextProperties::set_text_color 0 2 103 104 460
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void TextProperties::set_text_color(float r, float g, float b, float a);

372 16 clear_text_color 4 533 32 TextProperties::clear_text_color 0 1 105 352
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_text_color(void);

373 14 has_text_color 4 533 30 TextProperties::has_text_color 0 1 106 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_text_color(void) const;

374 14 get_text_color 4 533 30 TextProperties::get_text_color 0 1 107 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f TextProperties::get_text_color(void) const;

375 16 set_shadow_color 4 533 32 TextProperties::set_shadow_color 0 2 108 109 464
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
81
inline void TextProperties::set_shadow_color(float r, float g, float b, float a);

376 18 clear_shadow_color 4 533 34 TextProperties::clear_shadow_color 0 1 110 273
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow_color
//       Access: Published
//  Description: Removes the shadow color specification.
////////////////////////////////////////////////////////////////////
53
inline void TextProperties::clear_shadow_color(void);

377 16 has_shadow_color 4 533 32 TextProperties::has_shadow_color 0 1 111 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline bool TextProperties::has_shadow_color(void) const;

378 16 get_shadow_color 4 533 32 TextProperties::get_shadow_color 0 1 112 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LVecBase4f TextProperties::get_shadow_color(void) const;

379 10 set_shadow 4 533 26 TextProperties::set_shadow 0 2 113 114 796
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::set_shadow(float xoffset, float yoffset);

380 12 clear_shadow 4 533 28 TextProperties::clear_shadow 0 1 115 303
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
47
inline void TextProperties::clear_shadow(void);

381 10 has_shadow 4 533 26 TextProperties::has_shadow 0 1 116 225
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_shadow
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextProperties::has_shadow(void) const;

382 10 get_shadow 4 533 26 TextProperties::get_shadow 0 1 117 371
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_shadow
//       Access: Published
//  Description: Returns the offset of the shadow as set by
//               set_shadow().  It is an error to call this if
//               has_shadow() is false.
////////////////////////////////////////////////////////////////////
56
inline LVector2f TextProperties::get_shadow(void) const;

383 7 set_bin 4 533 23 TextProperties::set_bin 0 1 118 649
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_bin
//       Access: Published
//  Description: Names the CullBin that the text geometry should be
//               assigned to.  If this is set, then a CullBinAttrib
//               will be created to explicitly place each component in
//               the named bin.
//
//               The draw_order value will also be passed to each
//               CullBinAttrib as appropriate; this is particularly
//               useful if this names a CullBinFixed, e.g. "fixed".
////////////////////////////////////////////////////////////////////
69
inline void TextProperties::set_bin(basic_string< char > const &bin);

384 9 clear_bin 4 533 25 TextProperties::clear_bin 0 1 119 420
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
////////////////////////////////////////////////////////////////////
44
inline void TextProperties::clear_bin(void);

385 7 has_bin 4 533 23 TextProperties::has_bin 0 1 120 324
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_bin
//       Access: Published
//  Description: Returns true if an explicit drawing bin has been
//               set via set_bin(), false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool TextProperties::has_bin(void) const;

386 7 get_bin 4 533 23 TextProperties::get_bin 0 1 121 323
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_bin
//       Access: Published
//  Description: Returns the drawing bin set with set_bin(), or empty
//               string if no bin has been set.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > const &TextProperties::get_bin(void) const;

387 14 set_draw_order 4 533 30 TextProperties::set_draw_order 0 1 122 771
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextNode.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the nodes
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
////////////////////////////////////////////////////////////////////
58
inline int TextProperties::set_draw_order(int draw_order);

388 16 clear_draw_order 4 533 32 TextProperties::clear_draw_order 0 1 123 232
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_draw_order
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TextProperties::clear_draw_order(void);

389 14 has_draw_order 4 533 30 TextProperties::has_draw_order 0 1 124 229
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_draw_order
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool TextProperties::has_draw_order(void) const;

390 14 get_draw_order 4 533 30 TextProperties::get_draw_order 0 1 125 282
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_draw_order
//       Access: Published
//  Description: Returns the drawing order set with set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline int TextProperties::get_draw_order(void) const;

391 13 set_tab_width 4 533 29 TextProperties::set_tab_width 0 1 126 409
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
////////////////////////////////////////////////////////////////////
59
inline void TextProperties::set_tab_width(float tab_width);

392 15 clear_tab_width 4 533 31 TextProperties::clear_tab_width 0 1 127 231
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_tab_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
inline void TextProperties::clear_tab_width(void);

393 13 has_tab_width 4 533 29 TextProperties::has_tab_width 0 1 128 228
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_tab_width
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool TextProperties::has_tab_width(void) const;

394 13 get_tab_width 4 533 29 TextProperties::get_tab_width 0 1 129 271
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_tab_width
//       Access: Published
//  Description: Returns the width set via set_tab_width().
////////////////////////////////////////////////////////////////////
55
inline float TextProperties::get_tab_width(void) const;

395 15 set_glyph_scale 4 533 31 TextProperties::set_glyph_scale 0 1 130 473
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_shift()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
63
inline void TextProperties::set_glyph_scale(float glyph_scale);

396 17 clear_glyph_scale 4 533 33 TextProperties::clear_glyph_scale 0 1 131 233
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline void TextProperties::clear_glyph_scale(void);

397 15 has_glyph_scale 4 533 31 TextProperties::has_glyph_scale 0 1 132 230
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_scale
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool TextProperties::has_glyph_scale(void) const;

398 15 get_glyph_scale 4 533 31 TextProperties::get_glyph_scale 0 1 133 322
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_scale
//       Access: Published
//  Description: Returns the scale factor of each letter as specified
//               by set_glyph_scale().
////////////////////////////////////////////////////////////////////
57
inline float TextProperties::get_glyph_scale(void) const;

399 15 set_glyph_shift 4 533 31 TextProperties::set_glyph_shift 0 1 134 471
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
63
inline void TextProperties::set_glyph_shift(float glyph_shift);

400 17 clear_glyph_shift 4 533 33 TextProperties::clear_glyph_shift 0 1 135 233
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::clear_glyph_shift
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline void TextProperties::clear_glyph_shift(void);

401 15 has_glyph_shift 4 533 31 TextProperties::has_glyph_shift 0 1 136 230
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::has_glyph_shift
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool TextProperties::has_glyph_shift(void) const;

402 15 get_glyph_shift 4 533 31 TextProperties::get_glyph_shift 0 1 137 324
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::get_glyph_shift
//       Access: Published
//  Description: Returns the vertical shift of each letter as
//               specified by set_glyph_shift().
////////////////////////////////////////////////////////////////////
57
inline float TextProperties::get_glyph_shift(void) const;

403 14 add_properties 4 533 30 TextProperties::add_properties 0 1 138 374
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
65
void TextProperties::add_properties(TextProperties const &other);

404 5 write 4 533 21 TextProperties::write 0 2 139 140 220
////////////////////////////////////////////////////////////////////
//     Function: TextProperties::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
void TextProperties::write(ostream &out, int indent_level = (0)) const;

405 14 get_class_type 4 533 30 TextProperties::get_class_type 0 1 141 0
55
static TypeHandle TextProperties::get_class_type(void);

406 15 ~TextProperties 4 533 31 TextProperties::~TextProperties 0 0 0
38
TextProperties::~TextProperties(void);

407 19 upcast_to_PandaNode 12 535 29 TextNode::upcast_to_PandaNode 0 1 254 33
upcast from TextNode to PandaNode
47
PandaNode *TextNode::upcast_to_PandaNode(void);

408 20 downcast_to_TextNode 12 536 31 PandaNode::downcast_to_TextNode 0 1 255 35
downcast from PandaNode to TextNode
48
TextNode *PandaNode::downcast_to_TextNode(void);

409 21 upcast_to_TextEncoder 12 535 31 TextNode::upcast_to_TextEncoder 0 1 256 35
upcast from TextNode to TextEncoder
51
TextEncoder *TextNode::upcast_to_TextEncoder(void);

410 20 downcast_to_TextNode 12 537 33 TextEncoder::downcast_to_TextNode 0 1 257 37
downcast from TextEncoder to TextNode
50
TextNode *TextEncoder::downcast_to_TextNode(void);

411 24 upcast_to_TextProperties 12 535 34 TextNode::upcast_to_TextProperties 0 1 258 38
upcast from TextNode to TextProperties
57
TextProperties *TextNode::upcast_to_TextProperties(void);

412 20 downcast_to_TextNode 12 533 36 TextProperties::downcast_to_TextNode 0 1 259 40
downcast from TextProperties to TextNode
53
TextNode *TextProperties::downcast_to_TextNode(void);

413 8 TextNode 4 535 18 TextNode::TextNode 0 2 142 143 591
////////////////////////////////////////////////////////////////////
//     Function: TextNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::Copy Constructor
//       Access: Published
//  Description: It's sort of a copy constructor: it copies the
//               indicated TextProperties, without copying a complete
//               TextNode.
////////////////////////////////////////////////////////////////////
53
TextNode::TextNode(basic_string< char > const &name);

414 9 ~TextNode 4 535 19 TextNode::~TextNode 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: TextNode::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual TextNode::~TextNode(void);

415 15 get_line_height 4 535 25 TextNode::get_line_height 0 1 144 1182
// Filename: textNode.I
// Created by:  drose (13Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_line_height
//       Access: Published
//  Description: Returns the number of units high each line of text
//               is.  This is based on the font.  Note that it is
//               possible for the text to include nested font change
//               commands, in which case the value of this method is
//               questionable.
////////////////////////////////////////////////////////////////////
51
inline float TextNode::get_line_height(void) const;

416 12 set_max_rows 4 535 22 TextNode::set_max_rows 0 1 145 439
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_max_rows
//       Access: Published
//  Description: Sets the maximum number of rows that may be formatted
//               by the TextNode.  If more text than this is
//               attempted, it will be truncated and has_overflow()
//               will return true.
////////////////////////////////////////////////////////////////////
49
inline void TextNode::set_max_rows(int max_rows);

417 14 clear_max_rows 4 535 24 TextNode::clear_max_rows 0 1 146 323
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_max_rows
//       Access: Published
//  Description: Resets the TextNode's default behavior of not
//               limiting the number of rows of text.
////////////////////////////////////////////////////////////////////
43
inline void TextNode::clear_max_rows(void);

418 12 has_max_rows 4 535 22 TextNode::has_max_rows 0 1 147 342
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_max_rows
//       Access: Published
//  Description: Returns true if a limit on the height of the TextNode
//               has been set via set_max_rows(), false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool TextNode::has_max_rows(void) const;

419 12 get_max_rows 4 535 22 TextNode::get_max_rows 0 1 148 315
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_max_rows
//       Access: Published
//  Description: Returns the limit on the height of the TextNode
//               specified by set_max_rows().
////////////////////////////////////////////////////////////////////
46
inline int TextNode::get_max_rows(void) const;

420 12 has_overflow 4 535 22 TextNode::has_overflow 0 1 149 364
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_overflow
//       Access: Published
//  Description: Returns true if the last text set on the text node
//               exceeded the max_rows constraint, or false if it all
//               fit.
////////////////////////////////////////////////////////////////////
47
inline bool TextNode::has_overflow(void) const;

421 15 set_frame_color 4 535 25 TextNode::set_frame_color 0 2 150 151 450
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline void TextNode::set_frame_color(float r, float g, float b, float a);

422 15 get_frame_color 4 535 25 TextNode::get_frame_color 0 1 152 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LVecBase4f TextNode::get_frame_color(void) const;

423 15 set_card_border 4 535 25 TextNode::set_card_border 0 1 153 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void TextNode::set_card_border(float size, float uv_portion);

424 17 clear_card_border 4 535 27 TextNode::clear_card_border 0 1 154 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_card_border(void);

425 20 get_card_border_size 4 535 30 TextNode::get_card_border_size 0 1 155 229
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline float TextNode::get_card_border_size(void) const;

426 26 get_card_border_uv_portion 4 535 36 TextNode::get_card_border_uv_portion 0 1 156 235
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_border_uv_portion
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline float TextNode::get_card_border_uv_portion(void) const;

427 15 has_card_border 4 535 25 TextNode::has_card_border 0 1 157 224
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_border
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool TextNode::has_card_border(void) const;

428 14 set_card_color 4 535 24 TextNode::set_card_color 0 2 158 159 448
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void TextNode::set_card_color(float r, float g, float b, float a);

429 14 get_card_color 4 535 24 TextNode::get_card_color 0 1 160 223
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f TextNode::get_card_color(void) const;

430 16 set_card_texture 4 535 26 TextNode::set_card_texture 0 1 161 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void TextNode::set_card_texture(Texture *card_texture);

431 18 clear_card_texture 4 535 28 TextNode::clear_card_texture 0 1 162 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void TextNode::clear_card_texture(void);

432 16 has_card_texture 4 535 26 TextNode::has_card_texture 0 1 163 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool TextNode::has_card_texture(void) const;

433 16 get_card_texture 4 535 26 TextNode::get_card_texture 0 1 164 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_texture
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline Texture *TextNode::get_card_texture(void) const;

434 19 set_frame_as_margin 4 535 29 TextNode::set_frame_as_margin 0 1 165 526
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_as_margin
//       Access: Published
//  Description: Specifies that a border will be drawn around the text
//               when it is next created.  The parameters are the
//               amount of additional padding to insert between the
//               frame and the text in each dimension, and all should
//               generally be positive.
////////////////////////////////////////////////////////////////////
92
inline void TextNode::set_frame_as_margin(float left, float right, float bottom, float top);

435 16 set_frame_actual 4 535 26 TextNode::set_frame_actual 0 1 166 599
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_actual
//       Access: Published
//  Description: Similar to set_frame_as_margin, except the frame is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
////////////////////////////////////////////////////////////////////
89
inline void TextNode::set_frame_actual(float left, float right, float bottom, float top);

436 11 clear_frame 4 535 21 TextNode::clear_frame 0 1 167 296
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_frame
//       Access: Published
//  Description: Specifies that a border will not be drawn around the
//               text.
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_frame(void);

437 9 has_frame 4 535 19 TextNode::has_frame 0 1 168 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool TextNode::has_frame(void) const;

438 18 is_frame_as_margin 4 535 28 TextNode::is_frame_as_margin 0 1 169 675
////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_frame_as_margin
//       Access: Published
//  Description: If this is true, the frame was set via a call to
//               set_frame_as_margin(), and the dimension of the frame
//               as returned by get_frame_as_set() represent a margin
//               all around the text.  If false, then the frame was
//               set via a call to set_frame_actual(), and the
//               dimensions of the frame as returned by
//               get_frame_as_set() are relative to the text's origin.
////////////////////////////////////////////////////////////////////
53
inline bool TextNode::is_frame_as_margin(void) const;

439 16 get_frame_as_set 4 535 26 TextNode::get_frame_as_set 0 1 170 529
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_as_set
//       Access: Published
//  Description: Returns the dimensions of the frame as set by
//               set_frame_as_margin() or set_frame_actual().  Use
//               is_frame_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_frame() is false.
////////////////////////////////////////////////////////////////////
57
inline LVecBase4f TextNode::get_frame_as_set(void) const;

440 16 get_frame_actual 4 535 26 TextNode::get_frame_actual 0 1 171 767
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_actual
//       Access: Published
//  Description: Returns the actual dimensions of the frame around the
//               text.  If the frame was set via set_frame_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the frame was set via
//               set_frame_actual(), this returns the values
//               actually set.
//
//               If the text has no frame at all, this returns the
//               dimensions of the text itself, as if the frame were
//               set with a margin of 0, 0, 0, 0.
////////////////////////////////////////////////////////////////////
57
inline LVecBase4f TextNode::get_frame_actual(void) const;

441 20 set_frame_line_width 4 535 30 TextNode::set_frame_line_width 0 1 172 320
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_line_width
//       Access: Published
//  Description: Specifies the thickness of the lines that will be
//               used to draw the frame.
////////////////////////////////////////////////////////////////////
61
inline void TextNode::set_frame_line_width(float line_width);

442 20 get_frame_line_width 4 535 30 TextNode::get_frame_line_width 0 1 173 318
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_line_width
//       Access: Published
//  Description: Returns the thickness of the lines that will be
//               used to draw the frame.
////////////////////////////////////////////////////////////////////
56
inline float TextNode::get_frame_line_width(void) const;

443 17 set_frame_corners 4 535 27 TextNode::set_frame_corners 0 1 174 470
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_frame_corners
//       Access: Published
//  Description: Enables or disables the drawing of corners for the
//               frame.  These are extra points drawn at each of the
//               four corners, to soften the ugly edges generated when
//               the line width is greater than one.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_frame_corners(bool corners);

444 17 get_frame_corners 4 535 27 TextNode::get_frame_corners 0 1 175 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_frame_corners
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool TextNode::get_frame_corners(void) const;

445 18 set_card_as_margin 4 535 28 TextNode::set_card_as_margin 0 1 176 587
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_as_margin
//       Access: Published
//  Description: Specifies that a (possibly opaque or semitransparent)
//               card will be held behind the text when it is next
//               created.  Like set_frame_as_margin, the parameters are
//               the amount of additional padding to insert around the
//               text in each dimension, and all should generally be
//               positive.
////////////////////////////////////////////////////////////////////
91
inline void TextNode::set_card_as_margin(float left, float right, float bottom, float top);

446 15 set_card_actual 4 535 25 TextNode::set_card_actual 0 1 177 596
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_actual
//       Access: Published
//  Description: Similar to set_card_as_margin, except the card is
//               specified in actual coordinate units (relative to
//               the text's origin), irrespective of the size of the
//               text.  The left and bottom coordinates should
//               generally be negative, while the right and top
//               coordinates should generally be positive.
////////////////////////////////////////////////////////////////////
88
inline void TextNode::set_card_actual(float left, float right, float bottom, float top);

447 14 set_card_decal 4 535 24 TextNode::set_card_decal 0 1 178 455
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_card_decal
//       Access: Published
//  Description: Sets the card_decal flag.  When this is true, the
//               text is decalled onto the card, which is necessary if
//               the TextNode is to be rendered in the 3-d world
//               without putting it in a bin.
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_card_decal(bool card_decal);

448 10 clear_card 4 535 20 TextNode::clear_card 0 1 179 293
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_card
//       Access: Published
//  Description: Specifies that a card will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_card(void);

449 8 has_card 4 535 18 TextNode::has_card 0 1 180 217
////////////////////////////////////////////////////////////////////
//     Function: TextNode::has_card
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool TextNode::has_card(void) const;

450 14 get_card_decal 4 535 24 TextNode::get_card_decal 0 1 181 275
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_decal
//       Access: Published
//  Description: Returns the card_decal flag.  See set_card_decal().
////////////////////////////////////////////////////////////////////
49
inline bool TextNode::get_card_decal(void) const;

451 17 is_card_as_margin 4 535 27 TextNode::is_card_as_margin 0 1 182 666
////////////////////////////////////////////////////////////////////
//     Function: TextNode::is_card_as_margin
//       Access: Published
//  Description: If this is true, the card was set via a call to
//               set_card_as_margin(), and the dimension of the card
//               as returned by get_card_as_set() represent a margin
//               all around the text.  If false, then the card was
//               set via a call to set_card_actual(), and the
//               dimensions of the card as returned by
//               get_card_as_set() are relative to the text's origin.
////////////////////////////////////////////////////////////////////
52
inline bool TextNode::is_card_as_margin(void) const;

452 15 get_card_as_set 4 535 25 TextNode::get_card_as_set 0 1 183 523
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_as_set
//       Access: Published
//  Description: Returns the dimensions of the card as set by
//               set_card_as_margin() or set_card_actual().  Use
//               is_card_actual() to determine how to interpret the
//               values returned by this function.  It is an error to
//               call this if has_card() is false.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4f TextNode::get_card_as_set(void) const;

453 15 get_card_actual 4 535 25 TextNode::get_card_actual 0 1 184 759
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_actual
//       Access: Published
//  Description: Returns the actual dimensions of the card around the
//               text.  If the card was set via set_card_as_margin(),
//               the result returned by this function reflects the
//               size of the current text; if the card was set via
//               set_card_actual(), this returns the values
//               actually set.
//
//               If the text has no card at all, this returns the
//               dimensions of the text itself, as if the card were
//               set with a margin of 0, 0, 0, 0.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4f TextNode::get_card_actual(void) const;

454 20 get_card_transformed 4 535 30 TextNode::get_card_transformed 0 1 185 529
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_card_transformed
//       Access: Published
//  Description: Returns the actual card dimensions, transformed by
//               the matrix set by set_transform().  This returns the
//               card dimensions in actual coordinates as seen by the
//               rest of the world.  Also see get_upper_left_3d() and
//               get_lower_right_3d().
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f TextNode::get_card_transformed(void) const;

455 13 set_transform 4 535 23 TextNode::set_transform 0 1 186 314
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_transform
//       Access: Published
//  Description: Sets an additional transform that is applied to the
//               entire text paragraph.
////////////////////////////////////////////////////////////////////
64
inline void TextNode::set_transform(LMatrix4f const &transform);

456 13 get_transform 4 535 23 TextNode::get_transform 0 1 187 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LMatrix4f TextNode::get_transform(void) const;

457 21 set_coordinate_system 4 535 31 TextNode::set_coordinate_system 0 1 188 316
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system in which the text
//               will be generated.
////////////////////////////////////////////////////////////////////
65
inline void TextNode::set_coordinate_system(CoordinateSystem cs);

458 21 get_coordinate_system 4 535 31 TextNode::get_coordinate_system 0 1 189 230
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_coordinate_system
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline CoordinateSystem TextNode::get_coordinate_system(void) const;

459 14 set_usage_hint 4 535 24 TextNode::set_usage_hint 0 1 190 567
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_usage_hint
//       Access: Published
//  Description: Specifies the UsageHint that will be applied to
//               generated geometry.  The default is UH_static, which
//               is probably the right setting, but if you know the
//               TextNode's geometry will have a short lifespan, it
//               may be better to set it to UH_stream.  See
//               geomEnums.h.
////////////////////////////////////////////////////////////////////
70
inline void TextNode::set_usage_hint(GeomEnums::UsageHint usage_hint);

460 14 get_usage_hint 4 535 24 TextNode::get_usage_hint 0 1 191 329
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_usage_hint
//       Access: Published
//  Description: Returns the UsageHint that will be applied to
//               generated geometry.  See set_usage_hint().
////////////////////////////////////////////////////////////////////
65
inline GeomEnums::UsageHint TextNode::get_usage_hint(void) const;

461 8 set_font 4 535 18 TextNode::set_font 0 1 192 544
// These methods are inherited from TextProperties, but we override
// here so we can flag the TextNode as dirty when they have been
// changed.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_font
//       Access: Published
//  Description: Sets the font that will be used when making text.  If
//               this is set to NULL, the default font will be used,
//               which can be set via set_default_font().
////////////////////////////////////////////////////////////////////
47
inline void TextNode::set_font(TextFont *font);

462 10 clear_font 4 535 20 TextNode::clear_font 0 1 193 256
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_font
//       Access: Published
//  Description: Resets the font to the default font.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_font(void);

463 14 set_small_caps 4 535 24 TextNode::set_small_caps 0 1 194 1131
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps
//       Access: Published
//  Description: Sets the small_caps flag.  When this is set,
//               lowercase letters are generated as scaled-down
//               versions of their uppercase equivalents.  This is
//               particularly useful to set for fonts that do not have
//               lowercase letters.
//
//               It is also a good idea to set this for a (dynamic)
//               font that has already implemented lowercase letters
//               as scaled-down versions of their uppercase
//               equivalents, since without this flag the texture
//               memory may needlessly duplicate equivalent glyphs for
//               upper and lowercase letters.  Setting this flag
//               causes the texture memory to share the mixed-case
//               letters.
//
//               The amount by which the lowercase letters are scaled
//               is specified by set_small_caps_scale().
////////////////////////////////////////////////////////////////////
54
inline void TextNode::set_small_caps(bool small_caps);

464 16 clear_small_caps 4 535 26 TextNode::clear_small_caps 0 1 195 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_small_caps(void);

465 20 set_small_caps_scale 4 535 30 TextNode::set_small_caps_scale 0 1 196 475
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_small_caps_scale
//       Access: Published
//  Description: Sets the scale factor applied to lowercase letters
//               from their uppercase equivalents, when the small_caps
//               flag is in effect.  See set_small_caps().  Normally,
//               this will be a number less than one.
////////////////////////////////////////////////////////////////////
67
inline void TextNode::set_small_caps_scale(float small_caps_scale);

466 22 clear_small_caps_scale 4 535 32 TextNode::clear_small_caps_scale 0 1 197 232
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_small_caps_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TextNode::clear_small_caps_scale(void);

467 9 set_slant 4 535 19 TextNode::set_slant 0 1 198 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_slant
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void TextNode::set_slant(float slant);

468 11 clear_slant 4 535 21 TextNode::clear_slant 0 1 199 221
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_slant
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_slant(void);

469 9 set_align 4 535 19 TextNode::set_align 0 1 200 218
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_align
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void TextNode::set_align(TextProperties::Alignment align_type);

470 11 clear_align 4 535 21 TextNode::clear_align 0 1 201 221
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_align
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
40
inline void TextNode::clear_align(void);

471 10 set_indent 4 535 20 TextNode::set_indent 0 1 202 389
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_indent
//       Access: Published
//  Description: Specifies the amount of extra space that is inserted
//               before the first character of each line.  This can be
//               thought of as a left margin.
////////////////////////////////////////////////////////////////////
47
inline void TextNode::set_indent(float indent);

472 12 clear_indent 4 535 22 TextNode::clear_indent 0 1 203 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_indent
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
inline void TextNode::clear_indent(void);

473 12 set_wordwrap 4 535 22 TextNode::set_wordwrap 0 1 204 394
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wordwrap
//       Access: Published
//  Description: Sets the text up to automatically wordwrap when it
//               exceeds the indicated width.  This can be thought of
//               as a right margin or margin width.
////////////////////////////////////////////////////////////////////
51
inline void TextNode::set_wordwrap(float wordwrap);

474 14 clear_wordwrap 4 535 24 TextNode::clear_wordwrap 0 1 205 320
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_wordwrap
//       Access: Published
//  Description: Removes the wordwrap setting from the TextNode.  Text
//               will be as wide as it is.
////////////////////////////////////////////////////////////////////
43
inline void TextNode::clear_wordwrap(void);

475 14 set_text_color 4 535 24 TextNode::set_text_color 0 2 206 207 448
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void TextNode::set_text_color(float r, float g, float b, float a);

476 16 clear_text_color 4 535 26 TextNode::clear_text_color 0 1 208 346
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text_color
//       Access: Published
//  Description: Removes the text color specification; the text will
//               be colored whatever it was in the source font file.
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_text_color(void);

477 16 set_shadow_color 4 535 26 TextNode::set_shadow_color 0 2 209 210 452
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline void TextNode::set_shadow_color(float r, float g, float b, float a);

478 18 clear_shadow_color 4 535 28 TextNode::clear_shadow_color 0 1 211 228
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
inline void TextNode::clear_shadow_color(void);

479 10 set_shadow 4 535 20 TextNode::set_shadow 0 2 212 213 784
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_shadow
//       Access: Published
//  Description: Specifies that the text should be drawn with a
//               shadow, by creating a second copy of the text and
//               offsetting it slightly behind the first.
////////////////////////////////////////////////////////////////////
63
inline void TextNode::set_shadow(float xoffset, float yoffset);

480 12 clear_shadow 4 535 22 TextNode::clear_shadow 0 1 214 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_shadow
//       Access: Published
//  Description: Specifies that a shadow will not be drawn behind the
//               text.
////////////////////////////////////////////////////////////////////
41
inline void TextNode::clear_shadow(void);

481 7 set_bin 4 535 17 TextNode::set_bin 0 1 215 672
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_bin
//       Access: Published
//  Description: Names the GeomBin that the TextNode geometry should
//               be assigned to.  If this is set, then a
//               GeomBinTransition will be created to explicitly place
//               each component in the named bin.
//
//               The draw_order value will also be passed to each
//               GeomBinTransition as appropriate; this is
//               particularly useful if this names a GeomBinFixed,
//               e.g. "fixed".
////////////////////////////////////////////////////////////////////
63
inline void TextNode::set_bin(basic_string< char > const &bin);

482 9 clear_bin 4 535 19 TextNode::clear_bin 0 1 216 414
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_bin
//       Access: Published
//  Description: Removes the effect of a previous call to
//               set_bin().  Text will be drawn in whatever bin
//               it would like to be drawn in, with no explicit
//               ordering.
////////////////////////////////////////////////////////////////////
38
inline void TextNode::clear_bin(void);

483 14 set_draw_order 4 535 24 TextNode::set_draw_order 0 1 217 765
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_draw_order
//       Access: Published
//  Description: Sets the drawing order of text created by the
//               TextMaker.  This is actually the draw order of the
//               card and frame.  The shadow is drawn at
//               _draw_order+1, and the text at _draw_order+2.
//
//               This affects the sorting order assigned to the arcs
//               as they are created, and also is passed to whatever
//               bin may be assigned via set_bin().
//
//               The return value is the first unused draw_order
//               number, e.g. _draw_order + 3.
////////////////////////////////////////////////////////////////////
52
inline int TextNode::set_draw_order(int draw_order);

484 16 clear_draw_order 4 535 26 TextNode::clear_draw_order 0 1 218 226
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_draw_order
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline void TextNode::clear_draw_order(void);

485 13 set_tab_width 4 535 23 TextNode::set_tab_width 0 1 219 403
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_tab_width
//       Access: Published
//  Description: Sets the width of each tab stop, in screen units.  A
//               tab character embedded in the text will advance the
//               horizontal position to the next tab stop.
////////////////////////////////////////////////////////////////////
53
inline void TextNode::set_tab_width(float tab_width);

486 15 clear_tab_width 4 535 25 TextNode::clear_tab_width 0 1 220 225
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_tab_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
inline void TextNode::clear_tab_width(void);

487 15 set_glyph_scale 4 535 25 TextNode::set_glyph_scale 0 1 221 467
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_scale
//       Access: Published
//  Description: Specifies the factor by which to scale each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_shift()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
57
inline void TextNode::set_glyph_scale(float glyph_scale);

488 17 clear_glyph_scale 4 535 27 TextNode::clear_glyph_scale 0 1 222 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_scale
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_glyph_scale(void);

489 15 set_glyph_shift 4 535 25 TextNode::set_glyph_shift 0 1 223 465
////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_glyph_shift
//       Access: Published
//  Description: Specifies a vertical amount to shift each letter of
//               the text as it is placed.  This can be used (possibly
//               in conjunction with set_glyph_scale()) to implement
//               superscripting or subscripting.
////////////////////////////////////////////////////////////////////
57
inline void TextNode::set_glyph_shift(float glyph_shift);

490 17 clear_glyph_shift 4 535 27 TextNode::clear_glyph_shift 0 1 224 227
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_glyph_shift
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void TextNode::clear_glyph_shift(void);

491 8 set_text 4 535 18 TextNode::set_text 0 2 225 226 1146
// These methods are inherited from TextEncoder, but we override
// here so we can flag the TextNode as dirty when they have been
// changed.

// These methods are inherited from TextEncoder, but we override
// here so we can flag the TextNode as dirty when they have been
// changed.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
65
inline void TextNode::set_text(basic_string< char > const &text);

492 10 clear_text 4 535 20 TextNode::clear_text 0 1 227 255
////////////////////////////////////////////////////////////////////
//     Function: TextNode::clear_text
//       Access: Published
//  Description: Removes the text from the TextNode.
////////////////////////////////////////////////////////////////////
39
inline void TextNode::clear_text(void);

493 11 append_text 4 535 21 TextNode::append_text 0 1 228 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
68
inline void TextNode::append_text(basic_string< char > const &text);

494 19 append_unicode_char 4 535 29 TextNode::append_unicode_char 0 1 229 377
////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
57
inline void TextNode::append_unicode_char(int character);

495 20 get_wordwrapped_text 4 535 30 TextNode::get_wordwrapped_text 0 1 230 545
// After the text has been set, you can query this to determine how
// it will be wordwrapped.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_text
//       Access: Public
//  Description: Returns a string that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//               This will not contain any embedded special characters
//               like \1 or \3.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > TextNode::get_wordwrapped_text(void) const;

496 10 calc_width 4 535 20 TextNode::calc_width 0 3 231 232 233 1400
// These methods calculate the width of a single character or a line
// of text in the current font.

// These methods calculate the width of a single character or a line
// of text in the current font.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a single character of the font,
//               or 0.0 if the character is not known.  This may be a
//               wide character (greater than 255).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextNode::calc_width
//       Access: Published
//  Description: Returns the width of a line of text of arbitrary
//               characters.  The line should not include the newline
//               character or any embedded control characters like \1
//               or \3.
////////////////////////////////////////////////////////////////////
48
float TextNode::calc_width(int character) const;

497 9 set_wtext 4 535 19 TextNode::set_wtext 0 1 234 497
// Direct support for wide-character strings.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::set_wtext
//       Access: Published
//  Description: Changes the text that is displayed under the
//               TextNode, with a wide text.  This automatically sets
//               the string reported by get_text() to the 8-bit
//               encoded version of the same string.
////////////////////////////////////////////////////////////////////
70
inline void TextNode::set_wtext(basic_string< wchar_t > const &wtext);

498 12 append_wtext 4 535 22 TextNode::append_wtext 0 1 235 360
// Direct support for wide-character strings.

////////////////////////////////////////////////////////////////////
//     Function: TextNode::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
72
inline void TextNode::append_wtext(basic_string< wchar_t > const &text);

499 21 get_wordwrapped_wtext 4 535 31 TextNode::get_wordwrapped_wtext 0 1 236 454
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_wordwrapped_wtext
//       Access: Published
//  Description: Returns a wstring that represents the contents of the
//               text, as it has been formatted by wordwrap rules.
//               This will not contain any embedded special characters
//               like \1 or \3.
////////////////////////////////////////////////////////////////////
75
inline basic_string< wchar_t > TextNode::get_wordwrapped_wtext(void) const;

500 6 output 4 535 16 TextNode::output 0 1 237 222
////////////////////////////////////////////////////////////////////
//     Function: TextNode::output
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
50
virtual void TextNode::output(ostream &out) const;

501 5 write 4 535 15 TextNode::write 0 2 238 239 223
////////////////////////////////////////////////////////////////////
//     Function: TextNode::write
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
73
virtual void TextNode::write(ostream &out, int indent_level = (0)) const;

502 8 get_left 4 535 18 TextNode::get_left 0 1 240 472
// The following functions return information about the text that
// was last built (and is currently visible).

////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_left
//       Access: Published
//  Description: Returns the leftmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
44
inline float TextNode::get_left(void) const;

503 9 get_right 4 535 19 TextNode::get_right 0 1 241 474
// The following functions return information about the text that
// was last built (and is currently visible).

////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_right
//       Access: Published
//  Description: Returns the rightmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
45
inline float TextNode::get_right(void) const;

504 10 get_bottom 4 535 20 TextNode::get_bottom 0 1 242 363
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_bottom
//       Access: Published
//  Description: Returns the bottommost extent of the text in local
//               2-d coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
46
inline float TextNode::get_bottom(void) const;

505 7 get_top 4 535 17 TextNode::get_top 0 1 243 357
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_top
//       Access: Published
//  Description: Returns the topmost extent of the text in local 2-d
//               coordinates, unmodified by the set_transform()
//               matrix.
////////////////////////////////////////////////////////////////////
43
inline float TextNode::get_top(void) const;

506 10 get_height 4 535 20 TextNode::get_height 0 1 244 297
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_height
//       Access: Published
//  Description: Returns the net height of the text in local 2-d
//               coordinates.
////////////////////////////////////////////////////////////////////
46
inline float TextNode::get_height(void) const;

507 9 get_width 4 535 19 TextNode::get_width 0 1 245 295
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_width
//       Access: Published
//  Description: Returns the net width of the text in local 2-d
//               coordinates.
////////////////////////////////////////////////////////////////////
45
inline float TextNode::get_width(void) const;

508 17 get_upper_left_3d 4 535 27 TextNode::get_upper_left_3d 0 1 246 395
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_upper_left_3d
//       Access: Published
//  Description: Returns the upper-left extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
////////////////////////////////////////////////////////////////////
56
inline LPoint3f TextNode::get_upper_left_3d(void) const;

509 18 get_lower_right_3d 4 535 28 TextNode::get_lower_right_3d 0 1 247 397
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_lower_right_3d
//       Access: Published
//  Description: Returns the lower-right extent of the text object,
//               after it has been transformed into 3-d space by
//               applying the set_transform() matrix.
////////////////////////////////////////////////////////////////////
57
inline LPoint3f TextNode::get_lower_right_3d(void) const;

510 12 get_num_rows 4 535 22 TextNode::get_num_rows 0 1 248 394
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_num_rows
//       Access: Published
//  Description: Returns the number of rows of text that were
//               generated.  This counts word-wrapped rows as well as
//               rows generated due to embedded newlines.
////////////////////////////////////////////////////////////////////
46
inline int TextNode::get_num_rows(void) const;

511 8 generate 4 535 18 TextNode::generate 0 1 249 403
////////////////////////////////////////////////////////////////////
//     Function: TextNode::generate
//       Access: Published
//  Description: Generates the text, according to the parameters
//               indicated within the TextNode, and returns a Node
//               that may be parented within the tree to represent it.
////////////////////////////////////////////////////////////////////
48
PointerTo< PandaNode > TextNode::generate(void);

512 6 update 4 535 16 TextNode::update 0 1 250 442
////////////////////////////////////////////////////////////////////
//     Function: TextNode::update
//       Access: Published
//  Description: Can be called after the TextNode has been fully
//               configured, to force the node to recompute its text
//               immediately, rather than waiting for it to be drawn.
//               This call is optional.
////////////////////////////////////////////////////////////////////
35
inline void TextNode::update(void);

513 12 force_update 4 535 22 TextNode::force_update 0 1 251 537
////////////////////////////////////////////////////////////////////
//     Function: TextNode::force_update
//       Access: Published
//  Description: Forces the TextNode to recompute itself now, even if
//               it believes nothing has changed.  Normally, this
//               should not need to be called, but it may be useful if
//               some properties change outside of the TextNode's
//               knowledge (for instance, within the font).
////////////////////////////////////////////////////////////////////
41
inline void TextNode::force_update(void);

514 17 get_internal_geom 4 535 27 TextNode::get_internal_geom 0 1 252 637
////////////////////////////////////////////////////////////////////
//     Function: TextNode::get_internal_geom
//       Access: Published
//  Description: Returns the actual node that is used internally to
//               render the text, if the TextNode is parented within
//               the scene graph.
//
//               In general, you should not call this method.  Call
//               generate() instead if you want to get a handle to
//               geometry that represents the text.  This method is
//               provided as a debugging aid only.
////////////////////////////////////////////////////////////////////
51
PandaNode *TextNode::get_internal_geom(void) const;

515 14 get_class_type 4 535 24 TextNode::get_class_type 0 1 253 0
49
static TypeHandle TextNode::get_class_type(void);

516 14 set_properties 4 538 37 TextPropertiesManager::set_properties 0 1 260 707
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::set_properties
//       Access: Published
//  Description: Defines the TextProperties associated with the
//               indicated name.  When the name is subsequently
//               encountered in text embedded between \1 characters in
//               a TextNode string, the following text will be
//               rendered with these properties.
//
//               If there was already a TextProperties structure
//               associated with this name, it is quietly replaced
//               with the new definition.
////////////////////////////////////////////////////////////////////
111
void TextPropertiesManager::set_properties(basic_string< char > const &name, TextProperties const &properties);

517 14 get_properties 4 538 37 TextPropertiesManager::get_properties 0 1 261 668
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_properties
//       Access: Published
//  Description: Returns the TextProperties associated with the
//               indicated name.  If there was not previously a
//               TextProperties associated with this name, a warning
//               is printed and then a default TextProperties
//               structure is associated with the name, and returned.
//
//               Call has_properties() instead to check whether a
//               particular name has been defined.
////////////////////////////////////////////////////////////////////
87
TextProperties TextPropertiesManager::get_properties(basic_string< char > const &name);

518 14 has_properties 4 538 37 TextPropertiesManager::has_properties 0 1 262 687
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::has_properties
//       Access: Published
//  Description: Returns true if a TextProperties structure has been
//               associated with the indicated name, false otherwise.
//               Normally this means set_properties() has been called
//               with this name, but because get_properties() will
//               implicitly create a default TextProperties structure,
//               it may also mean simply that get_properties() has
//               been called with the indicated name.
////////////////////////////////////////////////////////////////////
83
bool TextPropertiesManager::has_properties(basic_string< char > const &name) const;

519 16 clear_properties 4 538 39 TextPropertiesManager::clear_properties 0 1 263 316
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::clear_properties
//       Access: Published
//  Description: Removes the named TextProperties structure from the
//               manager.
////////////////////////////////////////////////////////////////////
79
void TextPropertiesManager::clear_properties(basic_string< char > const &name);

520 5 write 4 538 28 TextPropertiesManager::write 0 2 264 265 228
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void TextPropertiesManager::write(ostream &out, int indent_level = (0)) const;

521 14 get_global_ptr 4 538 37 TextPropertiesManager::get_global_ptr 0 1 266 325
////////////////////////////////////////////////////////////////////
//     Function: TextPropertiesManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global TextPropertiesManager
//               object.
////////////////////////////////////////////////////////////////////
74
static TextPropertiesManager *TextPropertiesManager::get_global_ptr(void);

266
1 14 Dtool_pUk_9LaW 6 9 541 0 14 Dtool_pUk_9LaW 1 4 this 3 539  
2 14 Dtool_pUk_A_Bt 6 10 542 0 14 Dtool_pUk_A_Bt 1 4 this 3 539  
3 14 Dtool_pUk_MJXZ 4 11 544 0 14 Dtool_pUk_MJXZ 2 4 this 3 543  11 line_height 1 542  
4 14 Dtool_pUk_1YDr 6 12 542 0 14 Dtool_pUk_1YDr 1 4 this 3 539  
5 14 Dtool_pUk_HPSY 4 13 544 0 14 Dtool_pUk_HPSY 2 4 this 3 543  13 space_advance 1 542  
6 14 Dtool_pUk_FEoh 4 14 544 0 14 Dtool_pUk_FEoh 3 4 this 3 539  3 out 1 545  12 indent_level 1 547  
7 14 Dtool_pUk__pT1 7 15 549 0 14 Dtool_pUk__pT1 0 
8 14 Dtool_pUk_2Y6t 7 3 550 0 14 Dtool_pUk_2Y6t 1 4 this 3 543  
9 14 Dtool_pUk_UGAk 7 4 543 271 14 Dtool_pUk_UGAk 1 4 this 3 550  
10 14 Dtool_pUk_SvLG 6 6 551 0 14 Dtool_pUk_SvLG 1 4 this 3 543  
11 14 Dtool_pUk_5Y1p 7 7 543 271 14 Dtool_pUk_5Y1p 1 4 this 3 551  
12 14 Dtool_pUk_gQhV 6 18 541 0 14 Dtool_pUk_gQhV 1 4 this 3 552  
13 14 Dtool_pUk_tUbq 7 19 549 0 14 Dtool_pUk_tUbq 0 
14 14 Dtool_pUk_OkXk 7 27 557 287 14 Dtool_pUk_OkXk 2 13 font_filename 1 554  10 face_index 1 547  
15 14 Dtool_pUk_8io2 7 27 557 287 14 Dtool_pUk_8io2 1 13 font_filename 1 554  
16 14 Dtool_pUk_K5pQ 7 27 557 287 14 Dtool_pUk_K5pQ 3 9 font_data 1 558  11 data_length 1 547  10 face_index 1 547  
17 14 Dtool_pUk__u_H 6 29 558 0 14 Dtool_pUk__u_H 1 4 this 3 559  
18 14 Dtool_pUk_HMaP 6 30 541 0 14 Dtool_pUk_HMaP 2 4 this 3 557  10 point_size 1 542  
19 14 Dtool_pUk_caBi 6 31 542 0 14 Dtool_pUk_caBi 1 4 this 3 559  
20 14 Dtool_pUk_wHlG 6 32 541 0 14 Dtool_pUk_wHlG 2 4 this 3 557  15 pixels_per_unit 1 542  
21 14 Dtool_pUk_7_b_ 6 33 542 0 14 Dtool_pUk_7_b_ 1 4 this 3 559  
22 14 Dtool_pUk_mves 6 34 541 0 14 Dtool_pUk_mves 2 4 this 3 557  12 scale_factor 1 542  
23 14 Dtool_pUk_2S6E 6 35 542 0 14 Dtool_pUk_2S6E 1 4 this 3 559  
24 14 Dtool_pUk__XCc 4 36 544 0 14 Dtool_pUk__XCc 2 4 this 3 557  16 native_antialias 1 541  
25 14 Dtool_pUk_4rqO 6 37 541 0 14 Dtool_pUk_4rqO 1 4 this 3 559  
26 14 Dtool_pUk_pAyj 6 38 547 0 14 Dtool_pUk_pAyj 1 4 this 3 559  
27 14 Dtool_pUk_SLGS 6 39 542 0 14 Dtool_pUk_SLGS 1 4 this 3 559  
28 14 Dtool_pUk_IitQ 6 40 542 0 14 Dtool_pUk_IitQ 1 4 this 3 559  
29 14 Dtool_pUk__M4T 4 41 544 0 14 Dtool_pUk__M4T 2 4 this 3 557  14 texture_margin 1 547  
30 14 Dtool_pUk__YB2 6 42 547 0 14 Dtool_pUk__YB2 1 4 this 3 559  
31 14 Dtool_pUk_ksfM 4 43 544 0 14 Dtool_pUk_ksfM 2 4 this 3 557  11 poly_margin 1 542  
32 14 Dtool_pUk_ZyNh 6 44 542 0 14 Dtool_pUk_ZyNh 1 4 this 3 559  
33 14 Dtool_pUk_mkww 4 45 544 0 14 Dtool_pUk_mkww 3 4 this 3 557  6 x_size 1 547  6 y_size 1 547  
34 14 Dtool_pUk__gFL 6 46 547 0 14 Dtool_pUk__gFL 1 4 this 3 559  
35 14 Dtool_pUk__Qme 6 47 547 0 14 Dtool_pUk__Qme 1 4 this 3 559  
36 14 Dtool_pUk_72Sw 4 48 544 0 14 Dtool_pUk_72Sw 2 4 this 3 557  6 filter 1 561  
37 14 Dtool_pUk__eoM 6 49 561 0 14 Dtool_pUk__eoM 1 4 this 3 559  
38 14 Dtool_pUk_XnyK 4 50 544 0 14 Dtool_pUk_XnyK 2 4 this 3 557  6 filter 1 561  
39 14 Dtool_pUk_NvIn 6 51 561 0 14 Dtool_pUk_NvIn 1 4 this 3 559  
40 14 Dtool_pUk_D2hS 4 52 544 0 14 Dtool_pUk_D2hS 2 4 this 3 557  18 anisotropic_degree 1 547  
41 14 Dtool_pUk_gQMP 6 53 547 0 14 Dtool_pUk_gQMP 1 4 this 3 559  
42 14 Dtool_pUk_nWpf 6 54 547 0 14 Dtool_pUk_nWpf 1 4 this 3 559  
43 14 Dtool_pUk_72Ni 7 55 562 281 14 Dtool_pUk_72Ni 2 4 this 3 559  1 n 1 547  
44 14 Dtool_pUk_qlNW 6 56 547 0 14 Dtool_pUk_qlNW 1 4 this 3 557  
45 14 Dtool_pUk_H6z6 4 57 544 0 14 Dtool_pUk_H6z6 1 4 this 3 557  
46 14 Dtool_pUk_OAFU 4 58 544 0 14 Dtool_pUk_OAFU 3 4 this 3 559  3 out 1 545  12 indent_level 1 547  
47 14 Dtool_pUk_KwHA 7 59 549 0 14 Dtool_pUk_KwHA 0 
48 14 Dtool_pUk_IC2L 7 22 543 271 14 Dtool_pUk_IC2L 1 4 this 3 557  
49 14 Dtool_pUk_M4UK 7 23 557 287 14 Dtool_pUk_M4UK 1 4 this 3 543  
50 14 Dtool_pUk_GSLy 6 25 563 0 14 Dtool_pUk_GSLy 1 4 this 3 557  
51 14 Dtool_pUk_HtRh 7 26 557 287 14 Dtool_pUk_HtRh 1 4 this 3 563  
52 14 Dtool_pUk_x__8 6 61 541 0 14 Dtool_pUk_x__8 1 8 filename 1 558  
53 14 Dtool_pUk_E_Sp 6 62 541 0 14 Dtool_pUk_E_Sp 1 8 filename 1 558  
54 14 Dtool_pUk_8KSz 7 63 543 271 14 Dtool_pUk_8KSz 1 8 filename 1 558  
55 14 Dtool_pUk_Wzk8 4 64 544 0 14 Dtool_pUk_Wzk8 2 8 filename 1 558  4 font 1 543  
56 14 Dtool_pUk_Jw6N 4 65 544 0 14 Dtool_pUk_Jw6N 1 8 filename 1 558  
57 14 Dtool_pUk_xfGL 4 66 544 0 14 Dtool_pUk_xfGL 0 
58 14 Dtool_pUk_c8Aj 6 67 547 0 14 Dtool_pUk_c8Aj 0 
59 14 Dtool_pUk_UKZ4 4 68 544 0 14 Dtool_pUk_UKZ4 1 3 out 1 545  
60 14 Dtool_pUk_V6yK 4 69 544 0 14 Dtool_pUk_V6yK 1 3 out 1 545  
61 14 Dtool_pUk_Ci_Z 7 73 549 0 14 Dtool_pUk_Ci_Z 0 
62 14 Dtool_pUk__cW_ 7 75 565 332 14 Dtool_pUk__cW_ 1 8 font_def 1 564  
63 14 Dtool_pUk_qq7s 7 76 549 0 14 Dtool_pUk_qq7s 0 
64 14 Dtool_pUk_ZcXD 7 80 566 406 14 Dtool_pUk_ZcXD 0 
65 14 Dtool_pUk_thC2 7 80 566 406 14 Dtool_pUk_thC2 1 4 copy 1 567  
66 14 Dtool_pUk_k70w 6 81 566 0 14 Dtool_pUk_k70w 2 4 this 3 566  4 copy 1 567  
67 14 Dtool_pUk_1GAn 4 82 544 0 14 Dtool_pUk_1GAn 1 4 this 3 566  
68 14 Dtool_pUk_K3ac 6 83 541 0 14 Dtool_pUk_K3ac 1 4 this 3 567  
69 14 Dtool_pUk_lPdf 4 84 544 0 14 Dtool_pUk_lPdf 1 6 param0 0 543  
70 14 Dtool_pUk_aGgR 7 85 543 271 14 Dtool_pUk_aGgR 0 
71 14 Dtool_pUk_LLTe 4 86 544 0 14 Dtool_pUk_LLTe 2 4 this 3 566  4 font 1 543  
72 14 Dtool_pUk__wmu 4 87 544 0 14 Dtool_pUk__wmu 1 4 this 3 566  
73 14 Dtool_pUk_zzFD 6 88 541 0 14 Dtool_pUk_zzFD 1 4 this 3 567  
74 14 Dtool_pUk_aRE2 7 89 543 271 14 Dtool_pUk_aRE2 1 4 this 3 567  
75 14 Dtool_pUk_IHvI 4 90 544 0 14 Dtool_pUk_IHvI 2 4 this 3 566  10 small_caps 1 541  
76 14 Dtool_pUk_jTKU 4 91 544 0 14 Dtool_pUk_jTKU 1 4 this 3 566  
77 14 Dtool_pUk_68B0 6 92 541 0 14 Dtool_pUk_68B0 1 4 this 3 567  
78 14 Dtool_pUk_CZAn 6 93 541 0 14 Dtool_pUk_CZAn 1 4 this 3 567  
79 14 Dtool_pUk_uF_9 4 94 544 0 14 Dtool_pUk_uF_9 2 4 this 3 566  16 small_caps_scale 1 542  
80 14 Dtool_pUk_VrrU 4 95 544 0 14 Dtool_pUk_VrrU 1 4 this 3 566  
81 14 Dtool_pUk_fV3a 6 96 541 0 14 Dtool_pUk_fV3a 1 4 this 3 567  
82 14 Dtool_pUk_3_2N 6 97 542 0 14 Dtool_pUk_3_2N 1 4 this 3 567  
83 14 Dtool_pUk_Q85E 4 98 544 0 14 Dtool_pUk_Q85E 2 4 this 3 566  5 slant 1 542  
84 14 Dtool_pUk_Hlo1 4 99 544 0 14 Dtool_pUk_Hlo1 1 4 this 3 566  
85 14 Dtool_pUk_iZ7r 6 100 541 0 14 Dtool_pUk_iZ7r 1 4 this 3 567  
86 14 Dtool_pUk_KL7e 6 101 542 0 14 Dtool_pUk_KL7e 1 4 this 3 567  
87 14 Dtool_pUk_7ogz 4 102 544 0 14 Dtool_pUk_7ogz 2 4 this 3 566  10 align_type 1 534  
88 14 Dtool_pUk_WteE 4 103 544 0 14 Dtool_pUk_WteE 1 4 this 3 566  
89 14 Dtool_pUk_SdzH 6 104 541 0 14 Dtool_pUk_SdzH 1 4 this 3 567  
90 14 Dtool_pUk_l2z6 6 105 534 0 14 Dtool_pUk_l2z6 1 4 this 3 567  
91 14 Dtool_pUk_C_M9 4 106 544 0 14 Dtool_pUk_C_M9 2 4 this 3 566  6 indent 1 542  
92 14 Dtool_pUk_IAtK 4 107 544 0 14 Dtool_pUk_IAtK 1 4 this 3 566  
93 14 Dtool_pUk_7oOi 6 108 541 0 14 Dtool_pUk_7oOi 1 4 this 3 567  
94 14 Dtool_pUk_TLOV 6 109 542 0 14 Dtool_pUk_TLOV 1 4 this 3 567  
95 14 Dtool_pUk_lTPz 4 110 544 0 14 Dtool_pUk_lTPz 2 4 this 3 566  8 wordwrap 1 542  
96 14 Dtool_pUk_q0Vt 4 111 544 0 14 Dtool_pUk_q0Vt 1 4 this 3 566  
97 14 Dtool_pUk_2SM7 6 112 541 0 14 Dtool_pUk_2SM7 1 4 this 3 567  
98 14 Dtool_pUk_O3Nu 6 113 542 0 14 Dtool_pUk_O3Nu 1 4 this 3 567  
99 14 Dtool_pUk_GPH5 4 114 544 0 14 Dtool_pUk_GPH5 2 4 this 3 566  28 preserve_trailing_whitespace 1 541  
100 14 Dtool_pUk_k_Vr 4 115 544 0 14 Dtool_pUk_k_Vr 1 4 this 3 566  
101 14 Dtool_pUk_gu7s 6 116 541 0 14 Dtool_pUk_gu7s 1 4 this 3 567  
102 14 Dtool_pUk_4J6f 6 117 541 0 14 Dtool_pUk_4J6f 1 4 this 3 567  
103 14 Dtool_pUk_lx5m 4 118 544 0 14 Dtool_pUk_lx5m 2 4 this 3 566  10 text_color 1 569  
104 14 Dtool_pUk_qqgv 4 118 544 0 14 Dtool_pUk_qqgv 5 4 this 3 566  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
105 14 Dtool_pUk_6ttP 4 119 544 0 14 Dtool_pUk_6ttP 1 4 this 3 566  
106 14 Dtool_pUk_5OXS 6 120 541 0 14 Dtool_pUk_5OXS 1 4 this 3 567  
107 14 Dtool_pUk_BzWF 7 121 572 0 14 Dtool_pUk_BzWF 1 4 this 3 567  
108 14 Dtool_pUk_MYoy 4 122 544 0 14 Dtool_pUk_MYoy 2 4 this 3 566  12 shadow_color 1 569  
109 14 Dtool_pUk_L_2W 4 122 544 0 14 Dtool_pUk_L_2W 5 4 this 3 566  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
110 14 Dtool_pUk_CS3R 4 123 544 0 14 Dtool_pUk_CS3R 1 4 this 3 566  
111 14 Dtool_pUk_Bnqk 6 124 541 0 14 Dtool_pUk_Bnqk 1 4 this 3 567  
112 14 Dtool_pUk_ZaqX 7 125 572 0 14 Dtool_pUk_ZaqX 1 4 this 3 567  
113 14 Dtool_pUk_apcN 4 126 544 0 14 Dtool_pUk_apcN 2 4 this 3 566  13 shadow_offset 1 573  
114 14 Dtool_pUk_3fZ9 4 126 544 0 14 Dtool_pUk_3fZ9 3 4 this 3 566  7 xoffset 1 542  7 yoffset 1 542  
115 14 Dtool_pUk__RkQ 4 127 544 0 14 Dtool_pUk__RkQ 1 4 this 3 566  
116 14 Dtool_pUk_I1O1 6 128 541 0 14 Dtool_pUk_I1O1 1 4 this 3 567  
117 14 Dtool_pUk_grOo 7 129 577 0 14 Dtool_pUk_grOo 1 4 this 3 567  
118 14 Dtool_pUk_LXjT 4 130 544 0 14 Dtool_pUk_LXjT 2 4 this 3 566  3 bin 1 558  
119 14 Dtool_pUk_AeJK 4 131 544 0 14 Dtool_pUk_AeJK 1 4 this 3 566  
120 14 Dtool_pUk_mxqz 6 132 541 0 14 Dtool_pUk_mxqz 1 4 this 3 567  
121 14 Dtool_pUk_OWqm 6 133 558 0 14 Dtool_pUk_OWqm 1 4 this 3 567  
122 14 Dtool_pUk_0od6 6 134 547 0 14 Dtool_pUk_0od6 2 4 this 3 566  10 draw_order 1 547  
123 14 Dtool_pUk_P1HS 4 135 544 0 14 Dtool_pUk_P1HS 1 4 this 3 566  
124 14 Dtool_pUk_VlQH 6 136 541 0 14 Dtool_pUk_VlQH 1 4 this 3 567  
125 14 Dtool_pUk__LP6 6 137 547 0 14 Dtool_pUk__LP6 1 4 this 3 567  
126 14 Dtool_pUk_Fusw 4 138 544 0 14 Dtool_pUk_Fusw 2 4 this 3 566  9 tab_width 1 542  
127 14 Dtool_pUk_pdwn 4 139 544 0 14 Dtool_pUk_pdwn 1 4 this 3 566  
128 14 Dtool_pUk_npZ0 6 140 541 0 14 Dtool_pUk_npZ0 1 4 this 3 567  
129 14 Dtool_pUk_PKYn 6 141 542 0 14 Dtool_pUk_PKYn 1 4 this 3 567  
130 14 Dtool_pUk_UBRK 4 142 544 0 14 Dtool_pUk_UBRK 2 4 this 3 566  11 glyph_scale 1 542  
131 14 Dtool_pUk_89_H 4 143 544 0 14 Dtool_pUk_89_H 1 4 this 3 566  
132 14 Dtool_pUk_Qy8B 6 144 541 0 14 Dtool_pUk_Qy8B 1 4 this 3 567  
133 14 Dtool_pUk_5U70 6 145 542 0 14 Dtool_pUk_5U70 1 4 this 3 567  
134 14 Dtool_pUk__nuw 4 146 544 0 14 Dtool_pUk__nuw 2 4 this 3 566  11 glyph_shift 1 542  
135 14 Dtool_pUk_Tz3h 4 147 544 0 14 Dtool_pUk_Tz3h 1 4 this 3 566  
136 14 Dtool_pUk_zIZo 6 148 541 0 14 Dtool_pUk_zIZo 1 4 this 3 567  
137 14 Dtool_pUk_rrYb 6 149 542 0 14 Dtool_pUk_rrYb 1 4 this 3 567  
138 14 Dtool_pUk_lo22 4 150 544 0 14 Dtool_pUk_lo22 2 4 this 3 566  5 other 1 567  
139 14 Dtool_pUk_dHuP 4 151 544 0 14 Dtool_pUk_dHuP 3 4 this 3 567  3 out 1 545  12 indent_level 1 547  
140 14 Dtool_pUk_dtgi 4 151 544 0 14 Dtool_pUk_dtgi 2 4 this 3 567  3 out 1 545  
141 14 Dtool_pUk__CJ5 7 152 549 0 14 Dtool_pUk__CJ5 0 
142 14 Dtool_pUk_xTrj 7 163 578 414 14 Dtool_pUk_xTrj 1 4 name 1 558  
143 14 Dtool_pUk_NhOQ 7 163 578 414 14 Dtool_pUk_NhOQ 2 4 name 1 558  4 copy 1 567  
144 14 Dtool_pUk_64_2 6 165 542 0 14 Dtool_pUk_64_2 1 4 this 3 579  
145 14 Dtool_pUk_gyMC 4 166 544 0 14 Dtool_pUk_gyMC 2 4 this 3 578  8 max_rows 1 547  
146 14 Dtool_pUk_Iv_f 4 167 544 0 14 Dtool_pUk_Iv_f 1 4 this 3 578  
147 14 Dtool_pUk_afTN 6 168 541 0 14 Dtool_pUk_afTN 1 4 this 3 579  
148 14 Dtool_pUk__cGl 6 169 547 0 14 Dtool_pUk__cGl 1 4 this 3 579  
149 14 Dtool_pUk_P7gc 6 170 541 0 14 Dtool_pUk_P7gc 1 4 this 3 579  
150 14 Dtool_pUk_F8Bv 4 171 544 0 14 Dtool_pUk_F8Bv 2 4 this 3 578  11 frame_color 1 569  
151 14 Dtool_pUk_UbTz 4 171 544 0 14 Dtool_pUk_UbTz 5 4 this 3 578  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
152 14 Dtool_pUk_gap6 7 172 572 0 14 Dtool_pUk_gap6 1 4 this 3 579  
153 14 Dtool_pUk_AoPk 4 173 544 0 14 Dtool_pUk_AoPk 3 4 this 3 578  4 size 1 542  10 uv_portion 1 542  
154 14 Dtool_pUk_3G6F 4 174 544 0 14 Dtool_pUk_3G6F 1 4 this 3 578  
155 14 Dtool_pUk_rI81 6 175 542 0 14 Dtool_pUk_rI81 1 4 this 3 579  
156 14 Dtool_pUk_0YDM 6 176 542 0 14 Dtool_pUk_0YDM 1 4 this 3 579  
157 14 Dtool_pUk__Hvs 6 177 541 0 14 Dtool_pUk__Hvs 1 4 this 3 579  
158 14 Dtool_pUk_zpf9 4 178 544 0 14 Dtool_pUk_zpf9 2 4 this 3 578  10 card_color 1 569  
159 14 Dtool_pUk__JmF 4 178 544 0 14 Dtool_pUk__JmF 5 4 this 3 578  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
160 14 Dtool_pUk_JA_Y 7 179 572 0 14 Dtool_pUk_JA_Y 1 4 this 3 579  
161 14 Dtool_pUk_hpTx 4 180 544 0 14 Dtool_pUk_hpTx 2 4 this 3 578  12 card_texture 1 581  
162 14 Dtool_pUk_zHSq 4 181 544 0 14 Dtool_pUk_zHSq 1 4 this 3 578  
163 14 Dtool_pUk_7f88 6 182 541 0 14 Dtool_pUk_7f88 1 4 this 3 579  
164 14 Dtool_pUk_pfvU 7 183 581 0 14 Dtool_pUk_pfvU 1 4 this 3 579  
165 14 Dtool_pUk_fW_a 4 184 544 0 14 Dtool_pUk_fW_a 5 4 this 3 578  4 left 1 542  5 right 1 542  6 bottom 1 542  3 top 1 542  
166 14 Dtool_pUk_7_wM 4 185 544 0 14 Dtool_pUk_7_wM 5 4 this 3 578  4 left 1 542  5 right 1 542  6 bottom 1 542  3 top 1 542  
167 14 Dtool_pUk_utht 4 186 544 0 14 Dtool_pUk_utht 1 4 this 3 578  
168 14 Dtool_pUk_4KuG 6 187 541 0 14 Dtool_pUk_4KuG 1 4 this 3 579  
169 14 Dtool_pUk_8doH 6 188 541 0 14 Dtool_pUk_8doH 1 4 this 3 579  
170 14 Dtool_pUk_LXz1 7 189 572 0 14 Dtool_pUk_LXz1 1 4 this 3 579  
171 14 Dtool_pUk_Ma1R 7 190 572 0 14 Dtool_pUk_Ma1R 1 4 this 3 579  
172 14 Dtool_pUk_lIlf 4 191 544 0 14 Dtool_pUk_lIlf 2 4 this 3 578  10 line_width 1 542  
173 14 Dtool_pUk_M20H 6 192 542 0 14 Dtool_pUk_M20H 1 4 this 3 579  
174 14 Dtool_pUk_kMsJ 4 193 544 0 14 Dtool_pUk_kMsJ 2 4 this 3 578  7 corners 1 541  
175 14 Dtool_pUk_sWF6 6 194 541 0 14 Dtool_pUk_sWF6 1 4 this 3 579  
176 14 Dtool_pUk_r1zs 4 195 544 0 14 Dtool_pUk_r1zs 5 4 this 3 578  4 left 1 542  5 right 1 542  6 bottom 1 542  3 top 1 542  
177 14 Dtool_pUk_QVW0 4 196 544 0 14 Dtool_pUk_QVW0 5 4 this 3 578  4 left 1 542  5 right 1 542  6 bottom 1 542  3 top 1 542  
178 14 Dtool_pUk_TKeT 4 197 544 0 14 Dtool_pUk_TKeT 2 4 this 3 578  10 card_decal 1 541  
179 14 Dtool_pUk_92SD 4 198 544 0 14 Dtool_pUk_92SD 1 4 this 3 578  
180 14 Dtool_pUk_tTVI 6 199 541 0 14 Dtool_pUk_tTVI 1 4 this 3 579  
181 14 Dtool_pUk_hF8z 6 200 541 0 14 Dtool_pUk_hF8z 1 4 this 3 579  
182 14 Dtool_pUk__1k2 6 201 541 0 14 Dtool_pUk__1k2 1 4 this 3 579  
183 14 Dtool_pUk_Io16 7 202 572 0 14 Dtool_pUk_Io16 1 4 this 3 579  
184 14 Dtool_pUk_svt7 7 203 572 0 14 Dtool_pUk_svt7 1 4 this 3 579  
185 14 Dtool_pUk___32 7 204 572 0 14 Dtool_pUk___32 1 4 this 3 579  
186 14 Dtool_pUk_PbTJ 4 205 544 0 14 Dtool_pUk_PbTJ 2 4 this 3 578  9 transform 1 582  
187 14 Dtool_pUk_ot_Q 7 206 585 0 14 Dtool_pUk_ot_Q 1 4 this 3 579  
188 14 Dtool_pUk_q9jN 4 207 544 0 14 Dtool_pUk_q9jN 2 4 this 3 578  2 cs 1 586  
189 14 Dtool_pUk_8bzG 6 208 586 0 14 Dtool_pUk_8bzG 1 4 this 3 579  
190 14 Dtool_pUk_KHp_ 4 209 544 0 14 Dtool_pUk_KHp_ 2 4 this 3 578  10 usage_hint 1 587  
191 14 Dtool_pUk_WHkr 6 210 587 0 14 Dtool_pUk_WHkr 1 4 this 3 579  
192 14 Dtool_pUk_GF3a 4 211 544 0 14 Dtool_pUk_GF3a 2 4 this 3 578  4 font 1 543  
193 14 Dtool_pUk_f1JB 4 212 544 0 14 Dtool_pUk_f1JB 1 4 this 3 578  
194 14 Dtool_pUk__Vg7 4 213 544 0 14 Dtool_pUk__Vg7 2 4 this 3 578  10 small_caps 1 541  
195 14 Dtool_pUk_wdub 4 214 544 0 14 Dtool_pUk_wdub 1 4 this 3 578  
196 14 Dtool_pUk_UbUd 4 215 544 0 14 Dtool_pUk_UbUd 2 4 this 3 578  16 small_caps_scale 1 542  
197 14 Dtool_pUk_INuw 4 216 544 0 14 Dtool_pUk_INuw 1 4 this 3 578  
198 14 Dtool_pUk_b_en 4 217 544 0 14 Dtool_pUk_b_en 2 4 this 3 578  5 slant 1 542  
199 14 Dtool_pUk_SyQo 4 218 544 0 14 Dtool_pUk_SyQo 1 4 this 3 578  
200 14 Dtool_pUk_LgJS 4 219 544 0 14 Dtool_pUk_LgJS 2 4 this 3 578  10 align_type 1 534  
201 14 Dtool_pUk_6Qem 4 220 544 0 14 Dtool_pUk_6Qem 1 4 this 3 578  
202 14 Dtool_pUk_QfWK 4 221 544 0 14 Dtool_pUk_QfWK 2 4 this 3 578  6 indent 1 542  
203 14 Dtool_pUk_mAkO 4 222 544 0 14 Dtool_pUk_mAkO 1 4 this 3 578  
204 14 Dtool_pUk_9HMt 4 223 544 0 14 Dtool_pUk_9HMt 2 4 this 3 578  8 wordwrap 1 542  
205 14 Dtool_pUk_fZHt 4 224 544 0 14 Dtool_pUk_fZHt 1 4 this 3 578  
206 14 Dtool_pUk__L_O 4 225 544 0 14 Dtool_pUk__L_O 2 4 this 3 578  10 text_color 1 569  
207 14 Dtool_pUk_IuGX 4 225 544 0 14 Dtool_pUk_IuGX 5 4 this 3 578  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
208 14 Dtool_pUk_rIpB 4 226 544 0 14 Dtool_pUk_rIpB 1 4 this 3 578  
209 14 Dtool_pUk_MFJk 4 227 544 0 14 Dtool_pUk_MFJk 2 4 this 3 578  12 shadow_color 1 569  
210 14 Dtool_pUk_wKru 4 227 544 0 14 Dtool_pUk_wKru 5 4 this 3 578  1 r 1 542  1 g 1 542  1 b 1 542  1 a 1 542  
211 14 Dtool_pUk_y9rr 4 228 544 0 14 Dtool_pUk_y9rr 1 4 this 3 578  
212 14 Dtool_pUk_mLmp 4 229 544 0 14 Dtool_pUk_mLmp 2 4 this 3 578  13 shadow_offset 1 573  
213 14 Dtool_pUk_GBV_ 4 229 544 0 14 Dtool_pUk_GBV_ 3 4 this 3 578  7 xoffset 1 542  7 yoffset 1 542  
214 14 Dtool_pUk_7Hq_ 4 230 544 0 14 Dtool_pUk_7Hq_ 1 4 this 3 578  
215 14 Dtool_pUk_Ggph 4 231 544 0 14 Dtool_pUk_Ggph 2 4 this 3 578  3 bin 1 558  
216 14 Dtool_pUk_vUkz 4 232 544 0 14 Dtool_pUk_vUkz 1 4 this 3 578  
217 14 Dtool_pUk_RbS_ 6 233 547 0 14 Dtool_pUk_RbS_ 2 4 this 3 578  10 draw_order 1 547  
218 14 Dtool_pUk_ejrP 4 234 544 0 14 Dtool_pUk_ejrP 1 4 this 3 578  
219 14 Dtool_pUk_ZrKk 4 235 544 0 14 Dtool_pUk_ZrKk 2 4 this 3 578  9 tab_width 1 542  
220 14 Dtool_pUk_ELAu 4 236 544 0 14 Dtool_pUk_ELAu 1 4 this 3 578  
221 14 Dtool_pUk_gJjt 4 237 544 0 14 Dtool_pUk_gJjt 2 4 this 3 578  11 glyph_scale 1 542  
222 14 Dtool_pUk_Q6h8 4 238 544 0 14 Dtool_pUk_Q6h8 1 4 this 3 578  
223 14 Dtool_pUk_6XIO 4 239 544 0 14 Dtool_pUk_6XIO 2 4 this 3 578  11 glyph_shift 1 542  
224 14 Dtool_pUk_a77j 4 240 544 0 14 Dtool_pUk_a77j 1 4 this 3 578  
225 14 Dtool_pUk_hRrL 4 241 544 0 14 Dtool_pUk_hRrL 2 4 this 3 578  4 text 1 558  
226 14 Dtool_pUk_0t8R 4 241 544 0 14 Dtool_pUk_0t8R 3 4 this 3 578  4 text 1 558  8 encoding 1 589  
227 14 Dtool_pUk_ExTx 4 242 544 0 14 Dtool_pUk_ExTx 1 4 this 3 578  
228 14 Dtool_pUk_p36A 4 243 544 0 14 Dtool_pUk_p36A 2 4 this 3 578  4 text 1 558  
229 14 Dtool_pUk_B42h 4 244 544 0 14 Dtool_pUk_B42h 2 4 this 3 578  9 character 1 547  
230 14 Dtool_pUk_wRGG 6 245 558 0 14 Dtool_pUk_wRGG 1 4 this 3 579  
231 14 Dtool_pUk_03Il 6 246 542 0 14 Dtool_pUk_03Il 2 4 this 3 579  4 line 1 558  
232 14 Dtool_pUk_7iBP 6 246 542 0 14 Dtool_pUk_7iBP 2 4 this 3 579  4 line 1 558  
233 14 Dtool_pUk_nWg7 6 246 542 0 14 Dtool_pUk_nWg7 2 4 this 3 579  9 character 1 547  
234 14 Dtool_pUk__svx 4 247 544 0 14 Dtool_pUk__svx 2 4 this 3 578  5 wtext 1 558  
235 14 Dtool_pUk_HS8n 4 248 544 0 14 Dtool_pUk_HS8n 2 4 this 3 578  4 text 1 558  
236 14 Dtool_pUk_FiQ_ 6 249 558 0 14 Dtool_pUk_FiQ_ 1 4 this 3 579  
237 14 Dtool_pUk_mp7p 4 250 544 0 14 Dtool_pUk_mp7p 2 4 this 3 579  3 out 1 545  
238 14 Dtool_pUk_IFnr 4 251 544 0 14 Dtool_pUk_IFnr 3 4 this 3 579  3 out 1 545  12 indent_level 1 547  
239 14 Dtool_pUk_em6v 4 251 544 0 14 Dtool_pUk_em6v 2 4 this 3 579  3 out 1 545  
240 14 Dtool_pUk_UosZ 6 252 542 0 14 Dtool_pUk_UosZ 1 4 this 3 579  
241 14 Dtool_pUk_AxZW 6 253 542 0 14 Dtool_pUk_AxZW 1 4 this 3 579  
242 14 Dtool_pUk_qsLg 6 254 542 0 14 Dtool_pUk_qsLg 1 4 this 3 579  
243 14 Dtool_pUk_D4yi 6 255 542 0 14 Dtool_pUk_D4yi 1 4 this 3 579  
244 14 Dtool_pUk_pjNJ 6 256 542 0 14 Dtool_pUk_pjNJ 1 4 this 3 579  
245 14 Dtool_pUk_W_Z2 6 257 542 0 14 Dtool_pUk_W_Z2 1 4 this 3 579  
246 14 Dtool_pUk_ObuQ 7 258 591 0 14 Dtool_pUk_ObuQ 1 4 this 3 579  
247 14 Dtool_pUk_z0ox 7 259 591 0 14 Dtool_pUk_z0ox 1 4 this 3 579  
248 14 Dtool_pUk_4Pci 6 260 547 0 14 Dtool_pUk_4Pci 1 4 this 3 579  
249 14 Dtool_pUk_fMjA 7 261 564 0 14 Dtool_pUk_fMjA 1 4 this 3 578  
250 14 Dtool_pUk_g9eZ 4 262 544 0 14 Dtool_pUk_g9eZ 1 4 this 3 578  
251 14 Dtool_pUk_Z_1G 4 263 544 0 14 Dtool_pUk_Z_1G 1 4 this 3 578  
252 14 Dtool_pUk_oCcY 7 264 564 0 14 Dtool_pUk_oCcY 1 4 this 3 579  
253 14 Dtool_pUk_xuS_ 7 265 549 0 14 Dtool_pUk_xuS_ 0 
254 14 Dtool_pUk_HSSc 7 156 564 0 14 Dtool_pUk_HSSc 1 4 this 3 578  
255 14 Dtool_pUk_9k_x 7 157 578 414 14 Dtool_pUk_9k_x 1 4 this 3 564  
256 14 Dtool_pUk_2clc 6 159 592 0 14 Dtool_pUk_2clc 1 4 this 3 578  
257 14 Dtool_pUk_tPjp 7 160 578 414 14 Dtool_pUk_tPjp 1 4 this 3 592  
258 14 Dtool_pUk_rYU8 6 161 566 0 14 Dtool_pUk_rYU8 1 4 this 3 578  
259 14 Dtool_pUk_zq3d 7 162 578 414 14 Dtool_pUk_zq3d 1 4 this 3 566  
260 14 Dtool_pUk_YE4B 4 267 544 0 14 Dtool_pUk_YE4B 3 4 this 3 593  4 name 1 558  10 properties 1 567  
261 14 Dtool_pUk_4Bnj 7 268 566 406 14 Dtool_pUk_4Bnj 2 4 this 3 593  4 name 1 558  
262 14 Dtool_pUk_GLtg 6 269 541 0 14 Dtool_pUk_GLtg 2 4 this 3 594  4 name 1 558  
263 14 Dtool_pUk_TUsF 4 270 544 0 14 Dtool_pUk_TUsF 2 4 this 3 593  4 name 1 558  
264 14 Dtool_pUk_UMME 4 271 544 0 14 Dtool_pUk_UMME 3 4 this 3 594  3 out 1 545  12 indent_level 1 547  
265 14 Dtool_pUk_7FOX 4 271 544 0 14 Dtool_pUk_7FOX 2 4 this 3 594  3 out 1 545  
266 14 Dtool_pUk_BXYT 6 272 593 0 14 Dtool_pUk_BXYT 0 
76
522 8 TextFont 26625 8 TextFont 8 TextFont 0 0 0 0 271 0 7 272 273 274 275 276 277 278 0 2 3 523 267 268 3 524 269 270 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : TextFont
// Description : An encapsulation of a font; i.e. a set of glyphs that
//               may be assembled together by a TextNode to represent
//               a string of text.
//
//               This is just an abstract interface; see
//               StaticTextFont or DynamicTextFont for an actual
//               implementation.
////////////////////////////////////////////////////////////////////

523 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

524 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

525 15 DynamicTextPage 141313 15 DynamicTextPage 15 DynamicTextPage 0 0 0 0 281 0 2 279 280 0 1 0 526 0 0 0 0 419
////////////////////////////////////////////////////////////////////
//       Class : DynamicTextPage
// Description : A single "page" of a DynamicTextFont.  This is a
//               single texture that holds a number of glyphs for
//               rendering.  The font starts out with one page, and
//               will add more as it needs them.
////////////////////////////////////////////////////////////////////

526 7 Texture 2049 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

527 15 DynamicTextFont 26625 15 DynamicTextFont 15 DynamicTextFont 0 0 0 1 286 287 0 31 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 0 2 3 522 282 283 3 528 284 285 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : DynamicTextFont
// Description : A DynamicTextFont is a special TextFont object that
//               rasterizes its glyphs from a standard font file
//               (e.g. a TTF file) on the fly.  It requires the
//               FreeType 2.0 library (or any higher,
//               backward-compatible version).
////////////////////////////////////////////////////////////////////

528 12 FreetypeFont 2049 12 FreetypeFont 12 FreetypeFont 0 0 0 0 0 0 0 0 0 0 0 481
////////////////////////////////////////////////////////////////////
//       Class : FreetypeFont
// Description : This is a common base class for both DynamicTextFont
//               and PNMTextMaker.  Both of these are utility classes
//               that use the FreeType library to generate glyphs from
//               fonts; this class abstracts out that common wrapper
//               around FreeType.
////////////////////////////////////////////////////////////////////

529 8 FontPool 141313 8 FontPool 8 FontPool 0 0 0 0 328 0 9 319 320 321 322 323 324 325 326 327 0 0 0 0 402
////////////////////////////////////////////////////////////////////
//       Class : FontPool
// Description : This is the preferred interface for loading fonts for
//               the TextNode system.  It is similar to ModelPool and
//               TexturePool in that it unifies references to the same
//               filename.
////////////////////////////////////////////////////////////////////

530 13 GeomTextGlyph 75777 13 GeomTextGlyph 13 GeomTextGlyph 0 0 0 0 0 0 1 329 0 1 0 531 0 0 0 0 555
////////////////////////////////////////////////////////////////////
//       Class : GeomTextGlyph
// Description : This is a specialization on Geom for containing a
//               triangle strip intended to represent a
//               DynamicTextGlyph.  Its sole purpose is to maintain
//               the geom count on the glyph, so we can determine the
//               actual usage count on a dynamic glyph (and thus know
//               when it is safe to recycle the glyph).
////////////////////////////////////////////////////////////////////

531 4 Geom 2049 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

532 14 StaticTextFont 141313 14 StaticTextFont 14 StaticTextFont 0 0 0 1 330 332 0 1 331 0 1 0 522 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : StaticTextFont
// Description : A StaticTextFont is loaded up from a model that was
//               previously generated via egg-mkfont, and contains all
//               of its glyphs already generated and available for
//               use.  It doesn't require linking with any external
//               libraries like FreeType.
////////////////////////////////////////////////////////////////////

533 14 TextProperties 141313 14 TextProperties 14 TextProperties 0 0 0 1 333 406 0 72 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 0 0 0 1 534 1219
////////////////////////////////////////////////////////////////////
//       Class : TextProperties
// Description : This defines the set of visual properties that may be
//               assigned to the individual characters of the text.
//               (Properties which affect the overall block of text
//               can only be specified on the TextNode directly).
//
//               Typically, there is just one set of properties on a
//               given block of text, which is set directly on the
//               TextNode (TextNode inherits from TextProperties).
//               That makes all of the text within a particular block
//               have the same appearance.
//
//               This separate class exists in order to implement
//               multiple different kinds of text appearing within one
//               block.  The text string itself may reference a
//               TextProperties structure by name using the \1 and \2
//               tokens embedded within the string; each nested
//               TextProperties structure modifies the appearance of
//               subsequent text within the block.
////////////////////////////////////////////////////////////////////

534 9 Alignment 794624 25 TextProperties::Alignment 25 TextProperties::Alignment 533 0 0 0 0 0 0 0 0 3 6 A_left 22 TextProperties::A_left 0 7 A_right 23 TextProperties::A_right 1 8 A_center 24 TextProperties::A_center 2 0 0

535 8 TextNode 26625 8 TextNode 8 TextNode 0 0 0 1 413 414 0 101 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 0 3 3 536 407 408 3 537 409 410 3 533 411 412 0 0 1336
////////////////////////////////////////////////////////////////////
//       Class : TextNode
// Description : The primary interface to this module.  This class
//               does basic text assembly; given a string of text and
//               a TextFont object, it creates a piece of geometry
//               that may be placed in the 3-d or 2-d world to
//               represent the indicated text.
//
//               The TextNode may be used in one of two ways.
//               Naively, it may simply be parented directly into the
//               scene graph and rendered as if it were a GeomNode; in
//               this mode, the actual polygon geometry that renders
//               the text is not directly visible or accessible, but
//               remains hidden within the TextNode.
//
//               The second way TextNode may be used is as a text
//               generator.  To use it in this way, do not parent the
//               TextNode to the scene graph; instead, set the
//               properties of the text and call generate() to return
//               an ordinary node, containing ordinary geometry, which
//               you may use however you like.  Each time you call
//               generate() a new node is returned.
////////////////////////////////////////////////////////////////////

536 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

537 11 TextEncoder 2049 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

538 21 TextPropertiesManager 43009 21 TextPropertiesManager 21 TextPropertiesManager 0 0 0 0 0 0 6 516 517 518 519 520 521 0 0 0 0 1178
////////////////////////////////////////////////////////////////////
//       Class : TextPropertiesManager
// Description : This defines all of the TextProperties structures
//               that might be referenced by name from an embedded
//               text string.
//
//               A text string, as rendered by a TextNode, can contain
//               embedded references to one of the TextProperties
//               defined here, by enclosing the name between \1 (ASCII
//               0x01) characters; this causes a "push" to the named
//               state.  All text following the closing \1 character
//               will then be rendered in the new state.  The next \2
//               (ASCII 0x02) character will then restore the previous
//               state for subsequent text.
//
//               For instance, "x\1up\1n\2 + y" indicates that the
//               character "x" will be rendered in the normal state,
//               the character "n" will be rendered in the "up" state,
//               and then " + y" will be rendered in the normal state
//               again.
////////////////////////////////////////////////////////////////////

539 16 TextFont const * 8576 16 TextFont const * 16 TextFont const * 0 0 540 0 0 0 0 0 0 0 0 0

540 14 TextFont const 8832 14 TextFont const 14 TextFont const 0 0 522 0 0 0 0 0 0 0 0 0

541 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

542 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

543 10 TextFont * 8576 10 TextFont * 10 TextFont * 0 0 522 0 0 0 0 0 0 0 0 0

544 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

545 9 ostream * 8576 9 ostream * 9 ostream * 0 0 546 0 0 0 0 0 0 0 0 0

546 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

547 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

548 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

549 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 548 0 0 0 0 0 0 0 0 0

550 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 523 0 0 0 0 0 0 0 0 0

551 9 Namable * 8576 9 Namable * 9 Namable * 0 0 524 0 0 0 0 0 0 0 0 0

552 23 DynamicTextPage const * 8576 23 DynamicTextPage const * 23 DynamicTextPage const * 0 0 553 0 0 0 0 0 0 0 0 0

553 21 DynamicTextPage const 8832 21 DynamicTextPage const 21 DynamicTextPage const 0 0 525 0 0 0 0 0 0 0 0 0

554 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 555 0 0 0 0 0 0 0 0 0

555 14 Filename const 8832 14 Filename const 14 Filename const 0 0 556 0 0 0 0 0 0 0 0 0

556 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

557 17 DynamicTextFont * 8576 17 DynamicTextFont * 17 DynamicTextFont * 0 0 527 0 0 0 0 0 0 0 0 0

558 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

559 23 DynamicTextFont const * 8576 23 DynamicTextFont const * 23 DynamicTextFont const * 0 0 560 0 0 0 0 0 0 0 0 0

560 21 DynamicTextFont const 8832 21 DynamicTextFont const 21 DynamicTextFont const 0 0 527 0 0 0 0 0 0 0 0 0

561 10 FilterType 794624 19 Texture::FilterType 19 Texture::FilterType 526 0 0 0 0 0 0 0 0 9 10 FT_nearest 19 Texture::FT_nearest 0 9 FT_linear 18 Texture::FT_linear 1 25 FT_nearest_mipmap_nearest 34 Texture::FT_nearest_mipmap_nearest 2 24 FT_linear_mipmap_nearest 33 Texture::FT_linear_mipmap_nearest 3 24 FT_nearest_mipmap_linear 33 Texture::FT_nearest_mipmap_linear 4 23 FT_linear_mipmap_linear 32 Texture::FT_linear_mipmap_linear 5 9 FT_shadow 18 Texture::FT_shadow 6 10 FT_default 19 Texture::FT_default 7 10 FT_invalid 19 Texture::FT_invalid 8 0 0

562 17 DynamicTextPage * 8576 17 DynamicTextPage * 17 DynamicTextPage * 0 0 525 0 0 0 0 0 0 0 0 0

563 14 FreetypeFont * 8576 14 FreetypeFont * 14 FreetypeFont * 0 0 528 0 0 0 0 0 0 0 0 0

564 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 536 0 0 0 0 0 0 0 0 0

565 16 StaticTextFont * 8576 16 StaticTextFont * 16 StaticTextFont * 0 0 532 0 0 0 0 0 0 0 0 0

566 16 TextProperties * 8576 16 TextProperties * 16 TextProperties * 0 0 533 0 0 0 0 0 0 0 0 0

567 22 TextProperties const * 8576 22 TextProperties const * 22 TextProperties const * 0 0 568 0 0 0 0 0 0 0 0 0

568 20 TextProperties const 8832 20 TextProperties const 20 TextProperties const 0 0 533 0 0 0 0 0 0 0 0 0

569 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 570 0 0 0 0 0 0 0 0 0

570 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 571 0 0 0 0 0 0 0 0 0

571 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

572 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 571 0 0 0 0 0 0 0 0 0

573 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 574 0 0 0 0 0 0 0 0 0

574 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 575 0 0 0 0 0 0 0 0 0

575 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

576 9 LVector2f 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 895
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

577 11 LVector2f * 8576 11 LVector2f * 11 LVector2f * 0 0 576 0 0 0 0 0 0 0 0 0

578 10 TextNode * 8576 10 TextNode * 10 TextNode * 0 0 535 0 0 0 0 0 0 0 0 0

579 16 TextNode const * 8576 16 TextNode const * 16 TextNode const * 0 0 580 0 0 0 0 0 0 0 0 0

580 14 TextNode const 8832 14 TextNode const 14 TextNode const 0 0 535 0 0 0 0 0 0 0 0 0

581 9 Texture * 8576 9 Texture * 9 Texture * 0 0 526 0 0 0 0 0 0 0 0 0

582 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 583 0 0 0 0 0 0 0 0 0

583 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 584 0 0 0 0 0 0 0 0 0

584 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

585 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 584 0 0 0 0 0 0 0 0 0

586 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

587 9 UsageHint 794624 20 GeomEnums::UsageHint 20 GeomEnums::UsageHint 588 0 0 0 0 0 0 0 0 5 9 UH_client 20 GeomEnums::UH_client 0 9 UH_stream 20 GeomEnums::UH_stream 1 10 UH_dynamic 21 GeomEnums::UH_dynamic 2 9 UH_static 20 GeomEnums::UH_static 3 14 UH_unspecified 25 GeomEnums::UH_unspecified 4 0 382
// The usage hint describes to the rendering backend how often the
// data in question will be modified and/or rendered.  It allows the
// backend to make appropriate choices about what part of memory the
// data should be stored in.
// The hint is provided as a performance optimization only, and does
// not constrain actual usage; although it may be an important
// optimization.

588 9 GeomEnums 2048 9 GeomEnums 9 GeomEnums 0 0 0 0 0 0 0 0 0 0 0 400
////////////////////////////////////////////////////////////////////
//       Class : GeomEnums
// Description : This class exists just to provide scoping for the
//               various enumerated types used by Geom,
//               GeomVertexData, GeomVertexArrayData, GeomPrimitive,
//               and other related classes.
////////////////////////////////////////////////////////////////////

589 8 Encoding 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 537 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

590 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

591 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 590 0 0 0 0 0 0 0 0 0

592 13 TextEncoder * 8576 13 TextEncoder * 13 TextEncoder * 0 0 537 0 0 0 0 0 0 0 0 0

593 23 TextPropertiesManager * 8576 23 TextPropertiesManager * 23 TextPropertiesManager * 0 0 538 0 0 0 0 0 0 0 0 0

594 29 TextPropertiesManager const * 8576 29 TextPropertiesManager const * 29 TextPropertiesManager const * 0 0 595 0 0 0 0 0 0 0 0 0

595 27 TextPropertiesManager const 8832 27 TextPropertiesManager const 27 TextPropertiesManager const 0 0 538 0 0 0 0 0 0 0 0 0

596 7 wstring 2048 23 basic_string< wchar_t > 23 basic_string< wchar_t > 0 0 0 0 0 0 0 0 0 0 0 0

597 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
