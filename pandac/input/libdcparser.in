1145555709
2 2
11 libdcparser 4 5HfQ 6 direct 
226
240 18 ~DCPackerInterface 4 468 37 DCPackerInterface::~DCPackerInterface 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual DCPackerInterface::~DCPackerInterface(void);

241 8 get_name 4 468 27 DCPackerInterface::get_name 0 1 1 997
// Filename: dcPackerInterface.I
// Created by:  drose (18Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::get_name
//       Access: Published
//  Description: Returns the name of this field, or empty string
//               if the field is unnamed.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &DCPackerInterface::get_name(void) const;

242 15 find_seek_index 4 468 34 DCPackerInterface::find_seek_index 0 1 2 849
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::find_seek_index
//       Access: Published
//  Description: Returns the index number to be passed to a future
//               call to DCPacker::seek() to seek directly to the
//               named field without having to look up the field name
//               in a table later, or -1 if the named field cannot be
//               found.
//
//               If the named field is nested within a switch or some
//               similar dynamic structure that reveals different
//               fields based on the contents of the data, this
//               mechanism cannot be used to pre-fetch the field index
//               number--you must seek for the field by name.
////////////////////////////////////////////////////////////////////
79
int DCPackerInterface::find_seek_index(basic_string< char > const &name) const;

243 8 as_field 4 468 27 DCPackerInterface::as_field 0 2 3 4 474
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
51
virtual DCField *DCPackerInterface::as_field(void);

244 19 as_switch_parameter 4 468 38 DCPackerInterface::as_switch_parameter 0 2 5 6 496
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_switch_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
72
virtual DCSwitchParameter *DCPackerInterface::as_switch_parameter(void);

245 18 as_class_parameter 4 468 37 DCPackerInterface::as_class_parameter 0 2 7 8 494
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::as_class_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
70
virtual DCClassParameter *DCPackerInterface::as_class_parameter(void);

246 11 check_match 4 468 30 DCPackerInterface::check_match 0 3 9 10 11 1138
////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if the other interface is bitwise the
//               same as this one--that is, a uint32 only matches a
//               uint32, etc. Names of components, and range limits,
//               are not compared.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPackerInterface::check_match
//       Access: Published
//  Description: Returns true if this interface is bitwise the same as
//               the interface described with the indicated formatted
//               string, e.g. "(uint8, uint8, int16)", or false
//               otherwise.
//
//               If DCFile is not NULL, it specifies the DCFile that
//               was previously loaded, from which some predefined
//               structs and typedefs may be referenced in the
//               description string.
////////////////////////////////////////////////////////////////////
81
inline bool DCPackerInterface::check_match(DCPackerInterface const *other) const;

247 14 ~DCKeywordList 4 469 29 DCKeywordList::~DCKeywordList 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
DCKeywordList::~DCKeywordList(void);

248 11 has_keyword 4 469 26 DCKeywordList::has_keyword 0 2 12 13 636
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::has_keyword
//       Access: Published
//  Description: Returns true if this list includes the indicated
//               keyword, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool DCKeywordList::has_keyword(basic_string< char > const &name) const;

249 16 get_num_keywords 4 469 31 DCKeywordList::get_num_keywords 0 1 14 274
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords in the list.
////////////////////////////////////////////////////////////////////
48
int DCKeywordList::get_num_keywords(void) const;

250 11 get_keyword 4 469 26 DCKeywordList::get_keyword 0 1 15 262
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword
//       Access: Published
//  Description: Returns the nth keyword in the list.
////////////////////////////////////////////////////////////////////
57
DCKeyword const *DCKeywordList::get_keyword(int n) const;

251 19 get_keyword_by_name 4 469 34 DCKeywordList::get_keyword_by_name 0 1 16 383
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword in the list with the indicated
//               name, or NULL if there is no keyword in the list with
//               that name.
////////////////////////////////////////////////////////////////////
92
DCKeyword const *DCKeywordList::get_keyword_by_name(basic_string< char > const &name) const;

252 16 compare_keywords 4 469 31 DCKeywordList::compare_keywords 0 1 17 397
////////////////////////////////////////////////////////////////////
//     Function: DCKeywordList::compare_keywords
//       Access: Published
//  Description: Returns true if this list has the same keywords
//               as the other list, false if some keywords differ.
//               Order is not considered important.
////////////////////////////////////////////////////////////////////
71
bool DCKeywordList::compare_keywords(DCKeywordList const &other) const;

253 27 upcast_to_DCPackerInterface 12 470 36 DCField::upcast_to_DCPackerInterface 0 1 49 40
upcast from DCField to DCPackerInterface
62
DCPackerInterface *DCField::upcast_to_DCPackerInterface(void);

254 19 downcast_to_DCField 12 468 38 DCPackerInterface::downcast_to_DCField 0 1 50 42
downcast from DCPackerInterface to DCField
54
DCField *DCPackerInterface::downcast_to_DCField(void);

255 23 upcast_to_DCKeywordList 12 470 32 DCField::upcast_to_DCKeywordList 0 1 51 36
upcast from DCField to DCKeywordList
54
DCKeywordList *DCField::upcast_to_DCKeywordList(void);

256 19 downcast_to_DCField 12 469 34 DCKeywordList::downcast_to_DCField 0 1 52 38
downcast from DCKeywordList to DCField
50
DCField *DCKeywordList::downcast_to_DCField(void);

257 8 ~DCField 4 470 17 DCField::~DCField 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DCField::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual DCField::~DCField(void);

258 10 get_number 4 470 19 DCField::get_number 0 1 18 1040
// Filename: dcField.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               field.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCField::get_number(void) const;

259 9 get_class 4 470 18 DCField::get_class 0 1 19 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_class
//       Access: Published
//  Description: Returns the DCClass pointer for the class that
//               contains this field.
////////////////////////////////////////////////////////////////////
47
inline DCClass *DCField::get_class(void) const;

260 8 as_field 4 470 17 DCField::as_field 0 2 20 21 454
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_field
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
41
virtual DCField *DCField::as_field(void);

261 15 as_atomic_field 4 470 24 DCField::as_atomic_field 0 2 22 23 794
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_atomic_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to an atomic
//               field pointer, if this is in fact an atomic field;
//               otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
54
virtual DCAtomicField *DCField::as_atomic_field(void);

262 18 as_molecular_field 4 470 27 DCField::as_molecular_field 0 2 24 25 808
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_molecular_field
//       Access: Published, Virtual
//  Description: Returns the same field pointer converted to a
//               molecular field pointer, if this is in fact a
//               molecular field; otherwise, returns NULL.
////////////////////////////////////////////////////////////////////
60
virtual DCMolecularField *DCField::as_molecular_field(void);

263 12 as_parameter 4 470 21 DCField::as_parameter 0 2 26 27 462
////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCField::as_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
49
virtual DCParameter *DCField::as_parameter(void);

264 11 format_data 4 470 20 DCField::format_data 0 1 28 412
////////////////////////////////////////////////////////////////////
//     Function: DCField::format_data
//       Access: Published
//  Description: Given a blob that represents the packed data for this
//               field, returns a string formatting it for human
//               consumption.  Returns empty string if there is an error.
////////////////////////////////////////////////////////////////////
83
basic_string< char > DCField::format_data(basic_string< char > const &packed_data);

265 12 parse_string 4 470 21 DCField::parse_string 0 1 29 515
////////////////////////////////////////////////////////////////////
//     Function: DCField::parse_string
//       Access: Published
//  Description: Given a human-formatted string (for instance, as
//               returned by format_data(), above) that represents the
//               value of this field, parse the string and return the
//               corresponding packed data.  Returns empty string if
//               there is an error.
////////////////////////////////////////////////////////////////////
89
basic_string< char > DCField::parse_string(basic_string< char > const &formatted_string);

266 15 validate_ranges 4 470 24 DCField::validate_ranges 0 1 30 479
////////////////////////////////////////////////////////////////////
//     Function: DCField::validate_ranges
//       Access: Published
//  Description: Verifies that all of the packed values in the field
//               data are within the specified ranges and that there
//               are no extra bytes on the end of the record.  Returns
//               true if all fields are valid, false otherwise.
////////////////////////////////////////////////////////////////////
77
bool DCField::validate_ranges(basic_string< char > const &packed_data) const;

267 17 has_default_value 4 470 26 DCField::has_default_value 0 1 31 339
////////////////////////////////////////////////////////////////////
//     Function: DCField::has_default_value
//       Access: Published
//  Description: Returns true if a default value has been explicitly
//               established for this field, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool DCField::has_default_value(void) const;

268 17 get_default_value 4 470 26 DCField::get_default_value 0 1 32 494
////////////////////////////////////////////////////////////////////
//     Function: DCField::get_default_value
//       Access: Published
//  Description: Returns the default value for this field.  If a
//               default value has been explicitly set
//               (e.g. has_default_value() returns true), returns that
//               value; otherwise, returns an implicit default for the
//               field.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &DCField::get_default_value(void) const;

269 11 is_required 4 470 20 DCField::is_required 0 1 33 312
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_required
//       Access: Published
//  Description: Returns true if the "required" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool DCField::is_required(void) const;

270 12 is_broadcast 4 470 21 DCField::is_broadcast 0 1 34 314
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_broadcast
//       Access: Published
//  Description: Returns true if the "broadcast" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool DCField::is_broadcast(void) const;

271 6 is_ram 4 470 15 DCField::is_ram 0 1 35 302
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ram
//       Access: Published
//  Description: Returns true if the "ram" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
40
inline bool DCField::is_ram(void) const;

272 5 is_db 4 470 14 DCField::is_db 0 1 36 300
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_db
//       Access: Published
//  Description: Returns true if the "db" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
39
inline bool DCField::is_db(void) const;

273 9 is_clsend 4 470 18 DCField::is_clsend 0 1 37 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clsend
//       Access: Published
//  Description: Returns true if the "clsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clsend(void) const;

274 9 is_clrecv 4 470 18 DCField::is_clrecv 0 1 38 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_clrecv
//       Access: Published
//  Description: Returns true if the "clrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_clrecv(void) const;

275 10 is_ownsend 4 470 19 DCField::is_ownsend 0 1 39 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownsend
//       Access: Published
//  Description: Returns true if the "ownsend" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownsend(void) const;

276 10 is_ownrecv 4 470 19 DCField::is_ownrecv 0 1 40 310
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_ownrecv
//       Access: Published
//  Description: Returns true if the "ownrecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool DCField::is_ownrecv(void) const;

277 9 is_airecv 4 470 18 DCField::is_airecv 0 1 41 308
////////////////////////////////////////////////////////////////////
//     Function: DCField::is_airecv
//       Access: Published
//  Description: Returns true if the "airecv" flag is set for this
//               field, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool DCField::is_airecv(void) const;

278 6 output 4 470 15 DCField::output 0 1 42 292
////////////////////////////////////////////////////////////////////
//     Function : DCField::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
48
inline void DCField::output(ostream &out) const;

279 5 write 4 470 14 DCField::write 0 1 43 286
////////////////////////////////////////////////////////////////////
//     Function : DCField::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
65
inline void DCField::write(ostream &out, int indent_level) const;

280 9 pack_args 4 470 18 DCField::pack_args 0 1 44 470
////////////////////////////////////////////////////////////////////
//     Function: DCField::pack_args
//       Access: Published
//  Description: Packs the Python arguments from the indicated tuple
//               into the packer.  Returns true on success, false on
//               failure.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
68
bool DCField::pack_args(DCPacker &packer, PyObject *sequence) const;

281 11 unpack_args 4 470 20 DCField::unpack_args 0 1 45 491
////////////////////////////////////////////////////////////////////
//     Function: DCField::unpack_args
//       Access: Published
//  Description: Unpacks the values from the packer, beginning at
//               the current point in the unpack_buffer, into a Python
//               tuple and returns the tuple.
//
//               It is assumed that the packer is currently positioned
//               on this field.
////////////////////////////////////////////////////////////////////
55
PyObject *DCField::unpack_args(DCPacker &packer) const;

282 14 receive_update 4 470 23 DCField::receive_update 0 1 46 378
////////////////////////////////////////////////////////////////////
//     Function: DCField::receive_update
//       Access: Published
//  Description: Extracts the update message out of the datagram and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
72
void DCField::receive_update(DCPacker &packer, PyObject *distobj) const;

283 20 client_format_update 4 470 29 DCField::client_format_update 0 1 47 388
////////////////////////////////////////////////////////////////////
//     Function: DCField::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
72
Datagram DCField::client_format_update(int do_id, PyObject *args) const;

284 16 ai_format_update 4 470 25 DCField::ai_format_update 0 1 48 380
////////////////////////////////////////////////////////////////////
//     Function: DCField::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
118
Datagram DCField::ai_format_update(int do_id, unsigned __int64 to_id, unsigned __int64 from_id, PyObject *args) const;

285 10 DCPackData 4 471 22 DCPackData::DCPackData 0 1 53 897
// Filename: dcPackData.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline DCPackData::DCPackData(void);

286 11 ~DCPackData 4 471 23 DCPackData::~DCPackData 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline DCPackData::~DCPackData(void);

287 5 clear 4 471 17 DCPackData::clear 0 1 54 318
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::clear
//       Access: Published
//  Description: Empties the contents of the data (without necessarily
//               freeing its allocated memory).
////////////////////////////////////////////////////////////////////
36
inline void DCPackData::clear(void);

288 10 get_string 4 471 22 DCPackData::get_string 0 1 55 297
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_string
//       Access: Published
//  Description: Returns the data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > DCPackData::get_string(void) const;

289 10 get_length 4 471 22 DCPackData::get_length 0 1 56 393
////////////////////////////////////////////////////////////////////
//     Function: DCPackData::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
55
inline unsigned int DCPackData::get_length(void) const;

290 8 DCPacker 4 472 18 DCPacker::DCPacker 0 1 57 221
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
25
DCPacker::DCPacker(void);

291 9 ~DCPacker 4 472 19 DCPacker::~DCPacker 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
26
DCPacker::~DCPacker(void);

292 10 clear_data 4 472 20 DCPacker::clear_data 0 1 58 1116
// Filename: dcPacker.I
// Created by:  drose (15Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::clear_data
//       Access: Published
//  Description: Empties the data in the pack buffer and unpack
//               buffer.  This should be called between calls to
//               begin_pack(), unless you want to concatenate all of
//               the pack results together.
////////////////////////////////////////////////////////////////////
39
inline void DCPacker::clear_data(void);

293 10 begin_pack 4 472 20 DCPacker::begin_pack 0 1 59 703
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_pack
//       Access: Published
//  Description: Begins a packing session.  The parameter is the DC
//               object that describes the packing format; it may be a
//               DCParameter or DCField.
//
//               Unless you call clear_data() between sessions,
//               multiple packing sessions will be concatenated
//               together into the same buffer.  If you wish to add
//               bytes to the buffer between packing sessions, use
//               append_data() or get_write_pointer().
////////////////////////////////////////////////////////////////////
57
void DCPacker::begin_pack(DCPackerInterface const *root);

294 8 end_pack 4 472 18 DCPacker::end_pack 0 1 60 382
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_pack
//       Access: Published, Virtual
//  Description: Finishes a packing session.
//
//               The return value is true on success, or false if
//               there has been some error during packing.
////////////////////////////////////////////////////////////////////
30
bool DCPacker::end_pack(void);

295 15 set_unpack_data 4 472 25 DCPacker::set_unpack_data 0 1 61 768
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::set_unpack_data
//       Access: Public
//  Description: Sets up the unpack_data pointer.  You may call this
//               before calling the version of begin_unpack() that
//               takes only one parameter.
////////////////////////////////////////////////////////////////////
65
void DCPacker::set_unpack_data(basic_string< char > const &data);

296 12 begin_unpack 4 472 22 DCPacker::begin_unpack 0 1 62 688
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_unpack
//       Access: Public
//  Description: Begins an unpacking session.  You must have
//               previously called set_unpack_data() to specify a
//               buffer to unpack.
//
//               If there was data left in the buffer after a previous
//               begin_unpack() .. end_unpack() session, the new
//               session will resume from the current point.  This
//               method may be used, therefore, to unpack a sequence
//               of objects from the same buffer.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_unpack(DCPackerInterface const *root);

297 10 end_unpack 4 472 20 DCPacker::end_unpack 0 1 63 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_unpack
//       Access: Published
//  Description: Finishes the unpacking session.
//
//               The return value is true on success, or false if
//               there has been some error during unpacking (or if all
//               fields have not been unpacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_unpack(void);

298 12 begin_repack 4 472 22 DCPacker::begin_repack 0 1 64 937
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::begin_repack
//       Access: Public
//  Description: Begins a repacking session.  You must have previously
//               called set_unpack_data() to specify a buffer to
//               unpack.
//
//               Unlike begin_pack() or begin_unpack() you may not
//               concatenate the results of multiple begin_repack()
//               sessions in one buffer.
//
//               Also, unlike in packing or unpacking modes, you may
//               not walk through the fields from beginning to end, or
//               even pack two consecutive fields at once.  Instead,
//               you must call seek() for each field you wish to
//               modify and pack only that one field; then call seek()
//               again to modify another field.
////////////////////////////////////////////////////////////////////
59
void DCPacker::begin_repack(DCPackerInterface const *root);

299 10 end_repack 4 472 20 DCPacker::end_repack 0 1 65 440
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::end_repack
//       Access: Published
//  Description: Finishes the repacking session.
//
//               The return value is true on success, or false if
//               there has been some error during repacking (or if all
//               fields have not been repacked).
////////////////////////////////////////////////////////////////////
32
bool DCPacker::end_repack(void);

300 4 seek 4 472 14 DCPacker::seek 0 2 66 67 1292
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Sets the current unpack (or repack) position to the
//               named field.  In unpack mode, the next call to
//               unpack_*() or push() will begin to read the named
//               field.  In repack mode, the next call to pack_*() or
//               push() will modify the named field.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::seek
//       Access: Published
//  Description: Seeks to the field indentified by seek_index, which
//               was returned by an earlier call to
//               DCField::find_seek_index() to get the index of some
//               nested field.  Also see the version of seek() that
//               accepts a field name.
//
//               Returns true if successful, false if the field is not
//               known (or if the packer is in an invalid mode).
////////////////////////////////////////////////////////////////////
60
bool DCPacker::seek(basic_string< char > const &field_name);

301 17 has_nested_fields 4 472 27 DCPacker::has_nested_fields 0 1 68 529
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::has_nested_fields
//       Access: Published
//  Description: Returns true if the current field has any nested
//               fields (and thus expects a push() .. pop()
//               interface), or false otherwise.  If this returns
//               true, get_num_nested_fields() may be called to
//               determine how many nested fields are expected.
////////////////////////////////////////////////////////////////////
52
inline bool DCPacker::has_nested_fields(void) const;

302 21 get_num_nested_fields 4 472 31 DCPacker::get_num_nested_fields 0 1 69 885
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_nested_fields
//       Access: Published
//  Description: Returns the number of nested fields associated with
//               the current field, if has_nested_fields() returned
//               true.
//
//               The return value may be -1 to indicate that a
//               variable number of nested fields are accepted by this
//               field type (e.g. a variable-length array).
//
//               Note that this method is unreliable to determine how
//               many fields you must traverse before you can call
//               pop(), since particularly in the presence of a
//               DCSwitch, it may change during traversal.  Use
//               more_nested_fields() instead.
////////////////////////////////////////////////////////////////////
55
inline int DCPacker::get_num_nested_fields(void) const;

303 18 more_nested_fields 4 472 28 DCPacker::more_nested_fields 0 1 70 389
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::more_nested_fields
//       Access: Published
//  Description: Returns true if there are more nested fields to pack
//               or unpack in the current push sequence, false if it
//               is time to call pop().
////////////////////////////////////////////////////////////////////
53
inline bool DCPacker::more_nested_fields(void) const;

304 18 get_current_parent 4 472 28 DCPacker::get_current_parent 0 1 71 436
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_parent
//       Access: Published
//  Description: Returns the field that we left in our last call to
//               push(): the owner of the current level of fields.
//               This may be NULL at the beginning of the pack
//               operation.
////////////////////////////////////////////////////////////////////
73
inline DCPackerInterface const *DCPacker::get_current_parent(void) const;

305 17 get_current_field 4 472 27 DCPacker::get_current_field 0 1 72 458
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field
//       Access: Published
//  Description: Returns the field that will be referenced by the next
//               call to pack_*() or unpack_*().  This will be NULL if
//               we have unpacked (or packed) all fields, or if it is
//               time to call pop().
////////////////////////////////////////////////////////////////////
72
inline DCPackerInterface const *DCPacker::get_current_field(void) const;

306 15 get_last_switch 4 472 25 DCPacker::get_last_switch 0 1 73 746
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_last_switch
//       Access: Published
//  Description: Returns a pointer to the last DCSwitch instance that
//               we have passed by and selected one case of during the
//               pack/unpack process.  Each time we encounter a new
//               DCSwitch and select a case, this will change state.
//
//               This may be used to detect when a DCSwitch has been
//               selected.  At the moment this changes state,
//               get_current_parent() will contain the particular
//               SwitchCase that was selected by the switch.
////////////////////////////////////////////////////////////////////
70
inline DCSwitchParameter const *DCPacker::get_last_switch(void) const;

307 13 get_pack_type 4 472 23 DCPacker::get_pack_type 0 1 74 771
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_pack_type
//       Access: Published
//  Description: Returns the type of value expected by the current
//               field.  See the enumerated type definition at the top
//               of DCPackerInterface.h.  If this returns one of
//               PT_double, PT_int, PT_int64, or PT_string, then you
//               should call the corresponding pack_double(),
//               pack_int() function (or unpack_double(),
//               unpack_int(), etc.) to transfer data.  Otherwise, you
//               should call push() and begin packing or unpacking the
//               nested fields.
////////////////////////////////////////////////////////////////////
54
inline DCPackType DCPacker::get_pack_type(void) const;

308 22 get_current_field_name 4 472 32 DCPacker::get_current_field_name 0 1 75 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_current_field_name
//       Access: Published
//  Description: Returns the name of the current field, if it has a
//               name, or the empty string if the field does not have
//               a name or there is no current field.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > DCPacker::get_current_field_name(void) const;

309 4 push 4 472 14 DCPacker::push 0 1 76 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::push
//       Access: Published
//  Description: Marks the beginning of a nested series of fields.
//
//               This must be called before filling the elements of an
//               array or the individual fields in a structure field.
//               It must also be balanced by a matching pop().
//
//               It is necessary to use push() / pop() only if
//               has_nested_fields() returns true.
////////////////////////////////////////////////////////////////////
26
void DCPacker::push(void);

310 3 pop 4 472 13 DCPacker::pop 0 1 77 495
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pop
//       Access: Published
//  Description: Marks the end of a nested series of fields.
//
//               This must be called to match a previous push() only
//               after all the expected number of nested fields have
//               been packed.  It is an error to call it too early, or
//               too late.
////////////////////////////////////////////////////////////////////
25
void DCPacker::pop(void);

311 11 pack_double 4 472 21 DCPacker::pack_double 0 1 78 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_double
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::pack_double(double value);

312 8 pack_int 4 472 18 DCPacker::pack_int 0 1 79 295
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
42
inline void DCPacker::pack_int(int value);

313 9 pack_uint 4 472 19 DCPacker::pack_uint 0 1 80 296
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
52
inline void DCPacker::pack_uint(unsigned int value);

314 10 pack_int64 4 472 20 DCPacker::pack_int64 0 1 81 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_int64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::pack_int64(__int64 value);

315 11 pack_uint64 4 472 21 DCPacker::pack_uint64 0 1 82 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_uint64
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::pack_uint64(unsigned __int64 value);

316 11 pack_string 4 472 21 DCPacker::pack_string 0 1 83 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_string
//       Access: Published
//  Description: Packs the indicated numeric or string value into the
//               stream.
////////////////////////////////////////////////////////////////////
69
inline void DCPacker::pack_string(basic_string< char > const &value);

317 18 pack_literal_value 4 472 28 DCPacker::pack_literal_value 0 1 84 402
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_literal_value
//       Access: Published
//  Description: Adds the indicated string value into the stream,
//               representing a single pre-packed field element, or a
//               whole group of field elements at once.
////////////////////////////////////////////////////////////////////
76
inline void DCPacker::pack_literal_value(basic_string< char > const &value);

318 18 pack_default_value 4 472 28 DCPacker::pack_default_value 0 1 85 406
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_default_value
//       Access: Published
//  Description: Adds the default value for the current element into
//               the stream.  If no default has been set for the
//               current element, creates a sensible default.
////////////////////////////////////////////////////////////////////
40
void DCPacker::pack_default_value(void);

319 13 unpack_double 4 472 23 DCPacker::unpack_double 0 1 86 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_double
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline double DCPacker::unpack_double(void);

320 10 unpack_int 4 472 20 DCPacker::unpack_int 0 1 87 593
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
38
inline int DCPacker::unpack_int(void);

321 11 unpack_uint 4 472 21 DCPacker::unpack_uint 0 1 88 595
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
48
inline unsigned int DCPacker::unpack_uint(void);

322 12 unpack_int64 4 472 22 DCPacker::unpack_int64 0 1 89 597
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_int64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
44
inline __int64 DCPacker::unpack_int64(void);

323 13 unpack_uint64 4 472 23 DCPacker::unpack_uint64 0 1 90 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_uint64
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
54
inline unsigned __int64 DCPacker::unpack_uint64(void);

324 13 unpack_string 4 472 23 DCPacker::unpack_string 0 1 91 599
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Published
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_string
//       Access: Public
//  Description: Unpacks the current numeric or string value from the
//               stream.
////////////////////////////////////////////////////////////////////
58
inline basic_string< char > DCPacker::unpack_string(void);

325 20 unpack_literal_value 4 472 30 DCPacker::unpack_literal_value 0 1 92 753
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Published
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_literal_value
//       Access: Public
//  Description: Returns the literal string that represents the packed
//               value of the current field, and advances the field
//               pointer.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > DCPacker::unpack_literal_value(void);

326 15 unpack_validate 4 472 25 DCPacker::unpack_validate 0 1 93 478
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_validate
//       Access: Published
//  Description: Internally unpacks the current numeric or string
//               value and validates it against the type range limits,
//               but does not return the value.  If the current field
//               contains nested fields, validates all of them.
////////////////////////////////////////////////////////////////////
37
void DCPacker::unpack_validate(void);

327 11 unpack_skip 4 472 21 DCPacker::unpack_skip 0 1 94 396
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_skip
//       Access: Published
//  Description: Skips the current field without unpacking it and
//               advances to the next field.  If the current field
//               contains nested fields, skips all of them.
////////////////////////////////////////////////////////////////////
33
void DCPacker::unpack_skip(void);

328 11 pack_object 4 472 21 DCPacker::pack_object 0 1 95 528
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::pack_object
//       Access: Published
//  Description: Packs the Python object of whatever type into the
//               packer.  Each numeric object and string object maps
//               to the corresponding pack_value() call; a tuple or
//               sequence maps to a push() followed by all of the
//               tuple's contents followed by a pop().
////////////////////////////////////////////////////////////////////
45
void DCPacker::pack_object(PyObject *object);

329 13 unpack_object 4 472 23 DCPacker::unpack_object 0 1 96 509
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_object
//       Access: Published
//  Description: Unpacks a Python object of the appropriate type from
//               the stream for the current field.  This may be an
//               integer or a string for a simple field object; if the
//               current field represents a list of fields it will be
//               a tuple.
////////////////////////////////////////////////////////////////////
40
PyObject *DCPacker::unpack_object(void);

330 14 parse_and_pack 4 472 24 DCPacker::parse_and_pack 0 2 97 98 837
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::parse_and_pack
//       Access: Published
//  Description: Parses an object's value according to the DC file
//               syntax (e.g. as a default value string) and packs it.
//               Returns true on success, false on a parse error.
////////////////////////////////////////////////////////////////////
76
bool DCPacker::parse_and_pack(basic_string< char > const &formatted_object);

331 17 unpack_and_format 4 472 27 DCPacker::unpack_and_format 0 4 99 100 101 102 820
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::unpack_and_format
//       Access: Published
//  Description: Unpacks an object and formats its value into a syntax
//               suitable for parsing in the dc file (e.g. as a
//               default value), or as an input to parse_object.
////////////////////////////////////////////////////////////////////
78
basic_string< char > DCPacker::unpack_and_format(bool show_field_names = (1));

332 15 had_parse_error 4 472 25 DCPacker::had_parse_error 0 1 103 394
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_parse_error
//       Access: Published
//  Description: Returns true if there has been an parse error
//               since the most recent call to begin(); this can only
//               happen if you call parse_and_pack().
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_parse_error(void) const;

333 14 had_pack_error 4 472 24 DCPacker::had_pack_error 0 1 104 802
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_pack_error
//       Access: Published
//  Description: Returns true if there has been an packing error
//               since the most recent call to begin(); in particular,
//               this may be called after end() has returned false to
//               determine the nature of the failure.
//
//               A return value of true indicates there was a push/pop
//               mismatch, or the push/pop structure did not match the
//               data structure, or there were the wrong number of
//               elements in a nested push/pop structure, or on unpack
//               that the data stream was truncated.
////////////////////////////////////////////////////////////////////
49
inline bool DCPacker::had_pack_error(void) const;

334 15 had_range_error 4 472 25 DCPacker::had_range_error 0 1 105 735
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_range_error
//       Access: Published
//  Description: Returns true if there has been an range validation
//               error since the most recent call to begin(); in
//               particular, this may be called after end() has
//               returned false to determine the nature of the
//               failure.
//
//               A return value of true indicates a value that was
//               packed or unpacked did not fit within the specified
//               legal range for a parameter, or within the limits of
//               the field size.
////////////////////////////////////////////////////////////////////
50
inline bool DCPacker::had_range_error(void) const;

335 9 had_error 4 472 19 DCPacker::had_error 0 1 106 492
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::had_error
//       Access: Published
//  Description: Returns true if there has been any error (either a
//               pack error or a range error) since the most recent
//               call to begin().  If this returns true, then the
//               matching call to end() will indicate an error
//               (false).
////////////////////////////////////////////////////////////////////
44
inline bool DCPacker::had_error(void) const;

336 22 get_num_unpacked_bytes 4 472 32 DCPacker::get_num_unpacked_bytes 0 1 107 587
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_num_unpacked_bytes
//       Access: Published
//  Description: Returns the number of bytes that have been unpacked
//               so far, or after unpack_end(), the total number of
//               bytes that were unpacked at all.  This can be used to
//               validate that all of the bytes in the buffer were
//               actually unpacked (which is not otherwise considered
//               an error).
////////////////////////////////////////////////////////////////////
65
inline unsigned int DCPacker::get_num_unpacked_bytes(void) const;

337 10 get_length 4 472 20 DCPacker::get_length 0 1 108 391
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_length
//       Access: Published
//  Description: Returns the current length of the buffer.  This is
//               the number of useful bytes stored in the buffer, not
//               the amount of memory it takes up.
////////////////////////////////////////////////////////////////////
53
inline unsigned int DCPacker::get_length(void) const;

338 10 get_string 4 472 20 DCPacker::get_string 0 1 109 611
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Returns the packed data buffer as a string.  Also see
//               get_data().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::get_string
//       Access: Published
//  Description: Copies the packed data into the indicated string.
//               Also see get_data().
////////////////////////////////////////////////////////////////////
61
inline basic_string< char > DCPacker::get_string(void) const;

339 37 get_num_stack_elements_ever_allocated 4 472 47 DCPacker::get_num_stack_elements_ever_allocated 0 1 110 524
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::StackElement::get_num_stack_elements_ever_allocated
//       Access: Published, Static
//  Description: Returns the number of DCPacker::StackElement pointers
//               ever simultaneously allocated; these are now either
//               in active use or have been recycled into the deleted
//               DCPacker::StackElement pool to be used again.
////////////////////////////////////////////////////////////////////
72
static inline int DCPacker::get_num_stack_elements_ever_allocated(void);

340 13 raw_pack_int8 4 472 23 DCPacker::raw_pack_int8 0 1 111 481
// The following methods are used only for packing (or unpacking)
// raw data into the buffer between packing sessions (e.g. between
// calls to end_pack() and the next begin_pack()).

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
47
inline void DCPacker::raw_pack_int8(int value);

341 14 raw_pack_int16 4 472 24 DCPacker::raw_pack_int16 0 1 112 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int16(int value);

342 14 raw_pack_int32 4 472 24 DCPacker::raw_pack_int32 0 1 113 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline void DCPacker::raw_pack_int32(int value);

343 14 raw_pack_int64 4 472 24 DCPacker::raw_pack_int64 0 1 114 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_int64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
52
inline void DCPacker::raw_pack_int64(__int64 value);

344 14 raw_pack_uint8 4 472 24 DCPacker::raw_pack_uint8 0 1 115 297
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint8
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
57
inline void DCPacker::raw_pack_uint8(unsigned int value);

345 15 raw_pack_uint16 4 472 25 DCPacker::raw_pack_uint16 0 1 116 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint16
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint16(unsigned int value);

346 15 raw_pack_uint32 4 472 25 DCPacker::raw_pack_uint32 0 1 117 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint32
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline void DCPacker::raw_pack_uint32(unsigned int value);

347 15 raw_pack_uint64 4 472 25 DCPacker::raw_pack_uint64 0 1 118 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_uint64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
62
inline void DCPacker::raw_pack_uint64(unsigned __int64 value);

348 16 raw_pack_float64 4 472 26 DCPacker::raw_pack_float64 0 1 119 299
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_float64
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline void DCPacker::raw_pack_float64(double value);

349 15 raw_pack_string 4 472 25 DCPacker::raw_pack_string 0 1 120 298
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_pack_string
//       Access: Published
//  Description: Packs the data into the buffer between packing
//               sessions.
////////////////////////////////////////////////////////////////////
73
inline void DCPacker::raw_pack_string(basic_string< char > const &value);

350 15 raw_unpack_int8 4 472 25 DCPacker::raw_unpack_int8 0 1 121 603
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
43
inline int DCPacker::raw_unpack_int8(void);

351 16 raw_unpack_int16 4 472 26 DCPacker::raw_unpack_int16 0 1 122 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int16(void);

352 16 raw_unpack_int32 4 472 26 DCPacker::raw_unpack_int32 0 1 123 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
44
inline int DCPacker::raw_unpack_int32(void);

353 16 raw_unpack_int64 4 472 26 DCPacker::raw_unpack_int64 0 1 124 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_int64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
48
inline __int64 DCPacker::raw_unpack_int64(void);

354 16 raw_unpack_uint8 4 472 26 DCPacker::raw_unpack_uint8 0 1 125 605
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint8
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
53
inline unsigned int DCPacker::raw_unpack_uint8(void);

355 17 raw_unpack_uint16 4 472 27 DCPacker::raw_unpack_uint16 0 1 126 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint16
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint16(void);

356 17 raw_unpack_uint32 4 472 27 DCPacker::raw_unpack_uint32 0 1 127 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint32
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
54
inline unsigned int DCPacker::raw_unpack_uint32(void);

357 17 raw_unpack_uint64 4 472 27 DCPacker::raw_unpack_uint64 0 1 128 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_uint64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
58
inline unsigned __int64 DCPacker::raw_unpack_uint64(void);

358 18 raw_unpack_float64 4 472 28 DCPacker::raw_unpack_float64 0 1 129 609
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_float64
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
49
inline double DCPacker::raw_unpack_float64(void);

359 17 raw_unpack_string 4 472 27 DCPacker::raw_unpack_string 0 1 130 607
////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Published
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCPacker::raw_unpack_string
//       Access: Public
//  Description: Unpacks the data from the buffer between unpacking
//               sessions.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > DCPacker::raw_unpack_string(void);

360 19 as_simple_parameter 4 473 32 DCParameter::as_simple_parameter 0 2 131 132 484
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_simple_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
66
virtual DCSimpleParameter *DCParameter::as_simple_parameter(void);

361 18 as_array_parameter 4 473 31 DCParameter::as_array_parameter 0 2 133 134 482
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCParameter::as_array_parameter
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual DCArrayParameter *DCParameter::as_array_parameter(void);

362 9 make_copy 4 473 22 DCParameter::make_copy 0 1 135 0
60
virtual DCParameter *DCParameter::make_copy(void) const = 0;

363 8 is_valid 4 473 21 DCParameter::is_valid 0 1 136 0
51
virtual bool DCParameter::is_valid(void) const = 0;

364 11 get_typedef 4 473 24 DCParameter::get_typedef 0 1 137 383
////////////////////////////////////////////////////////////////////
//     Function: DCParameter::get_typedef
//       Access: Published
//  Description: If this type has been referenced from a typedef,
//               returns the DCTypedef instance, or NULL if the
//               type was declared on-the-fly.
////////////////////////////////////////////////////////////////////
54
DCTypedef const *DCParameter::get_typedef(void) const;

365 16 get_element_type 4 474 34 DCArrayParameter::get_element_type 0 1 138 309
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_element_type
//       Access: Published
//  Description: Returns the type of the individual elements of this
//               array.
////////////////////////////////////////////////////////////////////
60
DCParameter *DCArrayParameter::get_element_type(void) const;

366 14 get_array_size 4 474 32 DCArrayParameter::get_array_size 0 1 139 379
////////////////////////////////////////////////////////////////////
//     Function: DCArrayParameter::get_array_size
//       Access: Published
//  Description: Returns the fixed number of elements in this array,
//               or -1 if the array may contain a variable number of
//               elements.
////////////////////////////////////////////////////////////////////
49
int DCArrayParameter::get_array_size(void) const;

367 16 get_num_elements 4 475 31 DCAtomicField::get_num_elements 0 1 140 312
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_num_elements
//       Access: Published
//  Description: Returns the number of elements (parameters) of the
//               atomic field.
////////////////////////////////////////////////////////////////////
48
int DCAtomicField::get_num_elements(void) const;

368 11 get_element 4 475 26 DCAtomicField::get_element 0 1 141 299
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element
//       Access: Published
//  Description: Returns the parameter object describing the
//               nth element.
////////////////////////////////////////////////////////////////////
53
DCParameter *DCAtomicField::get_element(int n) const;

369 19 get_element_default 4 475 34 DCAtomicField::get_element_default 0 1 142 854
// These five methods are deprecated and will be removed soon.

////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_default
//       Access: Published
//  Description: Returns the pre-formatted default value associated
//               with the nth element of the field.  This is only
//               valid if has_element_default() returns true, in which
//               case this string represents the bytes that should be
//               assigned to the field as a default value.
//
//               If the element is an array-type element, the returned
//               value will include the two-byte length preceding the
//               array data.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
69
basic_string< char > DCAtomicField::get_element_default(int n) const;

370 19 has_element_default 4 475 34 DCAtomicField::has_element_default 0 1 143 474
// These five methods are deprecated and will be removed soon.

////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::has_element_default
//       Access: Published
//  Description: Returns true if the nth element of the field has a
//               default value specified, false otherwise.
//
//               This is deprecated; use get_element() instead.
////////////////////////////////////////////////////////////////////
53
bool DCAtomicField::has_element_default(int n) const;

371 16 get_element_name 4 475 31 DCAtomicField::get_element_name 0 1 144 582
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_name
//       Access: Published
//  Description: Returns the name of the nth element of the field.
//               This name is strictly for documentary purposes; it
//               does not generally affect operation.  If a name is
//               not specified, this will be the empty string.
//
//               This method is deprecated; use
//               get_element()->get_name() instead.
////////////////////////////////////////////////////////////////////
66
basic_string< char > DCAtomicField::get_element_name(int n) const;

372 16 get_element_type 4 475 31 DCAtomicField::get_element_type 0 1 145 377
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_type
//       Access: Published
//  Description: Returns the numeric type of the nth element of the
//               field.  This method is deprecated; use
//               get_element() instead.
////////////////////////////////////////////////////////////////////
61
DCSubatomicType DCAtomicField::get_element_type(int n) const;

373 19 get_element_divisor 4 475 34 DCAtomicField::get_element_divisor 0 1 146 653
////////////////////////////////////////////////////////////////////
//     Function: DCAtomicField::get_element_divisor
//       Access: Published
//  Description: Returns the divisor associated with the nth element
//               of the field.  This implements an implicit
//               fixed-point system; floating-point values are to be
//               multiplied by this value before encoding into a
//               packet, and divided by this number after decoding.
//
//               This method is deprecated; use
//               get_element()->get_divisor() instead.
////////////////////////////////////////////////////////////////////
52
int DCAtomicField::get_element_divisor(int n) const;

374 14 ~DCDeclaration 4 476 29 DCDeclaration::~DCDeclaration 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DCDeclaration::~DCDeclaration(void);

375 8 as_class 4 476 23 DCDeclaration::as_class 0 2 147 148 466
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_class
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
47
virtual DCClass *DCDeclaration::as_class(void);

376 9 as_switch 4 476 24 DCDeclaration::as_switch 0 2 149 150 468
////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCDeclaration::as_switch
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
49
virtual DCSwitch *DCDeclaration::as_switch(void);

377 6 output 4 476 21 DCDeclaration::output 0 1 151 307
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::output
//       Access : Published, Virtual
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
55
virtual void DCDeclaration::output(ostream &out) const;

378 5 write 4 476 20 DCDeclaration::write 0 1 152 292
////////////////////////////////////////////////////////////////////
//     Function : DCDeclaration::
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
64
void DCDeclaration::write(ostream &out, int indent_level) const;

379 11 get_dc_file 4 477 20 DCClass::get_dc_file 0 1 153 941
// Filename: dcClass.I
// Created by:  drose (15Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_dc_file
//       Access: Published
//  Description: Returns the DCFile object that contains the class.
////////////////////////////////////////////////////////////////////
48
inline DCFile *DCClass::get_dc_file(void) const;

380 8 get_name 4 477 17 DCClass::get_name 0 1 154 248
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_name
//       Access: Published
//  Description: Returns the name of this class.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &DCClass::get_name(void) const;

381 10 get_number 4 477 19 DCClass::get_number 0 1 155 369
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               class.  This is defined implicitly when the .dc
//               file(s) are read.
////////////////////////////////////////////////////////////////////
43
inline int DCClass::get_number(void) const;

382 15 get_num_parents 4 477 24 DCClass::get_num_parents 0 1 156 301
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_parents
//       Access: Published
//  Description: Returns the number of base classes this class
//               inherits from.
////////////////////////////////////////////////////////////////////
41
int DCClass::get_num_parents(void) const;

383 10 get_parent 4 477 19 DCClass::get_parent 0 1 157 290
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_parent
//       Access: Published
//  Description: Returns the nth parent class this class inherits
//               from.
////////////////////////////////////////////////////////////////////
42
DCClass *DCClass::get_parent(int n) const;

384 15 has_constructor 4 477 24 DCClass::has_constructor 0 1 158 340
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_constructor
//       Access: Published
//  Description: Returns true if this class has a constructor method,
//               false if it just uses the default constructor.
////////////////////////////////////////////////////////////////////
42
bool DCClass::has_constructor(void) const;

385 15 get_constructor 4 477 24 DCClass::get_constructor 0 1 159 372
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_constructor
//       Access: Published
//  Description: Returns the constructor method for this class if it
//               is defined, or NULL if the class uses the default
//               constructor.
////////////////////////////////////////////////////////////////////
46
DCField *DCClass::get_constructor(void) const;

386 14 get_num_fields 4 477 23 DCClass::get_num_fields 0 1 160 322
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_fields
//       Access: Published
//  Description: Returns the number of fields defined directly in this
//               class, ignoring inheritance.
////////////////////////////////////////////////////////////////////
40
int DCClass::get_num_fields(void) const;

387 9 get_field 4 477 18 DCClass::get_field 0 1 161 428
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field
//       Access: Published
//  Description: Returns the nth field in the class.  This is not
//               necessarily the field with index n; this is the nth
//               field defined in the class directly, ignoring
//               inheritance.
////////////////////////////////////////////////////////////////////
41
DCField *DCClass::get_field(int n) const;

388 17 get_field_by_name 4 477 26 DCClass::get_field_by_name 0 1 162 585
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_name
//       Access: Published
//  Description: Returns a pointer to the DCField that shares the
//               indicated name.  If the named field is not found in
//               the current class, the parent classes will be
//               searched, so the value returned may not actually be a
//               field within this class.  Returns NULL if there is no
//               such field defined.
////////////////////////////////////////////////////////////////////
76
DCField *DCClass::get_field_by_name(basic_string< char > const &name) const;

389 18 get_field_by_index 4 477 27 DCClass::get_field_by_index 0 1 163 594
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_field_by_index
//       Access: Published
//  Description: Returns a pointer to the DCField that has the
//               indicated index number.  If the numbered field is not
//               found in the current class, the parent classes will
//               be searched, so the value returned may not actually
//               be a field within this class.  Returns NULL if there
//               is no such field defined.
////////////////////////////////////////////////////////////////////
61
DCField *DCClass::get_field_by_index(int index_number) const;

390 24 get_num_inherited_fields 4 477 33 DCClass::get_num_inherited_fields 0 1 164 338
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_num_inherited_fields
//       Access: Published
//  Description: Returns the total number of field fields defined in
//               this class and all ancestor classes.
////////////////////////////////////////////////////////////////////
50
int DCClass::get_num_inherited_fields(void) const;

391 19 get_inherited_field 4 477 28 DCClass::get_inherited_field 0 1 165 625
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_inherited_field
//       Access: Published
//  Description: Returns the nth field field in the class and all of
//               its ancestors.  
//
//               This *used* to be the same thing as
//               get_field_by_index(), back when the fields were
//               numbered sequentially within a class's inheritance
//               hierarchy.  Now that fields have a globally unique
//               index number, this is no longer true.
////////////////////////////////////////////////////////////////////
51
DCField *DCClass::get_inherited_field(int n) const;

392 9 is_struct 4 477 18 DCClass::is_struct 0 1 166 379
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_struct
//       Access: Published
//  Description: Returns true if the class has been identified with
//               the "struct" keyword in the dc file, false if it was
//               declared with "dclass".
////////////////////////////////////////////////////////////////////
43
inline bool DCClass::is_struct(void) const;

393 14 is_bogus_class 4 477 23 DCClass::is_bogus_class 0 1 167 524
////////////////////////////////////////////////////////////////////
//     Function: DCClass::is_bogus_class
//       Access: Published
//  Description: Returns true if the class has been flagged as a bogus
//               class.  This is set for classes that are generated by
//               the parser as placeholder for missing classes, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
48
inline bool DCClass::is_bogus_class(void) const;

394 14 start_generate 4 477 23 DCClass::start_generate 0 1 168 543
////////////////////////////////////////////////////////////////////
//     Function: DCClass::start_generate
//       Access: Published
//  Description: Starts the PStats timer going on the "generate" task,
//               that is, marks the beginning of the process of
//               generating a new object, for the purposes of timing
//               this process.
//
//               This should balance with a corresponding call to
//               stop_generate().
////////////////////////////////////////////////////////////////////
42
inline void DCClass::start_generate(void);

395 13 stop_generate 4 477 22 DCClass::stop_generate 0 1 169 365
////////////////////////////////////////////////////////////////////
//     Function: DCClass::stop_generate
//       Access: Published
//  Description: Stops the PStats timer on the "generate" task.
//               This should balance with a preceding call to
//               start_generate().
////////////////////////////////////////////////////////////////////
41
inline void DCClass::stop_generate(void);

396 13 has_class_def 4 477 22 DCClass::has_class_def 0 1 170 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python class definition, false otherwise.
////////////////////////////////////////////////////////////////////
40
bool DCClass::has_class_def(void) const;

397 13 set_class_def 4 477 22 DCClass::set_class_def 0 1 171 383
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_class_def
//       Access: Published
//  Description: Sets the class object associated with this
//               DistributedClass.  This object will be used to
//               construct new instances of the class.
////////////////////////////////////////////////////////////////////
49
void DCClass::set_class_def(PyObject *class_def);

398 13 get_class_def 4 477 22 DCClass::get_class_def 0 1 172 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_class_def
//       Access: Published
//  Description: Returns the class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
45
PyObject *DCClass::get_class_def(void) const;

399 19 has_owner_class_def 4 477 28 DCClass::has_owner_class_def 0 1 173 345
////////////////////////////////////////////////////////////////////
//     Function: DCClass::has_owner_class_def
//       Access: Published
//  Description: Returns true if the DCClass object has an associated
//               Python owner class definition, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool DCClass::has_owner_class_def(void) const;

400 19 set_owner_class_def 4 477 28 DCClass::set_owner_class_def 0 1 174 401
////////////////////////////////////////////////////////////////////
//     Function: DCClass::set_owner_class_def
//       Access: Published
//  Description: Sets the owner class object associated with this
//               DistributedClass.  This object will be used to
//               construct new owner instances of the class.
////////////////////////////////////////////////////////////////////
61
void DCClass::set_owner_class_def(PyObject *owner_class_def);

401 19 get_owner_class_def 4 477 28 DCClass::get_owner_class_def 0 1 175 400
////////////////////////////////////////////////////////////////////
//     Function: DCClass::get_owner_class_def
//       Access: Published
//  Description: Returns the owner class object that was previously
//               associated with this DistributedClass.  This will
//               return a new reference to the object.
////////////////////////////////////////////////////////////////////
51
PyObject *DCClass::get_owner_class_def(void) const;

402 14 receive_update 4 477 23 DCClass::receive_update 0 1 176 376
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update
//       Access: Published
//  Description: Extracts the update message out of the packer and
//               applies it to the indicated object by calling the
//               appropriate method.
////////////////////////////////////////////////////////////////////
76
void DCClass::receive_update(PyObject *distobj, DatagramIterator &di) const;

403 33 receive_update_broadcast_required 4 477 42 DCClass::receive_update_broadcast_required 0 1 177 500
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast required".
////////////////////////////////////////////////////////////////////
95
void DCClass::receive_update_broadcast_required(PyObject *distobj, DatagramIterator &di) const;

404 39 receive_update_broadcast_required_owner 4 477 48 DCClass::receive_update_broadcast_required_owner 0 1 178 563
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_broadcast_required_owner
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent along with a normal
//               "generate with required" message.  This is all of the
//               atomic fields that are marked "broadcast ownrecv". Should
//               be used for 'owner-view' objects.
////////////////////////////////////////////////////////////////////
101
void DCClass::receive_update_broadcast_required_owner(PyObject *distobj, DatagramIterator &di) const;

405 27 receive_update_all_required 4 477 36 DCClass::receive_update_all_required 0 1 179 492
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_all_required
//       Access: Published
//  Description: Processes a big datagram that includes all of the
//               "required" fields that are sent when an avatar is
//               created.  This is all of the atomic fields that are
//               marked "required", whether they are broadcast or not.
////////////////////////////////////////////////////////////////////
89
void DCClass::receive_update_all_required(PyObject *distobj, DatagramIterator &di) const;

406 20 receive_update_other 4 477 29 DCClass::receive_update_other 0 1 180 333
////////////////////////////////////////////////////////////////////
//     Function: DCClass::receive_update_other
//       Access: Published
//  Description: Processes a datagram that lists some additional
//               fields that are broadcast in one chunk.
////////////////////////////////////////////////////////////////////
82
void DCClass::receive_update_other(PyObject *distobj, DatagramIterator &di) const;

407 13 direct_update 4 477 22 DCClass::direct_update 0 2 181 182 604
////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               value blob.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::direct_update
//       Access: Published
//  Description: Processes an update for a named field from a packed
//               datagram.
////////////////////////////////////////////////////////////////////
127
void DCClass::direct_update(PyObject *distobj, basic_string< char > const &field_name, basic_string< char > const &value_blob);

408 19 pack_required_field 4 477 28 DCClass::pack_required_field 0 2 183 184 1330
////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the datagram.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCClass::pack_required_field
//       Access: Published
//  Description: Looks up the current value of the indicated field by
//               calling the appropriate get*() function, then packs
//               that value into the packer.  This field is
//               presumably either a required field or a specified
//               optional field, and we are building up a datagram for
//               the generate-with-required message.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
101
bool DCClass::pack_required_field(Datagram &datagram, PyObject *distobj, DCField const *field) const;

409 20 client_format_update 4 477 29 DCClass::client_format_update 0 1 185 388
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the client.
////////////////////////////////////////////////////////////////////
112
Datagram DCClass::client_format_update(basic_string< char > const &field_name, int do_id, PyObject *args) const;

410 16 ai_format_update 4 477 25 DCClass::ai_format_update 0 1 186 380
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_update
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to send an update for the indicated distributed
//               object from the AI.
////////////////////////////////////////////////////////////////////
158
Datagram DCClass::ai_format_update(basic_string< char > const &field_name, int do_id, unsigned __int64 to_id, unsigned __int64 from_id, PyObject *args) const;

411 18 ai_format_generate 4 477 27 DCClass::ai_format_generate 0 1 187 593
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_format_generate
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the AI.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
////////////////////////////////////////////////////////////////////
200
Datagram DCClass::ai_format_generate(PyObject *distobj, int do_id, int parent_id, int zone_id, unsigned __int64 district_channel_id, unsigned __int64 from_channel_id, PyObject *optional_fields) const;

412 22 client_format_generate 4 477 31 DCClass::client_format_generate 0 1 188 601
////////////////////////////////////////////////////////////////////
//     Function: DCClass::client_format_generate
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to generate a new distributed object from the client.
//               This requires querying the object for the initial
//               value of its required fields.
//
//               optional_fields is a list of fieldNames to generate
//               in addition to the normal required fields.
////////////////////////////////////////////////////////////////////
117
Datagram DCClass::client_format_generate(PyObject *distobj, int do_id, int zone_id, PyObject *optional_fields) const;

413 28 ai_database_generate_context 4 477 37 DCClass::ai_database_generate_context 0 1 189 483
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_database_generate_context
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to create a new database distributed object from the AI.
//
//               First Pass is to only incldue required values
//               (with Defaults).                   
////////////////////////////////////////////////////////////////////
227
Datagram DCClass::ai_database_generate_context(unsigned int context_id, unsigned int parent_id, unsigned int zone_id, unsigned __int64 owner_channel, unsigned __int64 database_server_id, unsigned __int64 from_channel_id) const;

414 32 ai_database_generate_context_old 4 477 41 DCClass::ai_database_generate_context_old 0 1 190 559
// TODO: remove this once Skyler has things working with the new server
////////////////////////////////////////////////////////////////////
//     Function: DCClass::ai_database_generate_context_old
//       Access: Published
//  Description: Generates a datagram containing the message necessary
//               to create a new database distributed object from the AI.
//
//               First Pass is to only incldue required values
//               (with Defaults).                   
////////////////////////////////////////////////////////////////////
199
Datagram DCClass::ai_database_generate_context_old(unsigned int context_id, unsigned int parent_id, unsigned int zone_id, unsigned __int64 database_server_id, unsigned __int64 from_channel_id) const;

415 9 get_class 4 478 27 DCClassParameter::get_class 0 1 191 278
////////////////////////////////////////////////////////////////////
//     Function: DCClassParameter::get_class
//       Access: Published
//  Description: Returns the class object this parameter represents.
////////////////////////////////////////////////////////////////////
55
DCClass const *DCClassParameter::get_class(void) const;

416 17 ~DCClassParameter 4 478 35 DCClassParameter::~DCClassParameter 0 0 0
42
DCClassParameter::~DCClassParameter(void);

417 6 DCFile 4 479 14 DCFile::DCFile 0 1 192 218
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
21
DCFile::DCFile(void);

418 7 ~DCFile 4 479 15 DCFile::~DCFile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: DCFile::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
22
DCFile::~DCFile(void);

419 5 clear 4 479 13 DCFile::clear 0 1 193 322
////////////////////////////////////////////////////////////////////
//     Function: DCFile::clear
//       Access: Published
//  Description: Removes all of the classes defined within the DCFile
//               and prepares it for reading a new file.
////////////////////////////////////////////////////////////////////
25
void DCFile::clear(void);

420 8 read_all 4 479 16 DCFile::read_all 0 1 194 382
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read_all
//       Access: Published
//  Description: This special method reads all of the .dc files named
//               by the "dc-file" config.prc variable, and loads them
//               into the DCFile namespace.
////////////////////////////////////////////////////////////////////
28
bool DCFile::read_all(void);

421 4 read 4 479 12 DCFile::read 0 3 195 196 197 1410
// WITHIN_PANDA
////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Opens and reads the indicated .dc file by name.  The
//               distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::read
//       Access: Published
//  Description: Parses the already-opened input stream for
//               distributed class descriptions.  The filename
//               parameter is optional and is only used when reporting
//               errors.
//
//               The distributed classes defined in the file will be
//               appended to the set of distributed classes already
//               recorded, if any.
//
//               Returns true if the file is successfully read, false
//               if there was an error (in which case the file might
//               have been partially read).
////////////////////////////////////////////////////////////////////
37
bool DCFile::read(Filename filename);

422 5 write 4 479 13 DCFile::write 0 2 198 199 907
////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Opens the indicated filename for output and writes a
//               parseable description of all the known distributed
//               classes to the file.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DCFile::write
//       Access: Published
//  Description: Writes a parseable description of all the known
//               distributed classes to the stream.
//
//               Returns true if the description is successfully
//               written, false otherwise.
////////////////////////////////////////////////////////////////////
56
bool DCFile::write(Filename filename, bool brief) const;

423 15 get_num_classes 4 479 23 DCFile::get_num_classes 0 1 200 296
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_classes
//       Access: Published
//  Description: Returns the number of classes read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
40
int DCFile::get_num_classes(void) const;

424 9 get_class 4 479 17 DCFile::get_class 0 1 201 265
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class
//       Access: Published
//  Description: Returns the nth class read from the .dc file(s).
////////////////////////////////////////////////////////////////////
40
DCClass *DCFile::get_class(int n) const;

425 17 get_class_by_name 4 479 25 DCFile::get_class_by_name 0 1 202 323
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_class_by_name
//       Access: Published
//  Description: Returns the class that has the indicated name, or
//               NULL if there is no such class.
////////////////////////////////////////////////////////////////////
75
DCClass *DCFile::get_class_by_name(basic_string< char > const &name) const;

426 18 get_switch_by_name 4 479 26 DCFile::get_switch_by_name 0 1 203 326
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_switch_by_name
//       Access: Published
//  Description: Returns the switch that has the indicated name, or
//               NULL if there is no such switch.
////////////////////////////////////////////////////////////////////
77
DCSwitch *DCFile::get_switch_by_name(basic_string< char > const &name) const;

427 18 get_field_by_index 4 479 26 DCFile::get_field_by_index 0 1 204 667
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_field_by_index
//       Access: Published, Static
//  Description: Returns a pointer to the one DCField that has the
//               indicated index number, of all the DCFields across
//               all classes in the file.
//
//               This method is only valid if dc-multiple-inheritance
//               is set true in the Config.prc file.  Without this
//               setting, different DCFields may share the same index
//               number, so this global lookup is not possible.
////////////////////////////////////////////////////////////////////
60
DCField *DCFile::get_field_by_index(int index_number) const;

428 17 all_objects_valid 4 479 25 DCFile::all_objects_valid 0 1 205 1137
// Filename: dcFile.I
// Created by:  drose (10Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DCFile::all_objects_valid
//       Access: Published
//  Description: Returns true if all of the classes read from the DC
//               file were defined and valid, or false if any of them
//               were undefined ("bogus classes").  If this is true,
//               we might have read a partial file.
////////////////////////////////////////////////////////////////////
50
inline bool DCFile::all_objects_valid(void) const;

429 22 get_num_import_modules 4 479 30 DCFile::get_num_import_modules 0 1 206 308
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_modules
//       Access: Published
//  Description: Returns the number of import lines read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
47
int DCFile::get_num_import_modules(void) const;

430 17 get_import_module 4 479 25 DCFile::get_import_module 0 1 207 316
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_module
//       Access: Published
//  Description: Returns the module named by the nth import line read
//               from the .dc file(s).
////////////////////////////////////////////////////////////////////
60
basic_string< char > DCFile::get_import_module(int n) const;

431 22 get_num_import_symbols 4 479 30 DCFile::get_num_import_symbols 0 1 208 482
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_import_symbols
//       Access: Published
//  Description: Returns the number of symbols explicitly imported by
//               the nth import line.  If this is 0, the line is
//               "import modulename"; if it is more than 0, the line
//               is "from modulename import symbol, symbol ... ".
////////////////////////////////////////////////////////////////////
48
int DCFile::get_num_import_symbols(int n) const;

432 17 get_import_symbol 4 479 25 DCFile::get_import_symbol 0 1 209 320
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_import_symbol
//       Access: Published
//  Description: Returns the ith symbol named by the nth import line
//               read from the .dc file(s).
////////////////////////////////////////////////////////////////////
67
basic_string< char > DCFile::get_import_symbol(int n, int i) const;

433 16 get_num_typedefs 4 479 24 DCFile::get_num_typedefs 0 1 210 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_typedefs
//       Access: Published
//  Description: Returns the number of typedefs read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_typedefs(void) const;

434 11 get_typedef 4 479 19 DCFile::get_typedef 0 1 211 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef
//       Access: Published
//  Description: Returns the nth typedef read from the .dc file(s).
////////////////////////////////////////////////////////////////////
44
DCTypedef *DCFile::get_typedef(int n) const;

435 19 get_typedef_by_name 4 479 27 DCFile::get_typedef_by_name 0 1 212 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_typedef_by_name
//       Access: Published
//  Description: Returns the typedef that has the indicated name, or
//               NULL if there is no such typedef name.
////////////////////////////////////////////////////////////////////
79
DCTypedef *DCFile::get_typedef_by_name(basic_string< char > const &name) const;

436 16 get_num_keywords 4 479 24 DCFile::get_num_keywords 0 1 213 298
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_num_keywords
//       Access: Published
//  Description: Returns the number of keywords read from the .dc
//               file(s).
////////////////////////////////////////////////////////////////////
41
int DCFile::get_num_keywords(void) const;

437 11 get_keyword 4 479 19 DCFile::get_keyword 0 1 214 269
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword
//       Access: Published
//  Description: Returns the nth keyword read from the .dc file(s).
////////////////////////////////////////////////////////////////////
50
DCKeyword const *DCFile::get_keyword(int n) const;

438 19 get_keyword_by_name 4 479 27 DCFile::get_keyword_by_name 0 1 215 334
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_keyword_by_name
//       Access: Published
//  Description: Returns the keyword that has the indicated name, or
//               NULL if there is no such keyword name.
////////////////////////////////////////////////////////////////////
85
DCKeyword const *DCFile::get_keyword_by_name(basic_string< char > const &name) const;

439 8 get_hash 4 479 16 DCFile::get_hash 0 1 216 505
////////////////////////////////////////////////////////////////////
//     Function: DCFile::get_hash
//       Access: Published
//  Description: Returns a 32-bit hash index associated with this
//               file.  This number is guaranteed to be consistent if
//               the contents of the file have not changed, and it is
//               very likely to be different if the contents of the
//               file do change.
////////////////////////////////////////////////////////////////////
47
unsigned long int DCFile::get_hash(void) const;

440 8 get_name 4 480 19 DCKeyword::get_name 0 1 217 252
////////////////////////////////////////////////////////////////////
//     Function: DCKeyword::get_name
//       Access: Published
//  Description: Returns the name of this keyword.
////////////////////////////////////////////////////////////////////
60
basic_string< char > const &DCKeyword::get_name(void) const;

441 15 get_num_atomics 4 481 33 DCMolecularField::get_num_atomics 0 1 218 320
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_num_atomics
//       Access: Published
//  Description: Returns the number of atomic fields that make up this
//               molecular field.
////////////////////////////////////////////////////////////////////
50
int DCMolecularField::get_num_atomics(void) const;

442 10 get_atomic 4 481 28 DCMolecularField::get_atomic 0 1 219 440
////////////////////////////////////////////////////////////////////
//     Function: DCMolecularField::get_atomic
//       Access: Published
//  Description: Returns the nth atomic field that makes up this
//               molecular field.  This may or may not be a field of
//               this particular class; it might be defined in a
//               parent class.
////////////////////////////////////////////////////////////////////
57
DCAtomicField *DCMolecularField::get_atomic(int n) const;

443 17 ~DCMolecularField 4 481 35 DCMolecularField::~DCMolecularField 0 0 0
42
DCMolecularField::~DCMolecularField(void);

444 8 get_type 4 482 27 DCSimpleParameter::get_type 0 1 220 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_type
//       Access: Published
//  Description: Returns the particular subatomic type represented by
//               this instance.
////////////////////////////////////////////////////////////////////
56
DCSubatomicType DCSimpleParameter::get_type(void) const;

445 11 has_modulus 4 482 30 DCSimpleParameter::has_modulus 0 1 221 311
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::has_modulus
//       Access: Published
//  Description: Returns true if there is a modulus associated, false
//               otherwise.,
////////////////////////////////////////////////////////////////////
48
bool DCSimpleParameter::has_modulus(void) const;

446 11 get_modulus 4 482 30 DCSimpleParameter::get_modulus 0 1 222 564
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_modulus
//       Access: Published
//  Description: Returns the modulus associated with this type, if
//               any.  It is an error to call this if has_modulus()
//               returned false.
//
//               If present, this is the modulus that is used to
//               constrain the numeric value of the field before it is
//               packed (and range-checked).
////////////////////////////////////////////////////////////////////
50
double DCSimpleParameter::get_modulus(void) const;

447 11 get_divisor 4 482 30 DCSimpleParameter::get_divisor 0 1 223 588
////////////////////////////////////////////////////////////////////
//     Function: DCSimpleParameter::get_divisor
//       Access: Published
//  Description: Returns the divisor associated with this type.  This
//               is 1 by default, but if this is other than one it
//               represents the scale to apply when packing and
//               unpacking numeric values (to store fixed-point values
//               in an integer field).  It is only meaningful for
//               numeric-type fields.
////////////////////////////////////////////////////////////////////
47
int DCSimpleParameter::get_divisor(void) const;

448 18 ~DCSimpleParameter 4 482 37 DCSimpleParameter::~DCSimpleParameter 0 0 0
44
DCSimpleParameter::~DCSimpleParameter(void);

449 8 get_name 4 483 18 DCSwitch::get_name 0 1 224 250
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_name
//       Access: Published
//  Description: Returns the name of this switch.
////////////////////////////////////////////////////////////////////
59
basic_string< char > const &DCSwitch::get_name(void) const;

450 17 get_key_parameter 4 483 27 DCSwitch::get_key_parameter 0 1 225 450
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_key_parameter
//       Access: Published
//  Description: Returns the key parameter on which the switch is
//               based.  The value of this parameter in the record
//               determines which one of the several cases within the
//               switch will be used.
////////////////////////////////////////////////////////////////////
49
DCField *DCSwitch::get_key_parameter(void) const;

451 13 get_num_cases 4 483 23 DCSwitch::get_num_cases 0 1 226 383
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_cases
//       Access: Published
//  Description: Returns the number of different cases within the
//               switch.  The legal values for case_index range from 0
//               to get_num_cases() - 1.
////////////////////////////////////////////////////////////////////
40
int DCSwitch::get_num_cases(void) const;

452 17 get_case_by_value 4 483 27 DCSwitch::get_case_by_value 0 1 227 363
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case_by_value
//       Access: Published
//  Description: Returns the index number of the case with the
//               indicated packed value, or -1 if no case has this
//               value.
////////////////////////////////////////////////////////////////////
78
int DCSwitch::get_case_by_value(basic_string< char > const &case_value) const;

453 8 get_case 4 483 18 DCSwitch::get_case 0 1 228 272
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the nth case.
////////////////////////////////////////////////////////////////////
51
DCPackerInterface *DCSwitch::get_case(int n) const;

454 16 get_default_case 4 483 26 DCSwitch::get_default_case 0 1 229 338
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_default_case
//       Access: Published
//  Description: Returns the DCPackerInterface that packs the default
//               case, or NULL if there is no default case.
////////////////////////////////////////////////////////////////////
58
DCPackerInterface *DCSwitch::get_default_case(void) const;

455 9 get_value 4 483 19 DCSwitch::get_value 0 1 230 296
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_value
//       Access: Published
//  Description: Returns the packed value associated with the
//               indicated case.
////////////////////////////////////////////////////////////////////
63
basic_string< char > DCSwitch::get_value(int case_index) const;

456 14 get_num_fields 4 483 24 DCSwitch::get_num_fields 0 1 231 275
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the number of fields in the indicated case.
////////////////////////////////////////////////////////////////////
51
int DCSwitch::get_num_fields(int case_index) const;

457 9 get_field 4 483 19 DCSwitch::get_field 0 1 232 268
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_num_fields
//       Access: Published
//  Description: Returns the nth field in the indicated case.
////////////////////////////////////////////////////////////////////
58
DCField *DCSwitch::get_field(int case_index, int n) const;

458 17 get_field_by_name 4 483 27 DCSwitch::get_field_by_name 0 1 233 341
////////////////////////////////////////////////////////////////////
//     Function: DCSwitch::get_field_by_name
//       Access: Published
//  Description: Returns the field with the given name from the
//               indicated case, or NULL if no field has this name.
////////////////////////////////////////////////////////////////////
93
DCField *DCSwitch::get_field_by_name(int case_index, basic_string< char > const &name) const;

459 10 get_switch 4 484 29 DCSwitchParameter::get_switch 0 1 234 281
////////////////////////////////////////////////////////////////////
//     Function: DCSwitchParameter::get_switch
//       Access: Published
//  Description: Returns the switch object this parameter represents.
////////////////////////////////////////////////////////////////////
58
DCSwitch const *DCSwitchParameter::get_switch(void) const;

460 18 ~DCSwitchParameter 4 484 37 DCSwitchParameter::~DCSwitchParameter 0 0 0
44
DCSwitchParameter::~DCSwitchParameter(void);

461 10 get_number 4 485 21 DCTypedef::get_number 0 1 235 384
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_number
//       Access: Published
//  Description: Returns a unique index number associated with this
//               typedef definition.  This is defined implicitly when
//               the .dc file(s) are read.
////////////////////////////////////////////////////////////////////
38
int DCTypedef::get_number(void) const;

462 8 get_name 4 485 19 DCTypedef::get_name 0 1 236 252
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_name
//       Access: Published
//  Description: Returns the name of this typedef.
////////////////////////////////////////////////////////////////////
60
basic_string< char > const &DCTypedef::get_name(void) const;

463 15 get_description 4 485 26 DCTypedef::get_description 0 1 237 315
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::get_description
//       Access: Published
//  Description: Returns a brief decription of the typedef, useful for
//               human consumption.
////////////////////////////////////////////////////////////////////
60
basic_string< char > DCTypedef::get_description(void) const;

464 16 is_bogus_typedef 4 485 27 DCTypedef::is_bogus_typedef 0 1 238 531
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_bogus_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as a bogus
//               typedef.  This is set for typedefs that are generated by
//               the parser as placeholder for missing typedefs, as
//               when reading a partial file; it should not occur in a
//               normal valid dc file.
////////////////////////////////////////////////////////////////////
45
bool DCTypedef::is_bogus_typedef(void) const;

465 19 is_implicit_typedef 4 485 30 DCTypedef::is_implicit_typedef 0 1 239 404
////////////////////////////////////////////////////////////////////
//     Function: DCTypedef::is_implicit_typedef
//       Access: Public
//  Description: Returns true if the typedef has been flagged as an
//               implicit typedef, meaning it was created for a
//               DCClass that was referenced inline as a type.
////////////////////////////////////////////////////////////////////
48
bool DCTypedef::is_implicit_typedef(void) const;

239
1 14 Dtool_5HfQEqeZ 6 5 488 0 14 Dtool_5HfQEqeZ 1 4 this 3 486  
2 14 Dtool_5HfQ4eZn 6 6 489 0 14 Dtool_5HfQ4eZn 2 4 this 3 486  4 name 1 488  
3 14 Dtool_5HfQlG9m 6 7 491 0 14 Dtool_5HfQlG9m 1 4 this 3 490  
4 14 Dtool_5HfQJDqB 6 7 492 0 14 Dtool_5HfQJDqB 1 4 this 3 486  
5 14 Dtool_5HfQUOXk 6 8 494 0 14 Dtool_5HfQUOXk 1 4 this 3 490  
6 14 Dtool_5HfQ1e9D 6 8 495 0 14 Dtool_5HfQ1e9D 1 4 this 3 486  
7 14 Dtool_5HfQLrGr 6 9 497 0 14 Dtool_5HfQLrGr 1 4 this 3 490  
8 14 Dtool_5HfQ_GEW 6 9 498 0 14 Dtool_5HfQ_GEW 1 4 this 3 486  
9 14 Dtool_5HfQcNZX 6 10 500 0 14 Dtool_5HfQcNZX 2 4 this 3 486  5 other 1 486  
10 14 Dtool_5HfQvvj_ 6 10 500 0 14 Dtool_5HfQvvj_ 3 4 this 3 486  11 description 1 488  6 dcfile 1 501  
11 14 Dtool_5HfQrsRl 6 10 500 0 14 Dtool_5HfQrsRl 2 4 this 3 486  11 description 1 488  
12 14 Dtool_5HfQKRZd 6 13 500 0 14 Dtool_5HfQKRZd 2 4 this 3 502  7 keyword 1 504  
13 14 Dtool_5HfQMTox 6 13 500 0 14 Dtool_5HfQMTox 2 4 this 3 502  4 name 1 488  
14 14 Dtool_5HfQQFpj 6 14 489 0 14 Dtool_5HfQQFpj 1 4 this 3 502  
15 14 Dtool_5HfQxzo1 6 15 504 0 14 Dtool_5HfQxzo1 2 4 this 3 502  1 n 1 489  
16 14 Dtool_5HfQDCHO 6 16 504 0 14 Dtool_5HfQDCHO 2 4 this 3 502  4 name 1 488  
17 14 Dtool_5HfQcn3i 6 17 500 0 14 Dtool_5HfQcn3i 2 4 this 3 502  5 other 1 502  
18 14 Dtool_5HfQYIQq 6 24 489 0 14 Dtool_5HfQYIQq 1 4 this 3 492  
19 14 Dtool_5HfQKiHU 6 25 506 0 14 Dtool_5HfQKiHU 1 4 this 3 492  
20 14 Dtool_5HfQ9WW_ 6 26 491 0 14 Dtool_5HfQ9WW_ 1 4 this 3 491  
21 14 Dtool_5HfQy3Bl 6 26 492 0 14 Dtool_5HfQy3Bl 1 4 this 3 492  
22 14 Dtool_5HfQEiDu 6 27 507 0 14 Dtool_5HfQEiDu 1 4 this 3 491  
23 14 Dtool_5HfQzwks 6 27 508 0 14 Dtool_5HfQzwks 1 4 this 3 492  
24 14 Dtool_5HfQuhmz 6 28 510 0 14 Dtool_5HfQuhmz 1 4 this 3 491  
25 14 Dtool_5HfQ5dUO 6 28 511 0 14 Dtool_5HfQ5dUO 1 4 this 3 492  
26 14 Dtool_5HfQdmWk 6 29 513 0 14 Dtool_5HfQdmWk 1 4 this 3 491  
27 14 Dtool_5HfQORwy 6 29 514 0 14 Dtool_5HfQORwy 1 4 this 3 492  
28 14 Dtool_5HfQAzaE 6 30 488 0 14 Dtool_5HfQAzaE 2 4 this 3 491  11 packed_data 1 488  
29 14 Dtool_5HfQZxBu 6 31 488 0 14 Dtool_5HfQZxBu 2 4 this 3 491  16 formatted_string 1 488  
30 14 Dtool_5HfQu_ys 6 32 500 0 14 Dtool_5HfQu_ys 2 4 this 3 492  11 packed_data 1 488  
31 14 Dtool_5HfQMANq 6 33 500 0 14 Dtool_5HfQMANq 1 4 this 3 492  
32 14 Dtool_5HfQJt60 6 34 488 0 14 Dtool_5HfQJt60 1 4 this 3 492  
33 14 Dtool_5HfQsDoF 6 35 500 0 14 Dtool_5HfQsDoF 1 4 this 3 492  
34 14 Dtool_5HfQ01Fw 6 36 500 0 14 Dtool_5HfQ01Fw 1 4 this 3 492  
35 14 Dtool_5HfQFnxN 6 37 500 0 14 Dtool_5HfQFnxN 1 4 this 3 492  
36 14 Dtool_5HfQnl1_ 6 38 500 0 14 Dtool_5HfQnl1_ 1 4 this 3 492  
37 14 Dtool_5HfQ_j06 6 39 500 0 14 Dtool_5HfQ_j06 1 4 this 3 492  
38 14 Dtool_5HfQtyCR 6 40 500 0 14 Dtool_5HfQtyCR 1 4 this 3 492  
39 14 Dtool_5HfQGJ0E 6 41 500 0 14 Dtool_5HfQGJ0E 1 4 this 3 492  
40 14 Dtool_5HfQZRQM 6 42 500 0 14 Dtool_5HfQZRQM 1 4 this 3 492  
41 14 Dtool_5HfQl0Uq 6 43 500 0 14 Dtool_5HfQl0Uq 1 4 this 3 492  
42 14 Dtool_5HfQLxp4 4 44 518 0 14 Dtool_5HfQLxp4 2 4 this 3 492  3 out 1 516  
43 14 Dtool_5HfQnirA 4 45 518 0 14 Dtool_5HfQnirA 3 4 this 3 492  3 out 1 516  12 indent_level 1 489  
44 14 Dtool_5HfQBNMR 6 46 500 0 14 Dtool_5HfQBNMR 3 4 this 3 492  6 packer 1 519  8 sequence 1 520  
45 14 Dtool_5HfQ7m86 6 47 520 0 14 Dtool_5HfQ7m86 2 4 this 3 492  6 packer 1 519  
46 14 Dtool_5HfQc4tY 4 48 518 0 14 Dtool_5HfQc4tY 3 4 this 3 492  6 packer 1 519  7 distobj 1 520  
47 14 Dtool_5HfQsnRB 7 49 523 0 14 Dtool_5HfQsnRB 3 4 this 3 492  5 do_id 1 489  4 args 1 520  
48 14 Dtool_5HfQUeo2 7 50 523 0 14 Dtool_5HfQUeo2 5 4 this 3 492  5 do_id 1 489  5 to_id 1 524  7 from_id 1 524  4 args 1 520  
49 14 Dtool_5HfQ2PMX 6 19 490 0 14 Dtool_5HfQ2PMX 1 4 this 3 491  
50 14 Dtool_5HfQvejk 6 20 491 0 14 Dtool_5HfQvejk 1 4 this 3 490  
51 14 Dtool_5HfQyCOi 6 21 525 0 14 Dtool_5HfQyCOi 1 4 this 3 491  
52 14 Dtool_5HfQS2_O 6 22 491 0 14 Dtool_5HfQS2_O 1 4 this 3 525  
53 14 Dtool_5HfQb_tg 7 52 526 286 14 Dtool_5HfQb_tg 0 
54 14 Dtool_5HfQi4W4 4 54 518 0 14 Dtool_5HfQi4W4 1 4 this 3 526  
55 14 Dtool_5HfQqSqZ 6 55 488 0 14 Dtool_5HfQqSqZ 1 4 this 3 527  
56 14 Dtool_5HfQR8z_ 6 56 529 0 14 Dtool_5HfQR8z_ 1 4 this 3 527  
57 14 Dtool_5HfQfQtS 7 58 519 291 14 Dtool_5HfQfQtS 0 
58 14 Dtool_5HfQJSK8 4 60 518 0 14 Dtool_5HfQJSK8 1 4 this 3 519  
59 14 Dtool_5HfQ45bk 4 61 518 0 14 Dtool_5HfQ45bk 2 4 this 3 519  4 root 1 486  
60 14 Dtool_5HfQ7Jow 6 62 500 0 14 Dtool_5HfQ7Jow 1 4 this 3 519  
61 14 Dtool_5HfQvBpF 4 63 518 0 14 Dtool_5HfQvBpF 2 4 this 3 519  4 data 1 488  
62 14 Dtool_5HfQbOoZ 4 64 518 0 14 Dtool_5HfQbOoZ 2 4 this 3 519  4 root 1 486  
63 14 Dtool_5HfQbEEC 6 65 500 0 14 Dtool_5HfQbEEC 1 4 this 3 519  
64 14 Dtool_5HfQthAN 4 66 518 0 14 Dtool_5HfQthAN 2 4 this 3 519  4 root 1 486  
65 14 Dtool_5HfQwRsw 6 67 500 0 14 Dtool_5HfQwRsw 1 4 this 3 519  
66 14 Dtool_5HfQ_NNW 6 68 500 0 14 Dtool_5HfQ_NNW 2 4 this 3 519  10 field_name 1 488  
67 14 Dtool_5HfQ2QAv 6 68 500 0 14 Dtool_5HfQ2QAv 2 4 this 3 519  10 seek_index 1 489  
68 14 Dtool_5HfQ0gaI 6 69 500 0 14 Dtool_5HfQ0gaI 1 4 this 3 530  
69 14 Dtool_5HfQQA_a 6 70 489 0 14 Dtool_5HfQQA_a 1 4 this 3 530  
70 14 Dtool_5HfQloor 6 71 500 0 14 Dtool_5HfQloor 1 4 this 3 530  
71 14 Dtool_5HfQO8yu 6 72 486 0 14 Dtool_5HfQO8yu 1 4 this 3 530  
72 14 Dtool_5HfQe_9F 6 73 486 0 14 Dtool_5HfQe_9F 1 4 this 3 530  
73 14 Dtool_5HfQ3fj4 6 74 495 0 14 Dtool_5HfQ3fj4 1 4 this 3 530  
74 14 Dtool_5HfQDwsp 6 75 467 0 14 Dtool_5HfQDwsp 1 4 this 3 530  
75 14 Dtool_5HfQeaOc 6 76 488 0 14 Dtool_5HfQeaOc 1 4 this 3 530  
76 14 Dtool_5HfQcQuF 4 77 518 0 14 Dtool_5HfQcQuF 1 4 this 3 519  
77 14 Dtool_5HfQ6bfW 4 78 518 0 14 Dtool_5HfQ6bfW 1 4 this 3 519  
78 14 Dtool_5HfQBIAM 4 79 518 0 14 Dtool_5HfQBIAM 2 4 this 3 519  5 value 1 532  
79 14 Dtool_5HfQ3yIL 4 80 518 0 14 Dtool_5HfQ3yIL 2 4 this 3 519  5 value 1 489  
80 14 Dtool_5HfQut3J 4 81 518 0 14 Dtool_5HfQut3J 2 4 this 3 519  5 value 1 529  
81 14 Dtool_5HfQCx0g 4 82 518 0 14 Dtool_5HfQCx0g 2 4 this 3 519  5 value 1 533  
82 14 Dtool_5HfQZTfh 4 83 518 0 14 Dtool_5HfQZTfh 2 4 this 3 519  5 value 1 524  
83 14 Dtool_5HfQCdT5 4 84 518 0 14 Dtool_5HfQCdT5 2 4 this 3 519  5 value 1 488  
84 14 Dtool_5HfQTx3e 4 85 518 0 14 Dtool_5HfQTx3e 2 4 this 3 519  5 value 1 488  
85 14 Dtool_5HfQTBAY 4 86 518 0 14 Dtool_5HfQTBAY 1 4 this 3 519  
86 14 Dtool_5HfQT8q9 6 87 532 0 14 Dtool_5HfQT8q9 1 4 this 3 519  
87 14 Dtool_5HfQmv6O 6 88 489 0 14 Dtool_5HfQmv6O 1 4 this 3 519  
88 14 Dtool_5HfQ_P2V 6 89 529 0 14 Dtool_5HfQ_P2V 1 4 this 3 519  
89 14 Dtool_5HfQeXGO 6 90 533 0 14 Dtool_5HfQeXGO 1 4 this 3 519  
90 14 Dtool_5HfQ_EJ8 6 91 524 0 14 Dtool_5HfQ_EJ8 1 4 this 3 519  
91 14 Dtool_5HfQl8eu 6 92 488 0 14 Dtool_5HfQl8eu 1 4 this 3 519  
92 14 Dtool_5HfQRc82 6 93 488 0 14 Dtool_5HfQRc82 1 4 this 3 519  
93 14 Dtool_5HfQOtBs 4 94 518 0 14 Dtool_5HfQOtBs 1 4 this 3 519  
94 14 Dtool_5HfQGmIK 4 95 518 0 14 Dtool_5HfQGmIK 1 4 this 3 519  
95 14 Dtool_5HfQbgXg 4 96 518 0 14 Dtool_5HfQbgXg 2 4 this 3 519  6 object 1 520  
96 14 Dtool_5HfQP6lw 6 97 520 0 14 Dtool_5HfQP6lw 1 4 this 3 519  
97 14 Dtool_5HfQOrNi 6 98 500 0 14 Dtool_5HfQOrNi 2 4 this 3 519  16 formatted_object 1 488  
98 14 Dtool_5HfQQffJ 6 98 500 0 14 Dtool_5HfQQffJ 2 4 this 3 519  2 in 1 534  
99 14 Dtool_5HfQ7w6k 6 99 488 0 14 Dtool_5HfQ7w6k 2 4 this 3 519  16 show_field_names 1 500  
100 14 Dtool_5HfQ7De7 6 99 488 0 14 Dtool_5HfQ7De7 1 4 this 3 519  
101 14 Dtool_5HfQ1a_o 4 99 518 0 14 Dtool_5HfQ1a_o 3 4 this 3 519  3 out 1 516  16 show_field_names 1 500  
102 14 Dtool_5HfQDezg 4 99 518 0 14 Dtool_5HfQDezg 2 4 this 3 519  3 out 1 516  
103 14 Dtool_5HfQs8if 6 100 500 0 14 Dtool_5HfQs8if 1 4 this 3 530  
104 14 Dtool_5HfQI5eb 6 101 500 0 14 Dtool_5HfQI5eb 1 4 this 3 530  
105 14 Dtool_5HfQKmZZ 6 102 500 0 14 Dtool_5HfQKmZZ 1 4 this 3 530  
106 14 Dtool_5HfQLzjv 6 103 500 0 14 Dtool_5HfQLzjv 1 4 this 3 530  
107 14 Dtool_5HfQ1vkq 6 104 529 0 14 Dtool_5HfQ1vkq 1 4 this 3 530  
108 14 Dtool_5HfQt4l7 6 105 529 0 14 Dtool_5HfQt4l7 1 4 this 3 530  
109 14 Dtool_5HfQhK1P 6 106 488 0 14 Dtool_5HfQhK1P 1 4 this 3 530  
110 14 Dtool_5HfQMJrY 6 107 489 0 14 Dtool_5HfQMJrY 0 
111 14 Dtool_5HfQXuco 4 108 518 0 14 Dtool_5HfQXuco 2 4 this 3 519  5 value 1 489  
112 14 Dtool_5HfQEvl1 4 109 518 0 14 Dtool_5HfQEvl1 2 4 this 3 519  5 value 1 489  
113 14 Dtool_5HfQf5du 4 110 518 0 14 Dtool_5HfQf5du 2 4 this 3 519  5 value 1 489  
114 14 Dtool_5HfQ02JY 4 111 518 0 14 Dtool_5HfQ02JY 2 4 this 3 519  5 value 1 533  
115 14 Dtool_5HfQ2c6b 4 112 518 0 14 Dtool_5HfQ2c6b 2 4 this 3 519  5 value 1 529  
116 14 Dtool_5HfQ_5sg 4 113 518 0 14 Dtool_5HfQ_5sg 2 4 this 3 519  5 value 1 529  
117 14 Dtool_5HfQbFo8 4 114 518 0 14 Dtool_5HfQbFo8 2 4 this 3 519  5 value 1 529  
118 14 Dtool_5HfQ1xJ4 4 115 518 0 14 Dtool_5HfQ1xJ4 2 4 this 3 519  5 value 1 524  
119 14 Dtool_5HfQrDF_ 4 116 518 0 14 Dtool_5HfQrDF_ 2 4 this 3 519  5 value 1 532  
120 14 Dtool_5HfQojpx 4 117 518 0 14 Dtool_5HfQojpx 2 4 this 3 519  5 value 1 488  
121 14 Dtool_5HfQWVWD 6 118 489 0 14 Dtool_5HfQWVWD 1 4 this 3 519  
122 14 Dtool_5HfQ30HM 6 119 489 0 14 Dtool_5HfQ30HM 1 4 this 3 519  
123 14 Dtool_5HfQFltJ 6 120 489 0 14 Dtool_5HfQFltJ 1 4 this 3 519  
124 14 Dtool_5HfQQ0_K 6 121 533 0 14 Dtool_5HfQQ0_K 1 4 this 3 519  
125 14 Dtool_5HfQCUlV 6 122 529 0 14 Dtool_5HfQCUlV 1 4 this 3 519  
126 14 Dtool_5HfQBK3t 6 123 529 0 14 Dtool_5HfQBK3t 1 4 this 3 519  
127 14 Dtool_5HfQGD_g 6 124 529 0 14 Dtool_5HfQGD_g 1 4 this 3 519  
128 14 Dtool_5HfQh02J 6 125 524 0 14 Dtool_5HfQh02J 1 4 this 3 519  
129 14 Dtool_5HfQ0uTr 6 126 532 0 14 Dtool_5HfQ0uTr 1 4 this 3 519  
130 14 Dtool_5HfQiaAh 6 127 488 0 14 Dtool_5HfQiaAh 1 4 this 3 519  
131 14 Dtool_5HfQz9PJ 6 129 536 0 14 Dtool_5HfQz9PJ 1 4 this 3 513  
132 14 Dtool_5HfQGnt_ 6 129 537 0 14 Dtool_5HfQGnt_ 1 4 this 3 514  
133 14 Dtool_5HfQIgNV 6 130 539 0 14 Dtool_5HfQIgNV 1 4 this 3 513  
134 14 Dtool_5HfQdS2O 6 130 540 0 14 Dtool_5HfQdS2O 1 4 this 3 514  
135 14 Dtool_5HfQCNI1 6 131 513 0 14 Dtool_5HfQCNI1 1 4 this 3 514  
136 14 Dtool_5HfQuxsw 6 132 500 0 14 Dtool_5HfQuxsw 1 4 this 3 514  
137 14 Dtool_5HfQ1UHS 6 133 542 0 14 Dtool_5HfQ1UHS 1 4 this 3 514  
138 14 Dtool_5HfQAc1p 6 135 513 0 14 Dtool_5HfQAc1p 1 4 this 3 540  
139 14 Dtool_5HfQPdJT 6 136 489 0 14 Dtool_5HfQPdJT 1 4 this 3 540  
140 14 Dtool_5HfQz94I 6 138 489 0 14 Dtool_5HfQz94I 1 4 this 3 508  
141 14 Dtool_5HfQMXfe 6 139 513 0 14 Dtool_5HfQMXfe 2 4 this 3 508  1 n 1 489  
142 14 Dtool_5HfQkDFi 6 140 488 0 14 Dtool_5HfQkDFi 2 4 this 3 508  1 n 1 489  
143 14 Dtool_5HfQjDfy 6 141 500 0 14 Dtool_5HfQjDfy 2 4 this 3 508  1 n 1 489  
144 14 Dtool_5HfQKM_N 6 142 488 0 14 Dtool_5HfQKM_N 2 4 this 3 508  1 n 1 489  
145 14 Dtool_5HfQwNXT 6 143 466 0 14 Dtool_5HfQwNXT 2 4 this 3 508  1 n 1 489  
146 14 Dtool_5HfQ_HmD 6 144 489 0 14 Dtool_5HfQ_HmD 2 4 this 3 508  1 n 1 489  
147 14 Dtool_5HfQ9iGM 6 147 506 0 14 Dtool_5HfQ9iGM 1 4 this 3 544  
148 14 Dtool_5HfQa4C4 6 147 547 0 14 Dtool_5HfQa4C4 1 4 this 3 545  
149 14 Dtool_5HfQQXd6 6 148 549 0 14 Dtool_5HfQQXd6 1 4 this 3 544  
150 14 Dtool_5HfQE_84 6 148 550 0 14 Dtool_5HfQE_84 1 4 this 3 545  
151 14 Dtool_5HfQ0qWE 4 149 518 0 14 Dtool_5HfQ0qWE 2 4 this 3 545  3 out 1 516  
152 14 Dtool_5HfQ5mxH 4 150 518 0 14 Dtool_5HfQ5mxH 3 4 this 3 545  3 out 1 516  12 indent_level 1 489  
153 14 Dtool_5HfQbBzT 6 152 501 0 14 Dtool_5HfQbBzT 1 4 this 3 547  
154 14 Dtool_5HfQBfkV 6 153 488 0 14 Dtool_5HfQBfkV 1 4 this 3 547  
155 14 Dtool_5HfQ4r2k 6 154 489 0 14 Dtool_5HfQ4r2k 1 4 this 3 547  
156 14 Dtool_5HfQ5HeQ 6 155 489 0 14 Dtool_5HfQ5HeQ 1 4 this 3 547  
157 14 Dtool_5HfQlQkr 6 156 506 0 14 Dtool_5HfQlQkr 2 4 this 3 547  1 n 1 489  
158 14 Dtool_5HfQMas6 6 157 500 0 14 Dtool_5HfQMas6 1 4 this 3 547  
159 14 Dtool_5HfQlqaF 6 158 491 0 14 Dtool_5HfQlqaF 1 4 this 3 547  
160 14 Dtool_5HfQdQnw 6 159 489 0 14 Dtool_5HfQdQnw 1 4 this 3 547  
161 14 Dtool_5HfQv5gR 6 160 491 0 14 Dtool_5HfQv5gR 2 4 this 3 547  1 n 1 489  
162 14 Dtool_5HfQcyie 6 161 491 0 14 Dtool_5HfQcyie 2 4 this 3 547  4 name 1 488  
163 14 Dtool_5HfQyQK1 6 162 491 0 14 Dtool_5HfQyQK1 2 4 this 3 547  12 index_number 1 489  
164 14 Dtool_5HfQ_Xnu 6 163 489 0 14 Dtool_5HfQ_Xnu 1 4 this 3 547  
165 14 Dtool_5HfQlQ88 6 164 491 0 14 Dtool_5HfQlQ88 2 4 this 3 547  1 n 1 489  
166 14 Dtool_5HfQ1VbT 6 165 500 0 14 Dtool_5HfQ1VbT 1 4 this 3 547  
167 14 Dtool_5HfQo9se 6 166 500 0 14 Dtool_5HfQo9se 1 4 this 3 547  
168 14 Dtool_5HfQ2Fc9 4 167 518 0 14 Dtool_5HfQ2Fc9 1 4 this 3 506  
169 14 Dtool_5HfQdkTw 4 168 518 0 14 Dtool_5HfQdkTw 1 4 this 3 506  
170 14 Dtool_5HfQoeOv 6 169 500 0 14 Dtool_5HfQoeOv 1 4 this 3 547  
171 14 Dtool_5HfQnYZY 4 170 518 0 14 Dtool_5HfQnYZY 2 4 this 3 506  9 class_def 1 520  
172 14 Dtool_5HfQS395 6 171 520 0 14 Dtool_5HfQS395 1 4 this 3 547  
173 14 Dtool_5HfQ0eTp 6 172 500 0 14 Dtool_5HfQ0eTp 1 4 this 3 547  
174 14 Dtool_5HfQ3p5u 4 173 518 0 14 Dtool_5HfQ3p5u 2 4 this 3 506  15 owner_class_def 1 520  
175 14 Dtool_5HfQ_0C0 6 174 520 0 14 Dtool_5HfQ_0C0 1 4 this 3 547  
176 14 Dtool_5HfQQPjh 4 175 518 0 14 Dtool_5HfQQPjh 3 4 this 3 547  7 distobj 1 520  2 di 1 552  
177 14 Dtool_5HfQLA_2 4 176 518 0 14 Dtool_5HfQLA_2 3 4 this 3 547  7 distobj 1 520  2 di 1 552  
178 14 Dtool_5HfQHOff 4 177 518 0 14 Dtool_5HfQHOff 3 4 this 3 547  7 distobj 1 520  2 di 1 552  
179 14 Dtool_5HfQkwBe 4 178 518 0 14 Dtool_5HfQkwBe 3 4 this 3 547  7 distobj 1 520  2 di 1 552  
180 14 Dtool_5HfQ5Jl7 4 179 518 0 14 Dtool_5HfQ5Jl7 3 4 this 3 547  7 distobj 1 520  2 di 1 552  
181 14 Dtool_5HfQTp_A 4 180 518 0 14 Dtool_5HfQTp_A 4 4 this 3 506  7 distobj 1 520  10 field_name 1 488  8 datagram 1 554  
182 14 Dtool_5HfQx5ko 4 180 518 0 14 Dtool_5HfQx5ko 4 4 this 3 506  7 distobj 1 520  10 field_name 1 488  10 value_blob 1 488  
183 14 Dtool_5HfQQSyU 6 181 500 0 14 Dtool_5HfQQSyU 4 4 this 3 547  6 packer 1 519  7 distobj 1 520  5 field 1 492  
184 14 Dtool_5HfQAQnH 6 181 500 0 14 Dtool_5HfQAQnH 4 4 this 3 547  8 datagram 1 523  7 distobj 1 520  5 field 1 492  
185 14 Dtool_5HfQqX_e 7 182 523 0 14 Dtool_5HfQqX_e 4 4 this 3 547  10 field_name 1 488  5 do_id 1 489  4 args 1 520  
186 14 Dtool_5HfQ28_N 7 183 523 0 14 Dtool_5HfQ28_N 6 4 this 3 547  10 field_name 1 488  5 do_id 1 489  5 to_id 1 524  7 from_id 1 524  4 args 1 520  
187 14 Dtool_5HfQFfyH 7 184 523 0 14 Dtool_5HfQFfyH 8 4 this 3 547  7 distobj 1 520  5 do_id 1 489  9 parent_id 1 489  7 zone_id 1 489  19 district_channel_id 1 524  15 from_channel_id 1 524  15 optional_fields 1 520  
188 14 Dtool_5HfQqGXN 7 185 523 0 14 Dtool_5HfQqGXN 5 4 this 3 547  7 distobj 1 520  5 do_id 1 489  7 zone_id 1 489  15 optional_fields 1 520  
189 14 Dtool_5HfQV0re 7 186 523 0 14 Dtool_5HfQV0re 7 4 this 3 547  10 context_id 1 529  9 parent_id 1 529  7 zone_id 1 529  13 owner_channel 1 524  18 database_server_id 1 524  15 from_channel_id 1 524  
190 14 Dtool_5HfQcPr9 7 187 523 0 14 Dtool_5HfQcPr9 6 4 this 3 547  10 context_id 1 529  9 parent_id 1 529  7 zone_id 1 529  18 database_server_id 1 524  15 from_channel_id 1 524  
191 14 Dtool_5HfQVeMy 6 189 547 0 14 Dtool_5HfQVeMy 1 4 this 3 498  
192 14 Dtool_5HfQM0cB 7 192 501 418 14 Dtool_5HfQM0cB 0 
193 14 Dtool_5HfQ3Phn 4 194 518 0 14 Dtool_5HfQ3Phn 1 4 this 3 501  
194 14 Dtool_5HfQcUOF 6 195 500 0 14 Dtool_5HfQcUOF 1 4 this 3 501  
195 14 Dtool_5HfQEDwK 6 196 500 0 14 Dtool_5HfQEDwK 2 4 this 3 501  8 filename 1 556  
196 14 Dtool_5HfQRI_H 6 196 500 0 14 Dtool_5HfQRI_H 3 4 this 3 501  2 in 1 534  8 filename 1 488  
197 14 Dtool_5HfQtrn_ 6 196 500 0 14 Dtool_5HfQtrn_ 2 4 this 3 501  2 in 1 534  
198 14 Dtool_5HfQIISH 6 197 500 0 14 Dtool_5HfQIISH 3 4 this 3 558  8 filename 1 556  5 brief 1 500  
199 14 Dtool_5HfQ4v0f 6 197 500 0 14 Dtool_5HfQ4v0f 3 4 this 3 558  3 out 1 516  5 brief 1 500  
200 14 Dtool_5HfQ4S8N 6 198 489 0 14 Dtool_5HfQ4S8N 1 4 this 3 558  
201 14 Dtool_5HfQEYUl 6 199 506 0 14 Dtool_5HfQEYUl 2 4 this 3 558  1 n 1 489  
202 14 Dtool_5HfQ_5op 6 200 506 0 14 Dtool_5HfQ_5op 2 4 this 3 558  4 name 1 488  
203 14 Dtool_5HfQSm8d 6 201 549 0 14 Dtool_5HfQSm8d 2 4 this 3 558  4 name 1 488  
204 14 Dtool_5HfQ_R7T 6 202 491 0 14 Dtool_5HfQ_R7T 2 4 this 3 558  12 index_number 1 489  
205 14 Dtool_5HfQuN3i 6 203 500 0 14 Dtool_5HfQuN3i 1 4 this 3 558  
206 14 Dtool_5HfQyf1h 6 204 489 0 14 Dtool_5HfQyf1h 1 4 this 3 558  
207 14 Dtool_5HfQ7Jiy 6 205 488 0 14 Dtool_5HfQ7Jiy 2 4 this 3 558  1 n 1 489  
208 14 Dtool_5HfQJagU 6 206 489 0 14 Dtool_5HfQJagU 2 4 this 3 558  1 n 1 489  
209 14 Dtool_5HfQNoCv 6 207 488 0 14 Dtool_5HfQNoCv 3 4 this 3 558  1 n 1 489  1 i 1 489  
210 14 Dtool_5HfQyp_b 6 208 489 0 14 Dtool_5HfQyp_b 1 4 this 3 558  
211 14 Dtool_5HfQqgG_ 6 209 560 0 14 Dtool_5HfQqgG_ 2 4 this 3 558  1 n 1 489  
212 14 Dtool_5HfQN8xh 6 210 560 0 14 Dtool_5HfQN8xh 2 4 this 3 558  4 name 1 488  
213 14 Dtool_5HfQJlRM 6 211 489 0 14 Dtool_5HfQJlRM 1 4 this 3 558  
214 14 Dtool_5HfQZmcD 6 212 504 0 14 Dtool_5HfQZmcD 2 4 this 3 558  1 n 1 489  
215 14 Dtool_5HfQ96Hm 6 213 504 0 14 Dtool_5HfQ96Hm 2 4 this 3 558  4 name 1 488  
216 14 Dtool_5HfQXMzc 6 214 561 0 14 Dtool_5HfQXMzc 1 4 this 3 558  
217 14 Dtool_5HfQhXRr 6 216 488 0 14 Dtool_5HfQhXRr 1 4 this 3 504  
218 14 Dtool_5HfQ9TYG 6 218 489 0 14 Dtool_5HfQ9TYG 1 4 this 3 511  
219 14 Dtool_5HfQKxjf 6 219 507 0 14 Dtool_5HfQKxjf 2 4 this 3 511  1 n 1 489  
220 14 Dtool_5HfQdLgm 6 222 466 0 14 Dtool_5HfQdLgm 1 4 this 3 537  
221 14 Dtool_5HfQL3kT 6 223 500 0 14 Dtool_5HfQL3kT 1 4 this 3 537  
222 14 Dtool_5HfQ_9h_ 6 224 532 0 14 Dtool_5HfQ_9h_ 1 4 this 3 537  
223 14 Dtool_5HfQBZIP 6 225 489 0 14 Dtool_5HfQBZIP 1 4 this 3 537  
224 14 Dtool_5HfQ5_NH 6 228 488 0 14 Dtool_5HfQ5_NH 1 4 this 3 550  
225 14 Dtool_5HfQXw_6 6 229 491 0 14 Dtool_5HfQXw_6 1 4 this 3 550  
226 14 Dtool_5HfQeUzc 6 230 489 0 14 Dtool_5HfQeUzc 1 4 this 3 550  
227 14 Dtool_5HfQ0ls8 6 231 489 0 14 Dtool_5HfQ0ls8 2 4 this 3 550  10 case_value 1 488  
228 14 Dtool_5HfQt2ll 6 232 490 0 14 Dtool_5HfQt2ll 2 4 this 3 550  1 n 1 489  
229 14 Dtool_5HfQRFXc 6 233 490 0 14 Dtool_5HfQRFXc 1 4 this 3 550  
230 14 Dtool_5HfQTRGr 6 234 488 0 14 Dtool_5HfQTRGr 2 4 this 3 550  10 case_index 1 489  
231 14 Dtool_5HfQlF1x 6 235 489 0 14 Dtool_5HfQlF1x 2 4 this 3 550  10 case_index 1 489  
232 14 Dtool_5HfQJzsC 6 236 491 0 14 Dtool_5HfQJzsC 3 4 this 3 550  10 case_index 1 489  1 n 1 489  
233 14 Dtool_5HfQwD_J 6 237 491 0 14 Dtool_5HfQwD_J 3 4 this 3 550  10 case_index 1 489  4 name 1 488  
234 14 Dtool_5HfQHIRd 6 239 550 0 14 Dtool_5HfQHIRd 1 4 this 3 495  
235 14 Dtool_5HfQ3FUN 6 242 489 0 14 Dtool_5HfQ3FUN 1 4 this 3 542  
236 14 Dtool_5HfQVrMq 6 243 488 0 14 Dtool_5HfQVrMq 1 4 this 3 542  
237 14 Dtool_5HfQnZ2F 6 244 488 0 14 Dtool_5HfQnZ2F 1 4 this 3 542  
238 14 Dtool_5HfQnwBq 6 245 500 0 14 Dtool_5HfQnwBq 1 4 this 3 542  
239 14 Dtool_5HfQ3UT1 6 246 500 0 14 Dtool_5HfQ3UT1 1 4 this 3 542  
97
466 15 DCSubatomicType 532481 15 DCSubatomicType 15 DCSubatomicType 0 0 0 0 0 0 0 0 0 21 7 ST_int8 7 ST_int8 0 8 ST_int16 8 ST_int16 1 8 ST_int32 8 ST_int32 2 8 ST_int64 8 ST_int64 3 8 ST_uint8 8 ST_uint8 4 9 ST_uint16 9 ST_uint16 5 9 ST_uint32 9 ST_uint32 6 9 ST_uint64 9 ST_uint64 7 10 ST_float64 10 ST_float64 8 9 ST_string 9 ST_string 9 7 ST_blob 7 ST_blob 10 9 ST_blob32 9 ST_blob32 11 13 ST_int16array 13 ST_int16array 12 13 ST_int32array 13 ST_int32array 13 14 ST_uint16array 14 ST_uint16array 14 14 ST_uint32array 14 ST_uint32array 15 12 ST_int8array 12 ST_int8array 16 13 ST_uint8array 13 ST_uint8array 17 19 ST_uint32uint8array 19 ST_uint32uint8array 18 7 ST_char 7 ST_char 19 10 ST_invalid 10 ST_invalid 20 0 410
////////////////////////////////////////////////////////////////////
//        Enum : DCSubatomicType
// Description : This defines the numeric type of each element of a
//               DCAtomicField; that is, the particular values that
//               will get added to the message when the atomic field
//               method is called.
////////////////////////////////////////////////////////////////////

467 10 DCPackType 532481 10 DCPackType 10 DCPackType 0 0 0 0 0 0 0 0 0 12 10 PT_invalid 10 PT_invalid 0 9 PT_double 9 PT_double 1 6 PT_int 6 PT_int 2 7 PT_uint 7 PT_uint 3 8 PT_int64 8 PT_int64 4 9 PT_uint64 9 PT_uint64 5 9 PT_string 9 PT_string 6 7 PT_blob 7 PT_blob 7 8 PT_array 8 PT_array 8 8 PT_field 8 PT_field 9 8 PT_class 8 PT_class 10 9 PT_switch 9 PT_switch 11 0 137
// This enumerated type is returned by get_pack_type() and represents
// the best choice for a subsequent call to pack_*() or unpack_*().

468 17 DCPackerInterface 26625 17 DCPackerInterface 17 DCPackerInterface 0 0 0 0 240 0 6 241 242 243 244 245 246 0 0 0 0 514
////////////////////////////////////////////////////////////////////
//       Class : DCPackerInterface
// Description : This defines the internal interface for packing
//               values into a DCField.  The various different DC
//               objects inherit from this.  
//
//               Normally these methods are called only by the
//               DCPacker object; the user wouldn't normally call
//               these directly.
////////////////////////////////////////////////////////////////////

469 13 DCKeywordList 26625 13 DCKeywordList 13 DCKeywordList 0 0 0 0 247 0 5 248 249 250 251 252 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : DCKeywordList
// Description : This is a list of keywords (see DCKeyword) that may
//               be set on a particular field.
////////////////////////////////////////////////////////////////////

470 7 DCField 26625 7 DCField 7 DCField 0 0 0 0 257 0 27 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 0 2 3 468 253 254 3 469 255 256 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : DCField
// Description : A single field of a Distributed Class, either atomic
//               or molecular.
////////////////////////////////////////////////////////////////////

471 10 DCPackData 26625 10 DCPackData 10 DCPackData 0 0 0 1 285 286 0 3 287 288 289 0 0 0 0 0

472 8 DCPacker 26625 8 DCPacker 8 DCPacker 0 0 0 1 290 291 0 68 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : DCPacker
// Description : This class can be used for packing a series of
//               numeric and string data into a binary stream,
//               according to the DC specification.
//
//               See also direct/src/doc/dcPacker.txt for a more
//               complete description and examples of using this
//               class.
////////////////////////////////////////////////////////////////////

473 11 DCParameter 75777 11 DCParameter 11 DCParameter 0 0 0 0 257 0 5 360 361 362 363 364 0 1 0 470 0 0 0 0 577
////////////////////////////////////////////////////////////////////
//       Class : DCParameter
// Description : Represents the type specification for a single
//               parameter within a field specification.  This may be
//               a simple type, or it may be a class or an array
//               reference.
//
//               This may also be a typedef reference to another type,
//               which has the same properties as the referenced type,
//               but a different name.
////////////////////////////////////////////////////////////////////

474 16 DCArrayParameter 75777 16 DCArrayParameter 16 DCArrayParameter 0 0 0 0 257 0 2 365 366 0 1 0 473 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : DCArrayParameter
// Description : This represents an array of some other kind of
//               object, meaning this parameter type accepts an
//               arbitrary (or possibly fixed) number of nested
//               fields, all of which are of the same type.
////////////////////////////////////////////////////////////////////

475 13 DCAtomicField 75777 13 DCAtomicField 13 DCAtomicField 0 0 0 0 257 0 7 367 368 369 370 371 372 373 0 1 0 470 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : DCAtomicField
// Description : A single atomic field of a Distributed Class, as read
//               from a .dc file.  This defines an interface to the
//               Distributed Class, and is always implemented as a
//               remote procedure method.
////////////////////////////////////////////////////////////////////

476 13 DCDeclaration 26625 13 DCDeclaration 13 DCDeclaration 0 0 0 0 374 0 4 375 376 377 378 0 0 0 0 634
////////////////////////////////////////////////////////////////////
//       Class : DCDeclaration
// Description : This is a common interface for a declaration in a DC
//               file.  Currently, this is either a class or a typedef
//               declaration (import declarations are still collected
//               together at the top, and don't inherit from this
//               object).  Its only purpose is so that classes and
//               typedefs can be stored in one list together so they
//               can be ordered correctly on output.
////////////////////////////////////////////////////////////////////

477 7 DCClass 75777 7 DCClass 7 DCClass 0 0 0 0 374 0 36 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 0 1 0 476 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : DCClass
// Description : Defines a particular DistributedClass as read from an
//               input .dc file.
////////////////////////////////////////////////////////////////////

478 16 DCClassParameter 141313 16 DCClassParameter 16 DCClassParameter 0 0 0 0 416 0 1 415 0 1 0 473 0 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : DCClassParameter
// Description : This represents a class (or struct) object used as a
//               parameter itself.  This means that all the fields of
//               the class get packed into the message.
////////////////////////////////////////////////////////////////////

479 6 DCFile 26625 6 DCFile 6 DCFile 0 0 0 1 417 418 0 21 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : DCFile
// Description : Represents the complete list of Distributed Class
//               descriptions as read from a .dc file.
////////////////////////////////////////////////////////////////////

480 9 DCKeyword 75777 9 DCKeyword 9 DCKeyword 0 0 0 0 374 0 1 440 0 1 0 476 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : DCKeyword
// Description : This represents a single keyword declaration in the
//               dc file.  It is used to define a communication
//               property associated with a field, for instance
//               "broadcast" or "airecv".
////////////////////////////////////////////////////////////////////

481 16 DCMolecularField 141313 16 DCMolecularField 16 DCMolecularField 0 0 0 0 443 0 2 441 442 0 1 0 470 0 0 0 0 420
////////////////////////////////////////////////////////////////////
//       Class : DCMolecularField
// Description : A single molecular field of a Distributed Class, as
//               read from a .dc file.  This represents a combination
//               of two or more related atomic fields, that will often
//               be treated as a unit.
////////////////////////////////////////////////////////////////////

482 17 DCSimpleParameter 141313 17 DCSimpleParameter 17 DCSimpleParameter 0 0 0 0 448 0 4 444 445 446 447 0 1 0 473 0 0 0 0 537
////////////////////////////////////////////////////////////////////
//       Class : DCSimpleParameter
// Description : This is the most fundamental kind of parameter type:
//               a single number or string, one of the DCSubatomicType
//               elements.  It may also optionally have a divisor,
//               which is meaningful only for the numeric type
//               elements (and represents a fixed-point numeric
//               convention).
////////////////////////////////////////////////////////////////////

483 8 DCSwitch 75777 8 DCSwitch 8 DCSwitch 0 0 0 0 374 0 10 449 450 451 452 453 454 455 456 457 458 0 1 0 476 0 0 0 0 392
////////////////////////////////////////////////////////////////////
//       Class : DCSwitch
// Description : This represents a switch statement, which can appear
//               inside a class body and represents two or more
//               alternative unpacking schemes based on the first
//               field read.
////////////////////////////////////////////////////////////////////

484 17 DCSwitchParameter 141313 17 DCSwitchParameter 17 DCSwitchParameter 0 0 0 0 460 0 1 459 0 1 0 473 0 0 0 0 350
////////////////////////////////////////////////////////////////////
//       Class : DCSwitchParameter
// Description : This represents a switch object used as a
//               parameter itself, which packs the appropriate fields
//               of the switch into the message.
////////////////////////////////////////////////////////////////////

485 9 DCTypedef 75777 9 DCTypedef 9 DCTypedef 0 0 0 0 374 0 5 461 462 463 464 465 0 1 0 476 0 0 0 0 344
////////////////////////////////////////////////////////////////////
//       Class : DCTypedef
// Description : This represents a single typedef declaration in the
//               dc file.  It assigns a particular type to a new name,
//               just like a C typedef.
////////////////////////////////////////////////////////////////////

486 25 DCPackerInterface const * 8576 25 DCPackerInterface const * 25 DCPackerInterface const * 0 0 487 0 0 0 0 0 0 0 0 0

487 23 DCPackerInterface const 8832 23 DCPackerInterface const 23 DCPackerInterface const 0 0 468 0 0 0 0 0 0 0 0 0

488 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

489 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

490 19 DCPackerInterface * 8576 19 DCPackerInterface * 19 DCPackerInterface * 0 0 468 0 0 0 0 0 0 0 0 0

491 9 DCField * 8576 9 DCField * 9 DCField * 0 0 470 0 0 0 0 0 0 0 0 0

492 15 DCField const * 8576 15 DCField const * 15 DCField const * 0 0 493 0 0 0 0 0 0 0 0 0

493 13 DCField const 8832 13 DCField const 13 DCField const 0 0 470 0 0 0 0 0 0 0 0 0

494 19 DCSwitchParameter * 8576 19 DCSwitchParameter * 19 DCSwitchParameter * 0 0 484 0 0 0 0 0 0 0 0 0

495 25 DCSwitchParameter const * 8576 25 DCSwitchParameter const * 25 DCSwitchParameter const * 0 0 496 0 0 0 0 0 0 0 0 0

496 23 DCSwitchParameter const 8832 23 DCSwitchParameter const 23 DCSwitchParameter const 0 0 484 0 0 0 0 0 0 0 0 0

497 18 DCClassParameter * 8576 18 DCClassParameter * 18 DCClassParameter * 0 0 478 0 0 0 0 0 0 0 0 0

498 24 DCClassParameter const * 8576 24 DCClassParameter const * 24 DCClassParameter const * 0 0 499 0 0 0 0 0 0 0 0 0

499 22 DCClassParameter const 8832 22 DCClassParameter const 22 DCClassParameter const 0 0 478 0 0 0 0 0 0 0 0 0

500 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

501 8 DCFile * 8576 8 DCFile * 8 DCFile * 0 0 479 0 0 0 0 0 0 0 0 0

502 21 DCKeywordList const * 8576 21 DCKeywordList const * 21 DCKeywordList const * 0 0 503 0 0 0 0 0 0 0 0 0

503 19 DCKeywordList const 8832 19 DCKeywordList const 19 DCKeywordList const 0 0 469 0 0 0 0 0 0 0 0 0

504 17 DCKeyword const * 8576 17 DCKeyword const * 17 DCKeyword const * 0 0 505 0 0 0 0 0 0 0 0 0

505 15 DCKeyword const 8832 15 DCKeyword const 15 DCKeyword const 0 0 480 0 0 0 0 0 0 0 0 0

506 9 DCClass * 8576 9 DCClass * 9 DCClass * 0 0 477 0 0 0 0 0 0 0 0 0

507 15 DCAtomicField * 8576 15 DCAtomicField * 15 DCAtomicField * 0 0 475 0 0 0 0 0 0 0 0 0

508 21 DCAtomicField const * 8576 21 DCAtomicField const * 21 DCAtomicField const * 0 0 509 0 0 0 0 0 0 0 0 0

509 19 DCAtomicField const 8832 19 DCAtomicField const 19 DCAtomicField const 0 0 475 0 0 0 0 0 0 0 0 0

510 18 DCMolecularField * 8576 18 DCMolecularField * 18 DCMolecularField * 0 0 481 0 0 0 0 0 0 0 0 0

511 24 DCMolecularField const * 8576 24 DCMolecularField const * 24 DCMolecularField const * 0 0 512 0 0 0 0 0 0 0 0 0

512 22 DCMolecularField const 8832 22 DCMolecularField const 22 DCMolecularField const 0 0 481 0 0 0 0 0 0 0 0 0

513 13 DCParameter * 8576 13 DCParameter * 13 DCParameter * 0 0 473 0 0 0 0 0 0 0 0 0

514 19 DCParameter const * 8576 19 DCParameter const * 19 DCParameter const * 0 0 515 0 0 0 0 0 0 0 0 0

515 17 DCParameter const 8832 17 DCParameter const 17 DCParameter const 0 0 473 0 0 0 0 0 0 0 0 0

516 9 ostream * 8576 9 ostream * 9 ostream * 0 0 517 0 0 0 0 0 0 0 0 0

517 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

518 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

519 10 DCPacker * 8576 10 DCPacker * 10 DCPacker * 0 0 472 0 0 0 0 0 0 0 0 0

520 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 521 0 0 0 0 0 0 0 0 0

521 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0

522 8 Datagram 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

523 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 522 0 0 0 0 0 0 0 0 0

524 16 unsigned __int64 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0

525 15 DCKeywordList * 8576 15 DCKeywordList * 15 DCKeywordList * 0 0 469 0 0 0 0 0 0 0 0 0

526 12 DCPackData * 8576 12 DCPackData * 12 DCPackData * 0 0 471 0 0 0 0 0 0 0 0 0

527 18 DCPackData const * 8576 18 DCPackData const * 18 DCPackData const * 0 0 528 0 0 0 0 0 0 0 0 0

528 16 DCPackData const 8832 16 DCPackData const 16 DCPackData const 0 0 471 0 0 0 0 0 0 0 0 0

529 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

530 16 DCPacker const * 8576 16 DCPacker const * 16 DCPacker const * 0 0 531 0 0 0 0 0 0 0 0 0

531 14 DCPacker const 8832 14 DCPacker const 14 DCPacker const 0 0 472 0 0 0 0 0 0 0 0 0

532 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

533 7 __int64 8226 7 __int64 7 __int64 0 8 0 0 0 0 0 0 0 0 0 0

534 9 istream * 8576 9 istream * 9 istream * 0 0 535 0 0 0 0 0 0 0 0 0

535 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0

536 19 DCSimpleParameter * 8576 19 DCSimpleParameter * 19 DCSimpleParameter * 0 0 482 0 0 0 0 0 0 0 0 0

537 25 DCSimpleParameter const * 8576 25 DCSimpleParameter const * 25 DCSimpleParameter const * 0 0 538 0 0 0 0 0 0 0 0 0

538 23 DCSimpleParameter const 8832 23 DCSimpleParameter const 23 DCSimpleParameter const 0 0 482 0 0 0 0 0 0 0 0 0

539 18 DCArrayParameter * 8576 18 DCArrayParameter * 18 DCArrayParameter * 0 0 474 0 0 0 0 0 0 0 0 0

540 24 DCArrayParameter const * 8576 24 DCArrayParameter const * 24 DCArrayParameter const * 0 0 541 0 0 0 0 0 0 0 0 0

541 22 DCArrayParameter const 8832 22 DCArrayParameter const 22 DCArrayParameter const 0 0 474 0 0 0 0 0 0 0 0 0

542 17 DCTypedef const * 8576 17 DCTypedef const * 17 DCTypedef const * 0 0 543 0 0 0 0 0 0 0 0 0

543 15 DCTypedef const 8832 15 DCTypedef const 15 DCTypedef const 0 0 485 0 0 0 0 0 0 0 0 0

544 15 DCDeclaration * 8576 15 DCDeclaration * 15 DCDeclaration * 0 0 476 0 0 0 0 0 0 0 0 0

545 21 DCDeclaration const * 8576 21 DCDeclaration const * 21 DCDeclaration const * 0 0 546 0 0 0 0 0 0 0 0 0

546 19 DCDeclaration const 8832 19 DCDeclaration const 19 DCDeclaration const 0 0 476 0 0 0 0 0 0 0 0 0

547 15 DCClass const * 8576 15 DCClass const * 15 DCClass const * 0 0 548 0 0 0 0 0 0 0 0 0

548 13 DCClass const 8832 13 DCClass const 13 DCClass const 0 0 477 0 0 0 0 0 0 0 0 0

549 10 DCSwitch * 8576 10 DCSwitch * 10 DCSwitch * 0 0 483 0 0 0 0 0 0 0 0 0

550 16 DCSwitch const * 8576 16 DCSwitch const * 16 DCSwitch const * 0 0 551 0 0 0 0 0 0 0 0 0

551 14 DCSwitch const 8832 14 DCSwitch const 14 DCSwitch const 0 0 483 0 0 0 0 0 0 0 0 0

552 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 553 0 0 0 0 0 0 0 0 0

553 16 DatagramIterator 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

554 16 Datagram const * 8576 16 Datagram const * 16 Datagram const * 0 0 555 0 0 0 0 0 0 0 0 0

555 14 Datagram const 8832 14 Datagram const 14 Datagram const 0 0 522 0 0 0 0 0 0 0 0 0

556 10 Filename * 8576 10 Filename * 10 Filename * 0 0 557 0 0 0 0 0 0 0 0 0

557 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

558 14 DCFile const * 8576 14 DCFile const * 14 DCFile const * 0 0 559 0 0 0 0 0 0 0 0 0

559 12 DCFile const 8832 12 DCFile const 12 DCFile const 0 0 479 0 0 0 0 0 0 0 0 0

560 11 DCTypedef * 8576 11 DCTypedef * 11 DCTypedef * 0 0 485 0 0 0 0 0 0 0 0 0

561 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0

562 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
