1145554982
2 2
14 libparametrics 4 Hc9W 5 panda 
275
297 8 is_valid 4 572 25 ParametricCurve::is_valid 0 1 1 415
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::is_valid
//       Access: Published, Virtual
//  Description: Returns true if the curve is defined.  This base
//               class function always returns true; derived classes
//               might override this to sometimes return false.
////////////////////////////////////////////////////////////////////
51
virtual bool ParametricCurve::is_valid(void) const;

298 9 get_max_t 4 572 26 ParametricCurve::get_max_t 0 1 2 522
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_max_t
//       Access: Published, Virtual
//  Description: Returns the upper bound of t for the entire curve.
//               The curve is defined in the range 0.0f <= t <=
//               get_max_t().  This base class function always returns
//               1.0f; derived classes might override this to return
//               something else.
////////////////////////////////////////////////////////////////////
53
virtual float ParametricCurve::get_max_t(void) const;

299 14 set_curve_type 4 572 31 ParametricCurve::set_curve_type 0 1 3 731
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_curve_type
//       Access: Published
//  Description: Sets the flag indicating the use to which the curve
//               is intended to be put.  This flag is optional and
//               only serves to provide a hint to the egg reader and
//               writer code; it has no effect on the curve's
//               behavior.
//
//               Setting the curve type also sets the num_dimensions
//               to 3 or 1 according to the type.
//
//               THis flag may have one of the values PCT_XYZ,
//               PCT_HPR, or PCT_T.
////////////////////////////////////////////////////////////////////
47
void ParametricCurve::set_curve_type(int type);

300 14 get_curve_type 4 572 31 ParametricCurve::get_curve_type 0 1 4 325
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_curve_type
//       Access: Published
//  Description: Returns the flag indicating the use to which the curve
//               is intended to be put.
////////////////////////////////////////////////////////////////////
48
int ParametricCurve::get_curve_type(void) const;

301 18 set_num_dimensions 4 572 35 ParametricCurve::set_num_dimensions 0 1 5 622
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_num_dimensions
//       Access: Published
//  Description: Specifies the number of significant dimensions in the
//               curve's vertices.  This should be one of 1, 2, or 3.
//               Normally, XYZ and HPR curves have three dimensions;
//               time curves should always have one dimension.  This
//               only serves as a hint to the mopath editor, and also
//               controls how the curve is written out.
////////////////////////////////////////////////////////////////////
50
void ParametricCurve::set_num_dimensions(int num);

302 18 get_num_dimensions 4 572 35 ParametricCurve::get_num_dimensions 0 1 6 550
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_num_dimensions
//       Access: Published
//  Description: Returns the number of significant dimensions in the
//               curve's vertices, as set by a previous call to
//               set_num_dimensions().  This is only a hint as to how
//               the curve is intended to be used; the actual number
//               of dimensions of any curve is always three.
////////////////////////////////////////////////////////////////////
52
int ParametricCurve::get_num_dimensions(void) const;

303 11 calc_length 4 572 28 ParametricCurve::calc_length 0 2 7 8 653
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the entire curve to within
//               a few decimal places.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the curve segment from
//               parametric time 'from' to time 'to'.
////////////////////////////////////////////////////////////////////
47
float ParametricCurve::calc_length(void) const;

304 11 find_length 4 572 28 ParametricCurve::find_length 0 1 9 717
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::find_length
//       Access: Published
//  Description: Returns the parametric value corresponding to the
//               indicated distance along the curve from the starting
//               parametric value.
//
//               This is the inverse of calc_length(): rather than
//               determining the length along the curve between two
//               parametric points, it determines the position in
//               parametric time of a point n units along the curve.
//
//               The search distance must not be negative.
////////////////////////////////////////////////////////////////////
77
float ParametricCurve::find_length(float start_t, float length_offset) const;

305 9 get_point 4 572 26 ParametricCurve::get_point 0 1 10 0
78
virtual bool ParametricCurve::get_point(float t, LVecBase3f &point) const = 0;

306 11 get_tangent 4 572 28 ParametricCurve::get_tangent 0 1 11 0
82
virtual bool ParametricCurve::get_tangent(float t, LVecBase3f &tangent) const = 0;

307 6 get_pt 4 572 23 ParametricCurve::get_pt 0 1 12 0
96
virtual bool ParametricCurve::get_pt(float t, LVecBase3f &point, LVecBase3f &tangent) const = 0;

308 14 get_2ndtangent 4 572 31 ParametricCurve::get_2ndtangent 0 1 13 0
86
virtual bool ParametricCurve::get_2ndtangent(float t, LVecBase3f &tangent2) const = 0;

309 12 adjust_point 4 572 29 ParametricCurve::adjust_point 0 1 14 402
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_point
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) at time t, but keeps the same
//               tangent value at that point.
////////////////////////////////////////////////////////////////////
82
virtual bool ParametricCurve::adjust_point(float t, float px, float py, float pz);

310 14 adjust_tangent 4 572 31 ParametricCurve::adjust_tangent 0 1 15 389
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_tangent
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it has the tangent
//               (tx, ty, tz) at time t, but keeps the same position
//               at the point.
////////////////////////////////////////////////////////////////////
84
virtual bool ParametricCurve::adjust_tangent(float t, float tx, float ty, float tz);

311 9 adjust_pt 4 572 26 ParametricCurve::adjust_pt 0 1 16 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_pt
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) with the tangent (tx, ty, tz).
////////////////////////////////////////////////////////////////////
109
virtual bool ParametricCurve::adjust_pt(float t, float px, float py, float pz, float tx, float ty, float tz);

312 9 recompute 4 572 26 ParametricCurve::recompute 0 1 17 370
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::recompute
//       Access: Published, Virtual
//  Description: Recalculates the curve, if necessary.  Returns
//               true if the resulting curve is valid, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool ParametricCurve::recompute(void);

313 6 stitch 4 572 23 ParametricCurve::stitch 0 1 18 537
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::stitch
//       Access: Published, Virtual
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.
//
//               Returns true if successful, false on failure or if
//               the curve type does not support stitching.
////////////////////////////////////////////////////////////////////
89
virtual bool ParametricCurve::stitch(ParametricCurve const *a, ParametricCurve const *b);

314 9 write_egg 4 572 26 ParametricCurve::write_egg 0 3 19 20 21 774
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output file.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output stream.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////
87
bool ParametricCurve::write_egg(Filename filename, CoordinateSystem cs = (CS_default));

315 14 get_class_type 4 572 31 ParametricCurve::get_class_type 0 1 22 0
56
static TypeHandle ParametricCurve::get_class_type(void);

316 14 get_class_type 4 574 29 CubicCurveseg::get_class_type 0 1 23 0
54
static TypeHandle CubicCurveseg::get_class_type(void);

317 25 ParametricCurveCollection 4 575 52 ParametricCurveCollection::ParametricCurveCollection 0 1 24 237
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
ParametricCurveCollection::ParametricCurveCollection(void);

318 26 ~ParametricCurveCollection 4 575 53 ParametricCurveCollection::~ParametricCurveCollection 0 0 925
// Filename: parametricCurveCollection.I
// Created by:  drose (04Mar01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline ParametricCurveCollection::~ParametricCurveCollection(void);

319 9 add_curve 4 575 36 ParametricCurveCollection::add_curve 0 2 25 26 604
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection at the
//               indicated index.
////////////////////////////////////////////////////////////////////
66
void ParametricCurveCollection::add_curve(ParametricCurve *curve);

320 10 add_curves 4 575 37 ParametricCurveCollection::add_curves 0 1 27 378
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curves
//       Access: Published
//  Description: Adds all the curves found in the scene graph rooted
//               at the given node.  Returns the number of curves
//               found.
////////////////////////////////////////////////////////////////////
59
int ParametricCurveCollection::add_curves(PandaNode *node);

321 12 remove_curve 4 575 39 ParametricCurveCollection::remove_curve 0 2 28 29 756
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection.  Returns true if the curve was removed,
//               false if it was not a member of the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection, by its index number.
////////////////////////////////////////////////////////////////////
69
bool ParametricCurveCollection::remove_curve(ParametricCurve *curve);

322 9 has_curve 4 575 36 ParametricCurveCollection::has_curve 0 1 30 343
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::has_curve
//       Access: Published
//  Description: Returns true if the indicated ParametricCurve appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool ParametricCurveCollection::has_curve(ParametricCurve *curve) const;

323 5 clear 4 575 32 ParametricCurveCollection::clear 0 1 31 281
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear
//       Access: Published
//  Description: Removes all ParametricCurves from the collection.
////////////////////////////////////////////////////////////////////
44
void ParametricCurveCollection::clear(void);

324 15 clear_timewarps 4 575 42 ParametricCurveCollection::clear_timewarps 0 1 32 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear_timewarps
//       Access: Published
//  Description: Removes all the timewarp curves from the collection.
////////////////////////////////////////////////////////////////////
54
void ParametricCurveCollection::clear_timewarps(void);

325 14 get_num_curves 4 575 41 ParametricCurveCollection::get_num_curves 0 1 33 298
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_curves
//       Access: Published
//  Description: Returns the number of ParametricCurves in the collection.
////////////////////////////////////////////////////////////////////
65
inline int ParametricCurveCollection::get_num_curves(void) const;

326 9 get_curve 4 575 36 ParametricCurveCollection::get_curve 0 1 34 286
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_curve
//       Access: Published
//  Description: Returns the nth ParametricCurve in the collection.
////////////////////////////////////////////////////////////////////
78
inline ParametricCurve *ParametricCurveCollection::get_curve(int index) const;

327 13 get_xyz_curve 4 575 40 ParametricCurveCollection::get_xyz_curve 0 1 35 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_xyz_curve
//       Access: Published
//  Description: Returns the first XYZ curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_xyz_curve(void) const;

328 13 get_hpr_curve 4 575 40 ParametricCurveCollection::get_hpr_curve 0 1 36 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_hpr_curve
//       Access: Published
//  Description: Returns the first HPR curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_hpr_curve(void) const;

329 17 get_default_curve 4 575 44 ParametricCurveCollection::get_default_curve 0 1 37 458
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_default_curve
//       Access: Published
//  Description: If there is an XYZ curve in the collection, returns
//               it; otherwise, returns the first curve whose type is
//               unspecified.  Returns NULL if no curve meets the
//               criteria.
////////////////////////////////////////////////////////////////////
74
ParametricCurve *ParametricCurveCollection::get_default_curve(void) const;

330 17 get_num_timewarps 4 575 44 ParametricCurveCollection::get_num_timewarps 0 1 38 317
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_timewarps
//       Access: Published
//  Description: Returns the number of timewarp curves in the
//               collection.
////////////////////////////////////////////////////////////////////
61
int ParametricCurveCollection::get_num_timewarps(void) const;

331 18 get_timewarp_curve 4 575 45 ParametricCurveCollection::get_timewarp_curve 0 1 39 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_timewarp_curve
//       Access: Published
//  Description: Returns the nth timewarp curve in the collection.
////////////////////////////////////////////////////////////////////
76
ParametricCurve *ParametricCurveCollection::get_timewarp_curve(int n) const;

332 9 get_max_t 4 575 36 ParametricCurveCollection::get_max_t 0 1 40 423
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_max_t
//       Access: Published
//  Description: Returns the maximum T value associated with the
//               *last* curve in the collection.  Normally, this will
//               be either the XYZ or HPR curve, or a timewarp curve.
////////////////////////////////////////////////////////////////////
62
inline float ParametricCurveCollection::get_max_t(void) const;

333 9 make_even 4 575 36 ParametricCurveCollection::make_even 0 1 41 913
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::make_even
//       Access: Published
//  Description: Discards all existing timewarp curves and recomputes
//               a new timewarp curve that maps distance along the
//               curve to parametric time, so that the distance
//               between any two points in parametric time is
//               proportional to the approximate distance of those
//               same two points along the XYZ curve.
//
//               segments_per_unit represents the number of segments to
//               take per each unit of parametric time of the original
//               XYZ curve.
//
//               The new timewarp curve (and thus, the apparent range
//               of the collection) will range from 0 to max_t.
////////////////////////////////////////////////////////////////////
80
void ParametricCurveCollection::make_even(float max_t, float segments_per_unit);

334 12 face_forward 4 575 39 ParametricCurveCollection::face_forward 0 1 42 452
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::face_forward
//       Access: Published
//  Description: Discards the existing HPR curve and generates a new
//               one that looks in the direction of travel along the
//               XYZ curve, based on the XYZ curve's tangent at each
//               point.
////////////////////////////////////////////////////////////////////
70
void ParametricCurveCollection::face_forward(float segments_per_unit);

335 11 reset_max_t 4 575 38 ParametricCurveCollection::reset_max_t 0 1 43 563
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::reset_max_t
//       Access: Published
//  Description: Adjusts the apparent length of the curve by applying
//               a new timewarp that maps the range [0..max_t] to the
//               range [0..get_max_t()].  After this call, the curve
//               collection will contain one more timewarp curve, and
//               get_max_t() will return the given max_t value.
////////////////////////////////////////////////////////////////////
57
void ParametricCurveCollection::reset_max_t(float max_t);

336 8 evaluate 4 575 35 ParametricCurveCollection::evaluate 0 3 44 45 46 1656
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the position and rotation represented by the
//               first XYZ and HPR curves in the collection at the
//               given point t, after t has been modified by all the
//               timewarp curves in the collection applied in
//               sequence, from back to front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the transform matrix representing
//               translation to the position indicated by the first
//               XYZ curve in the collection and the rotation
//               indicated by the first HPR curve in the collection,
//               after t has been modified by all the timewarp curves
//               in the collection applied in sequence, from back to
//               front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////
90
bool ParametricCurveCollection::evaluate(float t, LVecBase3f &xyz, LVecBase3f &hpr) const;

337 10 evaluate_t 4 575 37 ParametricCurveCollection::evaluate_t 0 1 47 490
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_t
//       Access: Published
//  Description: Determines the value of t that should be passed to
//               the XYZ and HPR curves, after applying the given
//               value of t to all the timewarps.  Return -1.0f if the
//               value of t exceeds one of the timewarps' ranges.
////////////////////////////////////////////////////////////////////
59
float ParametricCurveCollection::evaluate_t(float t) const;

338 12 evaluate_xyz 4 575 39 ParametricCurveCollection::evaluate_xyz 0 1 48 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_xyz
//       Access: Published
//  Description: Computes only the XYZ part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
84
inline bool ParametricCurveCollection::evaluate_xyz(float t, LVecBase3f &xyz) const;

339 12 evaluate_hpr 4 575 39 ParametricCurveCollection::evaluate_hpr 0 1 49 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_hpr
//       Access: Published
//  Description: Computes only the HPR part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
84
inline bool ParametricCurveCollection::evaluate_hpr(float t, LVecBase3f &hpr) const;

340 10 adjust_xyz 4 575 37 ParametricCurveCollection::adjust_xyz 0 2 50 51 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
86
inline bool ParametricCurveCollection::adjust_xyz(float t, float x, float y, float z);

341 10 adjust_hpr 4 575 37 ParametricCurveCollection::adjust_hpr 0 2 52 53 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
86
inline bool ParametricCurveCollection::adjust_hpr(float t, float h, float p, float r);

342 9 recompute 4 575 36 ParametricCurveCollection::recompute 0 1 54 409
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::recompute
//       Access: Published
//  Description: Ensures all the curves are freshly computed and
//               up-to-date.  Returns true if everything is valid,
//               false if at least one curve is incorrect.
////////////////////////////////////////////////////////////////////
48
bool ParametricCurveCollection::recompute(void);

343 6 stitch 4 575 33 ParametricCurveCollection::stitch 0 1 55 541
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::stitch
//       Access: Published
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.  This will
//               lose any timewarps on the input curves.
//
//               Returns true if successful, false on failure.
////////////////////////////////////////////////////////////////////
111
bool ParametricCurveCollection::stitch(ParametricCurveCollection const *a, ParametricCurveCollection const *b);

344 6 output 4 575 33 ParametricCurveCollection::output 0 1 56 350
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
59
void ParametricCurveCollection::output(ostream &out) const;

345 5 write 4 575 32 ParametricCurveCollection::write 0 2 57 58 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
82
void ParametricCurveCollection::write(ostream &out, int indent_level = (0)) const;

346 9 write_egg 4 575 36 ParametricCurveCollection::write_egg 0 3 59 60 61 840
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output file.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output stream.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////
97
bool ParametricCurveCollection::write_egg(Filename filename, CoordinateSystem cs = (CS_default));

347 11 CurveFitter 4 577 24 CurveFitter::CurveFitter 0 1 62 220
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
31
CurveFitter::CurveFitter(void);

348 12 ~CurveFitter 4 577 25 CurveFitter::~CurveFitter 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
CurveFitter::~CurveFitter(void);

349 5 reset 4 577 18 CurveFitter::reset 0 1 63 332
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::reset
//       Access: Public
//  Description: Removes all the data points previously added to the
//               CurveFitter, and initializes it for a new curve.
////////////////////////////////////////////////////////////////////
30
void CurveFitter::reset(void);

350 7 add_xyz 4 577 20 CurveFitter::add_xyz 0 1 64 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz
//       Access: Public
//  Description: Adds a single sample xyz.
////////////////////////////////////////////////////////////////////
58
void CurveFitter::add_xyz(float t, LVecBase3f const &xyz);

351 7 add_hpr 4 577 20 CurveFitter::add_hpr 0 1 65 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_hpr
//       Access: Public
//  Description: Adds a single sample hpr.
////////////////////////////////////////////////////////////////////
58
void CurveFitter::add_hpr(float t, LVecBase3f const &hpr);

352 11 add_xyz_hpr 4 577 24 CurveFitter::add_xyz_hpr 0 1 66 267
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz_hpr
//       Access: Public
//  Description: Adds a single sample xyz & hpr simultaneously.
////////////////////////////////////////////////////////////////////
85
void CurveFitter::add_xyz_hpr(float t, LVecBase3f const &xyz, LVecBase3f const &hpr);

353 15 get_num_samples 4 577 28 CurveFitter::get_num_samples 0 1 67 299
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_num_samples
//       Access: Public
//  Description: Returns the number of sample points that have been
//               added.
////////////////////////////////////////////////////////////////////
45
int CurveFitter::get_num_samples(void) const;

354 12 get_sample_t 4 577 25 CurveFitter::get_sample_t 0 1 68 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_t
//       Access: Public
//  Description: Returns the parametric value of the nth sample added.
////////////////////////////////////////////////////////////////////
45
float CurveFitter::get_sample_t(int n) const;

355 14 get_sample_xyz 4 577 27 CurveFitter::get_sample_xyz 0 1 69 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_xyz
//       Access: Public
//  Description: Returns the point in space of the nth sample added.
////////////////////////////////////////////////////////////////////
52
LVecBase3f CurveFitter::get_sample_xyz(int n) const;

356 14 get_sample_hpr 4 577 27 CurveFitter::get_sample_hpr 0 1 70 272
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_hpr
//       Access: Public
//  Description: Returns the orientation of the nth sample added.
////////////////////////////////////////////////////////////////////
52
LVecBase3f CurveFitter::get_sample_hpr(int n) const;

357 18 get_sample_tangent 4 577 31 CurveFitter::get_sample_tangent 0 1 71 391
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_tangent
//       Access: Public
//  Description: Returns the tangent associated with the nth sample
//               added.  This is only meaningful if compute_tangents()
//               has already been called.
////////////////////////////////////////////////////////////////////
56
LVecBase3f CurveFitter::get_sample_tangent(int n) const;

358 14 remove_samples 4 577 27 CurveFitter::remove_samples 0 1 72 335
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::remove_samples
//       Access: Public
//  Description: Eliminates all samples from index begin, up to but not
//               including index end, from the database.
////////////////////////////////////////////////////////////////////
53
void CurveFitter::remove_samples(int begin, int end);

359 6 sample 4 577 19 CurveFitter::sample 0 1 73 473
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sample
//       Access: Public
//  Description: Generates a series of data points by sampling the
//               given curve (or xyz/hpr curves) the indicated number
//               of times.  The sampling is made evenly in parametric
//               time, and then the timewarps, if any, are applied.
////////////////////////////////////////////////////////////////////
71
void CurveFitter::sample(ParametricCurveCollection *curves, int count);

360 8 wrap_hpr 4 577 21 CurveFitter::wrap_hpr 0 1 74 400
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::wrap_hpr
//       Access: Public
//  Description: Resets each HPR data point so that the maximum delta
//               between any two consecutive points is 180 degrees,
//               which should prevent incorrect HPR wrapping.
////////////////////////////////////////////////////////////////////
33
void CurveFitter::wrap_hpr(void);

361 11 sort_points 4 577 24 CurveFitter::sort_points 0 1 75 339
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sort_points
//       Access: Public
//  Description: Sorts all the data points in order by parametric
//               time, in case they were added in an incorrect order.
////////////////////////////////////////////////////////////////////
36
void CurveFitter::sort_points(void);

362 8 desample 4 577 21 CurveFitter::desample 0 1 76 428
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::desample
//       Access: Public
//  Description: Removes sample points in order to reduce the
//               complexity of a sampled curve.  Keeps one out of
//               every factor samples.  Also keeps the first and the
//               last samples.
////////////////////////////////////////////////////////////////////
41
void CurveFitter::desample(float factor);

363 16 compute_tangents 4 577 29 CurveFitter::compute_tangents 0 1 77 508
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::compute_tangents
//       Access: Public
//  Description: Once a set of points has been built, and prior to
//               calling MakeHermite() or MakeNurbs(),
//               ComputeTangents() must be called to set up the
//               tangents correctly (unless the tangents were defined
//               as the points were added).
////////////////////////////////////////////////////////////////////
48
void CurveFitter::compute_tangents(float scale);

364 12 make_hermite 4 577 25 CurveFitter::make_hermite 0 1 78 300
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_hermite
//       Access: Public
//  Description: Converts the current set of data points into a
//               Hermite curve.
////////////////////////////////////////////////////////////////////
77
PointerTo< ParametricCurveCollection > CurveFitter::make_hermite(void) const;

365 10 make_nurbs 4 577 23 CurveFitter::make_nurbs 0 1 79 374
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_nurbs
//       Access: Public
//  Description: Converts the current set of data points into a
//               NURBS curve.  This gives a smoother curve than
//               produced by MakeHermite().
////////////////////////////////////////////////////////////////////
75
PointerTo< ParametricCurveCollection > CurveFitter::make_nurbs(void) const;

366 6 output 4 577 19 CurveFitter::output 0 1 80 215
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
void CurveFitter::output(ostream &out) const;

367 5 write 4 577 18 CurveFitter::write 0 1 81 214
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void CurveFitter::write(ostream &out) const;

368 14 get_class_type 4 577 27 CurveFitter::get_class_type 0 1 82 0
52
static TypeHandle CurveFitter::get_class_type(void);

369 14 PiecewiseCurve 4 578 30 PiecewiseCurve::PiecewiseCurve 0 1 83 223
////////////////////////////////////////////////////////////////////
//     Function: PiecewiseCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
PiecewiseCurve::PiecewiseCurve(void);

370 14 get_class_type 4 578 30 PiecewiseCurve::get_class_type 0 1 84 0
55
static TypeHandle PiecewiseCurve::get_class_type(void);

371 12 HermiteCurve 4 579 26 HermiteCurve::HermiteCurve 0 2 85 86 542
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a Hermite from the indicated (possibly
//               non-hermite) curve.
////////////////////////////////////////////////////////////////////
33
HermiteCurve::HermiteCurve(void);

372 11 get_num_cvs 4 579 25 HermiteCurve::get_num_cvs 0 1 87 265
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_num_cvs
//       Access: Published
//  Description: Returns the number of CV's in the curve.
////////////////////////////////////////////////////////////////////
42
int HermiteCurve::get_num_cvs(void) const;

373 9 insert_cv 4 579 23 HermiteCurve::insert_cv 0 1 88 908
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::insert_cv
//       Access: Published
//  Description: Inserts a new CV at the given parametric point along
//               the curve.  If this parametric point is already on
//               the curve, the CV is assigned an index between its
//               two neighbors and the indices of all following CV's
//               are incremented by 1; its in and out tangents are
//               chosen to keep the curve consistent.  If the new
//               parametric point is beyond the end of the existing
//               curve, the curve is extended to meet it and the new
//               CV's position, in tangent, and out tangent are set to
//               zero.
//
//               The index number of the new CV is returned.
////////////////////////////////////////////////////////////////////
37
int HermiteCurve::insert_cv(float t);

374 9 append_cv 4 579 23 HermiteCurve::append_cv 0 2 89 90 392
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::append_cv
//       Access: Published
//  Description: Adds a new CV to the end of the curve.  The new CV is
//               given initial in/out tangents of 0.  The return value
//               is the index of the new CV.
////////////////////////////////////////////////////////////////////
65
int HermiteCurve::append_cv(int type, float x, float y, float z);

375 9 remove_cv 4 579 23 HermiteCurve::remove_cv 0 1 91 326
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_cv
//       Access: Published
//  Description: Removes the given CV from the curve.  Returns true if
//               the CV existed, false otherwise.
////////////////////////////////////////////////////////////////////
36
bool HermiteCurve::remove_cv(int n);

376 14 remove_all_cvs 4 579 28 HermiteCurve::remove_all_cvs 0 1 92 260
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_all_cvs
//       Access: Published
//  Description: Removes all CV's from the curve.
////////////////////////////////////////////////////////////////////
40
void HermiteCurve::remove_all_cvs(void);

377 11 set_cv_type 4 579 25 HermiteCurve::set_cv_type 0 1 93 907
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_type
//       Access: Published
//  Description: Changes the given CV's continuity type.  Legal values
//               are HC_CUT, HC_FREE, HC_G1, or HC_SMOOTH.
//
//               Other than HC_CUT, these have no effect on the actual
//               curve; it remains up to user software to impose the
//               constraints these imply.
//
//               HC_CUT implies a disconnection of the curve; HC_FREE
//               imposes no constraints on the tangents; HC_G1
//               forces the tangents to be collinear, and HC_SMOOTH
//               forces the tangents to be identical.  Setting type
//               type to HC_G1 or HC_SMOOTH may adjust the out
//               tangent to match the in tangent.
////////////////////////////////////////////////////////////////////
48
bool HermiteCurve::set_cv_type(int n, int type);

378 12 set_cv_point 4 579 26 HermiteCurve::set_cv_point 0 2 94 95 258
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_point
//       Access: Published
//  Description: Changes the given CV's position.
////////////////////////////////////////////////////////////////////
66
bool HermiteCurve::set_cv_point(int n, float x, float y, float z);

379 9 set_cv_in 4 579 23 HermiteCurve::set_cv_in 0 2 96 97 364
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_in
//       Access: Published
//  Description: Changes the given CV's in tangent.  Depending on the
//               continuity type, this may also adjust the out
//               tangent.
////////////////////////////////////////////////////////////////////
63
bool HermiteCurve::set_cv_in(int n, float x, float y, float z);

380 10 set_cv_out 4 579 24 HermiteCurve::set_cv_out 0 2 98 99 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_out
//       Access: Published
//  Description: Changes the given CV's out tangent.  Depending on the
//               continuity type, this may also adjust the in
//               tangent.
////////////////////////////////////////////////////////////////////
64
bool HermiteCurve::set_cv_out(int n, float x, float y, float z);

381 13 set_cv_tstart 4 579 27 HermiteCurve::set_cv_tstart 0 1 100 332
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_tstart
//       Access: Published
//  Description: Changes the given CV's parametric starting time.
//               This may affect the shape of the curve.
////////////////////////////////////////////////////////////////////
54
bool HermiteCurve::set_cv_tstart(int n, float tstart);

382 11 set_cv_name 4 579 25 HermiteCurve::set_cv_name 0 1 101 274
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_name
//       Access: Published
//  Description: Changes the name associated with a particular CV.
////////////////////////////////////////////////////////////////////
56
bool HermiteCurve::set_cv_name(int n, char const *name);

383 11 get_cv_type 4 579 25 HermiteCurve::get_cv_type 0 1 102 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_type
//       Access: Published
//  Description: Returns the given CV's continuity type, HC_CUT,
//               HC_FREE, HC_G1, or HC_SMOOTH, or 0 if there is
//               no such CV.
////////////////////////////////////////////////////////////////////
43
int HermiteCurve::get_cv_type(int n) const;

384 12 get_cv_point 4 579 26 HermiteCurve::get_cv_point 0 2 103 104 263
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_point
//       Access: Published
//  Description: Returns the position of the given CV.
////////////////////////////////////////////////////////////////////
58
LVecBase3f const &HermiteCurve::get_cv_point(int n) const;

385 9 get_cv_in 4 579 23 HermiteCurve::get_cv_in 0 2 105 106 262
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_in
//       Access: Published
//  Description: Returns the in tangent of the given CV.
////////////////////////////////////////////////////////////////////
55
LVecBase3f const &HermiteCurve::get_cv_in(int n) const;

386 10 get_cv_out 4 579 24 HermiteCurve::get_cv_out 0 2 107 108 264
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_out
//       Access: Published
//  Description: Returns the out tangent of the given CV.
////////////////////////////////////////////////////////////////////
56
LVecBase3f const &HermiteCurve::get_cv_out(int n) const;

387 13 get_cv_tstart 4 579 27 HermiteCurve::get_cv_tstart 0 1 109 307
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_tstart
//       Access: Published
//  Description: Returns the starting point in parametric space of the
//               given CV.
////////////////////////////////////////////////////////////////////
47
float HermiteCurve::get_cv_tstart(int n) const;

388 11 get_cv_name 4 579 25 HermiteCurve::get_cv_name 0 1 110 267
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_name
//       Access: Published
//  Description: Returns the name of the given CV, or NULL.
////////////////////////////////////////////////////////////////////
60
basic_string< char > HermiteCurve::get_cv_name(int n) const;

389 8 write_cv 4 579 22 HermiteCurve::write_cv 0 1 111 221
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
void HermiteCurve::write_cv(ostream &out, int n) const;

390 14 get_class_type 4 579 28 HermiteCurve::get_class_type 0 1 112 0
53
static TypeHandle HermiteCurve::get_class_type(void);

391 20 ~NurbsCurveInterface 4 580 41 NurbsCurveInterface::~NurbsCurveInterface 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual NurbsCurveInterface::~NurbsCurveInterface(void);

392 9 set_order 4 580 30 NurbsCurveInterface::set_order 0 1 113 0
59
virtual void NurbsCurveInterface::set_order(int order) = 0;

393 9 get_order 4 580 30 NurbsCurveInterface::get_order 0 1 114 0
59
virtual int NurbsCurveInterface::get_order(void) const = 0;

394 11 get_num_cvs 4 580 32 NurbsCurveInterface::get_num_cvs 0 1 115 0
61
virtual int NurbsCurveInterface::get_num_cvs(void) const = 0;

395 13 get_num_knots 4 580 34 NurbsCurveInterface::get_num_knots 0 1 116 0
63
virtual int NurbsCurveInterface::get_num_knots(void) const = 0;

396 9 insert_cv 4 580 30 NurbsCurveInterface::insert_cv 0 1 117 0
57
virtual bool NurbsCurveInterface::insert_cv(float t) = 0;

397 9 append_cv 4 580 30 NurbsCurveInterface::append_cv 0 3 118 119 120 1374
// Filename: nurbsCurveInterface.I
// Created by:  drose (02Mar01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline int NurbsCurveInterface::append_cv(float x, float y, float z);

398 9 remove_cv 4 580 30 NurbsCurveInterface::remove_cv 0 1 121 0
55
virtual bool NurbsCurveInterface::remove_cv(int n) = 0;

399 14 remove_all_cvs 4 580 35 NurbsCurveInterface::remove_all_cvs 0 1 122 0
59
virtual void NurbsCurveInterface::remove_all_cvs(void) = 0;

400 12 set_cv_point 4 580 33 NurbsCurveInterface::set_cv_point 0 2 123 124 662
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
80
inline bool NurbsCurveInterface::set_cv_point(int n, float x, float y, float z);

401 12 get_cv_point 4 580 33 NurbsCurveInterface::get_cv_point 0 1 125 279
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_point
//       Access: Public, Scheme
//  Description: Returns the position of the indicated CV.
////////////////////////////////////////////////////////////////////
65
inline LVecBase3f NurbsCurveInterface::get_cv_point(int n) const;

402 13 set_cv_weight 4 580 34 NurbsCurveInterface::set_cv_weight 0 1 126 331
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_weight
//       Access: Published
//  Description: Sets the weight of the indicated CV without affecting
//               its position in 3-d space.
////////////////////////////////////////////////////////////////////
56
bool NurbsCurveInterface::set_cv_weight(int n, float w);

403 13 get_cv_weight 4 580 34 NurbsCurveInterface::get_cv_weight 0 1 127 273
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_weight
//       Access: Published
//  Description: Returns the weight of the indicated CV.
////////////////////////////////////////////////////////////////////
61
inline float NurbsCurveInterface::get_cv_weight(int n) const;

404 6 set_cv 4 580 27 NurbsCurveInterface::set_cv 0 1 128 0
73
virtual bool NurbsCurveInterface::set_cv(int n, LVecBase4f const &v) = 0;

405 6 get_cv 4 580 27 NurbsCurveInterface::get_cv 0 1 129 0
64
virtual LVecBase4f NurbsCurveInterface::get_cv(int n) const = 0;

406 8 set_knot 4 580 29 NurbsCurveInterface::set_knot 0 1 130 0
63
virtual bool NurbsCurveInterface::set_knot(int n, float t) = 0;

407 8 get_knot 4 580 29 NurbsCurveInterface::get_knot 0 1 131 0
61
virtual float NurbsCurveInterface::get_knot(int n) const = 0;

408 8 write_cv 4 580 29 NurbsCurveInterface::write_cv 0 1 132 228
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
void NurbsCurveInterface::write_cv(ostream &out, int n) const;

409 14 get_class_type 4 580 35 NurbsCurveInterface::get_class_type 0 1 133 0
60
static TypeHandle NurbsCurveInterface::get_class_type(void);

410 24 upcast_to_PiecewiseCurve 12 581 36 NurbsCurve::upcast_to_PiecewiseCurve 0 1 137 40
upcast from NurbsCurve to PiecewiseCurve
59
PiecewiseCurve *NurbsCurve::upcast_to_PiecewiseCurve(void);

411 22 downcast_to_NurbsCurve 12 578 38 PiecewiseCurve::downcast_to_NurbsCurve 0 1 138 42
downcast from PiecewiseCurve to NurbsCurve
57
NurbsCurve *PiecewiseCurve::downcast_to_NurbsCurve(void);

412 29 upcast_to_NurbsCurveInterface 12 581 41 NurbsCurve::upcast_to_NurbsCurveInterface 0 1 139 45
upcast from NurbsCurve to NurbsCurveInterface
69
NurbsCurveInterface *NurbsCurve::upcast_to_NurbsCurveInterface(void);

413 22 downcast_to_NurbsCurve 12 580 43 NurbsCurveInterface::downcast_to_NurbsCurve 0 1 140 47
downcast from NurbsCurveInterface to NurbsCurve
62
NurbsCurve *NurbsCurveInterface::downcast_to_NurbsCurve(void);

414 10 NurbsCurve 4 581 22 NurbsCurve::NurbsCurve 0 2 134 135 860
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a NURBS curve equivalent to the indicated
//               (possibly non-NURBS) curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description: Constructs a NURBS curve according to the indicated
//               NURBS parameters.
////////////////////////////////////////////////////////////////////
29
NurbsCurve::NurbsCurve(void);

415 11 ~NurbsCurve 4 581 23 NurbsCurve::~NurbsCurve 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual NurbsCurve::~NurbsCurve(void);

416 14 get_class_type 4 581 26 NurbsCurve::get_class_type 0 1 136 0
51
static TypeHandle NurbsCurve::get_class_type(void);

417 21 ParametricCurveDrawer 4 582 44 ParametricCurveDrawer::ParametricCurveDrawer 0 1 141 233
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
ParametricCurveDrawer::ParametricCurveDrawer(void);

418 9 set_curve 4 582 32 ParametricCurveDrawer::set_curve 0 1 142 278
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_curve
//       Access: Published
//  Description: Sets the drawer up to draw just the one curve.
////////////////////////////////////////////////////////////////////
62
void ParametricCurveDrawer::set_curve(ParametricCurve *curve);

419 10 set_curves 4 582 33 ParametricCurveDrawer::set_curves 0 1 143 530
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_curves
//       Access: Published
//  Description: Sets the drawer up to draw the curves in the
//               indicated collection.  The drawer will actually draw
//               just the first XYZ curve in the collection, but if
//               one or more timewarps are present, this will affect
//               the placement of tick marks.
////////////////////////////////////////////////////////////////////
74
void ParametricCurveDrawer::set_curves(ParametricCurveCollection *curves);

420 12 clear_curves 4 582 35 ParametricCurveDrawer::clear_curves 0 1 144 324
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::clear_curves
//       Access: Published
//  Description: Empties the list of curves the drawer will update.
//               It will draw nothing.
////////////////////////////////////////////////////////////////////
47
void ParametricCurveDrawer::clear_curves(void);

421 10 get_curves 4 582 33 ParametricCurveDrawer::get_curves 0 1 145 232
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_curves
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
ParametricCurveCollection *ParametricCurveDrawer::get_curves(void);

422 13 get_geom_node 4 582 36 ParametricCurveDrawer::get_geom_node 0 1 146 760
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_geom_node
//       Access: Published
//  Description: Returns a pointer to the drawer's GeomNode.  This is
//               where the drawer will build the visible
//               representation of the curve.  This GeomNode must be
//               inserted into the scene graph to make the curve
//               visible.  The GeomNode remains connected to the drawer,
//               so that future updates to the drawer will reflect in
//               the GeomNode, and the GeomNode will be emptied when the
//               drawer destructs.  Also see detach_geom_node().
////////////////////////////////////////////////////////////////////
53
GeomNode *ParametricCurveDrawer::get_geom_node(void);

423 16 detach_geom_node 4 582 39 ParametricCurveDrawer::detach_geom_node 0 1 147 619
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::detach_geom_node
//       Access: Published
//  Description: Detaches the GeomNode from the drawer so that the
//               drawing will remain after the death of the drawer.
//               Returns the now-static GeomNode.  A new, dynamic GeomNode
//               is created for the drawer's future use; get_geom_node()
//               will return this new GeomNode which will be empty until
//               the next call to draw().
////////////////////////////////////////////////////////////////////
68
PointerTo< GeomNode > ParametricCurveDrawer::detach_geom_node(void);

424 12 set_num_segs 4 582 35 ParametricCurveDrawer::set_num_segs 0 1 148 554
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_num_segs
//       Access: Published
//  Description: Specifies the number of line segments used to
//               approximate the curve for each parametric unit.  This
//               just affects the visual appearance of the curve as it
//               is drawn.  The total number of segments drawn for the
//               curve will be get_max_t() * get_num_segs().
////////////////////////////////////////////////////////////////////
57
void ParametricCurveDrawer::set_num_segs(float num_segs);

425 12 get_num_segs 4 582 35 ParametricCurveDrawer::get_num_segs 0 1 149 552
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_num_segs
//       Access: Published
//  Description: Returns the number of line segments used to
//               approximate the curve for each parametric unit.  This
//               just affects the visual appearance of the curve as it
//               is drawn.  The total number of segments drawn for the
//               curve will be get_max_t() * get_num_segs().
////////////////////////////////////////////////////////////////////
54
float ParametricCurveDrawer::get_num_segs(void) const;

426 13 set_num_ticks 4 582 36 ParametricCurveDrawer::set_num_ticks 0 1 150 514
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_num_ticks
//       Access: Published
//  Description: Specifies the number of time tick marks drawn
//               for each unit of time.  These tick marks are drawn at
//               equal increments in time to give a visual
//               approximation of speed.  Specify 0 to disable drawing
//               of tick marks.
////////////////////////////////////////////////////////////////////
59
void ParametricCurveDrawer::set_num_ticks(float num_ticks);

427 13 get_num_ticks 4 582 36 ParametricCurveDrawer::get_num_ticks 0 1 151 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_num_ticks
//       Access: Published
//  Description: Returns the number of time tick marks per unit of
//               time drawn.
////////////////////////////////////////////////////////////////////
55
float ParametricCurveDrawer::get_num_ticks(void) const;

428 9 set_color 4 582 32 ParametricCurveDrawer::set_color 0 1 152 321
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_color
//       Access: Published
//  Description: Specifies the color of the curve when it is drawn.
//               The default is white.
////////////////////////////////////////////////////////////////////
65
void ParametricCurveDrawer::set_color(float r, float g, float b);

429 14 set_tick_color 4 582 37 ParametricCurveDrawer::set_tick_color 0 1 153 332
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_color
//       Access: Published
//  Description: Specifies the color of the time tick marks drawn on
//               the curve.  The default is red.
////////////////////////////////////////////////////////////////////
70
void ParametricCurveDrawer::set_tick_color(float r, float g, float b);

430 13 set_thickness 4 582 36 ParametricCurveDrawer::set_thickness 0 1 154 416
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_thickness
//       Access: Public
//  Description: Specifies the thickness of the line in pixels drawn
//               to represent the curve.  Note that pixel thickness of
//               a line segment is not supported by DirectX.
////////////////////////////////////////////////////////////////////
55
void ParametricCurveDrawer::set_thickness(float thick);

431 18 set_frame_accurate 4 582 41 ParametricCurveDrawer::set_frame_accurate 0 1 155 593
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_frame_accurate
//       Access: Published
//  Description: Specifies whether the curve drawn is to be
//               frame-accurate.  If true, then changes made to the
//               curve dynamically after it has been drawn will be
//               reflected correctly in the render window.  If false,
//               dynamic updates may be drawn before the rest of the
//               scene has updated.
////////////////////////////////////////////////////////////////////
68
void ParametricCurveDrawer::set_frame_accurate(bool frame_accurate);

432 18 get_frame_accurate 4 582 41 ParametricCurveDrawer::get_frame_accurate 0 1 156 316
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_frame_accurate
//       Access: Published
//  Description: Returns whether the curve is drawn in frame-accurate
//               mode.
////////////////////////////////////////////////////////////////////
59
bool ParametricCurveDrawer::get_frame_accurate(void) const;

433 4 draw 4 582 27 ParametricCurveDrawer::draw 0 1 157 462
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::draw
//       Access: Published, Virtual
//  Description: Creates a series of line segments that approximates
//               the curve.  These line segments may be made visible
//               by parenting the node returned by get_geom_node()
//               into the scene graph.
////////////////////////////////////////////////////////////////////
47
virtual bool ParametricCurveDrawer::draw(void);

434 4 hide 4 582 27 ParametricCurveDrawer::hide 0 1 158 309
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::hide
//       Access: Published
//  Description: Removes the lines that were created by a previous
//               call to draw().
////////////////////////////////////////////////////////////////////
39
void ParametricCurveDrawer::hide(void);

435 14 set_tick_scale 4 582 37 ParametricCurveDrawer::set_tick_scale 0 1 159 311
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::set_tick_scale
//       Access: Published
//  Description: Sets the visible size of the time tick marks or
//               geometry.
////////////////////////////////////////////////////////////////////
56
void ParametricCurveDrawer::set_tick_scale(float scale);

436 14 get_tick_scale 4 582 37 ParametricCurveDrawer::get_tick_scale 0 1 160 289
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveDrawer::get_tick_scale
//       Access: Published
//  Description: Returns the size of the time tick marks or geometry.
////////////////////////////////////////////////////////////////////
56
float ParametricCurveDrawer::get_tick_scale(void) const;

437 14 get_class_type 4 582 37 ParametricCurveDrawer::get_class_type 0 1 161 0
62
static TypeHandle ParametricCurveDrawer::get_class_type(void);

438 16 NurbsCurveDrawer 4 584 34 NurbsCurveDrawer::NurbsCurveDrawer 0 1 162 228
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
NurbsCurveDrawer::NurbsCurveDrawer(void);

439 12 set_cv_color 4 584 30 NurbsCurveDrawer::set_cv_color 0 1 163 262
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_cv_color
//       Access: Published
//  Description: Specifies the color of the CV's.
////////////////////////////////////////////////////////////////////
63
void NurbsCurveDrawer::set_cv_color(float r, float g, float b);

440 14 set_hull_color 4 584 32 NurbsCurveDrawer::set_hull_color 0 1 164 271
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_hull_color
//       Access: Published
//  Description: Specifies the color of the convex hull.
////////////////////////////////////////////////////////////////////
65
void NurbsCurveDrawer::set_hull_color(float r, float g, float b);

441 14 set_knot_color 4 584 32 NurbsCurveDrawer::set_knot_color 0 1 165 265
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_knot_color
//       Access: Published
//  Description: Specifies the color of the knots.
////////////////////////////////////////////////////////////////////
65
void NurbsCurveDrawer::set_knot_color(float r, float g, float b);

442 9 recompute 4 584 27 NurbsCurveDrawer::recompute 0 2 166 167 235
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::recompute
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
101
virtual bool NurbsCurveDrawer::recompute(float t1, float t2, ParametricCurve *curve = ((void *)(0)));

443 12 set_show_cvs 4 584 30 NurbsCurveDrawer::set_show_cvs 0 1 168 273
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_show_cvs
//       Access: Published
//  Description: Sets the flag that hides or shows the CV's.
////////////////////////////////////////////////////////////////////
47
void NurbsCurveDrawer::set_show_cvs(bool flag);

444 12 get_show_cvs 4 584 30 NurbsCurveDrawer::get_show_cvs 0 1 169 278
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::get_show_cvs
//       Access: Published
//  Description: Returns the current state of the show-CV's flag.
////////////////////////////////////////////////////////////////////
48
bool NurbsCurveDrawer::get_show_cvs(void) const;

445 13 set_show_hull 4 584 31 NurbsCurveDrawer::set_show_hull 0 1 170 281
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_show_hull
//       Access: Published
//  Description: Sets the flag that hides or shows the convex hull.
////////////////////////////////////////////////////////////////////
48
void NurbsCurveDrawer::set_show_hull(bool flag);

446 13 get_show_hull 4 584 31 NurbsCurveDrawer::get_show_hull 0 1 171 279
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::get_show_hull
//       Access: Published
//  Description: Returns the current state of the show-hull flag.
////////////////////////////////////////////////////////////////////
49
bool NurbsCurveDrawer::get_show_hull(void) const;

447 14 set_show_knots 4 584 32 NurbsCurveDrawer::set_show_knots 0 1 172 276
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::set_show_knots
//       Access: Published
//  Description: Sets the flag that hides or shows the knots.
////////////////////////////////////////////////////////////////////
49
void NurbsCurveDrawer::set_show_knots(bool flag);

448 14 get_show_knots 4 584 32 NurbsCurveDrawer::get_show_knots 0 1 173 281
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::get_show_knots
//       Access: Published
//  Description: Returns the current state of the show-knots flag.
////////////////////////////////////////////////////////////////////
50
bool NurbsCurveDrawer::get_show_knots(void) const;

449 7 hilight 4 584 25 NurbsCurveDrawer::hilight 0 2 174 175 1482
// Filename: nurbsCurveDrawer.I
// Created by:  drose (05Mar01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::hilight
//       Access: Published
//  Description: Hilights a particular CV by showing it and its knot
//               in a different color.  Returns true if the CV exists
//               and has been drawn, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::hilight
//       Access: Published
//  Description: Hilights a particular CV by showing it and its knot
//               in a different color.  Returns true if the CV exists
//               and has been drawn, false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool NurbsCurveDrawer::hilight(int n);

450 9 unhilight 4 584 27 NurbsCurveDrawer::unhilight 0 1 176 270
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveDrawer::unhilight
//       Access: Published
//  Description: Removes the hilight previously set on a CV.
////////////////////////////////////////////////////////////////////
40
bool NurbsCurveDrawer::unhilight(int n);

451 14 get_class_type 4 584 32 NurbsCurveDrawer::get_class_type 0 1 177 0
57
static TypeHandle NurbsCurveDrawer::get_class_type(void);

452 17 ~NurbsCurveResult 4 585 35 NurbsCurveResult::~NurbsCurveResult 0 0 907
// Filename: nurbsCurveResult.I
// Created by:  drose (04Dec02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline NurbsCurveResult::~NurbsCurveResult(void);

453 11 get_start_t 4 585 29 NurbsCurveResult::get_start_t 0 1 178 312
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_start_t
//       Access: Public
//  Description: Returns the first legal value of t on the curve.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
55
inline float NurbsCurveResult::get_start_t(void) const;

454 9 get_end_t 4 585 27 NurbsCurveResult::get_end_t 0 1 179 271
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_end_t
//       Access: Public
//  Description: Returns the last legal value of t on the curve.
////////////////////////////////////////////////////////////////////
53
inline float NurbsCurveResult::get_end_t(void) const;

455 10 eval_point 4 585 28 NurbsCurveResult::eval_point 0 1 180 406
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_point
//       Access: Published
//  Description: Computes the point on the curve corresponding to the
//               indicated value in parametric time.  Returns true if
//               the t value is valid, false otherwise.
////////////////////////////////////////////////////////////////////
69
inline bool NurbsCurveResult::eval_point(float t, LVecBase3f &point);

456 12 eval_tangent 4 585 30 NurbsCurveResult::eval_tangent 0 1 181 456
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_tangent
//       Access: Published
//  Description: Computes the tangent to the curve at the indicated
//               point in parametric time.  This tangent vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
73
inline bool NurbsCurveResult::eval_tangent(float t, LVecBase3f &tangent);

457 19 eval_extended_point 4 585 37 NurbsCurveResult::eval_extended_point 0 1 182 402
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
67
inline float NurbsCurveResult::eval_extended_point(float t, int d);

458 20 eval_extended_points 4 585 38 NurbsCurveResult::eval_extended_points 0 0 534
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
118
inline bool NurbsCurveResult::eval_extended_points(float t, int d, void *result[](unsigned int size), int num_values);

459 16 get_num_segments 4 585 34 NurbsCurveResult::get_num_segments 0 1 183 435
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the curve.  This number is usually not
//               important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveResult::get_num_segments(void) const;

460 18 eval_segment_point 4 585 36 NurbsCurveResult::eval_segment_point 0 1 184 1042
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the curve corresponding to the
//               indicated value in parametric time within the
//               indicated curve segment.  t should be in the range
//               [0, 1].
//
//               The curve is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular curve depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous curve, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
89
void NurbsCurveResult::eval_segment_point(int segment, float t, LVecBase3f &point) const;

461 20 eval_segment_tangent 4 585 38 NurbsCurveResult::eval_segment_tangent 0 1 185 479
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_tangent
//       Access: Published
//  Description: As eval_segment_point, but computes the tangent to
//               the curve at the indicated point.  The tangent vector
//               will not necessarily be normalized, and could be
//               zero, particularly at the endpoints.
////////////////////////////////////////////////////////////////////
93
void NurbsCurveResult::eval_segment_tangent(int segment, float t, LVecBase3f &tangent) const;

462 27 eval_segment_extended_point 4 585 45 NurbsCurveResult::eval_segment_extended_point 0 1 186 410
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
87
float NurbsCurveResult::eval_segment_extended_point(int segment, float t, int d) const;

463 28 eval_segment_extended_points 4 585 46 NurbsCurveResult::eval_segment_extended_points 0 0 542
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
138
void NurbsCurveResult::eval_segment_extended_points(int segment, float t, int d, void *result[](unsigned int size), int num_values) const;

464 13 get_segment_t 4 585 31 NurbsCurveResult::get_segment_t 0 1 187 479
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_segment_t
//       Access: Public
//  Description: Accepts a t value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               t value in the entire curve (as in eval_point()).
////////////////////////////////////////////////////////////////////
73
inline float NurbsCurveResult::get_segment_t(int segment, float t) const;

465 19 NurbsCurveEvaluator 4 586 40 NurbsCurveEvaluator::NurbsCurveEvaluator 0 1 188 231
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
NurbsCurveEvaluator::NurbsCurveEvaluator(void);

466 20 ~NurbsCurveEvaluator 4 586 41 NurbsCurveEvaluator::~NurbsCurveEvaluator 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
NurbsCurveEvaluator::~NurbsCurveEvaluator(void);

467 9 set_order 4 586 30 NurbsCurveEvaluator::set_order 0 1 189 1185
// Filename: nurbsCurveEvaluator.I
// Created by:  drose (05Dec02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_order
//       Access: Published
//  Description: Sets the order of the curve.  This resets the knot
//               vector to the default knot vector for the number of
//               vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the curve.
////////////////////////////////////////////////////////////////////
54
inline void NurbsCurveEvaluator::set_order(int order);

468 9 get_order 4 586 30 NurbsCurveEvaluator::get_order 0 1 190 319
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_order
//       Access: Published
//  Description: Returns the order of the curve as set by a previous
//               call to set_order().
////////////////////////////////////////////////////////////////////
54
inline int NurbsCurveEvaluator::get_order(void) const;

469 5 reset 4 586 26 NurbsCurveEvaluator::reset 0 1 191 508
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the curve up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
50
void NurbsCurveEvaluator::reset(int num_vertices);

470 16 get_num_vertices 4 586 37 NurbsCurveEvaluator::get_num_vertices 0 1 192 378
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the curve.
//               This is the number passed to the last call to
//               reset().
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_vertices(void) const;

471 10 set_vertex 4 586 31 NurbsCurveEvaluator::set_vertex 0 3 193 194 195 985
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
77
inline void NurbsCurveEvaluator::set_vertex(int i, LVecBase4f const &vertex);

472 10 get_vertex 4 586 31 NurbsCurveEvaluator::get_vertex 0 2 196 197 670
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
70
inline LVecBase4f const &NurbsCurveEvaluator::get_vertex(int i) const;

473 16 set_vertex_space 4 586 37 NurbsCurveEvaluator::set_vertex_space 0 2 198 199 1436
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the curve is evaluated.
////////////////////////////////////////////////////////////////////
80
inline void NurbsCurveEvaluator::set_vertex_space(int i, NodePath const &space);

474 16 get_vertex_space 4 586 37 NurbsCurveEvaluator::get_vertex_space 0 1 200 347
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the curve, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
84
NodePath NurbsCurveEvaluator::get_vertex_space(int i, NodePath const &rel_to) const;

475 19 set_extended_vertex 4 586 40 NurbsCurveEvaluator::set_extended_vertex 0 1 201 1219
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or curve in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
80
inline void NurbsCurveEvaluator::set_extended_vertex(int i, int d, float value);

476 19 get_extended_vertex 4 586 40 NurbsCurveEvaluator::get_extended_vertex 0 1 202 445
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::float_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
74
inline float NurbsCurveEvaluator::get_extended_vertex(int i, int d) const;

477 21 set_extended_vertices 4 586 42 NurbsCurveEvaluator::set_extended_vertices 0 0 546
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
113
void NurbsCurveEvaluator::set_extended_vertices(int i, int d, void *values[](unsigned int size), int num_values);

478 13 get_num_knots 4 586 34 NurbsCurveEvaluator::get_num_knots 0 1 203 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_knots
//       Access: Published
//  Description: Returns the number of knot values in the curve.  This
//               is based on the number of vertices and the order.
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveEvaluator::get_num_knots(void) const;

479 8 set_knot 4 586 29 NurbsCurveEvaluator::set_knot 0 1 204 447
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
54
void NurbsCurveEvaluator::set_knot(int i, float knot);

480 8 get_knot 4 586 29 NurbsCurveEvaluator::get_knot 0 1 205 263
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
49
float NurbsCurveEvaluator::get_knot(int i) const;

481 15 normalize_knots 4 586 36 NurbsCurveEvaluator::normalize_knots 0 1 206 334
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::normalize_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the curve is 0 .. 1.
////////////////////////////////////////////////////////////////////
48
void NurbsCurveEvaluator::normalize_knots(void);

482 16 get_num_segments 4 586 37 NurbsCurveEvaluator::get_num_segments 0 1 207 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the curve.  This is based on the knot vector.
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_segments(void) const;

483 8 evaluate 4 586 29 NurbsCurveEvaluator::evaluate 0 3 208 209 210 987
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space, and then further
//               transformed by the indicated matrix.
////////////////////////////////////////////////////////////////////
99
PointerTo< NurbsCurveResult > NurbsCurveEvaluator::evaluate(NodePath const &rel_to = ((()))) const;

484 6 output 4 586 27 NurbsCurveEvaluator::output 0 1 211 227
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void NurbsCurveEvaluator::output(ostream &out) const;

485 19 ~NurbsSurfaceResult 4 587 39 NurbsSurfaceResult::~NurbsSurfaceResult 0 0 911
// Filename: nurbsSurfaceResult.I
// Created by:  drose (10Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline NurbsSurfaceResult::~NurbsSurfaceResult(void);

486 11 get_start_u 4 587 31 NurbsSurfaceResult::get_start_u 0 1 212 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_u
//       Access: Public
//  Description: Returns the first legal value of u on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
57
inline float NurbsSurfaceResult::get_start_u(void) const;

487 9 get_end_u 4 587 29 NurbsSurfaceResult::get_end_u 0 1 213 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_u
//       Access: Public
//  Description: Returns the last legal value of u on the surface.
////////////////////////////////////////////////////////////////////
55
inline float NurbsSurfaceResult::get_end_u(void) const;

488 11 get_start_v 4 587 31 NurbsSurfaceResult::get_start_v 0 1 214 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_v
//       Access: Public
//  Description: Returns the first legal value of v on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
57
inline float NurbsSurfaceResult::get_start_v(void) const;

489 9 get_end_v 4 587 29 NurbsSurfaceResult::get_end_v 0 1 215 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_v
//       Access: Public
//  Description: Returns the last legal value of v on the surface.
////////////////////////////////////////////////////////////////////
55
inline float NurbsSurfaceResult::get_end_v(void) const;

490 10 eval_point 4 587 30 NurbsSurfaceResult::eval_point 0 1 216 415
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_point
//       Access: Published
//  Description: Computes the point on the surface corresponding to the
//               indicated value in parametric time.  Returns true if
//               the u, v values are valid, false otherwise.
////////////////////////////////////////////////////////////////////
80
inline bool NurbsSurfaceResult::eval_point(float u, float v, LVecBase3f &point);

491 11 eval_normal 4 587 31 NurbsSurfaceResult::eval_normal 0 1 217 457
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_normal
//       Access: Published
//  Description: Computes the normal to the surface at the indicated
//               point in parametric time.  This normal vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
82
inline bool NurbsSurfaceResult::eval_normal(float u, float v, LVecBase3f &normal);

492 19 eval_extended_point 4 587 39 NurbsSurfaceResult::eval_extended_point 0 1 218 408
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
78
inline float NurbsSurfaceResult::eval_extended_point(float u, float v, int d);

493 20 eval_extended_points 4 587 40 NurbsSurfaceResult::eval_extended_points 0 0 536
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
129
inline bool NurbsSurfaceResult::eval_extended_points(float u, float v, int d, void *result[](unsigned int size), int num_values);

494 18 get_num_u_segments 4 587 38 NurbsSurfaceResult::get_num_u_segments 0 1 219 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_u_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the U direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_u_segments(void) const;

495 18 get_num_v_segments 4 587 38 NurbsSurfaceResult::get_num_v_segments 0 1 220 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_v_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the V direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_v_segments(void) const;

496 18 eval_segment_point 4 587 38 NurbsSurfaceResult::eval_segment_point 0 1 221 1060
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the surface corresponding to the
//               indicated value in parametric time within the
//               indicated surface segment.  u and v should be in the
//               range [0, 1].
//
//               The surface is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular surface depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous surface, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
103
void NurbsSurfaceResult::eval_segment_point(int ui, int vi, float u, float v, LVecBase3f &point) const;

497 19 eval_segment_normal 4 587 39 NurbsSurfaceResult::eval_segment_normal 0 1 222 449
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_normal
//       Access: Published
//  Description: As eval_segment_point, but computes the normal to
//               the surface at the indicated point.  The normal vector
//               will not necessarily be normalized, and could be
//               zero.
////////////////////////////////////////////////////////////////////
105
void NurbsSurfaceResult::eval_segment_normal(int ui, int vi, float u, float v, LVecBase3f &normal) const;

498 27 eval_segment_extended_point 4 587 47 NurbsSurfaceResult::eval_segment_extended_point 0 1 223 416
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
101
float NurbsSurfaceResult::eval_segment_extended_point(int ui, int vi, float u, float v, int d) const;

499 28 eval_segment_extended_points 4 587 48 NurbsSurfaceResult::eval_segment_extended_points 0 0 544
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
152
void NurbsSurfaceResult::eval_segment_extended_points(int ui, int vi, float u, float v, int d, void *result[](unsigned int size), int num_values) const;

500 13 get_segment_u 4 587 33 NurbsSurfaceResult::get_segment_u 0 1 224 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_u
//       Access: Public
//  Description: Accepts a u value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               u value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
70
inline float NurbsSurfaceResult::get_segment_u(int ui, float u) const;

501 13 get_segment_v 4 587 33 NurbsSurfaceResult::get_segment_v 0 1 225 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_v
//       Access: Public
//  Description: Accepts a v value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               v value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
70
inline float NurbsSurfaceResult::get_segment_v(int vi, float v) const;

502 21 NurbsSurfaceEvaluator 4 588 44 NurbsSurfaceEvaluator::NurbsSurfaceEvaluator 0 1 226 233
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
NurbsSurfaceEvaluator::NurbsSurfaceEvaluator(void);

503 22 ~NurbsSurfaceEvaluator 4 588 45 NurbsSurfaceEvaluator::~NurbsSurfaceEvaluator 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
NurbsSurfaceEvaluator::~NurbsSurfaceEvaluator(void);

504 11 set_u_order 4 588 34 NurbsSurfaceEvaluator::set_u_order 0 1 227 1213
// Filename: nurbsSurfaceEvaluator.I
// Created by:  drose (10Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_order
//       Access: Published
//  Description: Sets the order of the surface in the U direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_u_order(int u_order);

505 11 get_u_order 4 588 34 NurbsSurfaceEvaluator::get_u_order 0 1 228 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_order
//       Access: Published
//  Description: Returns the order of the surface in the U direction
//               as set by a previous call to set_u_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_u_order(void) const;

506 11 set_v_order 4 588 34 NurbsSurfaceEvaluator::set_v_order 0 1 229 528
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_order
//       Access: Published
//  Description: Sets the order of the surface in the V direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_v_order(int v_order);

507 11 get_v_order 4 588 34 NurbsSurfaceEvaluator::get_v_order 0 1 230 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_order
//       Access: Published
//  Description: Returns the order of the surface in the V direction
//               as set by a previous call to set_v_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_v_order(void) const;

508 5 reset 4 588 28 NurbsSurfaceEvaluator::reset 0 1 231 512
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the surface up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
74
void NurbsSurfaceEvaluator::reset(int num_u_vertices, int num_v_vertices);

509 18 get_num_u_vertices 4 588 41 NurbsSurfaceEvaluator::get_num_u_vertices 0 1 232 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the U
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_vertices(void) const;

510 18 get_num_v_vertices 4 588 41 NurbsSurfaceEvaluator::get_num_v_vertices 0 1 233 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the V
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_vertices(void) const;

511 10 set_vertex 4 588 33 NurbsSurfaceEvaluator::set_vertex 0 3 234 235 236 993
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
88
inline void NurbsSurfaceEvaluator::set_vertex(int ui, int vi, LVecBase4f const &vertex);

512 10 get_vertex 4 588 33 NurbsSurfaceEvaluator::get_vertex 0 2 237 238 678
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
81
inline LVecBase4f const &NurbsSurfaceEvaluator::get_vertex(int ui, int vi) const;

513 16 set_vertex_space 4 588 39 NurbsSurfaceEvaluator::set_vertex_space 0 2 239 240 1444
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the surface.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the surface is evaluated.
////////////////////////////////////////////////////////////////////
91
inline void NurbsSurfaceEvaluator::set_vertex_space(int ui, int vi, NodePath const &space);

514 16 get_vertex_space 4 588 39 NurbsSurfaceEvaluator::get_vertex_space 0 1 241 351
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the surface, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
95
NodePath NurbsSurfaceEvaluator::get_vertex_space(int ui, int vi, NodePath const &rel_to) const;

515 19 set_extended_vertex 4 588 42 NurbsSurfaceEvaluator::set_extended_vertex 0 1 242 1223
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or surface in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
91
inline void NurbsSurfaceEvaluator::set_extended_vertex(int ui, int vi, int d, float value);

516 19 get_extended_vertex 4 588 42 NurbsSurfaceEvaluator::get_extended_vertex 0 1 243 447
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::float_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
85
inline float NurbsSurfaceEvaluator::get_extended_vertex(int ui, int vi, int d) const;

517 21 set_extended_vertices 4 588 44 NurbsSurfaceEvaluator::set_extended_vertices 0 0 548
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
124
void NurbsSurfaceEvaluator::set_extended_vertices(int ui, int vi, int d, void *values[](unsigned int size), int num_values);

518 15 get_num_u_knots 4 588 38 NurbsSurfaceEvaluator::get_num_u_knots 0 1 244 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the U direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_u_knots(void) const;

519 10 set_u_knot 4 588 33 NurbsSurfaceEvaluator::set_u_knot 0 1 245 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
58
void NurbsSurfaceEvaluator::set_u_knot(int i, float knot);

520 10 get_u_knot 4 588 33 NurbsSurfaceEvaluator::get_u_knot 0 1 246 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
53
float NurbsSurfaceEvaluator::get_u_knot(int i) const;

521 17 normalize_u_knots 4 588 40 NurbsSurfaceEvaluator::normalize_u_knots 0 1 247 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_u_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_u_knots(void);

522 15 get_num_v_knots 4 588 38 NurbsSurfaceEvaluator::get_num_v_knots 0 1 248 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the V direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_v_knots(void) const;

523 10 set_v_knot 4 588 33 NurbsSurfaceEvaluator::set_v_knot 0 1 249 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
58
void NurbsSurfaceEvaluator::set_v_knot(int i, float knot);

524 10 get_v_knot 4 588 33 NurbsSurfaceEvaluator::get_v_knot 0 1 250 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
53
float NurbsSurfaceEvaluator::get_v_knot(int i) const;

525 17 normalize_v_knots 4 588 40 NurbsSurfaceEvaluator::normalize_v_knots 0 1 251 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_v_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_v_knots(void);

526 18 get_num_u_segments 4 588 41 NurbsSurfaceEvaluator::get_num_u_segments 0 1 252 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the U direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_segments(void) const;

527 18 get_num_v_segments 4 588 41 NurbsSurfaceEvaluator::get_num_v_segments 0 1 253 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the V direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_segments(void) const;

528 8 evaluate 4 588 31 NurbsSurfaceEvaluator::evaluate 0 2 254 255 461
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsSurfaceResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////
103
PointerTo< NurbsSurfaceResult > NurbsSurfaceEvaluator::evaluate(NodePath const &rel_to = ((()))) const;

529 6 output 4 588 29 NurbsSurfaceEvaluator::output 0 1 256 229
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void NurbsSurfaceEvaluator::output(ostream &out) const;

530 8 RopeNode 4 589 18 RopeNode::RopeNode 0 1 257 444
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
53
RopeNode::RopeNode(basic_string< char > const &name);

531 9 set_curve 4 589 19 RopeNode::set_curve 0 1 258 280
////////////////////////////////////////////////////////////////////
//     Function: set_curve
//       Access: Published
//  Description: Sets the particular curve represented by the
//               RopeNode.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_curve(NurbsCurveEvaluator *curve);

532 9 get_curve 4 589 19 RopeNode::get_curve 0 1 259 255
////////////////////////////////////////////////////////////////////
//     Function: get_curve
//       Access: Published
//  Description: Returns the curve represented by the RopeNode.
////////////////////////////////////////////////////////////////////
60
inline NurbsCurveEvaluator *RopeNode::get_curve(void) const;

533 15 set_render_mode 4 589 25 RopeNode::set_render_mode 0 1 260 365
////////////////////////////////////////////////////////////////////
//     Function: set_render_mode
//       Access: Published
//  Description: Specifies the method used to render the rope.  The
//               simplest is RM_thread, which just draws a one-pixel
//               line segment.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_render_mode(RopeNode::RenderMode render_mode);

534 15 get_render_mode 4 589 25 RopeNode::get_render_mode 0 1 261 299
////////////////////////////////////////////////////////////////////
//     Function: get_render_mode
//       Access: Published
//  Description: Returns the method used to render the rope.  See
//               set_render_mode().
////////////////////////////////////////////////////////////////////
66
inline RopeNode::RenderMode RopeNode::get_render_mode(void) const;

535 11 set_uv_mode 4 589 21 RopeNode::set_uv_mode 0 1 262 289
////////////////////////////////////////////////////////////////////
//     Function: set_uv_mode
//       Access: Published
//  Description: Specifies the algorithm to use to generate UV's for
//               the rope.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_uv_mode(RopeNode::UVMode uv_mode);

536 11 get_uv_mode 4 589 21 RopeNode::get_uv_mode 0 1 263 287
////////////////////////////////////////////////////////////////////
//     Function: get_uv_mode
//       Access: Published
//  Description: Returns the algorithm to use to generate UV's for the
//               rope.
////////////////////////////////////////////////////////////////////
58
inline RopeNode::UVMode RopeNode::get_uv_mode(void) const;

537 16 set_uv_direction 4 589 26 RopeNode::set_uv_direction 0 1 264 334
////////////////////////////////////////////////////////////////////
//     Function: set_uv_direction
//       Access: Published
//  Description: Specify true to vary the U coordinate down the length
//               of the rope, or false to vary the V coordinate.
////////////////////////////////////////////////////////////////////
56
inline void RopeNode::set_uv_direction(bool u_dominant);

538 16 get_uv_direction 4 589 26 RopeNode::get_uv_direction 0 1 265 360
////////////////////////////////////////////////////////////////////
//     Function: get_uv_direction
//       Access: Published
//  Description: Returns true if the rope runs down the U coordinate
//               of the texture, or false if it runs down the V
//               coordinate.
////////////////////////////////////////////////////////////////////
51
inline bool RopeNode::get_uv_direction(void) const;

539 12 set_uv_scale 4 589 22 RopeNode::set_uv_scale 0 1 266 452
////////////////////////////////////////////////////////////////////
//     Function: set_uv_scale
//       Access: Published
//  Description: Specifies an additional scaling factor to apply to
//               generated UV's along the rope.  This scale factor is
//               applied in whichever direction is along the rope, as
//               specified by set_uv_direction().
////////////////////////////////////////////////////////////////////
48
inline void RopeNode::set_uv_scale(float scale);

540 12 get_uv_scale 4 589 22 RopeNode::get_uv_scale 0 1 267 296
////////////////////////////////////////////////////////////////////
//     Function: get_uv_scale
//       Access: Published
//  Description: Returns the scaling factor to apply to generated UV's
//               for the rope.
////////////////////////////////////////////////////////////////////
48
inline float RopeNode::get_uv_scale(void) const;

541 15 set_normal_mode 4 589 25 RopeNode::set_normal_mode 0 1 268 441
////////////////////////////////////////////////////////////////////
//     Function: set_normal_mode
//       Access: Published
//  Description: Specifies the kind of normals to generate for the
//               rope.  This is only applicable when the RenderMode is
//               set to RM_tube; in the other render modes, normals
//               are never generated.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_normal_mode(RopeNode::NormalMode normal_mode);

542 15 get_normal_mode 4 589 25 RopeNode::get_normal_mode 0 1 269 365
////////////////////////////////////////////////////////////////////
//     Function: get_normal_mode
//       Access: Published
//  Description: Returns the kind of normals to generate for the rope.
//               This is only applicable when the RenderMode is set to
//               RM_tube.
////////////////////////////////////////////////////////////////////
66
inline RopeNode::NormalMode RopeNode::get_normal_mode(void) const;

543 11 set_tube_up 4 589 21 RopeNode::set_tube_up 0 1 270 723
////////////////////////////////////////////////////////////////////
//     Function: set_tube_up
//       Access: Published
//  Description: Specifies a normal vector, generally perpendicular to
//               the main axis of the starting point of the curve,
//               that controls the "top" of the curve, when RenderMode
//               is RM_tube.  This is used to orient the vertices that
//               make up the tube.  If this vector is too nearly
//               parallel with the starting direction of the curve,
//               there may be a tendency for the whole tube to
//               gimble-lock around its primary axis.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_tube_up(LVector3f const &tube_up);

544 11 get_tube_up 4 589 21 RopeNode::get_tube_up 0 1 271 358
////////////////////////////////////////////////////////////////////
//     Function: get_tube_up
//       Access: Published
//  Description: Returns the normal vector used to control the "top"
//               of the curve, when RenderMode is RM_tube.  See
//               set_tube_up().
////////////////////////////////////////////////////////////////////
58
inline LVector3f const &RopeNode::get_tube_up(void) const;

545 20 set_use_vertex_color 4 589 30 RopeNode::set_use_vertex_color 0 1 272 554
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Published
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
54
inline void RopeNode::set_use_vertex_color(bool flag);

546 20 get_use_vertex_color 4 589 30 RopeNode::get_use_vertex_color 0 1 273 302
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Published
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
55
inline bool RopeNode::get_use_vertex_color(void) const;

547 14 set_num_subdiv 4 589 24 RopeNode::set_num_subdiv 0 1 274 388
////////////////////////////////////////////////////////////////////
//     Function: set_num_subdiv
//       Access: Published
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the curve.
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_subdiv(int num_subdiv);

548 14 get_num_subdiv 4 589 24 RopeNode::get_num_subdiv 0 1 275 315
////////////////////////////////////////////////////////////////////
//     Function: get_num_subdiv
//       Access: Published
//  Description: Returns the number of subdivisions per cubic segment
//               to draw.  See set_num_subdiv().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_subdiv(void) const;

549 14 set_num_slices 4 589 24 RopeNode::set_num_slices 0 1 276 711
////////////////////////////////////////////////////////////////////
//     Function: set_num_slices
//       Access: Published
//  Description: Specifies the number of radial subdivisions to make
//               if RenderMode is RM_tube.  It is ignored in the other
//               render modes.
//
//               Increasing this number increases the roundness of a
//               cross-section of the tube.  The minimum value for a
//               dimensional tube is 3; setting it to 2 will get you a
//               thin piece of tape (which is similar to RM_billboard,
//               except it won't rotate to face the camera).
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_slices(int num_slices);

550 14 get_num_slices 4 589 24 RopeNode::get_num_slices 0 1 277 388
////////////////////////////////////////////////////////////////////
//     Function: get_num_slices
//       Access: Published
//  Description: Returns the number of radial subdivisions to make if
//               RenderMode is RM_tube.  It is ignored in the other
//               render modes.  See set_num_slices().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_slices(void) const;

551 13 set_thickness 4 589 23 RopeNode::set_thickness 0 1 278 368
////////////////////////////////////////////////////////////////////
//     Function: set_thickness
//       Access: Published
//  Description: Specifies the thickness of the rope, in pixels or in
//               spatial units, depending on the render mode.  See
//               set_render_mode().
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_thickness(float thickness);

552 13 get_thickness 4 589 23 RopeNode::get_thickness 0 1 279 286
////////////////////////////////////////////////////////////////////
//     Function: get_thickness
//       Access: Published
//  Description: Returns the thickness of the rope.  See
//               set_thickness().
////////////////////////////////////////////////////////////////////
49
inline float RopeNode::get_thickness(void) const;

553 10 set_matrix 4 589 20 RopeNode::set_matrix 0 1 280 451
////////////////////////////////////////////////////////////////////
//     Function: set_matrix
//       Access: Published
//  Description: Specifies an optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
58
inline void RopeNode::set_matrix(LMatrix4f const &matrix);

554 12 clear_matrix 4 589 22 RopeNode::clear_matrix 0 1 281 285
////////////////////////////////////////////////////////////////////
//     Function: clear_matrix
//       Access: Published
//  Description: Resets the node's matrix to identity.  See
//               set_matrix().
////////////////////////////////////////////////////////////////////
41
inline void RopeNode::clear_matrix(void);

555 10 has_matrix 4 589 20 RopeNode::has_matrix 0 1 282 305
////////////////////////////////////////////////////////////////////
//     Function: has_matrix
//       Access: Published
//  Description: Returns true if the node has a matrix set, false
//               otherwise.  See set_matrix().
////////////////////////////////////////////////////////////////////
45
inline bool RopeNode::has_matrix(void) const;

556 10 get_matrix 4 589 20 RopeNode::get_matrix 0 1 283 450
////////////////////////////////////////////////////////////////////
//     Function: get_matrix
//       Access: Published
//  Description: Returns the optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
57
inline LMatrix4f const &RopeNode::get_matrix(void) const;

557 11 reset_bound 4 589 21 RopeNode::reset_bound 0 1 284 461
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the curve has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
51
void RopeNode::reset_bound(NodePath const &rel_to);

558 14 get_class_type 4 589 24 RopeNode::get_class_type 0 1 285 0
49
static TypeHandle RopeNode::get_class_type(void);

559 9 ~RopeNode 4 589 19 RopeNode::~RopeNode 0 0 0
26
RopeNode::~RopeNode(void);

560 9 SheetNode 4 593 20 SheetNode::SheetNode 0 1 286 446
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
55
SheetNode::SheetNode(basic_string< char > const &name);

561 11 set_surface 4 593 22 SheetNode::set_surface 0 1 287 282
////////////////////////////////////////////////////////////////////
//     Function: set_surface
//       Access: Public
//  Description: Sets the particular surface represented by the
//               SheetNode.
////////////////////////////////////////////////////////////////////
67
inline void SheetNode::set_surface(NurbsSurfaceEvaluator *surface);

562 11 get_surface 4 593 22 SheetNode::get_surface 0 1 288 257
////////////////////////////////////////////////////////////////////
//     Function: get_surface
//       Access: Public
//  Description: Returns the surface represented by the SheetNode.
////////////////////////////////////////////////////////////////////
65
inline NurbsSurfaceEvaluator *SheetNode::get_surface(void) const;

563 20 set_use_vertex_color 4 593 31 SheetNode::set_use_vertex_color 0 1 289 551
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Public
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
55
inline void SheetNode::set_use_vertex_color(bool flag);

564 20 get_use_vertex_color 4 593 31 SheetNode::get_use_vertex_color 0 1 290 299
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Public
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
56
inline bool SheetNode::get_use_vertex_color(void) const;

565 16 set_num_u_subdiv 4 593 27 SheetNode::set_num_u_subdiv 0 1 291 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_u_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the U
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_u_subdiv(int num_u_subdiv);

566 16 get_num_u_subdiv 4 593 27 SheetNode::get_num_u_subdiv 0 1 292 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_u_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the U direction.  See set_num_u_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_u_subdiv(void) const;

567 16 set_num_v_subdiv 4 593 27 SheetNode::set_num_v_subdiv 0 1 293 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_v_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the V
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_v_subdiv(int num_v_subdiv);

568 16 get_num_v_subdiv 4 593 27 SheetNode::get_num_v_subdiv 0 1 294 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_v_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the V direction.  See set_num_v_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_v_subdiv(void) const;

569 11 reset_bound 4 593 22 SheetNode::reset_bound 0 1 295 464
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the surface has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
52
void SheetNode::reset_bound(NodePath const &rel_to);

570 14 get_class_type 4 593 25 SheetNode::get_class_type 0 1 296 0
50
static TypeHandle SheetNode::get_class_type(void);

571 10 ~SheetNode 4 593 21 SheetNode::~SheetNode 0 0 0
28
SheetNode::~SheetNode(void);

296
1 14 Dtool_Hc9WgDM7 6 3 597 0 14 Dtool_Hc9WgDM7 1 4 this 3 595  
2 14 Dtool_Hc9Wan3O 6 4 598 0 14 Dtool_Hc9Wan3O 1 4 this 3 595  
3 14 Dtool_Hc9Wumed 4 5 600 0 14 Dtool_Hc9Wumed 2 4 this 3 599  4 type 1 594  
4 14 Dtool_Hc9WuPVX 6 6 594 0 14 Dtool_Hc9WuPVX 1 4 this 3 595  
5 14 Dtool_Hc9WKuzT 4 7 600 0 14 Dtool_Hc9WKuzT 2 4 this 3 599  3 num 1 594  
6 14 Dtool_Hc9WlD71 6 8 594 0 14 Dtool_Hc9WlD71 1 4 this 3 595  
7 14 Dtool_Hc9WbQeF 6 9 598 0 14 Dtool_Hc9WbQeF 1 4 this 3 595  
8 14 Dtool_Hc9WBINZ 6 9 598 0 14 Dtool_Hc9WBINZ 3 4 this 3 595  4 from 1 598  2 to 1 598  
9 14 Dtool_Hc9WGyLm 6 10 598 0 14 Dtool_Hc9WGyLm 3 4 this 3 595  7 start_t 1 598  13 length_offset 1 598  
10 14 Dtool_Hc9Wo5OE 6 11 597 0 14 Dtool_Hc9Wo5OE 3 4 this 3 595  1 t 1 598  5 point 1 601  
11 14 Dtool_Hc9WGDs0 6 12 597 0 14 Dtool_Hc9WGDs0 3 4 this 3 595  1 t 1 598  7 tangent 1 601  
12 14 Dtool_Hc9WPOPy 6 13 597 0 14 Dtool_Hc9WPOPy 4 4 this 3 595  1 t 1 598  5 point 1 601  7 tangent 1 601  
13 14 Dtool_Hc9WP1ia 6 14 597 0 14 Dtool_Hc9WP1ia 3 4 this 3 595  1 t 1 598  8 tangent2 1 601  
14 14 Dtool_Hc9W6vVs 6 15 597 0 14 Dtool_Hc9W6vVs 5 4 this 3 599  1 t 1 598  2 px 1 598  2 py 1 598  2 pz 1 598  
15 14 Dtool_Hc9WjLxE 6 16 597 0 14 Dtool_Hc9WjLxE 5 4 this 3 599  1 t 1 598  2 tx 1 598  2 ty 1 598  2 tz 1 598  
16 14 Dtool_Hc9WxacM 6 17 597 0 14 Dtool_Hc9WxacM 8 4 this 3 599  1 t 1 598  2 px 1 598  2 py 1 598  2 pz 1 598  2 tx 1 598  2 ty 1 598  2 tz 1 598  
17 14 Dtool_Hc9WnG_o 6 18 597 0 14 Dtool_Hc9WnG_o 1 4 this 3 599  
18 14 Dtool_Hc9WKq7P 6 19 597 0 14 Dtool_Hc9WKq7P 3 4 this 3 599  1 a 1 595  1 b 1 595  
19 14 Dtool_Hc9W_qGa 6 20 597 0 14 Dtool_Hc9W_qGa 3 4 this 3 599  8 filename 1 603  2 cs 1 605  
20 14 Dtool_Hc9Wx_vA 6 20 597 0 14 Dtool_Hc9Wx_vA 2 4 this 3 599  8 filename 1 603  
21 14 Dtool_Hc9WvHju 6 20 597 0 14 Dtool_Hc9WvHju 4 4 this 3 599  3 out 1 606  8 filename 1 608  2 cs 1 605  
22 14 Dtool_Hc9WyWO8 7 21 611 0 14 Dtool_Hc9WyWO8 0 
23 14 Dtool_Hc9WCmF0 7 23 611 0 14 Dtool_Hc9WCmF0 0 
24 14 Dtool_Hc9WxrUC 7 26 612 318 14 Dtool_Hc9WxrUC 0 
25 14 Dtool_Hc9WXyhA 4 28 600 0 14 Dtool_Hc9WXyhA 2 4 this 3 612  5 curve 1 599  
26 14 Dtool_Hc9WsU26 4 28 600 0 14 Dtool_Hc9WsU26 3 4 this 3 612  5 curve 1 599  5 index 1 594  
27 14 Dtool_Hc9WN_D0 6 29 594 0 14 Dtool_Hc9WN_D0 2 4 this 3 612  4 node 1 613  
28 14 Dtool_Hc9WrSBL 6 30 597 0 14 Dtool_Hc9WrSBL 2 4 this 3 612  5 curve 1 599  
29 14 Dtool_Hc9WOy0q 4 30 600 0 14 Dtool_Hc9WOy0q 2 4 this 3 612  5 index 1 594  
30 14 Dtool_Hc9WafPA 6 31 597 0 14 Dtool_Hc9WafPA 2 4 this 3 614  5 curve 1 599  
31 14 Dtool_Hc9WJs_a 4 32 600 0 14 Dtool_Hc9WJs_a 1 4 this 3 612  
32 14 Dtool_Hc9WU3KR 4 33 600 0 14 Dtool_Hc9WU3KR 1 4 this 3 612  
33 14 Dtool_Hc9WZbyN 6 34 594 0 14 Dtool_Hc9WZbyN 1 4 this 3 614  
34 14 Dtool_Hc9Woks_ 7 35 599 0 14 Dtool_Hc9Woks_ 2 4 this 3 614  5 index 1 594  
35 14 Dtool_Hc9WZo8i 7 36 599 0 14 Dtool_Hc9WZo8i 1 4 this 3 614  
36 14 Dtool_Hc9WV_TC 7 37 599 0 14 Dtool_Hc9WV_TC 1 4 this 3 614  
37 14 Dtool_Hc9W_FGT 7 38 599 0 14 Dtool_Hc9W_FGT 1 4 this 3 614  
38 14 Dtool_Hc9Wip1P 6 39 594 0 14 Dtool_Hc9Wip1P 1 4 this 3 614  
39 14 Dtool_Hc9W6SlK 7 40 599 0 14 Dtool_Hc9W6SlK 2 4 this 3 614  1 n 1 594  
40 14 Dtool_Hc9Wky26 6 41 598 0 14 Dtool_Hc9Wky26 1 4 this 3 614  
41 14 Dtool_Hc9WG4bH 4 42 600 0 14 Dtool_Hc9WG4bH 3 4 this 3 612  5 max_t 1 598  17 segments_per_unit 1 598  
42 14 Dtool_Hc9WmOll 4 43 600 0 14 Dtool_Hc9WmOll 2 4 this 3 612  17 segments_per_unit 1 598  
43 14 Dtool_Hc9W72p2 4 44 600 0 14 Dtool_Hc9W72p2 2 4 this 3 612  5 max_t 1 598  
44 14 Dtool_Hc9WDS8W 6 45 597 0 14 Dtool_Hc9WDS8W 4 4 this 3 614  1 t 1 598  6 result 1 616  2 cs 1 605  
45 14 Dtool_Hc9Wf7Zb 6 45 597 0 14 Dtool_Hc9Wf7Zb 3 4 this 3 614  1 t 1 598  6 result 1 616  
46 14 Dtool_Hc9WvrTO 6 45 597 0 14 Dtool_Hc9WvrTO 4 4 this 3 614  1 t 1 598  3 xyz 1 601  3 hpr 1 601  
47 14 Dtool_Hc9WkozF 6 46 598 0 14 Dtool_Hc9WkozF 2 4 this 3 614  1 t 1 598  
48 14 Dtool_Hc9WKi9F 6 47 597 0 14 Dtool_Hc9WKi9F 3 4 this 3 614  1 t 1 598  3 xyz 1 601  
49 14 Dtool_Hc9WRYqE 6 48 597 0 14 Dtool_Hc9WRYqE 3 4 this 3 614  1 t 1 598  3 hpr 1 601  
50 14 Dtool_Hc9WHVjM 6 49 597 0 14 Dtool_Hc9WHVjM 3 4 this 3 612  1 t 1 598  3 xyz 1 618  
51 14 Dtool_Hc9Wn2SI 6 49 597 0 14 Dtool_Hc9Wn2SI 5 4 this 3 612  1 t 1 598  1 x 1 598  1 y 1 598  1 z 1 598  
52 14 Dtool_Hc9WNQfE 6 50 597 0 14 Dtool_Hc9WNQfE 3 4 this 3 612  1 t 1 598  3 xyz 1 618  
53 14 Dtool_Hc9WxtOA 6 50 597 0 14 Dtool_Hc9WxtOA 5 4 this 3 612  1 t 1 598  1 h 1 598  1 p 1 598  1 r 1 598  
54 14 Dtool_Hc9Wi2Rj 6 51 597 0 14 Dtool_Hc9Wi2Rj 1 4 this 3 612  
55 14 Dtool_Hc9WWz_C 6 52 597 0 14 Dtool_Hc9WWz_C 3 4 this 3 612  1 a 1 614  1 b 1 614  
56 14 Dtool_Hc9Wc_Jm 4 53 600 0 14 Dtool_Hc9Wc_Jm 2 4 this 3 614  3 out 1 606  
57 14 Dtool_Hc9W57RA 4 54 600 0 14 Dtool_Hc9W57RA 3 4 this 3 614  3 out 1 606  12 indent_level 1 594  
58 14 Dtool_Hc9Werdh 4 54 600 0 14 Dtool_Hc9Werdh 2 4 this 3 614  3 out 1 606  
59 14 Dtool_Hc9WPXGo 6 55 597 0 14 Dtool_Hc9WPXGo 3 4 this 3 612  8 filename 1 603  2 cs 1 605  
60 14 Dtool_Hc9Wi0bC 6 55 597 0 14 Dtool_Hc9Wi0bC 2 4 this 3 612  8 filename 1 603  
61 14 Dtool_Hc9WTx15 6 55 597 0 14 Dtool_Hc9WTx15 4 4 this 3 612  3 out 1 606  8 filename 1 608  2 cs 1 605  
62 14 Dtool_Hc9WMvxy 7 57 620 348 14 Dtool_Hc9WMvxy 0 
63 14 Dtool_Hc9WLEBv 4 59 600 0 14 Dtool_Hc9WLEBv 1 4 this 3 620  
64 14 Dtool_Hc9WU_r2 4 60 600 0 14 Dtool_Hc9WU_r2 3 4 this 3 620  1 t 1 598  3 xyz 1 618  
65 14 Dtool_Hc9WWyG0 4 61 600 0 14 Dtool_Hc9WWyG0 3 4 this 3 620  1 t 1 598  3 hpr 1 618  
66 14 Dtool_Hc9W8TgF 4 62 600 0 14 Dtool_Hc9W8TgF 4 4 this 3 620  1 t 1 598  3 xyz 1 618  3 hpr 1 618  
67 14 Dtool_Hc9WxRbc 6 63 594 0 14 Dtool_Hc9WxRbc 1 4 this 3 621  
68 14 Dtool_Hc9WbZg8 6 64 598 0 14 Dtool_Hc9WbZg8 2 4 this 3 621  1 n 1 594  
69 14 Dtool_Hc9WeDCE 7 65 601 0 14 Dtool_Hc9WeDCE 2 4 this 3 621  1 n 1 594  
70 14 Dtool_Hc9WpADi 7 66 601 0 14 Dtool_Hc9WpADi 2 4 this 3 621  1 n 1 594  
71 14 Dtool_Hc9W6bTo 7 67 601 0 14 Dtool_Hc9W6bTo 2 4 this 3 621  1 n 1 594  
72 14 Dtool_Hc9WaErD 4 68 600 0 14 Dtool_Hc9WaErD 3 4 this 3 620  5 begin 1 594  3 end 1 594  
73 14 Dtool_Hc9Wt_E2 4 69 600 0 14 Dtool_Hc9Wt_E2 3 4 this 3 620  6 curves 1 612  5 count 1 594  
74 14 Dtool_Hc9WN25m 4 70 600 0 14 Dtool_Hc9WN25m 1 4 this 3 620  
75 14 Dtool_Hc9WUxVM 4 71 600 0 14 Dtool_Hc9WUxVM 1 4 this 3 620  
76 14 Dtool_Hc9We3Ay 4 72 600 0 14 Dtool_Hc9We3Ay 2 4 this 3 620  6 factor 1 598  
77 14 Dtool_Hc9WsxwM 4 73 600 0 14 Dtool_Hc9WsxwM 2 4 this 3 620  5 scale 1 598  
78 14 Dtool_Hc9WTvHh 7 74 612 318 14 Dtool_Hc9WTvHh 1 4 this 3 621  
79 14 Dtool_Hc9WppFN 7 75 612 318 14 Dtool_Hc9WppFN 1 4 this 3 621  
80 14 Dtool_Hc9WfDRp 4 76 600 0 14 Dtool_Hc9WfDRp 2 4 this 3 621  3 out 1 606  
81 14 Dtool_Hc9WX7hW 4 77 600 0 14 Dtool_Hc9WX7hW 2 4 this 3 621  3 out 1 606  
82 14 Dtool_Hc9WS9rR 7 78 611 0 14 Dtool_Hc9WS9rR 0 
83 14 Dtool_Hc9WZzpr 7 80 623 0 14 Dtool_Hc9WZzpr 0 
84 14 Dtool_Hc9WxscQ 7 81 611 0 14 Dtool_Hc9WxscQ 0 
85 14 Dtool_Hc9WzsME 7 83 624 0 14 Dtool_Hc9WzsME 0 
86 14 Dtool_Hc9WzviK 7 83 624 0 14 Dtool_Hc9WzviK 1 2 pc 1 595  
87 14 Dtool_Hc9W6fOV 6 84 594 0 14 Dtool_Hc9W6fOV 1 4 this 3 625  
88 14 Dtool_Hc9WLZ8L 6 85 594 0 14 Dtool_Hc9WLZ8L 2 4 this 3 624  1 t 1 598  
89 14 Dtool_Hc9WxceQ 6 86 594 0 14 Dtool_Hc9WxceQ 3 4 this 3 624  4 type 1 594  1 v 1 618  
90 14 Dtool_Hc9WM_6n 6 86 594 0 14 Dtool_Hc9WM_6n 5 4 this 3 624  4 type 1 594  1 x 1 598  1 y 1 598  1 z 1 598  
91 14 Dtool_Hc9WcGlz 6 87 597 0 14 Dtool_Hc9WcGlz 2 4 this 3 624  1 n 1 594  
92 14 Dtool_Hc9WYfOG 4 88 600 0 14 Dtool_Hc9WYfOG 1 4 this 3 624  
93 14 Dtool_Hc9WEeDJ 6 89 597 0 14 Dtool_Hc9WEeDJ 3 4 this 3 624  1 n 1 594  4 type 1 594  
94 14 Dtool_Hc9W1ifu 6 90 597 0 14 Dtool_Hc9W1ifu 3 4 this 3 624  1 n 1 594  1 v 1 618  
95 14 Dtool_Hc9W2q7R 6 90 597 0 14 Dtool_Hc9W2q7R 5 4 this 3 624  1 n 1 594  1 x 1 598  1 y 1 598  1 z 1 598  
96 14 Dtool_Hc9WWhVD 6 91 597 0 14 Dtool_Hc9WWhVD 3 4 this 3 624  1 n 1 594  1 v 1 618  
97 14 Dtool_Hc9WFkya 6 91 597 0 14 Dtool_Hc9WFkya 5 4 this 3 624  1 n 1 594  1 x 1 598  1 y 1 598  1 z 1 598  
98 14 Dtool_Hc9W0v4x 6 92 597 0 14 Dtool_Hc9W0v4x 3 4 this 3 624  1 n 1 594  1 v 1 618  
99 14 Dtool_Hc9WkRXh 6 92 597 0 14 Dtool_Hc9WkRXh 5 4 this 3 624  1 n 1 594  1 x 1 598  1 y 1 598  1 z 1 598  
100 14 Dtool_Hc9Wo3DW 6 93 597 0 14 Dtool_Hc9Wo3DW 3 4 this 3 624  1 n 1 594  6 tstart 1 598  
101 14 Dtool_Hc9WYy1_ 6 94 597 0 14 Dtool_Hc9WYy1_ 3 4 this 3 624  1 n 1 594  4 name 1 627  
102 14 Dtool_Hc9WoOER 6 95 594 0 14 Dtool_Hc9WoOER 2 4 this 3 625  1 n 1 594  
103 14 Dtool_Hc9WAAkK 6 96 618 0 14 Dtool_Hc9WAAkK 2 4 this 3 625  1 n 1 594  
104 14 Dtool_Hc9WRbj7 4 96 600 0 14 Dtool_Hc9WRbj7 3 4 this 3 625  1 n 1 594  1 v 1 601  
105 14 Dtool_Hc9WEkRx 6 97 618 0 14 Dtool_Hc9WEkRx 2 4 this 3 625  1 n 1 594  
106 14 Dtool_Hc9WOXkH 4 97 600 0 14 Dtool_Hc9WOXkH 3 4 this 3 625  1 n 1 594  1 v 1 601  
107 14 Dtool_Hc9WCKEx 6 98 618 0 14 Dtool_Hc9WCKEx 2 4 this 3 625  1 n 1 594  
108 14 Dtool_Hc9WOr47 4 98 600 0 14 Dtool_Hc9WOr47 3 4 this 3 625  1 n 1 594  1 v 1 601  
109 14 Dtool_Hc9WBbZE 6 99 598 0 14 Dtool_Hc9WBbZE 2 4 this 3 625  1 n 1 594  
110 14 Dtool_Hc9Wn1_h 6 100 627 0 14 Dtool_Hc9Wn1_h 2 4 this 3 625  1 n 1 594  
111 14 Dtool_Hc9WeyiA 4 101 600 0 14 Dtool_Hc9WeyiA 3 4 this 3 625  3 out 1 606  1 n 1 594  
112 14 Dtool_Hc9W3huh 7 102 611 0 14 Dtool_Hc9W3huh 0 
113 14 Dtool_Hc9WLhK6 4 105 600 0 14 Dtool_Hc9WLhK6 2 4 this 3 628  5 order 1 594  
114 14 Dtool_Hc9WiPY_ 6 106 594 0 14 Dtool_Hc9WiPY_ 1 4 this 3 629  
115 14 Dtool_Hc9WWaqD 6 107 594 0 14 Dtool_Hc9WWaqD 1 4 this 3 629  
116 14 Dtool_Hc9WMQ5_ 6 108 594 0 14 Dtool_Hc9WMQ5_ 1 4 this 3 629  
117 14 Dtool_Hc9W8ScU 6 109 597 0 14 Dtool_Hc9W8ScU 2 4 this 3 628  1 t 1 598  
118 14 Dtool_Hc9WofTi 6 110 594 0 14 Dtool_Hc9WofTi 2 4 this 3 628  1 v 1 618  
119 14 Dtool_Hc9WgMdi 6 110 594 0 14 Dtool_Hc9WgMdi 2 4 this 3 628  1 v 1 631  
120 14 Dtool_Hc9WB3ZR 6 110 594 0 14 Dtool_Hc9WB3ZR 4 4 this 3 628  1 x 1 598  1 y 1 598  1 z 1 598  
121 14 Dtool_Hc9WuA5o 6 111 597 0 14 Dtool_Hc9WuA5o 2 4 this 3 628  1 n 1 594  
122 14 Dtool_Hc9W1Nej 4 112 600 0 14 Dtool_Hc9W1Nej 1 4 this 3 628  
123 14 Dtool_Hc9W03Z_ 6 113 597 0 14 Dtool_Hc9W03Z_ 3 4 this 3 628  1 n 1 594  1 v 1 618  
124 14 Dtool_Hc9WvbUc 6 113 597 0 14 Dtool_Hc9WvbUc 5 4 this 3 628  1 n 1 594  1 x 1 598  1 y 1 598  1 z 1 598  
125 14 Dtool_Hc9WKFJB 7 114 601 0 14 Dtool_Hc9WKFJB 2 4 this 3 629  1 n 1 594  
126 14 Dtool_Hc9WkgWd 6 115 597 0 14 Dtool_Hc9WkgWd 3 4 this 3 628  1 n 1 594  1 w 1 598  
127 14 Dtool_Hc9WQgDH 6 116 598 0 14 Dtool_Hc9WQgDH 2 4 this 3 629  1 n 1 594  
128 14 Dtool_Hc9WsLws 6 117 597 0 14 Dtool_Hc9WsLws 3 4 this 3 628  1 n 1 594  1 v 1 631  
129 14 Dtool_Hc9W_TRe 7 118 634 0 14 Dtool_Hc9W_TRe 2 4 this 3 629  1 n 1 594  
130 14 Dtool_Hc9WDnR8 6 119 597 0 14 Dtool_Hc9WDnR8 3 4 this 3 628  1 n 1 594  1 t 1 598  
131 14 Dtool_Hc9W_MjW 6 120 598 0 14 Dtool_Hc9W_MjW 2 4 this 3 629  1 n 1 594  
132 14 Dtool_Hc9W6ybU 4 121 600 0 14 Dtool_Hc9W6ybU 3 4 this 3 629  3 out 1 606  1 n 1 594  
133 14 Dtool_Hc9Whfnq 7 122 611 0 14 Dtool_Hc9Whfnq 0 
134 14 Dtool_Hc9WoQie 7 128 635 415 14 Dtool_Hc9WoQie 0 
135 14 Dtool_Hc9WYpGF 7 128 635 415 14 Dtool_Hc9WYpGF 1 2 pc 1 595  
136 14 Dtool_Hc9WcSO4 7 130 611 0 14 Dtool_Hc9WcSO4 0 
137 14 Dtool_Hc9W_oME 7 124 623 0 14 Dtool_Hc9W_oME 1 4 this 3 635  
138 14 Dtool_Hc9W66HO 7 125 635 415 14 Dtool_Hc9W66HO 1 4 this 3 623  
139 14 Dtool_Hc9WWDPk 6 126 628 0 14 Dtool_Hc9WWDPk 1 4 this 3 635  
140 14 Dtool_Hc9WQN7l 7 127 635 415 14 Dtool_Hc9WQN7l 1 4 this 3 628  
141 14 Dtool_Hc9WCP8Y 7 133 636 0 14 Dtool_Hc9WCP8Y 0 
142 14 Dtool_Hc9W8mvO 4 134 600 0 14 Dtool_Hc9W8mvO 2 4 this 3 636  5 curve 1 599  
143 14 Dtool_Hc9Wxnwy 4 135 600 0 14 Dtool_Hc9Wxnwy 2 4 this 3 636  6 curves 1 612  
144 14 Dtool_Hc9WT318 4 136 600 0 14 Dtool_Hc9WT318 1 4 this 3 636  
145 14 Dtool_Hc9WwaoA 7 137 612 318 14 Dtool_Hc9WwaoA 1 4 this 3 636  
146 14 Dtool_Hc9WNGBt 7 138 638 0 14 Dtool_Hc9WNGBt 1 4 this 3 636  
147 14 Dtool_Hc9Wx6Sb 7 139 638 0 14 Dtool_Hc9Wx6Sb 1 4 this 3 636  
148 14 Dtool_Hc9WI8aT 4 140 600 0 14 Dtool_Hc9WI8aT 2 4 this 3 636  8 num_segs 1 598  
149 14 Dtool_Hc9W2ju9 6 141 598 0 14 Dtool_Hc9W2ju9 1 4 this 3 639  
150 14 Dtool_Hc9WKj6Q 4 142 600 0 14 Dtool_Hc9WKj6Q 2 4 this 3 636  9 num_ticks 1 598  
151 14 Dtool_Hc9WgGZz 6 143 598 0 14 Dtool_Hc9WgGZz 1 4 this 3 639  
152 14 Dtool_Hc9W2QPs 4 144 600 0 14 Dtool_Hc9W2QPs 4 4 this 3 636  1 r 1 598  1 g 1 598  1 b 1 598  
153 14 Dtool_Hc9W8LPy 4 145 600 0 14 Dtool_Hc9W8LPy 4 4 this 3 636  1 r 1 598  1 g 1 598  1 b 1 598  
154 14 Dtool_Hc9W05wI 4 146 600 0 14 Dtool_Hc9W05wI 2 4 this 3 636  5 thick 1 598  
155 14 Dtool_Hc9WxP9Z 4 147 600 0 14 Dtool_Hc9WxP9Z 2 4 this 3 636  14 frame_accurate 1 597  
156 14 Dtool_Hc9Wk1Re 6 148 597 0 14 Dtool_Hc9Wk1Re 1 4 this 3 639  
157 14 Dtool_Hc9WDy3i 6 149 597 0 14 Dtool_Hc9WDy3i 1 4 this 3 636  
158 14 Dtool_Hc9W3RC9 4 150 600 0 14 Dtool_Hc9W3RC9 1 4 this 3 636  
159 14 Dtool_Hc9Wtct8 4 151 600 0 14 Dtool_Hc9Wtct8 2 4 this 3 636  5 scale 1 598  
160 14 Dtool_Hc9WEHZj 6 152 598 0 14 Dtool_Hc9WEHZj 1 4 this 3 639  
161 14 Dtool_Hc9W_z9E 7 153 611 0 14 Dtool_Hc9W_z9E 0 
162 14 Dtool_Hc9W6Cap 7 155 641 0 14 Dtool_Hc9W6Cap 0 
163 14 Dtool_Hc9WEdLu 4 156 600 0 14 Dtool_Hc9WEdLu 4 4 this 3 641  1 r 1 598  1 g 1 598  1 b 1 598  
164 14 Dtool_Hc9Wiht2 4 157 600 0 14 Dtool_Hc9Wiht2 4 4 this 3 641  1 r 1 598  1 g 1 598  1 b 1 598  
165 14 Dtool_Hc9W6p8C 4 158 600 0 14 Dtool_Hc9W6p8C 4 4 this 3 641  1 r 1 598  1 g 1 598  1 b 1 598  
166 14 Dtool_Hc9WYxwY 6 159 597 0 14 Dtool_Hc9WYxwY 4 4 this 3 641  2 t1 1 598  2 t2 1 598  5 curve 1 599  
167 14 Dtool_Hc9WzpkB 6 159 597 0 14 Dtool_Hc9WzpkB 3 4 this 3 641  2 t1 1 598  2 t2 1 598  
168 14 Dtool_Hc9Wizti 4 160 600 0 14 Dtool_Hc9Wizti 2 4 this 3 641  4 flag 1 597  
169 14 Dtool_Hc9WA3jn 6 161 597 0 14 Dtool_Hc9WA3jn 1 4 this 3 642  
170 14 Dtool_Hc9WDCJk 4 162 600 0 14 Dtool_Hc9WDCJk 2 4 this 3 641  4 flag 1 597  
171 14 Dtool_Hc9WxROr 6 163 597 0 14 Dtool_Hc9WxROr 1 4 this 3 642  
172 14 Dtool_Hc9WmYX4 4 164 600 0 14 Dtool_Hc9WmYX4 2 4 this 3 641  4 flag 1 597  
173 14 Dtool_Hc9WmU_G 6 165 597 0 14 Dtool_Hc9WmU_G 1 4 this 3 642  
174 14 Dtool_Hc9W1FqG 6 166 597 0 14 Dtool_Hc9W1FqG 2 4 this 3 641  1 n 1 594  
175 14 Dtool_Hc9Wievm 6 166 597 0 14 Dtool_Hc9Wievm 5 4 this 3 641  1 n 1 594  2 hr 1 598  2 hg 1 598  2 hb 1 598  
176 14 Dtool_Hc9WQIem 6 167 597 0 14 Dtool_Hc9WQIem 2 4 this 3 641  1 n 1 594  
177 14 Dtool_Hc9W4Wm8 7 168 611 0 14 Dtool_Hc9W4Wm8 0 
178 14 Dtool_Hc9WNf1r 6 171 598 0 14 Dtool_Hc9WNf1r 1 4 this 3 644  
179 14 Dtool_Hc9WPEFs 6 172 598 0 14 Dtool_Hc9WPEFs 1 4 this 3 644  
180 14 Dtool_Hc9Wkne8 6 173 597 0 14 Dtool_Hc9Wkne8 3 4 this 3 646  1 t 1 598  5 point 1 601  
181 14 Dtool_Hc9WHZT_ 6 174 597 0 14 Dtool_Hc9WHZT_ 3 4 this 3 646  1 t 1 598  7 tangent 1 601  
182 14 Dtool_Hc9WYSlj 6 175 598 0 14 Dtool_Hc9WYSlj 3 4 this 3 646  1 t 1 598  1 d 1 594  
183 14 Dtool_Hc9Ww2Tl 6 177 594 0 14 Dtool_Hc9Ww2Tl 1 4 this 3 644  
184 14 Dtool_Hc9WiDoh 4 178 600 0 14 Dtool_Hc9WiDoh 4 4 this 3 644  7 segment 1 594  1 t 1 598  5 point 1 601  
185 14 Dtool_Hc9WNjKk 4 179 600 0 14 Dtool_Hc9WNjKk 4 4 this 3 644  7 segment 1 594  1 t 1 598  7 tangent 1 601  
186 14 Dtool_Hc9Wtc44 6 180 598 0 14 Dtool_Hc9Wtc44 4 4 this 3 644  7 segment 1 594  1 t 1 598  1 d 1 594  
187 14 Dtool_Hc9W6YrI 6 182 598 0 14 Dtool_Hc9W6YrI 3 4 this 3 644  7 segment 1 594  1 t 1 598  
188 14 Dtool_Hc9WoL16 7 184 647 466 14 Dtool_Hc9WoL16 0 
189 14 Dtool_Hc9W59cz 4 186 600 0 14 Dtool_Hc9W59cz 2 4 this 3 647  5 order 1 594  
190 14 Dtool_Hc9WyKq4 6 187 594 0 14 Dtool_Hc9WyKq4 1 4 this 3 648  
191 14 Dtool_Hc9Wc62C 4 188 600 0 14 Dtool_Hc9Wc62C 2 4 this 3 647  12 num_vertices 1 594  
192 14 Dtool_Hc9WWeXN 6 189 594 0 14 Dtool_Hc9WWeXN 1 4 this 3 648  
193 14 Dtool_Hc9WJSId 4 190 600 0 14 Dtool_Hc9WJSId 4 4 this 3 647  1 i 1 594  6 vertex 1 618  6 weight 1 598  
194 14 Dtool_Hc9WTeoz 4 190 600 0 14 Dtool_Hc9WTeoz 3 4 this 3 647  1 i 1 594  6 vertex 1 618  
195 14 Dtool_Hc9WTmY9 4 190 600 0 14 Dtool_Hc9WTmY9 3 4 this 3 647  1 i 1 594  6 vertex 1 631  
196 14 Dtool_Hc9WPRq2 6 191 631 0 14 Dtool_Hc9WPRq2 2 4 this 3 648  1 i 1 594  
197 14 Dtool_Hc9WcIW3 7 191 634 0 14 Dtool_Hc9WcIW3 3 4 this 3 648  1 i 1 594  6 rel_to 1 650  
198 14 Dtool_Hc9WweNU 4 192 600 0 14 Dtool_Hc9WweNU 3 4 this 3 647  1 i 1 594  5 space 1 650  
199 14 Dtool_Hc9WyxIB 4 192 600 0 14 Dtool_Hc9WyxIB 3 4 this 3 647  1 i 1 594  5 space 1 627  
200 14 Dtool_Hc9WNK37 7 193 653 0 14 Dtool_Hc9WNK37 3 4 this 3 648  1 i 1 594  6 rel_to 1 650  
201 14 Dtool_Hc9WnasG 4 194 600 0 14 Dtool_Hc9WnasG 4 4 this 3 647  1 i 1 594  1 d 1 594  5 value 1 598  
202 14 Dtool_Hc9WKQQ_ 6 195 598 0 14 Dtool_Hc9WKQQ_ 3 4 this 3 648  1 i 1 594  1 d 1 594  
203 14 Dtool_Hc9W8dL4 6 197 594 0 14 Dtool_Hc9W8dL4 1 4 this 3 648  
204 14 Dtool_Hc9Wxjj1 4 198 600 0 14 Dtool_Hc9Wxjj1 3 4 this 3 647  1 i 1 594  4 knot 1 598  
205 14 Dtool_Hc9WuP1P 6 199 598 0 14 Dtool_Hc9WuP1P 2 4 this 3 648  1 i 1 594  
206 14 Dtool_Hc9Wmh_4 4 200 600 0 14 Dtool_Hc9Wmh_4 1 4 this 3 647  
207 14 Dtool_Hc9WEL14 6 201 594 0 14 Dtool_Hc9WEL14 1 4 this 3 648  
208 14 Dtool_Hc9WApE_ 7 202 646 452 14 Dtool_Hc9WApE_ 2 4 this 3 648  6 rel_to 1 650  
209 14 Dtool_Hc9W2r74 7 202 646 452 14 Dtool_Hc9W2r74 1 4 this 3 648  
210 14 Dtool_Hc9WWA8J 7 202 646 452 14 Dtool_Hc9WWA8J 3 4 this 3 648  6 rel_to 1 650  3 mat 1 654  
211 14 Dtool_Hc9Wh3t0 4 203 600 0 14 Dtool_Hc9Wh3t0 2 4 this 3 648  3 out 1 606  
212 14 Dtool_Hc9WlxRL 6 206 598 0 14 Dtool_Hc9WlxRL 1 4 this 3 656  
213 14 Dtool_Hc9WxP5f 6 207 598 0 14 Dtool_Hc9WxP5f 1 4 this 3 656  
214 14 Dtool_Hc9WlIgM 6 208 598 0 14 Dtool_Hc9WlIgM 1 4 this 3 656  
215 14 Dtool_Hc9WJL57 6 209 598 0 14 Dtool_Hc9WJL57 1 4 this 3 656  
216 14 Dtool_Hc9WtQQk 6 210 597 0 14 Dtool_Hc9WtQQk 4 4 this 3 658  1 u 1 598  1 v 1 598  5 point 1 601  
217 14 Dtool_Hc9W_6lV 6 211 597 0 14 Dtool_Hc9W_6lV 4 4 this 3 658  1 u 1 598  1 v 1 598  6 normal 1 601  
218 14 Dtool_Hc9W9yzI 6 212 598 0 14 Dtool_Hc9W9yzI 4 4 this 3 658  1 u 1 598  1 v 1 598  1 d 1 594  
219 14 Dtool_Hc9WQs85 6 214 594 0 14 Dtool_Hc9WQs85 1 4 this 3 656  
220 14 Dtool_Hc9WZT9V 6 215 594 0 14 Dtool_Hc9WZT9V 1 4 this 3 656  
221 14 Dtool_Hc9WqiBr 4 216 600 0 14 Dtool_Hc9WqiBr 6 4 this 3 656  2 ui 1 594  2 vi 1 594  1 u 1 598  1 v 1 598  5 point 1 601  
222 14 Dtool_Hc9WmDzQ 4 217 600 0 14 Dtool_Hc9WmDzQ 6 4 this 3 656  2 ui 1 594  2 vi 1 594  1 u 1 598  1 v 1 598  6 normal 1 601  
223 14 Dtool_Hc9WZ0qy 6 218 598 0 14 Dtool_Hc9WZ0qy 6 4 this 3 656  2 ui 1 594  2 vi 1 594  1 u 1 598  1 v 1 598  1 d 1 594  
224 14 Dtool_Hc9WPEBw 6 220 598 0 14 Dtool_Hc9WPEBw 3 4 this 3 656  2 ui 1 594  1 u 1 598  
225 14 Dtool_Hc9WTExR 6 221 598 0 14 Dtool_Hc9WTExR 3 4 this 3 656  2 vi 1 594  1 v 1 598  
226 14 Dtool_Hc9WPTGr 7 223 659 503 14 Dtool_Hc9WPTGr 0 
227 14 Dtool_Hc9WU5Cj 4 225 600 0 14 Dtool_Hc9WU5Cj 2 4 this 3 659  7 u_order 1 594  
228 14 Dtool_Hc9Wr6rC 6 226 594 0 14 Dtool_Hc9Wr6rC 1 4 this 3 660  
229 14 Dtool_Hc9Wi46T 4 227 600 0 14 Dtool_Hc9Wi46T 2 4 this 3 659  7 v_order 1 594  
230 14 Dtool_Hc9WS6jz 6 228 594 0 14 Dtool_Hc9WS6jz 1 4 this 3 660  
231 14 Dtool_Hc9WR8n7 4 229 600 0 14 Dtool_Hc9WR8n7 3 4 this 3 659  14 num_u_vertices 1 594  14 num_v_vertices 1 594  
232 14 Dtool_Hc9WSVa7 6 230 594 0 14 Dtool_Hc9WSVa7 1 4 this 3 660  
233 14 Dtool_Hc9WR1di 6 231 594 0 14 Dtool_Hc9WR1di 1 4 this 3 660  
234 14 Dtool_Hc9W_QQa 4 232 600 0 14 Dtool_Hc9W_QQa 5 4 this 3 659  2 ui 1 594  2 vi 1 594  6 vertex 1 618  6 weight 1 598  
235 14 Dtool_Hc9WgFq4 4 232 600 0 14 Dtool_Hc9WgFq4 4 4 this 3 659  2 ui 1 594  2 vi 1 594  6 vertex 1 618  
236 14 Dtool_Hc9WpOqU 4 232 600 0 14 Dtool_Hc9WpOqU 4 4 this 3 659  2 ui 1 594  2 vi 1 594  6 vertex 1 631  
237 14 Dtool_Hc9WO2eA 6 233 631 0 14 Dtool_Hc9WO2eA 3 4 this 3 660  2 ui 1 594  2 vi 1 594  
238 14 Dtool_Hc9Wf6Jc 7 233 634 0 14 Dtool_Hc9Wf6Jc 4 4 this 3 660  2 ui 1 594  2 vi 1 594  6 rel_to 1 650  
239 14 Dtool_Hc9W2rJC 4 234 600 0 14 Dtool_Hc9W2rJC 4 4 this 3 659  2 ui 1 594  2 vi 1 594  5 space 1 650  
240 14 Dtool_Hc9Wklv_ 4 234 600 0 14 Dtool_Hc9Wklv_ 4 4 this 3 659  2 ui 1 594  2 vi 1 594  5 space 1 627  
241 14 Dtool_Hc9WHN7J 7 235 653 0 14 Dtool_Hc9WHN7J 4 4 this 3 660  2 ui 1 594  2 vi 1 594  6 rel_to 1 650  
242 14 Dtool_Hc9Wow1w 4 236 600 0 14 Dtool_Hc9Wow1w 5 4 this 3 659  2 ui 1 594  2 vi 1 594  1 d 1 594  5 value 1 598  
243 14 Dtool_Hc9WrTUV 6 237 598 0 14 Dtool_Hc9WrTUV 4 4 this 3 660  2 ui 1 594  2 vi 1 594  1 d 1 594  
244 14 Dtool_Hc9WRhHW 6 239 594 0 14 Dtool_Hc9WRhHW 1 4 this 3 660  
245 14 Dtool_Hc9W8ALf 4 240 600 0 14 Dtool_Hc9W8ALf 3 4 this 3 659  1 i 1 594  4 knot 1 598  
246 14 Dtool_Hc9WQ_JQ 6 241 598 0 14 Dtool_Hc9WQ_JQ 2 4 this 3 660  1 i 1 594  
247 14 Dtool_Hc9Wkyv3 4 242 600 0 14 Dtool_Hc9Wkyv3 1 4 this 3 659  
248 14 Dtool_Hc9WRBK9 6 243 594 0 14 Dtool_Hc9WRBK9 1 4 this 3 660  
249 14 Dtool_Hc9WyADQ 4 244 600 0 14 Dtool_Hc9WyADQ 3 4 this 3 659  1 i 1 594  4 knot 1 598  
250 14 Dtool_Hc9Wm_BB 6 245 598 0 14 Dtool_Hc9Wm_BB 2 4 this 3 660  1 i 1 594  
251 14 Dtool_Hc9W14vv 4 246 600 0 14 Dtool_Hc9W14vv 1 4 this 3 659  
252 14 Dtool_Hc9WfAIa 6 247 594 0 14 Dtool_Hc9WfAIa 1 4 this 3 660  
253 14 Dtool_Hc9WghMB 6 248 594 0 14 Dtool_Hc9WghMB 1 4 this 3 660  
254 14 Dtool_Hc9WKtCQ 7 249 658 485 14 Dtool_Hc9WKtCQ 2 4 this 3 660  6 rel_to 1 650  
255 14 Dtool_Hc9WNggZ 7 249 658 485 14 Dtool_Hc9WNggZ 1 4 this 3 660  
256 14 Dtool_Hc9Wz87T 4 250 600 0 14 Dtool_Hc9Wz87T 2 4 this 3 660  3 out 1 606  
257 14 Dtool_Hc9WzBQj 7 252 662 559 14 Dtool_Hc9WzBQj 1 4 name 1 627  
258 14 Dtool_Hc9WFaXK 4 256 600 0 14 Dtool_Hc9WFaXK 2 4 this 3 662  5 curve 1 647  
259 14 Dtool_Hc9Waios 7 257 647 466 14 Dtool_Hc9Waios 1 4 this 3 663  
260 14 Dtool_Hc9WuWlh 4 258 600 0 14 Dtool_Hc9WuWlh 2 4 this 3 662  11 render_mode 1 590  
261 14 Dtool_Hc9WYvch 6 259 590 0 14 Dtool_Hc9WYvch 1 4 this 3 663  
262 14 Dtool_Hc9W6nhf 4 260 600 0 14 Dtool_Hc9W6nhf 2 4 this 3 662  7 uv_mode 1 591  
263 14 Dtool_Hc9Wigqq 6 261 591 0 14 Dtool_Hc9Wigqq 1 4 this 3 663  
264 14 Dtool_Hc9WgEwx 4 262 600 0 14 Dtool_Hc9WgEwx 2 4 this 3 662  10 u_dominant 1 597  
265 14 Dtool_Hc9W_9Z_ 6 263 597 0 14 Dtool_Hc9W_9Z_ 1 4 this 3 663  
266 14 Dtool_Hc9W2gSR 4 264 600 0 14 Dtool_Hc9W2gSR 2 4 this 3 662  5 scale 1 598  
267 14 Dtool_Hc9WUMN6 6 265 598 0 14 Dtool_Hc9WUMN6 1 4 this 3 663  
268 14 Dtool_Hc9WoMpH 4 266 600 0 14 Dtool_Hc9WoMpH 2 4 this 3 662  11 normal_mode 1 592  
269 14 Dtool_Hc9WGyYY 6 267 592 0 14 Dtool_Hc9WGyYY 1 4 this 3 663  
270 14 Dtool_Hc9WjaO5 4 268 600 0 14 Dtool_Hc9WjaO5 2 4 this 3 662  7 tube_up 1 665  
271 14 Dtool_Hc9WHo6a 6 269 665 0 14 Dtool_Hc9WHo6a 1 4 this 3 663  
272 14 Dtool_Hc9WnZ_r 4 270 600 0 14 Dtool_Hc9WnZ_r 2 4 this 3 662  4 flag 1 597  
273 14 Dtool_Hc9WB86D 6 271 597 0 14 Dtool_Hc9WB86D 1 4 this 3 663  
274 14 Dtool_Hc9WjOxh 4 272 600 0 14 Dtool_Hc9WjOxh 2 4 this 3 662  10 num_subdiv 1 594  
275 14 Dtool_Hc9W9Cxy 6 273 594 0 14 Dtool_Hc9W9Cxy 1 4 this 3 663  
276 14 Dtool_Hc9WDjUu 4 274 600 0 14 Dtool_Hc9WDjUu 2 4 this 3 662  10 num_slices 1 594  
277 14 Dtool_Hc9WMuU_ 6 275 594 0 14 Dtool_Hc9WMuU_ 1 4 this 3 663  
278 14 Dtool_Hc9WF_Y0 4 276 600 0 14 Dtool_Hc9WF_Y0 2 4 this 3 662  9 thickness 1 598  
279 14 Dtool_Hc9WbcPu 6 277 598 0 14 Dtool_Hc9WbcPu 1 4 this 3 663  
280 14 Dtool_Hc9WMilH 4 278 600 0 14 Dtool_Hc9WMilH 2 4 this 3 662  6 matrix 1 654  
281 14 Dtool_Hc9WRoo1 4 279 600 0 14 Dtool_Hc9WRoo1 1 4 this 3 662  
282 14 Dtool_Hc9W9ssg 6 280 597 0 14 Dtool_Hc9W9ssg 1 4 this 3 663  
283 14 Dtool_Hc9WYvf4 6 281 654 0 14 Dtool_Hc9WYvf4 1 4 this 3 663  
284 14 Dtool_Hc9W4xWg 4 282 600 0 14 Dtool_Hc9W4xWg 2 4 this 3 662  6 rel_to 1 650  
285 14 Dtool_Hc9WXsAM 7 283 611 0 14 Dtool_Hc9WXsAM 0 
286 14 Dtool_Hc9WHNcz 7 286 668 571 14 Dtool_Hc9WHNcz 1 4 name 1 627  
287 14 Dtool_Hc9W0cvy 4 287 600 0 14 Dtool_Hc9W0cvy 2 4 this 3 668  7 surface 1 659  
288 14 Dtool_Hc9W18wP 7 288 659 503 14 Dtool_Hc9W18wP 1 4 this 3 669  
289 14 Dtool_Hc9WYR_Z 4 289 600 0 14 Dtool_Hc9WYR_Z 2 4 this 3 668  4 flag 1 597  
290 14 Dtool_Hc9WE_yX 6 290 597 0 14 Dtool_Hc9WE_yX 1 4 this 3 669  
291 14 Dtool_Hc9WATi0 4 291 600 0 14 Dtool_Hc9WATi0 2 4 this 3 668  12 num_u_subdiv 1 594  
292 14 Dtool_Hc9Wor5e 6 292 594 0 14 Dtool_Hc9Wor5e 1 4 this 3 669  
293 14 Dtool_Hc9W65jU 4 293 600 0 14 Dtool_Hc9W65jU 2 4 this 3 668  12 num_v_subdiv 1 594  
294 14 Dtool_Hc9WkQ7_ 6 294 594 0 14 Dtool_Hc9WkQ7_ 1 4 this 3 669  
295 14 Dtool_Hc9WZQ8j 4 295 600 0 14 Dtool_Hc9WZQ8j 2 4 this 3 668  6 rel_to 1 650  
296 14 Dtool_Hc9Wv2IZ 7 296 611 0 14 Dtool_Hc9Wv2IZ 0 
100
572 15 ParametricCurve 75777 15 ParametricCurve 15 ParametricCurve 0 0 0 0 0 0 19 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 0 1 0 573 0 0 0 0 370
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurve
// Description : A virtual base class for parametric curves.
//               This encapsulates all curves in 3-d space defined
//               for a single parameter t in the range [0,get_max_t()].
////////////////////////////////////////////////////////////////////

573 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

574 13 CubicCurveseg 75777 13 CubicCurveseg 13 CubicCurveseg 0 0 0 0 0 0 1 316 0 1 0 572 0 0 0 0 1386
////////////////////////////////////////////////////////////////////
//       Class : CubicCurveseg
// Description : A CubicCurveseg is any curve that can be completely
//               described by four 4-valued basis vectors, one for
//               each dimension in three-space, and one for the
//               homogeneous coordinate.  This includes Beziers,
//               Hermites, and NURBS.
//
//               This class encapsulates a single curve segment of the
//               cubic curve.  Normally, when we think of Bezier and
//               Hermite curves, we think of a piecewise collection of
//               such segments.
//
//               Although this class includes methods such as
//               hermite_basis() and nurbs_basis(), to generate a
//               Hermite and NURBS curve segment, respectively, only
//               the final basis vectors are stored: the product of
//               the basis matrix of the corresponding curve type, and
//               its geometry vectors.  This is the minimum
//               information needed to evaluate the curve.  However,
//               the individual CV's that were used to compute these
//               basis vectors are not retained; this might be handled
//               in a subclass (for instance, HermiteCurve).
////////////////////////////////////////////////////////////////////

575 25 ParametricCurveCollection 26625 25 ParametricCurveCollection 25 ParametricCurveCollection 0 0 0 1 317 318 0 28 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 0 1 0 576 0 0 0 0 620
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurveCollection
// Description : This is a set of zero or more ParametricCurves, which
//               may or may not be related.  If they are related, the
//               set should contain no more than one XYZ curve, no
//               more than one HPR curve, and zero or more Timewarp
//               curves, which can then be evaluated as a unit to
//               return a single transformation matrix for a given
//               unit of time.
////////////////////////////////////////////////////////////////////

576 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

577 11 CurveFitter 26625 11 CurveFitter 11 CurveFitter 0 0 0 1 347 348 0 20 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : CurveFitter
// Description :
////////////////////////////////////////////////////////////////////

578 14 PiecewiseCurve 75777 14 PiecewiseCurve 14 PiecewiseCurve 0 0 0 1 369 0 0 1 370 0 1 0 572 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PiecewiseCurve
// Description : A PiecewiseCurve is a curve made up of several curve
//               segments, connected in a head-to-tail fashion.  The
//               length of each curve segment in parametric space is
//               definable.
////////////////////////////////////////////////////////////////////

579 12 HermiteCurve 75777 12 HermiteCurve 12 HermiteCurve 0 0 0 1 371 0 0 19 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 0 1 0 578 0 0 0 0 700
////////////////////////////////////////////////////////////////////
//       Class : HermiteCurve
// Description : A parametric curve defined by a sequence of control
//               vertices, each with an in and out tangent.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the hermite_basis()
//               method.  The HermiteCurve class itself keeps its own
//               list of the CV's that are used to define the curve
//               (since the CubicCurveseg class doesn't retain these).
////////////////////////////////////////////////////////////////////

580 19 NurbsCurveInterface 26625 19 NurbsCurveInterface 19 NurbsCurveInterface 0 0 0 0 391 0 18 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 0 0 0 0 454
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveInterface
// Description : This abstract class defines the interface only for a
//               Nurbs-style curve, with knots and coordinates in
//               homogeneous space.
//
//               The NurbsCurve class inherits both from this and from
//               ParametricCurve.
////////////////////////////////////////////////////////////////////

581 10 NurbsCurve 26625 10 NurbsCurve 10 NurbsCurve 0 0 0 1 414 415 0 1 416 0 2 3 578 410 411 3 580 412 413 0 0 1243
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurve
// Description : A Nonuniform Rational B-Spline.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the nurbs_basis()
//               method.  The list of CV's and knots is kept here,
//               within the NurbsCurve class.
//
//               This class is the original Panda-native
//               implementation of a NURBS curve.  It is typedeffed as
//               "NurbsCurve" and performs all NURBS curve functions
//               if we do not have the NURBS++ library available.
//
//               However, if we *do* have the NURBS++ library, another
//               class exists, the NurbsPPCurve, which is a wrapper
//               around that library and provides some additional
//               functionality.  In that case, the other class is
//               typedeffed to "NurbsCurve" instead of this one, and
//               performs most of the NURBS curve functions.  This
//               class then becomes vestigial.
////////////////////////////////////////////////////////////////////

582 21 ParametricCurveDrawer 75777 21 ParametricCurveDrawer 21 ParametricCurveDrawer 0 0 0 1 417 0 0 20 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 0 1 0 583 0 0 0 0 316
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurveDrawer
// Description : Draws a 3-d parametric curve in the scene by creating
//               a series of line segments to approximate the curve.
////////////////////////////////////////////////////////////////////

583 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

584 16 NurbsCurveDrawer 75777 16 NurbsCurveDrawer 16 NurbsCurveDrawer 0 0 0 1 438 0 0 13 439 440 441 442 443 444 445 446 447 448 449 450 451 0 1 0 582 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveDrawer
// Description : Draws a Nurbs curve, also drawing in the control
//               vertices and tangent vectors.
////////////////////////////////////////////////////////////////////

585 16 NurbsCurveResult 26625 16 NurbsCurveResult 16 NurbsCurveResult 0 0 0 0 452 0 12 453 454 455 456 457 458 459 460 461 462 463 464 0 1 0 576 0 0 0 0 748
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveResult
// Description : The result of a NurbsCurveEvaluator.  This object
//               represents a curve in a particular coordinate space.
//               It can return the point and/or tangent to the curve
//               at any point.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

586 19 NurbsCurveEvaluator 26625 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 1 465 466 0 18 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 0 1 0 576 0 0 0 0 808
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               curves.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

587 18 NurbsSurfaceResult 26625 18 NurbsSurfaceResult 18 NurbsSurfaceResult 0 0 0 0 485 0 16 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 0 1 0 576 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceResult
// Description : The result of a NurbsSurfaceEvaluator.  This object
//               represents a surface in a particular coordinate space.
//               It can return the point and/or normal to the surface
//               at any point.
////////////////////////////////////////////////////////////////////

588 21 NurbsSurfaceEvaluator 26625 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 1 502 503 0 26 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 0 1 0 576 0 0 0 0 472
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               surfaces.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
////////////////////////////////////////////////////////////////////

589 8 RopeNode 141313 8 RopeNode 8 RopeNode 0 0 0 1 530 559 0 28 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 0 1 0 573 0 0 0 3 590 591 592 702
////////////////////////////////////////////////////////////////////
//       Class : RopeNode
// Description : This class draws a visible representation of the
//               NURBS curve stored in its NurbsCurveEvaluator.  It
//               automatically recomputes the curve every frame.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

590 10 RenderMode 794624 20 RopeNode::RenderMode 20 RopeNode::RenderMode 589 0 0 0 0 0 0 0 0 4 9 RM_thread 19 RopeNode::RM_thread 0 7 RM_tape 17 RopeNode::RM_tape 1 12 RM_billboard 22 RopeNode::RM_billboard 2 7 RM_tube 17 RopeNode::RM_tube 3 0 0

591 6 UVMode 794624 16 RopeNode::UVMode 16 RopeNode::UVMode 589 0 0 0 0 0 0 0 0 4 7 UV_none 17 RopeNode::UV_none 0 13 UV_parametric 23 RopeNode::UV_parametric 1 11 UV_distance 21 RopeNode::UV_distance 2 12 UV_distance2 22 RopeNode::UV_distance2 3 0 0

592 10 NormalMode 794624 20 RopeNode::NormalMode 20 RopeNode::NormalMode 589 0 0 0 0 0 0 0 0 2 7 NM_none 17 RopeNode::NM_none 0 9 NM_vertex 19 RopeNode::NM_vertex 1 0 0

593 9 SheetNode 141313 9 SheetNode 9 SheetNode 0 0 0 1 560 571 0 10 561 562 563 564 565 566 567 568 569 570 0 1 0 573 0 0 0 0 736
////////////////////////////////////////////////////////////////////
//       Class : SheetNode
// Description : This class draws a visible representation of the
//               NURBS surface stored in its NurbsSurfaceEvaluator.  It
//               automatically recomputes the surface every frame.
//
//               This is not related to NurbsSurface, CubicSurfaceseg
//               or any of the ParametricSurface-derived objects in
//               this module.  It is a completely parallel
//               implementation of NURBS surfaces, and will probably
//               eventually replace the whole ParametricSurface class
//               hierarchy.
////////////////////////////////////////////////////////////////////

594 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

595 23 ParametricCurve const * 8576 23 ParametricCurve const * 23 ParametricCurve const * 0 0 596 0 0 0 0 0 0 0 0 0

596 21 ParametricCurve const 8832 21 ParametricCurve const 21 ParametricCurve const 0 0 572 0 0 0 0 0 0 0 0 0

597 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

598 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

599 17 ParametricCurve * 8576 17 ParametricCurve * 17 ParametricCurve * 0 0 572 0 0 0 0 0 0 0 0 0

600 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

601 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 602 0 0 0 0 0 0 0 0 0

602 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

603 10 Filename * 8576 10 Filename * 10 Filename * 0 0 604 0 0 0 0 0 0 0 0 0

604 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

605 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

606 9 ostream * 8576 9 ostream * 9 ostream * 0 0 607 0 0 0 0 0 0 0 0 0

607 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

608 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 609 0 0 0 0 0 0 0 0 0

609 14 Filename const 8832 14 Filename const 14 Filename const 0 0 604 0 0 0 0 0 0 0 0 0

610 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

611 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 610 0 0 0 0 0 0 0 0 0

612 27 ParametricCurveCollection * 8576 27 ParametricCurveCollection * 27 ParametricCurveCollection * 0 0 575 0 0 0 0 0 0 0 0 0

613 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 573 0 0 0 0 0 0 0 0 0

614 33 ParametricCurveCollection const * 8576 33 ParametricCurveCollection const * 33 ParametricCurveCollection const * 0 0 615 0 0 0 0 0 0 0 0 0

615 31 ParametricCurveCollection const 8832 31 ParametricCurveCollection const 31 ParametricCurveCollection const 0 0 575 0 0 0 0 0 0 0 0 0

616 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 617 0 0 0 0 0 0 0 0 0

617 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

618 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 619 0 0 0 0 0 0 0 0 0

619 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 602 0 0 0 0 0 0 0 0 0

620 13 CurveFitter * 8576 13 CurveFitter * 13 CurveFitter * 0 0 577 0 0 0 0 0 0 0 0 0

621 19 CurveFitter const * 8576 19 CurveFitter const * 19 CurveFitter const * 0 0 622 0 0 0 0 0 0 0 0 0

622 17 CurveFitter const 8832 17 CurveFitter const 17 CurveFitter const 0 0 577 0 0 0 0 0 0 0 0 0

623 16 PiecewiseCurve * 8576 16 PiecewiseCurve * 16 PiecewiseCurve * 0 0 578 0 0 0 0 0 0 0 0 0

624 14 HermiteCurve * 8576 14 HermiteCurve * 14 HermiteCurve * 0 0 579 0 0 0 0 0 0 0 0 0

625 20 HermiteCurve const * 8576 20 HermiteCurve const * 20 HermiteCurve const * 0 0 626 0 0 0 0 0 0 0 0 0

626 18 HermiteCurve const 8832 18 HermiteCurve const 18 HermiteCurve const 0 0 579 0 0 0 0 0 0 0 0 0

627 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

628 21 NurbsCurveInterface * 8576 21 NurbsCurveInterface * 21 NurbsCurveInterface * 0 0 580 0 0 0 0 0 0 0 0 0

629 27 NurbsCurveInterface const * 8576 27 NurbsCurveInterface const * 27 NurbsCurveInterface const * 0 0 630 0 0 0 0 0 0 0 0 0

630 25 NurbsCurveInterface const 8832 25 NurbsCurveInterface const 25 NurbsCurveInterface const 0 0 580 0 0 0 0 0 0 0 0 0

631 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 632 0 0 0 0 0 0 0 0 0

632 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 633 0 0 0 0 0 0 0 0 0

633 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

634 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 633 0 0 0 0 0 0 0 0 0

635 12 NurbsCurve * 8576 12 NurbsCurve * 12 NurbsCurve * 0 0 581 0 0 0 0 0 0 0 0 0

636 23 ParametricCurveDrawer * 8576 23 ParametricCurveDrawer * 23 ParametricCurveDrawer * 0 0 582 0 0 0 0 0 0 0 0 0

637 8 GeomNode 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

638 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 637 0 0 0 0 0 0 0 0 0

639 29 ParametricCurveDrawer const * 8576 29 ParametricCurveDrawer const * 29 ParametricCurveDrawer const * 0 0 640 0 0 0 0 0 0 0 0 0

640 27 ParametricCurveDrawer const 8832 27 ParametricCurveDrawer const 27 ParametricCurveDrawer const 0 0 582 0 0 0 0 0 0 0 0 0

641 18 NurbsCurveDrawer * 8576 18 NurbsCurveDrawer * 18 NurbsCurveDrawer * 0 0 584 0 0 0 0 0 0 0 0 0

642 24 NurbsCurveDrawer const * 8576 24 NurbsCurveDrawer const * 24 NurbsCurveDrawer const * 0 0 643 0 0 0 0 0 0 0 0 0

643 22 NurbsCurveDrawer const 8832 22 NurbsCurveDrawer const 22 NurbsCurveDrawer const 0 0 584 0 0 0 0 0 0 0 0 0

644 24 NurbsCurveResult const * 8576 24 NurbsCurveResult const * 24 NurbsCurveResult const * 0 0 645 0 0 0 0 0 0 0 0 0

645 22 NurbsCurveResult const 8832 22 NurbsCurveResult const 22 NurbsCurveResult const 0 0 585 0 0 0 0 0 0 0 0 0

646 18 NurbsCurveResult * 8576 18 NurbsCurveResult * 18 NurbsCurveResult * 0 0 585 0 0 0 0 0 0 0 0 0

647 21 NurbsCurveEvaluator * 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 586 0 0 0 0 0 0 0 0 0

648 27 NurbsCurveEvaluator const * 8576 27 NurbsCurveEvaluator const * 27 NurbsCurveEvaluator const * 0 0 649 0 0 0 0 0 0 0 0 0

649 25 NurbsCurveEvaluator const 8832 25 NurbsCurveEvaluator const 25 NurbsCurveEvaluator const 0 0 586 0 0 0 0 0 0 0 0 0

650 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 651 0 0 0 0 0 0 0 0 0

651 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 652 0 0 0 0 0 0 0 0 0

652 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

653 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 652 0 0 0 0 0 0 0 0 0

654 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 655 0 0 0 0 0 0 0 0 0

655 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 617 0 0 0 0 0 0 0 0 0

656 26 NurbsSurfaceResult const * 8576 26 NurbsSurfaceResult const * 26 NurbsSurfaceResult const * 0 0 657 0 0 0 0 0 0 0 0 0

657 24 NurbsSurfaceResult const 8832 24 NurbsSurfaceResult const 24 NurbsSurfaceResult const 0 0 587 0 0 0 0 0 0 0 0 0

658 20 NurbsSurfaceResult * 8576 20 NurbsSurfaceResult * 20 NurbsSurfaceResult * 0 0 587 0 0 0 0 0 0 0 0 0

659 23 NurbsSurfaceEvaluator * 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 588 0 0 0 0 0 0 0 0 0

660 29 NurbsSurfaceEvaluator const * 8576 29 NurbsSurfaceEvaluator const * 29 NurbsSurfaceEvaluator const * 0 0 661 0 0 0 0 0 0 0 0 0

661 27 NurbsSurfaceEvaluator const 8832 27 NurbsSurfaceEvaluator const 27 NurbsSurfaceEvaluator const 0 0 588 0 0 0 0 0 0 0 0 0

662 10 RopeNode * 8576 10 RopeNode * 10 RopeNode * 0 0 589 0 0 0 0 0 0 0 0 0

663 16 RopeNode const * 8576 16 RopeNode const * 16 RopeNode const * 0 0 664 0 0 0 0 0 0 0 0 0

664 14 RopeNode const 8832 14 RopeNode const 14 RopeNode const 0 0 589 0 0 0 0 0 0 0 0 0

665 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 666 0 0 0 0 0 0 0 0 0

666 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 667 0 0 0 0 0 0 0 0 0

667 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

668 11 SheetNode * 8576 11 SheetNode * 11 SheetNode * 0 0 593 0 0 0 0 0 0 0 0 0

669 17 SheetNode const * 8576 17 SheetNode const * 17 SheetNode const * 0 0 670 0 0 0 0 0 0 0 0 0

670 15 SheetNode const 8832 15 SheetNode const 15 SheetNode const 0 0 593 0 0 0 0 0 0 0 0 0

671 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

8
672 6 HC_CUT 5 1 594 0 1 1 
673 7 HC_FREE 5 2 594 0 1 2 
674 5 HC_G1 5 3 594 0 1 3 
675 9 HC_SMOOTH 5 4 594 0 1 4 
676 7 PCT_HPR 5 2 594 0 1 2 
677 8 PCT_NONE 5 0 594 0 1 0 
678 5 PCT_T 5 3 594 0 1 3 
679 7 PCT_XYZ 5 1 594 0 1 1 
0
