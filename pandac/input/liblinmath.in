1145553926
2 2
10 liblinmath 4 VZN3 5 panda 
867
1248 10 LVecBase2f 4 2115 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 3138
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase2f::LVecBase2f(void);

1249 10 operator = 4 2115 22 LVecBase2f::operator = 0 2 5 6 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);

1250 12 operator new 4 2115 24 LVecBase2f::operator new 0 1 7 0
57
inline void *LVecBase2f::operator new(unsigned int size);

1251 15 operator delete 4 2115 27 LVecBase2f::operator delete 0 0 0
51
inline void LVecBase2f::operator delete(void *ptr);

1252 4 zero 4 2115 16 LVecBase2f::zero 0 1 8 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1253 6 unit_x 4 2115 18 LVecBase2f::unit_x 0 1 9 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1254 6 unit_y 4 2115 18 LVecBase2f::unit_y 0 1 10 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1255 11 ~LVecBase2f 4 2115 23 LVecBase2f::~LVecBase2f 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1256 11 operator [] 4 2115 23 LVecBase2f::operator [] 0 2 11 12 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline float LVecBase2f::operator [](int i) const;

1257 6 is_nan 4 2115 18 LVecBase2f::is_nan 0 1 13 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1258 8 get_cell 4 2115 20 LVecBase2f::get_cell 0 1 14 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1259 5 get_x 4 2115 17 LVecBase2f::get_x 0 1 15 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1260 5 get_y 4 2115 17 LVecBase2f::get_y 0 1 16 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1261 8 set_cell 4 2115 20 LVecBase2f::set_cell 0 1 17 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1262 5 set_x 4 2115 17 LVecBase2f::set_x 0 1 18 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1263 5 set_y 4 2115 17 LVecBase2f::set_y 0 1 19 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1264 11 add_to_cell 4 2115 23 LVecBase2f::add_to_cell 0 1 20 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1265 5 add_x 4 2115 17 LVecBase2f::add_x 0 1 21 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1266 5 add_y 4 2115 17 LVecBase2f::add_y 0 1 22 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1267 8 get_data 4 2115 20 LVecBase2f::get_data 0 1 23 786
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1268 18 get_num_components 4 2115 30 LVecBase2f::get_num_components 0 1 24 554
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1269 4 fill 4 2115 16 LVecBase2f::fill 0 1 25 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1270 3 set 4 2115 15 LVecBase2f::set 0 1 26 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1271 3 dot 4 2115 15 LVecBase2f::dot 0 1 27 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1272 10 operator < 4 2115 22 LVecBase2f::operator < 0 1 28 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1273 11 operator == 4 2115 23 LVecBase2f::operator == 0 1 29 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1274 11 operator != 4 2115 23 LVecBase2f::operator != 0 1 30 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1275 10 compare_to 4 2115 22 LVecBase2f::compare_to 0 2 31 32 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;

1276 8 get_hash 4 2115 20 LVecBase2f::get_hash 0 2 33 34 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase2f::get_hash(void) const;

1277 8 add_hash 4 2115 20 LVecBase2f::add_hash 0 2 35 36 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;

1278 10 operator - 68 2115 22 LVecBase2f::operator - 0 1 37 0
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1279 10 operator + 4 2115 22 LVecBase2f::operator + 0 1 38 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1280 10 operator - 4 2115 22 LVecBase2f::operator - 0 1 39 878
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1281 10 operator * 4 2115 22 LVecBase2f::operator * 0 1 40 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1282 10 operator / 4 2115 22 LVecBase2f::operator / 0 1 41 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1283 11 operator += 4 2115 23 LVecBase2f::operator += 0 1 42 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1284 11 operator -= 4 2115 23 LVecBase2f::operator -= 0 1 43 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1285 11 operator *= 4 2115 23 LVecBase2f::operator *= 0 1 44 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator *=(float scalar);

1286 11 operator /= 4 2115 23 LVecBase2f::operator /= 0 1 45 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator /=(float scalar);

1287 4 fmax 4 2115 16 LVecBase2f::fmax 0 1 46 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other);

1288 4 fmin 4 2115 16 LVecBase2f::fmin 0 1 47 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other);

1289 12 almost_equal 4 2115 24 LVecBase2f::almost_equal 0 2 48 49 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
85
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;

1290 6 output 4 2115 18 LVecBase2f::output 0 1 50 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1291 11 python_repr 4 2115 23 LVecBase2f::python_repr 0 1 51 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1292 14 get_class_type 4 2115 26 LVecBase2f::get_class_type 0 1 52 0
51
static TypeHandle LVecBase2f::get_class_type(void);

1293 10 LVecBase2d 4 2116 22 LVecBase2d::LVecBase2d 0 4 53 54 55 56 1568
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase2d::LVecBase2d(void);

1294 10 operator = 4 2116 22 LVecBase2d::operator = 0 2 57 58 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);

1295 12 operator new 4 2116 24 LVecBase2d::operator new 0 1 59 0
57
inline void *LVecBase2d::operator new(unsigned int size);

1296 15 operator delete 4 2116 27 LVecBase2d::operator delete 0 0 0
51
inline void LVecBase2d::operator delete(void *ptr);

1297 4 zero 4 2116 16 LVecBase2d::zero 0 1 60 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

1298 6 unit_x 4 2116 18 LVecBase2d::unit_x 0 1 61 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

1299 6 unit_y 4 2116 18 LVecBase2d::unit_y 0 1 62 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

1300 11 ~LVecBase2d 4 2116 23 LVecBase2d::~LVecBase2d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

1301 11 operator [] 4 2116 23 LVecBase2d::operator [] 0 2 63 64 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double LVecBase2d::operator [](int i) const;

1302 6 is_nan 4 2116 18 LVecBase2d::is_nan 0 1 65 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

1303 8 get_cell 4 2116 20 LVecBase2d::get_cell 0 1 66 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

1304 5 get_x 4 2116 17 LVecBase2d::get_x 0 1 67 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

1305 5 get_y 4 2116 17 LVecBase2d::get_y 0 1 68 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

1306 8 set_cell 4 2116 20 LVecBase2d::set_cell 0 1 69 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

1307 5 set_x 4 2116 17 LVecBase2d::set_x 0 1 70 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

1308 5 set_y 4 2116 17 LVecBase2d::set_y 0 1 71 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

1309 11 add_to_cell 4 2116 23 LVecBase2d::add_to_cell 0 1 72 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

1310 5 add_x 4 2116 17 LVecBase2d::add_x 0 1 73 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

1311 5 add_y 4 2116 17 LVecBase2d::add_y 0 1 74 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

1312 8 get_data 4 2116 20 LVecBase2d::get_data 0 1 75 392
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

1313 18 get_num_components 4 2116 30 LVecBase2d::get_num_components 0 1 76 276
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

1314 4 fill 4 2116 16 LVecBase2d::fill 0 1 77 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

1315 3 set 4 2116 15 LVecBase2d::set 0 1 78 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

1316 3 dot 4 2116 15 LVecBase2d::dot 0 1 79 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

1317 10 operator < 4 2116 22 LVecBase2d::operator < 0 1 80 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

1318 11 operator == 4 2116 23 LVecBase2d::operator == 0 1 81 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

1319 11 operator != 4 2116 23 LVecBase2d::operator != 0 1 82 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

1320 10 compare_to 4 2116 22 LVecBase2d::compare_to 0 2 83 84 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;

1321 8 get_hash 4 2116 20 LVecBase2d::get_hash 0 2 85 86 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase2d::get_hash(void) const;

1322 8 add_hash 4 2116 20 LVecBase2d::add_hash 0 2 87 88 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;

1323 10 operator - 68 2116 22 LVecBase2d::operator - 0 1 89 0
53
inline LVecBase2d LVecBase2d::operator -(void) const;

1324 10 operator + 4 2116 22 LVecBase2d::operator + 0 1 90 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

1325 10 operator - 4 2116 22 LVecBase2d::operator - 0 1 91 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

1326 10 operator * 4 2116 22 LVecBase2d::operator * 0 1 92 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

1327 10 operator / 4 2116 22 LVecBase2d::operator / 0 1 93 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

1328 11 operator += 4 2116 23 LVecBase2d::operator += 0 1 94 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

1329 11 operator -= 4 2116 23 LVecBase2d::operator -= 0 1 95 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

1330 11 operator *= 4 2116 23 LVecBase2d::operator *= 0 1 96 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator *=(double scalar);

1331 11 operator /= 4 2116 23 LVecBase2d::operator /= 0 1 97 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator /=(double scalar);

1332 4 fmax 4 2116 16 LVecBase2d::fmax 0 1 98 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other);

1333 4 fmin 4 2116 16 LVecBase2d::fmin 0 1 99 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other);

1334 12 almost_equal 4 2116 24 LVecBase2d::almost_equal 0 2 100 101 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
86
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;

1335 6 output 4 2116 18 LVecBase2d::output 0 1 102 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

1336 11 python_repr 4 2116 23 LVecBase2d::python_repr 0 1 103 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1337 14 get_class_type 4 2116 26 LVecBase2d::get_class_type 0 1 104 0
51
static TypeHandle LVecBase2d::get_class_type(void);

1338 9 LVector2f 4 2117 20 LVector2f::LVector2f 0 4 105 106 107 108 3128
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector2f::LVector2f(void);

1339 10 operator = 4 2117 21 LVector2f::operator = 0 2 109 110 914
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);

1340 4 zero 4 2117 15 LVector2f::zero 0 1 111 518
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

1341 6 unit_x 4 2117 17 LVector2f::unit_x 0 1 112 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

1342 6 unit_y 4 2117 17 LVector2f::unit_y 0 1 113 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

1343 10 operator - 68 2117 21 LVector2f::operator - 0 1 114 0
51
inline LVector2f LVector2f::operator -(void) const;

1344 10 operator + 4 2117 21 LVector2f::operator + 0 2 115 116 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;

1345 10 operator - 4 2117 21 LVector2f::operator - 0 2 117 118 1322
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;

1346 6 length 4 2117 17 LVector2f::length 0 1 119 584
////////////////////////////////////////////////////////////////////
//     Function: LVector2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
43
inline float LVector2f::length(void) const;

1347 14 length_squared 4 2117 25 LVector2f::length_squared 0 1 120 594
////////////////////////////////////////////////////////////////////
//     Function: LVector2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
51
inline float LVector2f::length_squared(void) const;

1348 9 normalize 4 2117 20 LVector2f::normalize 0 1 121 728
////////////////////////////////////////////////////////////////////
//     Function: LVector2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
39
inline bool LVector2f::normalize(void);

1349 10 operator * 4 2117 21 LVector2f::operator * 0 1 122 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator *(float scalar) const;

1350 10 operator / 4 2117 21 LVector2f::operator / 0 1 123 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator /(float scalar) const;

1351 11 python_repr 4 2117 22 LVector2f::python_repr 0 1 124 442
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1352 14 get_class_type 4 2117 25 LVector2f::get_class_type 0 1 125 0
50
static TypeHandle LVector2f::get_class_type(void);

1353 10 ~LVector2f 4 2117 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

1354 9 LVector2d 4 2118 20 LVector2d::LVector2d 0 4 126 127 128 129 1563
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector2d::LVector2d(void);

1355 10 operator = 4 2118 21 LVector2d::operator = 0 2 130 131 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);

1356 4 zero 4 2118 15 LVector2d::zero 0 1 132 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

1357 6 unit_x 4 2118 17 LVector2d::unit_x 0 1 133 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

1358 6 unit_y 4 2118 17 LVector2d::unit_y 0 1 134 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

1359 10 operator - 68 2118 21 LVector2d::operator - 0 1 135 0
51
inline LVector2d LVector2d::operator -(void) const;

1360 10 operator + 4 2118 21 LVector2d::operator + 0 2 136 137 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;

1361 10 operator - 4 2118 21 LVector2d::operator - 0 2 138 139 660
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;

1362 6 length 4 2118 17 LVector2d::length 0 1 140 291
////////////////////////////////////////////////////////////////////
//     Function: LVector2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline double LVector2d::length(void) const;

1363 14 length_squared 4 2118 25 LVector2d::length_squared 0 1 141 296
////////////////////////////////////////////////////////////////////
//     Function: LVector2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline double LVector2d::length_squared(void) const;

1364 9 normalize 4 2118 20 LVector2d::normalize 0 1 142 363
////////////////////////////////////////////////////////////////////
//     Function: LVector2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
39
inline bool LVector2d::normalize(void);

1365 10 operator * 4 2118 21 LVector2d::operator * 0 1 143 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator *(double scalar) const;

1366 10 operator / 4 2118 21 LVector2d::operator / 0 1 144 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator /(double scalar) const;

1367 11 python_repr 4 2118 22 LVector2d::python_repr 0 1 145 220
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1368 14 get_class_type 4 2118 25 LVector2d::get_class_type 0 1 146 0
50
static TypeHandle LVector2d::get_class_type(void);

1369 10 ~LVector2d 4 2118 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

1370 8 LPoint2f 4 2119 18 LPoint2f::LPoint2f 0 4 147 148 149 150 3118
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint2f::LPoint2f(void);

1371 10 operator = 4 2119 20 LPoint2f::operator = 0 2 151 152 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);

1372 4 zero 4 2119 14 LPoint2f::zero 0 1 153 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

1373 6 unit_x 4 2119 16 LPoint2f::unit_x 0 1 154 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

1374 6 unit_y 4 2119 16 LPoint2f::unit_y 0 1 155 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

1375 10 operator - 68 2119 20 LPoint2f::operator - 0 1 156 0
49
inline LPoint2f LPoint2f::operator -(void) const;

1376 10 operator + 4 2119 20 LPoint2f::operator + 0 2 157 158 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;

1377 10 operator - 4 2119 20 LPoint2f::operator - 0 3 159 160 161 1752
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;

1378 10 operator * 4 2119 20 LPoint2f::operator * 0 1 162 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

1379 10 operator / 4 2119 20 LPoint2f::operator / 0 1 163 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

1380 11 python_repr 4 2119 21 LPoint2f::python_repr 0 1 164 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1381 14 get_class_type 4 2119 24 LPoint2f::get_class_type 0 1 165 0
49
static TypeHandle LPoint2f::get_class_type(void);

1382 9 ~LPoint2f 4 2119 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

1383 8 LPoint2d 4 2120 18 LPoint2d::LPoint2d 0 4 166 167 168 169 1558
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint2d::LPoint2d(void);

1384 10 operator = 4 2120 20 LPoint2d::operator = 0 2 170 171 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);

1385 4 zero 4 2120 14 LPoint2d::zero 0 1 172 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

1386 6 unit_x 4 2120 16 LPoint2d::unit_x 0 1 173 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

1387 6 unit_y 4 2120 16 LPoint2d::unit_y 0 1 174 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

1388 10 operator - 68 2120 20 LPoint2d::operator - 0 1 175 0
49
inline LPoint2d LPoint2d::operator -(void) const;

1389 10 operator + 4 2120 20 LPoint2d::operator + 0 2 176 177 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;

1390 10 operator - 4 2120 20 LPoint2d::operator - 0 3 178 179 180 875
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;

1391 10 operator * 4 2120 20 LPoint2d::operator * 0 1 181 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

1392 10 operator / 4 2120 20 LPoint2d::operator / 0 1 182 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

1393 11 python_repr 4 2120 21 LPoint2d::python_repr 0 1 183 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1394 14 get_class_type 4 2120 24 LPoint2d::get_class_type 0 1 184 0
49
static TypeHandle LPoint2d::get_class_type(void);

1395 9 ~LPoint2d 4 2120 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

1396 12 ~MathNumbers 4 2121 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1397 9 deg_2_rad 1 0 9 deg_2_rad 0 2 1141 1142 0
34
inline double deg_2_rad(double f);

1398 9 rad_2_deg 1 0 9 rad_2_deg 0 2 1143 1144 0
34
inline double rad_2_deg(double f);

1399 10 LVecBase3f 4 2122 22 LVecBase3f::LVecBase3f 0 4 185 186 187 188 3138
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase3f::LVecBase3f(void);

1400 10 operator = 4 2122 22 LVecBase3f::operator = 0 2 189 190 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);

1401 12 operator new 4 2122 24 LVecBase3f::operator new 0 1 191 0
57
inline void *LVecBase3f::operator new(unsigned int size);

1402 15 operator delete 4 2122 27 LVecBase3f::operator delete 0 0 0
51
inline void LVecBase3f::operator delete(void *ptr);

1403 4 zero 4 2122 16 LVecBase3f::zero 0 1 192 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

1404 6 unit_x 4 2122 18 LVecBase3f::unit_x 0 1 193 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

1405 6 unit_y 4 2122 18 LVecBase3f::unit_y 0 1 194 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

1406 6 unit_z 4 2122 18 LVecBase3f::unit_z 0 1 195 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

1407 11 ~LVecBase3f 4 2122 23 LVecBase3f::~LVecBase3f 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

1408 11 operator [] 4 2122 23 LVecBase3f::operator [] 0 2 196 197 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline float LVecBase3f::operator [](int i) const;

1409 6 is_nan 4 2122 18 LVecBase3f::is_nan 0 1 198 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

1410 8 get_cell 4 2122 20 LVecBase3f::get_cell 0 1 199 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

1411 5 get_x 4 2122 17 LVecBase3f::get_x 0 1 200 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

1412 5 get_y 4 2122 17 LVecBase3f::get_y 0 1 201 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

1413 5 get_z 4 2122 17 LVecBase3f::get_z 0 1 202 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

1414 8 set_cell 4 2122 20 LVecBase3f::set_cell 0 1 203 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

1415 5 set_x 4 2122 17 LVecBase3f::set_x 0 1 204 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

1416 5 set_y 4 2122 17 LVecBase3f::set_y 0 1 205 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

1417 5 set_z 4 2122 17 LVecBase3f::set_z 0 1 206 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

1418 11 add_to_cell 4 2122 23 LVecBase3f::add_to_cell 0 1 207 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

1419 5 add_x 4 2122 17 LVecBase3f::add_x 0 1 208 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

1420 5 add_y 4 2122 17 LVecBase3f::add_y 0 1 209 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

1421 5 add_z 4 2122 17 LVecBase3f::add_z 0 1 210 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

1422 8 get_data 4 2122 20 LVecBase3f::get_data 0 1 211 800
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

1423 18 get_num_components 4 2122 30 LVecBase3f::get_num_components 0 1 212 558
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

1424 4 fill 4 2122 16 LVecBase3f::fill 0 1 213 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

1425 3 set 4 2122 15 LVecBase3f::set 0 1 214 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

1426 6 length 4 2122 18 LVecBase3f::length 0 1 215 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

1427 14 length_squared 4 2122 26 LVecBase3f::length_squared 0 1 216 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

1428 9 normalize 4 2122 21 LVecBase3f::normalize 0 1 217 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

1429 3 dot 4 2122 15 LVecBase3f::dot 0 1 218 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

1430 5 cross 4 2122 17 LVecBase3f::cross 0 1 219 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

1431 10 operator < 4 2122 22 LVecBase3f::operator < 0 1 220 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

1432 11 operator == 4 2122 23 LVecBase3f::operator == 0 1 221 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

1433 11 operator != 4 2122 23 LVecBase3f::operator != 0 1 222 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

1434 20 get_standardized_hpr 4 2122 32 LVecBase3f::get_standardized_hpr 0 1 223 2060
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

1435 10 compare_to 4 2122 22 LVecBase3f::compare_to 0 2 224 225 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;

1436 8 get_hash 4 2122 20 LVecBase3f::get_hash 0 2 226 227 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase3f::get_hash(void) const;

1437 8 add_hash 4 2122 20 LVecBase3f::add_hash 0 2 228 229 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;

1438 10 operator - 68 2122 22 LVecBase3f::operator - 0 1 230 0
53
inline LVecBase3f LVecBase3f::operator -(void) const;

1439 10 operator + 4 2122 22 LVecBase3f::operator + 0 1 231 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

1440 10 operator - 4 2122 22 LVecBase3f::operator - 0 1 232 890
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

1441 10 operator * 4 2122 22 LVecBase3f::operator * 0 1 233 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

1442 10 operator / 4 2122 22 LVecBase3f::operator / 0 1 234 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

1443 11 operator += 4 2122 23 LVecBase3f::operator += 0 1 235 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

1444 11 operator -= 4 2122 23 LVecBase3f::operator -= 0 1 236 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

1445 11 operator *= 4 2122 23 LVecBase3f::operator *= 0 1 237 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator *=(float scalar);

1446 11 operator /= 4 2122 23 LVecBase3f::operator /= 0 1 238 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator /=(float scalar);

1447 4 fmax 4 2122 16 LVecBase3f::fmax 0 1 239 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other);

1448 4 fmin 4 2122 16 LVecBase3f::fmin 0 1 240 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other);

1449 10 cross_into 4 2122 22 LVecBase3f::cross_into 0 1 241 482
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

1450 12 almost_equal 4 2122 24 LVecBase3f::almost_equal 0 2 242 243 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
85
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;

1451 6 output 4 2122 18 LVecBase3f::output 0 1 244 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

1452 11 python_repr 4 2122 23 LVecBase3f::python_repr 0 1 245 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1453 14 get_class_type 4 2122 26 LVecBase3f::get_class_type 0 1 246 0
51
static TypeHandle LVecBase3f::get_class_type(void);

1454 10 LVecBase3d 4 2123 22 LVecBase3d::LVecBase3d 0 4 247 248 249 250 1568
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase3d::LVecBase3d(void);

1455 10 operator = 4 2123 22 LVecBase3d::operator = 0 2 251 252 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);

1456 12 operator new 4 2123 24 LVecBase3d::operator new 0 1 253 0
57
inline void *LVecBase3d::operator new(unsigned int size);

1457 15 operator delete 4 2123 27 LVecBase3d::operator delete 0 0 0
51
inline void LVecBase3d::operator delete(void *ptr);

1458 4 zero 4 2123 16 LVecBase3d::zero 0 1 254 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

1459 6 unit_x 4 2123 18 LVecBase3d::unit_x 0 1 255 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

1460 6 unit_y 4 2123 18 LVecBase3d::unit_y 0 1 256 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

1461 6 unit_z 4 2123 18 LVecBase3d::unit_z 0 1 257 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

1462 11 ~LVecBase3d 4 2123 23 LVecBase3d::~LVecBase3d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

1463 11 operator [] 4 2123 23 LVecBase3d::operator [] 0 2 258 259 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double LVecBase3d::operator [](int i) const;

1464 6 is_nan 4 2123 18 LVecBase3d::is_nan 0 1 260 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

1465 8 get_cell 4 2123 20 LVecBase3d::get_cell 0 1 261 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

1466 5 get_x 4 2123 17 LVecBase3d::get_x 0 1 262 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

1467 5 get_y 4 2123 17 LVecBase3d::get_y 0 1 263 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

1468 5 get_z 4 2123 17 LVecBase3d::get_z 0 1 264 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

1469 8 set_cell 4 2123 20 LVecBase3d::set_cell 0 1 265 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

1470 5 set_x 4 2123 17 LVecBase3d::set_x 0 1 266 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

1471 5 set_y 4 2123 17 LVecBase3d::set_y 0 1 267 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

1472 5 set_z 4 2123 17 LVecBase3d::set_z 0 1 268 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

1473 11 add_to_cell 4 2123 23 LVecBase3d::add_to_cell 0 1 269 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

1474 5 add_x 4 2123 17 LVecBase3d::add_x 0 1 270 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

1475 5 add_y 4 2123 17 LVecBase3d::add_y 0 1 271 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

1476 5 add_z 4 2123 17 LVecBase3d::add_z 0 1 272 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

1477 8 get_data 4 2123 20 LVecBase3d::get_data 0 1 273 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

1478 18 get_num_components 4 2123 30 LVecBase3d::get_num_components 0 1 274 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

1479 4 fill 4 2123 16 LVecBase3d::fill 0 1 275 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

1480 3 set 4 2123 15 LVecBase3d::set 0 1 276 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

1481 6 length 4 2123 18 LVecBase3d::length 0 1 277 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

1482 14 length_squared 4 2123 26 LVecBase3d::length_squared 0 1 278 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

1483 9 normalize 4 2123 21 LVecBase3d::normalize 0 1 279 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

1484 3 dot 4 2123 15 LVecBase3d::dot 0 1 280 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

1485 5 cross 4 2123 17 LVecBase3d::cross 0 1 281 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

1486 10 operator < 4 2123 22 LVecBase3d::operator < 0 1 282 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

1487 11 operator == 4 2123 23 LVecBase3d::operator == 0 1 283 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

1488 11 operator != 4 2123 23 LVecBase3d::operator != 0 1 284 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

1489 20 get_standardized_hpr 4 2123 32 LVecBase3d::get_standardized_hpr 0 1 285 1029
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

1490 10 compare_to 4 2123 22 LVecBase3d::compare_to 0 2 286 287 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;

1491 8 get_hash 4 2123 20 LVecBase3d::get_hash 0 2 288 289 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase3d::get_hash(void) const;

1492 8 add_hash 4 2123 20 LVecBase3d::add_hash 0 2 290 291 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;

1493 10 operator - 68 2123 22 LVecBase3d::operator - 0 1 292 0
53
inline LVecBase3d LVecBase3d::operator -(void) const;

1494 10 operator + 4 2123 22 LVecBase3d::operator + 0 1 293 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

1495 10 operator - 4 2123 22 LVecBase3d::operator - 0 1 294 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

1496 10 operator * 4 2123 22 LVecBase3d::operator * 0 1 295 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

1497 10 operator / 4 2123 22 LVecBase3d::operator / 0 1 296 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

1498 11 operator += 4 2123 23 LVecBase3d::operator += 0 1 297 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

1499 11 operator -= 4 2123 23 LVecBase3d::operator -= 0 1 298 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

1500 11 operator *= 4 2123 23 LVecBase3d::operator *= 0 1 299 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator *=(double scalar);

1501 11 operator /= 4 2123 23 LVecBase3d::operator /= 0 1 300 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator /=(double scalar);

1502 4 fmax 4 2123 16 LVecBase3d::fmax 0 1 301 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other);

1503 4 fmin 4 2123 16 LVecBase3d::fmin 0 1 302 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other);

1504 10 cross_into 4 2123 22 LVecBase3d::cross_into 0 1 303 240
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

1505 12 almost_equal 4 2123 24 LVecBase3d::almost_equal 0 2 304 305 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
86
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;

1506 6 output 4 2123 18 LVecBase3d::output 0 1 306 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

1507 11 python_repr 4 2123 23 LVecBase3d::python_repr 0 1 307 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1508 14 get_class_type 4 2123 26 LVecBase3d::get_class_type 0 1 308 0
51
static TypeHandle LVecBase3d::get_class_type(void);

1509 29 get_default_coordinate_system 1 0 29 get_default_coordinate_system 0 1 1145 0
53
CoordinateSystem get_default_coordinate_system(void);

1510 9 LVector3f 4 2125 20 LVector3f::LVector3f 0 4 309 310 311 312 3152
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector3f::LVector3f(void);

1511 10 operator = 4 2125 21 LVector3f::operator = 0 2 313 314 926
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);

1512 4 zero 4 2125 15 LVector3f::zero 0 1 315 524
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

1513 6 unit_x 4 2125 17 LVector3f::unit_x 0 1 316 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

1514 6 unit_y 4 2125 17 LVector3f::unit_y 0 1 317 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

1515 6 unit_z 4 2125 17 LVector3f::unit_z 0 1 318 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

1516 10 operator - 68 2125 21 LVector3f::operator - 0 1 319 0
51
inline LVector3f LVector3f::operator -(void) const;

1517 10 operator + 4 2125 21 LVector3f::operator + 0 2 320 321 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;

1518 10 operator - 4 2125 21 LVector3f::operator - 0 2 322 323 1340
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;

1519 5 cross 4 2125 16 LVector3f::cross 0 1 324 430
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

1520 9 angle_rad 4 2125 20 LVector3f::angle_rad 0 1 325 628
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in radians.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in radians.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

1521 9 angle_deg 4 2125 20 LVector3f::angle_deg 0 1 326 628
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

1522 10 operator * 4 2125 21 LVector3f::operator * 0 1 327 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator *(float scalar) const;

1523 10 operator / 4 2125 21 LVector3f::operator / 0 1 328 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator /(float scalar) const;

1524 2 up 4 2125 13 LVector3f::up 0 2 329 330 634
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = (CS_default));

1525 5 right 4 2125 16 LVector3f::right 0 2 331 332 596
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = (CS_default));

1526 7 forward 4 2125 18 LVector3f::forward 0 2 333 334 604
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (CS_default));

1527 4 down 4 2125 15 LVector3f::down 0 2 335 336 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = (CS_default));

1528 4 left 4 2125 15 LVector3f::left 0 2 337 338 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = (CS_default));

1529 4 back 4 2125 15 LVector3f::back 0 2 339 340 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = (CS_default));

1530 3 rfu 4 2125 14 LVector3f::rfu 0 2 341 342 980
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1531 11 python_repr 4 2125 22 LVector3f::python_repr 0 1 343 442
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1532 14 get_class_type 4 2125 25 LVector3f::get_class_type 0 1 344 0
50
static TypeHandle LVector3f::get_class_type(void);

1533 10 ~LVector3f 4 2125 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

1534 9 LVector3d 4 2126 20 LVector3d::LVector3d 0 4 345 346 347 348 1575
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector3d::LVector3d(void);

1535 10 operator = 4 2126 21 LVector3d::operator = 0 2 349 350 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);

1536 4 zero 4 2126 15 LVector3d::zero 0 1 351 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

1537 6 unit_x 4 2126 17 LVector3d::unit_x 0 1 352 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

1538 6 unit_y 4 2126 17 LVector3d::unit_y 0 1 353 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

1539 6 unit_z 4 2126 17 LVector3d::unit_z 0 1 354 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

1540 10 operator - 68 2126 21 LVector3d::operator - 0 1 355 0
51
inline LVector3d LVector3d::operator -(void) const;

1541 10 operator + 4 2126 21 LVector3d::operator + 0 2 356 357 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;

1542 10 operator - 4 2126 21 LVector3d::operator - 0 2 358 359 669
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;

1543 5 cross 4 2126 16 LVector3d::cross 0 1 360 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

1544 9 angle_rad 4 2126 20 LVector3d::angle_rad 0 1 361 313
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in radians.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

1545 9 angle_deg 4 2126 20 LVector3d::angle_deg 0 1 362 313
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

1546 10 operator * 4 2126 21 LVector3d::operator * 0 1 363 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator *(double scalar) const;

1547 10 operator / 4 2126 21 LVector3d::operator / 0 1 364 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator /(double scalar) const;

1548 2 up 4 2126 13 LVector3d::up 0 2 365 366 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = (CS_default));

1549 5 right 4 2126 16 LVector3d::right 0 2 367 368 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = (CS_default));

1550 7 forward 4 2126 18 LVector3d::forward 0 2 369 370 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (CS_default));

1551 4 down 4 2126 15 LVector3d::down 0 2 371 372 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = (CS_default));

1552 4 left 4 2126 15 LVector3d::left 0 2 373 374 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = (CS_default));

1553 4 back 4 2126 15 LVector3d::back 0 2 375 376 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = (CS_default));

1554 3 rfu 4 2126 14 LVector3d::rfu 0 2 377 378 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1555 11 python_repr 4 2126 22 LVector3d::python_repr 0 1 379 220
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1556 14 get_class_type 4 2126 25 LVector3d::get_class_type 0 1 380 0
50
static TypeHandle LVector3d::get_class_type(void);

1557 10 ~LVector3d 4 2126 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

1558 8 LPoint3f 4 2127 18 LPoint3f::LPoint3f 0 4 381 382 383 384 3118
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint3f::LPoint3f(void);

1559 10 operator = 4 2127 20 LPoint3f::operator = 0 2 385 386 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);

1560 4 zero 4 2127 14 LPoint3f::zero 0 1 387 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

1561 6 unit_x 4 2127 16 LPoint3f::unit_x 0 1 388 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

1562 6 unit_y 4 2127 16 LPoint3f::unit_y 0 1 389 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

1563 6 unit_z 4 2127 16 LPoint3f::unit_z 0 1 390 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

1564 10 operator - 68 2127 20 LPoint3f::operator - 0 1 391 0
49
inline LPoint3f LPoint3f::operator -(void) const;

1565 10 operator + 4 2127 20 LPoint3f::operator + 0 2 392 393 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;

1566 10 operator - 4 2127 20 LPoint3f::operator - 0 3 394 395 396 1752
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;

1567 5 cross 4 2127 15 LPoint3f::cross 0 1 397 422
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

1568 10 operator * 4 2127 20 LPoint3f::operator * 0 1 398 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

1569 10 operator / 4 2127 20 LPoint3f::operator / 0 1 399 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

1570 6 origin 4 2127 16 LPoint3f::origin 0 2 400 401 931
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3f LPoint3f::origin(CoordinateSystem cs = (CS_default));

1571 3 rfu 4 2127 13 LPoint3f::rfu 0 2 402 403 768
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1572 11 python_repr 4 2127 21 LPoint3f::python_repr 0 1 404 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1573 14 get_class_type 4 2127 24 LPoint3f::get_class_type 0 1 405 0
49
static TypeHandle LPoint3f::get_class_type(void);

1574 9 ~LPoint3f 4 2127 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

1575 8 LPoint3d 4 2128 18 LPoint3d::LPoint3d 0 4 406 407 408 409 1558
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint3d::LPoint3d(void);

1576 10 operator = 4 2128 20 LPoint3d::operator = 0 2 410 411 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);

1577 4 zero 4 2128 14 LPoint3d::zero 0 1 412 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

1578 6 unit_x 4 2128 16 LPoint3d::unit_x 0 1 413 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

1579 6 unit_y 4 2128 16 LPoint3d::unit_y 0 1 414 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

1580 6 unit_z 4 2128 16 LPoint3d::unit_z 0 1 415 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

1581 10 operator - 68 2128 20 LPoint3d::operator - 0 1 416 0
49
inline LPoint3d LPoint3d::operator -(void) const;

1582 10 operator + 4 2128 20 LPoint3d::operator + 0 2 417 418 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;

1583 10 operator - 4 2128 20 LPoint3d::operator - 0 3 419 420 421 875
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;

1584 5 cross 4 2128 15 LPoint3d::cross 0 1 422 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

1585 10 operator * 4 2128 20 LPoint3d::operator * 0 1 423 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

1586 10 operator / 4 2128 20 LPoint3d::operator / 0 1 424 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

1587 6 origin 4 2128 16 LPoint3d::origin 0 2 425 426 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3d LPoint3d::origin(CoordinateSystem cs = (CS_default));

1588 3 rfu 4 2128 13 LPoint3d::rfu 0 2 427 428 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1589 11 python_repr 4 2128 21 LPoint3d::python_repr 0 1 429 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1590 14 get_class_type 4 2128 24 LPoint3d::get_class_type 0 1 430 0
49
static TypeHandle LPoint3d::get_class_type(void);

1591 9 ~LPoint3d 4 2128 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

1592 10 LVecBase4f 4 2129 22 LVecBase4f::LVecBase4f 0 4 431 432 433 434 3138
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase4f::LVecBase4f(void);

1593 10 operator = 4 2129 22 LVecBase4f::operator = 0 2 435 436 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);

1594 12 operator new 4 2129 24 LVecBase4f::operator new 0 1 437 0
57
inline void *LVecBase4f::operator new(unsigned int size);

1595 15 operator delete 4 2129 27 LVecBase4f::operator delete 0 0 0
51
inline void LVecBase4f::operator delete(void *ptr);

1596 4 zero 4 2129 16 LVecBase4f::zero 0 1 438 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

1597 6 unit_x 4 2129 18 LVecBase4f::unit_x 0 1 439 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

1598 6 unit_y 4 2129 18 LVecBase4f::unit_y 0 1 440 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

1599 6 unit_z 4 2129 18 LVecBase4f::unit_z 0 1 441 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

1600 6 unit_w 4 2129 18 LVecBase4f::unit_w 0 1 442 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

1601 11 ~LVecBase4f 4 2129 23 LVecBase4f::~LVecBase4f 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

1602 11 operator [] 4 2129 23 LVecBase4f::operator [] 0 2 443 444 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline float LVecBase4f::operator [](int i) const;

1603 6 is_nan 4 2129 18 LVecBase4f::is_nan 0 1 445 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

1604 8 get_cell 4 2129 20 LVecBase4f::get_cell 0 1 446 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

1605 5 get_x 4 2129 17 LVecBase4f::get_x 0 1 447 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

1606 5 get_y 4 2129 17 LVecBase4f::get_y 0 1 448 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

1607 5 get_z 4 2129 17 LVecBase4f::get_z 0 1 449 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

1608 5 get_w 4 2129 17 LVecBase4f::get_w 0 1 450 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

1609 8 set_cell 4 2129 20 LVecBase4f::set_cell 0 1 451 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

1610 5 set_x 4 2129 17 LVecBase4f::set_x 0 1 452 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

1611 5 set_y 4 2129 17 LVecBase4f::set_y 0 1 453 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

1612 5 set_z 4 2129 17 LVecBase4f::set_z 0 1 454 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

1613 5 set_w 4 2129 17 LVecBase4f::set_w 0 1 455 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

1614 11 add_to_cell 4 2129 23 LVecBase4f::add_to_cell 0 1 456 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

1615 5 add_x 4 2129 17 LVecBase4f::add_x 0 1 457 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

1616 5 add_y 4 2129 17 LVecBase4f::add_y 0 1 458 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

1617 5 add_z 4 2129 17 LVecBase4f::add_z 0 1 459 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

1618 5 add_w 4 2129 17 LVecBase4f::add_w 0 1 460 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

1619 8 get_data 4 2129 20 LVecBase4f::get_data 0 1 461 798
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

1620 18 get_num_components 4 2129 30 LVecBase4f::get_num_components 0 1 462 556
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

1621 4 fill 4 2129 16 LVecBase4f::fill 0 1 463 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

1622 3 set 4 2129 15 LVecBase4f::set 0 1 464 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

1623 3 dot 4 2129 15 LVecBase4f::dot 0 1 465 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

1624 10 operator < 4 2129 22 LVecBase4f::operator < 0 1 466 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

1625 11 operator == 4 2129 23 LVecBase4f::operator == 0 1 467 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

1626 11 operator != 4 2129 23 LVecBase4f::operator != 0 1 468 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

1627 10 compare_to 4 2129 22 LVecBase4f::compare_to 0 2 469 470 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;

1628 8 get_hash 4 2129 20 LVecBase4f::get_hash 0 2 471 472 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase4f::get_hash(void) const;

1629 8 add_hash 4 2129 20 LVecBase4f::add_hash 0 2 473 474 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;

1630 10 operator - 68 2129 22 LVecBase4f::operator - 0 1 475 0
53
inline LVecBase4f LVecBase4f::operator -(void) const;

1631 10 operator + 4 2129 22 LVecBase4f::operator + 0 1 476 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

1632 10 operator - 4 2129 22 LVecBase4f::operator - 0 1 477 878
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

1633 10 operator * 4 2129 22 LVecBase4f::operator * 0 1 478 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

1634 10 operator / 4 2129 22 LVecBase4f::operator / 0 1 479 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

1635 11 operator += 4 2129 23 LVecBase4f::operator += 0 1 480 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

1636 11 operator -= 4 2129 23 LVecBase4f::operator -= 0 1 481 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

1637 11 operator *= 4 2129 23 LVecBase4f::operator *= 0 1 482 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator *=(float scalar);

1638 11 operator /= 4 2129 23 LVecBase4f::operator /= 0 1 483 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator /=(float scalar);

1639 4 fmax 4 2129 16 LVecBase4f::fmax 0 1 484 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other);

1640 4 fmin 4 2129 16 LVecBase4f::fmin 0 1 485 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other);

1641 12 almost_equal 4 2129 24 LVecBase4f::almost_equal 0 2 486 487 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
85
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;

1642 6 output 4 2129 18 LVecBase4f::output 0 1 488 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

1643 11 python_repr 4 2129 23 LVecBase4f::python_repr 0 1 489 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1644 14 get_class_type 4 2129 26 LVecBase4f::get_class_type 0 1 490 0
51
static TypeHandle LVecBase4f::get_class_type(void);

1645 10 LVecBase4d 4 2130 22 LVecBase4d::LVecBase4d 0 4 491 492 493 494 1568
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LVecBase4d::LVecBase4d(void);

1646 10 operator = 4 2130 22 LVecBase4d::operator = 0 2 495 496 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);

1647 12 operator new 4 2130 24 LVecBase4d::operator new 0 1 497 0
57
inline void *LVecBase4d::operator new(unsigned int size);

1648 15 operator delete 4 2130 27 LVecBase4d::operator delete 0 0 0
51
inline void LVecBase4d::operator delete(void *ptr);

1649 4 zero 4 2130 16 LVecBase4d::zero 0 1 498 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

1650 6 unit_x 4 2130 18 LVecBase4d::unit_x 0 1 499 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

1651 6 unit_y 4 2130 18 LVecBase4d::unit_y 0 1 500 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

1652 6 unit_z 4 2130 18 LVecBase4d::unit_z 0 1 501 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

1653 6 unit_w 4 2130 18 LVecBase4d::unit_w 0 1 502 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

1654 11 ~LVecBase4d 4 2130 23 LVecBase4d::~LVecBase4d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

1655 11 operator [] 4 2130 23 LVecBase4d::operator [] 0 2 503 504 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double LVecBase4d::operator [](int i) const;

1656 6 is_nan 4 2130 18 LVecBase4d::is_nan 0 1 505 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

1657 8 get_cell 4 2130 20 LVecBase4d::get_cell 0 1 506 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

1658 5 get_x 4 2130 17 LVecBase4d::get_x 0 1 507 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

1659 5 get_y 4 2130 17 LVecBase4d::get_y 0 1 508 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

1660 5 get_z 4 2130 17 LVecBase4d::get_z 0 1 509 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

1661 5 get_w 4 2130 17 LVecBase4d::get_w 0 1 510 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

1662 8 set_cell 4 2130 20 LVecBase4d::set_cell 0 1 511 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

1663 5 set_x 4 2130 17 LVecBase4d::set_x 0 1 512 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

1664 5 set_y 4 2130 17 LVecBase4d::set_y 0 1 513 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

1665 5 set_z 4 2130 17 LVecBase4d::set_z 0 1 514 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

1666 5 set_w 4 2130 17 LVecBase4d::set_w 0 1 515 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

1667 11 add_to_cell 4 2130 23 LVecBase4d::add_to_cell 0 1 516 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

1668 5 add_x 4 2130 17 LVecBase4d::add_x 0 1 517 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

1669 5 add_y 4 2130 17 LVecBase4d::add_y 0 1 518 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

1670 5 add_z 4 2130 17 LVecBase4d::add_z 0 1 519 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

1671 5 add_w 4 2130 17 LVecBase4d::add_w 0 1 520 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

1672 8 get_data 4 2130 20 LVecBase4d::get_data 0 1 521 398
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

1673 18 get_num_components 4 2130 30 LVecBase4d::get_num_components 0 1 522 277
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

1674 4 fill 4 2130 16 LVecBase4d::fill 0 1 523 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

1675 3 set 4 2130 15 LVecBase4d::set 0 1 524 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

1676 3 dot 4 2130 15 LVecBase4d::dot 0 1 525 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

1677 10 operator < 4 2130 22 LVecBase4d::operator < 0 1 526 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

1678 11 operator == 4 2130 23 LVecBase4d::operator == 0 1 527 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

1679 11 operator != 4 2130 23 LVecBase4d::operator != 0 1 528 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

1680 10 compare_to 4 2130 22 LVecBase4d::compare_to 0 2 529 530 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
65
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;

1681 8 get_hash 4 2130 20 LVecBase4d::get_hash 0 2 531 532 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase4d::get_hash(void) const;

1682 8 add_hash 4 2130 20 LVecBase4d::add_hash 0 2 533 534 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;

1683 10 operator - 68 2130 22 LVecBase4d::operator - 0 1 535 0
53
inline LVecBase4d LVecBase4d::operator -(void) const;

1684 10 operator + 4 2130 22 LVecBase4d::operator + 0 1 536 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

1685 10 operator - 4 2130 22 LVecBase4d::operator - 0 1 537 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

1686 10 operator * 4 2130 22 LVecBase4d::operator * 0 1 538 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

1687 10 operator / 4 2130 22 LVecBase4d::operator / 0 1 539 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

1688 11 operator += 4 2130 23 LVecBase4d::operator += 0 1 540 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

1689 11 operator -= 4 2130 23 LVecBase4d::operator -= 0 1 541 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

1690 11 operator *= 4 2130 23 LVecBase4d::operator *= 0 1 542 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator *=(double scalar);

1691 11 operator /= 4 2130 23 LVecBase4d::operator /= 0 1 543 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator /=(double scalar);

1692 4 fmax 4 2130 16 LVecBase4d::fmax 0 1 544 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other);

1693 4 fmin 4 2130 16 LVecBase4d::fmin 0 1 545 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other);

1694 12 almost_equal 4 2130 24 LVecBase4d::almost_equal 0 2 546 547 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
86
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;

1695 6 output 4 2130 18 LVecBase4d::output 0 1 548 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

1696 11 python_repr 4 2130 23 LVecBase4d::python_repr 0 1 549 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1697 14 get_class_type 4 2130 26 LVecBase4d::get_class_type 0 1 550 0
51
static TypeHandle LVecBase4d::get_class_type(void);

1698 9 LVector4f 4 2131 20 LVector4f::LVector4f 0 4 551 552 553 554 3128
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector4f::LVector4f(void);

1699 10 operator = 4 2131 21 LVector4f::operator = 0 2 555 556 914
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);

1700 4 zero 4 2131 15 LVector4f::zero 0 1 557 518
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

1701 6 unit_x 4 2131 17 LVector4f::unit_x 0 1 558 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

1702 6 unit_y 4 2131 17 LVector4f::unit_y 0 1 559 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

1703 6 unit_z 4 2131 17 LVector4f::unit_z 0 1 560 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

1704 6 unit_w 4 2131 17 LVector4f::unit_w 0 1 561 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

1705 10 operator - 68 2131 21 LVector4f::operator - 0 1 562 0
51
inline LVector4f LVector4f::operator -(void) const;

1706 10 operator + 4 2131 21 LVector4f::operator + 0 2 563 564 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;

1707 10 operator - 4 2131 21 LVector4f::operator - 0 2 565 566 1322
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;

1708 6 length 4 2131 17 LVector4f::length 0 1 567 584
////////////////////////////////////////////////////////////////////
//     Function: LVector4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
43
inline float LVector4f::length(void) const;

1709 14 length_squared 4 2131 25 LVector4f::length_squared 0 1 568 594
////////////////////////////////////////////////////////////////////
//     Function: LVector4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
51
inline float LVector4f::length_squared(void) const;

1710 9 normalize 4 2131 20 LVector4f::normalize 0 1 569 728
////////////////////////////////////////////////////////////////////
//     Function: LVector4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
39
inline bool LVector4f::normalize(void);

1711 10 operator * 4 2131 21 LVector4f::operator * 0 1 570 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator *(float scalar) const;

1712 10 operator / 4 2131 21 LVector4f::operator / 0 1 571 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator /(float scalar) const;

1713 11 python_repr 4 2131 22 LVector4f::python_repr 0 1 572 442
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1714 14 get_class_type 4 2131 25 LVector4f::get_class_type 0 1 573 0
50
static TypeHandle LVector4f::get_class_type(void);

1715 10 ~LVector4f 4 2131 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

1716 9 LVector4d 4 2132 20 LVector4d::LVector4d 0 4 574 575 576 577 1563
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LVector4d::LVector4d(void);

1717 10 operator = 4 2132 21 LVector4d::operator = 0 2 578 579 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);

1718 4 zero 4 2132 15 LVector4d::zero 0 1 580 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

1719 6 unit_x 4 2132 17 LVector4d::unit_x 0 1 581 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

1720 6 unit_y 4 2132 17 LVector4d::unit_y 0 1 582 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

1721 6 unit_z 4 2132 17 LVector4d::unit_z 0 1 583 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

1722 6 unit_w 4 2132 17 LVector4d::unit_w 0 1 584 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

1723 10 operator - 68 2132 21 LVector4d::operator - 0 1 585 0
51
inline LVector4d LVector4d::operator -(void) const;

1724 10 operator + 4 2132 21 LVector4d::operator + 0 2 586 587 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;

1725 10 operator - 4 2132 21 LVector4d::operator - 0 2 588 589 660
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;

1726 6 length 4 2132 17 LVector4d::length 0 1 590 291
////////////////////////////////////////////////////////////////////
//     Function: LVector4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline double LVector4d::length(void) const;

1727 14 length_squared 4 2132 25 LVector4d::length_squared 0 1 591 296
////////////////////////////////////////////////////////////////////
//     Function: LVector4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline double LVector4d::length_squared(void) const;

1728 9 normalize 4 2132 20 LVector4d::normalize 0 1 592 363
////////////////////////////////////////////////////////////////////
//     Function: LVector4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
39
inline bool LVector4d::normalize(void);

1729 10 operator * 4 2132 21 LVector4d::operator * 0 1 593 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator *(double scalar) const;

1730 10 operator / 4 2132 21 LVector4d::operator / 0 1 594 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator /(double scalar) const;

1731 11 python_repr 4 2132 22 LVector4d::python_repr 0 1 595 220
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1732 14 get_class_type 4 2132 25 LVector4d::get_class_type 0 1 596 0
50
static TypeHandle LVector4d::get_class_type(void);

1733 10 ~LVector4d 4 2132 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

1734 8 LPoint4f 4 2133 18 LPoint4f::LPoint4f 0 4 597 598 599 600 3118
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint4f::LPoint4f(void);

1735 10 operator = 4 2133 20 LPoint4f::operator = 0 2 601 602 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);

1736 4 zero 4 2133 14 LPoint4f::zero 0 1 603 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

1737 6 unit_x 4 2133 16 LPoint4f::unit_x 0 1 604 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

1738 6 unit_y 4 2133 16 LPoint4f::unit_y 0 1 605 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

1739 6 unit_z 4 2133 16 LPoint4f::unit_z 0 1 606 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

1740 6 unit_w 4 2133 16 LPoint4f::unit_w 0 1 607 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

1741 10 operator - 68 2133 20 LPoint4f::operator - 0 1 608 0
49
inline LPoint4f LPoint4f::operator -(void) const;

1742 10 operator + 4 2133 20 LPoint4f::operator + 0 2 609 610 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;

1743 10 operator - 4 2133 20 LPoint4f::operator - 0 3 611 612 613 1752
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;

1744 10 operator * 4 2133 20 LPoint4f::operator * 0 1 614 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

1745 10 operator / 4 2133 20 LPoint4f::operator / 0 1 615 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

1746 11 python_repr 4 2133 21 LPoint4f::python_repr 0 1 616 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1747 14 get_class_type 4 2133 24 LPoint4f::get_class_type 0 1 617 0
49
static TypeHandle LPoint4f::get_class_type(void);

1748 9 ~LPoint4f 4 2133 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

1749 8 LPoint4d 4 2134 18 LPoint4d::LPoint4d 0 4 618 619 620 621 1558
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
inline LPoint4d::LPoint4d(void);

1750 10 operator = 4 2134 20 LPoint4d::operator = 0 2 622 623 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);

1751 4 zero 4 2134 14 LPoint4d::zero 0 1 624 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

1752 6 unit_x 4 2134 16 LPoint4d::unit_x 0 1 625 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

1753 6 unit_y 4 2134 16 LPoint4d::unit_y 0 1 626 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

1754 6 unit_z 4 2134 16 LPoint4d::unit_z 0 1 627 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

1755 6 unit_w 4 2134 16 LPoint4d::unit_w 0 1 628 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

1756 10 operator - 68 2134 20 LPoint4d::operator - 0 1 629 0
49
inline LPoint4d LPoint4d::operator -(void) const;

1757 10 operator + 4 2134 20 LPoint4d::operator + 0 2 630 631 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;

1758 10 operator - 4 2134 20 LPoint4d::operator - 0 3 632 633 634 875
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;

1759 10 operator * 4 2134 20 LPoint4d::operator * 0 1 635 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

1760 10 operator / 4 2134 20 LPoint4d::operator / 0 1 636 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

1761 11 python_repr 4 2134 21 LPoint4d::python_repr 0 1 637 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1762 14 get_class_type 4 2134 24 LPoint4d::get_class_type 0 1 638 0
49
static TypeHandle LPoint4d::get_class_type(void);

1763 9 ~LPoint4d 4 2134 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

1764 9 LMatrix3f 4 2135 20 LMatrix3f::LMatrix3f 0 3 639 640 641 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LMatrix3f::LMatrix3f(void);

1765 10 operator = 4 2135 21 LMatrix3f::operator = 0 2 642 643 926
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);

1766 12 operator new 4 2135 23 LMatrix3f::operator new 0 1 644 0
56
inline void *LMatrix3f::operator new(unsigned int size);

1767 15 operator delete 4 2135 26 LMatrix3f::operator delete 0 0 0
50
inline void LMatrix3f::operator delete(void *ptr);

1768 4 fill 4 2135 15 LMatrix3f::fill 0 1 645 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

1769 3 set 4 2135 14 LMatrix3f::set 0 1 646 420
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

1770 7 set_row 4 2135 18 LMatrix3f::set_row 0 2 647 648 1262
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);

1771 7 set_col 4 2135 18 LMatrix3f::set_col 0 2 649 650 1280
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);

1772 7 get_row 4 2135 18 LMatrix3f::get_row 0 2 651 652 633
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_row(int row) const;

1773 7 get_col 4 2135 18 LMatrix3f::get_col 0 1 653 606
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

1774 8 get_row2 4 2135 19 LMatrix3f::get_row2 0 1 654 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

1775 8 get_col2 4 2135 19 LMatrix3f::get_col2 0 1 655 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

1776 11 operator () 4 2135 22 LMatrix3f::operator () 0 2 656 657 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline float &LMatrix3f::operator ()(int row, int col);

1777 6 is_nan 4 2135 17 LMatrix3f::is_nan 0 1 658 616
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

1778 8 get_cell 4 2135 19 LMatrix3f::get_cell 0 1 659 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

1779 8 set_cell 4 2135 19 LMatrix3f::set_cell 0 1 660 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

1780 8 get_data 4 2135 19 LMatrix3f::get_data 0 1 661 798
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

1781 18 get_num_components 4 2135 29 LMatrix3f::get_num_components 0 1 662 554
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

1782 10 operator < 4 2135 21 LMatrix3f::operator < 0 1 663 1004
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

1783 11 operator == 4 2135 22 LMatrix3f::operator == 0 1 664 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

1784 11 operator != 4 2135 22 LMatrix3f::operator != 0 1 665 452
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

1785 10 compare_to 4 2135 21 LMatrix3f::compare_to 0 2 666 667 1139
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
63
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;

1786 8 get_hash 4 2135 19 LMatrix3f::get_hash 0 2 668 669 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
52
inline unsigned int LMatrix3f::get_hash(void) const;

1787 8 add_hash 4 2135 19 LMatrix3f::add_hash 0 2 670 671 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
65
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;

1788 5 xform 4 2135 16 LMatrix3f::xform 0 1 672 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

1789 11 xform_point 4 2135 22 LMatrix3f::xform_point 0 1 673 802
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

1790 9 xform_vec 4 2135 20 LMatrix3f::xform_vec 0 1 674 796
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;

1791 8 multiply 4 2135 19 LMatrix3f::multiply 0 1 675 79
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

1792 10 operator * 4 2135 21 LMatrix3f::operator * 0 2 676 677 890
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;

1793 10 operator / 4 2135 21 LMatrix3f::operator / 0 1 678 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

1794 11 operator += 4 2135 22 LMatrix3f::operator += 0 1 679 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

1795 11 operator -= 4 2135 22 LMatrix3f::operator -= 0 1 680 558
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

1796 11 operator *= 4 2135 22 LMatrix3f::operator *= 0 2 681 682 952
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);

1797 11 operator /= 4 2135 22 LMatrix3f::operator /= 0 1 683 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

1798 11 determinant 4 2135 22 LMatrix3f::determinant 0 1 684 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

1799 14 transpose_from 4 2135 25 LMatrix3f::transpose_from 0 1 685 442
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

1800 18 transpose_in_place 4 2135 29 LMatrix3f::transpose_in_place 0 1 686 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

1801 11 invert_from 4 2135 22 LMatrix3f::invert_from 0 1 687 1608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

1802 15 invert_in_place 4 2135 26 LMatrix3f::invert_in_place 0 1 688 724
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

1803 9 ident_mat 4 2135 20 LMatrix3f::ident_mat 0 1 689 2130
// Filename: lmatrix3_src.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

// Filename: lmatrix3_src.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

1804 13 translate_mat 4 2135 24 LMatrix3f::translate_mat 0 2 690 691 1206
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
74
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);

1805 10 rotate_mat 4 2135 21 LMatrix3f::rotate_mat 0 3 692 693 694 1454
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
59
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);

1806 9 scale_mat 4 2135 20 LMatrix3f::scale_mat 0 4 695 696 697 698 2534
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
70
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);

1807 19 rotate_mat_normaxis 4 2135 30 LMatrix3f::rotate_mat_normaxis 0 2 699 700 812
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

1808 9 shear_mat 4 2135 20 LMatrix3f::shear_mat 0 4 701 702 703 704 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
106
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

1809 15 scale_shear_mat 4 2135 26 LMatrix3f::scale_shear_mat 0 4 705 706 707 708 922
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
130
static LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

1810 11 convert_mat 4 2135 22 LMatrix3f::convert_mat 0 1 709 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

1811 12 almost_equal 4 2135 23 LMatrix3f::almost_equal 0 2 710 711 1148
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
76
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;

1812 6 output 4 2135 17 LMatrix3f::output 0 1 712 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

1813 5 write 4 2135 16 LMatrix3f::write 0 2 713 714 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

1814 11 python_repr 4 2135 22 LMatrix3f::python_repr 0 1 715 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1815 14 get_class_type 4 2135 25 LMatrix3f::get_class_type 0 1 716 0
50
static TypeHandle LMatrix3f::get_class_type(void);

1816 10 ~LMatrix3f 4 2135 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

1817 9 transpose 1 0 9 transpose 0 4 1146 1147 1148 1149 0
47
inline LMatrix3f transpose(LMatrix3f const &a);

1818 6 invert 1 0 6 invert 0 6 1150 1151 1152 1153 1154 1155 0
44
inline LMatrix3f invert(LMatrix3f const &a);

1819 9 LMatrix3d 4 2136 20 LMatrix3d::LMatrix3d 0 3 717 718 719 668
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LMatrix3d::LMatrix3d(void);

1820 10 operator = 4 2136 21 LMatrix3d::operator = 0 2 720 721 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);

1821 12 operator new 4 2136 23 LMatrix3d::operator new 0 1 722 0
56
inline void *LMatrix3d::operator new(unsigned int size);

1822 15 operator delete 4 2136 26 LMatrix3d::operator delete 0 0 0
50
inline void LMatrix3d::operator delete(void *ptr);

1823 4 fill 4 2136 15 LMatrix3d::fill 0 1 723 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

1824 3 set 4 2136 14 LMatrix3d::set 0 1 724 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

1825 7 set_row 4 2136 18 LMatrix3d::set_row 0 2 725 726 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);

1826 7 set_col 4 2136 18 LMatrix3d::set_col 0 2 727 728 639
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);

1827 7 get_row 4 2136 18 LMatrix3d::get_row 0 2 729 730 332
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_row(int row) const;

1828 7 get_col 4 2136 18 LMatrix3d::get_col 0 1 731 302
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

1829 8 get_row2 4 2136 19 LMatrix3d::get_row2 0 1 732 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

1830 8 get_col2 4 2136 19 LMatrix3d::get_col2 0 1 733 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

1831 11 operator () 4 2136 22 LMatrix3d::operator () 0 2 734 735 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline double &LMatrix3d::operator ()(int row, int col);

1832 6 is_nan 4 2136 17 LMatrix3d::is_nan 0 1 736 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

1833 8 get_cell 4 2136 19 LMatrix3d::get_cell 0 1 737 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

1834 8 set_cell 4 2136 19 LMatrix3d::set_cell 0 1 738 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

1835 8 get_data 4 2136 19 LMatrix3d::get_data 0 1 739 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

1836 18 get_num_components 4 2136 29 LMatrix3d::get_num_components 0 1 740 276
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

1837 10 operator < 4 2136 21 LMatrix3d::operator < 0 1 741 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

1838 11 operator == 4 2136 22 LMatrix3d::operator == 0 1 742 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

1839 11 operator != 4 2136 22 LMatrix3d::operator != 0 1 743 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

1840 10 compare_to 4 2136 21 LMatrix3d::compare_to 0 2 744 745 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
63
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;

1841 8 get_hash 4 2136 19 LMatrix3d::get_hash 0 2 746 747 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
52
inline unsigned int LMatrix3d::get_hash(void) const;

1842 8 add_hash 4 2136 19 LMatrix3d::add_hash 0 2 748 749 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
65
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;

1843 5 xform 4 2136 16 LMatrix3d::xform 0 1 750 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

1844 11 xform_point 4 2136 22 LMatrix3d::xform_point 0 1 751 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

1845 9 xform_vec 4 2136 20 LMatrix3d::xform_vec 0 1 752 397
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;

1846 8 multiply 4 2136 19 LMatrix3d::multiply 0 1 753 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

1847 10 operator * 4 2136 21 LMatrix3d::operator * 0 2 754 755 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;

1848 10 operator / 4 2136 21 LMatrix3d::operator / 0 1 756 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

1849 11 operator += 4 2136 22 LMatrix3d::operator += 0 1 757 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

1850 11 operator -= 4 2136 22 LMatrix3d::operator -= 0 1 758 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

1851 11 operator *= 4 2136 22 LMatrix3d::operator *= 0 2 759 760 475
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);

1852 11 operator /= 4 2136 22 LMatrix3d::operator /= 0 1 761 251
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

1853 11 determinant 4 2136 22 LMatrix3d::determinant 0 1 762 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

1854 14 transpose_from 4 2136 25 LMatrix3d::transpose_from 0 1 763 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

1855 18 transpose_in_place 4 2136 29 LMatrix3d::transpose_in_place 0 1 764 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

1856 11 invert_from 4 2136 22 LMatrix3d::invert_from 0 1 765 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

1857 15 invert_in_place 4 2136 26 LMatrix3d::invert_in_place 0 1 766 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

1858 9 ident_mat 4 2136 20 LMatrix3d::ident_mat 0 1 767 1064
// Filename: lmatrix3_src.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

1859 13 translate_mat 4 2136 24 LMatrix3d::translate_mat 0 2 768 769 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
74
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);

1860 10 rotate_mat 4 2136 21 LMatrix3d::rotate_mat 0 3 770 771 772 787
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
60
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);

1861 9 scale_mat 4 2136 20 LMatrix3d::scale_mat 0 4 773 774 775 776 1266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
70
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);

1862 19 rotate_mat_normaxis 4 2136 30 LMatrix3d::rotate_mat_normaxis 0 2 777 778 405
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

1863 9 shear_mat 4 2136 20 LMatrix3d::shear_mat 0 4 779 780 781 782 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
106
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

1864 15 scale_shear_mat 4 2136 26 LMatrix3d::scale_shear_mat 0 4 783 784 785 786 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
130
static LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

1865 11 convert_mat 4 2136 22 LMatrix3d::convert_mat 0 1 787 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

1866 12 almost_equal 4 2136 23 LMatrix3d::almost_equal 0 2 788 789 807
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
77
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;

1867 6 output 4 2136 17 LMatrix3d::output 0 1 790 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

1868 5 write 4 2136 16 LMatrix3d::write 0 2 791 792 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

1869 11 python_repr 4 2136 22 LMatrix3d::python_repr 0 1 793 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1870 14 get_class_type 4 2136 25 LMatrix3d::get_class_type 0 1 794 0
50
static TypeHandle LMatrix3d::get_class_type(void);

1871 10 ~LMatrix3d 4 2136 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

1872 9 LMatrix4f 4 2137 20 LMatrix4f::LMatrix4f 0 5 795 796 797 798 799 2486
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LMatrix4f::LMatrix4f(void);

1873 10 operator = 4 2137 21 LMatrix4f::operator = 0 2 800 801 926
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);

1874 12 operator new 4 2137 23 LMatrix4f::operator new 0 1 802 0
56
inline void *LMatrix4f::operator new(unsigned int size);

1875 15 operator delete 4 2137 26 LMatrix4f::operator delete 0 0 0
50
inline void LMatrix4f::operator delete(void *ptr);

1876 4 fill 4 2137 15 LMatrix4f::fill 0 1 803 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

1877 3 set 4 2137 14 LMatrix4f::set 0 1 804 420
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

1878 11 set_upper_3 4 2137 22 LMatrix4f::set_upper_3 0 1 805 543
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

1879 11 get_upper_3 4 2137 22 LMatrix4f::get_upper_3 0 1 806 553
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

1880 7 set_row 4 2137 18 LMatrix4f::set_row 0 2 807 808 1222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);

1881 7 set_col 4 2137 18 LMatrix4f::set_col 0 2 809 810 1228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);

1882 7 get_row 4 2137 18 LMatrix4f::get_row 0 2 811 812 629
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_row(int row) const;

1883 7 get_col 4 2137 18 LMatrix4f::get_col 0 1 813 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

1884 8 get_row3 4 2137 19 LMatrix4f::get_row3 0 2 814 815 677
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_row3(int row) const;

1885 8 get_col3 4 2137 19 LMatrix4f::get_col3 0 1 816 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

1886 11 operator () 4 2137 22 LMatrix4f::operator () 0 2 817 818 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline float &LMatrix4f::operator ()(int row, int col);

1887 6 is_nan 4 2137 17 LMatrix4f::is_nan 0 1 819 616
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

1888 8 get_cell 4 2137 19 LMatrix4f::get_cell 0 1 820 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

1889 8 set_cell 4 2137 19 LMatrix4f::set_cell 0 1 821 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

1890 8 get_data 4 2137 19 LMatrix4f::get_data 0 1 822 798
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

1891 18 get_num_components 4 2137 29 LMatrix4f::get_num_components 0 1 823 550
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

1892 5 begin 4 2137 16 LMatrix4f::begin 0 2 824 825 1270
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
43
inline float const *LMatrix4f::begin(void);

1893 3 end 4 2137 14 LMatrix4f::end 0 2 826 827 1262
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
41
inline float const *LMatrix4f::end(void);

1894 10 operator < 4 2137 21 LMatrix4f::operator < 0 1 828 1004
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

1895 11 operator == 4 2137 22 LMatrix4f::operator == 0 1 829 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

1896 11 operator != 4 2137 22 LMatrix4f::operator != 0 1 830 452
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

1897 10 compare_to 4 2137 21 LMatrix4f::compare_to 0 2 831 832 1139
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
63
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;

1898 8 get_hash 4 2137 19 LMatrix4f::get_hash 0 2 833 834 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
52
inline unsigned int LMatrix4f::get_hash(void) const;

1899 8 add_hash 4 2137 19 LMatrix4f::add_hash 0 2 835 836 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
65
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;

1900 5 xform 4 2137 16 LMatrix4f::xform 0 1 837 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

1901 11 xform_point 4 2137 22 LMatrix4f::xform_point 0 1 838 802
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

1902 9 xform_vec 4 2137 20 LMatrix4f::xform_vec 0 1 839 796
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

1903 8 multiply 4 2137 19 LMatrix4f::multiply 0 1 840 79
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

1904 10 operator * 4 2137 21 LMatrix4f::operator * 0 2 841 842 890
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;

1905 10 operator / 4 2137 21 LMatrix4f::operator / 0 1 843 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

1906 11 operator += 4 2137 22 LMatrix4f::operator += 0 1 844 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

1907 11 operator -= 4 2137 22 LMatrix4f::operator -= 0 1 845 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

1908 11 operator *= 4 2137 22 LMatrix4f::operator *= 0 2 846 847 894
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);

1909 11 operator /= 4 2137 22 LMatrix4f::operator /= 0 1 848 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

1910 14 transpose_from 4 2137 25 LMatrix4f::transpose_from 0 1 849 442
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

1911 18 transpose_in_place 4 2137 29 LMatrix4f::transpose_in_place 0 1 850 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

1912 11 invert_from 4 2137 22 LMatrix4f::invert_from 0 1 851 1608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

1913 18 invert_affine_from 4 2137 29 LMatrix4f::invert_affine_from 0 1 852 1860
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

1914 15 invert_in_place 4 2137 26 LMatrix4f::invert_in_place 0 1 853 724
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

1915 9 ident_mat 4 2137 20 LMatrix4f::ident_mat 0 1 854 2130
// Filename: lmatrix4_src.I
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

// Filename: lmatrix4_src.I
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

1916 13 translate_mat 4 2137 24 LMatrix4f::translate_mat 0 2 855 856 1206
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
74
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);

1917 10 rotate_mat 4 2137 21 LMatrix4f::rotate_mat 0 2 857 858 692
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

1918 19 rotate_mat_normaxis 4 2137 30 LMatrix4f::rotate_mat_normaxis 0 4 859 860 861 862 818
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

1919 9 scale_mat 4 2137 20 LMatrix4f::scale_mat 0 3 863 864 865 1870
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
70
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);

1920 9 shear_mat 4 2137 20 LMatrix4f::shear_mat 0 4 866 867 868 869 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
106
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

1921 15 scale_shear_mat 4 2137 26 LMatrix4f::scale_shear_mat 0 4 870 871 872 873 1230
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
137
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

1922 13 y_to_z_up_mat 4 2137 24 LMatrix4f::y_to_z_up_mat 0 1 874 680
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

1923 13 z_to_y_up_mat 4 2137 24 LMatrix4f::z_to_y_up_mat 0 1 875 680
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

1924 11 convert_mat 4 2137 22 LMatrix4f::convert_mat 0 1 876 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

1925 12 almost_equal 4 2137 23 LMatrix4f::almost_equal 0 2 877 878 997
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
76
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;

1926 6 output 4 2137 17 LMatrix4f::output 0 1 879 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

1927 5 write 4 2137 16 LMatrix4f::write 0 2 880 881 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

1928 11 python_repr 4 2137 22 LMatrix4f::python_repr 0 1 882 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1929 14 get_class_type 4 2137 25 LMatrix4f::get_class_type 0 1 883 0
50
static TypeHandle LMatrix4f::get_class_type(void);

1930 10 ~LMatrix4f 4 2137 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

1931 9 LMatrix4d 4 2138 20 LMatrix4d::LMatrix4d 0 5 884 885 886 887 888 1339
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LMatrix4d::LMatrix4d(void);

1932 10 operator = 4 2138 21 LMatrix4d::operator = 0 2 889 890 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);

1933 12 operator new 4 2138 23 LMatrix4d::operator new 0 1 891 0
56
inline void *LMatrix4d::operator new(unsigned int size);

1934 15 operator delete 4 2138 26 LMatrix4d::operator delete 0 0 0
50
inline void LMatrix4d::operator delete(void *ptr);

1935 4 fill 4 2138 15 LMatrix4d::fill 0 1 892 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

1936 3 set 4 2138 14 LMatrix4d::set 0 1 893 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

1937 11 set_upper_3 4 2138 22 LMatrix4d::set_upper_3 0 1 894 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

1938 11 get_upper_3 4 2138 22 LMatrix4d::get_upper_3 0 1 895 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

1939 7 set_row 4 2138 18 LMatrix4d::set_row 0 2 896 897 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);

1940 7 set_col 4 2138 18 LMatrix4d::set_col 0 2 898 899 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
61
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);

1941 7 get_row 4 2138 18 LMatrix4d::get_row 0 2 900 901 330
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_row(int row) const;

1942 7 get_col 4 2138 18 LMatrix4d::get_col 0 1 902 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

1943 8 get_row3 4 2138 19 LMatrix4d::get_row3 0 2 903 904 354
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_row3(int row) const;

1944 8 get_col3 4 2138 19 LMatrix4d::get_col3 0 1 905 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

1945 11 operator () 4 2138 22 LMatrix4d::operator () 0 2 906 907 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline double &LMatrix4d::operator ()(int row, int col);

1946 6 is_nan 4 2138 17 LMatrix4d::is_nan 0 1 908 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

1947 8 get_cell 4 2138 19 LMatrix4d::get_cell 0 1 909 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

1948 8 set_cell 4 2138 19 LMatrix4d::set_cell 0 1 910 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

1949 8 get_data 4 2138 19 LMatrix4d::get_data 0 1 911 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

1950 18 get_num_components 4 2138 29 LMatrix4d::get_num_components 0 1 912 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

1951 5 begin 4 2138 16 LMatrix4d::begin 0 2 913 914 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
44
inline double const *LMatrix4d::begin(void);

1952 3 end 4 2138 14 LMatrix4d::end 0 2 915 916 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
42
inline double const *LMatrix4d::end(void);

1953 10 operator < 4 2138 21 LMatrix4d::operator < 0 1 917 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

1954 11 operator == 4 2138 22 LMatrix4d::operator == 0 1 918 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

1955 11 operator != 4 2138 22 LMatrix4d::operator != 0 1 919 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

1956 10 compare_to 4 2138 21 LMatrix4d::compare_to 0 2 920 921 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
63
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;

1957 8 get_hash 4 2138 19 LMatrix4d::get_hash 0 2 922 923 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
52
inline unsigned int LMatrix4d::get_hash(void) const;

1958 8 add_hash 4 2138 19 LMatrix4d::add_hash 0 2 924 925 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
65
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;

1959 5 xform 4 2138 16 LMatrix4d::xform 0 1 926 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

1960 11 xform_point 4 2138 22 LMatrix4d::xform_point 0 1 927 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

1961 9 xform_vec 4 2138 20 LMatrix4d::xform_vec 0 1 928 397
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

1962 8 multiply 4 2138 19 LMatrix4d::multiply 0 1 929 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

1963 10 operator * 4 2138 21 LMatrix4d::operator * 0 2 930 931 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;

1964 10 operator / 4 2138 21 LMatrix4d::operator / 0 1 932 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

1965 11 operator += 4 2138 22 LMatrix4d::operator += 0 1 933 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

1966 11 operator -= 4 2138 22 LMatrix4d::operator -= 0 1 934 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

1967 11 operator *= 4 2138 22 LMatrix4d::operator *= 0 2 935 936 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);

1968 11 operator /= 4 2138 22 LMatrix4d::operator /= 0 1 937 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

1969 14 transpose_from 4 2138 25 LMatrix4d::transpose_from 0 1 938 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

1970 18 transpose_in_place 4 2138 29 LMatrix4d::transpose_in_place 0 1 939 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

1971 11 invert_from 4 2138 22 LMatrix4d::invert_from 0 1 940 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

1972 18 invert_affine_from 4 2138 29 LMatrix4d::invert_affine_from 0 1 941 929
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

1973 15 invert_in_place 4 2138 26 LMatrix4d::invert_in_place 0 1 942 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

1974 9 ident_mat 4 2138 20 LMatrix4d::ident_mat 0 1 943 1064
// Filename: lmatrix4_src.I
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

1975 13 translate_mat 4 2138 24 LMatrix4d::translate_mat 0 2 944 945 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
74
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);

1976 10 rotate_mat 4 2138 21 LMatrix4d::rotate_mat 0 2 946 947 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

1977 19 rotate_mat_normaxis 4 2138 30 LMatrix4d::rotate_mat_normaxis 0 4 948 949 950 951 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

1978 9 scale_mat 4 2138 20 LMatrix4d::scale_mat 0 3 952 953 954 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
70
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);

1979 9 shear_mat 4 2138 20 LMatrix4d::shear_mat 0 4 955 956 957 958 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
106
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

1980 15 scale_shear_mat 4 2138 26 LMatrix4d::scale_shear_mat 0 4 959 960 961 962 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
137
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

1981 13 y_to_z_up_mat 4 2138 24 LMatrix4d::y_to_z_up_mat 0 1 963 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

1982 13 z_to_y_up_mat 4 2138 24 LMatrix4d::z_to_y_up_mat 0 1 964 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

1983 11 convert_mat 4 2138 22 LMatrix4d::convert_mat 0 1 965 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

1984 12 almost_equal 4 2138 23 LMatrix4d::almost_equal 0 2 966 967 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
77
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;

1985 6 output 4 2138 17 LMatrix4d::output 0 1 968 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

1986 5 write 4 2138 16 LMatrix4d::write 0 2 969 970 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

1987 11 python_repr 4 2138 22 LMatrix4d::python_repr 0 1 971 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1988 14 get_class_type 4 2138 25 LMatrix4d::get_class_type 0 1 972 0
50
static TypeHandle LMatrix4d::get_class_type(void);

1989 10 ~LMatrix4d 4 2138 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

1990 10 operator * 1 0 10 operator * 0 16 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 0
70
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);

1991 22 generic_write_datagram 1 0 22 generic_write_datagram 0 4 1172 1173 1174 1175 0
75
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);

1992 21 generic_read_datagram 1 0 21 generic_read_datagram 0 4 1176 1177 1178 1179 0
79
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);

1993 14 compose_matrix 1 0 14 compose_matrix 0 16 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 0
152
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

1994 16 decompose_matrix 1 0 16 decompose_matrix 0 16 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 0
142
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));

1995 22 compose_matrix_old_hpr 1 0 22 compose_matrix_old_hpr 0 8 1212 1213 1214 1215 1216 1217 1218 1219 0
153
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

1996 24 decompose_matrix_old_hpr 1 0 24 decompose_matrix_old_hpr 0 8 1220 1221 1222 1223 1224 1225 1226 1227 0
143
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));

1997 22 compose_matrix_new_hpr 1 0 22 compose_matrix_new_hpr 0 8 1228 1229 1230 1231 1232 1233 1234 1235 0
153
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

1998 24 decompose_matrix_new_hpr 1 0 24 decompose_matrix_new_hpr 0 8 1236 1237 1238 1239 1240 1241 1242 1243 0
143
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));

1999 14 old_to_new_hpr 1 0 14 old_to_new_hpr 0 2 1244 1245 0
53
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);

2000 14 new_to_old_hpr 1 0 14 new_to_old_hpr 0 2 1246 1247 0
53
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);

2001 12 LQuaternionf 4 2139 26 LQuaternionf::LQuaternionf 0 4 973 974 975 976 3168
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
40
inline LQuaternionf::LQuaternionf(void);

2002 14 pure_imaginary 4 2139 28 LQuaternionf::pure_imaginary 0 1 977 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

2003 9 conjugate 4 2139 23 LQuaternionf::conjugate 0 1 978 532
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

2004 5 xform 4 2139 19 LQuaternionf::xform 0 2 979 980 1074
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
65
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;

2005 8 multiply 4 2139 22 LQuaternionf::multiply 0 1 981 512
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

2006 10 operator - 68 2139 24 LQuaternionf::operator - 0 1 982 0
57
inline LQuaternionf LQuaternionf::operator -(void) const;

2007 10 operator + 4 2139 24 LQuaternionf::operator + 0 1 983 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

2008 10 operator - 4 2139 24 LQuaternionf::operator - 0 1 984 902
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

2009 9 angle_rad 4 2139 23 LQuaternionf::angle_rad 0 1 985 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

2010 9 angle_deg 4 2139 23 LQuaternionf::angle_deg 0 1 986 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

2011 10 operator * 4 2139 24 LQuaternionf::operator * 0 4 987 988 989 990 1918
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator *(float scalar) const;

2012 10 operator / 4 2139 24 LQuaternionf::operator / 0 1 991 458
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

2013 11 operator *= 4 2139 25 LQuaternionf::operator *= 0 1 992 476
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

2014 12 almost_equal 4 2139 26 LQuaternionf::almost_equal 0 2 993 994 1338
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
72
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;

2015 17 is_same_direction 4 2139 31 LQuaternionf::is_same_direction 0 1 995 750
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

2016 21 almost_same_direction 4 2139 35 LQuaternionf::almost_same_direction 0 1 996 676
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

2017 6 output 4 2139 20 LQuaternionf::output 0 1 997 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

2018 17 extract_to_matrix 4 2139 31 LQuaternionf::extract_to_matrix 0 2 998 999 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
57
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;

2019 15 set_from_matrix 4 2139 29 LQuaternionf::set_from_matrix 0 2 1000 1001 955
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
55
void LQuaternionf::set_from_matrix(LMatrix3f const &m);

2020 7 set_hpr 4 2139 21 LQuaternionf::set_hpr 0 2 1002 1003 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

2021 7 get_hpr 4 2139 21 LQuaternionf::get_hpr 0 2 1004 1005 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (CS_default)) const;

2022 8 get_axis 4 2139 22 LQuaternionf::get_axis 0 1 1006 866
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

2023 19 get_axis_normalized 4 2139 33 LQuaternionf::get_axis_normalized 0 1 1007 810
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

2024 13 get_angle_rad 4 2139 27 LQuaternionf::get_angle_rad 0 1 1008 920
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

2025 9 get_angle 4 2139 23 LQuaternionf::get_angle 0 1 1009 912
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

2026 23 set_from_axis_angle_rad 4 2139 37 LQuaternionf::set_from_axis_angle_rad 0 1 1010 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

2027 19 set_from_axis_angle 4 2139 33 LQuaternionf::set_from_axis_angle 0 1 1011 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

2028 6 get_up 4 2139 20 LQuaternionf::get_up 0 2 1012 1013 632
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (CS_default)) const;

2029 9 get_right 4 2139 23 LQuaternionf::get_right 0 2 1014 1015 642
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (CS_default)) const;

2030 11 get_forward 4 2139 25 LQuaternionf::get_forward 0 2 1016 1017 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (CS_default)) const;

2031 5 get_r 4 2139 19 LQuaternionf::get_r 0 1 1018 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

2032 5 get_i 4 2139 19 LQuaternionf::get_i 0 1 1019 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

2033 5 get_j 4 2139 19 LQuaternionf::get_j 0 1 1020 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

2034 5 get_k 4 2139 19 LQuaternionf::get_k 0 1 1021 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

2035 5 set_r 4 2139 19 LQuaternionf::set_r 0 1 1022 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

2036 5 set_i 4 2139 19 LQuaternionf::set_i 0 1 1023 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

2037 5 set_j 4 2139 19 LQuaternionf::set_j 0 1 1024 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

2038 5 set_k 4 2139 19 LQuaternionf::set_k 0 1 1025 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

2039 9 normalize 4 2139 23 LQuaternionf::normalize 0 1 1026 438
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

2040 14 conjugate_from 4 2139 28 LQuaternionf::conjugate_from 0 1 1027 1636
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

2041 18 conjugate_in_place 4 2139 32 LQuaternionf::conjugate_in_place 0 1 1028 760
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

2042 11 invert_from 4 2139 25 LQuaternionf::invert_from 0 1 1029 1590
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

2043 15 invert_in_place 4 2139 29 LQuaternionf::invert_in_place 0 1 1030 722
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

2044 11 is_identity 4 2139 25 LQuaternionf::is_identity 0 1 1031 646
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

2045 18 is_almost_identity 4 2139 32 LQuaternionf::is_almost_identity 0 1 1032 684
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

2046 10 ident_quat 4 2139 24 LQuaternionf::ident_quat 0 1 1033 520
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

2047 14 get_class_type 4 2139 28 LQuaternionf::get_class_type 0 1 1034 0
53
static TypeHandle LQuaternionf::get_class_type(void);

2048 13 ~LQuaternionf 4 2139 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

2049 12 LQuaterniond 4 2140 26 LQuaterniond::LQuaterniond 0 4 1035 1036 1037 1038 1583
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
40
inline LQuaterniond::LQuaterniond(void);

2050 14 pure_imaginary 4 2140 28 LQuaterniond::pure_imaginary 0 1 1039 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

2051 9 conjugate 4 2140 23 LQuaterniond::conjugate 0 1 1040 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

2052 5 xform 4 2140 19 LQuaterniond::xform 0 2 1041 1042 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
65
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;

2053 8 multiply 4 2140 22 LQuaterniond::multiply 0 1 1043 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

2054 10 operator - 68 2140 24 LQuaterniond::operator - 0 1 1044 0
57
inline LQuaterniond LQuaterniond::operator -(void) const;

2055 10 operator + 4 2140 24 LQuaterniond::operator + 0 1 1045 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

2056 10 operator - 4 2140 24 LQuaterniond::operator - 0 1 1046 450
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

2057 9 angle_rad 4 2140 23 LQuaterniond::angle_rad 0 1 1047 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

2058 9 angle_deg 4 2140 23 LQuaterniond::angle_deg 0 1 1048 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

2059 10 operator * 4 2140 24 LQuaterniond::operator * 0 4 1049 1050 1051 1052 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator *(double scalar) const;

2060 10 operator / 4 2140 24 LQuaterniond::operator / 0 1 1053 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

2061 11 operator *= 4 2140 25 LQuaterniond::operator *= 0 1 1054 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

2062 12 almost_equal 4 2140 26 LQuaterniond::almost_equal 0 2 1055 1056 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
72
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;

2063 17 is_same_direction 4 2140 31 LQuaterniond::is_same_direction 0 1 1057 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

2064 21 almost_same_direction 4 2140 35 LQuaterniond::almost_same_direction 0 1 1058 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

2065 6 output 4 2140 20 LQuaterniond::output 0 1 1059 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

2066 17 extract_to_matrix 4 2140 31 LQuaterniond::extract_to_matrix 0 2 1060 1061 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
57
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;

2067 15 set_from_matrix 4 2140 29 LQuaterniond::set_from_matrix 0 2 1062 1063 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
55
void LQuaterniond::set_from_matrix(LMatrix3d const &m);

2068 7 set_hpr 4 2140 21 LQuaterniond::set_hpr 0 2 1064 1065 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));

2069 7 get_hpr 4 2140 21 LQuaterniond::get_hpr 0 2 1066 1067 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (CS_default)) const;

2070 8 get_axis 4 2140 22 LQuaterniond::get_axis 0 1 1068 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

2071 19 get_axis_normalized 4 2140 33 LQuaterniond::get_axis_normalized 0 1 1069 404
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

2072 13 get_angle_rad 4 2140 27 LQuaterniond::get_angle_rad 0 1 1070 459
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

2073 9 get_angle 4 2140 23 LQuaterniond::get_angle 0 1 1071 455
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

2074 23 set_from_axis_angle_rad 4 2140 37 LQuaterniond::set_from_axis_angle_rad 0 1 1072 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

2075 19 set_from_axis_angle 4 2140 33 LQuaterniond::set_from_axis_angle 0 1 1073 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

2076 6 get_up 4 2140 20 LQuaterniond::get_up 0 2 1074 1075 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (CS_default)) const;

2077 9 get_right 4 2140 23 LQuaterniond::get_right 0 2 1076 1077 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (CS_default)) const;

2078 11 get_forward 4 2140 25 LQuaterniond::get_forward 0 2 1078 1079 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (CS_default)) const;

2079 5 get_r 4 2140 19 LQuaterniond::get_r 0 1 1080 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

2080 5 get_i 4 2140 19 LQuaterniond::get_i 0 1 1081 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

2081 5 get_j 4 2140 19 LQuaterniond::get_j 0 1 1082 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

2082 5 get_k 4 2140 19 LQuaterniond::get_k 0 1 1083 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

2083 5 set_r 4 2140 19 LQuaterniond::set_r 0 1 1084 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

2084 5 set_i 4 2140 19 LQuaterniond::set_i 0 1 1085 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

2085 5 set_j 4 2140 19 LQuaterniond::set_j 0 1 1086 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

2086 5 set_k 4 2140 19 LQuaterniond::set_k 0 1 1087 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

2087 9 normalize 4 2140 23 LQuaterniond::normalize 0 1 1088 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

2088 14 conjugate_from 4 2140 28 LQuaterniond::conjugate_from 0 1 1089 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

2089 18 conjugate_in_place 4 2140 32 LQuaterniond::conjugate_in_place 0 1 1090 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

2090 11 invert_from 4 2140 25 LQuaterniond::invert_from 0 1 1091 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

2091 15 invert_in_place 4 2140 29 LQuaterniond::invert_in_place 0 1 1092 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

2092 11 is_identity 4 2140 25 LQuaterniond::is_identity 0 1 1093 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

2093 18 is_almost_identity 4 2140 32 LQuaterniond::is_almost_identity 0 1 1094 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

2094 10 ident_quat 4 2140 24 LQuaterniond::ident_quat 0 1 1095 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

2095 14 get_class_type 4 2140 28 LQuaterniond::get_class_type 0 1 1096 0
53
static TypeHandle LQuaterniond::get_class_type(void);

2096 13 ~LQuaterniond 4 2140 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

2097 10 LRotationf 4 2141 22 LRotationf::LRotationf 0 8 1097 1098 1099 1100 1101 1102 1103 1104 5108
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////

// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
36
inline LRotationf::LRotationf(void);

2098 10 operator * 4 2141 22 LRotationf::operator * 0 3 1105 1106 1107 1708
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator *(float scalar) const;

2099 10 operator / 4 2141 22 LRotationf::operator / 0 1 1108 450
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator /(float scalar) const;

2100 14 get_class_type 4 2141 26 LRotationf::get_class_type 0 1 1109 0
51
static TypeHandle LRotationf::get_class_type(void);

2101 11 ~LRotationf 4 2141 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

2102 10 LRotationd 4 2142 22 LRotationd::LRotationd 0 8 1110 1111 1112 1113 1114 1115 1116 1117 2553
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
36
inline LRotationd::LRotationd(void);

2103 10 operator * 4 2142 22 LRotationd::operator * 0 3 1118 1119 1120 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator *(double scalar) const;

2104 10 operator / 4 2142 22 LRotationd::operator / 0 1 1121 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator /(double scalar) const;

2105 14 get_class_type 4 2142 26 LRotationd::get_class_type 0 1 1122 0
51
static TypeHandle LRotationd::get_class_type(void);

2106 11 ~LRotationd 4 2142 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

2107 13 LOrientationf 4 2143 28 LOrientationf::LOrientationf 0 6 1123 1124 1125 1126 1127 1128 4140
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////

// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
42
inline LOrientationf::LOrientationf(void);

2108 10 operator * 4 2143 25 LOrientationf::operator * 0 2 1129 1130 1334
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
78
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;

2109 14 get_class_type 4 2143 29 LOrientationf::get_class_type 0 1 1131 0
54
static TypeHandle LOrientationf::get_class_type(void);

2110 14 ~LOrientationf 4 2143 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

2111 13 LOrientationd 4 2144 28 LOrientationd::LOrientationd 0 6 1132 1133 1134 1135 1136 1137 2069
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
42
inline LOrientationd::LOrientationd(void);

2112 10 operator * 4 2144 25 LOrientationd::operator * 0 2 1138 1139 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
78
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;

2113 14 get_class_type 4 2144 29 LOrientationd::get_class_type 0 1 1140 0
54
static TypeHandle LOrientationd::get_class_type(void);

2114 14 ~LOrientationd 4 2144 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

1247
1 14 Dtool_VZN3gaIU 7 2 2145 1255 14 Dtool_VZN3gaIU 0 
2 14 Dtool_VZN3VQfL 7 2 2145 1255 14 Dtool_VZN3VQfL 1 4 copy 1 2146  
3 14 Dtool_VZN3lRq3 7 2 2145 1255 14 Dtool_VZN3lRq3 1 10 fill_value 1 2148  
4 14 Dtool_VZN3oQsK 7 2 2145 1255 14 Dtool_VZN3oQsK 2 1 x 1 2148  1 y 1 2148  
5 14 Dtool_VZN3_ub0 6 3 2145 0 14 Dtool_VZN3_ub0 2 4 this 3 2145  4 copy 1 2146  
6 14 Dtool_VZN3_fng 6 3 2145 0 14 Dtool_VZN3_fng 2 4 this 3 2145  10 fill_value 1 2148  
7 14 Dtool_VZN3xPnZ 4 4 2150 0 14 Dtool_VZN3xPnZ 2 4 this 3 2145  4 size 1 2149  
8 14 Dtool_VZN3fGvP 6 6 2146 0 14 Dtool_VZN3fGvP 0 
9 14 Dtool_VZN3aClz 6 7 2146 0 14 Dtool_VZN3aClz 0 
10 14 Dtool_VZN3VCzP 6 8 2146 0 14 Dtool_VZN3VCzP 0 
11 14 Dtool_VZN3Y1X1 4 10 2150 0 14 Dtool_VZN3Y1X1 2 4 this 3 2145  1 i 1 2151  
12 14 Dtool_VZN36qLS 6 10 2148 0 14 Dtool_VZN36qLS 2 4 this 3 2146  1 i 1 2151  
13 14 Dtool_VZN3I5WA 6 11 2152 0 14 Dtool_VZN3I5WA 1 4 this 3 2146  
14 14 Dtool_VZN3y_vl 6 12 2148 0 14 Dtool_VZN3y_vl 2 4 this 3 2146  1 i 1 2151  
15 14 Dtool_VZN3uYPR 6 13 2148 0 14 Dtool_VZN3uYPR 1 4 this 3 2146  
16 14 Dtool_VZN3u8IW 6 14 2148 0 14 Dtool_VZN3u8IW 1 4 this 3 2146  
17 14 Dtool_VZN3nQnT 4 15 2150 0 14 Dtool_VZN3nQnT 3 4 this 3 2145  1 i 1 2151  5 value 1 2148  
18 14 Dtool_VZN3gvpl 4 16 2150 0 14 Dtool_VZN3gvpl 2 4 this 3 2145  5 value 1 2148  
19 14 Dtool_VZN3gLiq 4 17 2150 0 14 Dtool_VZN3gLiq 2 4 this 3 2145  5 value 1 2148  
20 14 Dtool_VZN3qznS 4 18 2150 0 14 Dtool_VZN3qznS 3 4 this 3 2145  1 i 1 2151  5 value 1 2148  
21 14 Dtool_VZN3BpGk 4 19 2150 0 14 Dtool_VZN3BpGk 2 4 this 3 2145  5 value 1 2148  
22 14 Dtool_VZN3BN_o 4 20 2150 0 14 Dtool_VZN3BN_o 2 4 this 3 2145  5 value 1 2148  
23 14 Dtool_VZN3MuTE 4 21 2150 0 14 Dtool_VZN3MuTE 1 4 this 3 2146  
24 14 Dtool_VZN3dEX3 6 22 2151 0 14 Dtool_VZN3dEX3 1 4 this 3 2146  
25 14 Dtool_VZN391nF 4 23 2150 0 14 Dtool_VZN391nF 2 4 this 3 2145  10 fill_value 1 2148  
26 14 Dtool_VZN3mT_9 4 24 2150 0 14 Dtool_VZN3mT_9 3 4 this 3 2145  1 x 1 2148  1 y 1 2148  
27 14 Dtool_VZN39RXz 6 25 2148 0 14 Dtool_VZN39RXz 2 4 this 3 2146  5 other 1 2146  
28 14 Dtool_VZN3JkIg 6 26 2152 0 14 Dtool_VZN3JkIg 2 4 this 3 2146  5 other 1 2146  
29 14 Dtool_VZN3ssYs 6 27 2152 0 14 Dtool_VZN3ssYs 2 4 this 3 2146  5 other 1 2146  
30 14 Dtool_VZN3oMAb 6 28 2152 0 14 Dtool_VZN3oMAb 2 4 this 3 2146  5 other 1 2146  
31 14 Dtool_VZN3VWAg 6 29 2151 0 14 Dtool_VZN3VWAg 2 4 this 3 2146  5 other 1 2146  
32 14 Dtool_VZN3gmxE 6 29 2151 0 14 Dtool_VZN3gmxE 3 4 this 3 2146  5 other 1 2146  9 threshold 1 2148  
33 14 Dtool_VZN3it5w 6 30 2149 0 14 Dtool_VZN3it5w 1 4 this 3 2146  
34 14 Dtool_VZN3cmf3 6 30 2149 0 14 Dtool_VZN3cmf3 2 4 this 3 2146  9 threshold 1 2148  
35 14 Dtool_VZN3T3v_ 6 31 2149 0 14 Dtool_VZN3T3v_ 2 4 this 3 2146  4 hash 1 2149  
36 14 Dtool_VZN3kEhk 6 31 2149 0 14 Dtool_VZN3kEhk 3 4 this 3 2146  4 hash 1 2149  9 threshold 1 2148  
37 14 Dtool_VZN3WPOu 7 32 2145 1255 14 Dtool_VZN3WPOu 1 4 this 3 2146  
38 14 Dtool_VZN3KsJ6 7 33 2145 1255 14 Dtool_VZN3KsJ6 2 4 this 3 2146  5 other 1 2146  
39 14 Dtool_VZN3LcrN 7 34 2145 1255 14 Dtool_VZN3LcrN 2 4 this 3 2146  5 other 1 2146  
40 14 Dtool_VZN30d1B 7 35 2145 1255 14 Dtool_VZN30d1B 2 4 this 3 2146  6 scalar 1 2148  
41 14 Dtool_VZN301py 7 36 2145 1255 14 Dtool_VZN301py 2 4 this 3 2146  6 scalar 1 2148  
42 14 Dtool_VZN3_q3M 6 37 2145 0 14 Dtool_VZN3_q3M 2 4 this 3 2145  5 other 1 2146  
43 14 Dtool_VZN3_aZg 6 38 2145 0 14 Dtool_VZN3_aZg 2 4 this 3 2145  5 other 1 2146  
44 14 Dtool_VZN3iYvI 6 39 2145 0 14 Dtool_VZN3iYvI 2 4 this 3 2145  6 scalar 1 2148  
45 14 Dtool_VZN3igj5 6 40 2145 0 14 Dtool_VZN3igj5 2 4 this 3 2145  6 scalar 1 2148  
46 14 Dtool_VZN3KIsE 7 41 2145 1255 14 Dtool_VZN3KIsE 2 4 this 3 2145  5 other 1 2146  
47 14 Dtool_VZN3oFND 7 42 2145 1255 14 Dtool_VZN3oFND 2 4 this 3 2145  5 other 1 2146  
48 14 Dtool_VZN3NeTt 6 43 2152 0 14 Dtool_VZN3NeTt 2 4 this 3 2146  5 other 1 2146  
49 14 Dtool_VZN3nTFd 6 43 2152 0 14 Dtool_VZN3nTFd 3 4 this 3 2146  5 other 1 2146  9 threshold 1 2148  
50 14 Dtool_VZN3pO8G 4 44 2150 0 14 Dtool_VZN3pO8G 2 4 this 3 2146  3 out 1 2153  
51 14 Dtool_VZN3iNXa 4 45 2150 0 14 Dtool_VZN3iNXa 3 4 this 3 2146  3 out 1 2153  10 class_name 1 2155  
52 14 Dtool_VZN3KNOA 7 46 2157 0 14 Dtool_VZN3KNOA 0 
53 14 Dtool_VZN3GdnQ 7 48 2158 1300 14 Dtool_VZN3GdnQ 0 
54 14 Dtool_VZN3CUdE 7 48 2158 1300 14 Dtool_VZN3CUdE 1 4 copy 1 2159  
55 14 Dtool_VZN3i9B6 7 48 2158 1300 14 Dtool_VZN3i9B6 1 10 fill_value 1 2161  
56 14 Dtool_VZN3CY0M 7 48 2158 1300 14 Dtool_VZN3CY0M 2 1 x 1 2161  1 y 1 2161  
57 14 Dtool_VZN3G77A 6 49 2158 0 14 Dtool_VZN3G77A 2 4 this 3 2158  4 copy 1 2159  
58 14 Dtool_VZN3jNf2 6 49 2158 0 14 Dtool_VZN3jNf2 2 4 this 3 2158  10 fill_value 1 2161  
59 14 Dtool_VZN3v7np 4 50 2150 0 14 Dtool_VZN3v7np 2 4 this 3 2158  4 size 1 2149  
60 14 Dtool_VZN3xrvf 6 52 2159 0 14 Dtool_VZN3xrvf 0 
61 14 Dtool_VZN352lD 6 53 2159 0 14 Dtool_VZN352lD 0 
62 14 Dtool_VZN372zf 6 54 2159 0 14 Dtool_VZN372zf 0 
63 14 Dtool_VZN35ZXF 4 56 2150 0 14 Dtool_VZN35ZXF 2 4 this 3 2158  1 i 1 2151  
64 14 Dtool_VZN3cHLi 6 56 2161 0 14 Dtool_VZN3cHLi 2 4 this 3 2159  1 i 1 2151  
65 14 Dtool_VZN3muWQ 6 57 2152 0 14 Dtool_VZN3muWQ 1 4 this 3 2159  
66 14 Dtool_VZN3Urv1 6 58 2161 0 14 Dtool_VZN3Urv1 2 4 this 3 2159  1 i 1 2151  
67 14 Dtool_VZN3QsPh 6 59 2161 0 14 Dtool_VZN3QsPh 1 4 this 3 2159  
68 14 Dtool_VZN3QIIm 6 60 2161 0 14 Dtool_VZN3QIIm 1 4 this 3 2159  
69 14 Dtool_VZN33_g8 4 61 2150 0 14 Dtool_VZN33_g8 3 4 this 3 2158  1 i 1 2151  5 value 1 2161  
70 14 Dtool_VZN3KZlY 4 62 2150 0 14 Dtool_VZN3KZlY 2 4 this 3 2158  5 value 1 2161  
71 14 Dtool_VZN3K9dd 4 63 2150 0 14 Dtool_VZN3K9dd 2 4 this 3 2158  5 value 1 2161  
72 14 Dtool_VZN30P6a 4 64 2150 0 14 Dtool_VZN30P6a 3 4 this 3 2158  1 i 1 2151  5 value 1 2161  
73 14 Dtool_VZN3rQCX 4 65 2150 0 14 Dtool_VZN3rQCX 2 4 this 3 2158  5 value 1 2161  
74 14 Dtool_VZN3r06b 4 66 2150 0 14 Dtool_VZN3r06b 2 4 this 3 2158  5 value 1 2161  
75 14 Dtool_VZN3u9TU 4 67 2150 0 14 Dtool_VZN3u9TU 1 4 this 3 2159  
76 14 Dtool_VZN38xWH 6 68 2151 0 14 Dtool_VZN38xWH 1 4 this 3 2159  
77 14 Dtool_VZN3sasc 4 69 2150 0 14 Dtool_VZN3sasc 2 4 this 3 2158  10 fill_value 1 2161  
78 14 Dtool_VZN3bAy_ 4 70 2150 0 14 Dtool_VZN3bAy_ 3 4 this 3 2158  1 x 1 2161  1 y 1 2161  
79 14 Dtool_VZN3cCJC 6 71 2161 0 14 Dtool_VZN3cCJC 2 4 this 3 2159  5 other 1 2159  
80 14 Dtool_VZN3Leos 6 72 2152 0 14 Dtool_VZN3Leos 2 4 this 3 2159  5 other 1 2159  
81 14 Dtool_VZN3gLYM 6 73 2152 0 14 Dtool_VZN3gLYM 2 4 this 3 2159  5 other 1 2159  
82 14 Dtool_VZN3trA7 6 74 2152 0 14 Dtool_VZN3trA7 2 4 this 3 2159  5 other 1 2159  
83 14 Dtool_VZN3cKgs 6 75 2151 0 14 Dtool_VZN3cKgs 2 4 this 3 2159  5 other 1 2159  
84 14 Dtool_VZN3e1W3 6 75 2151 0 14 Dtool_VZN3e1W3 3 4 this 3 2159  5 other 1 2159  9 threshold 1 2161  
85 14 Dtool_VZN3F_5A 6 76 2149 0 14 Dtool_VZN3F_5A 1 4 this 3 2159  
86 14 Dtool_VZN31_3f 6 76 2149 0 14 Dtool_VZN31_3f 2 4 this 3 2159  9 threshold 1 2161  
87 14 Dtool_VZN3wrvP 6 77 2149 0 14 Dtool_VZN3wrvP 2 4 this 3 2159  4 hash 1 2149  
88 14 Dtool_VZN3_Zma 6 77 2149 0 14 Dtool_VZN3_Zma 3 4 this 3 2159  4 hash 1 2149  9 threshold 1 2161  
89 14 Dtool_VZN34yP_ 7 78 2158 1300 14 Dtool_VZN34yP_ 1 4 this 3 2159  
90 14 Dtool_VZN3FWpG 7 79 2158 1300 14 Dtool_VZN3FWpG 2 4 this 3 2159  5 other 1 2159  
91 14 Dtool_VZN3FmLa 7 80 2158 1300 14 Dtool_VZN3FmLa 2 4 this 3 2159  5 other 1 2159  
92 14 Dtool_VZN3P52U 7 81 2158 1300 14 Dtool_VZN3P52U 2 4 this 3 2159  6 scalar 1 2161  
93 14 Dtool_VZN3IRtF 7 82 2158 1300 14 Dtool_VZN3IRtF 2 4 this 3 2159  6 scalar 1 2161  
94 14 Dtool_VZN3zz2s 6 83 2158 0 14 Dtool_VZN3zz2s 2 4 this 3 2158  5 other 1 2159  
95 14 Dtool_VZN38DYA 6 84 2158 0 14 Dtool_VZN38DYA 2 4 this 3 2158  5 other 1 2159  
96 14 Dtool_VZN3WC3U 6 85 2158 0 14 Dtool_VZN3WC3U 2 4 this 3 2158  6 scalar 1 2161  
97 14 Dtool_VZN3X6rF 6 86 2158 0 14 Dtool_VZN3X6rF 2 4 this 3 2158  6 scalar 1 2161  
98 14 Dtool_VZN3mSot 7 87 2158 1300 14 Dtool_VZN3mSot 2 4 this 3 2158  5 other 1 2159  
99 14 Dtool_VZN3EfJs 7 88 2158 1300 14 Dtool_VZN3EfJs 2 4 this 3 2158  5 other 1 2159  
100 14 Dtool_VZN3nTK9 6 89 2152 0 14 Dtool_VZN3nTK9 2 4 this 3 2159  5 other 1 2159  
101 14 Dtool_VZN3_OqN 6 89 2152 0 14 Dtool_VZN3_OqN 3 4 this 3 2159  5 other 1 2159  9 threshold 1 2161  
102 14 Dtool_VZN3SB9W 4 90 2150 0 14 Dtool_VZN3SB9W 2 4 this 3 2159  3 out 1 2153  
103 14 Dtool_VZN3HCWq 4 91 2150 0 14 Dtool_VZN3HCWq 3 4 this 3 2159  3 out 1 2153  10 class_name 1 2155  
104 14 Dtool_VZN3vAPQ 7 92 2157 0 14 Dtool_VZN3vAPQ 0 
105 14 Dtool_VZN3Qv_8 7 94 2162 1353 14 Dtool_VZN3Qv_8 0 
106 14 Dtool_VZN3_wFf 7 94 2162 1353 14 Dtool_VZN3_wFf 1 4 copy 1 2146  
107 14 Dtool_VZN3tvIb 7 94 2162 1353 14 Dtool_VZN3tvIb 1 10 fill_value 1 2148  
108 14 Dtool_VZN3Os00 7 94 2162 1353 14 Dtool_VZN3Os00 2 1 x 1 2148  1 y 1 2148  
109 14 Dtool_VZN3rg1b 6 95 2162 0 14 Dtool_VZN3rg1b 2 4 this 3 2162  4 copy 1 2146  
110 14 Dtool_VZN3OfPd 6 95 2162 0 14 Dtool_VZN3OfPd 2 4 this 3 2162  10 fill_value 1 2148  
111 14 Dtool_VZN3MCtA 6 96 2163 0 14 Dtool_VZN3MCtA 0 
112 14 Dtool_VZN3yI1V 6 97 2163 0 14 Dtool_VZN3yI1V 0 
113 14 Dtool_VZN3ykua 6 98 2163 0 14 Dtool_VZN3ykua 0 
114 14 Dtool_VZN3VMph 7 99 2162 1353 14 Dtool_VZN3VMph 1 4 this 3 2163  
115 14 Dtool_VZN3JC_P 7 100 2145 1255 14 Dtool_VZN3JC_P 2 4 this 3 2163  5 other 1 2146  
116 14 Dtool_VZN3jfKg 7 100 2162 1353 14 Dtool_VZN3jfKg 2 4 this 3 2163  5 other 1 2163  
117 14 Dtool_VZN3pPmQ 7 101 2145 1255 14 Dtool_VZN3pPmQ 2 4 this 3 2163  5 other 1 2146  
118 14 Dtool_VZN3Dbxg 7 101 2162 1353 14 Dtool_VZN3Dbxg 2 4 this 3 2163  5 other 1 2163  
119 14 Dtool_VZN3hCF_ 6 102 2148 0 14 Dtool_VZN3hCF_ 1 4 this 3 2163  
120 14 Dtool_VZN3DsDZ 6 103 2148 0 14 Dtool_VZN3DsDZ 1 4 this 3 2163  
121 14 Dtool_VZN3ugwG 6 104 2152 0 14 Dtool_VZN3ugwG 1 4 this 3 2162  
122 14 Dtool_VZN3dPP0 7 105 2162 1353 14 Dtool_VZN3dPP0 2 4 this 3 2163  6 scalar 1 2148  
123 14 Dtool_VZN3tnx1 7 106 2162 1353 14 Dtool_VZN3tnx1 2 4 this 3 2163  6 scalar 1 2148  
124 14 Dtool_VZN3fA9I 4 107 2150 0 14 Dtool_VZN3fA9I 3 4 this 3 2163  3 out 1 2153  10 class_name 1 2155  
125 14 Dtool_VZN3hYMy 7 108 2157 0 14 Dtool_VZN3hYMy 0 
126 14 Dtool_VZN3wcd5 7 111 2165 1369 14 Dtool_VZN3wcd5 0 
127 14 Dtool_VZN3qdIZ 7 111 2165 1369 14 Dtool_VZN3qdIZ 1 4 copy 1 2159  
128 14 Dtool_VZN3eGDk 7 111 2165 1369 14 Dtool_VZN3eGDk 1 10 fill_value 1 2161  
129 14 Dtool_VZN3Ay7S 7 111 2165 1369 14 Dtool_VZN3Ay7S 2 1 x 1 2161  1 y 1 2161  
130 14 Dtool_VZN3zhOK 6 112 2165 0 14 Dtool_VZN3zhOK 2 4 this 3 2165  4 copy 1 2159  
131 14 Dtool_VZN32_5n 6 112 2165 0 14 Dtool_VZN32_5n 2 4 this 3 2165  10 fill_value 1 2161  
132 14 Dtool_VZN30FN9 6 113 2166 0 14 Dtool_VZN30FN9 0 
133 14 Dtool_VZN3pXVS 6 114 2166 0 14 Dtool_VZN3pXVS 0 
134 14 Dtool_VZN3p7OX 6 115 2166 0 14 Dtool_VZN3p7OX 0 
135 14 Dtool_VZN3ONJe 7 116 2165 1369 14 Dtool_VZN3ONJe 1 4 this 3 2166  
136 14 Dtool_VZN3gDY_ 7 117 2158 1300 14 Dtool_VZN3gDY_ 2 4 this 3 2166  5 other 1 2159  
137 14 Dtool_VZN3KsOa 7 117 2165 1369 14 Dtool_VZN3KsOa 2 4 this 3 2166  5 other 1 2166  
138 14 Dtool_VZN3AO__ 7 118 2158 1300 14 Dtool_VZN3AO__ 2 4 this 3 2166  5 other 1 2159  
139 14 Dtool_VZN3qo1a 7 118 2165 1369 14 Dtool_VZN3qo1a 2 4 this 3 2166  5 other 1 2166  
140 14 Dtool_VZN3aNl6 6 119 2161 0 14 Dtool_VZN3aNl6 1 4 this 3 2166  
141 14 Dtool_VZN3qsjV 6 120 2161 0 14 Dtool_VZN3qsjV 1 4 this 3 2166  
142 14 Dtool_VZN3XhQD 6 121 2152 0 14 Dtool_VZN3XhQD 1 4 this 3 2165  
143 14 Dtool_VZN3_Z18 7 122 2165 1369 14 Dtool_VZN3_Z18 2 4 this 3 2166  6 scalar 1 2161  
144 14 Dtool_VZN3vwW_ 7 123 2165 1369 14 Dtool_VZN3vwW_ 2 4 this 3 2166  6 scalar 1 2161  
145 14 Dtool_VZN32DdF 4 124 2150 0 14 Dtool_VZN32DdF 3 4 this 3 2166  3 out 1 2153  10 class_name 1 2155  
146 14 Dtool_VZN34Zsu 7 125 2157 0 14 Dtool_VZN34Zsu 0 
147 14 Dtool_VZN3zKKY 7 128 2168 1382 14 Dtool_VZN3zKKY 0 
148 14 Dtool_VZN3tY8N 7 128 2168 1382 14 Dtool_VZN3tY8N 1 4 copy 1 2146  
149 14 Dtool_VZN3CtvQ 7 128 2168 1382 14 Dtool_VZN3CtvQ 1 10 fill_value 1 2148  
150 14 Dtool_VZN3qlQB 7 128 2168 1382 14 Dtool_VZN3qlQB 2 1 x 1 2148  1 y 1 2148  
151 14 Dtool_VZN3_egO 6 129 2168 0 14 Dtool_VZN3_egO 2 4 this 3 2168  4 copy 1 2146  
152 14 Dtool_VZN3qvjK 6 129 2168 0 14 Dtool_VZN3qvjK 2 4 this 3 2168  10 fill_value 1 2148  
153 14 Dtool_VZN3qnt3 6 130 2169 0 14 Dtool_VZN3qnt3 0 
154 14 Dtool_VZN3CGWE 6 131 2169 0 14 Dtool_VZN3CGWE 0 
155 14 Dtool_VZN3aRgE 6 132 2169 0 14 Dtool_VZN3aRgE 0 
156 14 Dtool_VZN301sU 7 133 2168 1382 14 Dtool_VZN301sU 1 4 this 3 2169  
157 14 Dtool_VZN3sVHw 7 134 2145 1255 14 Dtool_VZN3sVHw 2 4 this 3 2169  5 other 1 2146  
158 14 Dtool_VZN3f_os 7 134 2168 1382 14 Dtool_VZN3f_os 2 4 this 3 2169  5 other 1 2163  
159 14 Dtool_VZN3YCqi 7 135 2162 1353 14 Dtool_VZN3YCqi 2 4 this 3 2169  5 other 1 2169  
160 14 Dtool_VZN33nIw 7 135 2145 1255 14 Dtool_VZN33nIw 2 4 this 3 2169  5 other 1 2146  
161 14 Dtool_VZN3ggps 7 135 2168 1382 14 Dtool_VZN3ggps 2 4 this 3 2169  5 other 1 2163  
162 14 Dtool_VZN3ULR7 7 136 2168 1382 14 Dtool_VZN3ULR7 2 4 this 3 2169  6 scalar 1 2148  
163 14 Dtool_VZN3rFUb 7 137 2168 1382 14 Dtool_VZN3rFUb 2 4 this 3 2169  6 scalar 1 2148  
164 14 Dtool_VZN3Fi0t 4 138 2150 0 14 Dtool_VZN3Fi0t 3 4 this 3 2169  3 out 1 2153  10 class_name 1 2155  
165 14 Dtool_VZN3ntNT 7 139 2157 0 14 Dtool_VZN3ntNT 0 
166 14 Dtool_VZN3tKnR 7 142 2171 1395 14 Dtool_VZN3tKnR 0 
167 14 Dtool_VZN3kCZP 7 142 2171 1395 14 Dtool_VZN3kCZP 1 4 copy 1 2159  
168 14 Dtool_VZN338Ro 7 142 2171 1395 14 Dtool_VZN338Ro 1 10 fill_value 1 2161  
169 14 Dtool_VZN3VLaV 7 142 2171 1395 14 Dtool_VZN3VLaV 2 1 x 1 2161  1 y 1 2161  
170 14 Dtool_VZN39M99 6 143 2171 0 14 Dtool_VZN39M99 2 4 this 3 2171  4 copy 1 2159  
171 14 Dtool_VZN3MH4I 6 143 2171 0 14 Dtool_VZN3MH4I 2 4 this 3 2171  10 fill_value 1 2161  
172 14 Dtool_VZN3rnmp 6 144 2172 0 14 Dtool_VZN3rnmp 0 
173 14 Dtool_VZN3AGP2 6 145 2172 0 14 Dtool_VZN3AGP2 0 
174 14 Dtool_VZN3YRZ2 6 146 2172 0 14 Dtool_VZN3YRZ2 0 
175 14 Dtool_VZN311lG 7 147 2171 1395 14 Dtool_VZN311lG 1 4 this 3 2172  
176 14 Dtool_VZN3vLkf 7 148 2158 1300 14 Dtool_VZN3vLkf 2 4 this 3 2172  5 other 1 2159  
177 14 Dtool_VZN3Cmce 7 148 2171 1395 14 Dtool_VZN3Cmce 2 4 this 3 2172  5 other 1 2166  
178 14 Dtool_VZN3NGic 7 149 2165 1369 14 Dtool_VZN3NGic 2 4 this 3 2172  5 other 1 2172  
179 14 Dtool_VZN30Vlf 7 149 2158 1300 14 Dtool_VZN30Vlf 2 4 this 3 2172  5 other 1 2159  
180 14 Dtool_VZN3Fode 7 149 2171 1395 14 Dtool_VZN3Fode 2 4 this 3 2172  5 other 1 2166  
181 14 Dtool_VZN3rAiF 7 150 2171 1395 14 Dtool_VZN3rAiF 2 4 this 3 2172  6 scalar 1 2161  
182 14 Dtool_VZN36Vkl 7 151 2171 1395 14 Dtool_VZN36Vkl 2 4 this 3 2172  6 scalar 1 2161  
183 14 Dtool_VZN3Eitf 4 152 2150 0 14 Dtool_VZN3Eitf 3 4 this 3 2172  3 out 1 2153  10 class_name 1 2155  
184 14 Dtool_VZN3mtGF 7 153 2157 0 14 Dtool_VZN3mtGF 0 
185 14 Dtool_VZN39GM2 7 160 2174 1407 14 Dtool_VZN39GM2 0 
186 14 Dtool_VZN3RRmU 7 160 2174 1407 14 Dtool_VZN3RRmU 1 4 copy 1 2175  
187 14 Dtool_VZN3BPuZ 7 160 2174 1407 14 Dtool_VZN3BPuZ 1 10 fill_value 1 2148  
188 14 Dtool_VZN3nj6v 7 160 2174 1407 14 Dtool_VZN3nj6v 3 1 x 1 2148  1 y 1 2148  1 z 1 2148  
189 14 Dtool_VZN3qOP9 6 161 2174 0 14 Dtool_VZN3qOP9 2 4 this 3 2174  4 copy 1 2175  
190 14 Dtool_VZN3rfXC 6 161 2174 0 14 Dtool_VZN3rfXC 2 4 this 3 2174  10 fill_value 1 2148  
191 14 Dtool_VZN3kPX7 4 162 2150 0 14 Dtool_VZN3kPX7 2 4 this 3 2174  4 size 1 2149  
192 14 Dtool_VZN3KGfx 6 164 2175 0 14 Dtool_VZN3KGfx 0 
193 14 Dtool_VZN3mCVV 6 165 2175 0 14 Dtool_VZN3mCVV 0 
194 14 Dtool_VZN3gCjx 6 166 2175 0 14 Dtool_VZN3gCjx 0 
195 14 Dtool_VZN3jCxN 6 167 2175 0 14 Dtool_VZN3jCxN 0 
196 14 Dtool_VZN301HX 4 169 2150 0 14 Dtool_VZN301HX 2 4 this 3 2174  1 i 1 2151  
197 14 Dtool_VZN3nq7z 6 169 2148 0 14 Dtool_VZN3nq7z 2 4 this 3 2175  1 i 1 2151  
198 14 Dtool_VZN3d5Gi 6 170 2152 0 14 Dtool_VZN3d5Gi 1 4 this 3 2175  
199 14 Dtool_VZN3O_fH 6 171 2148 0 14 Dtool_VZN3O_fH 2 4 this 3 2175  1 i 1 2151  
200 14 Dtool_VZN3dY_y 6 172 2148 0 14 Dtool_VZN3dY_y 1 4 this 3 2175  
201 14 Dtool_VZN3d843 6 173 2148 0 14 Dtool_VZN3d843 1 4 this 3 2175  
202 14 Dtool_VZN3dQw8 6 174 2148 0 14 Dtool_VZN3dQw8 1 4 this 3 2175  
203 14 Dtool_VZN3UQX1 4 175 2150 0 14 Dtool_VZN3UQX1 3 4 this 3 2174  1 i 1 2151  5 value 1 2148  
204 14 Dtool_VZN3cuZH 4 176 2150 0 14 Dtool_VZN3cuZH 2 4 this 3 2174  5 value 1 2148  
205 14 Dtool_VZN3cKSM 4 177 2150 0 14 Dtool_VZN3cKSM 2 4 this 3 2174  5 value 1 2148  
206 14 Dtool_VZN3cWKR 4 178 2150 0 14 Dtool_VZN3cWKR 2 4 this 3 2174  5 value 1 2148  
207 14 Dtool_VZN3HyX0 4 179 2150 0 14 Dtool_VZN3HyX0 3 4 this 3 2174  1 i 1 2151  5 value 1 2148  
208 14 Dtool_VZN31m2F 4 180 2150 0 14 Dtool_VZN31m2F 2 4 this 3 2174  5 value 1 2148  
209 14 Dtool_VZN31CvK 4 181 2150 0 14 Dtool_VZN31CvK 2 4 this 3 2174  5 value 1 2148  
210 14 Dtool_VZN31unP 4 182 2150 0 14 Dtool_VZN31unP 2 4 this 3 2174  5 value 1 2148  
211 14 Dtool_VZN3jRCm 4 183 2150 0 14 Dtool_VZN3jRCm 1 4 this 3 2175  
212 14 Dtool_VZN3pFHZ 6 184 2151 0 14 Dtool_VZN3pFHZ 1 4 this 3 2175  
213 14 Dtool_VZN3q1Xn 4 185 2150 0 14 Dtool_VZN3q1Xn 2 4 this 3 2174  10 fill_value 1 2148  
214 14 Dtool_VZN3Oavy 4 186 2150 0 14 Dtool_VZN3Oavy 4 4 this 3 2174  1 x 1 2148  1 y 1 2148  1 z 1 2148  
215 14 Dtool_VZN3bb4d 6 187 2148 0 14 Dtool_VZN3bb4d 1 4 this 3 2175  
216 14 Dtool_VZN3lUs9 6 188 2148 0 14 Dtool_VZN3lUs9 1 4 this 3 2175  
217 14 Dtool_VZN3OsSz 6 189 2152 0 14 Dtool_VZN3OsSz 1 4 this 3 2174  
218 14 Dtool_VZN3aDIV 6 190 2148 0 14 Dtool_VZN3aDIV 2 4 this 3 2175  5 other 1 2175  
219 14 Dtool_VZN3aJ6l 7 191 2174 1407 14 Dtool_VZN3aJ6l 2 4 this 3 2175  5 other 1 2175  
220 14 Dtool_VZN3dE8o 6 192 2152 0 14 Dtool_VZN3dE8o 2 4 this 3 2175  5 other 1 2175  
221 14 Dtool_VZN3Ft4v 6 193 2152 0 14 Dtool_VZN3Ft4v 2 4 this 3 2175  5 other 1 2175  
222 14 Dtool_VZN3BNge 6 194 2152 0 14 Dtool_VZN3BNge 2 4 this 3 2175  5 other 1 2175  
223 14 Dtool_VZN3W_5p 7 195 2174 1407 14 Dtool_VZN3W_5p 1 4 this 3 2175  
224 14 Dtool_VZN353zo 6 196 2151 0 14 Dtool_VZN353zo 2 4 this 3 2175  5 other 1 2175  
225 14 Dtool_VZN38GlN 6 196 2151 0 14 Dtool_VZN38GlN 3 4 this 3 2175  5 other 1 2175  9 threshold 1 2148  
226 14 Dtool_VZN3OipS 6 197 2149 0 14 Dtool_VZN3OipS 1 4 this 3 2175  
227 14 Dtool_VZN3gnPZ 6 197 2149 0 14 Dtool_VZN3gnPZ 2 4 this 3 2175  9 threshold 1 2148  
228 14 Dtool_VZN3H3fh 6 198 2149 0 14 Dtool_VZN3H3fh 2 4 this 3 2175  4 hash 1 2149  
229 14 Dtool_VZN3wERG 6 198 2149 0 14 Dtool_VZN3wERG 3 4 this 3 2175  4 hash 1 2149  9 threshold 1 2148  
230 14 Dtool_VZN3iO_P 7 199 2174 1407 14 Dtool_VZN3iO_P 1 4 this 3 2175  
231 14 Dtool_VZN3fM9C 7 200 2174 1407 14 Dtool_VZN3fM9C 2 4 this 3 2175  5 other 1 2175  
232 14 Dtool_VZN3f8eW 7 201 2174 1407 14 Dtool_VZN3f8eW 2 4 this 3 2175  5 other 1 2175  
233 14 Dtool_VZN3Hdlj 7 202 2174 1407 14 Dtool_VZN3Hdlj 2 4 this 3 2175  6 scalar 1 2148  
234 14 Dtool_VZN3Y1ZU 7 203 2174 1407 14 Dtool_VZN3Y1ZU 2 4 this 3 2175  6 scalar 1 2148  
235 14 Dtool_VZN3GqXQ 6 204 2174 0 14 Dtool_VZN3GqXQ 2 4 this 3 2174  5 other 1 2175  
236 14 Dtool_VZN3Ga5j 6 205 2174 0 14 Dtool_VZN3Ga5j 2 4 this 3 2174  5 other 1 2175  
237 14 Dtool_VZN3PZfq 6 206 2174 0 14 Dtool_VZN3PZfq 2 4 this 3 2174  6 scalar 1 2148  
238 14 Dtool_VZN3OhTb 6 207 2174 0 14 Dtool_VZN3OhTb 2 4 this 3 2174  6 scalar 1 2148  
239 14 Dtool_VZN3XVDn 7 208 2174 1407 14 Dtool_VZN3XVDn 2 4 this 3 2174  5 other 1 2175  
240 14 Dtool_VZN31Bkl 7 209 2174 1407 14 Dtool_VZN31Bkl 2 4 this 3 2174  5 other 1 2175  
241 14 Dtool_VZN3vCKa 4 210 2150 0 14 Dtool_VZN3vCKa 2 4 this 3 2174  5 other 1 2175  
242 14 Dtool_VZN32ADH 6 211 2152 0 14 Dtool_VZN32ADH 2 4 this 3 2175  5 other 1 2175  
243 14 Dtool_VZN3jJ12 6 211 2152 0 14 Dtool_VZN3jJ12 3 4 this 3 2175  5 other 1 2175  9 threshold 1 2148  
244 14 Dtool_VZN38Oso 4 212 2150 0 14 Dtool_VZN38Oso 2 4 this 3 2175  3 out 1 2153  
245 14 Dtool_VZN3RMH8 4 213 2150 0 14 Dtool_VZN3RMH8 3 4 this 3 2175  3 out 1 2153  10 class_name 1 2155  
246 14 Dtool_VZN3dN_h 7 214 2157 0 14 Dtool_VZN3dN_h 0 
247 14 Dtool_VZN3jiry 7 216 2177 1462 14 Dtool_VZN3jiry 0 
248 14 Dtool_VZN3uakN 7 216 2177 1462 14 Dtool_VZN3uakN 1 4 copy 1 2178  
249 14 Dtool_VZN3_fFc 7 216 2177 1462 14 Dtool_VZN3_fFc 1 10 fill_value 1 2161  
250 14 Dtool_VZN3pccq 7 216 2177 1462 14 Dtool_VZN3pccq 3 1 x 1 2161  1 y 1 2161  1 z 1 2161  
251 14 Dtool_VZN3yavJ 6 217 2177 0 14 Dtool_VZN3yavJ 2 4 this 3 2177  4 copy 1 2178  
252 14 Dtool_VZN3_NPY 6 217 2177 0 14 Dtool_VZN3_NPY 2 4 this 3 2177  10 fill_value 1 2161  
253 14 Dtool_VZN3D6XL 4 218 2150 0 14 Dtool_VZN3D6XL 2 4 this 3 2177  4 size 1 2149  
254 14 Dtool_VZN3trfB 6 220 2178 0 14 Dtool_VZN3trfB 0 
255 14 Dtool_VZN3ExVl 6 221 2178 0 14 Dtool_VZN3ExVl 0 
256 14 Dtool_VZN3HxjB 6 222 2178 0 14 Dtool_VZN3HxjB 0 
257 14 Dtool_VZN3Bxxd 6 223 2178 0 14 Dtool_VZN3Bxxd 0 
258 14 Dtool_VZN3KmHn 4 225 2150 0 14 Dtool_VZN3KmHn 2 4 this 3 2177  1 i 1 2151  
259 14 Dtool_VZN3IH7D 6 225 2161 0 14 Dtool_VZN3IH7D 2 4 this 3 2178  1 i 1 2151  
260 14 Dtool_VZN37uGy 6 226 2152 0 14 Dtool_VZN37uGy 1 4 this 3 2178  
261 14 Dtool_VZN3gqfX 6 227 2161 0 14 Dtool_VZN3gqfX 2 4 this 3 2178  1 i 1 2151  
262 14 Dtool_VZN38t_C 6 228 2161 0 14 Dtool_VZN38t_C 1 4 this 3 2178  
263 14 Dtool_VZN38J4H 6 229 2161 0 14 Dtool_VZN38J4H 1 4 this 3 2178  
264 14 Dtool_VZN38lwM 6 230 2161 0 14 Dtool_VZN38lwM 1 4 this 3 2178  
265 14 Dtool_VZN3j_Qe 4 231 2150 0 14 Dtool_VZN3j_Qe 3 4 this 3 2177  1 i 1 2151  5 value 1 2161  
266 14 Dtool_VZN3fZV6 4 232 2150 0 14 Dtool_VZN3fZV6 2 4 this 3 2177  5 value 1 2161  
267 14 Dtool_VZN3f9N_ 4 233 2150 0 14 Dtool_VZN3f9N_ 2 4 this 3 2177  5 value 1 2161  
268 14 Dtool_VZN3eBGE 4 234 2150 0 14 Dtool_VZN3eBGE 2 4 this 3 2177  5 value 1 2161  
269 14 Dtool_VZN3LMq8 4 235 2150 0 14 Dtool_VZN3LMq8 3 4 this 3 2177  1 i 1 2151  5 value 1 2161  
270 14 Dtool_VZN30Qy4 4 236 2150 0 14 Dtool_VZN30Qy4 2 4 this 3 2177  5 value 1 2161  
271 14 Dtool_VZN300q9 4 237 2150 0 14 Dtool_VZN300q9 2 4 this 3 2177  5 value 1 2161  
272 14 Dtool_VZN33YjC 4 238 2150 0 14 Dtool_VZN33YjC 2 4 this 3 2177  5 value 1 2161  
273 14 Dtool_VZN3d9D2 4 239 2150 0 14 Dtool_VZN3d9D2 1 4 this 3 2178  
274 14 Dtool_VZN3LxGp 6 240 2151 0 14 Dtool_VZN3LxGp 1 4 this 3 2178  
275 14 Dtool_VZN3xac_ 4 241 2150 0 14 Dtool_VZN3xac_ 2 4 this 3 2177  10 fill_value 1 2161  
276 14 Dtool_VZN3L816 4 242 2150 0 14 Dtool_VZN3L816 4 4 this 3 2177  1 x 1 2161  1 y 1 2161  1 z 1 2161  
277 14 Dtool_VZN35E4t 6 243 2161 0 14 Dtool_VZN35E4t 1 4 this 3 2178  
278 14 Dtool_VZN3GIsN 6 244 2161 0 14 Dtool_VZN3GIsN 1 4 this 3 2178  
279 14 Dtool_VZN3tBSD 6 245 2152 0 14 Dtool_VZN3tBSD 1 4 this 3 2177  
280 14 Dtool_VZN34N6j 6 246 2161 0 14 Dtool_VZN34N6j 2 4 this 3 2178  5 other 1 2178  
281 14 Dtool_VZN3vmLU 7 247 2177 1462 14 Dtool_VZN3vmLU 2 4 this 3 2178  5 other 1 2178  
282 14 Dtool_VZN3f_c1 6 248 2152 0 14 Dtool_VZN3f_c1 2 4 this 3 2178  5 other 1 2178  
283 14 Dtool_VZN35E4P 6 249 2152 0 14 Dtool_VZN35E4P 2 4 this 3 2178  5 other 1 2178  
284 14 Dtool_VZN3Ckg_ 6 250 2152 0 14 Dtool_VZN3Ckg_ 2 4 this 3 2178  5 other 1 2178  
285 14 Dtool_VZN3wK45 7 251 2177 1462 14 Dtool_VZN3wK45 1 4 this 3 2178  
286 14 Dtool_VZN3AqT1 6 252 2151 0 14 Dtool_VZN3AqT1 2 4 this 3 2178  5 other 1 2178  
287 14 Dtool_VZN3DVKA 6 252 2151 0 14 Dtool_VZN3DVKA 3 4 this 3 2178  5 other 1 2178  9 threshold 1 2161  
288 14 Dtool_VZN3Q_pi 6 253 2149 0 14 Dtool_VZN3Q_pi 1 4 this 3 2178  
289 14 Dtool_VZN3BwnB 6 253 2149 0 14 Dtool_VZN3BwnB 2 4 this 3 2178  9 threshold 1 2161  
290 14 Dtool_VZN3lrfx 6 254 2149 0 14 Dtool_VZN3lrfx 2 4 this 3 2178  4 hash 1 2149  
291 14 Dtool_VZN3jZW8 6 254 2149 0 14 Dtool_VZN3jZW8 3 4 this 3 2178  4 hash 1 2149  9 threshold 1 2161  
292 14 Dtool_VZN3Ey_f 7 255 2177 1462 14 Dtool_VZN3Ey_f 1 4 this 3 2178  
293 14 Dtool_VZN3Z2dP 7 256 2177 1462 14 Dtool_VZN3Z2dP 2 4 this 3 2178  5 other 1 2178  
294 14 Dtool_VZN3ZG_i 7 257 2177 1462 14 Dtool_VZN3ZG_i 2 4 this 3 2178  5 other 1 2178  
295 14 Dtool_VZN36_m2 7 258 2177 1462 14 Dtool_VZN36_m2 2 4 this 3 2178  6 scalar 1 2161  
296 14 Dtool_VZN37Wdn 7 259 2177 1462 14 Dtool_VZN37Wdn 2 4 this 3 2178  6 scalar 1 2161  
297 14 Dtool_VZN3azWw 6 260 2177 0 14 Dtool_VZN3azWw 2 4 this 3 2177  5 other 1 2178  
298 14 Dtool_VZN3bD4D 6 261 2177 0 14 Dtool_VZN3bD4D 2 4 this 3 2177  5 other 1 2178  
299 14 Dtool_VZN3FCn2 6 262 2177 0 14 Dtool_VZN3FCn2 2 4 this 3 2177  6 scalar 1 2161  
300 14 Dtool_VZN3K6bn 6 263 2177 0 14 Dtool_VZN3K6bn 2 4 this 3 2177  6 scalar 1 2161  
301 14 Dtool_VZN3yw_P 7 264 2177 1462 14 Dtool_VZN3yw_P 2 4 this 3 2177  5 other 1 2178  
302 14 Dtool_VZN3QkhO 7 265 2177 1462 14 Dtool_VZN3QkhO 2 4 this 3 2177  5 other 1 2178  
303 14 Dtool_VZN3mWqm 4 266 2150 0 14 Dtool_VZN3mWqm 2 4 this 3 2177  5 other 1 2178  
304 14 Dtool_VZN3gl6W 6 267 2152 0 14 Dtool_VZN3gl6W 2 4 this 3 2178  5 other 1 2178  
305 14 Dtool_VZN36Cbn 6 267 2152 0 14 Dtool_VZN36Cbn 3 4 this 3 2178  5 other 1 2178  9 threshold 1 2161  
306 14 Dtool_VZN3hBt4 4 268 2150 0 14 Dtool_VZN3hBt4 2 4 this 3 2178  3 out 1 2153  
307 14 Dtool_VZN3rCGM 4 269 2150 0 14 Dtool_VZN3rCGM 3 4 this 3 2178  3 out 1 2153  10 class_name 1 2155  
308 14 Dtool_VZN3yA_x 7 270 2157 0 14 Dtool_VZN3yA_x 0 
309 14 Dtool_VZN3hACr 7 274 2180 1533 14 Dtool_VZN3hACr 0 
310 14 Dtool_VZN3Z8LN 7 274 2180 1533 14 Dtool_VZN3Z8LN 1 4 copy 1 2175  
311 14 Dtool_VZN36OMJ 7 274 2180 1533 14 Dtool_VZN36OMJ 1 10 fill_value 1 2148  
312 14 Dtool_VZN3hp6I 7 274 2180 1533 14 Dtool_VZN3hp6I 3 1 x 1 2148  1 y 1 2148  1 z 1 2148  
313 14 Dtool_VZN3qZGE 6 275 2180 0 14 Dtool_VZN3qZGE 2 4 this 3 2180  4 copy 1 2175  
314 14 Dtool_VZN3R_QE 6 275 2180 0 14 Dtool_VZN3R_QE 2 4 this 3 2180  10 fill_value 1 2148  
315 14 Dtool_VZN3Mixn 6 276 2181 0 14 Dtool_VZN3Mixn 0 
316 14 Dtool_VZN3yo58 6 277 2181 0 14 Dtool_VZN3yo58 0 
317 14 Dtool_VZN3xExB 6 278 2181 0 14 Dtool_VZN3xExB 0 
318 14 Dtool_VZN3xgqG 6 279 2181 0 14 Dtool_VZN3xgqG 0 
319 14 Dtool_VZN3WstI 7 280 2180 1533 14 Dtool_VZN3WstI 1 4 this 3 2181  
320 14 Dtool_VZN3JrR4 7 281 2174 1407 14 Dtool_VZN3JrR4 2 4 this 3 2181  5 other 1 2175  
321 14 Dtool_VZN3ciQH 7 281 2180 1533 14 Dtool_VZN3ciQH 2 4 this 3 2181  5 other 1 2181  
322 14 Dtool_VZN3po44 7 282 2174 1407 14 Dtool_VZN3po44 2 4 this 3 2181  5 other 1 2175  
323 14 Dtool_VZN38f3H 7 282 2180 1533 14 Dtool_VZN38f3H 2 4 this 3 2181  5 other 1 2181  
324 14 Dtool_VZN3XSXn 7 283 2180 1533 14 Dtool_VZN3XSXn 2 4 this 3 2181  5 other 1 2175  
325 14 Dtool_VZN3i1_1 6 284 2148 0 14 Dtool_VZN3i1_1 2 4 this 3 2181  5 other 1 2181  
326 14 Dtool_VZN3Se7m 6 285 2148 0 14 Dtool_VZN3Se7m 2 4 this 3 2181  5 other 1 2181  
327 14 Dtool_VZN3cvTb 7 286 2180 1533 14 Dtool_VZN3cvTb 2 4 this 3 2181  6 scalar 1 2148  
328 14 Dtool_VZN3sH0c 7 287 2180 1533 14 Dtool_VZN3sH0c 2 4 this 3 2181  6 scalar 1 2148  
329 14 Dtool_VZN3lOZo 7 288 2180 1533 14 Dtool_VZN3lOZo 1 2 cs 1 2124  
330 14 Dtool_VZN3z_MF 7 288 2180 1533 14 Dtool_VZN3z_MF 0 
331 14 Dtool_VZN33sup 7 289 2180 1533 14 Dtool_VZN33sup 1 2 cs 1 2124  
332 14 Dtool_VZN3YM3h 7 289 2180 1533 14 Dtool_VZN3YM3h 0 
333 14 Dtool_VZN3n621 7 290 2180 1533 14 Dtool_VZN3n621 1 2 cs 1 2124  
334 14 Dtool_VZN3oQbv 7 290 2180 1533 14 Dtool_VZN3oQbv 0 
335 14 Dtool_VZN35s4e 7 291 2180 1533 14 Dtool_VZN35s4e 1 2 cs 1 2124  
336 14 Dtool_VZN3jBqg 7 291 2180 1533 14 Dtool_VZN3jBqg 0 
337 14 Dtool_VZN3vT2J 7 292 2180 1533 14 Dtool_VZN3vT2J 1 2 cs 1 2124  
338 14 Dtool_VZN31_pL 7 292 2180 1533 14 Dtool_VZN31_pL 0 
339 14 Dtool_VZN3xPd_ 7 293 2180 1533 14 Dtool_VZN3xPd_ 1 2 cs 1 2124  
340 14 Dtool_VZN3UzPA 7 293 2180 1533 14 Dtool_VZN3UzPA 0 
341 14 Dtool_VZN3hSqR 7 294 2180 1533 14 Dtool_VZN3hSqR 4 5 right 1 2148  3 fwd 1 2148  2 up 1 2148  2 cs 1 2124  
342 14 Dtool_VZN3UW9c 7 294 2180 1533 14 Dtool_VZN3UW9c 3 5 right 1 2148  3 fwd 1 2148  2 up 1 2148  
343 14 Dtool_VZN3fg_v 4 295 2150 0 14 Dtool_VZN3fg_v 3 4 this 3 2181  3 out 1 2153  10 class_name 1 2155  
344 14 Dtool_VZN3g4QZ 7 296 2157 0 14 Dtool_VZN3g4QZ 0 
345 14 Dtool_VZN3Dyhn 7 299 2183 1557 14 Dtool_VZN3Dyhn 0 
346 14 Dtool_VZN3vfOH 7 299 2183 1557 14 Dtool_VZN3vfOH 1 4 copy 1 2178  
347 14 Dtool_VZN3vhGS 7 299 2183 1557 14 Dtool_VZN3vhGS 1 10 fill_value 1 2161  
348 14 Dtool_VZN3_Wm1 7 299 2183 1557 14 Dtool_VZN3_Wm1 3 1 x 1 2161  1 y 1 2161  1 z 1 2161  
349 14 Dtool_VZN3zYfy 6 300 2183 0 14 Dtool_VZN3zYfy 2 4 this 3 2183  4 copy 1 2178  
350 14 Dtool_VZN3pe8O 6 300 2183 0 14 Dtool_VZN3pe8O 2 4 this 3 2183  10 fill_value 1 2161  
351 14 Dtool_VZN33lRk 6 301 2184 0 14 Dtool_VZN33lRk 0 
352 14 Dtool_VZN3p3Z5 6 302 2184 0 14 Dtool_VZN3p3Z5 0 
353 14 Dtool_VZN3pbR_ 6 303 2184 0 14 Dtool_VZN3pbR_ 0 
354 14 Dtool_VZN3o_KD 6 304 2184 0 14 Dtool_VZN3o_KD 0 
355 14 Dtool_VZN3PtNF 7 305 2183 1557 14 Dtool_VZN3PtNF 1 4 this 3 2184  
356 14 Dtool_VZN3hqqm 7 306 2177 1462 14 Dtool_VZN3hqqm 2 4 this 3 2184  5 other 1 2178  
357 14 Dtool_VZN3zxUB 7 306 2183 1557 14 Dtool_VZN3zxUB 2 4 this 3 2184  5 other 1 2184  
358 14 Dtool_VZN3BpRn 7 307 2177 1462 14 Dtool_VZN3BpRn 2 4 this 3 2184  5 other 1 2178  
359 14 Dtool_VZN3Ts7B 7 307 2183 1557 14 Dtool_VZN3Ts7B 2 4 this 3 2184  5 other 1 2184  
360 14 Dtool_VZN3Pzz8 7 308 2183 1557 14 Dtool_VZN3Pzz8 2 4 this 3 2184  5 other 1 2178  
361 14 Dtool_VZN3_6Zy 6 309 2161 0 14 Dtool_VZN3_6Zy 2 4 this 3 2184  5 other 1 2184  
362 14 Dtool_VZN3lnWj 6 310 2161 0 14 Dtool_VZN3lnWj 2 4 this 3 2184  5 other 1 2184  
363 14 Dtool_VZN3_54j 7 311 2183 1557 14 Dtool_VZN3_54j 2 4 this 3 2184  6 scalar 1 2161  
364 14 Dtool_VZN3uQal 7 312 2183 1557 14 Dtool_VZN3uQal 2 4 this 3 2184  6 scalar 1 2161  
365 14 Dtool_VZN38N5k 7 313 2183 1557 14 Dtool_VZN38N5k 1 2 cs 1 2124  
366 14 Dtool_VZN3I8sB 7 313 2183 1557 14 Dtool_VZN3I8sB 0 
367 14 Dtool_VZN3QtOm 7 314 2183 1557 14 Dtool_VZN3QtOm 1 2 cs 1 2124  
368 14 Dtool_VZN3xMXe 7 314 2183 1557 14 Dtool_VZN3xMXe 0 
369 14 Dtool_VZN38FXy 7 315 2183 1557 14 Dtool_VZN38FXy 1 2 cs 1 2124  
370 14 Dtool_VZN3PT7r 7 315 2183 1557 14 Dtool_VZN3PT7r 0 
371 14 Dtool_VZN3gtYb 7 316 2183 1557 14 Dtool_VZN3gtYb 1 2 cs 1 2124  
372 14 Dtool_VZN3KBKd 7 316 2183 1557 14 Dtool_VZN3KBKd 0 
373 14 Dtool_VZN32UWG 7 317 2183 1557 14 Dtool_VZN32UWG 1 2 cs 1 2124  
374 14 Dtool_VZN3cxJI 7 317 2183 1557 14 Dtool_VZN3cxJI 0 
375 14 Dtool_VZN3WP96 7 318 2183 1557 14 Dtool_VZN3WP96 1 2 cs 1 2124  
376 14 Dtool_VZN3Myv8 7 318 2183 1557 14 Dtool_VZN3Myv8 0 
377 14 Dtool_VZN3uPAa 7 319 2183 1557 14 Dtool_VZN3uPAa 4 5 right 1 2161  3 fwd 1 2161  2 up 1 2161  2 cs 1 2124  
378 14 Dtool_VZN3nVMh 7 319 2183 1557 14 Dtool_VZN3nVMh 3 5 right 1 2161  3 fwd 1 2161  2 up 1 2161  
379 14 Dtool_VZN32jes 4 320 2150 0 14 Dtool_VZN32jes 3 4 this 3 2184  3 out 1 2153  10 class_name 1 2155  
380 14 Dtool_VZN3H5wV 7 321 2157 0 14 Dtool_VZN3H5wV 0 
381 14 Dtool_VZN3z3Qe 7 324 2186 1574 14 Dtool_VZN3z3Qe 0 
382 14 Dtool_VZN3b_6E 7 324 2186 1574 14 Dtool_VZN3b_6E 1 4 copy 1 2175  
383 14 Dtool_VZN3CO2W 7 324 2186 1574 14 Dtool_VZN3CO2W 1 10 fill_value 1 2148  
384 14 Dtool_VZN3Mxu6 7 324 2186 1574 14 Dtool_VZN3Mxu6 3 1 x 1 2148  1 y 1 2148  1 z 1 2148  
385 14 Dtool_VZN3J6xP 6 325 2186 0 14 Dtool_VZN3J6xP 2 4 this 3 2186  4 copy 1 2175  
386 14 Dtool_VZN3qkxL 6 325 2186 0 14 Dtool_VZN3qkxL 2 4 this 3 2186  10 fill_value 1 2148  
387 14 Dtool_VZN3qu74 6 326 2187 0 14 Dtool_VZN3qu74 0 
388 14 Dtool_VZN3CPkF 6 327 2187 0 14 Dtool_VZN3CPkF 0 
389 14 Dtool_VZN3aeuF 6 328 2187 0 14 Dtool_VZN3aeuF 0 
390 14 Dtool_VZN3Sp3F 6 329 2187 0 14 Dtool_VZN3Sp3F 0 
391 14 Dtool_VZN30M7V 7 330 2186 1574 14 Dtool_VZN30M7V 1 4 this 3 2187  
392 14 Dtool_VZN3_4Xx 7 331 2174 1407 14 Dtool_VZN3_4Xx 2 4 this 3 2187  5 other 1 2175  
393 14 Dtool_VZN3g12J 7 331 2186 1574 14 Dtool_VZN3g12J 2 4 this 3 2187  5 other 1 2181  
394 14 Dtool_VZN3SFwU 7 332 2180 1533 14 Dtool_VZN3SFwU 2 4 this 3 2187  5 other 1 2187  
395 14 Dtool_VZN3BLZx 7 332 2174 1407 14 Dtool_VZN3BLZx 2 4 this 3 2187  5 other 1 2175  
396 14 Dtool_VZN3fn3J 7 332 2186 1574 14 Dtool_VZN3fn3J 2 4 this 3 2187  5 other 1 2181  
397 14 Dtool_VZN33m20 7 333 2186 1574 14 Dtool_VZN33m20 2 4 this 3 2187  5 other 1 2175  
398 14 Dtool_VZN3UCf8 7 334 2186 1574 14 Dtool_VZN3UCf8 2 4 this 3 2187  6 scalar 1 2148  
399 14 Dtool_VZN3rOic 7 335 2186 1574 14 Dtool_VZN3rOic 2 4 this 3 2187  6 scalar 1 2148  
400 14 Dtool_VZN3VRyH 7 336 2186 1574 14 Dtool_VZN3VRyH 1 2 cs 1 2124  
401 14 Dtool_VZN3M16_ 7 336 2186 1574 14 Dtool_VZN3M16_ 0 
402 14 Dtool_VZN3kaIy 7 337 2186 1574 14 Dtool_VZN3kaIy 4 5 right 1 2148  3 fwd 1 2148  2 up 1 2148  2 cs 1 2124  
403 14 Dtool_VZN32tjk 7 337 2186 1574 14 Dtool_VZN32tjk 3 5 right 1 2148  3 fwd 1 2148  2 up 1 2148  
404 14 Dtool_VZN3FpCv 4 338 2150 0 14 Dtool_VZN3FpCv 3 4 this 3 2187  3 out 1 2153  10 class_name 1 2155  
405 14 Dtool_VZN3nkbU 7 339 2157 0 14 Dtool_VZN3nkbU 0 
406 14 Dtool_VZN3t3tX 7 342 2189 1591 14 Dtool_VZN3t3tX 0 
407 14 Dtool_VZN3SkXG 7 342 2189 1591 14 Dtool_VZN3SkXG 1 4 copy 1 2178  
408 14 Dtool_VZN33ZYu 7 342 2189 1591 14 Dtool_VZN33ZYu 1 10 fill_value 1 2161  
409 14 Dtool_VZN3k1qU 7 342 2189 1591 14 Dtool_VZN3k1qU 3 1 x 1 2161  1 y 1 2161  1 z 1 2161  
410 14 Dtool_VZN3LoO_ 6 343 2189 0 14 Dtool_VZN3LoO_ 2 4 this 3 2189  4 copy 1 2178  
411 14 Dtool_VZN3MIGK 6 343 2189 0 14 Dtool_VZN3MIGK 2 4 this 3 2189  10 fill_value 1 2161  
412 14 Dtool_VZN3ru0q 6 344 2190 0 14 Dtool_VZN3ru0q 0 
413 14 Dtool_VZN3APd3 6 345 2190 0 14 Dtool_VZN3APd3 0 
414 14 Dtool_VZN3Yen3 6 346 2190 0 14 Dtool_VZN3Yen3 0 
415 14 Dtool_VZN3Qpw3 6 347 2190 0 14 Dtool_VZN3Qpw3 0 
416 14 Dtool_VZN31M0H 7 348 2189 1591 14 Dtool_VZN31M0H 1 4 this 3 2190  
417 14 Dtool_VZN39u0g 7 349 2177 1462 14 Dtool_VZN39u0g 2 4 this 3 2190  5 other 1 2178  
418 14 Dtool_VZN36tq7 7 349 2189 1591 14 Dtool_VZN36tq7 2 4 this 3 2190  5 other 1 2184  
419 14 Dtool_VZN3HBoO 7 350 2183 1557 14 Dtool_VZN3HBoO 2 4 this 3 2190  5 other 1 2190  
420 14 Dtool_VZN3C51g 7 350 2177 1462 14 Dtool_VZN3C51g 2 4 this 3 2190  5 other 1 2178  
421 14 Dtool_VZN39fr7 7 350 2189 1591 14 Dtool_VZN39fr7 2 4 this 3 2190  5 other 1 2184  
422 14 Dtool_VZN3wvhl 7 351 2189 1591 14 Dtool_VZN3wvhl 2 4 this 3 2190  5 other 1 2178  
423 14 Dtool_VZN3rZwG 7 352 2189 1591 14 Dtool_VZN3rZwG 2 4 this 3 2190  6 scalar 1 2161  
424 14 Dtool_VZN36cym 7 353 2189 1591 14 Dtool_VZN36cym 2 4 this 3 2190  6 scalar 1 2161  
425 14 Dtool_VZN3XRr5 7 354 2189 1591 14 Dtool_VZN3XRr5 1 2 cs 1 2124  
426 14 Dtool_VZN3N1zx 7 354 2189 1591 14 Dtool_VZN3N1zx 0 
427 14 Dtool_VZN3x8Y0 7 355 2189 1591 14 Dtool_VZN3x8Y0 4 5 right 1 2161  3 fwd 1 2161  2 up 1 2161  2 cs 1 2124  
428 14 Dtool_VZN3s_qG 7 355 2189 1591 14 Dtool_VZN3s_qG 3 5 right 1 2161  3 fwd 1 2161  2 up 1 2161  
429 14 Dtool_VZN3Ep7g 4 356 2150 0 14 Dtool_VZN3Ep7g 3 4 this 3 2190  3 out 1 2153  10 class_name 1 2155  
430 14 Dtool_VZN3mkUG 7 357 2157 0 14 Dtool_VZN3mkUG 0 
431 14 Dtool_VZN35kRY 7 360 2192 1601 14 Dtool_VZN35kRY 0 
432 14 Dtool_VZN3dTtd 7 360 2192 1601 14 Dtool_VZN3dTtd 1 4 copy 1 2193  
433 14 Dtool_VZN3ity7 7 360 2192 1601 14 Dtool_VZN3ity7 1 10 fill_value 1 2148  
434 14 Dtool_VZN3DRvG 7 360 2192 1601 14 Dtool_VZN3DRvG 4 1 x 1 2148  1 y 1 2148  1 z 1 2148  1 w 1 2148  
435 14 Dtool_VZN3XuCG 6 361 2192 0 14 Dtool_VZN3XuCG 2 4 this 3 2192  4 copy 1 2193  
436 14 Dtool_VZN3GYHk 6 361 2192 0 14 Dtool_VZN3GYHk 2 4 this 3 2192  10 fill_value 1 2148  
437 14 Dtool_VZN3YOHd 4 362 2150 0 14 Dtool_VZN3YOHd 2 4 this 3 2192  4 size 1 2149  
438 14 Dtool_VZN3mHPT 6 364 2193 0 14 Dtool_VZN3mHPT 0 
439 14 Dtool_VZN3xCF3 6 365 2193 0 14 Dtool_VZN3xCF3 0 
440 14 Dtool_VZN3MdTT 6 366 2193 0 14 Dtool_VZN3MdTT 0 
441 14 Dtool_VZN3Odhv 6 367 2193 0 14 Dtool_VZN3Odhv 0 
442 14 Dtool_VZN33C3a 6 368 2193 0 14 Dtool_VZN33C3a 0 
443 14 Dtool_VZN3By34 4 370 2150 0 14 Dtool_VZN3By34 2 4 this 3 2192  1 i 1 2151  
444 14 Dtool_VZN3TrrV 6 370 2148 0 14 Dtool_VZN3TrrV 2 4 this 3 2193  1 i 1 2151  
445 14 Dtool_VZN3x62D 6 371 2152 0 14 Dtool_VZN3x62D 1 4 this 3 2193  
446 14 Dtool_VZN3d_Pp 6 372 2148 0 14 Dtool_VZN3d_Pp 2 4 this 3 2193  1 i 1 2151  
447 14 Dtool_VZN3JYvU 6 373 2148 0 14 Dtool_VZN3JYvU 1 4 this 3 2193  
448 14 Dtool_VZN3J8oZ 6 374 2148 0 14 Dtool_VZN3J8oZ 1 4 this 3 2193  
449 14 Dtool_VZN3JQge 6 375 2148 0 14 Dtool_VZN3JQge 1 4 this 3 2193  
450 14 Dtool_VZN3JE3P 6 376 2148 0 14 Dtool_VZN3JE3P 1 4 this 3 2193  
451 14 Dtool_VZN3AQHX 4 377 2150 0 14 Dtool_VZN3AQHX 3 4 this 3 2192  1 i 1 2151  5 value 1 2148  
452 14 Dtool_VZN3JuJp 4 378 2150 0 14 Dtool_VZN3JuJp 2 4 this 3 2192  5 value 1 2148  
453 14 Dtool_VZN3JKCu 4 379 2150 0 14 Dtool_VZN3JKCu 2 4 this 3 2192  5 value 1 2148  
454 14 Dtool_VZN3JW6y 4 380 2150 0 14 Dtool_VZN3JW6y 2 4 this 3 2192  5 value 1 2148  
455 14 Dtool_VZN3JCRk 4 381 2150 0 14 Dtool_VZN3JCRk 2 4 this 3 2192  5 value 1 2148  
456 14 Dtool_VZN3zyHW 4 382 2150 0 14 Dtool_VZN3zyHW 3 4 this 3 2192  1 i 1 2151  5 value 1 2148  
457 14 Dtool_VZN3mmmn 4 383 2150 0 14 Dtool_VZN3mmmn 2 4 this 3 2192  5 value 1 2148  
458 14 Dtool_VZN3mCfs 4 384 2150 0 14 Dtool_VZN3mCfs 2 4 this 3 2192  5 value 1 2148  
459 14 Dtool_VZN3muXx 4 385 2150 0 14 Dtool_VZN3muXx 2 4 this 3 2192  5 value 1 2148  
460 14 Dtool_VZN3maui 4 386 2150 0 14 Dtool_VZN3maui 2 4 this 3 2192  5 value 1 2148  
461 14 Dtool_VZN3XRyH 4 387 2150 0 14 Dtool_VZN3XRyH 1 4 this 3 2193  
462 14 Dtool_VZN30F36 6 388 2151 0 14 Dtool_VZN30F36 1 4 this 3 2193  
463 14 Dtool_VZN3W1HJ 4 389 2150 0 14 Dtool_VZN3W1HJ 2 4 this 3 2192  10 fill_value 1 2148  
464 14 Dtool_VZN3__rX 4 390 2150 0 14 Dtool_VZN3__rX 5 4 this 3 2192  1 x 1 2148  1 y 1 2148  1 z 1 2148  1 w 1 2148  
465 14 Dtool_VZN32052 6 391 2148 0 14 Dtool_VZN32052 2 4 this 3 2193  5 other 1 2193  
466 14 Dtool_VZN3xlvx 6 392 2152 0 14 Dtool_VZN3xlvx 2 4 this 3 2193  5 other 1 2193  
467 14 Dtool_VZN3auYz 6 393 2152 0 14 Dtool_VZN3auYz 2 4 this 3 2193  5 other 1 2193  
468 14 Dtool_VZN3mNAi 6 394 2152 0 14 Dtool_VZN3mNAi 2 4 this 3 2193  5 other 1 2193  
469 14 Dtool_VZN3tXnx 6 395 2151 0 14 Dtool_VZN3tXnx 2 4 this 3 2193  5 other 1 2193  
470 14 Dtool_VZN3IZYW 6 395 2151 0 14 Dtool_VZN3IZYW 3 4 this 3 2193  5 other 1 2193  9 threshold 1 2148  
471 14 Dtool_VZN3diZ0 6 396 2149 0 14 Dtool_VZN3diZ0 1 4 this 3 2193  
472 14 Dtool_VZN3zn_6 6 396 2149 0 14 Dtool_VZN3zn_6 2 4 this 3 2193  9 threshold 1 2148  
473 14 Dtool_VZN3r3PD 6 397 2149 0 14 Dtool_VZN3r3PD 2 4 this 3 2193  4 hash 1 2149  
474 14 Dtool_VZN3NEBo 6 397 2149 0 14 Dtool_VZN3NEBo 3 4 this 3 2193  4 hash 1 2149  9 threshold 1 2148  
475 14 Dtool_VZN3POux 7 398 2192 1601 14 Dtool_VZN3POux 1 4 this 3 2193  
476 14 Dtool_VZN3ztwL 7 399 2192 1601 14 Dtool_VZN3ztwL 2 4 this 3 2193  5 other 1 2193  
477 14 Dtool_VZN3zdSf 7 400 2192 1601 14 Dtool_VZN3zdSf 2 4 this 3 2193  5 other 1 2193  
478 14 Dtool_VZN3reVF 7 401 2192 1601 14 Dtool_VZN3reVF 2 4 this 3 2193  6 scalar 1 2148  
479 14 Dtool_VZN3r2J2 7 402 2192 1601 14 Dtool_VZN3r2J2 2 4 this 3 2193  6 scalar 1 2148  
480 14 Dtool_VZN3tr3T 6 403 2192 0 14 Dtool_VZN3tr3T 2 4 this 3 2192  5 other 1 2193  
481 14 Dtool_VZN3tbZn 6 404 2192 0 14 Dtool_VZN3tbZn 2 4 this 3 2192  5 other 1 2193  
482 14 Dtool_VZN37ZPM 6 405 2192 0 14 Dtool_VZN37ZPM 2 4 this 3 2192  6 scalar 1 2148  
483 14 Dtool_VZN37hD9 6 406 2192 0 14 Dtool_VZN37hD9 2 4 this 3 2192  6 scalar 1 2148  
484 14 Dtool_VZN3jRaJ 7 407 2192 1601 14 Dtool_VZN3jRaJ 2 4 this 3 2192  5 other 1 2193  
485 14 Dtool_VZN3BC7H 7 408 2192 1601 14 Dtool_VZN3BC7H 2 4 this 3 2192  5 other 1 2193  
486 14 Dtool_VZN3yKzg 6 409 2152 0 14 Dtool_VZN3yKzg 2 4 this 3 2193  5 other 1 2193  
487 14 Dtool_VZN3__lQ 6 409 2152 0 14 Dtool_VZN3__lQ 3 4 this 3 2193  5 other 1 2193  9 threshold 1 2148  
488 14 Dtool_VZN3QPcK 4 410 2150 0 14 Dtool_VZN3QPcK 2 4 this 3 2193  3 out 1 2153  
489 14 Dtool_VZN3FM3d 4 411 2150 0 14 Dtool_VZN3FM3d 3 4 this 3 2193  3 out 1 2153  10 class_name 1 2155  
490 14 Dtool_VZN3hKuD 7 412 2157 0 14 Dtool_VZN3hKuD 0 
491 14 Dtool_VZN3fAuU 7 414 2195 1654 14 Dtool_VZN3fAuU 0 
492 14 Dtool_VZN3KfrW 7 414 2195 1654 14 Dtool_VZN3KfrW 1 4 copy 1 2196  
493 14 Dtool_VZN35BJ_ 7 414 2195 1654 14 Dtool_VZN35BJ_ 1 10 fill_value 1 2161  
494 14 Dtool_VZN3GENf 7 414 2195 1654 14 Dtool_VZN3GENf 4 1 x 1 2161  1 y 1 2161  1 z 1 2161  1 w 1 2161  
495 14 Dtool_VZN3e6iS 6 415 2195 0 14 Dtool_VZN3e6iS 2 4 this 3 2195  4 copy 1 2196  
496 14 Dtool_VZN3IM_5 6 415 2195 0 14 Dtool_VZN3IM_5 2 4 this 3 2195  10 fill_value 1 2161  
497 14 Dtool_VZN326Ht 4 416 2150 0 14 Dtool_VZN326Ht 2 4 this 3 2195  4 size 1 2149  
498 14 Dtool_VZN3YrPj 6 418 2196 0 14 Dtool_VZN3YrPj 0 
499 14 Dtool_VZN3QxFH 6 419 2196 0 14 Dtool_VZN3QxFH 0 
500 14 Dtool_VZN3SxTj 6 420 2196 0 14 Dtool_VZN3SxTj 0 
501 14 Dtool_VZN3sxh_ 6 421 2196 0 14 Dtool_VZN3sxh_ 0 
502 14 Dtool_VZN3Vx3q 6 422 2196 0 14 Dtool_VZN3Vx3q 0 
503 14 Dtool_VZN3mm3I 4 424 2150 0 14 Dtool_VZN3mm3I 2 4 this 3 2195  1 i 1 2151  
504 14 Dtool_VZN31Hrl 6 424 2161 0 14 Dtool_VZN31Hrl 2 4 this 3 2196  1 i 1 2151  
505 14 Dtool_VZN3Pu2T 6 425 2152 0 14 Dtool_VZN3Pu2T 1 4 this 3 2196  
506 14 Dtool_VZN3_qP5 6 426 2161 0 14 Dtool_VZN3_qP5 2 4 this 3 2196  1 i 1 2151  
507 14 Dtool_VZN3rtvk 6 427 2161 0 14 Dtool_VZN3rtvk 1 4 this 3 2196  
508 14 Dtool_VZN3rJop 6 428 2161 0 14 Dtool_VZN3rJop 1 4 this 3 2196  
509 14 Dtool_VZN3rlgu 6 429 2161 0 14 Dtool_VZN3rlgu 1 4 this 3 2196  
510 14 Dtool_VZN3rx3f 6 430 2161 0 14 Dtool_VZN3rx3f 1 4 this 3 2196  
511 14 Dtool_VZN3f_AA 4 431 2150 0 14 Dtool_VZN3f_AA 3 4 this 3 2195  1 i 1 2151  5 value 1 2161  
512 14 Dtool_VZN3jGFc 4 432 2150 0 14 Dtool_VZN3jGFc 2 4 this 3 2195  5 value 1 2161  
513 14 Dtool_VZN3ji9g 4 433 2150 0 14 Dtool_VZN3ji9g 2 4 this 3 2195  5 value 1 2161  
514 14 Dtool_VZN3je2l 4 434 2150 0 14 Dtool_VZN3je2l 2 4 this 3 2195  5 value 1 2161  
515 14 Dtool_VZN3jqMX 4 435 2150 0 14 Dtool_VZN3jqMX 2 4 this 3 2195  5 value 1 2161  
516 14 Dtool_VZN3fMae 4 436 2150 0 14 Dtool_VZN3fMae 3 4 this 3 2195  1 i 1 2151  5 value 1 2161  
517 14 Dtool_VZN3ARia 4 437 2150 0 14 Dtool_VZN3ARia 2 4 this 3 2195  5 value 1 2161  
518 14 Dtool_VZN3A1af 4 438 2150 0 14 Dtool_VZN3A1af 2 4 this 3 2195  5 value 1 2161  
519 14 Dtool_VZN3AZTk 4 439 2150 0 14 Dtool_VZN3AZTk 2 4 this 3 2195  5 value 1 2161  
520 14 Dtool_VZN3ANqV 4 440 2150 0 14 Dtool_VZN3ANqV 2 4 this 3 2195  5 value 1 2161  
521 14 Dtool_VZN3x8zX 4 441 2150 0 14 Dtool_VZN3x8zX 1 4 this 3 2196  
522 14 Dtool_VZN3Xx2K 6 442 2151 0 14 Dtool_VZN3Xx2K 1 4 this 3 2196  
523 14 Dtool_VZN3FbMg 4 443 2150 0 14 Dtool_VZN3FbMg 2 4 this 3 2195  10 fill_value 1 2161  
524 14 Dtool_VZN3dT7O 4 444 2150 0 14 Dtool_VZN3dT7O 5 4 this 3 2195  1 x 1 2161  1 y 1 2161  1 z 1 2161  1 w 1 2161  
525 14 Dtool_VZN3VfrF 6 445 2161 0 14 Dtool_VZN3VfrF 2 4 this 3 2196  5 other 1 2196  
526 14 Dtool_VZN3zfP_ 6 446 2152 0 14 Dtool_VZN3zfP_ 2 4 this 3 2196  5 other 1 2196  
527 14 Dtool_VZN3eFYT 6 447 2152 0 14 Dtool_VZN3eFYT 2 4 this 3 2196  5 other 1 2196  
528 14 Dtool_VZN3alAC 6 448 2152 0 14 Dtool_VZN3alAC 2 4 this 3 2196  5 other 1 2196  
529 14 Dtool_VZN30LH_ 6 449 2151 0 14 Dtool_VZN30LH_ 2 4 this 3 2196  5 other 1 2196  
530 14 Dtool_VZN3319I 6 449 2151 0 14 Dtool_VZN3319I 3 4 this 3 2196  5 other 1 2196  9 threshold 1 2161  
531 14 Dtool_VZN38_ZE 6 450 2149 0 14 Dtool_VZN38_ZE 1 4 this 3 2196  
532 14 Dtool_VZN3SwXj 6 450 2149 0 14 Dtool_VZN3SwXj 2 4 this 3 2196  9 threshold 1 2161  
533 14 Dtool_VZN3JoPT 6 451 2149 0 14 Dtool_VZN3JoPT 2 4 this 3 2196  4 hash 1 2149  
534 14 Dtool_VZN3XZGe 6 451 2149 0 14 Dtool_VZN3XZGe 3 4 this 3 2196  4 hash 1 2149  9 threshold 1 2161  
535 14 Dtool_VZN3QyvB 7 452 2195 1654 14 Dtool_VZN3QyvB 1 4 this 3 2196  
536 14 Dtool_VZN3tXQY 7 453 2195 1654 14 Dtool_VZN3tXQY 2 4 this 3 2196  5 other 1 2196  
537 14 Dtool_VZN3tnyr 7 454 2195 1654 14 Dtool_VZN3tnyr 2 4 this 3 2196  5 other 1 2196  
538 14 Dtool_VZN3W_WY 7 455 2195 1654 14 Dtool_VZN3W_WY 2 4 this 3 2196  6 scalar 1 2161  
539 14 Dtool_VZN3XWNJ 7 456 2195 1654 14 Dtool_VZN3XWNJ 2 4 this 3 2196  6 scalar 1 2161  
540 14 Dtool_VZN3hw2z 6 457 2195 0 14 Dtool_VZN3hw2z 2 4 this 3 2195  5 other 1 2196  
541 14 Dtool_VZN3iAYH 6 458 2195 0 14 Dtool_VZN3iAYH 2 4 this 3 2195  5 other 1 2196  
542 14 Dtool_VZN35DXY 6 459 2195 0 14 Dtool_VZN35DXY 2 4 this 3 2195  6 scalar 1 2161  
543 14 Dtool_VZN3_7LJ 6 460 2195 0 14 Dtool_VZN3_7LJ 2 4 this 3 2195  6 scalar 1 2161  
544 14 Dtool_VZN3_0Xy 7 461 2195 1654 14 Dtool_VZN3_0Xy 2 4 this 3 2195  5 other 1 2196  
545 14 Dtool_VZN3dn2w 7 462 2195 1654 14 Dtool_VZN3dn2w 2 4 this 3 2195  5 other 1 2196  
546 14 Dtool_VZN3coqw 6 463 2152 0 14 Dtool_VZN3coqw 2 4 this 3 2196  5 other 1 2196  
547 14 Dtool_VZN39ILB 6 463 2152 0 14 Dtool_VZN39ILB 3 4 this 3 2196  5 other 1 2196  9 threshold 1 2161  
548 14 Dtool_VZN31Bda 4 464 2150 0 14 Dtool_VZN31Bda 2 4 this 3 2196  3 out 1 2153  
549 14 Dtool_VZN3eB2t 4 465 2150 0 14 Dtool_VZN3eB2t 3 4 this 3 2196  3 out 1 2153  10 class_name 1 2155  
550 14 Dtool_VZN3GAvT 7 466 2157 0 14 Dtool_VZN3GAvT 0 
551 14 Dtool_VZN32hGZ 7 468 2198 1715 14 Dtool_VZN32hGZ 0 
552 14 Dtool_VZN355R7 7 468 2198 1715 14 Dtool_VZN355R7 1 4 copy 1 2193  
553 14 Dtool_VZN3IgP3 7 468 2198 1715 14 Dtool_VZN3IgP3 1 10 fill_value 1 2148  
554 14 Dtool_VZN3GLX9 7 468 2198 1715 14 Dtool_VZN3GLX9 4 1 x 1 2148  1 y 1 2148  1 z 1 2148  1 w 1 2148  
555 14 Dtool_VZN3q2Ys 6 469 2198 0 14 Dtool_VZN3q2Ys 2 4 this 3 2198  4 copy 1 2193  
556 14 Dtool_VZN3RfUr 6 469 2198 0 14 Dtool_VZN3RfUr 2 4 this 3 2198  10 fill_value 1 2148  
557 14 Dtool_VZN3PC0O 6 470 2199 0 14 Dtool_VZN3PC0O 0 
558 14 Dtool_VZN3xI8j 6 471 2199 0 14 Dtool_VZN3xI8j 0 
559 14 Dtool_VZN3xk1o 6 472 2199 0 14 Dtool_VZN3xk1o 0 
560 14 Dtool_VZN3xAtt 6 473 2199 0 14 Dtool_VZN3xAtt 0 
561 14 Dtool_VZN3xsEf 6 474 2199 0 14 Dtool_VZN3xsEf 0 
562 14 Dtool_VZN3WMwv 7 475 2198 1715 14 Dtool_VZN3WMwv 1 4 this 3 2199  
563 14 Dtool_VZN3WUig 7 476 2192 1601 14 Dtool_VZN3WUig 2 4 this 3 2199  5 other 1 2193  
564 14 Dtool_VZN3OmWu 7 476 2198 1715 14 Dtool_VZN3OmWu 2 4 this 3 2199  5 other 1 2199  
565 14 Dtool_VZN32RJh 7 477 2192 1601 14 Dtool_VZN32RJh 2 4 this 3 2199  5 other 1 2193  
566 14 Dtool_VZN3uj9u 7 477 2198 1715 14 Dtool_VZN3uj9u 2 4 this 3 2199  5 other 1 2199  
567 14 Dtool_VZN3jCMM 6 478 2148 0 14 Dtool_VZN3jCMM 1 4 this 3 2199  
568 14 Dtool_VZN3CsKn 6 479 2148 0 14 Dtool_VZN3CsKn 1 4 this 3 2199  
569 14 Dtool_VZN3vg3U 6 480 2152 0 14 Dtool_VZN3vg3U 1 4 this 3 2198  
570 14 Dtool_VZN3TPWC 7 481 2198 1715 14 Dtool_VZN3TPWC 2 4 this 3 2199  6 scalar 1 2148  
571 14 Dtool_VZN3jn4D 7 482 2198 1715 14 Dtool_VZN3jn4D 2 4 this 3 2199  6 scalar 1 2148  
572 14 Dtool_VZN3eACX 4 483 2150 0 14 Dtool_VZN3eACX 3 4 this 3 2199  3 out 1 2153  10 class_name 1 2155  
573 14 Dtool_VZN3vYTA 7 484 2157 0 14 Dtool_VZN3vYTA 0 
574 14 Dtool_VZN3STkV 7 487 2201 1733 14 Dtool_VZN3STkV 0 
575 14 Dtool_VZN3rcU1 7 487 2201 1733 14 Dtool_VZN3rcU1 1 4 copy 1 2196  
576 14 Dtool_VZN38AKA 7 487 2201 1733 14 Dtool_VZN38AKA 1 10 fill_value 1 2161  
577 14 Dtool_VZN372XI 7 487 2201 1733 14 Dtool_VZN372XI 4 1 x 1 2161  1 y 1 2161  1 z 1 2161  1 w 1 2161  
578 14 Dtool_VZN3y3xa 6 488 2201 0 14 Dtool_VZN3y3xa 2 4 this 3 2201  4 copy 1 2196  
579 14 Dtool_VZN3p_A2 6 488 2201 0 14 Dtool_VZN3p_A2 2 4 this 3 2201  10 fill_value 1 2161  
580 14 Dtool_VZN32FUL 6 489 2202 0 14 Dtool_VZN32FUL 0 
581 14 Dtool_VZN3oXcg 6 490 2202 0 14 Dtool_VZN3oXcg 0 
582 14 Dtool_VZN3o7Vl 6 491 2202 0 14 Dtool_VZN3o7Vl 0 
583 14 Dtool_VZN3ofNq 6 492 2202 0 14 Dtool_VZN3ofNq 0 
584 14 Dtool_VZN3ozkb 6 493 2202 0 14 Dtool_VZN3ozkb 0 
585 14 Dtool_VZN3PNQs 7 494 2201 1733 14 Dtool_VZN3PNQs 1 4 this 3 2202  
586 14 Dtool_VZN3uV7O 7 495 2195 1654 14 Dtool_VZN3uV7O 2 4 this 3 2202  5 other 1 2196  
587 14 Dtool_VZN3h1ao 7 495 2201 1733 14 Dtool_VZN3h1ao 2 4 this 3 2202  5 other 1 2202  
588 14 Dtool_VZN3OQiP 7 496 2195 1654 14 Dtool_VZN3OQiP 2 4 this 3 2202  5 other 1 2196  
589 14 Dtool_VZN3BwBp 7 496 2201 1733 14 Dtool_VZN3BwBp 2 4 this 3 2202  5 other 1 2202  
590 14 Dtool_VZN3cNsI 6 497 2161 0 14 Dtool_VZN3cNsI 1 4 this 3 2202  
591 14 Dtool_VZN3psqj 6 498 2161 0 14 Dtool_VZN3psqj 1 4 this 3 2202  
592 14 Dtool_VZN3UhXR 6 499 2152 0 14 Dtool_VZN3UhXR 1 4 this 3 2201  
593 14 Dtool_VZN39Z8K 7 500 2201 1733 14 Dtool_VZN39Z8K 2 4 this 3 2202  6 scalar 1 2161  
594 14 Dtool_VZN3twdM 7 501 2201 1733 14 Dtool_VZN3twdM 2 4 this 3 2202  6 scalar 1 2161  
595 14 Dtool_VZN3xDiT 4 502 2150 0 14 Dtool_VZN3xDiT 3 4 this 3 2202  3 out 1 2153  10 class_name 1 2155  
596 14 Dtool_VZN3HZz8 7 503 2157 0 14 Dtool_VZN3HZz8 0 
597 14 Dtool_VZN3zUXk 7 506 2204 1748 14 Dtool_VZN3zUXk 0 
598 14 Dtool_VZN3SD57 7 506 2204 1748 14 Dtool_VZN3SD57 1 4 copy 1 2193  
599 14 Dtool_VZN3Cj8c 7 506 2204 1748 14 Dtool_VZN3Cj8c 1 10 fill_value 1 2148  
600 14 Dtool_VZN3zr8M 7 506 2204 1748 14 Dtool_VZN3zr8M 4 1 x 1 2148  1 y 1 2148  1 z 1 2148  1 w 1 2148  
601 14 Dtool_VZN3bZBR 6 507 2204 0 14 Dtool_VZN3bZBR 2 4 this 3 2204  4 copy 1 2193  
602 14 Dtool_VZN3qdAN 6 507 2204 0 14 Dtool_VZN3qdAN 2 4 this 3 2204  10 fill_value 1 2148  
603 14 Dtool_VZN3q1J6 6 508 2205 0 14 Dtool_VZN3q1J6 0 
604 14 Dtool_VZN3C0yG 6 509 2205 0 14 Dtool_VZN3C0yG 0 
605 14 Dtool_VZN3aH8G 6 510 2205 0 14 Dtool_VZN3aH8G 0 
606 14 Dtool_VZN3SWGH 6 511 2205 0 14 Dtool_VZN3SWGH 0 
607 14 Dtool_VZN3KloG 6 512 2205 0 14 Dtool_VZN3KloG 0 
608 14 Dtool_VZN30LJX 7 513 2204 1748 14 Dtool_VZN30LJX 1 4 this 3 2205  
609 14 Dtool_VZN3Icoy 7 514 2192 1601 14 Dtool_VZN3Icoy 2 4 this 3 2205  5 other 1 2193  
610 14 Dtool_VZN3opEn 7 514 2204 1748 14 Dtool_VZN3opEn 2 4 this 3 2205  5 other 1 2199  
611 14 Dtool_VZN3MM2G 7 515 2198 1715 14 Dtool_VZN3MM2G 2 4 this 3 2205  5 other 1 2205  
612 14 Dtool_VZN3Tupy 7 515 2192 1601 14 Dtool_VZN3Tupy 2 4 this 3 2205  5 other 1 2193  
613 14 Dtool_VZN3XbFn 7 515 2204 1748 14 Dtool_VZN3XbFn 2 4 this 3 2205  5 other 1 2199  
614 14 Dtool_VZN3Udt9 7 516 2204 1748 14 Dtool_VZN3Udt9 2 4 this 3 2205  6 scalar 1 2148  
615 14 Dtool_VZN3rXwd 7 517 2204 1748 14 Dtool_VZN3rXwd 2 4 this 3 2205  6 scalar 1 2148  
616 14 Dtool_VZN3FwQw 4 518 2150 0 14 Dtool_VZN3FwQw 3 4 this 3 2205  3 out 1 2153  10 class_name 1 2155  
617 14 Dtool_VZN3nbpV 7 519 2157 0 14 Dtool_VZN3nbpV 0 
618 14 Dtool_VZN3tU0d 7 522 2207 1763 14 Dtool_VZN3tU0d 0 
619 14 Dtool_VZN3JZW9 7 522 2207 1763 14 Dtool_VZN3JZW9 1 4 copy 1 2196  
620 14 Dtool_VZN336e0 7 522 2207 1763 14 Dtool_VZN336e0 1 10 fill_value 1 2161  
621 14 Dtool_VZN3CpeG 7 522 2207 1763 14 Dtool_VZN3CpeG 4 1 x 1 2161  1 y 1 2161  1 z 1 2161  1 w 1 2161  
622 14 Dtool_VZN3YHeA 6 523 2207 0 14 Dtool_VZN3YHeA 2 4 this 3 2207  4 copy 1 2196  
623 14 Dtool_VZN3MxVL 6 523 2207 0 14 Dtool_VZN3MxVL 2 4 this 3 2207  10 fill_value 1 2161  
624 14 Dtool_VZN3r1Cs 6 524 2208 0 14 Dtool_VZN3r1Cs 0 
625 14 Dtool_VZN3A0r4 6 525 2208 0 14 Dtool_VZN3A0r4 0 
626 14 Dtool_VZN3YH14 6 526 2208 0 14 Dtool_VZN3YH14 0 
627 14 Dtool_VZN3QW_4 6 527 2208 0 14 Dtool_VZN3QW_4 0 
628 14 Dtool_VZN3Ilh4 6 528 2208 0 14 Dtool_VZN3Ilh4 0 
629 14 Dtool_VZN31LCJ 7 529 2207 1763 14 Dtool_VZN31LCJ 1 4 this 3 2208  
630 14 Dtool_VZN3LSFi 7 530 2195 1654 14 Dtool_VZN3LSFi 2 4 this 3 2208  5 other 1 2196  
631 14 Dtool_VZN3zh4Y 7 530 2207 1763 14 Dtool_VZN3zh4Y 2 4 this 3 2208  5 other 1 2202  
632 14 Dtool_VZN3xIuA 7 531 2201 1733 14 Dtool_VZN3xIuA 2 4 this 3 2208  5 other 1 2208  
633 14 Dtool_VZN3QcGi 7 531 2195 1654 14 Dtool_VZN3QcGi 2 4 this 3 2208  5 other 1 2196  
634 14 Dtool_VZN30T5Y 7 531 2207 1763 14 Dtool_VZN30T5Y 2 4 this 3 2208  5 other 1 2202  
635 14 Dtool_VZN3re_H 7 532 2207 1763 14 Dtool_VZN3re_H 2 4 this 3 2208  6 scalar 1 2161  
636 14 Dtool_VZN36DAo 7 533 2207 1763 14 Dtool_VZN36DAo 2 4 this 3 2208  6 scalar 1 2161  
637 14 Dtool_VZN3EwJi 4 534 2150 0 14 Dtool_VZN3EwJi 3 4 this 3 2208  3 out 1 2153  10 class_name 1 2155  
638 14 Dtool_VZN3mbiH 7 535 2157 0 14 Dtool_VZN3mbiH 0 
639 14 Dtool_VZN3l0PU 7 538 2210 1816 14 Dtool_VZN3l0PU 0 
640 14 Dtool_VZN3sN2u 7 538 2210 1816 14 Dtool_VZN3sN2u 1 5 other 1 2211  
641 14 Dtool_VZN3Qz8c 7 538 2210 1816 14 Dtool_VZN3Qz8c 9 3 e00 1 2148  3 e01 1 2148  3 e02 1 2148  3 e10 1 2148  3 e11 1 2148  3 e12 1 2148  3 e20 1 2148  3 e21 1 2148  3 e22 1 2148  
642 14 Dtool_VZN3WGVN 6 539 2210 0 14 Dtool_VZN3WGVN 2 4 this 3 2210  5 other 1 2211  
643 14 Dtool_VZN3OZp_ 6 539 2210 0 14 Dtool_VZN3OZp_ 2 4 this 3 2210  10 fill_value 1 2148  
644 14 Dtool_VZN3xIaw 4 540 2150 0 14 Dtool_VZN3xIaw 2 4 this 3 2210  4 size 1 2149  
645 14 Dtool_VZN3gH0z 4 542 2150 0 14 Dtool_VZN3gH0z 2 4 this 3 2210  10 fill_value 1 2148  
646 14 Dtool_VZN3z3qU 4 543 2150 0 14 Dtool_VZN3z3qU 10 4 this 3 2210  3 e00 1 2148  3 e01 1 2148  3 e02 1 2148  3 e10 1 2148  3 e11 1 2148  3 e12 1 2148  3 e20 1 2148  3 e21 1 2148  3 e22 1 2148  
647 14 Dtool_VZN3N5w9 4 544 2150 0 14 Dtool_VZN3N5w9 3 4 this 3 2210  3 row 1 2151  1 v 1 2146  
648 14 Dtool_VZN355gf 4 544 2150 0 14 Dtool_VZN355gf 3 4 this 3 2210  3 row 1 2151  1 v 1 2175  
649 14 Dtool_VZN3vDEF 4 545 2150 0 14 Dtool_VZN3vDEF 3 4 this 3 2210  3 col 1 2151  1 v 1 2146  
650 14 Dtool_VZN3ac0m 4 545 2150 0 14 Dtool_VZN3ac0m 3 4 this 3 2210  3 col 1 2151  1 v 1 2175  
651 14 Dtool_VZN3dfDX 4 546 2150 0 14 Dtool_VZN3dfDX 3 4 this 3 2211  10 result_vec 1 2174  3 row 1 2151  
652 14 Dtool_VZN3wROZ 7 546 2174 1407 14 Dtool_VZN3wROZ 2 4 this 3 2211  3 row 1 2151  
653 14 Dtool_VZN3Fuhg 7 547 2174 1407 14 Dtool_VZN3Fuhg 2 4 this 3 2211  3 col 1 2151  
654 14 Dtool_VZN37qSI 7 548 2145 1255 14 Dtool_VZN37qSI 2 4 this 3 2211  3 row 1 2151  
655 14 Dtool_VZN3WJmP 7 549 2145 1255 14 Dtool_VZN3WJmP 2 4 this 3 2211  3 col 1 2151  
656 14 Dtool_VZN3HBvR 4 550 2150 0 14 Dtool_VZN3HBvR 3 4 this 3 2210  3 row 1 2151  3 col 1 2151  
657 14 Dtool_VZN3_Fgz 6 550 2148 0 14 Dtool_VZN3_Fgz 3 4 this 3 2211  3 row 1 2151  3 col 1 2151  
658 14 Dtool_VZN3R3pT 6 551 2152 0 14 Dtool_VZN3R3pT 1 4 this 3 2211  
659 14 Dtool_VZN3H4Zy 6 552 2148 0 14 Dtool_VZN3H4Zy 3 4 this 3 2211  3 row 1 2151  3 col 1 2151  
660 14 Dtool_VZN3l0_H 4 553 2150 0 14 Dtool_VZN3l0_H 4 4 this 3 2210  3 row 1 2151  3 col 1 2151  5 value 1 2148  
661 14 Dtool_VZN3WvxR 4 554 2150 0 14 Dtool_VZN3WvxR 1 4 this 3 2211  
662 14 Dtool_VZN3bMUR 6 555 2151 0 14 Dtool_VZN3bMUR 1 4 this 3 2211  
663 14 Dtool_VZN3vhzu 6 556 2152 0 14 Dtool_VZN3vhzu 2 4 this 3 2211  5 other 1 2211  
664 14 Dtool_VZN3JQr_ 6 557 2152 0 14 Dtool_VZN3JQr_ 2 4 this 3 2211  5 other 1 2211  
665 14 Dtool_VZN3JhJ3 6 558 2152 0 14 Dtool_VZN3JhJ3 2 4 this 3 2211  5 other 1 2211  
666 14 Dtool_VZN3KM0m 6 559 2151 0 14 Dtool_VZN3KM0m 2 4 this 3 2211  5 other 1 2211  
667 14 Dtool_VZN3xCZj 6 559 2151 0 14 Dtool_VZN3xCZj 3 4 this 3 2211  5 other 1 2211  9 threshold 1 2148  
668 14 Dtool_VZN3W4In 6 560 2149 0 14 Dtool_VZN3W4In 1 4 this 3 2211  
669 14 Dtool_VZN3G8W5 6 560 2149 0 14 Dtool_VZN3G8W5 2 4 this 3 2211  9 threshold 1 2148  
670 14 Dtool_VZN3pcnj 6 561 2149 0 14 Dtool_VZN3pcnj 2 4 this 3 2211  4 hash 1 2149  
671 14 Dtool_VZN3Gmv2 6 561 2149 0 14 Dtool_VZN3Gmv2 3 4 this 3 2211  4 hash 1 2149  9 threshold 1 2148  
672 14 Dtool_VZN3Hzw6 7 562 2174 1407 14 Dtool_VZN3Hzw6 2 4 this 3 2211  1 v 1 2175  
673 14 Dtool_VZN3E0BQ 7 563 2145 1255 14 Dtool_VZN3E0BQ 2 4 this 3 2211  1 v 1 2146  
674 14 Dtool_VZN3I3MJ 7 564 2145 1255 14 Dtool_VZN3I3MJ 2 4 this 3 2211  1 v 1 2146  
675 14 Dtool_VZN3SR6_ 4 565 2150 0 14 Dtool_VZN3SR6_ 3 4 this 3 2210  6 other1 1 2211  6 other2 1 2211  
676 14 Dtool_VZN3PBTp 7 566 2210 1816 14 Dtool_VZN3PBTp 2 4 this 3 2211  5 other 1 2211  
677 14 Dtool_VZN3cFqV 7 566 2210 1816 14 Dtool_VZN3cFqV 2 4 this 3 2211  6 scalar 1 2148  
678 14 Dtool_VZN3MqMX 7 567 2210 1816 14 Dtool_VZN3MqMX 2 4 this 3 2211  6 scalar 1 2148  
679 14 Dtool_VZN3E0iA 6 568 2210 0 14 Dtool_VZN3E0iA 2 4 this 3 2210  5 other 1 2211  
680 14 Dtool_VZN3kIJB 6 569 2210 0 14 Dtool_VZN3kIJB 2 4 this 3 2210  5 other 1 2211  
681 14 Dtool_VZN30XOA 6 570 2210 0 14 Dtool_VZN30XOA 2 4 this 3 2210  5 other 1 2211  
682 14 Dtool_VZN3MH5p 6 570 2210 0 14 Dtool_VZN3MH5p 2 4 this 3 2210  6 scalar 1 2148  
683 14 Dtool_VZN3c8ar 6 571 2210 0 14 Dtool_VZN3c8ar 2 4 this 3 2210  6 scalar 1 2148  
684 14 Dtool_VZN33zlL 6 572 2148 0 14 Dtool_VZN33zlL 1 4 this 3 2211  
685 14 Dtool_VZN3lS3s 4 573 2150 0 14 Dtool_VZN3lS3s 2 4 this 3 2210  5 other 1 2211  
686 14 Dtool_VZN38Ojo 4 574 2150 0 14 Dtool_VZN38Ojo 1 4 this 3 2210  
687 14 Dtool_VZN3UKZ2 6 575 2152 0 14 Dtool_VZN3UKZ2 2 4 this 3 2210  5 other 1 2211  
688 14 Dtool_VZN3huLY 6 576 2152 0 14 Dtool_VZN3huLY 1 4 this 3 2210  
689 14 Dtool_VZN3q8vo 6 577 2211 0 14 Dtool_VZN3q8vo 0 
690 14 Dtool_VZN39Yv7 7 578 2210 1816 14 Dtool_VZN39Yv7 1 5 trans 1 2146  
691 14 Dtool_VZN31aHR 7 578 2210 1816 14 Dtool_VZN31aHR 2 2 tx 1 2148  2 ty 1 2148  
692 14 Dtool_VZN3wS2A 7 579 2210 1816 14 Dtool_VZN3wS2A 1 5 angle 1 2148  
693 14 Dtool_VZN3zgNZ 7 579 2210 1816 14 Dtool_VZN3zgNZ 3 5 angle 1 2148  4 axis 1 2174  2 cs 1 2124  
694 14 Dtool_VZN3y0rv 7 579 2210 1816 14 Dtool_VZN3y0rv 2 5 angle 1 2148  4 axis 1 2174  
695 14 Dtool_VZN3fF2k 7 580 2210 1816 14 Dtool_VZN3fF2k 1 5 scale 1 2146  
696 14 Dtool_VZN3Np4k 7 580 2210 1816 14 Dtool_VZN3Np4k 1 5 scale 1 2175  
697 14 Dtool_VZN3KKk6 7 580 2210 1816 14 Dtool_VZN3KKk6 2 2 sx 1 2148  2 sy 1 2148  
698 14 Dtool_VZN3x6ng 7 580 2210 1816 14 Dtool_VZN3x6ng 3 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  
699 14 Dtool_VZN3Sl9G 7 581 2210 1816 14 Dtool_VZN3Sl9G 3 5 angle 1 2148  4 axis 1 2175  2 cs 1 2124  
700 14 Dtool_VZN3if2Z 7 581 2210 1816 14 Dtool_VZN3if2Z 2 5 angle 1 2148  4 axis 1 2175  
701 14 Dtool_VZN34aMC 7 582 2210 1816 14 Dtool_VZN34aMC 2 5 shear 1 2175  2 cs 1 2124  
702 14 Dtool_VZN3KUWr 7 582 2210 1816 14 Dtool_VZN3KUWr 1 5 shear 1 2175  
703 14 Dtool_VZN3iw5Z 7 582 2210 1816 14 Dtool_VZN3iw5Z 4 4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  2 cs 1 2124  
704 14 Dtool_VZN3wRFn 7 582 2210 1816 14 Dtool_VZN3wRFn 3 4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  
705 14 Dtool_VZN3aF0T 7 583 2210 1816 14 Dtool_VZN3aF0T 3 5 scale 1 2175  5 shear 1 2175  2 cs 1 2124  
706 14 Dtool_VZN3_Jjt 7 583 2210 1816 14 Dtool_VZN3_Jjt 2 5 scale 1 2175  5 shear 1 2175  
707 14 Dtool_VZN3iFf9 7 583 2210 1816 14 Dtool_VZN3iFf9 7 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  2 cs 1 2124  
708 14 Dtool_VZN3ie6G 7 583 2210 1816 14 Dtool_VZN3ie6G 6 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  
709 14 Dtool_VZN3jv0p 6 584 2211 0 14 Dtool_VZN3jv0p 2 4 from 1 2124  2 to 1 2124  
710 14 Dtool_VZN35LZV 6 585 2152 0 14 Dtool_VZN35LZV 2 4 this 3 2211  5 other 1 2211  
711 14 Dtool_VZN3jSL6 6 585 2152 0 14 Dtool_VZN3jSL6 3 4 this 3 2211  5 other 1 2211  9 threshold 1 2148  
712 14 Dtool_VZN3zE1n 4 586 2150 0 14 Dtool_VZN3zE1n 2 4 this 3 2211  3 out 1 2153  
713 14 Dtool_VZN3xi6e 4 587 2150 0 14 Dtool_VZN3xi6e 3 4 this 3 2211  3 out 1 2153  12 indent_level 1 2151  
714 14 Dtool_VZN3t5Vo 4 587 2150 0 14 Dtool_VZN3t5Vo 2 4 this 3 2211  3 out 1 2153  
715 14 Dtool_VZN3f4Xq 4 588 2150 0 14 Dtool_VZN3f4Xq 3 4 this 3 2211  3 out 1 2153  10 class_name 1 2155  
716 14 Dtool_VZN3IXnT 7 589 2157 0 14 Dtool_VZN3IXnT 0 
717 14 Dtool_VZN3HKtQ 7 594 2213 1871 14 Dtool_VZN3HKtQ 0 
718 14 Dtool_VZN3gwPr 7 594 2213 1871 14 Dtool_VZN3gwPr 1 5 other 1 2214  
719 14 Dtool_VZN31oPv 7 594 2213 1871 14 Dtool_VZN31oPv 9 3 e00 1 2161  3 e01 1 2161  3 e02 1 2161  3 e10 1 2161  3 e11 1 2161  3 e12 1 2161  3 e20 1 2161  3 e21 1 2161  3 e22 1 2161  
720 14 Dtool_VZN39QZH 6 595 2213 0 14 Dtool_VZN39QZH 2 4 this 3 2213  5 other 1 2214  
721 14 Dtool_VZN3ByUJ 6 595 2213 0 14 Dtool_VZN3ByUJ 2 4 this 3 2213  10 fill_value 1 2161  
722 14 Dtool_VZN3eI6s 4 596 2150 0 14 Dtool_VZN3eI6s 2 4 this 3 2213  4 size 1 2149  
723 14 Dtool_VZN3tMiW 4 598 2150 0 14 Dtool_VZN3tMiW 2 4 this 3 2213  10 fill_value 1 2161  
724 14 Dtool_VZN3YSjO 4 599 2150 0 14 Dtool_VZN3YSjO 10 4 this 3 2213  3 e00 1 2161  3 e01 1 2161  3 e02 1 2161  3 e10 1 2161  3 e11 1 2161  3 e12 1 2161  3 e20 1 2161  3 e21 1 2161  3 e22 1 2161  
725 14 Dtool_VZN3MjRK 4 600 2150 0 14 Dtool_VZN3MjRK 3 4 this 3 2213  3 row 1 2151  1 v 1 2159  
726 14 Dtool_VZN37jBs 4 600 2150 0 14 Dtool_VZN37jBs 3 4 this 3 2213  3 row 1 2151  1 v 1 2178  
727 14 Dtool_VZN3hFlR 4 601 2150 0 14 Dtool_VZN3hFlR 3 4 this 3 2213  3 col 1 2151  1 v 1 2159  
728 14 Dtool_VZN3cGVz 4 601 2150 0 14 Dtool_VZN3cGVz 3 4 this 3 2213  3 col 1 2151  1 v 1 2178  
729 14 Dtool_VZN3FRjb 4 602 2150 0 14 Dtool_VZN3FRjb 3 4 this 3 2214  10 result_vec 1 2177  3 row 1 2151  
730 14 Dtool_VZN3pQuV 7 602 2177 1462 14 Dtool_VZN3pQuV 2 4 this 3 2214  3 row 1 2151  
731 14 Dtool_VZN3qvBd 7 603 2177 1462 14 Dtool_VZN3qvBd 2 4 this 3 2214  3 col 1 2151  
732 14 Dtool_VZN3CqyE 7 604 2158 1300 14 Dtool_VZN3CqyE 2 4 this 3 2214  3 row 1 2151  
733 14 Dtool_VZN3xKGM 7 605 2158 1300 14 Dtool_VZN3xKGM 2 4 this 3 2214  3 col 1 2151  
734 14 Dtool_VZN3YAPO 4 606 2150 0 14 Dtool_VZN3YAPO 3 4 this 3 2213  3 row 1 2151  3 col 1 2151  
735 14 Dtool_VZN3nEAw 6 606 2161 0 14 Dtool_VZN3nEAw 3 4 this 3 2214  3 row 1 2151  3 col 1 2151  
736 14 Dtool_VZN3u3JQ 6 607 2152 0 14 Dtool_VZN3u3JQ 1 4 this 3 2214  
737 14 Dtool_VZN3u75u 6 608 2161 0 14 Dtool_VZN3u75u 3 4 this 3 2214  3 row 1 2151  3 col 1 2151  
738 14 Dtool_VZN3YWBO 4 609 2150 0 14 Dtool_VZN3YWBO 4 4 this 3 2213  3 row 1 2151  3 col 1 2151  5 value 1 2161  
739 14 Dtool_VZN3tvRO 4 610 2150 0 14 Dtool_VZN3tvRO 1 4 this 3 2214  
740 14 Dtool_VZN3wP0N 6 611 2151 0 14 Dtool_VZN3wP0N 1 4 this 3 2214  
741 14 Dtool_VZN3Gv3o 6 612 2152 0 14 Dtool_VZN3Gv3o 2 4 this 3 2214  5 other 1 2214  
742 14 Dtool_VZN3RREu 6 613 2152 0 14 Dtool_VZN3RREu 2 4 this 3 2214  5 other 1 2214  
743 14 Dtool_VZN3Rgil 6 614 2152 0 14 Dtool_VZN3Rgil 2 4 this 3 2214  5 other 1 2214  
744 14 Dtool_VZN3t_3g 6 615 2151 0 14 Dtool_VZN3t_3g 2 4 this 3 2214  5 other 1 2214  
745 14 Dtool_VZN3Sbnp 6 615 2151 0 14 Dtool_VZN3Sbnp 3 4 this 3 2214  5 other 1 2214  9 threshold 1 2161  
746 14 Dtool_VZN3t7oj 6 616 2149 0 14 Dtool_VZN3t7oj 1 4 this 3 2214  
747 14 Dtool_VZN3ACnK 6 616 2149 0 14 Dtool_VZN3ACnK 2 4 this 3 2214  9 threshold 1 2161  
748 14 Dtool_VZN3QfHg 6 617 2149 0 14 Dtool_VZN3QfHg 2 4 this 3 2214  4 hash 1 2149  
749 14 Dtool_VZN3e2a4 6 617 2149 0 14 Dtool_VZN3e2a4 3 4 this 3 2214  4 hash 1 2149  9 threshold 1 2161  
750 14 Dtool_VZN3uQNQ 7 618 2177 1462 14 Dtool_VZN3uQNQ 2 4 this 3 2214  1 v 1 2178  
751 14 Dtool_VZN3S1BJ 7 619 2158 1300 14 Dtool_VZN3S1BJ 2 4 this 3 2214  1 v 1 2159  
752 14 Dtool_VZN3RGPD 7 620 2158 1300 14 Dtool_VZN3RGPD 2 4 this 3 2214  1 v 1 2159  
753 14 Dtool_VZN3Z5GD 4 621 2150 0 14 Dtool_VZN3Z5GD 3 4 this 3 2213  6 other1 1 2214  6 other2 1 2214  
754 14 Dtool_VZN3mPXj 7 622 2213 1871 14 Dtool_VZN3mPXj 2 4 this 3 2214  5 other 1 2214  
755 14 Dtool_VZN3_fQe 7 622 2213 1871 14 Dtool_VZN3_fQe 2 4 this 3 2214  6 scalar 1 2161  
756 14 Dtool_VZN3Ooxf 7 623 2213 1871 14 Dtool_VZN3Ooxf 2 4 this 3 2214  6 scalar 1 2161  
757 14 Dtool_VZN3_07u 6 624 2213 0 14 Dtool_VZN3_07u 2 4 this 3 2213  5 other 1 2214  
758 14 Dtool_VZN3fIiv 6 625 2213 0 14 Dtool_VZN3fIiv 2 4 this 3 2213  5 other 1 2214  
759 14 Dtool_VZN3PXnu 6 626 2213 0 14 Dtool_VZN3PXnu 2 4 this 3 2213  5 other 1 2214  
760 14 Dtool_VZN3X0Qs 6 626 2213 0 14 Dtool_VZN3X0Qs 2 4 this 3 2213  6 scalar 1 2161  
761 14 Dtool_VZN3ndyt 6 627 2213 0 14 Dtool_VZN3ndyt 2 4 this 3 2213  6 scalar 1 2161  
762 14 Dtool_VZN3syFI 6 628 2161 0 14 Dtool_VZN3syFI 1 4 this 3 2214  
763 14 Dtool_VZN3aONp 4 629 2150 0 14 Dtool_VZN3aONp 2 4 this 3 2213  5 other 1 2214  
764 14 Dtool_VZN3lPDl 4 630 2150 0 14 Dtool_VZN3lPDl 1 4 this 3 2213  
765 14 Dtool_VZN3MJyk 6 631 2152 0 14 Dtool_VZN3MJyk 2 4 this 3 2213  5 other 1 2214  
766 14 Dtool_VZN3IurU 6 632 2152 0 14 Dtool_VZN3IurU 1 4 this 3 2213  
767 14 Dtool_VZN3D_Pl 6 633 2214 0 14 Dtool_VZN3D_Pl 0 
768 14 Dtool_VZN3cpG4 7 634 2213 1871 14 Dtool_VZN3cpG4 1 5 trans 1 2159  
769 14 Dtool_VZN3Zis7 7 634 2213 1871 14 Dtool_VZN3Zis7 2 2 tx 1 2161  2 ty 1 2161  
770 14 Dtool_VZN3B6hL 7 635 2213 1871 14 Dtool_VZN3B6hL 1 5 angle 1 2161  
771 14 Dtool_VZN3aFgZ 7 635 2213 1871 14 Dtool_VZN3aFgZ 3 5 angle 1 2161  4 axis 1 2177  2 cs 1 2124  
772 14 Dtool_VZN3z6sm 7 635 2213 1871 14 Dtool_VZN3z6sm 2 5 angle 1 2161  4 axis 1 2177  
773 14 Dtool_VZN3kw5e 7 636 2213 1871 14 Dtool_VZN3kw5e 1 5 scale 1 2159  
774 14 Dtool_VZN32c8e 7 636 2213 1871 14 Dtool_VZN32c8e 1 5 scale 1 2178  
775 14 Dtool_VZN3KYtY 7 636 2213 1871 14 Dtool_VZN3KYtY 2 2 sx 1 2161  2 sy 1 2161  
776 14 Dtool_VZN3XTVN 7 636 2213 1871 14 Dtool_VZN3XTVN 3 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  
777 14 Dtool_VZN3yh6r 7 637 2213 1871 14 Dtool_VZN3yh6r 3 5 angle 1 2161  4 axis 1 2178  2 cs 1 2124  
778 14 Dtool_VZN3YlqF 7 637 2213 1871 14 Dtool_VZN3YlqF 2 5 angle 1 2161  4 axis 1 2178  
779 14 Dtool_VZN3QoP8 7 638 2213 1871 14 Dtool_VZN3QoP8 2 5 shear 1 2178  2 cs 1 2124  
780 14 Dtool_VZN3xJal 7 638 2213 1871 14 Dtool_VZN3xJal 1 5 shear 1 2178  
781 14 Dtool_VZN31tYK 7 638 2213 1871 14 Dtool_VZN31tYK 4 4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  2 cs 1 2124  
782 14 Dtool_VZN3n6zT 7 638 2213 1871 14 Dtool_VZN3n6zT 3 4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  
783 14 Dtool_VZN3ipF0 7 639 2213 1871 14 Dtool_VZN3ipF0 3 5 scale 1 2178  5 shear 1 2178  2 cs 1 2124  
784 14 Dtool_VZN3EtzN 7 639 2213 1871 14 Dtool_VZN3EtzN 2 5 scale 1 2178  5 shear 1 2178  
785 14 Dtool_VZN3erao 7 639 2213 1871 14 Dtool_VZN3erao 7 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  2 cs 1 2124  
786 14 Dtool_VZN3kqKC 7 639 2213 1871 14 Dtool_VZN3kqKC 6 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  
787 14 Dtool_VZN34uUm 6 640 2214 0 14 Dtool_VZN34uUm 2 4 from 1 2124  2 to 1 2124  
788 14 Dtool_VZN3rIZO 6 641 2152 0 14 Dtool_VZN3rIZO 2 4 this 3 2214  5 other 1 2214  
789 14 Dtool_VZN3pOQZ 6 641 2152 0 14 Dtool_VZN3pOQZ 3 4 this 3 2214  5 other 1 2214  9 threshold 1 2161  
790 14 Dtool_VZN3cEVk 4 642 2150 0 14 Dtool_VZN3cEVk 2 4 this 3 2214  3 out 1 2153  
791 14 Dtool_VZN3Ihab 4 643 2150 0 14 Dtool_VZN3Ihab 3 4 this 3 2214  3 out 1 2153  12 indent_level 1 2151  
792 14 Dtool_VZN3U41k 4 643 2150 0 14 Dtool_VZN3U41k 2 4 this 3 2214  3 out 1 2153  
793 14 Dtool_VZN3253m 4 644 2150 0 14 Dtool_VZN3253m 3 4 this 3 2214  3 out 1 2153  10 class_name 1 2155  
794 14 Dtool_VZN3nXHQ 7 645 2157 0 14 Dtool_VZN3nXHQ 0 
795 14 Dtool_VZN30VSC 7 648 2216 1930 14 Dtool_VZN30VSC 0 
796 14 Dtool_VZN3fs5c 7 648 2216 1930 14 Dtool_VZN3fs5c 1 6 upper3 1 2211  
797 14 Dtool_VZN36_z9 7 648 2216 1930 14 Dtool_VZN36_z9 2 6 upper3 1 2211  5 trans 1 2175  
798 14 Dtool_VZN3X354 7 648 2216 1930 14 Dtool_VZN3X354 1 5 other 1 2217  
799 14 Dtool_VZN3kfiq 7 648 2216 1930 14 Dtool_VZN3kfiq 16 3 e00 1 2148  3 e01 1 2148  3 e02 1 2148  3 e03 1 2148  3 e10 1 2148  3 e11 1 2148  3 e12 1 2148  3 e13 1 2148  3 e20 1 2148  3 e21 1 2148  3 e22 1 2148  3 e23 1 2148  3 e30 1 2148  3 e31 1 2148  3 e32 1 2148  3 e33 1 2148  
800 14 Dtool_VZN3kLb0 6 649 2216 0 14 Dtool_VZN3kLb0 2 4 this 3 2216  5 other 1 2217  
801 14 Dtool_VZN3J5tl 6 649 2216 0 14 Dtool_VZN3J5tl 2 4 this 3 2216  10 fill_value 1 2148  
802 14 Dtool_VZN32oeX 4 650 2150 0 14 Dtool_VZN32oeX 2 4 this 3 2216  4 size 1 2149  
803 14 Dtool_VZN3hn3a 4 652 2150 0 14 Dtool_VZN3hn3a 2 4 this 3 2216  10 fill_value 1 2148  
804 14 Dtool_VZN3b_Gk 4 653 2150 0 14 Dtool_VZN3b_Gk 17 4 this 3 2216  3 e00 1 2148  3 e01 1 2148  3 e02 1 2148  3 e03 1 2148  3 e10 1 2148  3 e11 1 2148  3 e12 1 2148  3 e13 1 2148  3 e20 1 2148  3 e21 1 2148  3 e22 1 2148  3 e23 1 2148  3 e30 1 2148  3 e31 1 2148  3 e32 1 2148  3 e33 1 2148  
805 14 Dtool_VZN3QITa 4 654 2150 0 14 Dtool_VZN3QITa 2 4 this 3 2216  6 upper3 1 2211  
806 14 Dtool_VZN31ZhQ 7 655 2210 1816 14 Dtool_VZN31ZhQ 1 4 this 3 2217  
807 14 Dtool_VZN32ZkG 4 656 2150 0 14 Dtool_VZN32ZkG 3 4 this 3 2216  3 row 1 2151  1 v 1 2175  
808 14 Dtool_VZN3lZUo 4 656 2150 0 14 Dtool_VZN3lZUo 3 4 this 3 2216  3 row 1 2151  1 v 1 2193  
809 14 Dtool_VZN3b83N 4 657 2150 0 14 Dtool_VZN3b83N 3 4 this 3 2216  3 col 1 2151  1 v 1 2175  
810 14 Dtool_VZN328nv 4 657 2150 0 14 Dtool_VZN328nv 3 4 this 3 2216  3 col 1 2151  1 v 1 2193  
811 14 Dtool_VZN3n__u 4 658 2150 0 14 Dtool_VZN3n__u 3 4 this 3 2217  10 result_vec 1 2192  3 row 1 2151  
812 14 Dtool_VZN3xxRA 7 658 2192 1601 14 Dtool_VZN3xxRA 2 4 this 3 2217  3 row 1 2151  
813 14 Dtool_VZN3COlH 7 659 2192 1601 14 Dtool_VZN3COlH 2 4 this 3 2217  3 col 1 2151  
814 14 Dtool_VZN3dF7x 4 660 2150 0 14 Dtool_VZN3dF7x 3 4 this 3 2217  10 result_vec 1 2174  3 row 1 2151  
815 14 Dtool_VZN3JMW2 7 660 2174 1407 14 Dtool_VZN3JMW2 2 4 this 3 2217  3 row 1 2151  
816 14 Dtool_VZN3kop9 7 661 2174 1407 14 Dtool_VZN3kop9 2 4 this 3 2217  3 col 1 2151  
817 14 Dtool_VZN3Hhy4 4 662 2150 0 14 Dtool_VZN3Hhy4 3 4 this 3 2216  3 row 1 2151  3 col 1 2151  
818 14 Dtool_VZN3_lka 6 662 2148 0 14 Dtool_VZN3_lka 3 4 this 3 2217  3 row 1 2151  3 col 1 2151  
819 14 Dtool_VZN3RXs6 6 663 2152 0 14 Dtool_VZN3RXs6 1 4 this 3 2217  
820 14 Dtool_VZN3GYcZ 6 664 2148 0 14 Dtool_VZN3GYcZ 3 4 this 3 2217  3 row 1 2151  3 col 1 2151  
821 14 Dtool_VZN3lUBv 4 665 2150 0 14 Dtool_VZN3lUBv 4 4 this 3 2216  3 row 1 2151  3 col 1 2151  5 value 1 2148  
822 14 Dtool_VZN3WP14 4 666 2150 0 14 Dtool_VZN3WP14 1 4 this 3 2217  
823 14 Dtool_VZN3bsX4 6 667 2151 0 14 Dtool_VZN3bsX4 1 4 this 3 2217  
824 14 Dtool_VZN3KK3S 4 668 2150 0 14 Dtool_VZN3KK3S 1 4 this 3 2216  
825 14 Dtool_VZN3BQDa 4 668 2150 0 14 Dtool_VZN3BQDa 1 4 this 3 2217  
826 14 Dtool_VZN3m_kL 4 669 2150 0 14 Dtool_VZN3m_kL 1 4 this 3 2216  
827 14 Dtool_VZN3gxNr 4 669 2150 0 14 Dtool_VZN3gxNr 1 4 this 3 2217  
828 14 Dtool_VZN38l5V 6 670 2152 0 14 Dtool_VZN38l5V 2 4 this 3 2217  5 other 1 2217  
829 14 Dtool_VZN3I59n 6 671 2152 0 14 Dtool_VZN3I59n 2 4 this 3 2217  5 other 1 2217  
830 14 Dtool_VZN3IOaf 6 672 2152 0 14 Dtool_VZN3IOaf 2 4 this 3 2217  5 other 1 2217  
831 14 Dtool_VZN3zB6N 6 673 2151 0 14 Dtool_VZN3zB6N 2 4 this 3 2217  5 other 1 2217  
832 14 Dtool_VZN3mOfK 6 673 2151 0 14 Dtool_VZN3mOfK 3 4 this 3 2217  5 other 1 2217  9 threshold 1 2148  
833 14 Dtool_VZN3VYMO 6 674 2149 0 14 Dtool_VZN3VYMO 1 4 this 3 2217  
834 14 Dtool_VZN3FcZg 6 674 2149 0 14 Dtool_VZN3FcZg 2 4 this 3 2217  9 threshold 1 2148  
835 14 Dtool_VZN3o8oK 6 675 2149 0 14 Dtool_VZN3o8oK 2 4 this 3 2217  4 hash 1 2149  
836 14 Dtool_VZN3JGyd 6 675 2149 0 14 Dtool_VZN3JGyd 3 4 this 3 2217  4 hash 1 2149  9 threshold 1 2148  
837 14 Dtool_VZN3mWbi 7 676 2192 1601 14 Dtool_VZN3mWbi 2 4 this 3 2217  1 v 1 2193  
838 14 Dtool_VZN3F0Ie 7 677 2174 1407 14 Dtool_VZN3F0Ie 2 4 this 3 2217  1 v 1 2175  
839 14 Dtool_VZN3a7Sw 7 678 2174 1407 14 Dtool_VZN3a7Sw 2 4 this 3 2217  1 v 1 2175  
840 14 Dtool_VZN3cv3G 4 679 2150 0 14 Dtool_VZN3cv3G 3 4 this 3 2216  6 other1 1 2217  6 other2 1 2217  
841 14 Dtool_VZN3cFZQ 7 680 2216 1930 14 Dtool_VZN3cFZQ 2 4 this 3 2217  5 other 1 2217  
842 14 Dtool_VZN3clu8 7 680 2216 1930 14 Dtool_VZN3clu8 2 4 this 3 2217  6 scalar 1 2148  
843 14 Dtool_VZN3MKP_ 7 681 2216 1930 14 Dtool_VZN3MKP_ 2 4 this 3 2217  6 scalar 1 2148  
844 14 Dtool_VZN3Ev0o 6 682 2216 0 14 Dtool_VZN3Ev0o 2 4 this 3 2216  5 other 1 2217  
845 14 Dtool_VZN3kjbp 6 683 2216 0 14 Dtool_VZN3kjbp 2 4 this 3 2216  5 other 1 2217  
846 14 Dtool_VZN30Ogo 6 684 2216 0 14 Dtool_VZN30Ogo 2 4 this 3 2216  5 other 1 2217  
847 14 Dtool_VZN3Nn8Q 6 684 2216 0 14 Dtool_VZN3Nn8Q 2 4 this 3 2216  6 scalar 1 2148  
848 14 Dtool_VZN3dceS 6 685 2216 0 14 Dtool_VZN3dceS 2 4 this 3 2216  6 scalar 1 2148  
849 14 Dtool_VZN3rI6L 4 686 2150 0 14 Dtool_VZN3rI6L 2 4 this 3 2216  5 other 1 2217  
850 14 Dtool_VZN39umP 4 687 2150 0 14 Dtool_VZN39umP 1 4 this 3 2216  
851 14 Dtool_VZN3Vtqe 6 688 2152 0 14 Dtool_VZN3Vtqe 2 4 this 3 2216  5 other 1 2217  
852 14 Dtool_VZN3KvHn 6 689 2152 0 14 Dtool_VZN3KvHn 2 4 this 3 2216  5 other 1 2217  
853 14 Dtool_VZN3hOP_ 6 690 2152 0 14 Dtool_VZN3hOP_ 1 4 this 3 2216  
854 14 Dtool_VZN3rczP 6 691 2217 0 14 Dtool_VZN3rczP 0 
855 14 Dtool_VZN3jyza 7 692 2216 1930 14 Dtool_VZN3jyza 1 5 trans 1 2175  
856 14 Dtool_VZN3Q9hS 7 692 2216 1930 14 Dtool_VZN3Q9hS 3 2 tx 1 2148  2 ty 1 2148  2 tz 1 2148  
857 14 Dtool_VZN38AQA 7 693 2216 1930 14 Dtool_VZN38AQA 3 5 angle 1 2148  4 axis 1 2175  2 cs 1 2124  
858 14 Dtool_VZN3zUuW 7 693 2216 1930 14 Dtool_VZN3zUuW 2 5 angle 1 2148  4 axis 1 2175  
859 14 Dtool_VZN3SFBu 7 694 2216 1930 14 Dtool_VZN3SFBu 3 5 angle 1 2148  4 axis 1 2175  2 cs 1 2124  
860 14 Dtool_VZN3l_5A 7 694 2216 1930 14 Dtool_VZN3l_5A 2 5 angle 1 2148  4 axis 1 2175  
861 14 Dtool_VZN3R71s 4 694 2150 0 14 Dtool_VZN3R71s 4 5 angle 1 2148  4 axis 1 2175  10 result_mat 1 2216  2 cs 1 2124  
862 14 Dtool_VZN3QMA0 4 694 2150 0 14 Dtool_VZN3QMA0 3 5 angle 1 2148  4 axis 1 2175  10 result_mat 1 2216  
863 14 Dtool_VZN3OJ8L 7 695 2216 1930 14 Dtool_VZN3OJ8L 1 5 scale 1 2175  
864 14 Dtool_VZN3gj9H 7 695 2216 1930 14 Dtool_VZN3gj9H 1 5 scale 1 2148  
865 14 Dtool_VZN3waqH 7 695 2216 1930 14 Dtool_VZN3waqH 3 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  
866 14 Dtool_VZN346Pp 7 696 2216 1930 14 Dtool_VZN346Pp 2 5 shear 1 2175  2 cs 1 2124  
867 14 Dtool_VZN3J0aS 7 696 2216 1930 14 Dtool_VZN3J0aS 1 5 shear 1 2175  
868 14 Dtool_VZN3lQ9A 7 696 2216 1930 14 Dtool_VZN3lQ9A 4 4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  2 cs 1 2124  
869 14 Dtool_VZN3xxJO 7 696 2216 1930 14 Dtool_VZN3xxJO 3 4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  
870 14 Dtool_VZN3al56 7 697 2216 1930 14 Dtool_VZN3al56 3 5 scale 1 2175  5 shear 1 2175  2 cs 1 2124  
871 14 Dtool_VZN3gpnU 7 697 2216 1930 14 Dtool_VZN3gpnU 2 5 scale 1 2175  5 shear 1 2175  
872 14 Dtool_VZN39lik 7 697 2216 1930 14 Dtool_VZN39lik 7 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  2 cs 1 2124  
873 14 Dtool_VZN3i__t 7 697 2216 1930 14 Dtool_VZN3i__t 6 2 sx 1 2148  2 sy 1 2148  2 sz 1 2148  4 shxy 1 2148  4 shxz 1 2148  4 shyz 1 2148  
874 14 Dtool_VZN3lIST 6 698 2217 0 14 Dtool_VZN3lIST 0 
875 14 Dtool_VZN3lG2Q 6 699 2217 0 14 Dtool_VZN3lG2Q 0 
876 14 Dtool_VZN3gP4Q 6 700 2217 0 14 Dtool_VZN3gP4Q 2 4 from 1 2124  2 to 1 2124  
877 14 Dtool_VZN34Lgj 6 701 2152 0 14 Dtool_VZN34Lgj 2 4 this 3 2217  5 other 1 2217  
878 14 Dtool_VZN39SSI 6 701 2152 0 14 Dtool_VZN39SSI 3 4 this 3 2217  5 other 1 2217  9 threshold 1 2148  
879 14 Dtool_VZN30k4O 4 702 2150 0 14 Dtool_VZN30k4O 2 4 this 3 2217  3 out 1 2153  
880 14 Dtool_VZN3wC_F 4 703 2150 0 14 Dtool_VZN3wC_F 3 4 this 3 2217  3 out 1 2153  12 indent_level 1 2151  
881 14 Dtool_VZN3sZZP 4 703 2150 0 14 Dtool_VZN3sZZP 2 4 this 3 2217  3 out 1 2153  
882 14 Dtool_VZN3eYaR 4 704 2150 0 14 Dtool_VZN3eYaR 3 4 this 3 2217  3 out 1 2153  10 class_name 1 2155  
883 14 Dtool_VZN3I3r6 7 705 2157 0 14 Dtool_VZN3I3r6 0 
884 14 Dtool_VZN3Vrx_ 7 708 2219 1989 14 Dtool_VZN3Vrx_ 0 
885 14 Dtool_VZN3RSTZ 7 708 2219 1989 14 Dtool_VZN3RSTZ 1 6 upper3 1 2214  
886 14 Dtool_VZN3y2xB 7 708 2219 1989 14 Dtool_VZN3y2xB 2 6 upper3 1 2214  5 trans 1 2178  
887 14 Dtool_VZN3pOT1 7 708 2219 1989 14 Dtool_VZN3pOT1 1 5 other 1 2220  
888 14 Dtool_VZN3LfZS 7 708 2219 1989 14 Dtool_VZN3LfZS 16 3 e00 1 2161  3 e01 1 2161  3 e02 1 2161  3 e03 1 2161  3 e10 1 2161  3 e11 1 2161  3 e12 1 2161  3 e13 1 2161  3 e20 1 2161  3 e21 1 2161  3 e22 1 2161  3 e23 1 2161  3 e30 1 2161  3 e31 1 2161  3 e32 1 2161  3 e33 1 2161  
889 14 Dtool_VZN3PVfu 6 709 2219 0 14 Dtool_VZN3PVfu 2 4 this 3 2219  5 other 1 2220  
890 14 Dtool_VZN3BSXw 6 709 2219 0 14 Dtool_VZN3BSXw 2 4 this 3 2219  10 fill_value 1 2161  
891 14 Dtool_VZN3fo_T 4 710 2150 0 14 Dtool_VZN3fo_T 2 4 this 3 2219  4 size 1 2149  
892 14 Dtool_VZN3tsm9 4 712 2150 0 14 Dtool_VZN3tsm9 2 4 this 3 2219  10 fill_value 1 2161  
893 14 Dtool_VZN3E5Uz 4 713 2150 0 14 Dtool_VZN3E5Uz 17 4 this 3 2219  3 e00 1 2161  3 e01 1 2161  3 e02 1 2161  3 e03 1 2161  3 e10 1 2161  3 e11 1 2161  3 e12 1 2161  3 e13 1 2161  3 e20 1 2161  3 e21 1 2161  3 e22 1 2161  3 e23 1 2161  3 e30 1 2161  3 e31 1 2161  3 e32 1 2161  3 e33 1 2161  
894 14 Dtool_VZN34JsI 4 714 2150 0 14 Dtool_VZN34JsI 2 4 this 3 2219  6 upper3 1 2214  
895 14 Dtool_VZN3cZBN 7 715 2213 1871 14 Dtool_VZN3cZBN 1 4 this 3 2220  
896 14 Dtool_VZN34DFT 4 716 2150 0 14 Dtool_VZN34DFT 3 4 this 3 2219  3 row 1 2151  1 v 1 2178  
897 14 Dtool_VZN3nD10 4 716 2150 0 14 Dtool_VZN3nD10 3 4 this 3 2219  3 row 1 2151  1 v 1 2196  
898 14 Dtool_VZN3dmWa 4 717 2150 0 14 Dtool_VZN3dmWa 3 4 this 3 2219  3 col 1 2151  1 v 1 2178  
899 14 Dtool_VZN3ImG8 4 717 2150 0 14 Dtool_VZN3ImG8 3 4 this 3 2219  3 col 1 2151  1 v 1 2196  
900 14 Dtool_VZN3Pxez 4 718 2150 0 14 Dtool_VZN3Pxez 3 4 this 3 2220  10 result_vec 1 2195  3 row 1 2151  
901 14 Dtool_VZN3pwx8 7 718 2195 1654 14 Dtool_VZN3pwx8 2 4 this 3 2220  3 row 1 2151  
902 14 Dtool_VZN3rPFE 7 719 2195 1654 14 Dtool_VZN3rPFE 2 4 this 3 2220  3 col 1 2151  
903 14 Dtool_VZN3eTWu 4 720 2150 0 14 Dtool_VZN3eTWu 3 4 this 3 2220  10 result_vec 1 2177  3 row 1 2151  
904 14 Dtool_VZN3QL2y 7 720 2177 1462 14 Dtool_VZN3QL2y 2 4 this 3 2220  3 row 1 2151  
905 14 Dtool_VZN3_pJ6 7 721 2177 1462 14 Dtool_VZN3_pJ6 2 4 this 3 2220  3 col 1 2151  
906 14 Dtool_VZN3YgS1 4 722 2150 0 14 Dtool_VZN3YgS1 3 4 this 3 2219  3 row 1 2151  3 col 1 2151  
907 14 Dtool_VZN3gkEX 6 722 2161 0 14 Dtool_VZN3gkEX 3 4 this 3 2220  3 row 1 2151  3 col 1 2151  
908 14 Dtool_VZN3uXM3 6 723 2152 0 14 Dtool_VZN3uXM3 1 4 this 3 2220  
909 14 Dtool_VZN3tb8V 6 724 2161 0 14 Dtool_VZN3tb8V 3 4 this 3 2220  3 row 1 2151  3 col 1 2151  
910 14 Dtool_VZN3Y2F1 4 725 2150 0 14 Dtool_VZN3Y2F1 4 4 this 3 2219  3 row 1 2151  3 col 1 2151  5 value 1 2161  
911 14 Dtool_VZN3tPV1 4 726 2150 0 14 Dtool_VZN3tPV1 1 4 this 3 2220  
912 14 Dtool_VZN3wv30 6 727 2151 0 14 Dtool_VZN3wv30 1 4 this 3 2220  
913 14 Dtool_VZN3jKXP 4 728 2150 0 14 Dtool_VZN3jKXP 1 4 this 3 2219  
914 14 Dtool_VZN3mQjW 4 728 2150 0 14 Dtool_VZN3mQjW 1 4 this 3 2220  
915 14 Dtool_VZN3PBFI 4 729 2150 0 14 Dtool_VZN3PBFI 1 4 this 3 2219  
916 14 Dtool_VZN35wtn 4 729 2150 0 14 Dtool_VZN35wtn 1 4 this 3 2220  
917 14 Dtool_VZN3Xz9P 6 730 2152 0 14 Dtool_VZN3Xz9P 2 4 this 3 2220  5 other 1 2220  
918 14 Dtool_VZN3Q4WW 6 731 2152 0 14 Dtool_VZN3Q4WW 2 4 this 3 2220  5 other 1 2220  
919 14 Dtool_VZN3QPzN 6 732 2152 0 14 Dtool_VZN3QPzN 2 4 this 3 2220  5 other 1 2220  
920 14 Dtool_VZN3az9H 6 733 2151 0 14 Dtool_VZN3az9H 2 4 this 3 2220  5 other 1 2220  
921 14 Dtool_VZN3lGtQ 6 733 2151 0 14 Dtool_VZN3lGtQ 3 4 this 3 2220  5 other 1 2220  9 threshold 1 2161  
922 14 Dtool_VZN3sbsK 6 734 2149 0 14 Dtool_VZN3sbsK 1 4 this 3 2220  
923 14 Dtool_VZN3Aiqx 6 734 2149 0 14 Dtool_VZN3Aiqx 2 4 this 3 2220  9 threshold 1 2161  
924 14 Dtool_VZN3T_IH 6 735 2149 0 14 Dtool_VZN3T_IH 2 4 this 3 2220  4 hash 1 2149  
925 14 Dtool_VZN3dWef 6 735 2149 0 14 Dtool_VZN3dWef 3 4 this 3 2220  4 hash 1 2149  9 threshold 1 2161  
926 14 Dtool_VZN3O133 7 736 2195 1654 14 Dtool_VZN3O133 2 4 this 3 2220  1 v 1 2196  
927 14 Dtool_VZN3T1IX 7 737 2177 1462 14 Dtool_VZN3T1IX 2 4 this 3 2220  1 v 1 2178  
928 14 Dtool_VZN3DCVq 7 738 2177 1462 14 Dtool_VZN3DCVq 2 4 this 3 2220  1 v 1 2178  
929 14 Dtool_VZN3U8DL 4 739 2150 0 14 Dtool_VZN3U8DL 3 4 this 3 2219  6 other1 1 2220  6 other2 1 2220  
930 14 Dtool_VZN33TdK 7 740 2219 1989 14 Dtool_VZN33TdK 2 4 this 3 2220  5 other 1 2220  
931 14 Dtool_VZN39_TF 7 740 2219 1989 14 Dtool_VZN39_TF 2 4 this 3 2220  6 scalar 1 2161  
932 14 Dtool_VZN3NI1G 7 741 2219 1989 14 Dtool_VZN3NI1G 2 4 this 3 2220  6 scalar 1 2161  
933 14 Dtool_VZN38vNX 6 742 2219 0 14 Dtool_VZN38vNX 2 4 this 3 2219  5 other 1 2220  
934 14 Dtool_VZN3cj0X 6 743 2219 0 14 Dtool_VZN3cj0X 2 4 this 3 2219  5 other 1 2220  
935 14 Dtool_VZN3MO5W 6 744 2219 0 14 Dtool_VZN3MO5W 2 4 this 3 2219  5 other 1 2220  
936 14 Dtool_VZN3WUUT 6 744 2219 0 14 Dtool_VZN3WUUT 2 4 this 3 2219  6 scalar 1 2161  
937 14 Dtool_VZN3m93U 6 745 2219 0 14 Dtool_VZN3m93U 2 4 this 3 2219  6 scalar 1 2161  
938 14 Dtool_VZN3oYQI 4 746 2150 0 14 Dtool_VZN3oYQI 2 4 this 3 2219  5 other 1 2220  
939 14 Dtool_VZN3ivGM 4 747 2150 0 14 Dtool_VZN3ivGM 1 4 this 3 2219  
940 14 Dtool_VZN3NuDN 6 748 2152 0 14 Dtool_VZN3NuDN 2 4 this 3 2219  5 other 1 2220  
941 14 Dtool_VZN3g2mD 6 749 2152 0 14 Dtool_VZN3g2mD 2 4 this 3 2219  5 other 1 2220  
942 14 Dtool_VZN3IOv7 6 750 2152 0 14 Dtool_VZN3IOv7 1 4 this 3 2219  
943 14 Dtool_VZN3AfTM 6 751 2220 0 14 Dtool_VZN3AfTM 0 
944 14 Dtool_VZN3SDJX 7 752 2219 1989 14 Dtool_VZN3SDJX 1 5 trans 1 2178  
945 14 Dtool_VZN3tfAu 7 752 2219 1989 14 Dtool_VZN3tfAu 3 2 tx 1 2161  2 ty 1 2161  2 tz 1 2161  
946 14 Dtool_VZN3blkA 7 753 2219 1989 14 Dtool_VZN3blkA 3 5 angle 1 2161  4 axis 1 2178  2 cs 1 2124  
947 14 Dtool_VZN3yawN 7 753 2219 1989 14 Dtool_VZN3yawN 2 5 angle 1 2161  4 axis 1 2178  
948 14 Dtool_VZN39B_S 7 754 2219 1989 14 Dtool_VZN39B_S 3 5 angle 1 2161  4 axis 1 2178  2 cs 1 2124  
949 14 Dtool_VZN3YFts 7 754 2219 1989 14 Dtool_VZN3YFts 2 5 angle 1 2161  4 axis 1 2178  
950 14 Dtool_VZN375kn 4 754 2150 0 14 Dtool_VZN375kn 4 5 angle 1 2161  4 axis 1 2178  10 result_mat 1 2219  2 cs 1 2124  
951 14 Dtool_VZN3u6SM 4 754 2150 0 14 Dtool_VZN3u6SM 3 5 angle 1 2161  4 axis 1 2178  10 result_mat 1 2219  
952 14 Dtool_VZN338_F 7 755 2219 1989 14 Dtool_VZN338_F 1 5 scale 1 2178  
953 14 Dtool_VZN3H84Q 7 755 2219 1989 14 Dtool_VZN3H84Q 1 5 scale 1 2161  
954 14 Dtool_VZN3XzZ0 7 755 2219 1989 14 Dtool_VZN3XzZ0 3 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  
955 14 Dtool_VZN3fITj 7 756 2219 1989 14 Dtool_VZN3fITj 2 5 shear 1 2178  2 cs 1 2124  
956 14 Dtool_VZN3wpeM 7 756 2219 1989 14 Dtool_VZN3wpeM 1 5 shear 1 2178  
957 14 Dtool_VZN31Nbx 7 756 2219 1989 14 Dtool_VZN31Nbx 4 4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  2 cs 1 2124  
958 14 Dtool_VZN3na36 7 756 2219 1989 14 Dtool_VZN3na36 3 4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  
959 14 Dtool_VZN3jJJb 7 757 2219 1989 14 Dtool_VZN3jJJb 3 5 scale 1 2178  5 shear 1 2178  2 cs 1 2124  
960 14 Dtool_VZN3EN20 7 757 2219 1989 14 Dtool_VZN3EN20 2 5 scale 1 2178  5 shear 1 2178  
961 14 Dtool_VZN3fLeP 7 757 2219 1989 14 Dtool_VZN3fLeP 7 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  2 cs 1 2124  
962 14 Dtool_VZN3kKNp 7 757 2219 1989 14 Dtool_VZN3kKNp 6 2 sx 1 2161  2 sy 1 2161  2 sz 1 2161  4 shxy 1 2161  4 shxz 1 2161  4 shyz 1 2161  
963 14 Dtool_VZN3MIyP 6 758 2220 0 14 Dtool_VZN3MIyP 0 
964 14 Dtool_VZN3MGWN 6 759 2220 0 14 Dtool_VZN3MGWN 0 
965 14 Dtool_VZN35OYN 6 760 2220 0 14 Dtool_VZN35OYN 2 4 from 1 2124  2 to 1 2124  
966 14 Dtool_VZN3qIgc 6 761 2152 0 14 Dtool_VZN3qIgc 2 4 this 3 2220  5 other 1 2220  
967 14 Dtool_VZN3oOXn 6 761 2152 0 14 Dtool_VZN3oOXn 3 4 this 3 2220  5 other 1 2220  9 threshold 1 2161  
968 14 Dtool_VZN3dkYL 4 762 2150 0 14 Dtool_VZN3dkYL 2 4 this 3 2220  3 out 1 2153  
969 14 Dtool_VZN3XBeC 4 763 2150 0 14 Dtool_VZN3XBeC 3 4 this 3 2220  3 out 1 2153  12 indent_level 1 2151  
970 14 Dtool_VZN3XY5L 4 763 2150 0 14 Dtool_VZN3XY5L 2 4 this 3 2220  3 out 1 2153  
971 14 Dtool_VZN35Z6N 4 764 2150 0 14 Dtool_VZN35Z6N 3 4 this 3 2220  3 out 1 2153  10 class_name 1 2155  
972 14 Dtool_VZN3n3L3 7 765 2157 0 14 Dtool_VZN3n3L3 0 
973 14 Dtool_VZN3rtd_ 7 779 2222 2048 14 Dtool_VZN3rtd_ 0 
974 14 Dtool_VZN3vDxK 7 779 2222 2048 14 Dtool_VZN3vDxK 1 4 copy 1 2193  
975 14 Dtool_VZN3M1Wm 7 779 2222 2048 14 Dtool_VZN3M1Wm 2 6 param0 0 2148  4 copy 1 2175  
976 14 Dtool_VZN3zNTV 7 779 2222 2048 14 Dtool_VZN3zNTV 4 6 param0 0 2148  6 param1 0 2148  6 param2 0 2148  6 param3 0 2148  
977 14 Dtool_VZN3Qoeb 7 780 2222 2048 14 Dtool_VZN3Qoeb 1 6 param0 0 2181  
978 14 Dtool_VZN3_F9y 7 781 2222 2048 14 Dtool_VZN3_F9y 1 4 this 3 2223  
979 14 Dtool_VZN3rkOj 7 782 2174 1407 14 Dtool_VZN3rkOj 2 4 this 3 2223  1 v 1 2175  
980 14 Dtool_VZN3jhO_ 7 782 2192 1601 14 Dtool_VZN3jhO_ 2 4 this 3 2223  1 v 1 2193  
981 14 Dtool_VZN3eJuF 7 783 2222 2048 14 Dtool_VZN3eJuF 2 4 this 3 2223  3 rhs 1 2223  
982 14 Dtool_VZN3XaQp 7 784 2222 2048 14 Dtool_VZN3XaQp 1 4 this 3 2223  
983 14 Dtool_VZN3I56X 7 785 2222 2048 14 Dtool_VZN3I56X 2 4 this 3 2223  5 other 1 2223  
984 14 Dtool_VZN3b27z 7 786 2222 2048 14 Dtool_VZN3b27z 2 4 this 3 2223  5 other 1 2223  
985 14 Dtool_VZN33Uhy 6 787 2148 0 14 Dtool_VZN33Uhy 2 4 this 3 2223  5 other 1 2223  
986 14 Dtool_VZN3mSn_ 6 788 2148 0 14 Dtool_VZN3mSn_ 2 4 this 3 2223  5 other 1 2223  
987 14 Dtool_VZN3j8YK 7 789 2210 1816 14 Dtool_VZN3j8YK 2 4 this 3 2222  6 param0 0 2211  
988 14 Dtool_VZN3e9Is 7 789 2216 1930 14 Dtool_VZN3e9Is 2 4 this 3 2222  6 param0 0 2217  
989 14 Dtool_VZN3U_6J 7 789 2222 2048 14 Dtool_VZN3U_6J 2 4 this 3 2223  6 param0 0 2223  
990 14 Dtool_VZN3ppqj 7 789 2222 2048 14 Dtool_VZN3ppqj 2 4 this 3 2223  6 scalar 1 2148  
991 14 Dtool_VZN3e9qp 7 790 2222 2048 14 Dtool_VZN3e9qp 2 4 this 3 2223  6 scalar 1 2148  
992 14 Dtool_VZN3MJVd 6 791 2222 0 14 Dtool_VZN3MJVd 2 4 this 3 2222  6 param0 0 2223  
993 14 Dtool_VZN3rHMU 6 792 2152 0 14 Dtool_VZN3rHMU 2 4 this 3 2223  5 other 1 2223  
994 14 Dtool_VZN3lDKH 6 792 2152 0 14 Dtool_VZN3lDKH 3 4 this 3 2223  5 other 1 2223  9 threshold 1 2148  
995 14 Dtool_VZN3i2zi 6 793 2152 0 14 Dtool_VZN3i2zi 2 4 this 3 2223  5 other 1 2223  
996 14 Dtool_VZN3gEa5 6 794 2152 0 14 Dtool_VZN3gEa5 3 4 this 3 2223  5 other 1 2223  9 threshold 1 2148  
997 14 Dtool_VZN3clzP 4 795 2150 0 14 Dtool_VZN3clzP 2 4 this 3 2223  6 param0 0 2153  
998 14 Dtool_VZN3QnH2 4 796 2150 0 14 Dtool_VZN3QnH2 2 4 this 3 2223  1 m 1 2210  
999 14 Dtool_VZN3IWR2 4 796 2150 0 14 Dtool_VZN3IWR2 2 4 this 3 2223  1 m 1 2216  
1000 14 Dtool_VZN3adwD 4 797 2150 0 14 Dtool_VZN3adwD 2 4 this 3 2222  1 m 1 2211  
1001 14 Dtool_VZN31eQH 4 797 2150 0 14 Dtool_VZN31eQH 2 4 this 3 2222  1 m 1 2217  
1002 14 Dtool_VZN3Rc8G 4 798 2150 0 14 Dtool_VZN3Rc8G 3 4 this 3 2222  3 hpr 1 2175  2 cs 1 2124  
1003 14 Dtool_VZN3ghkq 4 798 2150 0 14 Dtool_VZN3ghkq 2 4 this 3 2222  3 hpr 1 2175  
1004 14 Dtool_VZN3WRZg 7 799 2174 1407 14 Dtool_VZN3WRZg 2 4 this 3 2223  2 cs 1 2124  
1005 14 Dtool_VZN3O1A0 7 799 2174 1407 14 Dtool_VZN3O1A0 1 4 this 3 2223  
1006 14 Dtool_VZN3YcKh 7 800 2180 1533 14 Dtool_VZN3YcKh 1 4 this 3 2223  
1007 14 Dtool_VZN3NIeK 7 801 2180 1533 14 Dtool_VZN3NIeK 1 4 this 3 2223  
1008 14 Dtool_VZN3ZTUN 6 802 2148 0 14 Dtool_VZN3ZTUN 1 4 this 3 2223  
1009 14 Dtool_VZN3eAIg 6 803 2148 0 14 Dtool_VZN3eAIg 1 4 this 3 2223  
1010 14 Dtool_VZN3yPe0 4 804 2150 0 14 Dtool_VZN3yPe0 3 4 this 3 2222  9 angle_rad 1 2148  4 axis 1 2181  
1011 14 Dtool_VZN3Ykah 4 805 2150 0 14 Dtool_VZN3Ykah 3 4 this 3 2222  9 angle_deg 1 2148  4 axis 1 2181  
1012 14 Dtool_VZN33KoZ 7 806 2180 1533 14 Dtool_VZN33KoZ 2 4 this 3 2223  2 cs 1 2124  
1013 14 Dtool_VZN3rwSS 7 806 2180 1533 14 Dtool_VZN3rwSS 1 4 this 3 2223  
1014 14 Dtool_VZN3Mxzz 7 807 2180 1533 14 Dtool_VZN3Mxzz 2 4 this 3 2223  2 cs 1 2124  
1015 14 Dtool_VZN386me 7 807 2180 1533 14 Dtool_VZN386me 1 4 this 3 2223  
1016 14 Dtool_VZN36X_p 7 808 2180 1533 14 Dtool_VZN36X_p 2 4 this 3 2223  2 cs 1 2124  
1017 14 Dtool_VZN3IjTb 7 808 2180 1533 14 Dtool_VZN3IjTb 1 4 this 3 2223  
1018 14 Dtool_VZN3k8aD 6 809 2148 0 14 Dtool_VZN3k8aD 1 4 this 3 2223  
1019 14 Dtool_VZN3jxaE 6 810 2148 0 14 Dtool_VZN3jxaE 1 4 this 3 2223  
1020 14 Dtool_VZN31yaL 6 811 2148 0 14 Dtool_VZN31yaL 1 4 this 3 2223  
1021 14 Dtool_VZN3H0aS 6 812 2148 0 14 Dtool_VZN3H0aS 1 4 this 3 2223  
1022 14 Dtool_VZN33PLX 4 813 2150 0 14 Dtool_VZN33PLX 2 4 this 3 2222  1 r 1 2148  
1023 14 Dtool_VZN304KY 4 814 2150 0 14 Dtool_VZN304KY 2 4 this 3 2222  1 i 1 2148  
1024 14 Dtool_VZN3m5Kf 4 815 2150 0 14 Dtool_VZN3m5Kf 2 4 this 3 2222  1 j 1 2148  
1025 14 Dtool_VZN3YGLm 4 816 2150 0 14 Dtool_VZN3YGLm 2 4 this 3 2222  1 k 1 2148  
1026 14 Dtool_VZN3aBWQ 6 817 2152 0 14 Dtool_VZN3aBWQ 1 4 this 3 2222  
1027 14 Dtool_VZN3MknV 6 818 2152 0 14 Dtool_VZN3MknV 2 4 this 3 2222  5 other 1 2223  
1028 14 Dtool_VZN3Dgwh 6 819 2152 0 14 Dtool_VZN3Dgwh 1 4 this 3 2222  
1029 14 Dtool_VZN3ed84 6 820 2152 0 14 Dtool_VZN3ed84 2 4 this 3 2222  5 other 1 2223  
1030 14 Dtool_VZN3vLqt 6 821 2152 0 14 Dtool_VZN3vLqt 1 4 this 3 2222  
1031 14 Dtool_VZN3Jkak 6 822 2152 0 14 Dtool_VZN3Jkak 1 4 this 3 2223  
1032 14 Dtool_VZN34P4N 6 823 2152 0 14 Dtool_VZN34P4N 2 4 this 3 2223  9 tolerance 1 2148  
1033 14 Dtool_VZN3mmMR 6 824 2223 0 14 Dtool_VZN3mmMR 0 
1034 14 Dtool_VZN3ndKd 7 825 2157 0 14 Dtool_VZN3ndKd 0 
1035 14 Dtool_VZN3rOX4 7 828 2225 2096 14 Dtool_VZN3rOX4 0 
1036 14 Dtool_VZN3wmdo 7 828 2225 2096 14 Dtool_VZN3wmdo 1 4 copy 1 2196  
1037 14 Dtool_VZN3BaVV 7 828 2225 2096 14 Dtool_VZN3BaVV 2 6 param0 0 2161  4 copy 1 2178  
1038 14 Dtool_VZN36Z6w 7 828 2225 2096 14 Dtool_VZN36Z6w 4 6 param0 0 2161  6 param1 0 2161  6 param2 0 2161  6 param3 0 2161  
1039 14 Dtool_VZN3OPmP 7 829 2225 2096 14 Dtool_VZN3OPmP 1 6 param0 0 2184  
1040 14 Dtool_VZN3_hFu 7 830 2225 2096 14 Dtool_VZN3_hFu 1 4 this 3 2226  
1041 14 Dtool_VZN3PTTe 7 831 2177 1462 14 Dtool_VZN3PTTe 2 4 this 3 2226  1 v 1 2178  
1042 14 Dtool_VZN3HWT6 7 831 2195 1654 14 Dtool_VZN3HWT6 2 4 this 3 2226  1 v 1 2196  
1043 14 Dtool_VZN3GGsA 7 832 2225 2096 14 Dtool_VZN3GGsA 2 4 this 3 2226  3 rhs 1 2226  
1044 14 Dtool_VZN3X_Xk 7 833 2225 2096 14 Dtool_VZN3X_Xk 1 4 this 3 2226  
1045 14 Dtool_VZN3PV02 7 834 2225 2096 14 Dtool_VZN3PV02 2 4 this 3 2226  5 other 1 2226  
1046 14 Dtool_VZN3Za1S 7 835 2225 2096 14 Dtool_VZN3Za1S 2 4 this 3 2226  5 other 1 2226  
1047 14 Dtool_VZN33sxo 6 836 2161 0 14 Dtool_VZN33sxo 2 4 this 3 2226  5 other 1 2226  
1048 14 Dtool_VZN3mq30 6 837 2161 0 14 Dtool_VZN3mq30 2 4 this 3 2226  5 other 1 2226  
1049 14 Dtool_VZN3BNgV 7 838 2213 1871 14 Dtool_VZN3BNgV 2 4 this 3 2225  6 param0 0 2214  
1050 14 Dtool_VZN38NQ3 7 838 2219 1989 14 Dtool_VZN38NQ3 2 4 this 3 2225  6 param0 0 2220  
1051 14 Dtool_VZN3rQ0o 7 838 2225 2096 14 Dtool_VZN3rQ0o 2 4 this 3 2226  6 param0 0 2226  
1052 14 Dtool_VZN3A0TI 7 838 2225 2096 14 Dtool_VZN3A0TI 2 4 this 3 2226  6 scalar 1 2161  
1053 14 Dtool_VZN3PASO 7 839 2225 2096 14 Dtool_VZN3PASO 2 4 this 3 2226  6 scalar 1 2161  
1054 14 Dtool_VZN36vdR 6 840 2225 0 14 Dtool_VZN36vdR 2 4 this 3 2225  6 param0 0 2226  
1055 14 Dtool_VZN3sATv 6 841 2152 0 14 Dtool_VZN3sATv 2 4 this 3 2226  5 other 1 2226  
1056 14 Dtool_VZN3KRVo 6 841 2152 0 14 Dtool_VZN3KRVo 3 4 this 3 2226  5 other 1 2226  9 threshold 1 2161  
1057 14 Dtool_VZN3Zg5d 6 842 2152 0 14 Dtool_VZN3Zg5d 2 4 this 3 2226  5 other 1 2226  
1058 14 Dtool_VZN3UNTJ 6 843 2152 0 14 Dtool_VZN3UNTJ 3 4 this 3 2226  5 other 1 2226  9 threshold 1 2161  
1059 14 Dtool_VZN3cZ7K 4 844 2150 0 14 Dtool_VZN3cZ7K 2 4 this 3 2226  6 param0 0 2153  
1060 14 Dtool_VZN3QLcn 4 845 2150 0 14 Dtool_VZN3QLcn 2 4 this 3 2226  1 m 1 2213  
1061 14 Dtool_VZN3I6nn 4 845 2150 0 14 Dtool_VZN3I6nn 2 4 this 3 2226  1 m 1 2219  
1062 14 Dtool_VZN3ea4e 4 846 2150 0 14 Dtool_VZN3ea4e 2 4 this 3 2225  1 m 1 2214  
1063 14 Dtool_VZN35bYi 4 846 2150 0 14 Dtool_VZN35bYi 2 4 this 3 2225  1 m 1 2220  
1064 14 Dtool_VZN3X48z 4 847 2150 0 14 Dtool_VZN3X48z 3 4 this 3 2225  3 hpr 1 2178  2 cs 1 2124  
1065 14 Dtool_VZN3hFnX 4 847 2150 0 14 Dtool_VZN3hFnX 2 4 this 3 2225  3 hpr 1 2178  
1066 14 Dtool_VZN3W1gb 7 848 2177 1462 14 Dtool_VZN3W1gb 2 4 this 3 2226  2 cs 1 2124  
1067 14 Dtool_VZN3ORIv 7 848 2177 1462 14 Dtool_VZN3ORIv 1 4 this 3 2226  
1068 14 Dtool_VZN3Y4Rc 7 849 2183 1557 14 Dtool_VZN3Y4Rc 1 4 this 3 2226  
1069 14 Dtool_VZN3NkmF 7 850 2183 1557 14 Dtool_VZN3NkmF 1 4 this 3 2226  
1070 14 Dtool_VZN3Z_bI 6 851 2161 0 14 Dtool_VZN3Z_bI 1 4 this 3 2226  
1071 14 Dtool_VZN3e8Rb 6 852 2161 0 14 Dtool_VZN3e8Rb 1 4 this 3 2226  
1072 14 Dtool_VZN3Z91x 4 853 2150 0 14 Dtool_VZN3Z91x 3 4 this 3 2225  9 angle_rad 1 2161  4 axis 1 2184  
1073 14 Dtool_VZN3VKOA 4 854 2150 0 14 Dtool_VZN3VKOA 3 4 this 3 2225  9 angle_deg 1 2161  4 axis 1 2184  
1074 14 Dtool_VZN33uwU 7 855 2183 1557 14 Dtool_VZN33uwU 2 4 this 3 2226  2 cs 1 2124  
1075 14 Dtool_VZN3rsaN 7 855 2183 1557 14 Dtool_VZN3rsaN 1 4 this 3 2226  
1076 14 Dtool_VZN3Mt7u 7 856 2183 1557 14 Dtool_VZN3Mt7u 2 4 this 3 2226  2 cs 1 2124  
1077 14 Dtool_VZN38etZ 7 856 2183 1557 14 Dtool_VZN38etZ 1 4 this 3 2226  
1078 14 Dtool_VZN36zHl 7 857 2183 1557 14 Dtool_VZN36zHl 2 4 this 3 2226  2 cs 1 2124  
1079 14 Dtool_VZN3IPaW 7 857 2183 1557 14 Dtool_VZN3IPaW 1 4 this 3 2226  
1080 14 Dtool_VZN3lYi_ 6 858 2161 0 14 Dtool_VZN3lYi_ 1 4 this 3 2226  
1081 14 Dtool_VZN3kVi_ 6 859 2161 0 14 Dtool_VZN3kVi_ 1 4 this 3 2226  
1082 14 Dtool_VZN31WiG 6 860 2161 0 14 Dtool_VZN31WiG 1 4 this 3 2226  
1083 14 Dtool_VZN3HQiN 6 861 2161 0 14 Dtool_VZN3HQiN 1 4 this 3 2226  
1084 14 Dtool_VZN32srU 4 862 2150 0 14 Dtool_VZN32srU 2 4 this 3 2225  1 r 1 2161  
1085 14 Dtool_VZN33hrV 4 863 2150 0 14 Dtool_VZN33hrV 2 4 this 3 2225  1 i 1 2161  
1086 14 Dtool_VZN35irc 4 864 2150 0 14 Dtool_VZN35irc 2 4 this 3 2225  1 j 1 2161  
1087 14 Dtool_VZN3Ljrj 4 865 2150 0 14 Dtool_VZN3Ljrj 2 4 this 3 2225  1 k 1 2161  
1088 14 Dtool_VZN3aleL 6 866 2152 0 14 Dtool_VZN3aleL 1 4 this 3 2225  
1089 14 Dtool_VZN3Mw_G 6 867 2152 0 14 Dtool_VZN3Mw_G 2 4 this 3 2225  5 other 1 2226  
1090 14 Dtool_VZN3DM3c 6 868 2152 0 14 Dtool_VZN3DM3c 1 4 this 3 2225  
1091 14 Dtool_VZN3IgEt 6 869 2152 0 14 Dtool_VZN3IgEt 2 4 this 3 2225  5 other 1 2226  
1092 14 Dtool_VZN3v3zo 6 870 2152 0 14 Dtool_VZN3v3zo 1 4 this 3 2225  
1093 14 Dtool_VZN3JIif 6 871 2152 0 14 Dtool_VZN3JIif 1 4 this 3 2226  
1094 14 Dtool_VZN3Z4KV 6 872 2152 0 14 Dtool_VZN3Z4KV 2 4 this 3 2226  9 tolerance 1 2161  
1095 14 Dtool_VZN3maTM 6 873 2226 0 14 Dtool_VZN3maTM 0 
1096 14 Dtool_VZN3nxRY 7 874 2157 0 14 Dtool_VZN3nxRY 0 
1097 14 Dtool_VZN31ufs 7 877 2228 2101 14 Dtool_VZN31ufs 0 
1098 14 Dtool_VZN3oHWm 7 877 2228 2101 14 Dtool_VZN3oHWm 1 6 param0 0 2211  
1099 14 Dtool_VZN3oMkn 7 877 2228 2101 14 Dtool_VZN3oMkn 1 6 param0 0 2217  
1100 14 Dtool_VZN3dC6k 7 877 2228 2101 14 Dtool_VZN3dC6k 1 6 param0 0 2223  
1101 14 Dtool_VZN3ZE8x 7 877 2228 2101 14 Dtool_VZN3ZE8x 1 4 copy 1 2193  
1102 14 Dtool_VZN3zssT 7 877 2228 2101 14 Dtool_VZN3zssT 2 6 param0 0 2181  6 param1 0 2148  
1103 14 Dtool_VZN3LwNm 7 877 2228 2101 14 Dtool_VZN3LwNm 3 6 param0 0 2148  6 param1 0 2148  6 param2 0 2148  
1104 14 Dtool_VZN36t_a 7 877 2228 2101 14 Dtool_VZN36t_a 4 6 param0 0 2148  6 param1 0 2148  6 param2 0 2148  6 param3 0 2148  
1105 14 Dtool_VZN3cT59 7 878 2222 2048 14 Dtool_VZN3cT59 2 4 this 3 2229  5 other 1 2223  
1106 14 Dtool_VZN3ttc8 7 878 2228 2101 14 Dtool_VZN3ttc8 2 4 this 3 2229  5 other 1 2229  
1107 14 Dtool_VZN3mMpJ 7 878 2228 2101 14 Dtool_VZN3mMpJ 2 4 this 3 2229  6 scalar 1 2148  
1108 14 Dtool_VZN3mkd6 7 879 2228 2101 14 Dtool_VZN3mkd6 2 4 this 3 2229  6 scalar 1 2148  
1109 14 Dtool_VZN3scCI 7 880 2157 0 14 Dtool_VZN3scCI 0 
1110 14 Dtool_VZN3XT9o 7 883 2231 2106 14 Dtool_VZN3XT9o 0 
1111 14 Dtool_VZN31jtU 7 883 2231 2106 14 Dtool_VZN31jtU 1 6 param0 0 2214  
1112 14 Dtool_VZN31o7V 7 883 2231 2106 14 Dtool_VZN31o7V 1 6 param0 0 2220  
1113 14 Dtool_VZN371Oh 7 883 2231 2106 14 Dtool_VZN371Oh 1 6 param0 0 2226  
1114 14 Dtool_VZN3bq7q 7 883 2231 2106 14 Dtool_VZN3bq7q 1 4 copy 1 2196  
1115 14 Dtool_VZN3Ldpy 7 883 2231 2106 14 Dtool_VZN3Ldpy 2 6 param0 0 2184  6 param1 0 2161  
1116 14 Dtool_VZN34Iug 7 883 2231 2106 14 Dtool_VZN34Iug 3 6 param0 0 2161  6 param1 0 2161  6 param2 0 2161  
1117 14 Dtool_VZN3A9cz 7 883 2231 2106 14 Dtool_VZN3A9cz 4 6 param0 0 2161  6 param1 0 2161  6 param2 0 2161  6 param3 0 2161  
1118 14 Dtool_VZN3ukuN 7 884 2225 2096 14 Dtool_VZN3ukuN 2 4 this 3 2232  5 other 1 2226  
1119 14 Dtool_VZN31Z8I 7 884 2231 2106 14 Dtool_VZN31Z8I 2 4 this 3 2232  5 other 1 2232  
1120 14 Dtool_VZN3y_rc 7 884 2231 2106 14 Dtool_VZN3y_rc 2 4 this 3 2232  6 scalar 1 2161  
1121 14 Dtool_VZN3zWgN 7 885 2231 2106 14 Dtool_VZN3zWgN 2 4 this 3 2232  6 scalar 1 2161  
1122 14 Dtool_VZN3KPCY 7 886 2157 0 14 Dtool_VZN3KPCY 0 
1123 14 Dtool_VZN3cX4n 7 889 2234 2110 14 Dtool_VZN3cX4n 0 
1124 14 Dtool_VZN3kodg 7 889 2234 2110 14 Dtool_VZN3kodg 1 6 param0 0 2211  
1125 14 Dtool_VZN3loku 7 889 2234 2110 14 Dtool_VZN3loku 1 6 param0 0 2217  
1126 14 Dtool_VZN3_eNF 7 889 2234 2110 14 Dtool_VZN3_eNF 1 6 param0 0 2223  
1127 14 Dtool_VZN3Os13 7 889 2234 2110 14 Dtool_VZN3Os13 2 6 param0 0 2181  6 param1 0 2148  
1128 14 Dtool_VZN3WFbK 7 889 2234 2110 14 Dtool_VZN3WFbK 4 6 param0 0 2148  6 param1 0 2148  6 param2 0 2148  6 param3 0 2148  
1129 14 Dtool_VZN31nPz 7 890 2234 2110 14 Dtool_VZN31nPz 2 4 this 3 2235  5 other 1 2223  
1130 14 Dtool_VZN3yr_X 7 890 2234 2110 14 Dtool_VZN3yr_X 2 4 this 3 2235  5 other 1 2229  
1131 14 Dtool_VZN3yKEa 7 891 2157 0 14 Dtool_VZN3yKEa 0 
1132 14 Dtool_VZN32Y6p 7 894 2237 2114 14 Dtool_VZN32Y6p 0 
1133 14 Dtool_VZN3Yrfb 7 894 2237 2114 14 Dtool_VZN3Yrfb 1 6 param0 0 2214  
1134 14 Dtool_VZN3Zrmp 7 894 2237 2114 14 Dtool_VZN3Zrmp 1 6 param0 0 2220  
1135 14 Dtool_VZN3RFe9 7 894 2237 2114 14 Dtool_VZN3RFe9 1 6 param0 0 2226  
1136 14 Dtool_VZN3yi3y 7 894 2237 2114 14 Dtool_VZN3yi3y 2 6 param0 0 2184  6 param1 0 2148  
1137 14 Dtool_VZN3QOxM 7 894 2237 2114 14 Dtool_VZN3QOxM 4 6 param0 0 2161  6 param1 0 2161  6 param2 0 2161  6 param3 0 2161  
1138 14 Dtool_VZN3lgBQ 7 895 2237 2114 14 Dtool_VZN3lgBQ 2 4 this 3 2238  5 other 1 2226  
1139 14 Dtool_VZN39P52 7 895 2237 2114 14 Dtool_VZN39P52 2 4 this 3 2238  5 other 1 2232  
1140 14 Dtool_VZN3xK29 7 896 2157 0 14 Dtool_VZN3xK29 0 
1141 14 Dtool_VZN3aTo4 6 157 2161 0 14 Dtool_VZN3aTo4 1 1 f 1 2161  
1142 14 Dtool_VZN3RKCI 6 157 2148 0 14 Dtool_VZN3RKCI 1 1 f 1 2148  
1143 14 Dtool_VZN3gpRs 6 158 2161 0 14 Dtool_VZN3gpRs 1 1 f 1 2161  
1144 14 Dtool_VZN3Ibq7 6 158 2148 0 14 Dtool_VZN3Ibq7 1 1 f 1 2148  
1145 14 Dtool_VZN3t1jy 6 272 2124 0 14 Dtool_VZN3t1jy 0 
1146 14 Dtool_VZN3p_eQ 7 591 2213 1871 14 Dtool_VZN3p_eQ 1 1 a 1 2214  
1147 14 Dtool_VZN3N4ee 7 591 2210 1816 14 Dtool_VZN3N4ee 1 1 a 1 2211  
1148 14 Dtool_VZN3n_ss 7 591 2219 1989 14 Dtool_VZN3n_ss 1 1 a 1 2220  
1149 14 Dtool_VZN3L4s6 7 591 2216 1930 14 Dtool_VZN3L4s6 1 1 a 1 2217  
1150 14 Dtool_VZN39Gem 7 592 2213 1871 14 Dtool_VZN39Gem 1 1 a 1 2214  
1151 14 Dtool_VZN3Ngym 7 592 2210 1816 14 Dtool_VZN3Ngym 1 1 a 1 2211  
1152 14 Dtool_VZN3YJfW 7 592 2219 1989 14 Dtool_VZN3YJfW 1 1 a 1 2220  
1153 14 Dtool_VZN3orzW 7 592 2216 1930 14 Dtool_VZN3orzW 1 1 a 1 2217  
1154 14 Dtool_VZN3G8wm 7 592 2225 2096 14 Dtool_VZN3G8wm 1 1 a 1 2226  
1155 14 Dtool_VZN3qBx0 7 592 2222 2048 14 Dtool_VZN3qBx0 1 1 a 1 2223  
1156 14 Dtool_VZN3DzjX 7 767 2213 1871 14 Dtool_VZN3DzjX 2 1 m 1 2214  1 q 1 2226  
1157 14 Dtool_VZN3kolH 7 767 2210 1816 14 Dtool_VZN3kolH 2 1 m 1 2211  1 q 1 2223  
1158 14 Dtool_VZN3Rsje 7 767 2219 1989 14 Dtool_VZN3Rsje 2 1 m 1 2220  1 q 1 2226  
1159 14 Dtool_VZN3qplO 7 767 2216 1930 14 Dtool_VZN3qplO 2 1 m 1 2217  1 q 1 2223  
1160 14 Dtool_VZN3yfKI 7 767 2171 1395 14 Dtool_VZN3yfKI 2 1 v 1 2172  1 m 1 2214  
1161 14 Dtool_VZN3SCRW 7 767 2168 1382 14 Dtool_VZN3SCRW 2 1 v 1 2169  1 m 1 2211  
1162 14 Dtool_VZN3mWZA 7 767 2189 1591 14 Dtool_VZN3mWZA 2 1 v 1 2190  1 m 1 2220  
1163 14 Dtool_VZN3eNeO 7 767 2186 1574 14 Dtool_VZN3eNeO 2 1 v 1 2187  1 m 1 2217  
1164 14 Dtool_VZN36f4W 7 767 2177 1462 14 Dtool_VZN36f4W 2 1 v 1 2178  1 m 1 2214  
1165 14 Dtool_VZN3ZSml 7 767 2174 1407 14 Dtool_VZN3ZSml 2 1 v 1 2175  1 m 1 2211  
1166 14 Dtool_VZN3HpH4 7 767 2195 1654 14 Dtool_VZN3HpH4 2 1 v 1 2196  1 m 1 2220  
1167 14 Dtool_VZN3lt1G 7 767 2192 1601 14 Dtool_VZN3lt1G 2 1 v 1 2193  1 m 1 2217  
1168 14 Dtool_VZN3QlWf 7 767 2165 1369 14 Dtool_VZN3QlWf 2 1 v 1 2166  1 m 1 2214  
1169 14 Dtool_VZN3fZ0h 7 767 2162 1353 14 Dtool_VZN3fZ0h 2 1 v 1 2163  1 m 1 2211  
1170 14 Dtool_VZN3wbZm 7 767 2183 1557 14 Dtool_VZN3wbZm 2 1 v 1 2184  1 m 1 2220  
1171 14 Dtool_VZN37_2o 7 767 2180 1533 14 Dtool_VZN37_2o 2 1 v 1 2181  1 m 1 2217  
1172 14 Dtool_VZN3J63D 4 768 2150 0 14 Dtool_VZN3J63D 2 4 dest 1 2240  5 value 1 2214  
1173 14 Dtool_VZN3Qo4D 4 768 2150 0 14 Dtool_VZN3Qo4D 2 4 dest 1 2240  5 value 1 2211  
1174 14 Dtool_VZN3b53K 4 768 2150 0 14 Dtool_VZN3b53K 2 4 dest 1 2240  5 value 1 2220  
1175 14 Dtool_VZN3Cr4K 4 768 2150 0 14 Dtool_VZN3Cr4K 2 4 dest 1 2240  5 value 1 2217  
1176 14 Dtool_VZN3G74L 4 769 2150 0 14 Dtool_VZN3G74L 2 6 result 1 2213  6 source 1 2242  
1177 14 Dtool_VZN3GpUO 4 769 2150 0 14 Dtool_VZN3GpUO 2 6 result 1 2210  6 source 1 2242  
1178 14 Dtool_VZN30f6L 4 769 2150 0 14 Dtool_VZN30f6L 2 6 result 1 2219  6 source 1 2242  
1179 14 Dtool_VZN30NWO 4 769 2150 0 14 Dtool_VZN30NWO 2 6 result 1 2216  6 source 1 2242  
1180 14 Dtool_VZN3yVzC 4 770 2150 0 14 Dtool_VZN3yVzC 4 3 mat 1 2213  5 scale 1 2178  3 hpr 1 2178  2 cs 1 2124  
1181 14 Dtool_VZN3hQb3 4 770 2150 0 14 Dtool_VZN3hQb3 3 3 mat 1 2213  5 scale 1 2178  3 hpr 1 2178  
1182 14 Dtool_VZN33KHb 4 770 2150 0 14 Dtool_VZN33KHb 5 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  2 cs 1 2124  
1183 14 Dtool_VZN3RK2_ 4 770 2150 0 14 Dtool_VZN3RK2_ 4 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  
1184 14 Dtool_VZN34aBn 4 770 2150 0 14 Dtool_VZN34aBn 4 3 mat 1 2210  5 scale 1 2175  3 hpr 1 2175  2 cs 1 2124  
1185 14 Dtool_VZN36xpb 4 770 2150 0 14 Dtool_VZN36xpb 3 3 mat 1 2210  5 scale 1 2175  3 hpr 1 2175  
1186 14 Dtool_VZN3s_WG 4 770 2150 0 14 Dtool_VZN3s_WG 5 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  2 cs 1 2124  
1187 14 Dtool_VZN3k7Er 4 770 2150 0 14 Dtool_VZN3k7Er 4 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  
1188 14 Dtool_VZN38KjT 4 770 2150 0 14 Dtool_VZN38KjT 5 3 mat 1 2219  5 scale 1 2178  3 hpr 1 2178  9 translate 1 2178  2 cs 1 2124  
1189 14 Dtool_VZN3UKS4 4 770 2150 0 14 Dtool_VZN3UKS4 4 3 mat 1 2219  5 scale 1 2178  3 hpr 1 2178  9 translate 1 2178  
1190 14 Dtool_VZN3oQjw 4 770 2150 0 14 Dtool_VZN3oQjw 6 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  2 cs 1 2124  
1191 14 Dtool_VZN39vLl 4 770 2150 0 14 Dtool_VZN39vLl 5 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  
1192 14 Dtool_VZN3Q_y_ 4 770 2150 0 14 Dtool_VZN3Q_y_ 5 3 mat 1 2216  5 scale 1 2175  3 hpr 1 2175  9 translate 1 2175  2 cs 1 2124  
1193 14 Dtool_VZN377gj 4 770 2150 0 14 Dtool_VZN377gj 4 3 mat 1 2216  5 scale 1 2175  3 hpr 1 2175  9 translate 1 2175  
1194 14 Dtool_VZN31X_c 4 770 2150 0 14 Dtool_VZN31X_c 6 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  2 cs 1 2124  
1195 14 Dtool_VZN3CknR 4 770 2150 0 14 Dtool_VZN3CknR 5 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  
1196 14 Dtool_VZN3rGAD 6 771 2152 0 14 Dtool_VZN3rGAD 4 3 mat 1 2214  5 scale 1 2177  3 hpr 1 2177  2 cs 1 2124  
1197 14 Dtool_VZN3VxX2 6 771 2152 0 14 Dtool_VZN3VxX2 3 3 mat 1 2214  5 scale 1 2177  3 hpr 1 2177  
1198 14 Dtool_VZN3wk1_ 6 771 2152 0 14 Dtool_VZN3wk1_ 5 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  2 cs 1 2124  
1199 14 Dtool_VZN3syts 6 771 2152 0 14 Dtool_VZN3syts 4 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  
1200 14 Dtool_VZN3KI_s 6 771 2152 0 14 Dtool_VZN3KI_s 4 3 mat 1 2211  5 scale 1 2174  3 hpr 1 2174  2 cs 1 2124  
1201 14 Dtool_VZN3zJVg 6 771 2152 0 14 Dtool_VZN3zJVg 3 3 mat 1 2211  5 scale 1 2174  3 hpr 1 2174  
1202 14 Dtool_VZN3b5Pi 6 771 2152 0 14 Dtool_VZN3b5Pi 5 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  2 cs 1 2124  
1203 14 Dtool_VZN3FoHP 6 771 2152 0 14 Dtool_VZN3FoHP 4 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  
1204 14 Dtool_VZN37y0_ 6 771 2152 0 14 Dtool_VZN37y0_ 5 3 mat 1 2220  5 scale 1 2177  3 hpr 1 2177  9 translate 1 2177  2 cs 1 2124  
1205 14 Dtool_VZN31gus 6 771 2152 0 14 Dtool_VZN31gus 4 3 mat 1 2220  5 scale 1 2177  3 hpr 1 2177  9 translate 1 2177  
1206 14 Dtool_VZN3Fy__ 6 771 2152 0 14 Dtool_VZN3Fy__ 6 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  2 cs 1 2124  
1207 14 Dtool_VZN3ioSK 6 771 2152 0 14 Dtool_VZN3ioSK 5 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  
1208 14 Dtool_VZN3QLRi 6 771 2152 0 14 Dtool_VZN3QLRi 5 3 mat 1 2217  5 scale 1 2174  3 hpr 1 2174  9 translate 1 2174  2 cs 1 2124  
1209 14 Dtool_VZN3cmIP 6 771 2152 0 14 Dtool_VZN3cmIP 4 3 mat 1 2217  5 scale 1 2174  3 hpr 1 2174  9 translate 1 2174  
1210 14 Dtool_VZN3t1gv 6 771 2152 0 14 Dtool_VZN3t1gv 6 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  2 cs 1 2124  
1211 14 Dtool_VZN3Jlz6 6 771 2152 0 14 Dtool_VZN3Jlz6 5 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  
1212 14 Dtool_VZN35kiD 4 772 2150 0 14 Dtool_VZN35kiD 5 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  2 cs 1 2124  
1213 14 Dtool_VZN3TMeM 4 772 2150 0 14 Dtool_VZN3TMeM 4 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  
1214 14 Dtool_VZN3URso 4 772 2150 0 14 Dtool_VZN3URso 5 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  2 cs 1 2124  
1215 14 Dtool_VZN3_Rpx 4 772 2150 0 14 Dtool_VZN3_Rpx 4 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  
1216 14 Dtool_VZN3aU0J 4 772 2150 0 14 Dtool_VZN3aU0J 6 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  2 cs 1 2124  
1217 14 Dtool_VZN3_LGV 4 772 2150 0 14 Dtool_VZN3_LGV 5 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  
1218 14 Dtool_VZN3Xr_e 4 772 2150 0 14 Dtool_VZN3Xr_e 6 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  2 cs 1 2124  
1219 14 Dtool_VZN3gMRq 4 772 2150 0 14 Dtool_VZN3gMRq 5 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  
1220 14 Dtool_VZN3tC1N 6 773 2152 0 14 Dtool_VZN3tC1N 5 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  2 cs 1 2124  
1221 14 Dtool_VZN3z5DH 6 773 2152 0 14 Dtool_VZN3z5DH 4 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  
1222 14 Dtool_VZN3POdX 6 773 2152 0 14 Dtool_VZN3POdX 5 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  2 cs 1 2124  
1223 14 Dtool_VZN3RWrQ 6 773 2152 0 14 Dtool_VZN3RWrQ 4 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  
1224 14 Dtool_VZN3vhAZ 6 773 2152 0 14 Dtool_VZN3vhAZ 6 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  2 cs 1 2124  
1225 14 Dtool_VZN3PJWn 6 773 2152 0 14 Dtool_VZN3PJWn 5 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  
1226 14 Dtool_VZN3ST9i 6 773 2152 0 14 Dtool_VZN3ST9i 6 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  2 cs 1 2124  
1227 14 Dtool_VZN395Tx 6 773 2152 0 14 Dtool_VZN395Tx 5 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  
1228 14 Dtool_VZN32yX5 4 774 2150 0 14 Dtool_VZN32yX5 5 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  2 cs 1 2124  
1229 14 Dtool_VZN3ZHTC 4 774 2150 0 14 Dtool_VZN3ZHTC 4 3 mat 1 2213  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  
1230 14 Dtool_VZN3SFhe 4 774 2150 0 14 Dtool_VZN3SFhe 5 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  2 cs 1 2124  
1231 14 Dtool_VZN31Zen 4 774 2150 0 14 Dtool_VZN31Zen 4 3 mat 1 2210  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  
1232 14 Dtool_VZN3XOp_ 4 774 2150 0 14 Dtool_VZN3XOp_ 6 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  2 cs 1 2124  
1233 14 Dtool_VZN3IA7K 4 774 2150 0 14 Dtool_VZN3IA7K 5 3 mat 1 2219  5 scale 1 2178  5 shear 1 2178  3 hpr 1 2178  9 translate 1 2178  
1234 14 Dtool_VZN3R3yU 4 774 2150 0 14 Dtool_VZN3R3yU 6 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  2 cs 1 2124  
1235 14 Dtool_VZN3KHGg 4 774 2150 0 14 Dtool_VZN3KHGg 5 3 mat 1 2216  5 scale 1 2175  5 shear 1 2175  3 hpr 1 2175  9 translate 1 2175  
1236 14 Dtool_VZN30nyg 6 775 2152 0 14 Dtool_VZN30nyg 5 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  2 cs 1 2124  
1237 14 Dtool_VZN3WfBa 6 775 2152 0 14 Dtool_VZN3WfBa 4 3 mat 1 2214  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  
1238 14 Dtool_VZN3Suaq 6 775 2152 0 14 Dtool_VZN3Suaq 5 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  2 cs 1 2124  
1239 14 Dtool_VZN37noj 6 775 2152 0 14 Dtool_VZN37noj 4 3 mat 1 2211  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  
1240 14 Dtool_VZN3Bw_r 6 775 2152 0 14 Dtool_VZN3Bw_r 6 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  2 cs 1 2124  
1241 14 Dtool_VZN31_T6 6 775 2152 0 14 Dtool_VZN31_T6 5 3 mat 1 2220  5 scale 1 2177  5 shear 1 2177  3 hpr 1 2177  9 translate 1 2177  
1242 14 Dtool_VZN33x61 6 775 2152 0 14 Dtool_VZN33x61 6 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  2 cs 1 2124  
1243 14 Dtool_VZN3GpPE 6 775 2152 0 14 Dtool_VZN3GpPE 5 3 mat 1 2217  5 scale 1 2174  5 shear 1 2174  3 hpr 1 2174  9 translate 1 2174  
1244 14 Dtool_VZN32peC 7 776 2177 1462 14 Dtool_VZN32peC 1 7 old_hpr 1 2178  
1245 14 Dtool_VZN3I0gC 7 776 2174 1407 14 Dtool_VZN3I0gC 1 7 old_hpr 1 2175  
1246 14 Dtool_VZN3Pgfc 7 777 2177 1462 14 Dtool_VZN3Pgfc 1 7 new_hpr 1 2178  
1247 14 Dtool_VZN3ZEhc 7 777 2174 1407 14 Dtool_VZN3ZEhc 1 7 new_hpr 1 2175  
129
2115 10 LVecBase2f 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1248 1255 0 43 1249 1250 1251 1252 1253 1254 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2116 10 LVecBase2d 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 1293 1300 0 43 1294 1295 1296 1297 1298 1299 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2117 9 LVector2f 141313 9 LVector2f 9 LVector2f 0 0 0 1 1338 1353 0 14 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 0 1 0 2115 0 0 0 0 895
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2118 9 LVector2d 141313 9 LVector2d 9 LVector2d 0 0 0 1 1354 1369 0 14 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 0 1 0 2116 0 0 0 0 895
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2119 8 LPoint2f 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 1370 1382 0 11 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 0 1 0 2115 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2120 8 LPoint2d 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 1383 1395 0 11 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 0 1 0 2116 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2121 11 MathNumbers 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1396 0 0 0 0 0 0 0

2122 10 LVecBase3f 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 1399 1407 0 53 1400 1401 1402 1403 1404 1405 1406 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2123 10 LVecBase3d 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 1454 1462 0 53 1455 1456 1457 1458 1459 1460 1461 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2124 16 CoordinateSystem 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2125 9 LVector3f 141313 9 LVector3f 9 LVector3f 0 0 0 1 1510 1533 0 22 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 0 1 0 2122 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2126 9 LVector3d 141313 9 LVector3d 9 LVector3d 0 0 0 1 1534 1557 0 22 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 0 1 0 2123 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2127 8 LPoint3f 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 1558 1574 0 15 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 0 1 0 2122 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2128 8 LPoint3d 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 1575 1591 0 15 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 0 1 0 2123 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2129 10 LVecBase4f 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 1592 1601 0 51 1593 1594 1595 1596 1597 1598 1599 1600 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2130 10 LVecBase4d 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 1645 1654 0 51 1646 1647 1648 1649 1650 1651 1652 1653 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2131 9 LVector4f 141313 9 LVector4f 9 LVector4f 0 0 0 1 1698 1715 0 16 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 0 1 0 2129 0 0 0 0 898
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2132 9 LVector4d 141313 9 LVector4d 9 LVector4d 0 0 0 1 1716 1733 0 16 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 0 1 0 2130 0 0 0 0 898
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2133 8 LPoint4f 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 1734 1748 0 13 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 0 1 0 2129 0 0 0 0 895
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2134 8 LPoint4d 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 1749 1763 0 13 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 0 1 0 2130 0 0 0 0 895
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2135 9 LMatrix3f 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 1764 1816 0 51 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 0 0 0 0 1138
// Filename: lmatrix3_src.h
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2136 9 LMatrix3d 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 1819 1871 0 51 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 0 0 0 0 1138
// Filename: lmatrix3_src.h
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2137 9 LMatrix4f 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 1872 1930 0 57 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2138 9 LMatrix4d 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 1931 1989 0 57 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2139 12 LQuaternionf 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 2001 2048 0 46 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 0 1 0 2129 0 0 0 0 907
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2140 12 LQuaterniond 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 2049 2096 0 46 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 0 1 0 2130 0 0 0 0 907
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2141 10 LRotationf 141313 10 LRotationf 10 LRotationf 0 0 0 1 2097 2101 0 3 2098 2099 2100 0 1 0 2139 0 0 0 0 926
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2142 10 LRotationd 141313 10 LRotationd 10 LRotationd 0 0 0 1 2102 2106 0 3 2103 2104 2105 0 1 0 2140 0 0 0 0 926
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2143 13 LOrientationf 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 2107 2110 0 2 2108 2109 0 1 0 2139 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2144 13 LOrientationd 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 2111 2114 0 2 2112 2113 0 1 0 2140 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2145 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 2115 0 0 0 0 0 0 0 0 0

2146 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2147 0 0 0 0 0 0 0 0 0

2147 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2115 0 0 0 0 0 0 0 0 0

2148 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

2149 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

2150 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

2151 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

2152 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

2153 9 ostream * 8576 9 ostream * 9 ostream * 0 0 2154 0 0 0 0 0 0 0 0 0

2154 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

2155 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

2156 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2157 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 2156 0 0 0 0 0 0 0 0 0

2158 12 LVecBase2d * 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 2116 0 0 0 0 0 0 0 0 0

2159 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2160 0 0 0 0 0 0 0 0 0

2160 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2116 0 0 0 0 0 0 0 0 0

2161 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

2162 11 LVector2f * 8576 11 LVector2f * 11 LVector2f * 0 0 2117 0 0 0 0 0 0 0 0 0

2163 17 LVector2f const * 8576 17 LVector2f const * 17 LVector2f const * 0 0 2164 0 0 0 0 0 0 0 0 0

2164 15 LVector2f const 8832 15 LVector2f const 15 LVector2f const 0 0 2117 0 0 0 0 0 0 0 0 0

2165 11 LVector2d * 8576 11 LVector2d * 11 LVector2d * 0 0 2118 0 0 0 0 0 0 0 0 0

2166 17 LVector2d const * 8576 17 LVector2d const * 17 LVector2d const * 0 0 2167 0 0 0 0 0 0 0 0 0

2167 15 LVector2d const 8832 15 LVector2d const 15 LVector2d const 0 0 2118 0 0 0 0 0 0 0 0 0

2168 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 2119 0 0 0 0 0 0 0 0 0

2169 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 2170 0 0 0 0 0 0 0 0 0

2170 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 2119 0 0 0 0 0 0 0 0 0

2171 10 LPoint2d * 8576 10 LPoint2d * 10 LPoint2d * 0 0 2120 0 0 0 0 0 0 0 0 0

2172 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2173 0 0 0 0 0 0 0 0 0

2173 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 2120 0 0 0 0 0 0 0 0 0

2174 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 2122 0 0 0 0 0 0 0 0 0

2175 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2176 0 0 0 0 0 0 0 0 0

2176 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2122 0 0 0 0 0 0 0 0 0

2177 12 LVecBase3d * 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 2123 0 0 0 0 0 0 0 0 0

2178 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2179 0 0 0 0 0 0 0 0 0

2179 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2123 0 0 0 0 0 0 0 0 0

2180 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 2125 0 0 0 0 0 0 0 0 0

2181 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 2182 0 0 0 0 0 0 0 0 0

2182 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 2125 0 0 0 0 0 0 0 0 0

2183 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 2126 0 0 0 0 0 0 0 0 0

2184 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 2185 0 0 0 0 0 0 0 0 0

2185 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 2126 0 0 0 0 0 0 0 0 0

2186 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 2127 0 0 0 0 0 0 0 0 0

2187 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 2188 0 0 0 0 0 0 0 0 0

2188 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 2127 0 0 0 0 0 0 0 0 0

2189 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 2128 0 0 0 0 0 0 0 0 0

2190 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2191 0 0 0 0 0 0 0 0 0

2191 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 2128 0 0 0 0 0 0 0 0 0

2192 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2129 0 0 0 0 0 0 0 0 0

2193 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2194 0 0 0 0 0 0 0 0 0

2194 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2129 0 0 0 0 0 0 0 0 0

2195 12 LVecBase4d * 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 2130 0 0 0 0 0 0 0 0 0

2196 18 LVecBase4d const * 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2197 0 0 0 0 0 0 0 0 0

2197 16 LVecBase4d const 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2130 0 0 0 0 0 0 0 0 0

2198 11 LVector4f * 8576 11 LVector4f * 11 LVector4f * 0 0 2131 0 0 0 0 0 0 0 0 0

2199 17 LVector4f const * 8576 17 LVector4f const * 17 LVector4f const * 0 0 2200 0 0 0 0 0 0 0 0 0

2200 15 LVector4f const 8832 15 LVector4f const 15 LVector4f const 0 0 2131 0 0 0 0 0 0 0 0 0

2201 11 LVector4d * 8576 11 LVector4d * 11 LVector4d * 0 0 2132 0 0 0 0 0 0 0 0 0

2202 17 LVector4d const * 8576 17 LVector4d const * 17 LVector4d const * 0 0 2203 0 0 0 0 0 0 0 0 0

2203 15 LVector4d const 8832 15 LVector4d const 15 LVector4d const 0 0 2132 0 0 0 0 0 0 0 0 0

2204 10 LPoint4f * 8576 10 LPoint4f * 10 LPoint4f * 0 0 2133 0 0 0 0 0 0 0 0 0

2205 16 LPoint4f const * 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 2206 0 0 0 0 0 0 0 0 0

2206 14 LPoint4f const 8832 14 LPoint4f const 14 LPoint4f const 0 0 2133 0 0 0 0 0 0 0 0 0

2207 10 LPoint4d * 8576 10 LPoint4d * 10 LPoint4d * 0 0 2134 0 0 0 0 0 0 0 0 0

2208 16 LPoint4d const * 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2209 0 0 0 0 0 0 0 0 0

2209 14 LPoint4d const 8832 14 LPoint4d const 14 LPoint4d const 0 0 2134 0 0 0 0 0 0 0 0 0

2210 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 2135 0 0 0 0 0 0 0 0 0

2211 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2212 0 0 0 0 0 0 0 0 0

2212 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2135 0 0 0 0 0 0 0 0 0

2213 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2136 0 0 0 0 0 0 0 0 0

2214 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2215 0 0 0 0 0 0 0 0 0

2215 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2136 0 0 0 0 0 0 0 0 0

2216 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 2137 0 0 0 0 0 0 0 0 0

2217 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2218 0 0 0 0 0 0 0 0 0

2218 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2137 0 0 0 0 0 0 0 0 0

2219 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2138 0 0 0 0 0 0 0 0 0

2220 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2221 0 0 0 0 0 0 0 0 0

2221 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2138 0 0 0 0 0 0 0 0 0

2222 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2139 0 0 0 0 0 0 0 0 0

2223 20 LQuaternionf const * 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 2224 0 0 0 0 0 0 0 0 0

2224 18 LQuaternionf const 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 2139 0 0 0 0 0 0 0 0 0

2225 14 LQuaterniond * 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2140 0 0 0 0 0 0 0 0 0

2226 20 LQuaterniond const * 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2227 0 0 0 0 0 0 0 0 0

2227 18 LQuaterniond const 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2140 0 0 0 0 0 0 0 0 0

2228 12 LRotationf * 8576 12 LRotationf * 12 LRotationf * 0 0 2141 0 0 0 0 0 0 0 0 0

2229 18 LRotationf const * 8576 18 LRotationf const * 18 LRotationf const * 0 0 2230 0 0 0 0 0 0 0 0 0

2230 16 LRotationf const 8832 16 LRotationf const 16 LRotationf const 0 0 2141 0 0 0 0 0 0 0 0 0

2231 12 LRotationd * 8576 12 LRotationd * 12 LRotationd * 0 0 2142 0 0 0 0 0 0 0 0 0

2232 18 LRotationd const * 8576 18 LRotationd const * 18 LRotationd const * 0 0 2233 0 0 0 0 0 0 0 0 0

2233 16 LRotationd const 8832 16 LRotationd const 16 LRotationd const 0 0 2142 0 0 0 0 0 0 0 0 0

2234 15 LOrientationf * 8576 15 LOrientationf * 15 LOrientationf * 0 0 2143 0 0 0 0 0 0 0 0 0

2235 21 LOrientationf const * 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 2236 0 0 0 0 0 0 0 0 0

2236 19 LOrientationf const 8832 19 LOrientationf const 19 LOrientationf const 0 0 2143 0 0 0 0 0 0 0 0 0

2237 15 LOrientationd * 8576 15 LOrientationd * 15 LOrientationd * 0 0 2144 0 0 0 0 0 0 0 0 0

2238 21 LOrientationd const * 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 2239 0 0 0 0 0 0 0 0 0

2239 19 LOrientationd const 8832 19 LOrientationd const 19 LOrientationd const 0 0 2144 0 0 0 0 0 0 0 0 0

2240 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 2241 0 0 0 0 0 0 0 0 0

2241 8 Datagram 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2242 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2243 0 0 0 0 0 0 0 0 0

2243 16 DatagramIterator 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

0
0
