1145554045
2 2
7 libgobj 4 MAKP 5 panda 
795
894 10 ~GeomEnums 4 1689 21 GeomEnums::~GeomEnums 0 0 0
28
GeomEnums::~GeomEnums(void);

895 23 GeomVertexAnimationSpec 4 1697 48 GeomVertexAnimationSpec::GeomVertexAnimationSpec 0 2 1 2 1166
// Filename: geomVertexAnimationSpec.I
// Created by:  drose (29Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline GeomVertexAnimationSpec::GeomVertexAnimationSpec(void);

896 10 operator = 4 1697 35 GeomVertexAnimationSpec::operator = 0 1 3 249
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
inline void GeomVertexAnimationSpec::operator =(GeomVertexAnimationSpec const &other);

897 18 get_animation_type 4 1697 43 GeomVertexAnimationSpec::get_animation_type 0 1 4 315
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_animation_type
//       Access: Published
//  Description: Returns the type of animation represented by this
//               spec.
////////////////////////////////////////////////////////////////////
88
inline GeomEnums::AnimationType GeomVertexAnimationSpec::get_animation_type(void) const;

898 18 get_num_transforms 4 1697 43 GeomVertexAnimationSpec::get_num_transforms 0 1 5 479
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_num_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  It specifies the maximum number of
//               transforms that might be simultaneously applied to
//               any one vertex by the data in this format.
////////////////////////////////////////////////////////////////////
67
inline int GeomVertexAnimationSpec::get_num_transforms(void) const;

899 22 get_indexed_transforms 4 1697 47 GeomVertexAnimationSpec::get_indexed_transforms 0 1 6 529
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::get_indexed_transforms
//       Access: Published
//  Description: This is only meaningful for animation_type
//               AT_hardware.  If true, it indicates that the format
//               uses indexed animation tables.  It is false if each
//               vertex will reference the first _num_transforms
//               table entries only.
////////////////////////////////////////////////////////////////////
72
inline bool GeomVertexAnimationSpec::get_indexed_transforms(void) const;

900 8 set_none 4 1697 33 GeomVertexAnimationSpec::set_none 0 1 7 313
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_none
//       Access: Published
//  Description: Specifies that no vertex animation is represented by
//               this spec.
////////////////////////////////////////////////////////////////////
52
inline void GeomVertexAnimationSpec::set_none(void);

901 9 set_panda 4 1697 34 GeomVertexAnimationSpec::set_panda 0 1 8 419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_panda
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               Panda.  This is the most general setting and can
//               handle any kind of vertex animation represented.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexAnimationSpec::set_panda(void);

902 12 set_hardware 4 1697 37 GeomVertexAnimationSpec::set_hardware 0 1 9 721
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::set_hardware
//       Access: Published
//  Description: Specifies that vertex animation is to be performed by
//               the graphics hardware (or at least by the graphics
//               backend API, which is actually still free to animate
//               the vertices on the CPU).
//
//               This is only legal if the graphics hardware can
//               support the specified limits on number of transforms
//               and/or indexed transforms.  Also, no current graphics
//               API's support morphing.
////////////////////////////////////////////////////////////////////
95
inline void GeomVertexAnimationSpec::set_hardware(int num_transforms, bool indexed_transforms);

903 6 output 4 1697 31 GeomVertexAnimationSpec::output 0 1 10 231
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexAnimationSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void GeomVertexAnimationSpec::output(ostream &out) const;

904 24 ~GeomVertexAnimationSpec 4 1697 49 GeomVertexAnimationSpec::~GeomVertexAnimationSpec 0 0 0
56
GeomVertexAnimationSpec::~GeomVertexAnimationSpec(void);

905 4 make 4 1698 18 InternalName::make 0 1 11 1495
// Filename: internalName.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: InternalName::make
//       Access: Published, Static
//  Description: The public interface for constructing an InternalName
//               pointer.  This will return a new InternalName
//               representing the indicated name, if this is the first
//               time the particular name has been requested; if the
//               name is already in use, it will return the existing
//               pointer.
//
//               If the string contains the '.' character, the string
//               will be divided at the dots and the so-defined
//               hierarchy of names will be registered.  This is
//               handled transparently.
////////////////////////////////////////////////////////////////////
93
static inline PointerTo< InternalName > InternalName::make(basic_string< char > const &name);

906 6 append 4 1698 20 InternalName::append 0 1 12 475
////////////////////////////////////////////////////////////////////
//     Function: InternalName::append
//       Access: Published
//  Description: Constructs a new InternalName based on this name,
//               with the indicated string following it.  This is a
//               cheaper way to construct a hierarchical name than
//               InternalName::make(parent->get_name() + ".basename").
////////////////////////////////////////////////////////////////////
85
PointerTo< InternalName > InternalName::append(basic_string< char > const &basename);

907 10 get_parent 4 1698 24 InternalName::get_parent 0 1 13 328
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_parent
//       Access: Published
//  Description: Return the parent of this InternalName.  All names
//               have a parent, except the root name.
////////////////////////////////////////////////////////////////////
58
inline InternalName *InternalName::get_parent(void) const;

908 8 get_name 4 1698 22 InternalName::get_name 0 1 14 320
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_name
//       Access: Published
//  Description: Returns the complete name represented by the
//               InternalName and all of its parents.
////////////////////////////////////////////////////////////////////
56
basic_string< char > InternalName::get_name(void) const;

909 12 get_basename 4 1698 26 InternalName::get_basename 0 1 15 404
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_basename
//       Access: Published
//  Description: Return the name represented by just this particular
//               InternalName object, ignoring its parents names.
//               This is everything after the rightmost dot.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &InternalName::get_basename(void) const;

910 13 find_ancestor 4 1698 27 InternalName::find_ancestor 0 1 16 584
////////////////////////////////////////////////////////////////////
//     Function: InternalName::find_ancestor
//       Access: Published
//  Description: Returns the index of the ancestor with the indicated
//               basename, or -1 if no ancestor has that basename.
//               Returns 0 if this name has the basename.
//
//               This index value may be passed to get_ancestor() or
//               get_net_basename() to retrieve more information about
//               the indicated name.
////////////////////////////////////////////////////////////////////
76
int InternalName::find_ancestor(basic_string< char > const &basename) const;

911 12 get_ancestor 4 1698 26 InternalName::get_ancestor 0 1 17 481
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_ancestor
//       Access: Published
//  Description: Returns the ancestor with the indicated index number.
//               0 is this name itself, 1 is the name's parent, 2 is
//               the parent's parent, and so on.  If there are not
//               enough ancestors, returns the root InternalName.
////////////////////////////////////////////////////////////////////
60
InternalName const *InternalName::get_ancestor(int n) const;

912 7 get_top 4 1698 21 InternalName::get_top 0 1 18 460
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_top
//       Access: Published
//  Description: Returns the oldest ancestor in the InternalName's
//               chain, not counting the root.  This will be the first
//               name in the string, e.g. "texcoord.foo.bar" will
//               return the InternalName "texcoord".
////////////////////////////////////////////////////////////////////
54
InternalName const *InternalName::get_top(void) const;

913 16 get_net_basename 4 1698 30 InternalName::get_net_basename 0 1 19 456
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_net_basename
//       Access: Published
//  Description: Returns the basename of this name prefixed by the
//               indicated number of ancestors.  0 is this name's
//               basename, 1 is parent.basename, 2 is
//               grandparent.parent.basename, and so on.
////////////////////////////////////////////////////////////////////
65
basic_string< char > InternalName::get_net_basename(int n) const;

914 6 output 4 1698 20 InternalName::output 0 1 20 220
////////////////////////////////////////////////////////////////////
//     Function: InternalName::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void InternalName::output(ostream &out) const;

915 8 get_root 4 1698 22 InternalName::get_root 0 1 21 474
// Some predefined built-in names.

////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_root
//       Access: Published, Static
//  Description: Returns the standard root InternalName.  This is the
//               root of all other InternalNames.  It has no name
//               itself, and it is the only InternalName with no
//               parent.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_root(void);

916 9 get_error 4 1698 23 InternalName::get_error 0 1 22 309
// Some predefined built-in names.

////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_error
//       Access: Published, Static
//  Description: Returns the standard InternalName "error".
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_error(void);

917 10 get_vertex 4 1698 24 InternalName::get_vertex 0 1 23 400
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_vertex
//       Access: Published, Static
//  Description: Returns the standard InternalName "vertex".  This is
//               the column header for the 3-d or 4-d vertex position
//               information for each vertex.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_vertex(void);

918 10 get_normal 4 1698 24 InternalName::get_normal 0 1 24 381
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_normal
//       Access: Published, Static
//  Description: Returns the standard InternalName "normal".  This is
//               the column header for the 3-d lighting normal for
//               each vertex.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_normal(void);

919 11 get_tangent 4 1698 25 InternalName::get_tangent 0 1 25 593
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent
//       Access: Published, Static
//  Description: Returns the standard InternalName "tangent".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to the normal and in the
//               direction of the U texture coordinate change.  It is
//               used for deriving bump maps.
////////////////////////////////////////////////////////////////////
72
static inline PointerTo< InternalName > InternalName::get_tangent(void);

920 16 get_tangent_name 4 1698 30 InternalName::get_tangent_name 0 1 26 457
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_tangent_name
//       Access: Published, Static
//  Description: Returns the InternalName "tangent.name", where name
//               is the supplied string.  This is the column header
//               for the tangent associated with the named texture
//               coordinate set.
////////////////////////////////////////////////////////////////////
105
static inline PointerTo< InternalName > InternalName::get_tangent_name(basic_string< char > const &name);

921 12 get_binormal 4 1698 26 InternalName::get_binormal 0 1 27 634
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal
//       Access: Published, Static
//  Description: Returns the standard InternalName "binormal".  This is
//               the column header for the tangent vector associated
//               with each vertex, which is a unit vector
//               usually perpendicular to both the normal and the
//               tangent, and in the direction of the V texture
//               coordinate change.  It is used for deriving bump
//               maps.
////////////////////////////////////////////////////////////////////
73
static inline PointerTo< InternalName > InternalName::get_binormal(void);

922 17 get_binormal_name 4 1698 31 InternalName::get_binormal_name 0 1 28 460
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_binormal_name
//       Access: Published, Static
//  Description: Returns the InternalName "binormal.name", where name
//               is the supplied string.  This is the column header
//               for the binormal associated with the named texture
//               coordinate set.
////////////////////////////////////////////////////////////////////
106
static inline PointerTo< InternalName > InternalName::get_binormal_name(basic_string< char > const &name);

923 12 get_texcoord 4 1698 26 InternalName::get_texcoord 0 1 29 517
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord
//       Access: Published, Static
//  Description: Returns the standard InternalName "texcoord".  This
//               is the column header for the default texture
//               coordinate set for each vertex.  It is also used for
//               identifying the default texture coordinate set in a
//               TextureStage.
////////////////////////////////////////////////////////////////////
73
static inline PointerTo< InternalName > InternalName::get_texcoord(void);

924 17 get_texcoord_name 4 1698 31 InternalName::get_texcoord_name 0 1 30 548
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_texcoord_name
//       Access: Published, Static
//  Description: Returns the InternalName "texcoord.name", where name
//               is the supplied string.  This is the column header
//               for the named texture coordinate set for each vertex.
//               It is also used for identifying the named texture
//               coordinate set in a TextureStage.
////////////////////////////////////////////////////////////////////
106
static inline PointerTo< InternalName > InternalName::get_texcoord_name(basic_string< char > const &name);

925 9 get_color 4 1698 23 InternalName::get_color 0 1 31 383
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_color
//       Access: Published, Static
//  Description: Returns the standard InternalName "color".  This is
//               the column header for the 4-component color value for
//               each vertex.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_color(void);

926 10 get_rotate 4 1698 24 InternalName::get_rotate 0 1 32 500
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_rotate
//       Access: Published, Static
//  Description: Returns the standard InternalName "rotate".  This is
//               the column header for the floating-point rotate
//               value, which represents a number of degrees
//               counter-clockwise to rotate each point or point
//               sprite.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_rotate(void);

927 8 get_size 4 1698 22 InternalName::get_size 0 1 33 505
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_size
//       Access: Published, Static
//  Description: Returns the standard InternalName "size".  This is
//               the column header for the floating-point size value,
//               which overrides the thickness parameter of the
//               RenderModeAttrib on a per-vertex (e.g. per-point)
//               basis.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_size(void);

928 16 get_aspect_ratio 4 1698 30 InternalName::get_aspect_ratio 0 1 34 535
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_aspect_ratio
//       Access: Published, Static
//  Description: Returns the standard InternalName "aspect_ratio".
//               This is the column header for the floating-point
//               aspect ratio value, which is used to define
//               non-square points.  This number is the ratio x / y,
//               where y is the point size (above).
////////////////////////////////////////////////////////////////////
77
static inline PointerTo< InternalName > InternalName::get_aspect_ratio(void);

929 19 get_transform_blend 4 1698 33 InternalName::get_transform_blend 0 1 35 553
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_blend
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_blend".
//               This is the column header for the integer
//               transform_blend index, which is used to define vertex
//               animation on the CPU by indexing to a particular
//               vertex weighting from the TransformBlendTable.
////////////////////////////////////////////////////////////////////
80
static inline PointerTo< InternalName > InternalName::get_transform_blend(void);

930 20 get_transform_weight 4 1698 34 InternalName::get_transform_weight 0 1 36 823
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_weight
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_weight".
//               This is the column header for the n-component
//               transform_weight value, which is used in conjuntion
//               with "transform_index" to define vertex animation on
//               the graphics card.  The transform_weight value
//               specifies the weight of the nth transform.  By
//               convention, there are 1 fewer weight values than
//               transforms, since the weights are assumed to sum to 1
//               (and the last value is therefore implicit).
////////////////////////////////////////////////////////////////////
81
static inline PointerTo< InternalName > InternalName::get_transform_weight(void);

931 19 get_transform_index 4 1698 33 InternalName::get_transform_index 0 1 37 795
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_transform_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "transform_index".
//               This is the column header for the n-component
//               transform_index value, which is used in conjuntion
//               with "transform_weight" to define vertex animation on
//               the graphics card.  The transform_index value
//               specifies the nth transform, by lookup in the
//               TransformTable.  The transform_index column may be
//               omitted, in which case the nth transform is the nth
//               entry in the table.
////////////////////////////////////////////////////////////////////
80
static inline PointerTo< InternalName > InternalName::get_transform_index(void);

932 9 get_morph 4 1698 23 InternalName::get_morph 0 1 38 655
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_morph
//       Access: Published, Static
//  Description: Returns an InternalName derived from the given base
//               column name and the given slider name, which is the
//               column header for the offset vector that should be
//               applied to the base column name when the named morph
//               slider is engaged.
//
//               Each morph slider requires a set of n morph columns,
//               one for each base column it applies to.
////////////////////////////////////////////////////////////////////
122
static inline PointerTo< InternalName > InternalName::get_morph(InternalName *column, basic_string< char > const &slider);

933 9 get_index 4 1698 23 InternalName::get_index 0 1 39 515
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_index
//       Access: Published, Static
//  Description: Returns the standard InternalName "index".  This is
//               the column header for the integer vertex index.  It
//               is not used in the vertex data itself, but is used in
//               the GeomPrimitive structure to index into the vertex
//               data.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_index(void);

934 9 get_world 4 1698 23 InternalName::get_world 0 1 40 342
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_world
//       Access: Published, Static
//  Description: Returns the standard InternalName "world".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_world(void);

935 10 get_camera 4 1698 24 InternalName::get_camera 0 1 41 344
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_camera
//       Access: Published, Static
//  Description: Returns the standard InternalName "camera".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
71
static inline PointerTo< InternalName > InternalName::get_camera(void);

936 9 get_model 4 1698 23 InternalName::get_model 0 1 42 342
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_model
//       Access: Published, Static
//  Description: Returns the standard InternalName "model".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
70
static inline PointerTo< InternalName > InternalName::get_model(void);

937 8 get_view 4 1698 22 InternalName::get_view 0 1 43 340
////////////////////////////////////////////////////////////////////
//     Function: InternalName::get_view
//       Access: Published, Static
//  Description: Returns the standard InternalName "view".  This is
//               used as a keyword in the shader subsystem.
////////////////////////////////////////////////////////////////////
69
static inline PointerTo< InternalName > InternalName::get_view(void);

938 14 get_class_type 4 1698 28 InternalName::get_class_type 0 1 44 0
53
static TypeHandle InternalName::get_class_type(void);

939 16 GeomVertexColumn 4 1700 34 GeomVertexColumn::GeomVertexColumn 0 2 45 46 1469
// Filename: geomVertexColumn.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Default Constructor
//       Access: Private
//  Description: Creates an invalid column.  Used on when constructing
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
160
inline GeomVertexColumn::GeomVertexColumn(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start);

940 10 operator = 4 1700 28 GeomVertexColumn::operator = 0 1 47 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
void GeomVertexColumn::operator =(GeomVertexColumn const &copy);

941 17 ~GeomVertexColumn 4 1700 35 GeomVertexColumn::~GeomVertexColumn 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexColumn::~GeomVertexColumn(void);

942 8 get_name 4 1700 26 GeomVertexColumn::get_name 0 1 48 541
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_name
//       Access: Published
//  Description: Returns the name of this particular data field,
//               e.g. "vertex" or "normal".  The name may be a
//               user-defined string, or it may be one of the standard
//               system-defined field types.  Only the system-defined
//               field types are used for the actual rendering.
////////////////////////////////////////////////////////////////////
60
inline InternalName *GeomVertexColumn::get_name(void) const;

943 18 get_num_components 4 1700 36 GeomVertexColumn::get_num_components 0 1 49 464
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_components
//       Access: Published
//  Description: Returns the number of components of the column:
//               the number of instances of the NumericType in each
//               element.  This is usually, but not always, the same
//               thing as get_num_values().
////////////////////////////////////////////////////////////////////
60
inline int GeomVertexColumn::get_num_components(void) const;

944 14 get_num_values 4 1700 32 GeomVertexColumn::get_num_values 0 1 50 648
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_num_values
//       Access: Published
//  Description: Returns the number of numeric values of the column:
//               the number of distinct numeric values that go into
//               each element.  This is usually, but not always, the
//               same thing as get_num_components(); the difference is
//               in the case of a composite numeric type like
//               NT_packed_dcba, which has four numeric values per
//               component.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexColumn::get_num_values(void) const;

945 16 get_numeric_type 4 1700 34 GeomVertexColumn::get_numeric_type 0 1 51 319
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_numeric_type
//       Access: Published
//  Description: Returns the token representing the numeric type of
//               the data storage.
////////////////////////////////////////////////////////////////////
77
inline GeomEnums::NumericType GeomVertexColumn::get_numeric_type(void) const;

946 12 get_contents 4 1700 30 GeomVertexColumn::get_contents 0 1 52 319
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_contents
//       Access: Published
//  Description: Returns the token representing the semantic meaning of
//               the stored value.
////////////////////////////////////////////////////////////////////
70
inline GeomEnums::Contents GeomVertexColumn::get_contents(void) const;

947 9 get_start 4 1700 27 GeomVertexColumn::get_start 0 1 53 392
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_start
//       Access: Published
//  Description: Returns the byte within the array record at which
//               this column starts.  This can be set to non-zero
//               to implement interleaved arrays.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexColumn::get_start(void) const;

948 19 get_component_bytes 4 1700 37 GeomVertexColumn::get_component_bytes 0 1 54 351
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_component_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each component
//               (that is, by one element of the numeric type).
////////////////////////////////////////////////////////////////////
61
inline int GeomVertexColumn::get_component_bytes(void) const;

949 15 get_total_bytes 4 1700 33 GeomVertexColumn::get_total_bytes 0 1 55 347
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::get_total_bytes
//       Access: Published
//  Description: Returns the number of bytes used by each element of
//               the column: component_bytes * num_components.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexColumn::get_total_bytes(void) const;

950 21 has_homogeneous_coord 4 1700 39 GeomVertexColumn::has_homogeneous_coord 0 1 56 727
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::has_homogeneous_coord
//       Access: Published
//  Description: Returns true if this Contents type is one that
//               includes a homogeneous coordinate in the fourth
//               component, or false otherwise.  If this is true,
//               correct operation on the vertex data may require
//               scaling by the homogeneous coordinate from time to
//               time (but in general this is handled automatically if
//               you use the 3-component or smaller forms of
//               get_data() and set_data()).
////////////////////////////////////////////////////////////////////
64
inline bool GeomVertexColumn::has_homogeneous_coord(void) const;

951 13 overlaps_with 4 1700 31 GeomVertexColumn::overlaps_with 0 1 57 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::overlaps_with
//       Access: Published
//  Description: Returns true if this column overlaps with any of
//               the bytes in the indicated range, false if it does
//               not.
////////////////////////////////////////////////////////////////////
81
inline bool GeomVertexColumn::overlaps_with(int start_byte, int num_bytes) const;

952 22 is_bytewise_equivalent 4 1700 40 GeomVertexColumn::is_bytewise_equivalent 0 1 58 419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::is_bytewise_equivalent
//       Access: Published
//  Description: Returns true if the data store of this column is
//               exactly the same as that of the other, irrespective
//               of name or start position within the record.
////////////////////////////////////////////////////////////////////
90
inline bool GeomVertexColumn::is_bytewise_equivalent(GeomVertexColumn const &other) const;

953 6 output 4 1700 24 GeomVertexColumn::output 0 1 59 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexColumn::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexColumn::output(ostream &out) const;

954 37 upcast_to_TypedWritableReferenceCount 12 1701 60 GeomVertexArrayFormat::upcast_to_TypedWritableReferenceCount 0 1 89 64
upcast from GeomVertexArrayFormat to TypedWritableReferenceCount
96
TypedWritableReferenceCount *GeomVertexArrayFormat::upcast_to_TypedWritableReferenceCount(void);

955 33 downcast_to_GeomVertexArrayFormat 12 1699 62 TypedWritableReferenceCount::downcast_to_GeomVertexArrayFormat 0 1 90 66
downcast from TypedWritableReferenceCount to GeomVertexArrayFormat
92
GeomVertexArrayFormat *TypedWritableReferenceCount::downcast_to_GeomVertexArrayFormat(void);

956 19 upcast_to_GeomEnums 12 1701 42 GeomVertexArrayFormat::upcast_to_GeomEnums 0 1 91 46
upcast from GeomVertexArrayFormat to GeomEnums
60
GeomEnums *GeomVertexArrayFormat::upcast_to_GeomEnums(void);

957 33 downcast_to_GeomVertexArrayFormat 12 1689 44 GeomEnums::downcast_to_GeomVertexArrayFormat 0 1 92 48
downcast from GeomEnums to GeomVertexArrayFormat
74
GeomVertexArrayFormat *GeomEnums::downcast_to_GeomVertexArrayFormat(void);

958 21 GeomVertexArrayFormat 4 1701 44 GeomVertexArrayFormat::GeomVertexArrayFormat 0 6 60 61 62 63 64 65 1419
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
GeomVertexArrayFormat::GeomVertexArrayFormat(void);

959 10 operator = 4 1701 33 GeomVertexArrayFormat::operator = 0 1 66 247
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
void GeomVertexArrayFormat::operator =(GeomVertexArrayFormat const &copy);

960 22 ~GeomVertexArrayFormat 4 1701 45 GeomVertexArrayFormat::~GeomVertexArrayFormat 0 0 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
60
virtual GeomVertexArrayFormat::~GeomVertexArrayFormat(void);

961 13 is_registered 4 1701 36 GeomVertexArrayFormat::is_registered 0 1 67 1153
// Filename: geomVertexArrayFormat.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
////////////////////////////////////////////////////////////////////
61
inline bool GeomVertexArrayFormat::is_registered(void) const;

962 15 register_format 4 1701 38 GeomVertexArrayFormat::register_format 0 1 68 774
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This is similar to
//               GeomVertexFormat::register_format(), except that you
//               generally need not call it explicitly.  Calling
//               GeomVertexFormat::register_format() automatically
//               registers all of the nested array formats.
////////////////////////////////////////////////////////////////////
130
static inline ConstPointerTo< GeomVertexArrayFormat > GeomVertexArrayFormat::register_format(GeomVertexArrayFormat const *format);

963 10 get_stride 4 1701 33 GeomVertexArrayFormat::get_stride 0 1 69 322
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_stride
//       Access: Published
//  Description: Returns the total number of bytes reserved in the
//               array for each vertex.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayFormat::get_stride(void) const;

964 10 set_stride 4 1701 33 GeomVertexArrayFormat::set_stride 0 1 70 322
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::set_stride
//       Access: Published
//  Description: Changes the total number of bytes reserved in the
//               array for each vertex.
////////////////////////////////////////////////////////////////////
58
inline void GeomVertexArrayFormat::set_stride(int stride);

965 15 get_total_bytes 4 1701 38 GeomVertexArrayFormat::get_total_bytes 0 1 71 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_total_bytes
//       Access: Published
//  Description: Returns the total number of bytes used by the data
//               types within the format, including gaps between
//               elements.
////////////////////////////////////////////////////////////////////
62
inline int GeomVertexArrayFormat::get_total_bytes(void) const;

966 10 get_pad_to 4 1701 33 GeomVertexArrayFormat::get_pad_to 0 1 72 501
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_pad_to
//       Access: Published
//  Description: Returns the byte divisor to which the data record
//               must be padded to meet hardware limitations.  For
//               instance, if this is 4, the stride will be
//               automatically rounded up to the next multiple of 4
//               bytes.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayFormat::get_pad_to(void) const;

967 10 add_column 4 1701 33 GeomVertexArrayFormat::add_column 0 3 73 74 75 1461
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               The return value is the index number of the new data
//               type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::add_column
//       Access: Published
//  Description: Adds a new column to the specification.  This is a
//               table of per-vertex floating-point numbers such as
//               "vertex" or "normal"; you must specify where in each
//               record the table starts, and how many components
//               (dimensions) exist per vertex.
//
//               Adding a column with the same name as a previous
//               type, or that overlaps with one or more previous
//               types, quietly removes the previous type(s).
//
//               The return value is the index number of the new data
//               type.
////////////////////////////////////////////////////////////////////
163
int GeomVertexArrayFormat::add_column(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start = (-1));

968 13 remove_column 4 1701 36 GeomVertexArrayFormat::remove_column 0 1 76 346
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::remove_column
//       Access: Published
//  Description: Removes the column with the indicated name, if
//               any.  This leaves a gap in the byte structure.
////////////////////////////////////////////////////////////////////
68
void GeomVertexArrayFormat::remove_column(InternalName const *name);

969 13 clear_columns 4 1701 36 GeomVertexArrayFormat::clear_columns 0 1 77 343
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::clear_columns
//       Access: Published
//  Description: Removes all columns previously added, sets the
//               stride to zero, and prepares to start over.
////////////////////////////////////////////////////////////////////
48
void GeomVertexArrayFormat::clear_columns(void);

970 15 get_num_columns 4 1701 38 GeomVertexArrayFormat::get_num_columns 0 1 78 308
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_num_columns
//       Access: Published
//  Description: Returns the number of different columns in the
//               array.
////////////////////////////////////////////////////////////////////
62
inline int GeomVertexArrayFormat::get_num_columns(void) const;

971 10 get_column 4 1701 33 GeomVertexArrayFormat::get_column 0 3 79 80 81 984
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the array.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::get_column
//       Access: Published
//  Description: Returns the first specification that overlaps with
//               any of the indicated bytes in the range, or NULL if
//               none do.
////////////////////////////////////////////////////////////////////
78
inline GeomVertexColumn const *GeomVertexArrayFormat::get_column(int i) const;

972 10 has_column 4 1701 33 GeomVertexArrayFormat::has_column 0 1 82 314
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.
////////////////////////////////////////////////////////////////////
78
inline bool GeomVertexArrayFormat::has_column(InternalName const *name) const;

973 17 is_data_subset_of 4 1701 40 GeomVertexArrayFormat::is_data_subset_of 0 1 83 614
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::is_data_subset_of
//       Access: Published
//  Description: Returns true if all of the fields in this array
//               format are also present and equivalent in the other
//               array format, and in the same byte positions, and the
//               stride is the same.  That is, true if this format can
//               share the same data pointer as the other format (with
//               possibly some unused gaps).
////////////////////////////////////////////////////////////////////
88
bool GeomVertexArrayFormat::is_data_subset_of(GeomVertexArrayFormat const &other) const;

974 6 output 4 1701 29 GeomVertexArrayFormat::output 0 1 84 229
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void GeomVertexArrayFormat::output(ostream &out) const;

975 5 write 4 1701 28 GeomVertexArrayFormat::write 0 2 85 86 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
void GeomVertexArrayFormat::write(ostream &out, int indent_level = (0)) const;

976 15 write_with_data 4 1701 38 GeomVertexArrayFormat::write_with_data 0 1 87 238
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayFormat::write_with_data
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
121
void GeomVertexArrayFormat::write_with_data(ostream &out, int indent_level, GeomVertexArrayData const *array_data) const;

977 14 get_class_type 4 1701 37 GeomVertexArrayFormat::get_class_type 0 1 88 0
62
static TypeHandle GeomVertexArrayFormat::get_class_type(void);

978 37 upcast_to_TypedWritableReferenceCount 12 1702 55 GeomVertexFormat::upcast_to_TypedWritableReferenceCount 0 1 146 59
upcast from GeomVertexFormat to TypedWritableReferenceCount
91
TypedWritableReferenceCount *GeomVertexFormat::upcast_to_TypedWritableReferenceCount(void);

979 28 downcast_to_GeomVertexFormat 12 1699 57 TypedWritableReferenceCount::downcast_to_GeomVertexFormat 0 1 147 61
downcast from TypedWritableReferenceCount to GeomVertexFormat
82
GeomVertexFormat *TypedWritableReferenceCount::downcast_to_GeomVertexFormat(void);

980 19 upcast_to_GeomEnums 12 1702 37 GeomVertexFormat::upcast_to_GeomEnums 0 1 148 41
upcast from GeomVertexFormat to GeomEnums
55
GeomEnums *GeomVertexFormat::upcast_to_GeomEnums(void);

981 28 downcast_to_GeomVertexFormat 12 1689 39 GeomEnums::downcast_to_GeomVertexFormat 0 1 149 43
downcast from GeomEnums to GeomVertexFormat
64
GeomVertexFormat *GeomEnums::downcast_to_GeomVertexFormat(void);

982 16 GeomVertexFormat 4 1702 34 GeomVertexFormat::GeomVertexFormat 0 3 93 94 95 696
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
GeomVertexFormat::GeomVertexFormat(void);

983 10 operator = 4 1702 28 GeomVertexFormat::operator = 0 1 96 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
void GeomVertexFormat::operator =(GeomVertexFormat const &copy);

984 17 ~GeomVertexFormat 4 1702 35 GeomVertexFormat::~GeomVertexFormat 0 0 237
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
50
virtual GeomVertexFormat::~GeomVertexFormat(void);

985 13 is_registered 4 1702 31 GeomVertexFormat::is_registered 0 1 97 463
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::is_registered
//       Access: Published
//  Description: Returns true if this format has been registered,
//               false if it has not.  It may not be used for a Geom
//               until it has been registered, but once registered, it
//               may no longer be modified.
////////////////////////////////////////////////////////////////////
56
inline bool GeomVertexFormat::is_registered(void) const;

986 15 register_format 4 1702 33 GeomVertexFormat::register_format 0 2 98 99 1213
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: Adds the indicated format to the registry, if there
//               is not an equivalent format already there; in either
//               case, returns the pointer to the equivalent format
//               now in the registry.
//
//               This must be called before a format may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::register_format
//       Access: Published, Static
//  Description: This flavor of register_format() implicitly creates a
//               one-array vertex format from the array definition.
////////////////////////////////////////////////////////////////////
115
static inline ConstPointerTo< GeomVertexFormat > GeomVertexFormat::register_format(GeomVertexFormat const *format);

987 13 get_animation 4 1702 31 GeomVertexFormat::get_animation 0 1 100 351
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_animation
//       Access: Published
//  Description: Returns the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
////////////////////////////////////////////////////////////////////
82
inline GeomVertexAnimationSpec const &GeomVertexFormat::get_animation(void) const;

988 13 set_animation 4 1702 31 GeomVertexFormat::set_animation 0 1 101 555
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_animation
//       Access: Published
//  Description: Resets the GeomVertexAnimationSpec that indicates
//               how this format's vertices are set up for animation.
//               You should also, of course, change the columns in the
//               tables accordingly.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
86
inline void GeomVertexFormat::set_animation(GeomVertexAnimationSpec const &animation);

989 24 get_post_animated_format 4 1702 42 GeomVertexFormat::get_post_animated_format 0 1 102 646
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_post_animated_format
//       Access: Published
//  Description: Returns a suitable vertex format for sending the
//               animated vertices to the graphics backend.  This is
//               the same format as the source format, with the
//               CPU-animation data elements removed.
//
//               This may only be called after the format has been
//               registered.  The return value will have been already
//               registered.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< GeomVertexFormat > GeomVertexFormat::get_post_animated_format(void) const;

990 16 get_union_format 4 1702 34 GeomVertexFormat::get_union_format 0 1 103 791
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_union_format
//       Access: Published
//  Description: Returns a new GeomVertexFormat that includes all of
//               the columns defined in either this GeomVertexFormat
//               or the other one.  If any column is defined in both
//               formats with different sizes (for instance, texcoord2
//               vs. texcoord3), the new format will include the
//               larger of the two definitions.
//
//               This may only be called after both source formats
//               have been registered.  The return value will also
//               have been already registered.
////////////////////////////////////////////////////////////////////
107
ConstPointerTo< GeomVertexFormat > GeomVertexFormat::get_union_format(GeomVertexFormat const *other) const;

991 14 get_num_arrays 4 1702 32 GeomVertexFormat::get_num_arrays 0 1 104 506
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays required by
//               the format.  If the array data is completely
//               interleaved, this will be 1; if it is completely
//               parallel, this will be the same as the number of data
//               types.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_arrays(void) const;

992 9 get_array 4 1702 27 GeomVertexFormat::get_array 0 1 105 304
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array
//       Access: Published
//  Description: Returns the description of the nth array used by the
//               format.
////////////////////////////////////////////////////////////////////
81
inline GeomVertexArrayFormat const *GeomVertexFormat::get_array(int array) const;

993 12 modify_array 4 1702 30 GeomVertexFormat::modify_array 0 1 106 470
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated array.
//               This means duplicating it if it is shared or
//               registered.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
65
GeomVertexArrayFormat *GeomVertexFormat::modify_array(int array);

994 9 set_array 4 1702 27 GeomVertexFormat::set_array 0 1 107 371
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::set_array
//       Access: Published
//  Description: Replaces the definition of the indicated array.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
81
void GeomVertexFormat::set_array(int array, GeomVertexArrayFormat const *format);

995 12 remove_array 4 1702 30 GeomVertexFormat::remove_array 0 1 108 365
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_array
//       Access: Published
//  Description: Removes the nth array from the format.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
47
void GeomVertexFormat::remove_array(int array);

996 9 add_array 4 1702 27 GeomVertexFormat::add_array 0 1 109 534
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::add_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays included within this vertex format definition.
//               The return value is the index number of the new
//               array.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
75
int GeomVertexFormat::add_array(GeomVertexArrayFormat const *array_format);

997 12 insert_array 4 1702 30 GeomVertexFormat::insert_array 0 1 110 570
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::insert_array
//       Access: Published
//  Description: Adds the indicated array definition to the list of
//               arrays at the indicated position.  This works just
//               like add_array(), except that you can specify which
//               array index the new array should have.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
90
void GeomVertexFormat::insert_array(int array, GeomVertexArrayFormat const *array_format);

998 12 clear_arrays 4 1702 30 GeomVertexFormat::clear_arrays 0 1 111 413
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::clear_arrays
//       Access: Published
//  Description: Removes all of the array definitions from the format
//               and starts over.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
42
void GeomVertexFormat::clear_arrays(void);

999 15 get_num_columns 4 1702 33 GeomVertexFormat::get_num_columns 0 1 112 336
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_columns
//       Access: Published
//  Description: Returns the total number of different columns in
//               the specification, across all arrays.
////////////////////////////////////////////////////////////////////
50
int GeomVertexFormat::get_num_columns(void) const;

1000 14 get_array_with 4 1702 32 GeomVertexFormat::get_array_with 0 2 113 114 1372
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               ith column.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_array_with
//       Access: Published
//  Description: Returns the index number of the array with the
//               indicated column, or -1 if no arrays contained
//               that name.
//
//               The return value can be passed to get_array_format()
//               to get the format of the array.  It may also be
//               passed to GeomVertexData::get_array_data() or
//               get_data() or set_data() to manipulate the actual
//               array data.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
50
int GeomVertexFormat::get_array_with(int i) const;

1001 10 get_column 4 1702 28 GeomVertexFormat::get_column 0 2 115 116 850
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the ith column of the specification,
//               across all arrays.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_column
//       Access: Published
//  Description: Returns the specification with the indicated name, or
//               NULL if the name is not used.  Use get_array_with()
//               to determine which array this column is associated
//               with.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
66
GeomVertexColumn const *GeomVertexFormat::get_column(int i) const;

1002 10 has_column 4 1702 28 GeomVertexFormat::has_column 0 1 117 310
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::has_column
//       Access: Published
//  Description: Returns true if the format has the named column,
//               false otherwise.
////////////////////////////////////////////////////////////////////
73
inline bool GeomVertexFormat::has_column(InternalName const *name) const;

1003 13 remove_column 4 1702 31 GeomVertexFormat::remove_column 0 1 118 663
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::remove_column
//       Access: Published
//  Description: Removes the named column from the format, from
//               whichever array it exists in.  If there are other
//               columns remaining in the array, the array is left
//               with a gap where the column used to be; if this
//               was the only column in the array, the array is
//               removed.
//
//               This may not be called once the format has been
//               registered.
////////////////////////////////////////////////////////////////////
63
void GeomVertexFormat::remove_column(InternalName const *name);

1004 14 get_num_points 4 1702 32 GeomVertexFormat::get_num_points 0 1 119 427
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_points
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent points in space.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_points(void) const;

1005 9 get_point 4 1702 27 GeomVertexFormat::get_point 0 1 120 497
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_point
//       Access: Published
//  Description: Returns the name of the nth point column.  This
//               represents a point in space, which should be
//               transformed by any spatial transform matrix.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
68
inline InternalName const *GeomVertexFormat::get_point(int n) const;

1006 15 get_num_vectors 4 1702 33 GeomVertexFormat::get_num_vectors 0 1 121 432
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_vectors
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent directional vectors.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexFormat::get_num_vectors(void) const;

1007 10 get_vector 4 1702 28 GeomVertexFormat::get_vector 0 1 122 532
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_vector
//       Access: Published
//  Description: Returns the name of the nth vector column.  This
//               represents a directional vector, which should be
//               transformed by any spatial transform matrix as a
//               vector.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
69
inline InternalName const *GeomVertexFormat::get_vector(int n) const;

1008 17 get_num_texcoords 4 1702 35 GeomVertexFormat::get_num_texcoords 0 1 123 434
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_texcoords
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent texture coordinates.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
59
inline int GeomVertexFormat::get_num_texcoords(void) const;

1009 12 get_texcoord 4 1702 30 GeomVertexFormat::get_texcoord 0 1 124 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_texcoord
//       Access: Published
//  Description: Returns the name of the nth texcoord column.  This
//               represents a texture coordinate.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
71
inline InternalName const *GeomVertexFormat::get_texcoord(int n) const;

1010 14 get_num_morphs 4 1702 32 GeomVertexFormat::get_num_morphs 0 1 125 424
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_num_morphs
//       Access: Published
//  Description: Returns the number of columns within the format
//               that represent morph deltas.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
56
inline int GeomVertexFormat::get_num_morphs(void) const;

1011 16 get_morph_slider 4 1702 34 GeomVertexFormat::get_morph_slider 0 1 126 587
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_slider
//       Access: Published
//  Description: Returns the slider name associated with the nth morph
//               column.  This is the name of the slider that will
//               control the morph, and should be defined within the
//               SliderTable associated with the GeomVertexData.
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
75
inline InternalName const *GeomVertexFormat::get_morph_slider(int n) const;

1012 14 get_morph_base 4 1702 32 GeomVertexFormat::get_morph_base 0 1 127 562
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_base
//       Access: Published
//  Description: Returns the name of the base column that the nth
//               morph modifies.  This column will also be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
73
inline InternalName const *GeomVertexFormat::get_morph_base(int n) const;

1013 15 get_morph_delta 4 1702 33 GeomVertexFormat::get_morph_delta 0 1 128 685
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_morph_delta
//       Access: Published
//  Description: Returns the name of the column that defines the
//               nth morph.  This contains the delta offsets that are
//               to be applied to the column defined by
//               get_morph_base().  This column will be defined
//               within the format, and can be retrieved via
//               get_array_with() and/or get_column().
//
//               This may only be called after the format has been
//               registered.
////////////////////////////////////////////////////////////////////
74
inline InternalName const *GeomVertexFormat::get_morph_delta(int n) const;

1014 6 output 4 1702 24 GeomVertexFormat::output 0 1 129 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexFormat::output(ostream &out) const;

1015 5 write 4 1702 23 GeomVertexFormat::write 0 2 130 131 223
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
void GeomVertexFormat::write(ostream &out, int indent_level = (0)) const;

1016 15 write_with_data 4 1702 33 GeomVertexFormat::write_with_data 0 1 132 233
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::write_with_data
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
105
void GeomVertexFormat::write_with_data(ostream &out, int indent_level, GeomVertexData const *data) const;

1017 6 get_v3 4 1702 24 GeomVertexFormat::get_v3 0 1 133 529
// Some standard vertex formats.  No particular requirement to use
// one of these, but the DirectX renderers can use these formats
// directly, whereas any other format will have to be converted
// first.

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3
//       Access: Published, Static
//  Description: Returns a standard vertex format with just a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
69
static inline GeomVertexFormat const *GeomVertexFormat::get_v3(void);

1018 8 get_v3n3 4 1702 26 GeomVertexFormat::get_v3n3 0 1 134 551
// Some standard vertex formats.  No particular requirement to use
// one of these, but the DirectX renderers can use these formats
// directly, whereas any other format will have to be converted
// first.

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 3-component
//               normal and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3(void);

1019 8 get_v3t2 4 1702 26 GeomVertexFormat::get_v3t2 0 1 135 378
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3t2(void);

1020 10 get_v3n3t2 4 1702 28 GeomVertexFormat::get_v3n3t2 0 1 136 403
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 3-component normal, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3t2(void);

1021 8 get_v3cp 4 1702 26 GeomVertexFormat::get_v3cp 0 1 137 562
// These formats, with the DirectX-style packed color, are not
// supported directly by OpenGL.  If you use them, the
// GLGraphicsStateGuardian will automatically convert to OpenGL
// form (with a small runtime overhead).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3cp(void);

1022 10 get_v3cpt2 4 1702 28 GeomVertexFormat::get_v3cpt2 0 1 138 621
// These formats, with the DirectX-style packed color, are not
// supported directly by OpenGL.  If you use them, the
// GLGraphicsStateGuardian will automatically convert to OpenGL
// form (with a small runtime overhead).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3cpt2(void);

1023 10 get_v3n3cp 4 1702 28 GeomVertexFormat::get_v3n3cp 0 1 139 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cp
//       Access: Published, Static
//  Description: Returns a standard vertex format with a packed
//               color, a 3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3cp(void);

1024 12 get_v3n3cpt2 4 1702 30 GeomVertexFormat::get_v3n3cpt2 0 1 140 438
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3cpt2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a packed color, a
//               3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
75
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3cpt2(void);

1025 8 get_v3c4 4 1702 26 GeomVertexFormat::get_v3c4 0 1 141 663
// These formats, with an OpenGL-style four-byte color, are not
// supported directly by DirectX.  If you use them, the
// DXGraphicsStateGuardian will automatically convert to DirectX
// form (with a larger runtime overhead, since DirectX8, and old
// DirectX9 drivers, require everything to be interleaved together).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color and a 3-component vertex position.
////////////////////////////////////////////////////////////////////
71
static inline GeomVertexFormat const *GeomVertexFormat::get_v3c4(void);

1026 10 get_v3c4t2 4 1702 28 GeomVertexFormat::get_v3c4t2 0 1 142 722
// These formats, with an OpenGL-style four-byte color, are not
// supported directly by DirectX.  If you use them, the
// DXGraphicsStateGuardian will automatically convert to DirectX
// form (with a larger runtime overhead, since DirectX8, and old
// DirectX9 drivers, require everything to be interleaved together).

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, and a
//               3-component vertex position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3c4t2(void);

1027 10 get_v3n3c4 4 1702 28 GeomVertexFormat::get_v3n3c4 0 1 143 385
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 4-component
//               color, a 3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
73
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3c4(void);

1028 12 get_v3n3c4t2 4 1702 30 GeomVertexFormat::get_v3n3c4t2 0 1 144 443
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexFormat::get_v3n3c4t2
//       Access: Published, Static
//  Description: Returns a standard vertex format with a 2-component
//               texture coordinate pair, a 4-component color, a
//               3-component normal, and a 3-component vertex
//               position.
////////////////////////////////////////////////////////////////////
75
static inline GeomVertexFormat const *GeomVertexFormat::get_v3n3c4t2(void);

1029 14 get_class_type 4 1702 32 GeomVertexFormat::get_class_type 0 1 145 0
57
static TypeHandle GeomVertexFormat::get_class_type(void);

1030 37 upcast_to_TypedWritableReferenceCount 12 1703 58 GeomVertexArrayData::upcast_to_TypedWritableReferenceCount 0 1 170 62
upcast from GeomVertexArrayData to TypedWritableReferenceCount
94
TypedWritableReferenceCount *GeomVertexArrayData::upcast_to_TypedWritableReferenceCount(void);

1031 31 downcast_to_GeomVertexArrayData 12 1699 60 TypedWritableReferenceCount::downcast_to_GeomVertexArrayData 0 1 171 64
downcast from TypedWritableReferenceCount to GeomVertexArrayData
88
GeomVertexArrayData *TypedWritableReferenceCount::downcast_to_GeomVertexArrayData(void);

1032 19 upcast_to_GeomEnums 12 1703 40 GeomVertexArrayData::upcast_to_GeomEnums 0 1 172 44
upcast from GeomVertexArrayData to GeomEnums
58
GeomEnums *GeomVertexArrayData::upcast_to_GeomEnums(void);

1033 31 downcast_to_GeomVertexArrayData 12 1689 42 GeomEnums::downcast_to_GeomVertexArrayData 0 1 173 46
downcast from GeomEnums to GeomVertexArrayData
70
GeomVertexArrayData *GeomEnums::downcast_to_GeomVertexArrayData(void);

1034 19 GeomVertexArrayData 4 1703 40 GeomVertexArrayData::GeomVertexArrayData 0 2 150 151 808
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Default Constructor
//       Access: Private
//  Description: Constructs an invalid object.  This is only used when
//               reading from the bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
117
GeomVertexArrayData::GeomVertexArrayData(GeomVertexArrayFormat const *array_format, GeomEnums::UsageHint usage_hint);

1035 10 operator = 4 1703 31 GeomVertexArrayData::operator = 0 1 152 490
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexArrayData
//               that is actively being used for rendering.
////////////////////////////////////////////////////////////////////
70
void GeomVertexArrayData::operator =(GeomVertexArrayData const &copy);

1036 20 ~GeomVertexArrayData 4 1703 41 GeomVertexArrayData::~GeomVertexArrayData 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual GeomVertexArrayData::~GeomVertexArrayData(void);

1037 12 operator new 4 1703 33 GeomVertexArrayData::operator new 0 1 153 0
66
inline void *GeomVertexArrayData::operator new(unsigned int size);

1038 15 operator delete 4 1703 36 GeomVertexArrayData::operator delete 0 0 0
60
inline void GeomVertexArrayData::operator delete(void *ptr);

1039 16 get_array_format 4 1703 37 GeomVertexArrayData::get_array_format 0 1 154 972
// Filename: geomVertexArrayData.I
// Created by:  drose (17Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_array_format
//       Access: Published
//  Description: Returns the format object that describes this array.
////////////////////////////////////////////////////////////////////
86
inline GeomVertexArrayFormat const *GeomVertexArrayData::get_array_format(void) const;

1040 14 get_usage_hint 4 1703 35 GeomVertexArrayData::get_usage_hint 0 1 155 409
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that describes to the
//               rendering backend how often the vertex data will be
//               modified and/or rendered.  See geomEnums.h.
////////////////////////////////////////////////////////////////////
76
inline GeomEnums::UsageHint GeomVertexArrayData::get_usage_hint(void) const;

1041 14 set_usage_hint 4 1703 35 GeomVertexArrayData::set_usage_hint 0 1 156 514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this array.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
74
void GeomVertexArrayData::set_usage_hint(GeomEnums::UsageHint usage_hint);

1042 10 has_column 4 1703 31 GeomVertexArrayData::has_column 0 1 157 404
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::has_column
//       Access: Published
//  Description: Returns true if the array has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
////////////////////////////////////////////////////////////////////
76
inline bool GeomVertexArrayData::has_column(InternalName const *name) const;

1043 12 get_num_rows 4 1703 33 GeomVertexArrayData::get_num_rows 0 1 158 454
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored in the array,
//               based on the number of bytes and the stride.  This
//               should be the same for all arrays within a given
//               GeomVertexData object.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexArrayData::get_num_rows(void) const;

1044 12 set_num_rows 4 1703 33 GeomVertexArrayData::set_num_rows 0 1 159 1072
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows.
//               Normally, you would not call this directly, since all
//               of the arrays in a particular GeomVertexData must
//               have the same number of rows; instead, call
//               GeomVertexData::set_num_rows().
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               The new vertex data is initialized to 0, including
//               the "color" column (but see
//               GeomVertexData::set_num_rows()).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
46
bool GeomVertexArrayData::set_num_rows(int n);

1045 10 clear_rows 4 1703 31 GeomVertexArrayData::clear_rows 0 1 160 329
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::clear_rows
//       Access: Published
//  Description: Removes all of the rows in the array.
//               Functionally equivalent to set_num_rows(0).
////////////////////////////////////////////////////////////////////
50
inline void GeomVertexArrayData::clear_rows(void);

1046 19 get_data_size_bytes 4 1703 40 GeomVertexArrayData::get_data_size_bytes 0 1 161 288
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the array.
////////////////////////////////////////////////////////////////////
64
inline int GeomVertexArrayData::get_data_size_bytes(void) const;

1047 12 get_modified 4 1703 33 GeomVertexArrayData::get_modified 0 1 162 377
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the array vertex data is
//               modified.
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq GeomVertexArrayData::get_modified(void) const;

1048 6 output 4 1703 27 GeomVertexArrayData::output 0 1 163 227
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void GeomVertexArrayData::output(ostream &out) const;

1049 5 write 4 1703 26 GeomVertexArrayData::write 0 2 164 165 226
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void GeomVertexArrayData::write(ostream &out, int indent_level = (0)) const;

1050 8 get_data 4 1703 29 GeomVertexArrayData::get_data 0 1 166 372
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::get_data
//       Access: Published
//  Description: Returns a const pointer to the actual vertex data,
//               for application code to directly examine (but not
//               modify).
////////////////////////////////////////////////////////////////////
86
inline ConstPointerToArray< unsigned char > GeomVertexArrayData::get_data(void) const;

1051 11 modify_data 4 1703 32 GeomVertexArrayData::modify_data 0 1 167 591
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::modify_data
//       Access: Published
//  Description: Returns a modifiable pointer to the actual vertex
//               array, so that application code may directly
//               manipulate it.  Use with caution.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
71
PointerToArray< unsigned char > GeomVertexArrayData::modify_data(void);

1052 8 set_data 4 1703 29 GeomVertexArrayData::set_data 0 1 168 502
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexArrayData::set_data
//       Access: Published
//  Description: Replaces the vertex data array with a completely new
//               array.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
78
void GeomVertexArrayData::set_data(ConstPointerToArray< unsigned char > data);

1053 14 get_class_type 4 1703 35 GeomVertexArrayData::get_class_type 0 1 169 0
60
static TypeHandle GeomVertexArrayData::get_class_type(void);

1054 12 set_max_size 4 1704 30 GeomCacheManager::set_max_size 0 1 174 1498
// Filename: geomCacheManager.I
// Created by:  drose (11Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::set_max_size
//       Access: Published
//  Description: Specifies the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  This limit is flexible, and may be
//               temporarily exceeded if many different Geoms are
//               pre-processed during the space of a single frame.
//
//               This is not a limit on the actual vertex data, which
//               is what it is; it is also not a limit on the amount
//               of memory used by the video driver or the system
//               graphics interface, which Panda has no control over.
////////////////////////////////////////////////////////////////////
63
inline void GeomCacheManager::set_max_size(int max_size) const;

1055 12 get_max_size 4 1704 30 GeomCacheManager::get_max_size 0 1 175 390
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_max_size
//       Access: Published
//  Description: Returns the maximum number of entries in the cache
//               for storing pre-processed data for rendering
//               vertices.  See set_max_size().
////////////////////////////////////////////////////////////////////
54
inline int GeomCacheManager::get_max_size(void) const;

1056 14 get_total_size 4 1704 32 GeomCacheManager::get_total_size 0 1 176 285
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_total_size
//       Access: Published
//  Description: Returns the number of entries currently in the cache.
////////////////////////////////////////////////////////////////////
56
inline int GeomCacheManager::get_total_size(void) const;

1057 14 get_global_ptr 4 1704 32 GeomCacheManager::get_global_ptr 0 1 177 281
////////////////////////////////////////////////////////////////////
//     Function: GeomCacheManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the global cache manager pointer.
////////////////////////////////////////////////////////////////////
64
static GeomCacheManager *GeomCacheManager::get_global_ptr(void);

1058 10 get_matrix 4 1705 27 VertexTransform::get_matrix 0 1 178 0
70
virtual void VertexTransform::get_matrix(LMatrix4f &matrix) const = 0;

1059 11 mult_matrix 4 1705 28 VertexTransform::mult_matrix 0 1 179 579
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::mult_matrix
//       Access: Published, Virtual
//  Description: Premultiplies this transform's matrix with the
//               indicated previous matrix, so that the result is the
//               net composition of the given transform with this
//               transform.  The result is stored in the parameter
//               "result", which should not be the same matrix as
//               previous.
////////////////////////////////////////////////////////////////////
94
virtual void VertexTransform::mult_matrix(LMatrix4f &result, LMatrix4f const &previous) const;

1060 17 accumulate_matrix 4 1705 34 VertexTransform::accumulate_matrix 0 1 180 477
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::accumulate_matrix
//       Access: Published, Virtual
//  Description: Adds the value of this transform's matrix, modified
//               by the indicated weight, into the indicated
//               accumulation matrix.  This is used to compute the
//               result of several blended transforms.
////////////////////////////////////////////////////////////////////
86
virtual void VertexTransform::accumulate_matrix(LMatrix4f &accum, float weight) const;

1061 12 get_modified 4 1705 29 VertexTransform::get_modified 0 1 181 1059
// Filename: vertexTransform.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_matrix() changes.
////////////////////////////////////////////////////////////////////
59
inline UpdateSeq VertexTransform::get_modified(void) const;

1062 6 output 4 1705 23 VertexTransform::output 0 1 182 232
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void VertexTransform::output(ostream &out) const;

1063 5 write 4 1705 22 VertexTransform::write 0 1 183 231
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
74
virtual void VertexTransform::write(ostream &out, int indent_level) const;

1064 17 get_next_modified 4 1705 34 VertexTransform::get_next_modified 0 1 184 765
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_next_modified
//       Access: Public, Static
//  Description: Returns a monotonically increasing sequence.  Each
//               time this is called, a new sequence number is
//               returned, higher than the previous value.
//
//               This is used to ensure that all
//               VertexTransform::get_modified() calls return an
//               increasing number in the same space, so that
//               TransformBlend::get_modified() is easy to determine.
//               It is similar to Geom::get_modified(), but it is in a
//               different space.
////////////////////////////////////////////////////////////////////
58
static UpdateSeq VertexTransform::get_next_modified(void);

1065 19 get_global_modified 4 1705 36 VertexTransform::get_global_modified 0 1 185 474
////////////////////////////////////////////////////////////////////
//     Function: VertexTransform::get_global_modified
//       Access: Published, Static
//  Description: Returns the currently highest
//               VertexTransform::get_modified() value in the world.
//               This can be used as a quick way to determine if any
//               VertexTransforms have changed value recently.
////////////////////////////////////////////////////////////////////
67
static inline UpdateSeq VertexTransform::get_global_modified(void);

1066 14 get_class_type 4 1705 31 VertexTransform::get_class_type 0 1 186 0
56
static TypeHandle VertexTransform::get_class_type(void);

1067 14 TransformTable 4 1706 30 TransformTable::TransformTable 0 2 187 188 461
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
TransformTable::TransformTable(void);

1068 10 operator = 4 1706 26 TransformTable::operator = 0 1 189 240
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void TransformTable::operator =(TransformTable const &copy);

1069 13 is_registered 4 1706 29 TransformTable::is_registered 0 1 190 1185
// Filename: transformTable.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of transforms in
//               a TransformTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
////////////////////////////////////////////////////////////////////
54
inline bool TransformTable::is_registered(void) const;

1070 14 register_table 4 1706 30 TransformTable::register_table 0 1 191 927
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::register_table
//       Access: Published, Static
//  Description: Registers a TransformTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a TransformTable may no longer be
//               modified (although the individual VertexTransform
//               objects may modify their reported transforms).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////
107
static inline ConstPointerTo< TransformTable > TransformTable::register_table(TransformTable const *table);

1071 18 get_num_transforms 4 1706 34 TransformTable::get_num_transforms 0 1 192 280
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms in the table.
////////////////////////////////////////////////////////////////////
58
inline int TransformTable::get_num_transforms(void) const;

1072 13 get_transform 4 1706 29 TransformTable::get_transform 0 1 193 268
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_transform
//       Access: Published
//  Description: Returns the nth transform in the table.
////////////////////////////////////////////////////////////////////
73
inline VertexTransform const *TransformTable::get_transform(int n) const;

1073 12 get_modified 4 1706 28 TransformTable::get_modified 0 1 194 569
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexTransforms in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexTransform
//               changes.)
////////////////////////////////////////////////////////////////////
58
inline UpdateSeq TransformTable::get_modified(void) const;

1074 13 set_transform 4 1706 29 TransformTable::set_transform 0 1 195 310
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::set_transform
//       Access: Published
//  Description: Replaces the nth transform.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
76
void TransformTable::set_transform(int n, VertexTransform const *transform);

1075 16 remove_transform 4 1706 32 TransformTable::remove_transform 0 1 196 312
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::remove_transform
//       Access: Published
//  Description: Removes the nth transform.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
45
void TransformTable::remove_transform(int n);

1076 13 add_transform 4 1706 29 TransformTable::add_transform 0 1 197 562
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::add_transform
//       Access: Published
//  Description: Adds a new transform to the table and returns the
//               index number of the new transform.  Only valid for
//               unregistered tables.
//
//               This does not automatically uniquify the pointer; if
//               the transform is already present in the table, it
//               will be added twice.
////////////////////////////////////////////////////////////////////
68
int TransformTable::add_transform(VertexTransform const *transform);

1077 5 write 4 1706 21 TransformTable::write 0 1 198 221
////////////////////////////////////////////////////////////////////
//     Function: TransformTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void TransformTable::write(ostream &out) const;

1078 14 get_class_type 4 1706 30 TransformTable::get_class_type 0 1 199 0
55
static TypeHandle TransformTable::get_class_type(void);

1079 14 TransformBlend 4 1707 30 TransformBlend::TransformBlend 0 6 200 201 202 203 204 205 2055
// Filename: transformBlend.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
inline TransformBlend::TransformBlend(void);

1080 10 operator = 4 1707 26 TransformBlend::operator = 0 1 206 240
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void TransformBlend::operator =(TransformBlend const &copy);

1081 15 ~TransformBlend 4 1707 31 TransformBlend::~TransformBlend 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline TransformBlend::~TransformBlend(void);

1082 10 compare_to 4 1707 26 TransformBlend::compare_to 0 1 207 300
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::compare_to
//       Access: Published
//  Description: Defines an arbitrary ordering for TransformBlend
//               objects.
////////////////////////////////////////////////////////////////////
66
int TransformBlend::compare_to(TransformBlend const &other) const;

1083 10 operator < 4 1707 26 TransformBlend::operator < 0 1 208 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator <
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline bool TransformBlend::operator <(TransformBlend const &other) const;

1084 11 operator == 4 1707 27 TransformBlend::operator == 0 1 209 227
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator ==
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline bool TransformBlend::operator ==(TransformBlend const &other) const;

1085 11 operator != 4 1707 27 TransformBlend::operator != 0 1 210 227
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::operator !=
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline bool TransformBlend::operator !=(TransformBlend const &other) const;

1086 13 add_transform 4 1707 29 TransformBlend::add_transform 0 1 211 344
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::add_transform
//       Access: Published
//  Description: Adds a new transform to the blend.  If the transform
//               already existed, increases its weight factor.
////////////////////////////////////////////////////////////////////
83
void TransformBlend::add_transform(VertexTransform const *transform, float weight);

1087 16 remove_transform 4 1707 32 TransformBlend::remove_transform 0 1 212 277
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::remove_transform
//       Access: Published
//  Description: Removes the indicated transform to the blend.
////////////////////////////////////////////////////////////////////
72
void TransformBlend::remove_transform(VertexTransform const *transform);

1088 17 normalize_weights 4 1707 33 TransformBlend::normalize_weights 0 1 213 456
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::normalize_weights
//       Access: Published
//  Description: Rescales all of the weights on the various transforms
//               so that they sum to 1.0.  It is generally a good idea
//               to call this after adding or removing transforms from
//               the blend.
////////////////////////////////////////////////////////////////////
45
void TransformBlend::normalize_weights(void);

1089 13 has_transform 4 1707 29 TransformBlend::has_transform 0 1 214 317
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::has_transform
//       Access: Published
//  Description: Returns true if the blend has the indicated
//               transform, false otherwise.
////////////////////////////////////////////////////////////////////
75
bool TransformBlend::has_transform(VertexTransform const *transform) const;

1090 10 get_weight 4 1707 26 TransformBlend::get_weight 0 2 215 216 689
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the nth transform
//               stored in the blend object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_weight
//       Access: Published
//  Description: Returns the weight associated with the indicated
//               transform, or 0 if there is no entry for the
//               transform.
////////////////////////////////////////////////////////////////////
73
float TransformBlend::get_weight(VertexTransform const *transform) const;

1091 18 get_num_transforms 4 1707 34 TransformBlend::get_num_transforms 0 1 217 311
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_num_transforms
//       Access: Published
//  Description: Returns the number of transforms stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
58
inline int TransformBlend::get_num_transforms(void) const;

1092 13 get_transform 4 1707 29 TransformBlend::get_transform 0 1 218 299
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_transform
//       Access: Published
//  Description: Returns the nth transform stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
73
inline VertexTransform const *TransformBlend::get_transform(int n) const;

1093 13 set_transform 4 1707 29 TransformBlend::set_transform 0 1 219 300
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_transform
//       Access: Published
//  Description: Replaces the nth transform stored in the blend
//               object.
////////////////////////////////////////////////////////////////////
83
inline void TransformBlend::set_transform(int n, VertexTransform const *transform);

1094 10 set_weight 4 1707 26 TransformBlend::set_weight 0 1 220 324
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::set_weight
//       Access: Published
//  Description: Replaces the weight associated with the nth transform
//               stored in the blend object.
////////////////////////////////////////////////////////////////////
60
inline void TransformBlend::set_weight(int n, float weight);

1095 12 update_blend 4 1707 28 TransformBlend::update_blend 0 1 221 405
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::update_blend
//       Access: Published
//  Description: Recomputes the internal representation of the blend
//               value, if necessary.  You should call this before
//               calling get_blend() or transform_point().
////////////////////////////////////////////////////////////////////
53
inline void TransformBlend::update_blend(void) const;

1096 9 get_blend 4 1707 25 TransformBlend::get_blend 0 1 222 522
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_blend
//       Access: Published
//  Description: Returns the current value of the blend, based on the
//               current value of all of the nested transform objects
//               and their associated weights.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
63
inline void TransformBlend::get_blend(LMatrix4f &result) const;

1097 15 transform_point 4 1707 31 TransformBlend::transform_point 0 2 223 224 822
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_point
//       Access: Published
//  Description: Transforms the indicated point by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
67
inline void TransformBlend::transform_point(LPoint4f &point) const;

1098 16 transform_vector 4 1707 32 TransformBlend::transform_vector 0 1 225 412
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::transform_vector
//       Access: Published
//  Description: Transforms the indicated vector by the blend matrix.
//
//               You should call update_blend() to ensure that the
//               cache is up-to-date before calling this.
////////////////////////////////////////////////////////////////////
69
inline void TransformBlend::transform_vector(LVector3f &point) const;

1099 12 get_modified 4 1707 28 TransformBlend::get_modified 0 1 226 351
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least as often as the result of get_blend() changes.
////////////////////////////////////////////////////////////////////
58
inline UpdateSeq TransformBlend::get_modified(void) const;

1100 6 output 4 1707 22 TransformBlend::output 0 1 227 222
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void TransformBlend::output(ostream &out) const;

1101 5 write 4 1707 21 TransformBlend::write 0 1 228 221
////////////////////////////////////////////////////////////////////
//     Function: TransformBlend::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void TransformBlend::write(ostream &out, int indent_level) const;

1102 14 get_class_type 4 1707 30 TransformBlend::get_class_type 0 1 229 0
55
static TypeHandle TransformBlend::get_class_type(void);

1103 19 TransformBlendTable 4 1708 40 TransformBlendTable::TransformBlendTable 0 2 230 231 471
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
TransformBlendTable::TransformBlendTable(void);

1104 10 operator = 4 1708 31 TransformBlendTable::operator = 0 1 232 245
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
void TransformBlendTable::operator =(TransformBlendTable const &copy);

1105 14 get_num_blends 4 1708 35 TransformBlendTable::get_num_blends 0 1 233 1005
// Filename: transformBlendTable.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_blends
//       Access: Published
//  Description: Returns the total number of different blend
//               combinations in the table.
////////////////////////////////////////////////////////////////////
59
inline int TransformBlendTable::get_num_blends(void) const;

1106 9 get_blend 4 1708 30 TransformBlendTable::get_blend 0 1 234 265
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_blend
//       Access: Published
//  Description: Returns the nth blend in the table.
////////////////////////////////////////////////////////////////////
73
inline TransformBlend const &TransformBlendTable::get_blend(int n) const;

1107 12 get_modified 4 1708 33 TransformBlendTable::get_modified 0 1 235 382
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_modified
//       Access: Published
//  Description: Returns a counter which is guaranteed to increment at
//               least when any TransformBlends within the table
//               have changed.
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq TransformBlendTable::get_modified(void) const;

1108 9 set_blend 4 1708 30 TransformBlendTable::set_blend 0 1 236 311
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::set_blend
//       Access: Published
//  Description: Replaces the blend at the nth position with the
//               indicated value.
////////////////////////////////////////////////////////////////////
72
void TransformBlendTable::set_blend(int n, TransformBlend const &blend);

1109 12 remove_blend 4 1708 33 TransformBlendTable::remove_blend 0 1 237 271
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::remove_blend
//       Access: Published
//  Description: Removes the blend at the nth position.
////////////////////////////////////////////////////////////////////
46
void TransformBlendTable::remove_blend(int n);

1110 9 add_blend 4 1708 30 TransformBlendTable::add_blend 0 1 238 414
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::add_blend
//       Access: Published
//  Description: Adds a new blend to the table, and returns its
//               index number.  If there is already an identical blend
//               in the table, simply returns that number instead.
////////////////////////////////////////////////////////////////////
64
int TransformBlendTable::add_blend(TransformBlend const &blend);

1111 18 get_num_transforms 4 1708 39 TransformBlendTable::get_num_transforms 0 1 239 603
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_num_transforms
//       Access: Published
//  Description: Returns the number of unique VertexTransform objects
//               represented in the table.  This will correspond to
//               the size of the TransformTable object that would
//               represent the same table.  This is also the same
//               limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transform_indices().
////////////////////////////////////////////////////////////////////
63
inline int TransformBlendTable::get_num_transforms(void) const;

1112 31 get_max_simultaneous_transforms 4 1708 52 TransformBlendTable::get_max_simultaneous_transforms 0 1 240 503
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::get_max_simultaneous_transforms
//       Access: Published
//  Description: Returns the maximum number of unique VertexTransform
//               objects that are applied to any one vertex
//               simultaneously.  This is the same limit reflected by
//               GraphicsStateGuardian::get_max_vertex_transforms().
////////////////////////////////////////////////////////////////////
76
inline int TransformBlendTable::get_max_simultaneous_transforms(void) const;

1113 5 write 4 1708 26 TransformBlendTable::write 0 1 241 226
////////////////////////////////////////////////////////////////////
//     Function: TransformBlendTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
void TransformBlendTable::write(ostream &out, int indent_level) const;

1114 14 get_class_type 4 1708 35 TransformBlendTable::get_class_type 0 1 242 0
60
static TypeHandle TransformBlendTable::get_class_type(void);

1115 8 get_name 4 1709 22 VertexSlider::get_name 0 1 243 1133
// Filename: vertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_name
//       Access: Published
//  Description: Returns the name of this particular slider.  Every
//               unique blend shape within a particular Geom must be
//               identified with a different name, which is shared by
//               the slider that controls it.
////////////////////////////////////////////////////////////////////
62
inline InternalName const *VertexSlider::get_name(void) const;

1116 10 get_slider 4 1709 24 VertexSlider::get_slider 0 1 244 0
55
virtual float VertexSlider::get_slider(void) const = 0;

1117 12 get_modified 4 1709 26 VertexSlider::get_modified 0 1 245 377
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least every time the value reported by
//               get_slider() changes.
////////////////////////////////////////////////////////////////////
56
inline UpdateSeq VertexSlider::get_modified(void) const;

1118 6 output 4 1709 20 VertexSlider::output 0 1 246 229
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void VertexSlider::output(ostream &out) const;

1119 5 write 4 1709 19 VertexSlider::write 0 1 247 228
////////////////////////////////////////////////////////////////////
//     Function: VertexSlider::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void VertexSlider::write(ostream &out, int indent_level) const;

1120 14 get_class_type 4 1709 28 VertexSlider::get_class_type 0 1 248 0
53
static TypeHandle VertexSlider::get_class_type(void);

1121 11 SliderTable 4 1710 24 SliderTable::SliderTable 0 2 249 250 455
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
31
SliderTable::SliderTable(void);

1122 10 operator = 4 1710 23 SliderTable::operator = 0 1 251 237
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
void SliderTable::operator =(SliderTable const &copy);

1123 13 is_registered 4 1710 26 SliderTable::is_registered 0 1 252 1173
// Filename: sliderTable.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_registered
//       Access: Published
//  Description: Returns true if this table has been registered.
//               Once it has been registered, the set of sliders in
//               a SliderTable may not be further modified; but
//               it must be registered before it can be assigned to a
//               Geom.
////////////////////////////////////////////////////////////////////
51
inline bool SliderTable::is_registered(void) const;

1124 14 register_table 4 1710 27 SliderTable::register_table 0 1 253 912
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::register_table
//       Access: Published, Static
//  Description: Registers a SliderTable for use.  This is
//               similar to GeomVertexFormat::register_format().  Once
//               registered, a SliderTable may no longer be
//               modified (although the individual VertexSlider
//               objects may modify their reported sliders).
//
//               This must be called before a table may be used in a
//               Geom.  After this call, you should discard the
//               original pointer you passed in (which may or may not
//               now be invalid) and let its reference count decrement
//               normally; you should use only the returned value from
//               this point on.
////////////////////////////////////////////////////////////////////
98
static inline ConstPointerTo< SliderTable > SliderTable::register_table(SliderTable const *table);

1125 15 get_num_sliders 4 1710 28 SliderTable::get_num_sliders 0 1 254 271
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_num_sliders
//       Access: Published
//  Description: Returns the number of sliders in the table.
////////////////////////////////////////////////////////////////////
52
inline int SliderTable::get_num_sliders(void) const;

1126 10 get_slider 4 1710 23 SliderTable::get_slider 0 1 255 259
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_slider
//       Access: Published
//  Description: Returns the nth slider in the table.
////////////////////////////////////////////////////////////////////
64
inline VertexSlider const *SliderTable::get_slider(int n) const;

1127 11 find_slider 4 1710 24 SliderTable::find_slider 0 1 256 333
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::find_slider
//       Access: Published
//  Description: Returns the slider with the indicated name, or NULL
//               if no slider in the table has that name.
////////////////////////////////////////////////////////////////////
84
inline VertexSlider const *SliderTable::find_slider(InternalName const *name) const;

1128 10 has_slider 4 1710 23 SliderTable::has_slider 0 1 257 318
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::has_slider
//       Access: Published
//  Description: Returns true if the table has a slider by the
//               indicated name, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool SliderTable::has_slider(InternalName const *name) const;

1129 8 is_empty 4 1710 21 SliderTable::is_empty 0 1 258 309
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::is_empty
//       Access: Published
//  Description: Returns true if the table has no sliders, false if it
//               has at least one.
////////////////////////////////////////////////////////////////////
46
inline bool SliderTable::is_empty(void) const;

1130 12 get_modified 4 1710 25 SliderTable::get_modified 0 1 259 560
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::get_modified
//       Access: Published
//  Description: Returns a sequence number that's guaranteed to change
//               at least when any VertexSliders in the table
//               change.  (However, this is only true for a registered
//               table.  An unregistered table may or may not
//               reflect an update here when a VertexSlider
//               changes.)
////////////////////////////////////////////////////////////////////
55
inline UpdateSeq SliderTable::get_modified(void) const;

1131 10 set_slider 4 1710 23 SliderTable::set_slider 0 1 260 301
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::set_slider
//       Access: Published
//  Description: Replaces the nth slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
64
void SliderTable::set_slider(int n, VertexSlider const *slider);

1132 13 remove_slider 4 1710 26 SliderTable::remove_slider 0 1 261 303
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::remove_slider
//       Access: Published
//  Description: Removes the nth slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
39
void SliderTable::remove_slider(int n);

1133 10 add_slider 4 1710 23 SliderTable::add_slider 0 1 262 441
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::add_slider
//       Access: Published
//  Description: Adds a new slider to the table, or replaces an
//               existing slider with the same name, and returns the
//               index number of the new slider.  Only valid for
//               unregistered tables.
////////////////////////////////////////////////////////////////////
56
int SliderTable::add_slider(VertexSlider const *slider);

1134 5 write 4 1710 18 SliderTable::write 0 1 263 218
////////////////////////////////////////////////////////////////////
//     Function: SliderTable::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
void SliderTable::write(ostream &out) const;

1135 14 get_class_type 4 1710 27 SliderTable::get_class_type 0 1 264 0
52
static TypeHandle SliderTable::get_class_type(void);

1136 37 upcast_to_TypedWritableReferenceCount 12 1711 53 GeomVertexData::upcast_to_TypedWritableReferenceCount 0 1 311 57
upcast from GeomVertexData to TypedWritableReferenceCount
89
TypedWritableReferenceCount *GeomVertexData::upcast_to_TypedWritableReferenceCount(void);

1137 26 downcast_to_GeomVertexData 12 1699 55 TypedWritableReferenceCount::downcast_to_GeomVertexData 0 1 312 59
downcast from TypedWritableReferenceCount to GeomVertexData
78
GeomVertexData *TypedWritableReferenceCount::downcast_to_GeomVertexData(void);

1138 19 upcast_to_GeomEnums 12 1711 35 GeomVertexData::upcast_to_GeomEnums 0 1 313 39
upcast from GeomVertexData to GeomEnums
53
GeomEnums *GeomVertexData::upcast_to_GeomEnums(void);

1139 26 downcast_to_GeomVertexData 12 1689 37 GeomEnums::downcast_to_GeomVertexData 0 1 314 41
downcast from GeomEnums to GeomVertexData
60
GeomVertexData *GeomEnums::downcast_to_GeomVertexData(void);

1140 14 GeomVertexData 4 1711 30 GeomVertexData::GeomVertexData 0 3 265 266 267 1272
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Default Constructor
//       Access: Private
//  Description: Constructs an invalid object.  This is only used when
//               reading from the bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Constructor
//       Access: Published
//  Description: This constructor copies all of the basic properties
//               of the source VertexData, like usage_hint and
//               animation tables, but does not copy the actual data,
//               and it allows you to specify a different format.
////////////////////////////////////////////////////////////////////
130
GeomVertexData::GeomVertexData(basic_string< char > const &name, GeomVertexFormat const *format, GeomEnums::UsageHint usage_hint);

1141 10 operator = 4 1711 26 GeomVertexData::operator = 0 1 268 480
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomVertexData that is
//               actively being used for rendering.
////////////////////////////////////////////////////////////////////
60
void GeomVertexData::operator =(GeomVertexData const &copy);

1142 15 ~GeomVertexData 4 1711 31 GeomVertexData::~GeomVertexData 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual GeomVertexData::~GeomVertexData(void);

1143 12 operator new 4 1711 28 GeomVertexData::operator new 0 1 269 0
61
inline void *GeomVertexData::operator new(unsigned int size);

1144 15 operator delete 4 1711 31 GeomVertexData::operator delete 0 0 0
55
inline void GeomVertexData::operator delete(void *ptr);

1145 8 get_name 4 1711 24 GeomVertexData::get_name 0 1 270 1054
// Filename: geomVertexData.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor, if any.
//               This name is reported on the PStats graph for vertex
//               computations.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GeomVertexData::get_name(void) const;

1146 8 set_name 4 1711 24 GeomVertexData::set_name 0 1 271 345
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_name
//       Access: Published
//  Description: Changes the name of the vertex data.  This name is
//               reported on the PStats graph for vertex computations.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_name(basic_string< char > const &name);

1147 10 get_format 4 1711 26 GeomVertexData::get_format 0 1 272 318
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_format
//       Access: Published
//  Description: Returns a pointer to the GeomVertexFormat structure
//               that defines this data.
////////////////////////////////////////////////////////////////////
70
inline GeomVertexFormat const *GeomVertexData::get_format(void) const;

1148 10 set_format 4 1711 26 GeomVertexData::set_format 0 1 273 585
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_format
//       Access: Published
//  Description: Changes the format of the vertex data.  If the data
//               is not empty, this will implicitly change every row
//               to match the new format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_format(GeomVertexFormat const *format);

1149 14 get_usage_hint 4 1711 30 GeomVertexData::get_usage_hint 0 1 274 778
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint that was passed to the
//               constructor, and which will be passed to each array
//               data object created initially, and arrays created as
//               the result of a convert_to() operation.  See
//               geomEnums.h.
//
//               However, each individual array may be replaced with a
//               different array object with an independent usage hint
//               specified, so there is no guarantee that the
//               individual arrays all have the same usage_hint.
////////////////////////////////////////////////////////////////////
71
inline GeomEnums::UsageHint GeomVertexData::get_usage_hint(void) const;

1150 14 set_usage_hint 4 1711 30 GeomVertexData::set_usage_hint 0 1 275 580
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this vertex data, and
//               for all of the arrays that share this data.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
69
void GeomVertexData::set_usage_hint(GeomEnums::UsageHint usage_hint);

1151 10 has_column 4 1711 26 GeomVertexData::has_column 0 1 276 398
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::has_column
//       Access: Published
//  Description: Returns true if the data has the named column,
//               false otherwise.  This is really just a shortcut for
//               asking the same thing from the format.
////////////////////////////////////////////////////////////////////
71
inline bool GeomVertexData::has_column(InternalName const *name) const;

1152 12 get_num_rows 4 1711 28 GeomVertexData::get_num_rows 0 1 277 362
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_rows
//       Access: Published
//  Description: Returns the number of rows stored within all the
//               arrays.  All arrays store data for the same n
//               rows.
////////////////////////////////////////////////////////////////////
45
int GeomVertexData::get_num_rows(void) const;

1153 12 set_num_rows 4 1711 28 GeomVertexData::set_num_rows 0 1 278 1250
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_num_rows
//       Access: Published
//  Description: Sets the length of the array to n rows in all of
//               the various arrays (presumably by adding rows).
//
//               The new vertex data is initialized to 0, except for
//               the "color" column, which is initialized to (1, 1, 1,
//               1).
//
//               The return value is true if the number of rows
//               was changed, false if the object already contained n
//               rows (or if there was some error).
//
//               Although this method is Published, application code
//               only very rarely has any need to call it.  Instead,
//               you should use the GeomVertexWriter to build up the
//               rows in a GeomVertexData object automatically,
//               without need to explicitly set the number of
//               rows.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
48
inline bool GeomVertexData::set_num_rows(int n);

1154 10 clear_rows 4 1711 26 GeomVertexData::clear_rows 0 1 279 554
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_rows
//       Access: Published
//  Description: Removes all of the rows from the arrays;
//               functionally equivalent to set_num_rows(0) (but
//               faster).
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
38
void GeomVertexData::clear_rows(void);

1155 14 get_num_arrays 4 1711 30 GeomVertexData::get_num_arrays 0 1 280 376
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_arrays
//       Access: Published
//  Description: Returns the number of individual arrays stored within
//               the data.  This must match
//               get_format()->get_num_arrays().
////////////////////////////////////////////////////////////////////
54
inline int GeomVertexData::get_num_arrays(void) const;

1156 9 get_array 4 1711 25 GeomVertexData::get_array 0 1 281 412
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_array
//       Access: Published
//  Description: Returns a const pointer to the vertex data for the
//               indicated array, for application code to directly
//               examine (but not modify) the underlying vertex data.
////////////////////////////////////////////////////////////////////
73
inline GeomVertexArrayData const *GeomVertexData::get_array(int i) const;

1157 12 modify_array 4 1711 28 GeomVertexData::modify_array 0 1 282 757
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_array
//       Access: Published
//  Description: Returns a modifiable pointer to the indicated vertex
//               array, so that application code may directly
//               manipulate the data.  You should avoid changing
//               the length of this array, since all of the arrays
//               should be kept in sync--use set_num_rows()
//               instead.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
57
GeomVertexArrayData *GeomVertexData::modify_array(int i);

1158 9 set_array 4 1711 25 GeomVertexData::set_array 0 1 283 667
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_array
//       Access: Published
//  Description: Replaces the indicated vertex data array with
//               a completely new array.  You should be careful that
//               the new array has the same length and format as the
//               old one, unless you know what you are doing.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
72
void GeomVertexData::set_array(int i, GeomVertexArrayData const *array);

1159 19 get_transform_table 4 1711 35 GeomVertexData::get_transform_table 0 1 284 868
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_table
//       Access: Published
//  Description: Returns a const pointer to the TransformTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the
//               graphics hardware (but also see
//               get_transform_blend_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformTable assigned (which implies the
//               vertices will not be animated by the graphics
//               hardware).
////////////////////////////////////////////////////////////////////
77
inline TransformTable const *GeomVertexData::get_transform_table(void) const;

1160 19 set_transform_table 4 1711 35 GeomVertexData::set_transform_table 0 1 285 708
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_table
//       Access: Published
//  Description: Replaces the TransformTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_index" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
70
void GeomVertexData::set_transform_table(TransformTable const *table);

1161 21 clear_transform_table 4 1711 37 GeomVertexData::clear_transform_table 0 1 286 401
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_table
//       Access: Published
//  Description: Sets the TransformTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables hardware-driven vertex animation.
////////////////////////////////////////////////////////////////////
56
inline void GeomVertexData::clear_transform_table(void);

1162 25 get_transform_blend_table 4 1711 41 GeomVertexData::get_transform_blend_table 0 1 287 816
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_transform_blend_table
//       Access: Published
//  Description: Returns a const pointer to the TransformBlendTable
//               assigned to this data.  Vertices within the table
//               will index into this table to indicate their
//               dynamic skinning information; this table is used when
//               the vertex animation is to be performed by the CPU
//               (but also see get_transform_table()).
//
//               This will return NULL if the vertex data does not
//               have a TransformBlendTable assigned (which implies
//               the vertices will not be animated by the CPU).
////////////////////////////////////////////////////////////////////
88
inline TransformBlendTable const *GeomVertexData::get_transform_blend_table(void) const;

1163 28 modify_transform_blend_table 4 1711 44 GeomVertexData::modify_transform_blend_table 0 1 288 665
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::modify_transform_blend_table
//       Access: Published
//  Description: Returns a modifiable pointer to the current
//               TransformBlendTable on this vertex data, if any, or
//               NULL if there is not a TransformBlendTable.  See
//               get_transform_blend_table().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
72
TransformBlendTable *GeomVertexData::modify_transform_blend_table(void);

1164 25 set_transform_blend_table 4 1711 41 GeomVertexData::set_transform_blend_table 0 1 289 719
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_transform_blend_table
//       Access: Published
//  Description: Replaces the TransformBlendTable on this vertex
//               data with the indicated table.  The length of this
//               table should be consistent with the maximum table
//               index assigned to the vertices under the
//               "transform_blend" name.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
81
void GeomVertexData::set_transform_blend_table(TransformBlendTable const *table);

1165 27 clear_transform_blend_table 4 1711 43 GeomVertexData::clear_transform_blend_table 0 1 290 407
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_transform_blend_table
//       Access: Published
//  Description: Sets the TransformBlendTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables CPU-driven vertex animation.
////////////////////////////////////////////////////////////////////
62
inline void GeomVertexData::clear_transform_blend_table(void);

1166 16 get_slider_table 4 1711 32 GeomVertexData::get_slider_table 0 1 291 558
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_slider_table
//       Access: Published
//  Description: Returns a const pointer to the SliderTable
//               assigned to this data.  Vertices within the vertex
//               data will look up their morph offsets, if any, within
//               this table.
//
//               This will return NULL if the vertex data does not
//               have a SliderTable assigned.
////////////////////////////////////////////////////////////////////
71
inline SliderTable const *GeomVertexData::get_slider_table(void) const;

1167 16 set_slider_table 4 1711 32 GeomVertexData::set_slider_table 0 1 292 777
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_slider_table
//       Access: Published
//  Description: Replaces the SliderTable on this vertex
//               data with the indicated table.  There should be an
//               entry in this table for each kind of morph offset
//               defined in the vertex data.
//
//               The SliderTable object must have been registered
//               prior to setting it on the GeomVertexData.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void GeomVertexData::set_slider_table(SliderTable const *table);

1168 18 clear_slider_table 4 1711 34 GeomVertexData::clear_slider_table 0 1 293 392
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_slider_table
//       Access: Published
//  Description: Sets the SliderTable pointer to NULL,
//               removing the table from the vertex data.  This
//               disables morph (blend shape) animation.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexData::clear_slider_table(void);

1169 13 get_num_bytes 4 1711 29 GeomVertexData::get_num_bytes 0 1 294 332
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_num_bytes
//       Access: Published
//  Description: Returns the total number of bytes consumed by the
//               different arrays of the vertex data.
////////////////////////////////////////////////////////////////////
46
int GeomVertexData::get_num_bytes(void) const;

1170 12 get_modified 4 1711 28 GeomVertexData::get_modified 0 1 295 366
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex data is
//               modified.
////////////////////////////////////////////////////////////////////
58
inline UpdateSeq GeomVertexData::get_modified(void) const;

1171 9 copy_from 4 1711 25 GeomVertexData::copy_from 0 1 296 1109
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_from
//       Access: Published
//  Description: Copies all the data from the other array into the
//               corresponding data types in this array, by matching
//               data types name-by-name.
//
//               keep_data_objects specifies what to do when one or
//               more of the arrays can be copied without the need to
//               apply any conversion operation.  If it is true, the
//               original GeomVertexArrayData objects in this object
//               are retained, but their data arrays are copied
//               pointerwise from the source; if it is false, then the
//               GeomVertexArrayData objects themselves are copied
//               pointerwise from the source.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
85
void GeomVertexData::copy_from(GeomVertexData const *source, bool keep_data_objects);

1172 13 copy_row_from 4 1711 29 GeomVertexData::copy_row_from 0 1 297 643
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::copy_row_from
//       Access: Published
//  Description: Copies a single row of the data from the other array
//               into the indicated row of this array.  In this case,
//               the source format must exactly match the destination
//               format.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
95
void GeomVertexData::copy_row_from(int dest_row, GeomVertexData const *source, int source_row);

1173 10 convert_to 4 1711 26 GeomVertexData::convert_to 0 1 298 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::convert_to
//       Access: Published
//  Description: Returns a new GeomVertexData that represents the same
//               contents as this one, with all data types matched up
//               name-by-name to the indicated new format.
////////////////////////////////////////////////////////////////////
102
ConstPointerTo< GeomVertexData > GeomVertexData::convert_to(GeomVertexFormat const *new_format) const;

1174 11 scale_color 4 1711 27 GeomVertexData::scale_color 0 2 299 300 1067
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table modified in-place to apply the indicated scale.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::scale_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table that has been
//               scaled by the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
////////////////////////////////////////////////////////////////////
98
ConstPointerTo< GeomVertexData > GeomVertexData::scale_color(LVecBase4f const &color_scale) const;

1175 9 set_color 4 1711 25 GeomVertexData::set_color 0 2 301 302 1054
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               data modified in-place with the new value.
//
//               If the vertex data does not include a color column, a
//               new one will not be added.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::set_color
//       Access: Published
//  Description: Returns a new GeomVertexData object with the color
//               table replaced with a new color table for which each
//               vertex has the indicated value.  The new color table
//               will be added as a new array; if the old color table
//               was interleaved with a previous array, the previous
//               array will not be repacked.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< GeomVertexData > GeomVertexData::set_color(LVecBase4f const &color) const;

1176 16 animate_vertices 4 1711 32 GeomVertexData::animate_vertices 0 1 303 1011
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::animate_vertices
//       Access: Published
//  Description: Returns a GeomVertexData that represents the results
//               of computing the vertex animation on the CPU for this
//               GeomVertexData.
//
//               If there is no CPU-defined vertex animation on this
//               object, this just returns the original object.
//
//               If there is vertex animation, but the VertexTransform
//               values have not changed since last time, this may
//               return the same pointer it returned previously.  Even
//               if the VertexTransform values have changed, it may
//               still return the same pointer, but with its contents
//               modified (this is preferred, since it allows the
//               graphics backend to update vertex buffers optimally).
////////////////////////////////////////////////////////////////////
78
ConstPointerTo< GeomVertexData > GeomVertexData::animate_vertices(void) const;

1177 14 replace_column 4 1711 30 GeomVertexData::replace_column 0 1 304 776
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::replace_column
//       Access: Published
//  Description: Returns a new GeomVertexData object, suitable for
//               modification, with the indicated data type replaced
//               with a new table filled with undefined values.  The
//               new table will be added as a new array; if the old
//               table was interleaved with a previous array, the
//               previous array will not be repacked.
//
//               If num_components is 0, the indicated name is simply
//               removed from the type, without replacing it with
//               anything else.
////////////////////////////////////////////////////////////////////
172
PointerTo< GeomVertexData > GeomVertexData::replace_column(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) const;

1178 6 output 4 1711 22 GeomVertexData::output 0 1 305 222
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void GeomVertexData::output(ostream &out) const;

1179 5 write 4 1711 21 GeomVertexData::write 0 2 306 307 221
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void GeomVertexData::write(ostream &out, int indent_level = (0)) const;

1180 11 clear_cache 4 1711 27 GeomVertexData::clear_cache 0 1 308 556
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
////////////////////////////////////////////////////////////////////
39
void GeomVertexData::clear_cache(void);

1181 17 clear_cache_stage 4 1711 33 GeomVertexData::clear_cache_stage 0 1 309 608
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexData::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               convert_to(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
45
void GeomVertexData::clear_cache_stage(void);

1182 14 get_class_type 4 1711 30 GeomVertexData::get_class_type 0 1 310 0
55
static TypeHandle GeomVertexData::get_class_type(void);

1183 37 upcast_to_TypedWritableReferenceCount 12 1712 52 GeomPrimitive::upcast_to_TypedWritableReferenceCount 0 1 363 56
upcast from GeomPrimitive to TypedWritableReferenceCount
88
TypedWritableReferenceCount *GeomPrimitive::upcast_to_TypedWritableReferenceCount(void);

1184 25 downcast_to_GeomPrimitive 12 1699 54 TypedWritableReferenceCount::downcast_to_GeomPrimitive 0 1 364 58
downcast from TypedWritableReferenceCount to GeomPrimitive
76
GeomPrimitive *TypedWritableReferenceCount::downcast_to_GeomPrimitive(void);

1185 19 upcast_to_GeomEnums 12 1712 34 GeomPrimitive::upcast_to_GeomEnums 0 1 365 38
upcast from GeomPrimitive to GeomEnums
52
GeomEnums *GeomPrimitive::upcast_to_GeomEnums(void);

1186 25 downcast_to_GeomPrimitive 12 1689 36 GeomEnums::downcast_to_GeomPrimitive 0 1 366 40
downcast from GeomEnums to GeomPrimitive
58
GeomPrimitive *GeomEnums::downcast_to_GeomPrimitive(void);

1187 10 operator = 4 1712 25 GeomPrimitive::operator = 0 1 315 478
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a GeomPrimitive that is
//               actively being used for rendering.
////////////////////////////////////////////////////////////////////
58
void GeomPrimitive::operator =(GeomPrimitive const &copy);

1188 14 ~GeomPrimitive 4 1712 29 GeomPrimitive::~GeomPrimitive 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual GeomPrimitive::~GeomPrimitive(void);

1189 12 operator new 4 1712 27 GeomPrimitive::operator new 0 1 316 0
60
inline void *GeomPrimitive::operator new(unsigned int size);

1190 15 operator delete 4 1712 30 GeomPrimitive::operator delete 0 0 0
54
inline void GeomPrimitive::operator delete(void *ptr);

1191 9 make_copy 4 1712 24 GeomPrimitive::make_copy 0 1 317 0
76
virtual PointerTo< GeomPrimitive > GeomPrimitive::make_copy(void) const = 0;

1192 18 get_primitive_type 4 1712 33 GeomPrimitive::get_primitive_type 0 1 318 0
83
virtual GeomEnums::PrimitiveType GeomPrimitive::get_primitive_type(void) const = 0;

1193 18 get_geom_rendering 4 1712 33 GeomPrimitive::get_geom_rendering 0 1 319 397
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_geom_rendering
//       Access: Published, Virtual
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this primitive.
////////////////////////////////////////////////////////////////////
58
virtual int GeomPrimitive::get_geom_rendering(void) const;

1194 15 get_shade_model 4 1712 30 GeomPrimitive::get_shade_model 0 1 320 1093
// Filename: geomPrimitive.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_shade_model
//       Access: Published
//  Description: Returns the ShadeModel hint for this primitive.
//               This is intended as a hint to the renderer to tell it
//               how the per-vertex colors and normals are applied.
////////////////////////////////////////////////////////////////////
72
inline GeomEnums::ShadeModel GeomPrimitive::get_shade_model(void) const;

1195 15 set_shade_model 4 1712 30 GeomPrimitive::set_shade_model 0 1 321 865
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_shade_model
//       Access: Published
//  Description: Changes the ShadeModel hint for this primitive.
//               This is different from the ShadeModelAttrib that
//               might also be applied from the scene graph.  This
//               does not affect the shade model that is in effect
//               when rendering, but rather serves as a hint to the
//               renderer to tell it how the per-vertex colors and
//               normals on this primitive are applied.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
78
inline void GeomPrimitive::set_shade_model(GeomEnums::ShadeModel shade_model);

1196 14 get_usage_hint 4 1712 29 GeomPrimitive::get_usage_hint 0 1 322 921
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_usage_hint
//       Access: Published
//  Description: Returns the usage hint for this primitive.  See
//               geomEnums.h.  This has nothing to do with the usage
//               hint associated with the primitive's vertices; this
//               only specifies how often the vertex indices that
//               define the primitive will be modified.
//
//               It is perfectly legal (and, in fact, common) for a
//               GeomPrimitive to have UH_static on itself, while
//               referencing vertex data with UH_dynamic.  This means
//               that the vertices themselves will be animated, but
//               the primitive will always reference the same set of
//               vertices from the pool.
////////////////////////////////////////////////////////////////////
70
inline GeomEnums::UsageHint GeomPrimitive::get_usage_hint(void) const;

1197 14 set_usage_hint 4 1712 29 GeomPrimitive::set_usage_hint 0 1 323 512
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for this primitive.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
68
void GeomPrimitive::set_usage_hint(GeomEnums::UsageHint usage_hint);

1198 14 get_index_type 4 1712 29 GeomPrimitive::get_index_type 0 1 324 342
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_index_type
//       Access: Public
//  Description: Returns the numeric type of the index column.
//               Normally, this will be either NT_uint16 or NT_uint32.
////////////////////////////////////////////////////////////////////
72
inline GeomEnums::NumericType GeomPrimitive::get_index_type(void) const;

1199 14 set_index_type 4 1712 29 GeomPrimitive::set_index_type 0 1 325 561
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::set_index_type
//       Access: Published
//  Description: Changes the numeric type of the index column.
//               Normally, this should be either NT_uint16 or
//               NT_uint32.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
70
void GeomPrimitive::set_index_type(GeomEnums::NumericType index_type);

1200 12 is_composite 4 1712 27 GeomPrimitive::is_composite 0 1 326 816
// The following published methods are provided for safe, high-level
// iteration through the vertices and sub-primitives within the
// GeomPrimitive class.  These work correctly regardless of the
// primitive type and without depending on knowledge about the way
// primitives' lengths are encoded.  You can also safely build up a
// composite primitive using these methods.

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_composite
//       Access: Published
//  Description: Returns true if the primitive is a composite
//               primitive such as a tristrip or trifan, or false if
//               it is a fundamental primitive such as a collection of
//               triangles.
////////////////////////////////////////////////////////////////////
52
inline bool GeomPrimitive::is_composite(void) const;

1201 10 is_indexed 4 1712 25 GeomPrimitive::is_indexed 0 1 327 683
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::is_indexed
//       Access: Published
//  Description: Returns true if the primitive is indexed, false
//               otherwise.  An indexed primitive stores a table of
//               index numbers into its GeomVertexData, so that it can
//               reference the vertices in any order.  A nonindexed
//               primitive, on the other hand, stores only the first
//               vertex number and number of vertices used, so that it
//               can only reference the vertices consecutively.
////////////////////////////////////////////////////////////////////
50
inline bool GeomPrimitive::is_indexed(void) const;

1202 16 get_first_vertex 4 1712 31 GeomPrimitive::get_first_vertex 0 1 328 536
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_first_vertex
//       Access: Published
//  Description: Returns the first vertex number referenced by the
//               primitive.  This is particularly important in the
//               case of a nonindexed primitive, in which case
//               get_first_vertex() and get_num_vertices() completely
//               define the extent of the vertex range.
////////////////////////////////////////////////////////////////////
48
int GeomPrimitive::get_first_vertex(void) const;

1203 16 get_num_vertices 4 1712 31 GeomPrimitive::get_num_vertices 0 1 329 328
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertex vertices used by all the
//               primitives in this object.
////////////////////////////////////////////////////////////////////
55
inline int GeomPrimitive::get_num_vertices(void) const;

1204 10 get_vertex 4 1712 25 GeomPrimitive::get_vertex 0 1 330 267
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_vertex
//       Access: Published
//  Description: Returns the ith vertex index in the table.
////////////////////////////////////////////////////////////////////
43
int GeomPrimitive::get_vertex(int i) const;

1205 10 add_vertex 4 1712 25 GeomPrimitive::add_vertex 0 1 331 777
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the list of vertex
//               indices used by the graphics primitive type.  To
//               define primitive, you must call add_vertex() for each
//               vertex of the new primitve, and then call
//               close_primitive() after you have specified the last
//               vertex of each primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
43
void GeomPrimitive::add_vertex(int vertex);

1206 12 add_vertices 4 1712 27 GeomPrimitive::add_vertices 0 3 332 333 334 769
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_vertices
//       Access: Public
//  Description: Adds several vertices in a row.
////////////////////////////////////////////////////////////////////
56
inline void GeomPrimitive::add_vertices(int v1, int v2);

1207 24 add_consecutive_vertices 4 1712 39 GeomPrimitive::add_consecutive_vertices 0 1 335 531
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_consecutive_vertices
//       Access: Published
//  Description: Adds a consecutive sequence of vertices, beginning at
//               start, to the primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
74
void GeomPrimitive::add_consecutive_vertices(int start, int num_vertices);

1208 17 add_next_vertices 4 1712 32 GeomPrimitive::add_next_vertices 0 1 336 621
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::add_next_vertices
//       Access: Published
//  Description: Adds the next n vertices in sequence, beginning from
//               the last vertex added to the primitive + 1.
//
//               This is most useful when you are building up a
//               primitive and a GeomVertexData at the same time, and
//               you just want the primitive to reference the first n
//               vertices from the data, then the next n, and so on.
////////////////////////////////////////////////////////////////////
56
void GeomPrimitive::add_next_vertices(int num_vertices);

1209 15 close_primitive 4 1712 30 GeomPrimitive::close_primitive 0 1 337 654
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::close_primitive
//       Access: Published
//  Description: Indicates that the previous n calls to add_vertex(),
//               since the last call to close_primitive(), have fully
//               defined a new primitive.  Returns true if successful,
//               false otherwise.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
42
bool GeomPrimitive::close_primitive(void);

1210 14 clear_vertices 4 1712 29 GeomPrimitive::clear_vertices 0 1 338 527
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::clear_vertices
//       Access: Published
//  Description: Removes all of the vertices and primitives from the
//               object, so they can be re-added.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
41
void GeomPrimitive::clear_vertices(void);

1211 15 offset_vertices 4 1712 30 GeomPrimitive::offset_vertices 0 1 339 508
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::offset_vertices
//       Access: Published
//  Description: Adds the indicated offset to all vertices used by the
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
48
void GeomPrimitive::offset_vertices(int offset);

1212 15 make_nonindexed 4 1712 30 GeomPrimitive::make_nonindexed 0 1 340 390
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_nonindexed
//       Access: Published
//  Description: Converts the primitive from indexed to nonindexed by
//               duplicating vertices as necessary into the indicated
//               dest GeomVertexData.
////////////////////////////////////////////////////////////////////
88
void GeomPrimitive::make_nonindexed(GeomVertexData *dest, GeomVertexData const *source);

1213 13 pack_vertices 4 1712 28 GeomPrimitive::pack_vertices 0 1 341 383
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::pack_vertices
//       Access: Published
//  Description: Packs the vertices used by the primitive from the
//               indicated source array onto the end of the indicated
//               destination array.
////////////////////////////////////////////////////////////////////
86
void GeomPrimitive::pack_vertices(GeomVertexData *dest, GeomVertexData const *source);

1214 12 make_indexed 4 1712 27 GeomPrimitive::make_indexed 0 1 342 817
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::make_indexed
//       Access: Published
//  Description: Converts the primitive from nonindexed form to
//               indexed form.  This will simply create an index table
//               that is numbered consecutively from
//               get_first_vertex(); it does not automatically
//               collapse together identical vertices that may have
//               been split apart by a previous call to
//               make_nonindexed().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
39
void GeomPrimitive::make_indexed(void);

1215 18 get_num_primitives 4 1712 33 GeomPrimitive::get_num_primitives 0 1 343 372
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_primitives
//       Access: Published
//  Description: Returns the number of individual primitives stored
//               within this object.  All primitives are the same
//               type.
////////////////////////////////////////////////////////////////////
50
int GeomPrimitive::get_num_primitives(void) const;

1216 19 get_primitive_start 4 1712 34 GeomPrimitive::get_primitive_start 0 1 344 800
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_start
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive starts.  
//
//               If i is one more than the highest valid primitive
//               vertex, the return value will be one more than the
//               last valid vertex.  Thus, it is generally true that
//               the vertices used by a particular primitive i are the
//               set get_primitive_start(n) <= vi <
//               get_primitive_start(n + 1) (although this range also
//               includes the unused vertices between primitives).
////////////////////////////////////////////////////////////////////
52
int GeomPrimitive::get_primitive_start(int n) const;

1217 17 get_primitive_end 4 1712 32 GeomPrimitive::get_primitive_end 0 1 345 408
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_end
//       Access: Published
//  Description: Returns the element within the _vertices list at which
//               the nth primitive ends.  This is one past the last
//               valid element for the nth primitive.
////////////////////////////////////////////////////////////////////
50
int GeomPrimitive::get_primitive_end(int n) const;

1218 26 get_primitive_num_vertices 4 1712 41 GeomPrimitive::get_primitive_num_vertices 0 1 346 406
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_vertices
//       Access: Published
//  Description: Returns the number of vertices used by the nth
//               primitive.  This is the same thing as
//               get_primitive_end(n) - get_primitive_start(n).
////////////////////////////////////////////////////////////////////
59
int GeomPrimitive::get_primitive_num_vertices(int n) const;

1219 13 get_num_faces 4 1712 28 GeomPrimitive::get_num_faces 0 1 347 393
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by all the
//               primitives in this object.
////////////////////////////////////////////////////////////////////
52
inline int GeomPrimitive::get_num_faces(void) const;

1220 23 get_primitive_num_faces 4 1712 38 GeomPrimitive::get_primitive_num_faces 0 1 348 402
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_num_faces
//       Access: Published
//  Description: Returns the number of triangles or other fundamental
//               type (such as line segments) represented by the nth
//               primitive in this object.
////////////////////////////////////////////////////////////////////
63
inline int GeomPrimitive::get_primitive_num_faces(int n) const;

1221 14 get_min_vertex 4 1712 29 GeomPrimitive::get_min_vertex 0 1 349 328
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by all
//               the primitives in this object.
////////////////////////////////////////////////////////////////////
53
inline int GeomPrimitive::get_min_vertex(void) const;

1222 24 get_primitive_min_vertex 4 1712 39 GeomPrimitive::get_primitive_min_vertex 0 1 350 337
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_min_vertex
//       Access: Published
//  Description: Returns the minimum vertex index number used by the
//               nth primitive in this object.
////////////////////////////////////////////////////////////////////
57
int GeomPrimitive::get_primitive_min_vertex(int n) const;

1223 14 get_max_vertex 4 1712 29 GeomPrimitive::get_max_vertex 0 1 351 328
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by all
//               the primitives in this object.
////////////////////////////////////////////////////////////////////
53
inline int GeomPrimitive::get_max_vertex(void) const;

1224 24 get_primitive_max_vertex 4 1712 39 GeomPrimitive::get_primitive_max_vertex 0 1 352 337
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_primitive_max_vertex
//       Access: Published
//  Description: Returns the maximum vertex index number used by the
//               nth primitive in this object.
////////////////////////////////////////////////////////////////////
57
int GeomPrimitive::get_primitive_max_vertex(int n) const;

1225 9 decompose 4 1712 24 GeomPrimitive::decompose 0 1 353 795
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::decompose
//       Access: Published
//  Description: Decomposes a complex primitive type into a simpler
//               primitive type, for instance triangle strips to
//               triangles, and returns a pointer to the new primitive
//               definition.  If the decomposition cannot be
//               performed, this might return the original object.
//
//               This method is useful for application code that wants
//               to iterate through the set of triangles on the
//               primitive without having to write handlers for each
//               possible kind of primitive type.
////////////////////////////////////////////////////////////////////
69
ConstPointerTo< GeomPrimitive > GeomPrimitive::decompose(void) const;

1226 6 rotate 4 1712 21 GeomPrimitive::rotate 0 1 354 739
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::rotate
//       Access: Published
//  Description: Returns a new primitive with the shade_model reversed
//               (if it is flat shaded), if possible.  If the
//               primitive type cannot be rotated, returns the
//               original primitive, unrotated.
//
//               If the current shade_model indicates
//               flat_vertex_last, this should bring the last vertex
//               to the first position; if it indicates
//               flat_vertex_first, this should bring the first vertex
//               to the last position.
////////////////////////////////////////////////////////////////////
66
ConstPointerTo< GeomPrimitive > GeomPrimitive::rotate(void) const;

1227 17 match_shade_model 4 1712 32 GeomPrimitive::match_shade_model 0 1 355 672
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::match_shade_model
//       Access: Published
//  Description: Returns a new primitive that is compatible with the
//               indicated shade model, if possible, or NULL if this
//               is not possible.
//
//               In most cases, this will return either NULL or the
//               original primitive.  In the case of a
//               SM_flat_first_vertex vs. a SM_flat_last_vertex (or
//               vice-versa), however, it will return a rotated
//               primitive.
////////////////////////////////////////////////////////////////////
106
ConstPointerTo< GeomPrimitive > GeomPrimitive::match_shade_model(GeomEnums::ShadeModel shade_model) const;

1228 13 get_num_bytes 4 1712 28 GeomPrimitive::get_num_bytes 0 1 356 322
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the primitive
//               and its index table(s).
////////////////////////////////////////////////////////////////////
45
int GeomPrimitive::get_num_bytes(void) const;

1229 19 get_data_size_bytes 4 1712 34 GeomPrimitive::get_data_size_bytes 0 1 357 308
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_data_size_bytes
//       Access: Published
//  Description: Returns the number of bytes stored in the vertices
//               array.
////////////////////////////////////////////////////////////////////
58
inline int GeomPrimitive::get_data_size_bytes(void) const;

1230 12 get_modified 4 1712 27 GeomPrimitive::get_modified 0 1 358 372
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the vertex index array is
//               modified.
////////////////////////////////////////////////////////////////////
57
inline UpdateSeq GeomPrimitive::get_modified(void) const;

1231 11 check_valid 4 1712 26 GeomPrimitive::check_valid 0 1 359 455
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::check_valid
//       Access: Published
//  Description: Verifies that the primitive only references vertices
//               that actually exist within the indicated
//               GeomVertexData.  Returns true if the primitive
//               appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
73
bool GeomPrimitive::check_valid(GeomVertexData const *vertex_data) const;

1232 6 output 4 1712 21 GeomPrimitive::output 0 1 360 230
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void GeomPrimitive::output(ostream &out) const;

1233 5 write 4 1712 20 GeomPrimitive::write 0 1 361 229
////////////////////////////////////////////////////////////////////
//     Function: GeomPrimitive::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
72
virtual void GeomPrimitive::write(ostream &out, int indent_level) const;

1234 14 get_class_type 4 1712 29 GeomPrimitive::get_class_type 0 1 362 0
54
static TypeHandle GeomPrimitive::get_class_type(void);

1235 12 TextureStage 4 1713 26 TextureStage::TextureStage 0 2 367 368 1216
// Filename: textureStage.I
// Created by:  masad (15Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Copy Constructor
//       Access: Published
//  Description: Initialize the texture stage from other
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Constructor
//       Access: Published
//  Description: Initialize the texture stage at construction
////////////////////////////////////////////////////////////////////
61
TextureStage::TextureStage(basic_string< char > const &name);

1236 10 operator = 4 1713 24 TextureStage::operator = 0 1 369 262
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::operator =
//       Access: Published
//  Description: just copy the members of other to this
////////////////////////////////////////////////////////////////////
56
void TextureStage::operator =(TextureStage const &copy);

1237 8 set_name 4 1713 22 TextureStage::set_name 0 1 370 260
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_name
//       Access: Published
//  Description: Changes the name of this texture stage
////////////////////////////////////////////////////////////////////
69
inline void TextureStage::set_name(basic_string< char > const &name);

1238 8 get_name 4 1713 22 TextureStage::get_name 0 1 371 260
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_name
//       Access: Published
//  Description: Returns the name of this texture stage
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &TextureStage::get_name(void) const;

1239 8 set_sort 4 1713 22 TextureStage::set_sort 0 1 372 768
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_sort
//       Access: Published
//  Description: Changes the order in which the texture associated
//               with this stage is rendered relative to the other
//               texture stages.  When geometry is rendered with
//               multiple textures, the textures are rendered in order
//               from the lowest sort number to the highest sort
//               number.
//
//               Also see set_priority(), which is used to select the
//               most important textures for rendering when some must
//               be omitted because of hardware limitations.
////////////////////////////////////////////////////////////////////
45
inline void TextureStage::set_sort(int sort);

1240 8 get_sort 4 1713 22 TextureStage::get_sort 0 1 373 267
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_sort
//       Access: Published
//  Description: Returns the sort order of this texture stage.
////////////////////////////////////////////////////////////////////
46
inline int TextureStage::get_sort(void) const;

1241 12 set_priority 4 1713 26 TextureStage::set_priority 0 1 374 919
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_priority
//       Access: Published
//  Description: Changes the relative importance of the texture
//               associated with this stage relative to the other
//               texture stages that are applied simultaneously.
//
//               This is unrelated to set_sort(), which controls the
//               order in which multiple textures are applied.  The
//               priority number is used to decide which of the
//               requested textures are to be selected for rendering
//               when more textures are requested than the hardware
//               will support.  The highest-priority n textures are
//               selected for rendering, and then rendered in order by
//               their sort factor.
////////////////////////////////////////////////////////////////////
53
inline void TextureStage::set_priority(int priority);

1242 12 get_priority 4 1713 26 TextureStage::get_priority 0 1 375 406
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_priority
//       Access: Published
//  Description: Returns the priority associated with this stage.
//
//               This is specially helpful for cards that do not
//               support more than n stages of multi-texturing.
////////////////////////////////////////////////////////////////////
50
inline int TextureStage::get_priority(void) const;

1243 10 operator < 4 1713 24 TextureStage::operator < 0 1 376 257
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::opertor <
//       Access: Published
//  Description: Compare if the sort order is lower
////////////////////////////////////////////////////////////////////
70
inline bool TextureStage::operator <(TextureStage const &other) const;

1244 17 set_texcoord_name 4 1713 31 TextureStage::set_texcoord_name 0 2 377 378 826
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_texcoord_name
//       Access: Published
//  Description: Indicate which set of UV's this texture stage will
//               use.  Geometry may have any number of associated UV
//               sets, each of which must have a unique name.
////////////////////////////////////////////////////////////////////
64
inline void TextureStage::set_texcoord_name(InternalName *name);

1245 17 get_texcoord_name 4 1713 31 TextureStage::get_texcoord_name 0 1 379 255
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_texcoord_name
//       Access: Published
//  Description: Returns the InternalName
////////////////////////////////////////////////////////////////////
65
inline InternalName *TextureStage::get_texcoord_name(void) const;

1246 8 set_mode 4 1713 22 TextureStage::set_mode 0 1 380 256
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_mode
//       Access: Published
//  Description: Set the mode of this texture stage
////////////////////////////////////////////////////////////////////
60
inline void TextureStage::set_mode(TextureStage::Mode mode);

1247 8 get_mode 4 1713 22 TextureStage::get_mode 0 1 381 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_mode
//       Access: Published
//  Description: Return the mode of this stage
////////////////////////////////////////////////////////////////////
61
inline TextureStage::Mode TextureStage::get_mode(void) const;

1248 9 set_color 4 1713 23 TextureStage::set_color 0 1 382 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_color
//       Access: Published
//  Description: Set the color for this stage
////////////////////////////////////////////////////////////////////
61
inline void TextureStage::set_color(LVecBase4f const &color);

1249 9 get_color 4 1713 23 TextureStage::get_color 0 1 383 254
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_color
//       Access: Published
//  Description: return the color for this stage
////////////////////////////////////////////////////////////////////
54
inline LVecBase4f TextureStage::get_color(void) const;

1250 13 set_rgb_scale 4 1713 27 TextureStage::set_rgb_scale 0 1 384 490
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when the mode is
//               CM_combine.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
55
inline void TextureStage::set_rgb_scale(int rgb_scale);

1251 13 get_rgb_scale 4 1713 27 TextureStage::get_rgb_scale 0 1 385 247
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_rgb_scale
//       Access: Published
//  Description: See set_rgb_scale().
////////////////////////////////////////////////////////////////////
51
inline int TextureStage::get_rgb_scale(void) const;

1252 15 set_alpha_scale 4 1713 29 TextureStage::set_alpha_scale 0 1 386 465
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when the mode is CM_combine.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
59
inline void TextureStage::set_alpha_scale(int alpha_scale);

1253 15 get_alpha_scale 4 1713 29 TextureStage::get_alpha_scale 0 1 387 251
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_alpha_scale
//       Access: Published
//  Description: See set_alpha_scale().
////////////////////////////////////////////////////////////////////
53
inline int TextureStage::get_alpha_scale(void) const;

1254 16 set_saved_result 4 1713 30 TextureStage::set_saved_result 0 1 388 825
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage will be supplied as the
//               "last_saved_result" source for any future stages,
//               until the next TextureStage with a saved_result set
//               true is encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
62
inline void TextureStage::set_saved_result(bool saved_result);

1255 16 get_saved_result 4 1713 30 TextureStage::get_saved_result 0 1 389 324
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
55
inline bool TextureStage::get_saved_result(void) const;

1256 15 set_combine_rgb 4 1713 29 TextureStage::set_combine_rgb 0 3 390 391 392 1213
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_rgb
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
////////////////////////////////////////////////////////////////////
150
inline void TextureStage::set_combine_rgb(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0);

1257 20 get_combine_rgb_mode 4 1713 34 TextureStage::get_combine_rgb_mode 0 1 393 258
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_mode
//       Access: Published
//  Description: Get the combine_rgb_mode
////////////////////////////////////////////////////////////////////
80
inline TextureStage::CombineMode TextureStage::get_combine_rgb_mode(void) const;

1258 28 get_num_combine_rgb_operands 4 1713 42 TextureStage::get_num_combine_rgb_operands 0 1 394 401
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_rgb_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_rgb_sourceN() and
//               get_combine_rgb_operandN().
////////////////////////////////////////////////////////////////////
66
inline int TextureStage::get_num_combine_rgb_operands(void) const;

1259 23 get_combine_rgb_source0 4 1713 37 TextureStage::get_combine_rgb_source0 0 1 395 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source0
//       Access: Published
//  Description: Get source0 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source0(void) const;

1260 24 get_combine_rgb_operand0 4 1713 38 TextureStage::get_combine_rgb_operand0 0 1 396 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand0
//       Access: Published
//  Description: Get operand0 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand0(void) const;

1261 23 get_combine_rgb_source1 4 1713 37 TextureStage::get_combine_rgb_source1 0 1 397 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source1
//       Access: Published
//  Description: Get source1 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source1(void) const;

1262 24 get_combine_rgb_operand1 4 1713 38 TextureStage::get_combine_rgb_operand1 0 1 398 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand1
//       Access: Published
//  Description: Get operand1 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand1(void) const;

1263 23 get_combine_rgb_source2 4 1713 37 TextureStage::get_combine_rgb_source2 0 1 399 268
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_source2
//       Access: Published
//  Description: Get source2 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
85
inline TextureStage::CombineSource TextureStage::get_combine_rgb_source2(void) const;

1264 24 get_combine_rgb_operand2 4 1713 38 TextureStage::get_combine_rgb_operand2 0 1 400 270
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_rgb_operand2
//       Access: Published
//  Description: Get operand2 of combine_rgb_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineOperand TextureStage::get_combine_rgb_operand2(void) const;

1265 17 set_combine_alpha 4 1713 31 TextureStage::set_combine_alpha 0 3 401 402 403 1219
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_replace only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a two-parameter operation.  Specifically,
//               this is everything except for CM_replace and
//               CM_interpolate.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStage::set_combine_alpha
//       Access: Published
//  Description: Specifies any of the CombineMode values that
//               represent a one-parameter operation.  Specifically,
//               this is CM_interpolate only.
////////////////////////////////////////////////////////////////////
152
inline void TextureStage::set_combine_alpha(TextureStage::CombineMode mode, TextureStage::CombineSource source0, TextureStage::CombineOperand operand0);

1266 22 get_combine_alpha_mode 4 1713 36 TextureStage::get_combine_alpha_mode 0 1 404 253
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha
//       Access: Published
//  Description: Get combine_alpha_mode
////////////////////////////////////////////////////////////////////
82
inline TextureStage::CombineMode TextureStage::get_combine_alpha_mode(void) const;

1267 30 get_num_combine_alpha_operands 4 1713 44 TextureStage::get_num_combine_alpha_operands 0 1 405 407
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_num_combine_alpha_operands
//       Access: Published
//  Description: Returns the number of meaningful operands that may be
//               retrieved via get_combine_alpha_sourceN() and
//               get_combine_alpha_operandN().
////////////////////////////////////////////////////////////////////
68
inline int TextureStage::get_num_combine_alpha_operands(void) const;

1268 25 get_combine_alpha_source0 4 1713 39 TextureStage::get_combine_alpha_source0 0 1 406 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source0
//       Access: Published
//  Description: Get source0 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source0(void) const;

1269 26 get_combine_alpha_operand0 4 1713 40 TextureStage::get_combine_alpha_operand0 0 1 407 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand0
//       Access: Published
//  Description: Get operand0 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand0(void) const;

1270 25 get_combine_alpha_source1 4 1713 39 TextureStage::get_combine_alpha_source1 0 1 408 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source1
//       Access: Published
//  Description: Get source1 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source1(void) const;

1271 26 get_combine_alpha_operand1 4 1713 40 TextureStage::get_combine_alpha_operand1 0 1 409 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand1
//       Access: Published
//  Description: Get operand1 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand1(void) const;

1272 25 get_combine_alpha_source2 4 1713 39 TextureStage::get_combine_alpha_source2 0 1 410 272
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_source2
//       Access: Published
//  Description: Get source2 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
87
inline TextureStage::CombineSource TextureStage::get_combine_alpha_source2(void) const;

1273 26 get_combine_alpha_operand2 4 1713 40 TextureStage::get_combine_alpha_operand2 0 1 411 274
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_combine_alpha_operand2
//       Access: Published
//  Description: Get operand2 of combine_alpha_mode
////////////////////////////////////////////////////////////////////
89
inline TextureStage::CombineOperand TextureStage::get_combine_alpha_operand2(void) const;

1274 10 uses_color 4 1713 24 TextureStage::uses_color 0 1 412 364
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::uses_color
//       Access: Published
//  Description: Returns true if the TextureStage makes use of
//               whatever color is specified in set_color(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool TextureStage::uses_color(void) const;

1275 20 involves_color_scale 4 1713 34 TextureStage::involves_color_scale 0 1 413 377
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::involves_color_scale
//       Access: Published
//  Description: Returns true if the TextureStage is affected by the
//               setting of the current ColorScaleAttrib, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool TextureStage::involves_color_scale(void) const;

1276 5 write 4 1713 19 TextureStage::write 0 1 414 256
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Writes the details of this stage
////////////////////////////////////////////////////////////////////
45
void TextureStage::write(ostream &out) const;

1277 6 output 4 1713 20 TextureStage::output 0 1 415 249
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::Destructor
//       Access: Published
//  Description: Just a single line output
////////////////////////////////////////////////////////////////////
46
void TextureStage::output(ostream &out) const;

1278 11 get_default 4 1713 25 TextureStage::get_default 0 1 416 447
////////////////////////////////////////////////////////////////////
//     Function: TextureStage::get_default
//       Access: Published, Static
//  Description: Returns the default TextureStage that will be used
//               for all texturing that does not name a particular
//               stage.  This generally handles the normal
//               single-texture case.
////////////////////////////////////////////////////////////////////
60
static inline TextureStage *TextureStage::get_default(void);

1279 14 get_class_type 4 1713 28 TextureStage::get_class_type 0 1 417 0
53
static TypeHandle TextureStage::get_class_type(void);

1280 37 upcast_to_TypedWritableReferenceCount 12 1718 43 Geom::upcast_to_TypedWritableReferenceCount 0 1 464 47
upcast from Geom to TypedWritableReferenceCount
79
TypedWritableReferenceCount *Geom::upcast_to_TypedWritableReferenceCount(void);

1281 16 downcast_to_Geom 12 1699 45 TypedWritableReferenceCount::downcast_to_Geom 0 1 465 49
downcast from TypedWritableReferenceCount to Geom
58
Geom *TypedWritableReferenceCount::downcast_to_Geom(void);

1282 19 upcast_to_GeomEnums 12 1718 25 Geom::upcast_to_GeomEnums 0 1 466 29
upcast from Geom to GeomEnums
43
GeomEnums *Geom::upcast_to_GeomEnums(void);

1283 16 downcast_to_Geom 12 1689 27 GeomEnums::downcast_to_Geom 0 1 467 31
downcast from GeomEnums to Geom
40
Geom *GeomEnums::downcast_to_Geom(void);

1284 4 Geom 4 1718 10 Geom::Geom 0 1 418 477
////////////////////////////////////////////////////////////////////
//     Function: Geom::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Geom::Copy Constructor
//       Access: Protected
//  Description: Use make_copy() to duplicate a Geom.
////////////////////////////////////////////////////////////////////
39
Geom::Geom(GeomVertexData const *data);

1285 10 operator = 4 1718 16 Geom::operator = 0 1 419 460
////////////////////////////////////////////////////////////////////
//     Function: Geom::Copy Assignment Operator
//       Access: Published
//  Description: The copy assignment operator is not pipeline-safe.
//               This will completely obliterate all stages of the
//               pipeline, so don't do it for a Geom that is actively
//               being used for rendering.
////////////////////////////////////////////////////////////////////
40
void Geom::operator =(Geom const &copy);

1286 5 ~Geom 4 1718 11 Geom::~Geom 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: Geom::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
26
virtual Geom::~Geom(void);

1287 12 operator new 4 1718 18 Geom::operator new 0 1 420 0
51
inline void *Geom::operator new(unsigned int size);

1288 15 operator delete 4 1718 21 Geom::operator delete 0 0 0
45
inline void Geom::operator delete(void *ptr);

1289 9 make_copy 4 1718 15 Geom::make_copy 0 1 421 455
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_copy
//       Access: Public, Virtual
//  Description: Returns a newly-allocated Geom that is a shallow copy
//               of this one.  It will be a different Geom pointer,
//               but its internal data may or may not be shared with
//               that of the original Geom.
////////////////////////////////////////////////////////////////////
42
virtual Geom *Geom::make_copy(void) const;

1290 18 get_primitive_type 4 1718 24 Geom::get_primitive_type 0 1 422 1332
// Filename: geom.I
// Created by:  drose (06Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive_type
//       Access: Published
//  Description: Returns the fundamental primitive type that is common
//               to all GeomPrimitives added within the Geom.  All
//               nested primitives within a particular Geom must be
//               the same type (that is, you can mix triangles and
//               tristrips, because they are both the same fundamental
//               type PT_polygons, but you cannot mix triangles and
//               points withn the same Geom).
////////////////////////////////////////////////////////////////////
69
inline GeomEnums::PrimitiveType Geom::get_primitive_type(void) const;

1291 15 get_shade_model 4 1718 21 Geom::get_shade_model 0 1 423 359
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_shade_model
//       Access: Published
//  Description: Returns the shade model common to all of the
//               individual GeomPrimitives that have been added to the
//               geom.
////////////////////////////////////////////////////////////////////
63
inline GeomEnums::ShadeModel Geom::get_shade_model(void) const;

1292 18 get_geom_rendering 4 1718 24 Geom::get_geom_rendering 0 1 424 374
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_geom_rendering
//       Access: Published
//  Description: Returns the set of GeomRendering bits that represent
//               the rendering properties required to properly render
//               this Geom.
////////////////////////////////////////////////////////////////////
48
inline int Geom::get_geom_rendering(void) const;

1293 14 get_usage_hint 4 1718 20 Geom::get_usage_hint 0 1 425 381
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_usage_hint
//       Access: Published
//  Description: Returns the minimum (i.e. most dynamic) usage_hint
//               among all of the individual GeomPrimitives that have
//               been added to the geom.
////////////////////////////////////////////////////////////////////
61
inline GeomEnums::UsageHint Geom::get_usage_hint(void) const;

1294 14 set_usage_hint 4 1718 20 Geom::set_usage_hint 0 1 426 558
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_usage_hint
//       Access: Published
//  Description: Changes the UsageHint hint for all of the primitives
//               on this Geom to the same value.  See
//               get_usage_hint().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
void Geom::set_usage_hint(GeomEnums::UsageHint usage_hint);

1295 15 get_vertex_data 4 1718 21 Geom::get_vertex_data 0 1 427 387
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_vertex_data
//       Access: Published
//  Description: Returns a const pointer to the GeomVertexData,
//               for application code to directly examine (but not
//               modify) the geom's underlying data.
////////////////////////////////////////////////////////////////////
74
inline ConstPointerTo< GeomVertexData > Geom::get_vertex_data(void) const;

1296 18 modify_vertex_data 4 1718 24 Geom::modify_vertex_data 0 1 428 583
////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_vertex_data
//       Access: Published
//  Description: Returns a modifiable pointer to the GeomVertexData,
//               so that application code may directly maniuplate the
//               geom's underlying data.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
PointerTo< GeomVertexData > Geom::modify_vertex_data(void);

1297 15 set_vertex_data 4 1718 21 Geom::set_vertex_data 0 1 429 512
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_vertex_data
//       Access: Published
//  Description: Replaces the Geom's underlying vertex data table with
//               a completely new table.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
55
void Geom::set_vertex_data(GeomVertexData const *data);

1298 15 offset_vertices 4 1718 21 Geom::offset_vertices 0 1 430 847
////////////////////////////////////////////////////////////////////
//     Function: Geom::offset_vertices
//       Access: Published
//  Description: Replaces a Geom's vertex table with a new table, and
//               simultaneously adds the indicated offset to all
//               vertex references within the Geom's primitives.  This
//               is intended to be used to combine multiple
//               GeomVertexDatas from different Geoms into a single
//               big buffer, with each Geom referencing a subset of
//               the vertices in the buffer.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
67
void Geom::offset_vertices(GeomVertexData const *data, int offset);

1299 15 make_nonindexed 4 1718 21 Geom::make_nonindexed 0 1 431 728
////////////////////////////////////////////////////////////////////
//     Function: Geom::make_nonindexed
//       Access: Published
//  Description: Converts the geom from indexed to nonindexed by
//               duplicating vertices as necessary.  If composite_only
//               is true, then only composite primitives such as
//               trifans and tristrips are converted.  Returns the
//               number of GeomPrimitive objects converted.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
47
int Geom::make_nonindexed(bool composite_only);

1300 18 get_num_primitives 4 1718 24 Geom::get_num_primitives 0 1 432 395
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_primitives
//       Access: Published
//  Description: Returns the number of GeomPrimitive objects stored
//               within the Geom, each of which represents a number of
//               primitives of a particular type.
////////////////////////////////////////////////////////////////////
48
inline int Geom::get_num_primitives(void) const;

1301 13 get_primitive 4 1718 19 Geom::get_primitive 0 1 433 464
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_primitive
//       Access: Published
//  Description: Returns a const pointer to the ith GeomPrimitive
//               object stored within the Geom.  Use this call only to
//               inspect the ith object; use modify_primitive() or
//               set_primitive() if you want to modify it.
////////////////////////////////////////////////////////////////////
61
inline GeomPrimitive const *Geom::get_primitive(int i) const;

1302 16 modify_primitive 4 1718 22 Geom::modify_primitive 0 1 434 632
////////////////////////////////////////////////////////////////////
//     Function: Geom::modify_primitive
//       Access: Published
//  Description: Returns a modifiable pointer to the ith GeomPrimitive
//               object stored within the Geom, so application code
//               can directly manipulate the properties of this
//               primitive.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
52
inline GeomPrimitive *Geom::modify_primitive(int i);

1303 13 set_primitive 4 1718 19 Geom::set_primitive 0 1 435 514
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_primitive
//       Access: Published
//  Description: Replaces the ith GeomPrimitive object stored within
//               the Geom with the new object.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
64
void Geom::set_primitive(int i, GeomPrimitive const *primitive);

1304 13 add_primitive 4 1718 19 Geom::add_primitive 0 1 436 637
////////////////////////////////////////////////////////////////////
//     Function: Geom::add_primitive
//       Access: Published
//  Description: Adds a new GeomPrimitive structure to the Geom
//               object.  This specifies a particular subset of
//               vertices that are used to define geometric primitives
//               of the indicated type.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
57
void Geom::add_primitive(GeomPrimitive const *primitive);

1305 16 remove_primitive 4 1718 22 Geom::remove_primitive 0 1 437 459
////////////////////////////////////////////////////////////////////
//     Function: Geom::remove_primitive
//       Access: Published
//  Description: Removes the ith primitive from the list.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
35
void Geom::remove_primitive(int i);

1306 16 clear_primitives 4 1718 22 Geom::clear_primitives 0 1 438 633
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_primitives
//       Access: Published
//  Description: Removes all the primitives from the Geom object (but
//               keeps the same table of vertices).  You may then
//               re-add primitives one at a time via calls to
//               add_primitive().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
34
void Geom::clear_primitives(void);

1307 9 decompose 4 1718 15 Geom::decompose 0 1 439 354
////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::decompose().
////////////////////////////////////////////////////////////////////
53
inline PointerTo< Geom > Geom::decompose(void) const;

1308 6 rotate 4 1718 12 Geom::rotate 0 1 440 345
////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               returning the result.  See
//               GeomPrimitive::rotate().
////////////////////////////////////////////////////////////////////
50
inline PointerTo< Geom > Geom::rotate(void) const;

1309 5 unify 4 1718 11 Geom::unify 0 1 441 488
////////////////////////////////////////////////////////////////////
//     Function: Geom::unify
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single primitive object.  This may
//               require decomposing the primitives if, for instance,
//               the Geom contains both triangle strips and triangle
//               fans.
////////////////////////////////////////////////////////////////////
49
inline PointerTo< Geom > Geom::unify(void) const;

1310 18 decompose_in_place 4 1718 24 Geom::decompose_in_place 0 1 442 568
////////////////////////////////////////////////////////////////////
//     Function: Geom::decompose_in_place
//       Access: Published
//  Description: Decomposes all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::decompose().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
36
void Geom::decompose_in_place(void);

1311 15 rotate_in_place 4 1718 21 Geom::rotate_in_place 0 1 443 559
////////////////////////////////////////////////////////////////////
//     Function: Geom::rotate_in_place
//       Access: Published
//  Description: Rotates all of the primitives within this Geom,
//               leaving the results in place.  See
//               GeomPrimitive::rotate().
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
33
void Geom::rotate_in_place(void);

1312 14 unify_in_place 4 1718 20 Geom::unify_in_place 0 1 444 694
////////////////////////////////////////////////////////////////////
//     Function: Geom::unify_in_place
//       Access: Published
//  Description: Unifies all of the primitives contained within this
//               Geom into a single primitive object.  This may
//               require decomposing the primitives if, for instance,
//               the Geom contains both triangle strips and triangle
//               fans.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
32
void Geom::unify_in_place(void);

1313 20 copy_primitives_from 4 1718 26 Geom::copy_primitives_from 0 1 445 792
////////////////////////////////////////////////////////////////////
//     Function: Geom::copy_primitives_from
//       Access: Published, Virtual
//  Description: Copies the primitives from the indicated Geom into
//               this one.  This does require that both Geoms contain
//               the same fundamental type primitives, both have a
//               compatible shade model, and both use the same
//               GeomVertexData.  Both Geoms must also be the same
//               specific class type (i.e. if one is a GeomTextGlyph,
//               they both must be.)
//
//               Returns true if the copy is successful, or false
//               otherwise (because the Geoms were mismatched).
////////////////////////////////////////////////////////////////////
59
virtual bool Geom::copy_primitives_from(Geom const *other);

1314 13 get_num_bytes 4 1718 19 Geom::get_num_bytes 0 1 446 341
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_num_bytes
//       Access: Published
//  Description: Returns the number of bytes consumed by the geom and
//               its primitives (but not including its vertex table).
////////////////////////////////////////////////////////////////////
36
int Geom::get_num_bytes(void) const;

1315 12 get_modified 4 1718 18 Geom::get_modified 0 1 447 564
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time any of the primitives in
//               the Geom is modified, or the set of primitives is
//               modified.  However, this does not include
//               modifications to the vertex data, which should be
//               tested separately.
////////////////////////////////////////////////////////////////////
48
inline UpdateSeq Geom::get_modified(void) const;

1316 18 transform_vertices 4 1718 24 Geom::transform_vertices 0 1 448 808
////////////////////////////////////////////////////////////////////
//     Function: Geom::transform_vertices
//       Access: Published
//  Description: Applies the indicated transform to all of the
//               vertices in the Geom.  If the Geom happens to share a
//               vertex table with another Geom, this operation will
//               duplicate the vertex table instead of breaking the
//               other Geom; however, if multiple Geoms with shared
//               tables are transformed by the same matrix, they will
//               no longer share tables after the operation.  Consider
//               using the GeomTransformer if you will be applying the
//               same transform to multiple Geoms.
////////////////////////////////////////////////////////////////////
52
void Geom::transform_vertices(LMatrix4f const &mat);

1317 11 check_valid 4 1718 17 Geom::check_valid 0 2 449 450 925
////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the geom's GeomVertexData.  Returns true if the geom
//               appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Geom::check_valid
//       Access: Published
//  Description: Verifies that the all of the primitives within the
//               geom reference vertices that actually exist within
//               the indicated GeomVertexData.  Returns true if the
//               geom appears to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
35
bool Geom::check_valid(void) const;

1318 10 get_bounds 4 1718 16 Geom::get_bounds 0 1 451 257
////////////////////////////////////////////////////////////////////
//     Function: Geom::get_bounds
//       Access: Published
//  Description: Returns the bounding volume for the Geom.
////////////////////////////////////////////////////////////////////
62
ConstPointerTo< BoundingVolume > Geom::get_bounds(void) const;

1319 17 mark_bounds_stale 4 1718 23 Geom::mark_bounds_stale 0 1 452 390
////////////////////////////////////////////////////////////////////
//     Function: Geom::mark_bounds_stale
//       Access: Published
//  Description: Marks the bounding volume of the Geom as stale so
//               that it should be recomputed.  Usually it is not
//               necessary to call this explicitly.
////////////////////////////////////////////////////////////////////
48
inline void Geom::mark_bounds_stale(void) const;

1320 10 set_bounds 4 1718 16 Geom::set_bounds 0 1 453 726
////////////////////////////////////////////////////////////////////
//     Function: Geom::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed; call clear_bounds() if you would like to
//               return the bounding volume to its default behavior.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
59
inline void Geom::set_bounds(BoundingVolume const *volume);

1321 12 clear_bounds 4 1718 18 Geom::clear_bounds 0 1 454 614
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the bounding volume to be
//               automatically computed once more based on the
//               vertices.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
37
inline void Geom::clear_bounds(void);

1322 6 output 4 1718 12 Geom::output 0 1 455 221
////////////////////////////////////////////////////////////////////
//     Function: Geom::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual void Geom::output(ostream &out) const;

1323 5 write 4 1718 11 Geom::write 0 2 456 457 220
////////////////////////////////////////////////////////////////////
//     Function: Geom::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
69
virtual void Geom::write(ostream &out, int indent_level = (0)) const;

1324 11 clear_cache 4 1718 17 Geom::clear_cache 0 1 458 546
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom().
//
//               This blows away the entire cache, upstream and
//               downstream the pipeline.  Use clear_cache_stage()
//               instead if you only want to blow away the cache at
//               the current stage and upstream.
////////////////////////////////////////////////////////////////////
29
void Geom::clear_cache(void);

1325 17 clear_cache_stage 4 1718 23 Geom::clear_cache_stage 0 1 459 598
////////////////////////////////////////////////////////////////////
//     Function: Geom::clear_cache_stage
//       Access: Published
//  Description: Removes all of the previously-cached results of
//               munge_geom(), at the current pipeline stage and
//               upstream.  Does not affect the downstream cache.
//
//               Don't call this in a downstream thread unless you
//               don't mind it blowing away other changes you might
//               have recently made in an upstream thread.
////////////////////////////////////////////////////////////////////
35
void Geom::clear_cache_stage(void);

1326 7 prepare 4 1718 13 Geom::prepare 0 1 460 640
////////////////////////////////////////////////////////////////////
//     Function: Geom::prepare
//       Access: Published
//  Description: Indicates that the geom should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               geom is already loaded into geom memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               geoms from a user interface standpoint.
////////////////////////////////////////////////////////////////////
62
void Geom::prepare(PreparedGraphicsObjects *prepared_objects);

1327 7 release 4 1718 13 Geom::release 0 1 461 388
////////////////////////////////////////////////////////////////////
//     Function: Geom::release
//       Access: Published
//  Description: Frees the geom context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
62
bool Geom::release(PreparedGraphicsObjects *prepared_objects);

1328 11 release_all 4 1718 17 Geom::release_all 0 1 462 386
////////////////////////////////////////////////////////////////////
//     Function: Geom::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the geom has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
28
int Geom::release_all(void);

1329 14 get_class_type 4 1718 20 Geom::get_class_type 0 1 463 0
45
static TypeHandle Geom::get_class_type(void);

1330 9 GeomLines 4 1719 20 GeomLines::GeomLines 0 2 468 469 451
////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomLines::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
GeomLines::GeomLines(GeomEnums::UsageHint usage_hint);

1331 14 get_class_type 4 1719 25 GeomLines::get_class_type 0 1 470 0
50
static TypeHandle GeomLines::get_class_type(void);

1332 14 GeomLinestrips 4 1720 30 GeomLinestrips::GeomLinestrips 0 2 471 472 461
////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomLinestrips::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
GeomLinestrips::GeomLinestrips(GeomEnums::UsageHint usage_hint);

1333 14 get_class_type 4 1720 30 GeomLinestrips::get_class_type 0 1 473 0
55
static TypeHandle GeomLinestrips::get_class_type(void);

1334 10 GeomPoints 4 1721 22 GeomPoints::GeomPoints 0 2 474 475 453
////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomPoints::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
GeomPoints::GeomPoints(GeomEnums::UsageHint usage_hint);

1335 14 get_class_type 4 1721 26 GeomPoints::get_class_type 0 1 476 0
51
static TypeHandle GeomPoints::get_class_type(void);

1336 13 GeomTriangles 4 1722 28 GeomTriangles::GeomTriangles 0 2 477 478 459
////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTriangles::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
GeomTriangles::GeomTriangles(GeomEnums::UsageHint usage_hint);

1337 14 get_class_type 4 1722 29 GeomTriangles::get_class_type 0 1 479 0
54
static TypeHandle GeomTriangles::get_class_type(void);

1338 11 GeomTrifans 4 1723 24 GeomTrifans::GeomTrifans 0 2 480 481 455
////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTrifans::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
GeomTrifans::GeomTrifans(GeomEnums::UsageHint usage_hint);

1339 14 get_class_type 4 1723 27 GeomTrifans::get_class_type 0 1 482 0
52
static TypeHandle GeomTrifans::get_class_type(void);

1340 13 GeomTristrips 4 1724 28 GeomTristrips::GeomTristrips 0 2 483 484 459
////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomTristrips::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
GeomTristrips::GeomTristrips(GeomEnums::UsageHint usage_hint);

1341 14 get_class_type 4 1724 29 GeomTristrips::get_class_type 0 1 485 0
54
static TypeHandle GeomTristrips::get_class_type(void);

1342 16 GeomVertexReader 4 1725 34 GeomVertexReader::GeomVertexReader 0 7 486 487 488 489 490 491 492 3165
// Filename: geomVertexReader.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexReader.  You must use
//               the assignment operator to assign a valid
//               GeomVertexReader to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated data object.  This flavor creates the
//               reader specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Constructor
//       Access: Published
//  Description: Constructs a new reader to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline GeomVertexReader::GeomVertexReader(void);

1343 10 operator = 4 1725 28 GeomVertexReader::operator = 0 1 493 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void GeomVertexReader::operator =(GeomVertexReader const &copy);

1344 17 ~GeomVertexReader 4 1725 35 GeomVertexReader::~GeomVertexReader 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexReader::~GeomVertexReader(void);

1345 15 get_vertex_data 4 1725 33 GeomVertexReader::get_vertex_data 0 1 494 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               reader is processing.  This may return NULL if the
//               reader was constructed with just an array pointer.
////////////////////////////////////////////////////////////////////
75
inline GeomVertexData const *GeomVertexReader::get_vertex_data(void) const;

1346 14 get_array_data 4 1725 32 GeomVertexReader::get_array_data 0 1 495 325
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               reader is currently processing.
////////////////////////////////////////////////////////////////////
79
inline GeomVertexArrayData const *GeomVertexReader::get_array_data(void) const;

1347 10 set_column 4 1725 28 GeomVertexReader::set_column 0 4 496 497 498 499 2514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the data type with the
//               indicated name.
//
//               This also resets the read row number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_column
//       Access: Published
//  Description: Sets up the reader to use the indicated column
//               description on the given array.
//
//               This also resets the current read row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexReader::set_column(int column);

1348 10 has_column 4 1725 28 GeomVertexReader::has_column 0 1 500 364
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexReader::has_column(void) const;

1349 9 get_array 4 1725 27 GeomVertexReader::get_array 0 1 501 323
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the reader is working on.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexReader::get_array(void) const;

1350 10 get_column 4 1725 28 GeomVertexReader::get_column 0 1 502 316
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               reader is working on.
////////////////////////////////////////////////////////////////////
72
inline GeomVertexColumn const *GeomVertexReader::get_column(void) const;

1351 7 set_row 4 1725 25 GeomVertexReader::set_row 0 1 503 533
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               reader will begin reading from the indicated row;
//               each subsequent get_data*() call will return the data
//               from the subsequent row.  If set_column() is called,
//               the reader will return to this row.
////////////////////////////////////////////////////////////////////
47
inline void GeomVertexReader::set_row(int row);

1352 13 get_start_row 4 1725 31 GeomVertexReader::get_start_row 0 1 504 375
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_start_row
//       Access: Published
//  Description: Returns the row index at which the reader started.
//               It will return to this row if you reset the current
//               column.
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexReader::get_start_row(void) const;

1353 12 get_read_row 4 1725 30 GeomVertexReader::get_read_row 0 1 505 339
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_read_row
//       Access: Published
//  Description: Returns the row index from which the data will be
//               retrieved by the next call to get_data*().
////////////////////////////////////////////////////////////////////
54
inline int GeomVertexReader::get_read_row(void) const;

1354 9 is_at_end 4 1725 27 GeomVertexReader::is_at_end 0 1 506 440
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::is_at_end
//       Access: Published
//  Description: Returns true if the reader is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to get_data*() will result in a
//               crash.
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexReader::is_at_end(void) const;

1355 10 get_data1f 4 1725 28 GeomVertexReader::get_data1f 0 1 507 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
48
inline float GeomVertexReader::get_data1f(void);

1356 10 get_data2f 4 1725 28 GeomVertexReader::get_data2f 0 1 508 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f const &GeomVertexReader::get_data2f(void);

1357 10 get_data3f 4 1725 28 GeomVertexReader::get_data3f 0 1 509 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f const &GeomVertexReader::get_data3f(void);

1358 10 get_data4f 4 1725 28 GeomVertexReader::get_data4f 0 1 510 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4f
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &GeomVertexReader::get_data4f(void);

1359 10 get_data1i 4 1725 28 GeomVertexReader::get_data1i 0 1 511 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data1i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 1-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
46
inline int GeomVertexReader::get_data1i(void);

1360 10 get_data2i 4 1725 28 GeomVertexReader::get_data2i 0 1 512 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data2i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 2-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data2i(void);

1361 10 get_data3i 4 1725 28 GeomVertexReader::get_data3i 0 1 513 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data3i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 3-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data3i(void);

1362 10 get_data4i 4 1725 28 GeomVertexReader::get_data4i 0 1 514 369
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::get_data4i
//       Access: Published
//  Description: Returns the data associated with the read row,
//               expressed as a 4-component value, and advances the
//               read row.
////////////////////////////////////////////////////////////////////
53
inline int const *GeomVertexReader::get_data4i(void);

1363 6 output 4 1725 24 GeomVertexReader::output 0 1 515 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexReader::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexReader::output(ostream &out) const;

1364 16 GeomVertexWriter 4 1726 34 GeomVertexWriter::GeomVertexWriter 0 7 516 517 518 519 520 521 522 3165
// Filename: geomVertexWriter.I
// Created by:  drose (25Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexWriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexWriter to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated data object.  This flavor creates the
//               writer specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Constructor
//       Access: Published
//  Description: Constructs a new writer to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline GeomVertexWriter::GeomVertexWriter(void);

1365 10 operator = 4 1726 28 GeomVertexWriter::operator = 0 1 523 242
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline void GeomVertexWriter::operator =(GeomVertexWriter const &copy);

1366 17 ~GeomVertexWriter 4 1726 35 GeomVertexWriter::~GeomVertexWriter 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline GeomVertexWriter::~GeomVertexWriter(void);

1367 15 get_vertex_data 4 1726 33 GeomVertexWriter::get_vertex_data 0 1 524 408
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               writer is processing.  This may return NULL if the
//               writer was constructed with just an array pointer.
////////////////////////////////////////////////////////////////////
69
inline GeomVertexData *GeomVertexWriter::get_vertex_data(void) const;

1368 14 get_array_data 4 1726 32 GeomVertexWriter::get_array_data 0 1 525 325
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               writer is currently processing.
////////////////////////////////////////////////////////////////////
73
inline GeomVertexArrayData *GeomVertexWriter::get_array_data(void) const;

1369 10 set_column 4 1726 28 GeomVertexWriter::set_column 0 4 526 527 528 529 2514
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write row number to the start
//               row (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the data type with the
//               indicated name.
//
//               This also resets the write number to the start row
//               (the same value passed to a previous call to
//               set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_column
//       Access: Published
//  Description: Sets up the writer to use the indicated column
//               description on the given array.
//
//               This also resets the current write row number to the
//               start row (the same value passed to a previous call
//               to set_row(), or 0 if set_row() was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexWriter::set_column(int column);

1370 10 has_column 4 1726 28 GeomVertexWriter::has_column 0 1 530 364
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
////////////////////////////////////////////////////////////////////
53
inline bool GeomVertexWriter::has_column(void) const;

1371 9 get_array 4 1726 27 GeomVertexWriter::get_array 0 1 531 323
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the writer is working on.
////////////////////////////////////////////////////////////////////
51
inline int GeomVertexWriter::get_array(void) const;

1372 10 get_column 4 1726 28 GeomVertexWriter::get_column 0 1 532 316
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               writer is working on.
////////////////////////////////////////////////////////////////////
72
inline GeomVertexColumn const *GeomVertexWriter::get_column(void) const;

1373 7 set_row 4 1726 25 GeomVertexWriter::set_row 0 1 533 530
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_row
//       Access: Published
//  Description: Sets the start row to the indicated value.  The
//               writer will begin writing to the indicated row;
//               each subsequent set_data*() call will store the data
//               into the subsequent row.  If set_column() is called,
//               the writer will return to this row.
////////////////////////////////////////////////////////////////////
47
inline void GeomVertexWriter::set_row(int row);

1374 13 get_start_row 4 1726 31 GeomVertexWriter::get_start_row 0 1 534 376
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the writer
//               started.  It will return to this row if you reset
//               the current column.
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexWriter::get_start_row(void) const;

1375 13 get_write_row 4 1726 31 GeomVertexWriter::get_write_row 0 1 535 368
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::get_write_row
//       Access: Published
//  Description: Returns the row index to which the data will be
//               written at the next call to set_data*() or
//               add_data*().
////////////////////////////////////////////////////////////////////
55
inline int GeomVertexWriter::get_write_row(void) const;

1376 9 is_at_end 4 1726 27 GeomVertexWriter::is_at_end 0 1 536 509
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::is_at_end
//       Access: Published
//  Description: Returns true if the writer is currently at the end of
//               the list of vertices, false otherwise.  If this is
//               true, another call to set_data*() will result in a
//               crash, but another call to add_data*() will add a new
//               row.
////////////////////////////////////////////////////////////////////
52
inline bool GeomVertexWriter::is_at_end(void) const;

1377 10 set_data1f 4 1726 28 GeomVertexWriter::set_data1f 0 1 537 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexWriter::set_data1f(float data);

1378 10 set_data2f 4 1726 28 GeomVertexWriter::set_data2f 0 2 538 539 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
59
inline void GeomVertexWriter::set_data2f(float x, float y);

1379 10 set_data3f 4 1726 28 GeomVertexWriter::set_data3f 0 2 540 541 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
68
inline void GeomVertexWriter::set_data3f(float x, float y, float z);

1380 10 set_data4f 4 1726 28 GeomVertexWriter::set_data4f 0 2 542 543 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
77
inline void GeomVertexWriter::set_data4f(float x, float y, float z, float w);

1381 10 set_data1i 4 1726 28 GeomVertexWriter::set_data1i 0 1 544 429
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
51
inline void GeomVertexWriter::set_data1i(int data);

1382 10 set_data2i 4 1726 28 GeomVertexWriter::set_data2i 0 1 545 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
55
inline void GeomVertexWriter::set_data2i(int a, int b);

1383 10 set_data3i 4 1726 28 GeomVertexWriter::set_data3i 0 1 546 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
62
inline void GeomVertexWriter::set_data3i(int a, int b, int c);

1384 10 set_data4i 4 1726 28 GeomVertexWriter::set_data4i 0 1 547 860
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::set_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               It is an error for the write row to advance past
//               the end of data.
////////////////////////////////////////////////////////////////////
69
inline void GeomVertexWriter::set_data4i(int a, int b, int c, int d);

1385 10 add_data1f 4 1726 28 GeomVertexWriter::add_data1f 0 1 548 450
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1f
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
53
inline void GeomVertexWriter::add_data1f(float data);

1386 10 add_data2f 4 1726 28 GeomVertexWriter::add_data2f 0 2 549 550 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2f
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
59
inline void GeomVertexWriter::add_data2f(float x, float y);

1387 10 add_data3f 4 1726 28 GeomVertexWriter::add_data3f 0 2 551 552 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3f
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
68
inline void GeomVertexWriter::add_data3f(float x, float y, float z);

1388 10 add_data4f 4 1726 28 GeomVertexWriter::add_data4f 0 2 553 554 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4f
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
77
inline void GeomVertexWriter::add_data4f(float x, float y, float z, float w);

1389 10 add_data1i 4 1726 28 GeomVertexWriter::add_data1i 0 1 555 450
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data1i
//       Access: Published
//  Description: Sets the write row to a particular 1-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
51
inline void GeomVertexWriter::add_data1i(int data);

1390 10 add_data2i 4 1726 28 GeomVertexWriter::add_data2i 0 1 556 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data2i
//       Access: Published
//  Description: Sets the write row to a particular 2-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
55
inline void GeomVertexWriter::add_data2i(int a, int b);

1391 10 add_data3i 4 1726 28 GeomVertexWriter::add_data3i 0 1 557 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data3i
//       Access: Published
//  Description: Sets the write row to a particular 3-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
62
inline void GeomVertexWriter::add_data3i(int a, int b, int c);

1392 10 add_data4i 4 1726 28 GeomVertexWriter::add_data4i 0 1 558 902
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::add_data4i
//       Access: Published
//  Description: Sets the write row to a particular 4-component
//               value, and advances the write row.
//
//               If the write row advances past the end of data,
//               implicitly adds a new row to the data.
////////////////////////////////////////////////////////////////////
69
inline void GeomVertexWriter::add_data4i(int a, int b, int c, int d);

1393 6 output 4 1726 24 GeomVertexWriter::output 0 1 559 224
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexWriter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void GeomVertexWriter::output(ostream &out) const;

1394 26 upcast_to_GeomVertexWriter 12 1727 46 GeomVertexRewriter::upcast_to_GeomVertexWriter 0 1 581 50
upcast from GeomVertexRewriter to GeomVertexWriter
71
GeomVertexWriter *GeomVertexRewriter::upcast_to_GeomVertexWriter(void);

1395 30 downcast_to_GeomVertexRewriter 12 1726 48 GeomVertexWriter::downcast_to_GeomVertexRewriter 0 1 582 52
downcast from GeomVertexWriter to GeomVertexRewriter
75
GeomVertexRewriter *GeomVertexWriter::downcast_to_GeomVertexRewriter(void);

1396 26 upcast_to_GeomVertexReader 12 1727 46 GeomVertexRewriter::upcast_to_GeomVertexReader 0 1 583 50
upcast from GeomVertexRewriter to GeomVertexReader
71
GeomVertexReader *GeomVertexRewriter::upcast_to_GeomVertexReader(void);

1397 30 downcast_to_GeomVertexRewriter 12 1725 48 GeomVertexReader::downcast_to_GeomVertexRewriter 0 1 584 52
downcast from GeomVertexReader to GeomVertexRewriter
75
GeomVertexRewriter *GeomVertexReader::downcast_to_GeomVertexRewriter(void);

1398 18 GeomVertexRewriter 4 1727 38 GeomVertexRewriter::GeomVertexRewriter 0 7 560 561 562 563 564 565 566 3199
// Filename: geomVertexRewriter.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Default Constructor
//       Access: Published
//  Description: Constructs an invalid GeomVertexRewriter.  You must use
//               the assignment operator to assign a valid
//               GeomVertexRewriter to this object before you can use
//               it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated data object.  This flavor creates the
//               rewriter specifically to process the named data type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Constructor
//       Access: Published
//  Description: Constructs a new rewriter to process the vertices of
//               the indicated array only.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline GeomVertexRewriter::GeomVertexRewriter(void);

1399 10 operator = 4 1727 30 GeomVertexRewriter::operator = 0 1 567 244
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
inline void GeomVertexRewriter::operator =(GeomVertexRewriter const &copy);

1400 19 ~GeomVertexRewriter 4 1727 39 GeomVertexRewriter::~GeomVertexRewriter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline GeomVertexRewriter::~GeomVertexRewriter(void);

1401 15 get_vertex_data 4 1727 35 GeomVertexRewriter::get_vertex_data 0 1 568 315
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_vertex_data
//       Access: Published
//  Description: Returns the vertex data object that the
//               rewriter is processing.
////////////////////////////////////////////////////////////////////
71
inline GeomVertexData *GeomVertexRewriter::get_vertex_data(void) const;

1402 14 get_array_data 4 1727 34 GeomVertexRewriter::get_array_data 0 1 569 329
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array_data
//       Access: Published
//  Description: Returns the particular array object that the
//               rewriter is currently processing.
////////////////////////////////////////////////////////////////////
75
inline GeomVertexArrayData *GeomVertexRewriter::get_array_data(void) const;

1403 10 set_column 4 1727 30 GeomVertexRewriter::set_column 0 4 570 571 572 573 2654
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the nth data type of the
//               GeomVertexFormat, numbering from 0.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the data type with the
//               indicated name.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_column
//       Access: Published
//  Description: Sets up the rewriter to use the indicated column
//               description on the given array.
//
//               This also resets both the read and write row
//               numbers to the start row (the same value passed to
//               a previous call to set_row(), or 0 if set_row()
//               was never called.)
//
//               The return value is true if the data type is valid,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool GeomVertexRewriter::set_column(int column);

1404 10 has_column 4 1727 30 GeomVertexRewriter::has_column 0 1 574 366
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::has_column
//       Access: Published
//  Description: Returns true if a valid data type has been
//               successfully set, or false if the data type does not
//               exist.
////////////////////////////////////////////////////////////////////
55
inline bool GeomVertexRewriter::has_column(void) const;

1405 9 get_array 4 1727 29 GeomVertexRewriter::get_array 0 1 575 327
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_array
//       Access: Published
//  Description: Returns the array index containing the data type that
//               the rewriter is working on.
////////////////////////////////////////////////////////////////////
53
inline int GeomVertexRewriter::get_array(void) const;

1406 10 get_column 4 1727 30 GeomVertexRewriter::get_column 0 1 576 320
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_column
//       Access: Published
//  Description: Returns the description of the data type that the
//               rewriter is working on.
////////////////////////////////////////////////////////////////////
74
inline GeomVertexColumn const *GeomVertexRewriter::get_column(void) const;

1407 7 set_row 4 1727 27 GeomVertexRewriter::set_row 0 1 577 379
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::set_row
//       Access: Published
//  Description: Sets the start, write, and write index to the
//               indicated value.  The rewriter will begin traversing
//               from the given row.
////////////////////////////////////////////////////////////////////
49
inline void GeomVertexRewriter::set_row(int row);

1408 13 get_start_row 4 1727 33 GeomVertexRewriter::get_start_row 0 1 578 380
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::get_start_row
//       Access: Published
//  Description: Returns the row index at which the rewriter
//               started.  It will return to this row if you reset
//               the current column.
////////////////////////////////////////////////////////////////////
57
inline int GeomVertexRewriter::get_start_row(void) const;

1409 9 is_at_end 4 1727 29 GeomVertexRewriter::is_at_end 0 1 579 348
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::is_at_end
//       Access: Published
//  Description: Returns true if the reader or writer is currently at
//               the end of the list of vertices, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GeomVertexRewriter::is_at_end(void) const;

1410 6 output 4 1727 26 GeomVertexRewriter::output 0 1 580 226
////////////////////////////////////////////////////////////////////
//     Function: GeomVertexRewriter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void GeomVertexRewriter::output(ostream &out) const;

1411 37 upcast_to_TypedWritableReferenceCount 12 1728 46 Texture::upcast_to_TypedWritableReferenceCount 0 1 711 50
upcast from Texture to TypedWritableReferenceCount
82
TypedWritableReferenceCount *Texture::upcast_to_TypedWritableReferenceCount(void);

1412 19 downcast_to_Texture 12 1699 48 TypedWritableReferenceCount::downcast_to_Texture 0 1 712 52
downcast from TypedWritableReferenceCount to Texture
64
Texture *TypedWritableReferenceCount::downcast_to_Texture(void);

1413 17 upcast_to_Namable 12 1728 26 Texture::upcast_to_Namable 0 1 713 30
upcast from Texture to Namable
42
Namable *Texture::upcast_to_Namable(void);

1414 19 downcast_to_Texture 12 1729 28 Namable::downcast_to_Texture 0 1 714 32
downcast from Namable to Texture
44
Texture *Namable::downcast_to_Texture(void);

1415 7 Texture 4 1728 16 Texture::Texture 0 2 585 586 763
////////////////////////////////////////////////////////////////////
//     Function: Texture::Constructor
//       Access: Published
//  Description: Constructs an empty texture.  The default is to set
//               up the texture as an empty 2-d texture; follow up
//               with one of the variants of setup_texture() if this
//               is not what you want.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::Copy Constructor
//       Access: Protected
//  Description: Use Texture::make_copy() to make a duplicate copy of
//               an existing Texture.
////////////////////////////////////////////////////////////////////
66
Texture::Texture(basic_string< char > const &name = ((string())));

1416 8 ~Texture 4 1728 17 Texture::~Texture 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: Texture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual Texture::~Texture(void);

1417 9 make_copy 4 1728 18 Texture::make_copy 0 1 587 689
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_copy
//       Access: Published, Virtual
//  Description: Returns a new copy of the same Texture.  This copy,
//               if applied to geometry, will be copied into texture
//               as a separate texture from the original, so it will
//               be duplicated in texture memory (and may be
//               independently modified if desired).
//
//               If the Texture is a VideoTexture, the resulting
//               duplicate may be animated independently of the
//               original.
////////////////////////////////////////////////////////////////////
54
virtual PointerTo< Texture > Texture::make_copy(void);

1418 5 clear 4 1728 14 Texture::clear 0 1 588 294
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear
//       Access: Published, Virtual
//  Description: Reinitializes the texture to its default, empty
//               state.
////////////////////////////////////////////////////////////////////
34
virtual void Texture::clear(void);

1419 13 setup_texture 4 1728 22 Texture::setup_texture 0 1 589 425
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_texture
//       Access: Published
//  Description: Sets the texture to the indicated type and
//               dimensions, presumably in preparation for calling
//               read() or load(), or set_ram_image() or
//               modify_ram_image().
////////////////////////////////////////////////////////////////////
162
void Texture::setup_texture(Texture::TextureType texture_type, int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format);

1420 16 setup_1d_texture 4 1728 25 Texture::setup_1d_texture 0 2 590 591 1512
// Filename: texture.I
// Created by:  drose (05Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_1d_texture
//       Access: Published
//  Description: Sets the texture as an empty 1-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
44
inline void Texture::setup_1d_texture(void);

1421 16 setup_2d_texture 4 1728 25 Texture::setup_2d_texture 0 2 592 593 841
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_2d_texture
//       Access: Published
//  Description: Sets the texture as an empty 2-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
44
inline void Texture::setup_2d_texture(void);

1422 16 setup_3d_texture 4 1728 25 Texture::setup_3d_texture 0 3 594 595 596 957
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with no
//               dimensions (though if you know the depth ahead
//               of time, it saves a bit of reallocation later).
//               Follow up with read() or load() to fill the texture
//               properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_3d_texture
//       Access: Published
//  Description: Sets the texture as an empty 3-d texture with the
//               specified dimensions and properties.  Follow up with
//               set_ram_image() or modify_ram_image() to fill the
//               image data.
////////////////////////////////////////////////////////////////////
56
inline void Texture::setup_3d_texture(int z_size = (1));

1423 14 setup_cube_map 4 1728 23 Texture::setup_cube_map 0 2 597 598 1031
////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with no
//               dimensions.  Follow up with read() or load() to fill
//               the texture properties and image data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::setup_cube_map
//       Access: Published
//  Description: Sets the texture as an empty cube map texture with
//               the specified dimensions and properties.  Follow up
//               with set_ram_image() or modify_ram_image() to fill
//               the image data.  
//
//               Note that a cube map should always consist of six
//               square images, so x_size and y_size will be the same,
//               and z_size is always 6.
////////////////////////////////////////////////////////////////////
42
inline void Texture::setup_cube_map(void);

1424 31 generate_normalization_cube_map 4 1728 40 Texture::generate_normalization_cube_map 0 1 599 601
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_normalization_cube_map
//       Access: Published
//  Description: Generates a special cube map image in the texture
//               that can be used to apply bump mapping effects: for
//               each texel in the cube map that is indexed by the 3-d
//               texture coordinates (x, y, z), the resulting value is
//               the normalized vector (x, y, z) (compressed from
//               -1..1 into 0..1).
////////////////////////////////////////////////////////////////////
56
void Texture::generate_normalization_cube_map(int size);

1425 4 read 4 1728 13 Texture::read 0 4 600 601 602 603 5206
////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the named filename into the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Combine a 3-component image with a grayscale image
//               to get a 4-component image.
//
//               See the description of the full-parameter read()
//               method for the meaning of the
//               primary_file_num_channels and alpha_file_channel
//               parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads a single file into a single page or mipmap
//               level, or automatically reads a series of files into
//               a series of pages and/or mipmap levels.
//
//               See the description of the full-parameter read()
//               method for the meaning of the various parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::read
//       Access: Published
//  Description: Reads the texture from the indicated filename.  If
//               primary_file_num_channels is not 0, it specifies the
//               number of components to downgrade the image to if it
//               is greater than this number.
//
//               If the filename has the extension .txo, this
//               implicitly reads a texture object instead of a
//               filename (which replaces all of the texture
//               properties).  In this case, all the rest of the
//               parameters are ignored, and the filename should not
//               contain any hash marks; just the one named file will
//               be read, since a single .txo file can contain all
//               pages and mipmaps necessary to define a texture.
//
//               If alpha_fullpath is not empty, it specifies the name
//               of a file from which to retrieve the alpha.  In this
//               case, alpha_file_channel represents the numeric
//               channel of this image file to use as the resulting
//               texture's alpha channel; usually, this is 0 to
//               indicate the grayscale combination of r, g, b; or it
//               may be a one-based channel number, e.g. 1 for the red
//               channel, 2 for the green channel, and so on.
//
//               If read pages is false, then z indicates the page
//               number into which this image will be assigned.
//               Normally this is 0 for the first (or only) page of
//               the texture.  3-D textures have one page for each
//               level of depth, and cube map textures always have six
//               pages.
//
//               If read_pages is true, multiple images will be read
//               at once, one for each page of a cube map or a 3-D
//               texture.  In this case, the filename should contain a
//               sequence of one or more hash marks ("#") which will
//               be filled in with the z value of each page,
//               zero-based.  In this case, the z parameter indicates
//               the maximum z value that will be loaded, or 0 to load
//               all filenames that exist.
//
//               If read_mipmaps is false, then n indicates the mipmap
//               level to which this image will be assigned.  Normally
//               this is 0 for the base texture image, but it is
//               possible to load custom mipmap levels into the later
//               images.  After the base texture image is loaded (thus
//               defining the size of the texture), you can call
//               get_expected_num_mipmap_levels() to determine the
//               maximum sensible value for n.
//
//               If read_mipmaps is true, multiple images will be read
//               as above, but this time the images represent the
//               different mipmap levels of the texture image.  In
//               this case, the n parameter indicates the maximum n
//               value that will be loaded, or 0 to load all filenames
//               that exist (up to the expected number of mipmap
//               levels).
//
//               If both read_pages and read_mipmaps is true, then
//               both sequences will be read; the filename should
//               contain two sequences of hash marks, separated by
//               some character such as a hyphen, underscore, or dot.
//               The first hash mark sequence will be filled in with
//               the mipmap level, while the second hash mark sequence
//               will be the page index.
//
//               This method implicitly sets keep_ram_image to false.
////////////////////////////////////////////////////////////////////
52
inline bool Texture::read(Filename const &fullpath);

1426 5 write 4 1728 14 Texture::write 0 3 604 605 606 3574
////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes the texture to the named filename.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Writes a single page or mipmap level to a single
//               file, or automatically writes a series of pages
//               and/or mipmap levels to a numbered series of files.
//
//               If the filename ends in the extension .txo, this
//               implicitly writes a Panda texture object (.txo)
//               instead of an image file.  In this case, the
//               remaining parameters are ignored, and only one file
//               is written, which will contain all of the pages and
//               resident mipmap levels in the texture.
//
//               If write_pages is false, then z indicates the page
//               number to write.  3-D textures have one page number
//               for each level of depth; cube maps have six pages
//               number 0 through 5.  Other kinds of textures have
//               only one page, numbered 0.
//
//               If write_pages is true, then all pages of the texture
//               will be written.  In this case z is ignored, and the
//               filename should contain a sequence of hash marks
//               ("#") which will be filled in with the page index
//               number.
//
//               If write_mipmaps is false, then n indicates the
//               mipmap level number to write.  Normally, this is 0,
//               for the base texture image.  Normally, the mipmap
//               levels of a texture are not available in RAM (they
//               are generated automatically by the graphics card).
//               However, if you have the mipmap levels available, for
//               instance because you called
//               generate_ram_mipmap_images() to generate them
//               internally, or you called
//               GraphicsEngine::extract_texture_data() to retrieve
//               them from the graphics card, then you may write out
//               each mipmap level with this parameter.
//
//               If write_mipmaps is true, then all mipmap levels of
//               the texture will be written.  In this case n is
//               ignored, and the filename should contain a sequence
//               of hash marks ("#") which will be filled in with the
//               mipmap level number.
//
//               If both write_pages and write_mipmaps is true, then
//               all pages and all mipmap levels will be written.  In
//               this case, the filename should contain two different
//               sequences of hash marks, separated by a character
//               such as a hyphen, underscore, or dot.  The first hash
//               mark sequence will be filled in with the mipmap
//               level, while the second hash mark sequence will be
//               the page index.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::write
//       Access: Published
//  Description: Not to be confused with write(Filename), this method
//               simply describes the texture properties.
////////////////////////////////////////////////////////////////////
53
inline bool Texture::write(Filename const &fullpath);

1427 8 read_txo 4 1728 17 Texture::read_txo 0 2 607 608 463
////////////////////////////////////////////////////////////////////
//     Function: Texture::read_txo
//       Access: Published
//  Description: Reads the texture from a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//
//               The filename is just for reference.
////////////////////////////////////////////////////////////////////
87
bool Texture::read_txo(istream &in, basic_string< char > const &filename = ("stream"));

1428 9 write_txo 4 1728 18 Texture::write_txo 0 2 609 610 463
////////////////////////////////////////////////////////////////////
//     Function: Texture::write_txo
//       Access: Published
//  Description: Writes the texture to a Panda texture object.  This
//               defines the complete Texture specification, including
//               the image data as well as all texture properties.
//
//               The filename is just for reference.
////////////////////////////////////////////////////////////////////
95
bool Texture::write_txo(ostream &out, basic_string< char > const &filename = ("stream")) const;

1429 4 load 4 1728 13 Texture::load 0 2 611 612 566
////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Replaces the texture with the indicated image.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::load
//       Access: Published
//  Description: Stores the indicated image in the given page and
//               mipmap level.  See read().
////////////////////////////////////////////////////////////////////
52
inline bool Texture::load(PNMImage const &pnmimage);

1430 5 store 4 1728 14 Texture::store 0 2 613 614 612
////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the texture to the indicated PNMImage, but does
//               not write it to disk.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Texture::store
//       Access: Published
//  Description: Saves the indicated page and mipmap level of the
//               texture to the PNMImage.
////////////////////////////////////////////////////////////////////
53
inline bool Texture::store(PNMImage &pnmimage) const;

1431 6 reload 4 1728 15 Texture::reload 0 1 615 532
////////////////////////////////////////////////////////////////////
//     Function: Texture::reload
//       Access: Published
//  Description: Re-reads the Texture from its disk file.  Useful when
//               you know the image on disk has recently changed, and
//               you want to update the Texture image.
//
//               Returns true on success, false on failure (in which
//               case, the Texture may or may not still be valid).
////////////////////////////////////////////////////////////////////
27
bool Texture::reload(void);

1432 12 load_related 4 1728 21 Texture::load_related 0 1 616 444
////////////////////////////////////////////////////////////////////
//     Function: Texture::load_related
//       Access: Published
//  Description: Loads a texture whose filename is derived by
//               concatenating a suffix to the filename of this
//               texture.  May return NULL, for example, if this
//               texture doesn't have a filename.
////////////////////////////////////////////////////////////////////
78
Texture *Texture::load_related(PointerTo< InternalName > const &suffix) const;

1433 12 has_filename 4 1728 21 Texture::has_filename 0 1 617 318
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_filename
//       Access: Published
//  Description: Returns true if the filename has been set and
//               is available.  See set_filename().
////////////////////////////////////////////////////////////////////
46
inline bool Texture::has_filename(void) const;

1434 12 get_filename 4 1728 21 Texture::get_filename 0 1 618 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_filename
//       Access: Published
//  Description: Returns the filename that has been set.  This is the
//               name of the file as it was requested.  Also see
//               get_fullpath().
////////////////////////////////////////////////////////////////////
57
inline Filename const &Texture::get_filename(void) const;

1435 18 has_alpha_filename 4 1728 27 Texture::has_alpha_filename 0 1 619 336
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_filename
//       Access: Published
//  Description: Returns true if the alpha_filename has been set and
//               is available.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
52
inline bool Texture::has_alpha_filename(void) const;

1436 18 get_alpha_filename 4 1728 27 Texture::get_alpha_filename 0 1 620 475
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_filename
//       Access: Published
//  Description: Returns the alpha_filename that has been set.  If
//               this is set, it represents the name of the alpha
//               component, which is stored in a separate file.  See
//               also get_filename(), and get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
63
inline Filename const &Texture::get_alpha_filename(void) const;

1437 12 has_fullpath 4 1728 21 Texture::has_fullpath 0 1 621 318
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_fullpath
//       Access: Published
//  Description: Returns true if the fullpath has been set and
//               is available.  See set_fullpath().
////////////////////////////////////////////////////////////////////
46
inline bool Texture::has_fullpath(void) const;

1438 12 get_fullpath 4 1728 21 Texture::get_fullpath 0 1 622 376
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_fullpath
//       Access: Published
//  Description: Returns the fullpath that has been set.  This is the
//               full path to the file as it was found along the
//               texture search path.
////////////////////////////////////////////////////////////////////
57
inline Filename const &Texture::get_fullpath(void) const;

1439 18 has_alpha_fullpath 4 1728 27 Texture::has_alpha_fullpath 0 1 623 336
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_alpha_fullpath
//       Access: Published
//  Description: Returns true if the alpha_fullpath has been set and
//               is available.  See set_alpha_fullpath().
////////////////////////////////////////////////////////////////////
52
inline bool Texture::has_alpha_fullpath(void) const;

1440 18 get_alpha_fullpath 4 1728 27 Texture::get_alpha_fullpath 0 1 624 430
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_alpha_fullpath
//       Access: Published
//  Description: 
//               Returns the alpha_fullpath that has been set.  This
//               is the full path to the alpha part of the image file
//               as it was found along the texture search path.
////////////////////////////////////////////////////////////////////
63
inline Filename const &Texture::get_alpha_fullpath(void) const;

1441 10 get_x_size 4 1728 19 Texture::get_x_size 0 1 625 268
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_x_size
//       Access: Published
//  Description: Returns the width of the texture image in texels.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_x_size(void) const;

1442 10 get_y_size 4 1728 19 Texture::get_y_size 0 1 626 321
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_y_size
//       Access: Published
//  Description: Returns the height of the texture image in texels.
//               For a 1-d texture, this will be 1.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_y_size(void) const;

1443 10 get_z_size 4 1728 19 Texture::get_z_size 0 1 627 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_z_size
//       Access: Published
//  Description: Returns the depth of the texture image in texels.
//               For a 1-d texture or 2-d texture, this will be 1.
//               For a cube map texture, this will be 6.
////////////////////////////////////////////////////////////////////
43
inline int Texture::get_z_size(void) const;

1444 18 get_num_components 4 1728 27 Texture::get_num_components 0 1 628 456
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_components
//       Access: Published
//  Description: Returns the number of color components for each texel
//               of the texture image.  This is 3 for an rgb texture
//               or 4 for an rgba texture; it may also be 1 or 2 for a
//               grayscale texture.
////////////////////////////////////////////////////////////////////
51
inline int Texture::get_num_components(void) const;

1445 19 get_component_width 4 1728 28 Texture::get_component_width 0 1 629 390
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_width
//       Access: Published
//  Description: Returns the number of bytes stored for each color
//               component of a texel.  Typically this is 1, but it
//               may be 2 for 16-bit texels.
////////////////////////////////////////////////////////////////////
52
inline int Texture::get_component_width(void) const;

1446 16 get_texture_type 4 1728 25 Texture::get_texture_type 0 1 630 275
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_texture_type
//       Access: Published
//  Description: Returns the overall interpretation of the texture.
////////////////////////////////////////////////////////////////////
66
inline Texture::TextureType Texture::get_texture_type(void) const;

1447 10 get_format 4 1728 19 Texture::get_format 0 1 631 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_format
//       Access: Published
//  Description: Returns the format of the texture, which represents
//               both the semantic meaning of the texels and, to some
//               extent, their storage information.
////////////////////////////////////////////////////////////////////
55
inline Texture::Format Texture::get_format(void) const;

1448 18 get_component_type 4 1728 27 Texture::get_component_type 0 1 632 312
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_component_type
//       Access: Published
//  Description: Returns the numeric interpretation of each component
//               of the texture.
////////////////////////////////////////////////////////////////////
70
inline Texture::ComponentType Texture::get_component_type(void) const;

1449 10 set_wrap_u 4 1728 19 Texture::set_wrap_u 0 1 633 218
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
void Texture::set_wrap_u(Texture::WrapMode wrap);

1450 10 set_wrap_v 4 1728 19 Texture::set_wrap_v 0 1 634 218
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
void Texture::set_wrap_v(Texture::WrapMode wrap);

1451 10 set_wrap_w 4 1728 19 Texture::set_wrap_w 0 1 635 270
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_wrap_w
//       Access: Published
//  Description: The W wrap direction is only used for 3-d textures.
////////////////////////////////////////////////////////////////////
49
void Texture::set_wrap_w(Texture::WrapMode wrap);

1452 13 set_minfilter 4 1728 22 Texture::set_minfilter 0 1 636 221
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void Texture::set_minfilter(Texture::FilterType filter);

1453 13 set_magfilter 4 1728 22 Texture::set_magfilter 0 1 637 221
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void Texture::set_magfilter(Texture::FilterType filter);

1454 22 set_anisotropic_degree 4 1728 31 Texture::set_anisotropic_degree 0 1 638 555
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_anisotropic_degree
//       Access: Published
//  Description: Specifies the level of anisotropic filtering to apply
//               to the texture.  Normally, this is 1, to indicate
//               anisotropic filtering is disabled.  This may be set
//               to a number higher than one to enable anisotropic
//               filtering, if the rendering backend supports this.
////////////////////////////////////////////////////////////////////
61
void Texture::set_anisotropic_degree(int anisotropic_degree);

1455 16 set_border_color 4 1728 25 Texture::set_border_color 0 1 639 446
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_border_color
//       Access: Published
//  Description: Specifies the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
////////////////////////////////////////////////////////////////////
56
void Texture::set_border_color(LVecBase4f const &color);

1456 15 set_compression 4 1728 24 Texture::set_compression 0 1 640 1037
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_compression
//       Access: Published
//  Description: Requests that this particular Texture be compressed
//               when it is loaded into texture memory.  
//
//               This refers to the internal compression of the
//               texture image within texture memory; it is not
//               related to jpeg or png compression, which are disk
//               file compression formats.  The actual disk file that
//               generated this texture may be stored in a compressed
//               or uncompressed format supported by Panda; it will be
//               decompressed on load, and then recompressed by the
//               graphics API if this parameter is not CM_off.
//
//               If the GSG does not support this texture compression
//               mode, the texture will silently be loaded
//               uncompressed.
////////////////////////////////////////////////////////////////////
68
void Texture::set_compression(Texture::CompressionMode compression);

1457 21 set_render_to_texture 4 1728 30 Texture::set_render_to_texture 0 1 641 230
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_render_to_texture
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
void Texture::set_render_to_texture(bool render_to_texture);

1458 10 get_wrap_u 4 1728 19 Texture::get_wrap_u 0 1 642 292
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_u
//       Access: Published
//  Description: Returns the wrap mode of the texture in the U
//               direction.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_u(void) const;

1459 10 get_wrap_v 4 1728 19 Texture::get_wrap_v 0 1 643 292
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_v
//       Access: Published
//  Description: Returns the wrap mode of the texture in the V
//               direction.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_v(void) const;

1460 10 get_wrap_w 4 1728 19 Texture::get_wrap_w 0 1 644 355
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_wrap_w
//       Access: Published
//  Description: Returns the wrap mode of the texture in the W
//               direction.  This is the depth direction of 3-d
//               textures.
////////////////////////////////////////////////////////////////////
57
inline Texture::WrapMode Texture::get_wrap_w(void) const;

1461 13 get_minfilter 4 1728 22 Texture::get_minfilter 0 1 645 388
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_minfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               minification.  If this is one of the mipmap
//               constants, then the texture requires mipmaps.
////////////////////////////////////////////////////////////////////
62
inline Texture::FilterType Texture::get_minfilter(void) const;

1462 13 get_magfilter 4 1728 22 Texture::get_magfilter 0 1 646 353
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_magfilter
//       Access: Published
//  Description: Returns the filter mode of the texture for
//               magnification.  The mipmap constants are invalid
//               here.
////////////////////////////////////////////////////////////////////
62
inline Texture::FilterType Texture::get_magfilter(void) const;

1463 22 get_anisotropic_degree 4 1728 31 Texture::get_anisotropic_degree 0 1 647 595
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the degree of anisotropic filtering that
//               should be applied to the texture.  Normally, this is
//               1, to indicate that anisotropic filtering should be
//               disabled.  If this is a number higher than 1,
//               anisotropic filtering should be enabled (if the
//               rendering backend supports it).
////////////////////////////////////////////////////////////////////
55
inline int Texture::get_anisotropic_degree(void) const;

1464 16 get_border_color 4 1728 25 Texture::get_border_color 0 1 648 444
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_border_color
//       Access: Published
//  Description: Returns the solid color of the texture's border.
//               Some OpenGL implementations use a border for tiling
//               textures; in Panda, it is only used for specifying
//               the clamp color.
////////////////////////////////////////////////////////////////////
56
inline LVecBase4f Texture::get_border_color(void) const;

1465 15 get_compression 4 1728 24 Texture::get_compression 0 1 649 765
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_compression
//       Access: Published
//  Description: Returns the compression mode requested for this
//               particular texture, or CM_off if the texture is not
//               to be compressed.
//
//               If a value other than CM_off is returned, this is
//               not a guarantee that the texture is actually
//               successfully compressed on the GSG.  It may be that
//               the GSG does not support the requested compression
//               mode, in which case the texture may actually be
//               stored uncompressed in texture memory.
////////////////////////////////////////////////////////////////////
69
inline Texture::CompressionMode Texture::get_compression(void) const;

1466 21 get_render_to_texture 4 1728 30 Texture::get_render_to_texture 0 1 650 230
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_render_to_texture
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline bool Texture::get_render_to_texture(void) const;

1467 12 uses_mipmaps 4 1728 21 Texture::uses_mipmaps 0 1 651 355
////////////////////////////////////////////////////////////////////
//     Function: Texture::uses_mipmaps
//       Access: Public
//  Description: Returns true if the minfilter settings on this
//               texture indicate the use of mipmapping, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Texture::uses_mipmaps(void) const;

1468 30 get_expected_num_mipmap_levels 4 1728 39 Texture::get_expected_num_mipmap_levels 0 1 652 536
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_num_mipmap_levels
//       Access: Published
//  Description: Returns the number of mipmap levels that should be
//               defined for this texture, given the texture's size.
//
//               Note that this returns a number appropriate for
//               mipmapping, even if the texture does not currently
//               have mipmapping enabled.
////////////////////////////////////////////////////////////////////
56
int Texture::get_expected_num_mipmap_levels(void) const;

1469 26 get_expected_mipmap_x_size 4 1728 35 Texture::get_expected_mipmap_x_size 0 1 653 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_x_size
//       Access: Published
//  Description: Returns the x_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
53
int Texture::get_expected_mipmap_x_size(int n) const;

1470 26 get_expected_mipmap_y_size 4 1728 35 Texture::get_expected_mipmap_y_size 0 1 654 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_y_size
//       Access: Published
//  Description: Returns the y_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
53
int Texture::get_expected_mipmap_y_size(int n) const;

1471 26 get_expected_mipmap_z_size 4 1728 35 Texture::get_expected_mipmap_z_size 0 1 655 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_mipmap_z_size
//       Access: Published
//  Description: Returns the z_size that the nth mipmap level should
//               have, based on the texture's size.
////////////////////////////////////////////////////////////////////
53
int Texture::get_expected_mipmap_z_size(int n) const;

1472 13 has_ram_image 4 1728 22 Texture::has_ram_image 0 1 656 1625
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_image
//       Access: Published, Virtual
//  Description: Returns true if the Texture has its image contents
//               available in main RAM, false if it exists only in
//               texture memory or in the prepared GSG context.
//
//               Note that this has nothing to do with whether
//               get_ram_image() will fail or not.  Even if
//               has_ram_image() returns false, get_ram_image() may
//               still return a valid RAM image, because
//               get_ram_image() will automatically load the texture
//               from disk if necessary.  The only thing
//               has_ram_image() tells you is whether the texture is
//               available right now without hitting the disk first.
//
//               Note also that if an application uses only one GSG,
//               it may appear that has_ram_image() returns true if
//               the texture has not yet been loaded by the GSG, but
//               this correlation is not true in general and should
//               not be depended on.  Specifically, if an application
//               ever uses multiple GSG's in its lifetime (for
//               instance, by opening more than one window, or by
//               closing its window and opening another one later),
//               then has_ram_image() may well return false on
//               textures that have never been loaded on the current
//               GSG.
////////////////////////////////////////////////////////////////////
48
virtual bool Texture::has_ram_image(void) const;

1473 20 might_have_ram_image 4 1728 29 Texture::might_have_ram_image 0 1 657 578
////////////////////////////////////////////////////////////////////
//     Function: Texture::might_have_ram_image
//       Access: Published
//  Description: Returns true if the texture's image contents are
//               currently available in main RAM, or there is reason
//               to believe it can be loaded on demand.  That is, this
//               function returns a "best guess" as to whether
//               get_ram_image() will succeed without actually calling
//               it first.
////////////////////////////////////////////////////////////////////
54
inline bool Texture::might_have_ram_image(void) const;

1474 18 get_ram_image_size 4 1728 27 Texture::get_ram_image_size 0 1 658 337
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image, or 0 if there is no in-memory image.
////////////////////////////////////////////////////////////////////
60
inline unsigned int Texture::get_ram_image_size(void) const;

1475 17 get_ram_page_size 4 1728 26 Texture::get_ram_page_size 0 1 659 647
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page, or 0 if there is no in-memory image.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
////////////////////////////////////////////////////////////////////
59
inline unsigned int Texture::get_ram_page_size(void) const;

1476 27 get_expected_ram_image_size 4 1728 36 Texture::get_expected_ram_image_size 0 1 660 378
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image, based on the texture
//               parameters.
////////////////////////////////////////////////////////////////////
69
inline unsigned int Texture::get_expected_ram_image_size(void) const;

1477 26 get_expected_ram_page_size 4 1728 35 Texture::get_expected_ram_page_size 0 1 661 447
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture.  For a 2-d or 1-d
//               texture, this is the same as
//               get_expected_ram_image_size().
////////////////////////////////////////////////////////////////////
68
inline unsigned int Texture::get_expected_ram_page_size(void) const;

1478 13 get_ram_image 4 1728 22 Texture::get_ram_image 0 1 662 1676
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               texture.  If the texture does not currently have an
//               associated RAM image, and the texture was generated
//               by loading an image from a disk file (the most common
//               case), this forces the reload of the same texture.
//               This can happen if keep_texture_ram is configured to
//               false, and we have previously prepared this texture
//               with a GSG.
//
//               Note that it is not correct to call has_ram_image()
//               first to test whether this function will fail.  A
//               false return value from has_ram_image() indicates
//               only that get_ram_image() may need to reload the
//               texture from disk, which it will do automatically.
//               However, you can call might_have_ram_image(), which
//               will return true if the ram image exists, or there is
//               a reasonable reason to believe it can be loaded.
//
//               On the other hand, it is possible that the texture
//               cannot be found on disk or is otherwise unavailable.
//               If that happens, this function will return NULL.
//               There is no way to predict with 100% accuracy whether
//               get_ram_image() will return NULL without calling it
//               first; might_have_ram_image() is the closest.
////////////////////////////////////////////////////////////////////
66
ConstPointerToArray< unsigned char > Texture::get_ram_image(void);

1479 25 get_ram_image_compression 4 1728 34 Texture::get_ram_image_compression 0 1 663 633
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_image_compression
//       Access: Published
//  Description: Returns the compression mode in which the ram image
//               is already stored pre-compressed.  If this is other
//               than CM_off, you cannot rely on the contents of the
//               ram image to be anything predicatable (it will not be
//               an array of x by y pixels, and it probably won't have
//               the same length as get_expected_ram_image_size()).
////////////////////////////////////////////////////////////////////
79
inline Texture::CompressionMode Texture::get_ram_image_compression(void) const;

1480 16 modify_ram_image 4 1728 25 Texture::modify_ram_image 0 1 664 517
////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image.
//               This assumes the RAM image should be uncompressed.
//               If the RAM image has been dumped, or is stored
//               compressed, creates a new one.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
64
PointerToArray< unsigned char > Texture::modify_ram_image(void);

1481 14 make_ram_image 4 1728 23 Texture::make_ram_image 0 1 665 455
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               texture, if any, and allocates a new buffer of the
//               appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
62
PointerToArray< unsigned char > Texture::make_ram_image(void);

1482 13 set_ram_image 4 1728 22 Texture::set_ram_image 0 3 666 667 668 501
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_image
//       Access: Published
//  Description: Replaces the current system-RAM image with the new
//               data.  If compression is not CM_off, it indicates
//               that the new data is already pre-compressed in the
//               indicated format.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
146
void Texture::set_ram_image(PointerToArray< unsigned char > image, Texture::CompressionMode compression = (CM_off), unsigned int page_size = (0));

1483 15 clear_ram_image 4 1728 24 Texture::clear_ram_image 0 1 669 262
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_image
//       Access: Published
//  Description: Discards the current system-RAM image.
////////////////////////////////////////////////////////////////////
36
void Texture::clear_ram_image(void);

1484 18 set_keep_ram_image 4 1728 27 Texture::set_keep_ram_image 0 1 670 825
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_keep_ram_image
//       Access: Published
//  Description: Sets the flag that indicates whether this Texture is
//               eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.
//
//               This will be true for most textures, which can reload
//               their images if needed by rereading the input file.
//               However, textures that were generated dynamically and
//               cannot be easily reloaded will want to set this flag
//               to true, so that the texture will always keep its
//               image copy around.
////////////////////////////////////////////////////////////////////
61
inline void Texture::set_keep_ram_image(bool keep_ram_image);

1485 18 get_keep_ram_image 4 1728 27 Texture::get_keep_ram_image 0 1 671 477
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
////////////////////////////////////////////////////////////////////
53
virtual bool Texture::get_keep_ram_image(void) const;

1486 25 get_num_ram_mipmap_images 4 1728 34 Texture::get_num_ram_mipmap_images 0 1 672 453
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_num_ram_mipmap_images
//       Access: Published
//  Description: Returns the maximum number of mipmap level images
//               available in system memory.  The actual number may be
//               less than this; use has_ram_mipmap_image() to verify
//               each level.
////////////////////////////////////////////////////////////////////
58
inline int Texture::get_num_ram_mipmap_images(void) const;

1487 20 has_ram_mipmap_image 4 1728 29 Texture::has_ram_mipmap_image 0 1 673 608
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_ram_mipmap_image
//       Access: Published
//  Description: Returns true if the Texture has the nth mipmap level
//               available in system memory, false otherwise.  If the
//               texture's minfilter mode requires mipmapping (see
//               uses_mipmaps()), and all the texture's mipmap levels
//               are not available when the texture is rendered, they
//               will be generated automatically.
////////////////////////////////////////////////////////////////////
55
inline bool Texture::has_ram_mipmap_image(int n) const;

1488 25 has_all_ram_mipmap_images 4 1728 34 Texture::has_all_ram_mipmap_images 0 1 674 403
////////////////////////////////////////////////////////////////////
//     Function: Texture::has_all_ram_mipmap_images
//       Access: Published
//  Description: Returns true if all expected mipmap levels have been
//               defined and exist in the system RAM, or false if even
//               one mipmap level is missing.
////////////////////////////////////////////////////////////////////
52
bool Texture::has_all_ram_mipmap_images(void) const;

1489 25 get_ram_mipmap_image_size 4 1728 34 Texture::get_ram_mipmap_image_size 0 1 675 402
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image for mipmap level n, or 0 if there is no
//               in-memory image for this mipmap level.
////////////////////////////////////////////////////////////////////
68
inline unsigned int Texture::get_ram_mipmap_image_size(int n) const;

1490 24 get_ram_mipmap_page_size 4 1728 33 Texture::get_ram_mipmap_page_size 0 1 676 719
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes used by the in-memory
//               image per page for mipmap level n, or 0 if there is
//               no in-memory image for this mipmap level.
//
//               For a non-compressed texture, this is the same as
//               get_expected_ram_mipmap_page_size().  For a compressed
//               texture, this may be a smaller value.  (We do assume
//               that all pages will be the same size on a compressed
//               texture).
////////////////////////////////////////////////////////////////////
67
inline unsigned int Texture::get_ram_mipmap_page_size(int n) const;

1491 34 get_expected_ram_mipmap_image_size 4 1728 43 Texture::get_expected_ram_mipmap_image_size 0 1 677 404
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_image_size
//       Access: Published
//  Description: Returns the number of bytes that *ought* to be used
//               by the in-memory image for mipmap level n, based on
//               the texture parameters.
////////////////////////////////////////////////////////////////////
77
inline unsigned int Texture::get_expected_ram_mipmap_image_size(int n) const;

1492 33 get_expected_ram_mipmap_page_size 4 1728 42 Texture::get_expected_ram_mipmap_page_size 0 1 678 481
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_expected_ram_mipmap_page_size
//       Access: Published
//  Description: Returns the number of bytes that should be used per
//               each Z page of the 3-d texture, for mipmap level n.
//               For a 2-d or 1-d texture, this is the same as
//               get_expected_ram_mipmap_image_size(n).
////////////////////////////////////////////////////////////////////
76
inline unsigned int Texture::get_expected_ram_mipmap_page_size(int n) const;

1493 20 get_ram_mipmap_image 4 1728 29 Texture::get_ram_mipmap_image 0 1 679 400
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_ram_mipmap_image
//       Access: Published
//  Description: Returns the system-RAM image data associated with the
//               nth mipmap level, if present.  Returns NULL if the
//               nth mipmap level is not present.
////////////////////////////////////////////////////////////////////
74
ConstPointerToArray< unsigned char > Texture::get_ram_mipmap_image(int n);

1494 23 modify_ram_mipmap_image 4 1728 32 Texture::modify_ram_mipmap_image 0 1 680 511
////////////////////////////////////////////////////////////////////
//     Function: Texture::modify_ram_mipmap_image
//       Access: Published
//  Description: Returns a modifiable pointer to the system-RAM image
//               for the nth mipmap level.  This assumes the RAM image
//               is uncompressed; if this is not the case, raises an
//               assertion.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
72
PointerToArray< unsigned char > Texture::modify_ram_mipmap_image(int n);

1495 21 make_ram_mipmap_image 4 1728 30 Texture::make_ram_mipmap_image 0 1 681 471
////////////////////////////////////////////////////////////////////
//     Function: Texture::make_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the
//               nth mipmap level, if any, and allocates a new buffer
//               of the appropriate size.  Returns the new buffer.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
70
PointerToArray< unsigned char > Texture::make_ram_mipmap_image(int n);

1496 20 set_ram_mipmap_image 4 1728 29 Texture::set_ram_mipmap_image 0 2 682 683 556
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_ram_mipmap_image
//       Access: Published
//  Description: Replaces the current system-RAM image for the
//               indicated mipmap level with the new data.  If
//               compression is not CM_off, it indicates that the new
//               data is already pre-compressed in the indicated
//               format.
//
//               This does *not* affect keep_ram_image.
////////////////////////////////////////////////////////////////////
111
void Texture::set_ram_mipmap_image(int n, PointerToArray< unsigned char > image, unsigned int page_size = (0));

1497 22 clear_ram_mipmap_image 4 1728 31 Texture::clear_ram_mipmap_image 0 1 684 311
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_image
//       Access: Published
//  Description: Discards the current system-RAM image for the nth
//               mipmap level.
////////////////////////////////////////////////////////////////////
44
void Texture::clear_ram_mipmap_image(int n);

1498 23 clear_ram_mipmap_images 4 1728 32 Texture::clear_ram_mipmap_images 0 1 685 342
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_ram_mipmap_images
//       Access: Published
//  Description: Discards the current system-RAM image for all
//               mipmap levels, except level 0 (the base image).
////////////////////////////////////////////////////////////////////
44
void Texture::clear_ram_mipmap_images(void);

1499 26 generate_ram_mipmap_images 4 1728 35 Texture::generate_ram_mipmap_images 0 1 686 709
////////////////////////////////////////////////////////////////////
//     Function: Texture::generate_ram_mipmap_images
//       Access: Published
//  Description: Automatically fills in the n mipmap levels of the
//               Texture, based on the texture's source image.  This
//               requires the texture's ram image to be available in
//               system memory.
//
//               This call is not normally necessary, since the mipmap
//               levels will be generated automatically if needed.
//               But there may be certain cases in which you would
//               like to call this explicitly.
////////////////////////////////////////////////////////////////////
47
void Texture::generate_ram_mipmap_images(void);

1500 12 get_modified 4 1728 21 Texture::get_modified 0 1 687 375
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_modified
//       Access: Published
//  Description: Returns a sequence number which is guaranteed to
//               change at least every time the texture data or
//               properties are modified.
////////////////////////////////////////////////////////////////////
51
inline UpdateSeq Texture::get_modified(void) const;

1501 7 prepare 4 1728 16 Texture::prepare 0 1 688 655
////////////////////////////////////////////////////////////////////
//     Function: Texture::prepare
//       Access: Published
//  Description: Indicates that the texture should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
////////////////////////////////////////////////////////////////////
65
void Texture::prepare(PreparedGraphicsObjects *prepared_objects);

1502 7 release 4 1728 16 Texture::release 0 1 689 394
////////////////////////////////////////////////////////////////////
//     Function: Texture::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
65
bool Texture::release(PreparedGraphicsObjects *prepared_objects);

1503 11 release_all 4 1728 20 Texture::release_all 0 1 690 392
////////////////////////////////////////////////////////////////////
//     Function: Texture::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
31
int Texture::release_all(void);

1504 23 estimate_texture_memory 4 1728 32 Texture::estimate_texture_memory 0 1 691 775
////////////////////////////////////////////////////////////////////
//     Function: Texture::estimate_texture_memory
//       Access: Published
//  Description: Estimates the amount of texture memory that will be
//               consumed by loading this texture.  This returns a
//               value that is not specific to any particular graphics
//               card or driver; it tries to make a reasonable
//               assumption about how a driver will load the texture.
//               It does not account for texture compression or
//               anything fancy.  This is mainly useful for debugging
//               and reporting purposes.
//
//               Returns a value in bytes.
////////////////////////////////////////////////////////////////////
58
unsigned int Texture::estimate_texture_memory(void) const;

1505 12 set_filename 4 1728 21 Texture::set_filename 0 1 692 834
// These are published, but in general, you shouldn't be mucking
// with these values; they are set automatically when a texture is
// loaded.

////////////////////////////////////////////////////////////////////
//     Function: Texture::set_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               contents.  Normally, this is set automatically when
//               the image is loaded, for instance via
//               Texture::read().
//
//               The Texture's get_name() function used to return
//               the filename, but now returns just the basename
//               (without the extension), which is a more useful name
//               for identifying an image in show code.
////////////////////////////////////////////////////////////////////
60
inline void Texture::set_filename(Filename const &filename);

1506 14 clear_filename 4 1728 23 Texture::clear_filename 0 1 693 457
// These are published, but in general, you shouldn't be mucking
// with these values; they are set automatically when a texture is
// loaded.

////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_filename().
////////////////////////////////////////////////////////////////////
42
inline void Texture::clear_filename(void);

1507 18 set_alpha_filename 4 1728 27 Texture::set_alpha_filename 0 1 694 915
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_filename
//       Access: Published
//  Description: Sets the name of the file that contains the image's
//               alpha channel contents.  Normally, this is set
//               automatically when the image is loaded, for instance
//               via Texture::read().
//
//               The Texture's get_filename() function returns the
//               name of the image file that was loaded into the
//               buffer.  In the case where a texture specified two
//               separate files to load, a 1- or 3-channel color image
//               and a 1-channel alpha image, this Filename is update
//               to contain the name of the image file that was loaded
//               into the buffer's alpha channel.
////////////////////////////////////////////////////////////////////
72
inline void Texture::set_alpha_filename(Filename const &alpha_filename);

1508 20 clear_alpha_filename 4 1728 29 Texture::clear_alpha_filename 0 1 695 325
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_filename
//       Access: Published
//  Description: Removes the alpha filename, if it was previously set.
//               See set_alpha_filename().
////////////////////////////////////////////////////////////////////
48
inline void Texture::clear_alpha_filename(void);

1509 12 set_fullpath 4 1728 21 Texture::set_fullpath 0 1 696 470
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's contents, as found along the search path.
//               Normally, this is set automatically when the image is
//               loaded, for instance via Texture::read().
////////////////////////////////////////////////////////////////////
60
inline void Texture::set_fullpath(Filename const &fullpath);

1510 14 clear_fullpath 4 1728 23 Texture::clear_fullpath 0 1 697 313
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_fullpath().
////////////////////////////////////////////////////////////////////
42
inline void Texture::clear_fullpath(void);

1511 18 set_alpha_fullpath 4 1728 27 Texture::set_alpha_fullpath 0 1 698 508
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_alpha_fullpath
//       Access: Published
//  Description: Sets the full pathname to the file that contains the
//               image's alpha channel contents, as found along the
//               search path.  Normally, this is set automatically
//               when the image is loaded, for instance via
//               Texture::read().
////////////////////////////////////////////////////////////////////
72
inline void Texture::set_alpha_fullpath(Filename const &alpha_fullpath);

1512 20 clear_alpha_fullpath 4 1728 29 Texture::clear_alpha_fullpath 0 1 699 325
////////////////////////////////////////////////////////////////////
//     Function: Texture::clear_alpha_fullpath
//       Access: Published
//  Description: Removes the alpha fullpath, if it was previously set.
//               See set_alpha_fullpath().
////////////////////////////////////////////////////////////////////
48
inline void Texture::clear_alpha_fullpath(void);

1513 10 set_x_size 4 1728 19 Texture::set_x_size 0 1 700 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_x_size
//       Access: Published
//  Description: Changes the x size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_x_size(int x_size);

1514 10 set_y_size 4 1728 19 Texture::set_y_size 0 1 701 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_y_size
//       Access: Published
//  Description: Changes the y size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_y_size(int y_size);

1515 10 set_z_size 4 1728 19 Texture::set_z_size 0 1 702 371
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_z_size
//       Access: Published
//  Description: Changes the z size indicated for the texture.  This
//               also implicitly unloads the texture if it has already
//               been loaded.
////////////////////////////////////////////////////////////////////
44
inline void Texture::set_z_size(int z_size);

1516 10 set_format 4 1728 19 Texture::set_format 0 1 703 333
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_format
//       Access: Published
//  Description: Changes the format value for the texture components.
//               This implicitly sets num_components as well.
////////////////////////////////////////////////////////////////////
49
void Texture::set_format(Texture::Format format);

1517 18 set_component_type 4 1728 27 Texture::set_component_type 0 1 704 340
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_component_type
//       Access: Published
//  Description: Changes the data value for the texture components.
//               This implicitly sets component_width as well.
////////////////////////////////////////////////////////////////////
72
void Texture::set_component_type(Texture::ComponentType component_type);

1518 21 set_loaded_from_image 4 1728 30 Texture::set_loaded_from_image 0 1 705 553
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_image
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  You should also
//               ensure the filename has been set correctly.  When
//               this flag is true, the texture may be automatically
//               reloaded when its ram image needs to be replaced.
////////////////////////////////////////////////////////////////////
49
inline void Texture::set_loaded_from_image(void);

1519 21 get_loaded_from_image 4 1728 30 Texture::get_loaded_from_image 0 1 706 383
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_image
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a disk file or PNMImage.  See
//               set_loaded_from_image().
////////////////////////////////////////////////////////////////////
55
inline bool Texture::get_loaded_from_image(void) const;

1520 19 set_loaded_from_txo 4 1728 28 Texture::set_loaded_from_txo 0 1 707 452
////////////////////////////////////////////////////////////////////
//     Function: Texture::set_loaded_from_txo
//       Access: Published
//  Description: Sets the flag that indicates the texture has been
//               loaded from a txo file.  You probably shouldn't be
//               setting this directly; it is set automatically when a
//               Texture is loaded.
////////////////////////////////////////////////////////////////////
47
inline void Texture::set_loaded_from_txo(void);

1521 19 get_loaded_from_txo 4 1728 28 Texture::get_loaded_from_txo 0 1 708 321
////////////////////////////////////////////////////////////////////
//     Function: Texture::get_loaded_from_txo
//       Access: Published
//  Description: Returns the flag that indicates the texture has been
//               loaded from a txo file.
////////////////////////////////////////////////////////////////////
53
inline bool Texture::get_loaded_from_txo(void) const;

1522 9 is_mipmap 4 1728 18 Texture::is_mipmap 0 1 709 338
////////////////////////////////////////////////////////////////////
//     Function: Texture::is_mipmap
//       Access: Published, Static
//  Description: Returns true if the indicated filter type requires
//               the use of mipmaps, or false if it does not.
////////////////////////////////////////////////////////////////////
57
static bool Texture::is_mipmap(Texture::FilterType type);

1523 14 get_class_type 4 1728 23 Texture::get_class_type 0 1 710 0
48
static TypeHandle Texture::get_class_type(void);

1524 4 make 4 1736 21 ShaderExpansion::make 0 1 715 277
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::make
//       Access: Public, Static
//  Description: Create a shader expansion (or reuse one from cache)
////////////////////////////////////////////////////////////////////
126
static PointerTo< ShaderExpansion > ShaderExpansion::make(basic_string< char > const &name, basic_string< char > const &body);

1525 8 get_name 4 1736 25 ShaderExpansion::get_name 0 1 716 932
// Filename: shaderExpansion.I
// Heavily Modified:  jyelon (Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function: ShaderExpansion::get_name
//  Access: Public
//  Description: Return the ShaderExpansion's text.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ShaderExpansion::get_name(void) const;

1526 8 get_text 4 1736 25 ShaderExpansion::get_text 0 1 717 248
////////////////////////////////////////////////////////////////////
//  Function: ShaderExpansion::get_text
//  Access: Public
//  Description: Return the ShaderExpansion's text.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ShaderExpansion::get_text(void) const;

1527 7 prepare 4 1736 24 ShaderExpansion::prepare 0 1 718 662
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::prepare
//       Access: Published
//  Description: Indicates that the shader should be enqueued to be
//               prepared in the indicated prepared_objects at the
//               beginning of the next frame.  This will ensure the
//               texture is already loaded into texture memory if it
//               is expected to be rendered soon.
//
//               Use this function instead of prepare_now() to preload
//               textures from a user interface standpoint.
////////////////////////////////////////////////////////////////////
73
void ShaderExpansion::prepare(PreparedGraphicsObjects *prepared_objects);

1528 7 release 4 1736 24 ShaderExpansion::release 0 1 719 402
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::release
//       Access: Published
//  Description: Frees the texture context only on the indicated object,
//               if it exists there.  Returns true if it was released,
//               false if it had not been prepared.
////////////////////////////////////////////////////////////////////
73
bool ShaderExpansion::release(PreparedGraphicsObjects *prepared_objects);

1529 11 release_all 4 1736 28 ShaderExpansion::release_all 0 1 720 400
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::release_all
//       Access: Published
//  Description: Frees the context allocated on all objects for which
//               the texture has been declared.  Returns the number of
//               contexts which have been freed.
////////////////////////////////////////////////////////////////////
39
int ShaderExpansion::release_all(void);

1530 10 parse_init 4 1736 27 ShaderExpansion::parse_init 0 1 721 389
// These routines help split the shader into sections,
// for those shader implementations that need to do so.

////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_init
//       Access: Public
//  Description: Set a 'parse pointer' to the beginning of the shader.
////////////////////////////////////////////////////////////////////
39
void ShaderExpansion::parse_init(void);

1531 10 parse_line 4 1736 27 ShaderExpansion::parse_line 0 1 722 549
// These routines help split the shader into sections,
// for those shader implementations that need to do so.

////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_line
//       Access: Public
//  Description: Parse a line of text. If 'lt' is true, trim blanks
//               from the left end of the line. If 'rt' is true, trim
//               blanks from the right end (the newline is always
//               trimmed).
////////////////////////////////////////////////////////////////////
81
void ShaderExpansion::parse_line(basic_string< char > &result, bool rt, bool lt);

1532 10 parse_upto 4 1736 27 ShaderExpansion::parse_upto 0 1 723 442
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_upto
//       Access: Public
//  Description: Parse lines until you read a line that matches the
//               specified pattern.  Returns all the preceding lines,
//               and if the include flag is set, returns the final
//               line as well.
////////////////////////////////////////////////////////////////////
107
void ShaderExpansion::parse_upto(basic_string< char > &result, basic_string< char > pattern, bool include);

1533 10 parse_rest 4 1736 27 ShaderExpansion::parse_rest 0 1 724 302
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_rest
//       Access: Public
//  Description: Returns the rest of the text from the current
//               parse location.
////////////////////////////////////////////////////////////////////
63
void ShaderExpansion::parse_rest(basic_string< char > &result);

1534 12 parse_lineno 4 1736 29 ShaderExpansion::parse_lineno 0 1 725 279
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_lineno
//       Access: Public
//  Description: Returns the line number of the current parse pointer.
////////////////////////////////////////////////////////////////////
40
int ShaderExpansion::parse_lineno(void);

1535 9 parse_eof 4 1736 26 ShaderExpansion::parse_eof 0 1 726 302
////////////////////////////////////////////////////////////////////
//     Function: ShaderExpansion::parse_eof
//       Access: Public
//  Description: Returns true if the parse pointer is at the end of
//               the shader.
////////////////////////////////////////////////////////////////////
38
bool ShaderExpansion::parse_eof(void);

1536 14 get_class_type 4 1736 31 ShaderExpansion::get_class_type 0 1 727 0
56
static TypeHandle ShaderExpansion::get_class_type(void);

1537 9 make_copy 4 1738 15 Lens::make_copy 0 1 728 0
58
virtual PointerTo< Lens > Lens::make_copy(void) const = 0;

1538 7 extrude 4 1738 13 Lens::extrude 0 2 729 730 2308
// Filename: lens.I
// Created by:  drose (29Nov01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the corresponding vector in space that maps
//               to this point, if such a vector can be determined.
//               The vector is returned by indicating the points on
//               the near plane and far plane that both map to the
//               indicated 2-d point.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
100
inline bool Lens::extrude(LPoint2f const &point2d, LPoint3f &near_point, LPoint3f &far_point) const;

1539 11 extrude_vec 4 1738 17 Lens::extrude_vec 0 2 731 732 1838
////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::extrude_vec
//       Access: Published
//  Description: Given a 2-d point in the range (-1,1) in both
//               dimensions, where (0,0) is the center of the
//               lens and (-1,-1) is the lower-left corner,
//               compute the vector that corresponds to the view
//               direction.  This will be parallel to the normal on
//               the surface (the far plane) corresponding to the lens
//               shape at this point.
//
//               See the comment block on Lens::extrude_vec_impl() for
//               a more in-depth comment on the meaning of this
//               vector.
//
//               The z coordinate of the 2-d point is ignored.
//
//               Returns true if the vector is defined, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
79
inline bool Lens::extrude_vec(LPoint2f const &point2d, LVector3f &vec3d) const;

1540 7 project 4 1738 13 Lens::project 0 2 733 734 1751
////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::project
//       Access: Published
//  Description: Given a 3-d point in space, determine the 2-d point
//               this maps to, in the range (-1,1) in both dimensions,
//               where (0,0) is the center of the lens and
//               (-1,-1) is the lower-left corner.
//
//               The z coordinate will also be set to a value in the
//               range (-1, 1), where 1 represents a point on the near
//               plane, and -1 represents a point on the far plane.
//
//               Returns true if the 3-d point is in front of the lens
//               and within the viewing frustum (in which case point2d
//               is filled in), or false otherwise (in which case
//               point2d will be filled in with something, which may
//               or may not be meaningful).
////////////////////////////////////////////////////////////////////
76
inline bool Lens::project(LPoint3f const &point3d, LPoint3f &point2d) const;

1541 16 set_change_event 4 1738 22 Lens::set_change_event 0 1 735 643
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_change_event
//       Access: Published
//  Description: Sets the name of the event that will be generated
//               whenever any properties of the Lens have
//               changed.  If this is not set for a particular lens,
//               no event will be generated.
//
//               The event is thrown with one parameter, the lens
//               itself.  This can be used to automatically track
//               changes to camera fov, etc. in the application.
////////////////////////////////////////////////////////////////////
70
inline void Lens::set_change_event(basic_string< char > const &event);

1542 16 get_change_event 4 1738 22 Lens::get_change_event 0 1 736 370
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_change_event
//       Access: Published
//  Description: Returns the name of the event that will be generated
//               whenever any properties of this particular Lens have
//               changed.
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &Lens::get_change_event(void) const;

1543 21 set_coordinate_system 4 1738 27 Lens::set_coordinate_system 0 1 737 385
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_coordinate_system
//       Access: Published
//  Description: Specifies the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
////////////////////////////////////////////////////////////////////
54
void Lens::set_coordinate_system(CoordinateSystem cs);

1544 21 get_coordinate_system 4 1738 27 Lens::get_coordinate_system 0 1 738 383
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system that all 3-d
//               computations are performed within for this
//               Lens.  Normally, this is CS_default.
////////////////////////////////////////////////////////////////////
64
inline CoordinateSystem Lens::get_coordinate_system(void) const;

1545 5 clear 4 1738 11 Lens::clear 0 1 739 289
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear
//       Access: Published
//  Description: Resets all lens parameters to their initial default
//               settings.
////////////////////////////////////////////////////////////////////
23
void Lens::clear(void);

1546 13 set_film_size 4 1738 19 Lens::set_film_size 0 3 740 741 742 2825
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the horizontal size of the film without changing
//               its shape.  The aspect ratio remains unchanged; this
//               computes the vertical size of the film to
//               automatically maintain the aspect ratio.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_size
//       Access: Published
//  Description: Sets the size and shape of the "film" within the
//               lens.  This both establishes the units used by
//               calls like set_focal_length(), and establishes the
//               aspect ratio of the frame.
//
//               In a physical camera, the field of view of a lens is
//               determined by the lens' focal length and by the size
//               of the film area exposed by the lens.  For instance,
//               a 35mm camera exposes a rectangle on the film about
//               24mm x 36mm, which means a 50mm lens gives about a
//               40-degree horizontal field of view.
//
//               In the virtual camera, you may set the film size to
//               any units here, and specify a focal length in the
//               same units to simulate the same effect.  Or, you may
//               ignore this parameter, and specify the field of view
//               and aspect ratio of the lens directly.
////////////////////////////////////////////////////////////////////
38
void Lens::set_film_size(float width);

1547 13 get_film_size 4 1738 19 Lens::get_film_size 0 1 743 324
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_size
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_film_size().
////////////////////////////////////////////////////////////////////
50
LVecBase2f const &Lens::get_film_size(void) const;

1548 15 set_film_offset 4 1738 21 Lens::set_film_offset 0 2 744 745 898
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_film_offset
//       Access: Published
//  Description: Sets the horizontal and vertical offset amounts of
//               this Lens.  These are both in the same units
//               specified in set_film_size().
//
//               This can be used to establish an off-axis lens.
////////////////////////////////////////////////////////////////////
52
inline void Lens::set_film_offset(float x, float y);

1549 15 get_film_offset 4 1738 21 Lens::get_film_offset 0 1 746 326
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_offset
//       Access: Published
//  Description: Returns the horizontal and vertical offset amounts of
//               this Lens.  See set_film_offset().
////////////////////////////////////////////////////////////////////
58
inline LVector2f const &Lens::get_film_offset(void) const;

1550 16 set_focal_length 4 1738 22 Lens::set_focal_length 0 1 747 515
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_focal_length
//       Access: Published
//  Description: Sets the focal length of the lens.  This may adjust
//               the field-of-view correspondingly, and is an
//               alternate way to specify field of view.
//
//               For certain kinds of lenses (e.g. OrthographicLens),
//               the focal length has no meaning.
////////////////////////////////////////////////////////////////////
48
void Lens::set_focal_length(float focal_length);

1551 16 get_focal_length 4 1738 22 Lens::get_focal_length 0 1 748 527
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_focal_length
//       Access: Published
//  Description: Returns the focal length of the lens.  This may have
//               been set explicitly by a previous call to
//               set_focal_length(), or it may be computed based on
//               the lens' fov and film_size.  For certain kinds of
//               lenses, the focal length has no meaning.
////////////////////////////////////////////////////////////////////
41
float Lens::get_focal_length(void) const;

1552 11 set_min_fov 4 1738 17 Lens::set_min_fov 0 1 749 836
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_min_fov
//       Access: Published
//  Description: Sets the field of view of the smallest dimension of
//               the window.  If the window is wider than it is tall,
//               this specifies the vertical field of view; if it is
//               taller than it is wide, this specifies the horizontal
//               field of view.
//
//               In many cases, this is preferable to setting either
//               the horizontal or vertical field of view explicitly.
//               Setting this parameter means that pulling the window
//               wider will widen the field of view, which is usually
//               what you expect to happen.
////////////////////////////////////////////////////////////////////
38
void Lens::set_min_fov(float min_fov);

1553 7 set_fov 4 1738 13 Lens::set_fov 0 3 750 751 752 1651
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthoLens),
//               the field of view has no meaning.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the horizontal field of view of the lens without
//               changing the aspect ratio.  The vertical field of
//               view is adjusted to maintain the same aspect ratio.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_fov
//       Access: Published
//  Description: Sets the field of view of the lens in both
//               dimensions.  This establishes both the field of view
//               and the aspect ratio of the lens.  This is one way to
//               specify the field of view of a lens;
//               set_focal_length() is another way.
//
//               For certain kinds of lenses (like OrthographicLens),
//               the field of view has no meaning.
////////////////////////////////////////////////////////////////////
30
void Lens::set_fov(float fov);

1554 7 get_fov 4 1738 13 Lens::get_fov 0 1 753 312
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_fov
//       Access: Published
//  Description: Returns the horizontal and vertical film size of
//               the virtual film.  See set_fov().
////////////////////////////////////////////////////////////////////
44
LVecBase2f const &Lens::get_fov(void) const;

1555 8 get_hfov 4 1738 14 Lens::get_hfov 0 1 754 292
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_hfov
//       Access: Published
//  Description: Returns the horizontal component of fov only.  See
//               get_fov().
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_hfov(void) const;

1556 8 get_vfov 4 1738 14 Lens::get_vfov 0 1 755 290
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_vfov
//       Access: Published
//  Description: Returns the vertical component of fov only.  See
//               get_fov().
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_vfov(void) const;

1557 11 get_min_fov 4 1738 17 Lens::get_min_fov 0 1 756 321
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_min_fov
//       Access: Published
//  Description: Returns the field of view of the narrowest dimension
//               of the window.  See set_min_fov().
////////////////////////////////////////////////////////////////////
36
float Lens::get_min_fov(void) const;

1558 16 set_aspect_ratio 4 1738 22 Lens::set_aspect_ratio 0 1 757 444
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_aspect_ratio
//       Access: Published
//  Description: Sets the aspect ratio of the lens.  This is the ratio
//               of the height to the width of the generated image.
//               Setting this overrides the two-parameter fov or film
//               size setting.
////////////////////////////////////////////////////////////////////
48
void Lens::set_aspect_ratio(float aspect_ratio);

1559 16 get_aspect_ratio 4 1738 22 Lens::get_aspect_ratio 0 1 758 368
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_aspect_ratio
//       Access: Published
//  Description: Returns the aspect ratio of the Lens.  This is
//               determined based on the indicated film size; see
//               set_film_size().
////////////////////////////////////////////////////////////////////
41
float Lens::get_aspect_ratio(void) const;

1560 8 set_near 4 1738 14 Lens::set_near 0 1 759 377
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near
//       Access: Published
//  Description: Defines the position of the near plane (or cylinder,
//               sphere, whatever).  Points closer to the lens than
//               this may not be rendered.
////////////////////////////////////////////////////////////////////
48
inline void Lens::set_near(float near_distance);

1561 8 get_near 4 1738 14 Lens::get_near 0 1 760 302
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_near
//       Access: Published
//  Description: Returns the position of the near plane (or cylinder,
//               sphere, whatever).
////////////////////////////////////////////////////////////////////
40
inline float Lens::get_near(void) const;

1562 7 set_far 4 1738 13 Lens::set_far 0 1 761 378
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_far
//       Access: Published
//  Description: Defines the position of the far plane (or cylinder,
//               sphere, whatever).  Points farther from the lens than
//               this may not be rendered.
////////////////////////////////////////////////////////////////////
46
inline void Lens::set_far(float far_distance);

1563 7 get_far 4 1738 13 Lens::get_far 0 1 762 300
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_far
//       Access: Published
//  Description: Returns the position of the far plane (or cylinder,
//               sphere, whatever).
////////////////////////////////////////////////////////////////////
39
inline float Lens::get_far(void) const;

1564 12 set_near_far 4 1738 18 Lens::set_near_far 0 1 763 265
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_near_far
//       Access: Published
//  Description: Simultaneously changes the near and far planes.
////////////////////////////////////////////////////////////////////
72
inline void Lens::set_near_far(float near_distance, float far_distance);

1565 16 get_default_near 4 1738 22 Lens::get_default_near 0 1 764 391
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_near
//       Access: Published, Static
//  Description: Returns the default near plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
////////////////////////////////////////////////////////////////////
42
static float Lens::get_default_near(void);

1566 15 get_default_far 4 1738 21 Lens::get_default_far 0 1 765 389
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_default_far
//       Access: Published, Static
//  Description: Returns the default far plane distance that will be
//               assigned to each newly-created lens.  This is read
//               from the Configrc file.
////////////////////////////////////////////////////////////////////
41
static float Lens::get_default_far(void);

1567 12 set_view_hpr 4 1738 18 Lens::set_view_hpr 0 2 766 767 1188
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_hpr
//       Access: Published
//  Description: Sets the direction in which the lens is facing.
//               Normally, this is down the forward axis (usually the
//               Y axis), but it may be rotated.  This is only one way
//               of specifying the rotation; you may also specify an
//               explicit vector in which to look, or you may give a
//               complete transformation matrix.
////////////////////////////////////////////////////////////////////
58
inline void Lens::set_view_hpr(float h, float p, float r);

1568 12 get_view_hpr 4 1738 18 Lens::get_view_hpr 0 1 768 268
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_hpr
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
////////////////////////////////////////////////////////////////////
49
LVecBase3f const &Lens::get_view_hpr(void) const;

1569 15 set_view_vector 4 1738 21 Lens::set_view_vector 0 2 769 770 882
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_vector
//       Access: Published
//  Description: Specifies the direction in which the lens is facing
//               by giving an axis to look along, and a perpendicular
//               (or at least non-parallel) up axis.
//
//               See also set_view_hpr().
////////////////////////////////////////////////////////////////////
88
inline void Lens::set_view_vector(float x, float y, float z, float i, float j, float k);

1570 15 get_view_vector 4 1738 21 Lens::get_view_vector 0 1 771 269
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_vector
//       Access: Published
//  Description: Returns the axis along which the lens is facing.
////////////////////////////////////////////////////////////////////
51
LVector3f const &Lens::get_view_vector(void) const;

1571 13 get_up_vector 4 1738 19 Lens::get_up_vector 0 1 772 329
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_up_vector
//       Access: Published
//  Description: Returns the axis perpendicular to the camera's view
//               vector that indicates the "up" direction.
////////////////////////////////////////////////////////////////////
49
LVector3f const &Lens::get_up_vector(void) const;

1572 15 get_nodal_point 4 1738 21 Lens::get_nodal_point 0 1 773 317
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_nodal_point
//       Access: Published
//  Description: Returns the center point of the lens: the point from
//               which the lens is viewing.
////////////////////////////////////////////////////////////////////
43
LPoint3f Lens::get_nodal_point(void) const;

1573 24 set_interocular_distance 4 1738 30 Lens::set_interocular_distance 0 1 774 586
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_interocular_distance
//       Access: Published
//  Description: Sets the distance between the left and right eyes of
//               a stereo camera.  This distance is used to apply a
//               stereo effect when the lens is rendered on a stereo
//               display region.  It only has an effect on a
//               PerspectiveLens.
//
//               Also see set_interocular_distance(), which relates.
////////////////////////////////////////////////////////////////////
64
void Lens::set_interocular_distance(float interocular_distance);

1574 24 get_interocular_distance 4 1738 30 Lens::get_interocular_distance 0 1 775 261
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_interocular_distance
//       Access: Published
//  Description: See set_interocular_distance().
////////////////////////////////////////////////////////////////////
49
float Lens::get_interocular_distance(void) const;

1575 24 set_convergence_distance 4 1738 30 Lens::set_convergence_distance 0 1 776 586
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_convergence_distance
//       Access: Published
//  Description: Sets the distance between the left and right eyes of
//               a stereo camera.  This distance is used to apply a
//               stereo effect when the lens is rendered on a stereo
//               display region.  It only has an effect on a
//               PerspectiveLens.
//
//               Also see set_interocular_distance(), which relates.
////////////////////////////////////////////////////////////////////
64
void Lens::set_convergence_distance(float convergence_distance);

1576 24 get_convergence_distance 4 1738 30 Lens::get_convergence_distance 0 1 777 261
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_convergence_distance
//       Access: Published
//  Description: See set_convergence_distance().
////////////////////////////////////////////////////////////////////
49
float Lens::get_convergence_distance(void) const;

1577 12 set_view_mat 4 1738 18 Lens::set_view_mat 0 1 778 831
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_view_mat
//       Access: Published
//  Description: Sets an arbitrary transformation on the lens.  This
//               replaces the individual transformation components
//               like set_view_hpr().
//
//               Setting a transformation here will have a slightly
//               different effect than putting one on the LensNode
//               that contains this lens.  In particular, lighting and
//               other effects computations will still be performed on
//               the lens in its untransformed (facing forward)
//               position, but the actual projection matrix will be
//               transformed by this matrix.
////////////////////////////////////////////////////////////////////
51
void Lens::set_view_mat(LMatrix4f const &view_mat);

1578 12 get_view_mat 4 1738 18 Lens::get_view_mat 0 1 779 268
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_view_mat
//       Access: Published
//  Description: Returns the direction in which the lens is facing.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Lens::get_view_mat(void) const;

1579 14 clear_view_mat 4 1738 20 Lens::clear_view_mat 0 1 780 258
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_view_mat
//       Access: Published
//  Description: Resets the lens transform to identity.
////////////////////////////////////////////////////////////////////
32
void Lens::clear_view_mat(void);

1580 12 set_keystone 4 1738 18 Lens::set_keystone 0 1 781 988
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_keystone
//       Access: Published
//  Description: Indicates the ratio of keystone correction to perform
//               on the lens, in each of three axes.  This will build
//               a special non-affine scale factor into the projection
//               matrix that will compensate for keystoning of a
//               projected image; this can be used to compensate for a
//               projector that for physical reasons cannot be aimed
//               directly at it screen.  
//
//               The default value is taken from the default-keystone
//               Config variable.  0, 0 indicates no keystone
//               correction; specify a small value (usually in the
//               range -1 .. 1) in either the x or y position to
//               generate a keystone correction in that axis.
////////////////////////////////////////////////////////////////////
52
void Lens::set_keystone(LVecBase2f const &keystone);

1581 12 get_keystone 4 1738 18 Lens::get_keystone 0 1 782 290
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_keystone
//       Access: Published
//  Description: Returns the keystone correction specified for the
//               lens.
////////////////////////////////////////////////////////////////////
56
inline LVecBase2f const &Lens::get_keystone(void) const;

1582 14 clear_keystone 4 1738 20 Lens::clear_keystone 0 1 783 258
////////////////////////////////////////////////////////////////////
//     Function: Lens::clear_keystone
//       Access: Published
//  Description: Disables the lens keystone correction.
////////////////////////////////////////////////////////////////////
32
void Lens::clear_keystone(void);

1583 24 set_frustum_from_corners 4 1738 30 Lens::set_frustum_from_corners 0 1 784 3080
////////////////////////////////////////////////////////////////////
//     Function: Lens::set_frustum_from_corners
//       Access: Published
//  Description: Sets up the lens to use the frustum defined by the
//               four indicated points.  This is most useful for a
//               PerspectiveLens, but it may be called for other kinds
//               of lenses as well.
//
//               The frustum will be rooted at the origin (or by
//               whatever translation might have been specified in a
//               previous call to set_view_mat).
//
//               It is legal for the four points not to be arranged in
//               a rectangle; if this is the case, the frustum will be
//               fitted as tightly as possible to cover all four
//               points.
//
//               The flags parameter contains the union of one or more
//               of the following bits to control the behavior of this
//               function:
//
//               FC_roll - If this is included, the camera may be
//               rotated so that its up vector is perpendicular to the
//               top line.  Otherwise, the standard up vector is used.
//
//               FC_camera_plane - This allows the camera plane to be
//               adjusted to be as nearly perpendicular to the center
//               of the frustum as possible.  Without this bit, the
//               orientation camera plane is defined by position of
//               the four points (which should all be coplanar).  With
//               this bit, the camera plane is arbitarary, and may be
//               chosen so that the four points do not themselves lie
//               in the camera plane (but the points will still be
//               within the frustum).
//
//               FC_off_axis - This allows the resulting frustum to be
//               off-axis to get the tightest possible fit.  Without
//               this bit, the viewing axis will be centered within
//               the frustum, but there may be more wasted space along
//               the edges.
//
//               FC_aspect_ratio - This allows the frustum to be
//               scaled non-proportionately in the vertical and
//               horizontal dimensions, if necessary, to get a tighter
//               fit.  Without this bit, the current aspect ratio will
//               be preserved.
//
//               FC_shear - This allows the frustum to be sheared, if
//               necessary, to get the tightest possible fit.  This
//               may result in a parallelogram-based frustum, which
//               will give a slanted appearance to the rendered image.
//               Without this bit, the frustum will be
//               rectangle-based.
//
//               In general, if 0 is passed in as the value for flags,
//               the generated frustum will be a loose fit but sane;
//               if -1 is passed in, it will be a tighter fit and
//               possibly screwy.
////////////////////////////////////////////////////////////////////
135
void Lens::set_frustum_from_corners(LVecBase3f const &ul, LVecBase3f const &ur, LVecBase3f const &ll, LVecBase3f const &lr, int flags);

1584 13 recompute_all 4 1738 19 Lens::recompute_all 0 1 785 405
////////////////////////////////////////////////////////////////////
//     Function: Lens::recompute_all
//       Access: Published
//  Description: Forces all internal parameters of the Lens to be
//               recomputed.  Normally, this should never need to be
//               called; it is provided only to assist in debugging.
////////////////////////////////////////////////////////////////////
31
void Lens::recompute_all(void);

1585 9 is_linear 4 1738 15 Lens::is_linear 0 1 786 464
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_linear
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a linear
//               projection (e.g. PerspectiveLens, OrthographicLens),
//               and therefore there is a valid matrix returned by
//               get_projection_mat(), or false otherwise.
////////////////////////////////////////////////////////////////////
41
virtual bool Lens::is_linear(void) const;

1586 14 is_perspective 4 1738 20 Lens::is_perspective 0 1 787 372
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_perspective
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a perspective
//               projection (i.e. it is a PerspectiveLens), false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool Lens::is_perspective(void) const;

1587 15 is_orthographic 4 1738 21 Lens::is_orthographic 0 1 788 375
////////////////////////////////////////////////////////////////////
//     Function: Lens::is_orthographic
//       Access: Published, Virtual
//  Description: Returns true if the lens represents a orthographic
//               projection (i.e. it is a OrthographicLens), false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool Lens::is_orthographic(void) const;

1588 13 make_geometry 4 1738 19 Lens::make_geometry 0 1 789 515
////////////////////////////////////////////////////////////////////
//     Function: Lens::make_geometry
//       Access: Published, Virtual
//  Description: Allocates and returns a new Geom that can be rendered
//               to show a visible representation of the frustum used
//               for this kind of lens, if it makes sense to do
//               so.  If a visible representation cannot be created,
//               returns NULL.
////////////////////////////////////////////////////////////////////
52
virtual PointerTo< Geom > Lens::make_geometry(void);

1589 11 make_bounds 4 1738 17 Lens::make_bounds 0 1 790 450
////////////////////////////////////////////////////////////////////
//     Function: Lens::make_bounds
//       Access: Published, Virtual
//  Description: Allocates and returns a new BoundingVolume that
//               encloses the frustum used for this kind of
//               lens, if possible.  If a suitable bounding
//               volume cannot be created, returns NULL.
////////////////////////////////////////////////////////////////////
66
virtual PointerTo< BoundingVolume > Lens::make_bounds(void) const;

1590 18 get_projection_mat 4 1738 24 Lens::get_projection_mat 0 2 791 792 441
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat
//       Access: Published
//  Description: Returns the complete transformation matrix from a 3-d
//               point in space to a point on the film, if such a
//               matrix exists, or the identity matrix if the lens is
//               nonlinear.
////////////////////////////////////////////////////////////////////
89
LMatrix4f const &Lens::get_projection_mat(Lens::StereoChannel channel = (SC_mono)) const;

1591 22 get_projection_mat_inv 4 1738 28 Lens::get_projection_mat_inv 0 2 793 794 376
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_projection_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a 2-d point
//               on the film to a 3-d vector in space, if such a
//               matrix exists.
////////////////////////////////////////////////////////////////////
93
LMatrix4f const &Lens::get_projection_mat_inv(Lens::StereoChannel channel = (SC_mono)) const;

1592 12 get_film_mat 4 1738 18 Lens::get_film_mat 0 1 795 322
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               behind the lens to a point on the film.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Lens::get_film_mat(void) const;

1593 16 get_film_mat_inv 4 1738 22 Lens::get_film_mat_inv 0 1 796 326
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_film_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point on
//               the film to a point behind the lens.
////////////////////////////////////////////////////////////////////
52
LMatrix4f const &Lens::get_film_mat_inv(void) const;

1594 12 get_lens_mat 4 1738 18 Lens::get_lens_mat 0 1 797 324
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat
//       Access: Published
//  Description: Returns the matrix that transforms from a point
//               in front of the lens to a point in space.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Lens::get_lens_mat(void) const;

1595 16 get_lens_mat_inv 4 1738 22 Lens::get_lens_mat_inv 0 1 798 328
////////////////////////////////////////////////////////////////////
//     Function: Lens::get_lens_mat_inv
//       Access: Published
//  Description: Returns the matrix that transforms from a point in
//               space to a point in front of the lens.
////////////////////////////////////////////////////////////////////
52
LMatrix4f const &Lens::get_lens_mat_inv(void) const;

1596 6 output 4 1738 12 Lens::output 0 1 799 221
////////////////////////////////////////////////////////////////////
//     Function: Lens::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual void Lens::output(ostream &out) const;

1597 5 write 4 1738 11 Lens::write 0 2 800 801 220
////////////////////////////////////////////////////////////////////
//     Function: Lens::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
69
virtual void Lens::write(ostream &out, int indent_level = (0)) const;

1598 14 get_class_type 4 1738 20 Lens::get_class_type 0 1 802 0
45
static TypeHandle Lens::get_class_type(void);

1599 5 ~Lens 4 1738 11 Lens::~Lens 0 0 0
18
Lens::~Lens(void);

1600 37 upcast_to_TypedWritableReferenceCount 12 1741 47 Material::upcast_to_TypedWritableReferenceCount 0 1 836 51
upcast from Material to TypedWritableReferenceCount
83
TypedWritableReferenceCount *Material::upcast_to_TypedWritableReferenceCount(void);

1601 20 downcast_to_Material 12 1699 49 TypedWritableReferenceCount::downcast_to_Material 0 1 837 53
downcast from TypedWritableReferenceCount to Material
66
Material *TypedWritableReferenceCount::downcast_to_Material(void);

1602 17 upcast_to_Namable 12 1741 27 Material::upcast_to_Namable 0 1 838 31
upcast from Material to Namable
43
Namable *Material::upcast_to_Namable(void);

1603 20 downcast_to_Material 12 1729 29 Namable::downcast_to_Material 0 1 839 33
downcast from Namable to Material
46
Material *Namable::downcast_to_Material(void);

1604 8 Material 4 1741 18 Material::Material 0 3 803 804 805 1118
// Filename: material.I
// Created by:  mike (05Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Material::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline Material::Material(basic_string< char > const &name = (""));

1605 10 operator = 4 1741 20 Material::operator = 0 1 806 233
////////////////////////////////////////////////////////////////////
//     Function: Material::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void Material::operator =(Material const &copy);

1606 9 ~Material 4 1741 19 Material::~Material 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Material::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
virtual inline Material::~Material(void);

1607 11 has_ambient 4 1741 21 Material::has_ambient 0 1 807 331
////////////////////////////////////////////////////////////////////
//     Function: Material::has_ambient
//       Access: Published
//  Description: Returns true if the ambient color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Material::has_ambient(void) const;

1608 11 get_ambient 4 1741 21 Material::get_ambient 0 1 808 367
////////////////////////////////////////////////////////////////////
//     Function: Material::get_ambient
//       Access: Published
//  Description: Returns the ambient color setting, if it has been
//               set.  Returns (0,0,0,0) if the ambient color has not
//               been set.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &Material::get_ambient(void) const;

1609 11 set_ambient 4 1741 21 Material::set_ambient 0 1 809 592
////////////////////////////////////////////////////////////////////
//     Function: Material::set_ambient
//       Access: Published
//  Description: Specifies the ambient color setting of the material.
//               This will be the multiplied by any ambient lights in
//               effect on the material to set its base color.
//
//               This is the color of the object as it appears in the
//               absence of direct light.
//
//               If this is not set, the object color will be used.
////////////////////////////////////////////////////////////////////
52
void Material::set_ambient(LVecBase4f const &color);

1610 13 clear_ambient 4 1741 23 Material::clear_ambient 0 1 810 276
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_ambient
//       Access: Published
//  Description: Removes the explicit ambient color from the material.
////////////////////////////////////////////////////////////////////
42
inline void Material::clear_ambient(void);

1611 11 has_diffuse 4 1741 21 Material::has_diffuse 0 1 811 331
////////////////////////////////////////////////////////////////////
//     Function: Material::has_diffuse
//       Access: Published
//  Description: Returns true if the diffuse color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool Material::has_diffuse(void) const;

1612 11 get_diffuse 4 1741 21 Material::get_diffuse 0 1 812 367
////////////////////////////////////////////////////////////////////
//     Function: Material::get_diffuse
//       Access: Published
//  Description: Returns the diffuse color setting, if it has been
//               set.  Returns (1,1,1,1) if the diffuse color has not
//               been set.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &Material::get_diffuse(void) const;

1613 11 set_diffuse 4 1741 21 Material::set_diffuse 0 1 813 709
////////////////////////////////////////////////////////////////////
//     Function: Material::set_diffuse
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to get the color in the parts of the
//               object illuminated by the lights.
//
//               This is the primary color of an object; the color of
//               the object as it appears in direct light, in the
//               absence of highlights.
//
//               If this is not set, the object color will be used.
////////////////////////////////////////////////////////////////////
52
void Material::set_diffuse(LVecBase4f const &color);

1614 13 clear_diffuse 4 1741 23 Material::clear_diffuse 0 1 814 276
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_diffuse
//       Access: Published
//  Description: Removes the explicit diffuse color from the material.
////////////////////////////////////////////////////////////////////
42
inline void Material::clear_diffuse(void);

1615 12 has_specular 4 1741 22 Material::has_specular 0 1 815 333
////////////////////////////////////////////////////////////////////
//     Function: Material::has_specular
//       Access: Published
//  Description: Returns true if the specular color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool Material::has_specular(void) const;

1616 12 get_specular 4 1741 22 Material::get_specular 0 1 816 370
////////////////////////////////////////////////////////////////////
//     Function: Material::get_specular
//       Access: Published
//  Description: Returns the specular color setting, if it has been
//               set.  Returns (0,0,0,0) if the specular color has not
//               been set.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &Material::get_specular(void) const;

1617 12 set_specular 4 1741 22 Material::set_specular 0 1 817 637
////////////////////////////////////////////////////////////////////
//     Function: Material::set_specular
//       Access: Published
//  Description: Specifies the diffuse color setting of the material.
//               This will be multiplied by any lights in effect on
//               the material to compute the color of specular
//               highlights on the object.
//
//               This is the highlight color of an object: the color
//               of small highlight reflections.
//
//               If this is not set, highlights will not appear.
////////////////////////////////////////////////////////////////////
53
void Material::set_specular(LVecBase4f const &color);

1618 14 clear_specular 4 1741 24 Material::clear_specular 0 1 818 278
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_specular
//       Access: Published
//  Description: Removes the explicit specular color from the material.
////////////////////////////////////////////////////////////////////
43
inline void Material::clear_specular(void);

1619 12 has_emission 4 1741 22 Material::has_emission 0 1 819 333
////////////////////////////////////////////////////////////////////
//     Function: Material::has_emission
//       Access: Published
//  Description: Returns true if the emission color has been explicitly
//               set for this material, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool Material::has_emission(void) const;

1620 12 get_emission 4 1741 22 Material::get_emission 0 1 820 370
////////////////////////////////////////////////////////////////////
//     Function: Material::get_emission
//       Access: Published
//  Description: Returns the emission color setting, if it has been
//               set.  Returns (0,0,0,0) if the emission color has not
//               been set.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &Material::get_emission(void) const;

1621 12 set_emission 4 1741 22 Material::set_emission 0 1 821 768
////////////////////////////////////////////////////////////////////
//     Function: Material::set_emission
//       Access: Published
//  Description: Specifies the emission color setting of the material.
//               This is the color of the object as it appears in the
//               absence of any light whatsover, including ambient
//               light.  It is as if the object is glowing by this
//               color (although of course it will not illuminate
//               neighboring objects).
//
//               If this is not set, the object will not glow by its
//               own light and will only appear visible in the
//               presence of one or more lights.
////////////////////////////////////////////////////////////////////
53
void Material::set_emission(LVecBase4f const &color);

1622 14 clear_emission 4 1741 24 Material::clear_emission 0 1 822 278
////////////////////////////////////////////////////////////////////
//     Function: Material::clear_emission
//       Access: Published
//  Description: Removes the explicit emission color from the material.
////////////////////////////////////////////////////////////////////
43
inline void Material::clear_emission(void);

1623 13 get_shininess 4 1741 23 Material::get_shininess 0 1 823 270
////////////////////////////////////////////////////////////////////
//     Function: Material::get_shininess
//       Access: Published
//  Description: Returns the shininess exponent of the material.
////////////////////////////////////////////////////////////////////
49
inline float Material::get_shininess(void) const;

1624 13 set_shininess 4 1741 23 Material::set_shininess 0 1 824 598
////////////////////////////////////////////////////////////////////
//     Function: Material::set_shininess
//       Access: Published
//  Description: Sets the shininess exponent of the material.  This
//               controls the size of the specular highlight spot.  In
//               general, larger number produce a smaller specular
//               highlight, which makes the object appear shinier.
//               Smaller numbers produce a larger highlight, which
//               makes the object appear less shiny.
////////////////////////////////////////////////////////////////////
53
inline void Material::set_shininess(float shininess);

1625 9 get_local 4 1741 19 Material::get_local 0 1 825 267
////////////////////////////////////////////////////////////////////
//     Function: Material::get_local
//       Access: Published
//  Description: Returns the local viewer flag.  Set set_local().
////////////////////////////////////////////////////////////////////
44
inline bool Material::get_local(void) const;

1626 9 set_local 4 1741 19 Material::set_local 0 1 826 519
////////////////////////////////////////////////////////////////////
//     Function: Material::set_local
//       Access: Published
//  Description: Sets the local viewer flag.  Set this true to enable
//               camera-relative specular highlights, or false to use
//               orthogonal specular highlights.  The default value is
//               true.  Applications that use orthogonal projection
//               should specify false.
////////////////////////////////////////////////////////////////////
44
inline void Material::set_local(bool local);

1627 11 get_twoside 4 1741 21 Material::get_twoside 0 1 827 306
////////////////////////////////////////////////////////////////////
//     Function: Material::get_twoside
//       Access: Published
//  Description: Returns the state of the two-sided lighting flag.
//               See set_twoside().
////////////////////////////////////////////////////////////////////
46
inline bool Material::get_twoside(void) const;

1628 11 set_twoside 4 1741 21 Material::set_twoside 0 1 828 513
////////////////////////////////////////////////////////////////////
//     Function: Material::set_twoside
//       Access: Published
//  Description: Set this true to enable two-sided lighting.  When
//               two-sided lighting is on, both sides of a polygon
//               will be lit by this material.  The default is for
//               two-sided lighting to be off, in which case only the
//               front surface is lit.
////////////////////////////////////////////////////////////////////
48
inline void Material::set_twoside(bool twoside);

1629 11 operator == 4 1741 21 Material::operator == 0 1 829 220
////////////////////////////////////////////////////////////////////
//     Function: Material::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Material::operator ==(Material const &other) const;

1630 11 operator != 4 1741 21 Material::operator != 0 1 830 220
////////////////////////////////////////////////////////////////////
//     Function: Material::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Material::operator !=(Material const &other) const;

1631 10 operator < 4 1741 20 Material::operator < 0 1 831 219
////////////////////////////////////////////////////////////////////
//     Function: Material::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool Material::operator <(Material const &other) const;

1632 10 compare_to 4 1741 20 Material::compare_to 0 1 832 535
////////////////////////////////////////////////////////////////////
//     Function: Material::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this material
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.  The
//               sorting order is arbitrary and largely meaningless,
//               except to differentiate different materials.
////////////////////////////////////////////////////////////////////
54
int Material::compare_to(Material const &other) const;

1633 6 output 4 1741 16 Material::output 0 1 833 215
////////////////////////////////////////////////////////////////////
//     Function: Material::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
void Material::output(ostream &out) const;

1634 5 write 4 1741 15 Material::write 0 1 834 214
////////////////////////////////////////////////////////////////////
//     Function: Material::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
void Material::write(ostream &out, int indent) const;

1635 14 get_class_type 4 1741 24 Material::get_class_type 0 1 835 0
49
static TypeHandle Material::get_class_type(void);

1636 12 get_material 4 1742 26 MaterialPool::get_material 0 1 840 1726
// Filename: materialPool.I
// Created by:  drose (30Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::get_material
//       Access: Public, Static
//  Description: Returns a Material pointer that represents the
//               same material described by temp, except that it is a
//               shared pointer.
//
//               Each call to get_material() passing an equivalent
//               Material pointer will return the same shared pointer.
//
//               If you modify the shared pointer, it will
//               automatically disassociate it from the pool.
//
//               Also, the return value may be a different pointer
//               than that passed in, or it may be the same pointer.
//               In either case, the passed in pointer has now been
//               sacrificed to the greater good and should not be used
//               again (like any other PointerTo, it will be freed
//               when the last reference count is removed).
////////////////////////////////////////////////////////////////////
67
static inline Material *MaterialPool::get_material(Material *temp);

1637 15 garbage_collect 4 1742 29 MaterialPool::garbage_collect 0 1 841 481
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those materials in the pool that have a
//               reference count of exactly 1; i.e. only those
//               materials that are not being used outside of the pool.
//               Returns the number of materials released.
////////////////////////////////////////////////////////////////////
54
static inline int MaterialPool::garbage_collect(void);

1638 13 list_contents 4 1742 27 MaterialPool::list_contents 0 1 842 320
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
61
static inline void MaterialPool::list_contents(ostream &out);

1639 5 write 4 1742 19 MaterialPool::write 0 1 843 315
////////////////////////////////////////////////////////////////////
//     Function: MaterialPool::write
//       Access: Published, Static
//  Description: Lists the contents of the material pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
46
static void MaterialPool::write(ostream &out);

1640 13 ~MaterialPool 4 1742 27 MaterialPool::~MaterialPool 0 0 0
34
MaterialPool::~MaterialPool(void);

1641 10 MatrixLens 4 1743 22 MatrixLens::MatrixLens 0 1 844 1119
// Filename: matrixLens.I
// Created by:  drose (12Dec01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline MatrixLens::MatrixLens(void);

1642 12 set_user_mat 4 1743 24 MatrixLens::set_user_mat 0 1 845 938
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::set_user_mat
//       Access: Published
//  Description: Explicitly specifies the projection matrix.  This
//               matrix should convert X and Y to the range
//               [-film_size/2, film_size/2], where (-fs/2,-fs/2) is
//               the lower left corner of the screen and (fs/2, fs/2)
//               is the upper right.  Z should go to the range [-1,
//               1], where -1 is the far plane and 1 is the near
//               plane.  Note that this is a left-handed Y-up
//               coordinate system.
//
//               The default film_size for a MatrixLens is 2, so the
//               default range is [-1, 1] for both X and Y.  This is
//               consistent with the GL conventions for projection
//               matrices.
////////////////////////////////////////////////////////////////////
64
inline void MatrixLens::set_user_mat(LMatrix4f const &user_mat);

1643 12 get_user_mat 4 1743 24 MatrixLens::get_user_mat 0 1 846 404
////////////////////////////////////////////////////////////////////
//     Function: MatrixLens::get_user_mat
//       Access: Published
//  Description: Returns the explicit projection matrix as set by the
//               user.  This does not include transforms on the lens
//               or film (e.g. a film offset or view hpr).
////////////////////////////////////////////////////////////////////
61
inline LMatrix4f const &MatrixLens::get_user_mat(void) const;

1644 14 get_class_type 4 1743 26 MatrixLens::get_class_type 0 1 847 0
51
static TypeHandle MatrixLens::get_class_type(void);

1645 11 ~MatrixLens 4 1743 23 MatrixLens::~MatrixLens 0 0 0
30
MatrixLens::~MatrixLens(void);

1646 16 OrthographicLens 4 1744 34 OrthographicLens::OrthographicLens 0 1 848 1136
// Filename: orthographicLens.I
// Created by:  mike (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OrthographicLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OrthographicLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline OrthographicLens::OrthographicLens(void);

1647 14 get_class_type 4 1744 32 OrthographicLens::get_class_type 0 1 849 0
57
static TypeHandle OrthographicLens::get_class_type(void);

1648 17 ~OrthographicLens 4 1744 35 OrthographicLens::~OrthographicLens 0 0 0
42
OrthographicLens::~OrthographicLens(void);

1649 15 PerspectiveLens 4 1745 32 PerspectiveLens::PerspectiveLens 0 1 850 1134
// Filename: perspectiveLens.I
// Created by:  drose (18Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerspectiveLens::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline PerspectiveLens::PerspectiveLens(void);

1650 14 get_class_type 4 1745 31 PerspectiveLens::get_class_type 0 1 851 0
56
static TypeHandle PerspectiveLens::get_class_type(void);

1651 16 ~PerspectiveLens 4 1745 33 PerspectiveLens::~PerspectiveLens 0 0 0
40
PerspectiveLens::~PerspectiveLens(void);

1652 11 has_texture 4 1746 24 TexturePool::has_texture 0 1 852 1127
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

// Filename: texturePool.I
// Created by:  drose (26Apr00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_texture
//       Access: Published, Static
//  Description: Returns true if the texture has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
82
static inline bool TexturePool::has_texture(basic_string< char > const &filename);

1653 14 verify_texture 4 1746 27 TexturePool::verify_texture 0 1 853 748
// These functions take string parameters instead of Filenames
// because that's somewhat more convenient to the scripting
// language.

////////////////////////////////////////////////////////////////////
//     Function: TexturePool::verify_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_texture() with the same texture name will
//               return a valid Texture pointer.
////////////////////////////////////////////////////////////////////
85
static inline bool TexturePool::verify_texture(basic_string< char > const &filename);

1654 12 load_texture 4 1746 25 TexturePool::load_texture 0 7 854 855 856 857 858 859 860 1673
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_texture
//       Access: Published, Static
//  Description: Loads the given filename up into a texture, if it has
//               not already been loaded, and returns the new texture.
//               If a texture with the same filename was previously
//               loaded, returns that one instead.  If the texture
//               file cannot be found, returns NULL.
//
//               If read_mipmaps is true, both filenames should
//               contain a hash mark ('#'), which will be filled in
//               with the mipmap level number; and the texture will be
//               defined with a series of images, two for each mipmap
//               level.
////////////////////////////////////////////////////////////////////
149
static inline Texture *TexturePool::load_texture(basic_string< char > const &filename, int primary_file_num_channels = (0), bool read_mipmaps = (0));

1655 15 load_3d_texture 4 1746 28 TexturePool::load_3d_texture 0 2 861 862 833
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_3d_texture
//       Access: Published, Static
//  Description: Loads a 3-D texture that is specified with a series
//               of n pages, all numbered in sequence, and beginning
//               with index 0.  The filename should include a sequence
//               of one or more hash characters ("#") which will be
//               filled in with the index number of each level.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the index number of each 3-d level.
////////////////////////////////////////////////////////////////////
123
static inline Texture *TexturePool::load_3d_texture(basic_string< char > const &filename_pattern, bool read_mipmaps = (0));

1656 13 load_cube_map 4 1746 26 TexturePool::load_cube_map 0 2 863 864 798
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::load_cube_map
//       Access: Published, Static
//  Description: Loads a cube map texture that is specified with a
//               series of 6 pages, numbered 0 through 5.  The
//               filename should include a sequence of one or more
//               hash characters ("#") which will be filled in with
//               the index number of each pagee.
//
//               If read_mipmaps is true, the filename should contain
//               an additional hash mark.  The first hash mark will be
//               filled in with the mipmap level number, and the
//               second with the face number, 0 through 5.
////////////////////////////////////////////////////////////////////
121
static inline Texture *TexturePool::load_cube_map(basic_string< char > const &filename_pattern, bool read_mipmaps = (0));

1657 26 get_normalization_cube_map 4 1746 39 TexturePool::get_normalization_cube_map 0 1 865 619
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_normalization_cube_map
//       Access: Published, Static
//  Description: Returns a standard Texture object that has been
//               created with
//               Texture::generate_normalization_cube_map().  This
//               Texture may be shared by any application code
//               requiring a normalization cube map.  It will be at
//               least as large as the specified size, though it may
//               be larger.
////////////////////////////////////////////////////////////////////
73
static inline Texture *TexturePool::get_normalization_cube_map(int size);

1658 11 add_texture 4 1746 24 TexturePool::add_texture 0 1 866 509
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::add_texture
//       Access: Published, Static
//  Description: Adds the indicated already-loaded texture to the
//               pool.  The texture must have a filename set for its
//               name.  The texture will always replace any
//               previously-loaded texture in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
62
static inline void TexturePool::add_texture(Texture *texture);

1659 15 release_texture 4 1746 28 TexturePool::release_texture 0 1 867 733
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_texture
//       Access: Published, Static
//  Description: Removes the indicated texture from the pool,
//               indicating it will never be loaded again; the texture
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every texture
//               every loaded, and textures will never be freed.
//
//               The texture's name should not have been changed
//               during its lifetime, or this function may fail to
//               locate it in the pool.
////////////////////////////////////////////////////////////////////
66
static inline void TexturePool::release_texture(Texture *texture);

1660 20 release_all_textures 4 1746 33 TexturePool::release_all_textures 0 1 868 333
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::release_all_textures
//       Access: Published, Static
//  Description: Releases all textures in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
59
static inline void TexturePool::release_all_textures(void);

1661 15 garbage_collect 4 1746 28 TexturePool::garbage_collect 0 1 869 480
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::garbage_collect
//       Access: Published, Static
//  Description: Releases only those textures in the pool that have a
//               reference count of exactly 1; i.e. only those
//               textures that are not being used outside of the pool.
//               Returns the number of textures released.
////////////////////////////////////////////////////////////////////
53
static inline int TexturePool::garbage_collect(void);

1662 13 list_contents 4 1746 26 TexturePool::list_contents 0 1 870 321
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::list_contents
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
60
static inline void TexturePool::list_contents(ostream &out);

1663 22 set_fake_texture_image 4 1746 35 TexturePool::set_fake_texture_image 0 1 871 355
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::set_fake_texture_image
//       Access: Published, Static
//  Description: Sets a bogus filename that will be loaded in lieu of
//               any textures requested from this point on.
////////////////////////////////////////////////////////////////////
93
static inline void TexturePool::set_fake_texture_image(basic_string< char > const &filename);

1664 24 clear_fake_texture_image 4 1746 37 TexturePool::clear_fake_texture_image 0 1 872 330
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::clear_fake_texture_image
//       Access: Published, Static
//  Description: Restores normal behavior of loading the textures
//               actually requested.
////////////////////////////////////////////////////////////////////
63
static inline void TexturePool::clear_fake_texture_image(void);

1665 22 has_fake_texture_image 4 1746 35 TexturePool::has_fake_texture_image 0 1 873 353
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::has_fake_texture_image
//       Access: Published, Static
//  Description: Returns true if fake_texture_image mode has been
//               enabled, false if we are in the normal mode.
////////////////////////////////////////////////////////////////////
61
static inline bool TexturePool::has_fake_texture_image(void);

1666 22 get_fake_texture_image 4 1746 35 TexturePool::get_fake_texture_image 0 1 874 349
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::get_fake_texture_image
//       Access: Published, Static
//  Description: Returns the filename that was specified with a
//               previous call to set_fake_texture_image().
////////////////////////////////////////////////////////////////////
84
static inline basic_string< char > const &TexturePool::get_fake_texture_image(void);

1667 5 write 4 1746 18 TexturePool::write 0 1 875 345
////////////////////////////////////////////////////////////////////
//     Function: TexturePool::write
//       Access: Published, Static
//  Description: Lists the contents of the texture pool to the
//               indicated output stream.
//               For debugging.
////////////////////////////////////////////////////////////////////
45
static void TexturePool::write(ostream &out);

1668 12 ~TexturePool 4 1746 25 TexturePool::~TexturePool 0 0 0
32
TexturePool::~TexturePool(void);

1669 16 UserVertexSlider 4 1747 34 UserVertexSlider::UserVertexSlider 0 2 876 877 460
////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
UserVertexSlider::UserVertexSlider(basic_string< char > const &name);

1670 10 set_slider 4 1747 28 UserVertexSlider::set_slider 0 1 878 942
// Filename: userVertexSlider.I
// Created by:  drose (28Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexSlider::set_slider
//       Access: Published
//  Description: Stores the indicated slider value.
////////////////////////////////////////////////////////////////////
55
inline void UserVertexSlider::set_slider(float slider);

1671 14 get_class_type 4 1747 32 UserVertexSlider::get_class_type 0 1 879 0
57
static TypeHandle UserVertexSlider::get_class_type(void);

1672 17 ~UserVertexSlider 4 1747 35 UserVertexSlider::~UserVertexSlider 0 0 0
42
UserVertexSlider::~UserVertexSlider(void);

1673 19 UserVertexTransform 4 1748 40 UserVertexTransform::UserVertexTransform 0 1 880 232
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
UserVertexTransform::UserVertexTransform(basic_string< char > const &name);

1674 8 get_name 4 1748 29 UserVertexTransform::get_name 0 1 881 994
// Filename: userVertexTransform.I
// Created by:  drose (24Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::get_name
//       Access: Published
//  Description: Returns the name passed to the constructor.
//               Completely arbitrary.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &UserVertexTransform::get_name(void) const;

1675 10 set_matrix 4 1748 31 UserVertexTransform::set_matrix 0 1 882 259
////////////////////////////////////////////////////////////////////
//     Function: UserVertexTransform::set_matrix
//       Access: Published
//  Description: Stores the indicated matrix.
////////////////////////////////////////////////////////////////////
69
inline void UserVertexTransform::set_matrix(LMatrix4f const &matrix);

1676 14 get_class_type 4 1748 35 UserVertexTransform::get_class_type 0 1 883 0
60
static TypeHandle UserVertexTransform::get_class_type(void);

1677 20 ~UserVertexTransform 4 1748 41 UserVertexTransform::~UserVertexTransform 0 0 0
48
UserVertexTransform::~UserVertexTransform(void);

1678 17 upcast_to_Texture 12 1749 31 VideoTexture::upcast_to_Texture 0 1 890 35
upcast from VideoTexture to Texture
47
Texture *VideoTexture::upcast_to_Texture(void);

1679 24 downcast_to_VideoTexture 12 1728 33 Texture::downcast_to_VideoTexture 0 1 891 37
downcast from Texture to VideoTexture
54
VideoTexture *Texture::downcast_to_VideoTexture(void);

1680 23 upcast_to_AnimInterface 12 1749 37 VideoTexture::upcast_to_AnimInterface 0 1 892 41
upcast from VideoTexture to AnimInterface
59
AnimInterface *VideoTexture::upcast_to_AnimInterface(void);

1681 24 downcast_to_VideoTexture 12 1750 39 AnimInterface::downcast_to_VideoTexture 0 1 893 43
downcast from AnimInterface to VideoTexture
60
VideoTexture *AnimInterface::downcast_to_VideoTexture(void);

1682 13 has_ram_image 4 1749 27 VideoTexture::has_ram_image 0 1 884 417
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::has_ram_image
//       Access: Published, Virtual
//  Description: Returns true if the Texture has its image contents
//               available in main RAM, false if it exists only in
//               texture memory or in the prepared GSG context.
////////////////////////////////////////////////////////////////////
53
virtual bool VideoTexture::has_ram_image(void) const;

1683 18 get_keep_ram_image 4 1749 32 VideoTexture::get_keep_ram_image 0 1 885 482
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_keep_ram_image
//       Access: Published, Virtual
//  Description: Returns the flag that indicates whether this Texture
//               is eligible to have its main RAM copy of the texture
//               memory dumped when the texture is prepared for
//               rendering.  See set_keep_ram_image().
////////////////////////////////////////////////////////////////////
58
virtual bool VideoTexture::get_keep_ram_image(void) const;

1684 15 get_video_width 4 1749 29 VideoTexture::get_video_width 0 1 886 1139
// Filename: videoTexture.I
// Created by:  drose (21Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_width
//       Access: Published
//  Description: Returns the width in texels of the source video
//               stream.  This is not necessarily the width of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
53
inline int VideoTexture::get_video_width(void) const;

1685 16 get_video_height 4 1749 30 VideoTexture::get_video_height 0 1 887 466
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_video_height
//       Access: Published
//  Description: Returns the height in texels of the source video
//               stream.  This is not necessarily the height of the
//               actual texture, since the texture may have been
//               expanded to raise it to a power of 2.
////////////////////////////////////////////////////////////////////
54
inline int VideoTexture::get_video_height(void) const;

1686 13 get_tex_scale 4 1749 27 VideoTexture::get_tex_scale 0 1 888 965
////////////////////////////////////////////////////////////////////
//     Function: VideoTexture::get_tex_scale
//       Access: Published
//  Description: Returns a scale pair that is suitable for applying to
//               geometry via NodePath::set_tex_scale(), which will
//               convert texture coordinates on the geometry from the
//               range 0..1 into the appropriate range to render the
//               video part of the texture.
//
//               This is necessary in the event the video source is
//               not a power of two and set_power_2() is true.  In
//               this case, the video image will be mapped to the
//               lower-left corner of the texture, and the rest of the
//               texture space will be unused; so we will need to
//               remap any texture coordinates to fill the space
//               correctly.
////////////////////////////////////////////////////////////////////
58
inline LVecBase2f VideoTexture::get_tex_scale(void) const;

1687 14 get_class_type 4 1749 28 VideoTexture::get_class_type 0 1 889 0
53
static TypeHandle VideoTexture::get_class_type(void);

1688 13 ~VideoTexture 4 1749 27 VideoTexture::~VideoTexture 0 0 0
34
VideoTexture::~VideoTexture(void);

893
1 14 Dtool_MAKPGUEb 7 11 1751 904 14 Dtool_MAKPGUEb 0 
2 14 Dtool_MAKPMDwM 7 11 1751 904 14 Dtool_MAKPMDwM 1 5 other 1 1752  
3 14 Dtool_MAKPwAfZ 6 12 1751 0 14 Dtool_MAKPwAfZ 2 4 this 3 1751  5 other 1 1752  
4 14 Dtool_MAKPVYja 6 13 1696 0 14 Dtool_MAKPVYja 1 4 this 3 1752  
5 14 Dtool_MAKP1Mf5 6 14 1754 0 14 Dtool_MAKP1Mf5 1 4 this 3 1752  
6 14 Dtool_MAKPW3oB 6 15 1755 0 14 Dtool_MAKPW3oB 1 4 this 3 1752  
7 14 Dtool_MAKP43Cj 4 16 1756 0 14 Dtool_MAKP43Cj 1 4 this 3 1751  
8 14 Dtool_MAKPBxbM 4 17 1756 0 14 Dtool_MAKPBxbM 1 4 this 3 1751  
9 14 Dtool_MAKPlRAp 4 18 1756 0 14 Dtool_MAKPlRAp 3 4 this 3 1751  14 num_transforms 1 1754  18 indexed_transforms 1 1755  
10 14 Dtool_MAKPkx4C 4 19 1756 0 14 Dtool_MAKPkx4C 2 4 this 3 1752  3 out 1 1757  
11 14 Dtool_MAKPys3i 7 23 1760 0 14 Dtool_MAKPys3i 1 4 name 1 1759  
12 14 Dtool_MAKPyvtN 7 24 1760 0 14 Dtool_MAKPyvtN 2 4 this 3 1760  8 basename 1 1759  
13 14 Dtool_MAKPxW48 7 25 1760 0 14 Dtool_MAKPxW48 1 4 this 3 1761  
14 14 Dtool_MAKPKewZ 6 26 1759 0 14 Dtool_MAKPKewZ 1 4 this 3 1761  
15 14 Dtool_MAKPlDZ2 6 27 1759 0 14 Dtool_MAKPlDZ2 1 4 this 3 1761  
16 14 Dtool_MAKPUWKQ 6 28 1754 0 14 Dtool_MAKPUWKQ 2 4 this 3 1761  8 basename 1 1759  
17 14 Dtool_MAKPymmN 7 29 1761 0 14 Dtool_MAKPymmN 2 4 this 3 1761  1 n 1 1754  
18 14 Dtool_MAKPDhts 7 30 1761 0 14 Dtool_MAKPDhts 1 4 this 3 1761  
19 14 Dtool_MAKPi8VP 6 31 1759 0 14 Dtool_MAKPi8VP 2 4 this 3 1761  1 n 1 1754  
20 14 Dtool_MAKP1gHV 4 32 1756 0 14 Dtool_MAKP1gHV 2 4 this 3 1761  3 out 1 1757  
21 14 Dtool_MAKPOVm7 7 33 1760 0 14 Dtool_MAKPOVm7 0 
22 14 Dtool_MAKP6f4T 7 34 1760 0 14 Dtool_MAKP6f4T 0 
23 14 Dtool_MAKPa072 7 35 1760 0 14 Dtool_MAKPa072 0 
24 14 Dtool_MAKP2d7w 7 36 1760 0 14 Dtool_MAKP2d7w 0 
25 14 Dtool_MAKPBCM_ 7 37 1760 0 14 Dtool_MAKPBCM_ 0 
26 14 Dtool_MAKPTpIr 7 38 1760 0 14 Dtool_MAKPTpIr 1 4 name 1 1759  
27 14 Dtool_MAKPgGjH 7 39 1760 0 14 Dtool_MAKPgGjH 0 
28 14 Dtool_MAKP3sMn 7 40 1760 0 14 Dtool_MAKP3sMn 1 4 name 1 1759  
29 14 Dtool_MAKPaaiB 7 41 1760 0 14 Dtool_MAKPaaiB 0 
30 14 Dtool_MAKP0OLh 7 42 1760 0 14 Dtool_MAKP0OLh 1 4 name 1 1759  
31 14 Dtool_MAKPkPBk 7 43 1760 0 14 Dtool_MAKPkPBk 0 
32 14 Dtool_MAKPEmsm 7 44 1760 0 14 Dtool_MAKPEmsm 0 
33 14 Dtool_MAKP1bcz 7 45 1760 0 14 Dtool_MAKP1bcz 0 
34 14 Dtool_MAKPoQxT 7 46 1760 0 14 Dtool_MAKPoQxT 0 
35 14 Dtool_MAKPOgr2 7 47 1760 0 14 Dtool_MAKPOgr2 0 
36 14 Dtool_MAKPZaFB 7 48 1760 0 14 Dtool_MAKPZaFB 0 
37 14 Dtool_MAKPPrB9 7 49 1760 0 14 Dtool_MAKPPrB9 0 
38 14 Dtool_MAKPZ7iC 7 50 1760 0 14 Dtool_MAKPZ7iC 2 6 column 1 1760  6 slider 1 1759  
39 14 Dtool_MAKPTtkc 7 51 1760 0 14 Dtool_MAKPTtkc 0 
40 14 Dtool_MAKPr1c_ 7 52 1760 0 14 Dtool_MAKPr1c_ 0 
41 14 Dtool_MAKPJLm5 7 53 1760 0 14 Dtool_MAKPJLm5 0 
42 14 Dtool_MAKPSAUz 7 54 1760 0 14 Dtool_MAKPSAUz 0 
43 14 Dtool_MAKPokyx 7 55 1760 0 14 Dtool_MAKPokyx 0 
44 14 Dtool_MAKPAZei 7 56 1764 0 14 Dtool_MAKPAZei 0 
45 14 Dtool_MAKPvt5j 7 58 1767 941 14 Dtool_MAKPvt5j 1 4 copy 1 1765  
46 14 Dtool_MAKPqHP9 7 58 1767 941 14 Dtool_MAKPqHP9 5 4 name 1 1760  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  5 start 1 1754  
47 14 Dtool_MAKPqipz 6 59 1767 0 14 Dtool_MAKPqipz 2 4 this 3 1767  4 copy 1 1765  
48 14 Dtool_MAKPdOcj 7 61 1760 0 14 Dtool_MAKPdOcj 1 4 this 3 1765  
49 14 Dtool_MAKP_29x 6 62 1754 0 14 Dtool_MAKP_29x 1 4 this 3 1765  
50 14 Dtool_MAKPVlzN 6 63 1754 0 14 Dtool_MAKPVlzN 1 4 this 3 1765  
51 14 Dtool_MAKP_YBU 6 64 1694 0 14 Dtool_MAKP_YBU 1 4 this 3 1765  
52 14 Dtool_MAKPWN4C 6 65 1695 0 14 Dtool_MAKPWN4C 1 4 this 3 1765  
53 14 Dtool_MAKPKNfk 6 66 1754 0 14 Dtool_MAKPKNfk 1 4 this 3 1765  
54 14 Dtool_MAKPTwV4 6 67 1754 0 14 Dtool_MAKPTwV4 1 4 this 3 1765  
55 14 Dtool_MAKPcXJp 6 68 1754 0 14 Dtool_MAKPcXJp 1 4 this 3 1765  
56 14 Dtool_MAKPQEWs 6 69 1755 0 14 Dtool_MAKPQEWs 1 4 this 3 1765  
57 14 Dtool_MAKPZDLZ 6 70 1755 0 14 Dtool_MAKPZDLZ 3 4 this 3 1765  10 start_byte 1 1754  9 num_bytes 1 1754  
58 14 Dtool_MAKPs2pJ 6 71 1755 0 14 Dtool_MAKPs2pJ 2 4 this 3 1765  5 other 1 1765  
59 14 Dtool_MAKPWRGX 4 72 1756 0 14 Dtool_MAKPWRGX 2 4 this 3 1765  3 out 1 1757  
60 14 Dtool_MAKPqhGa 7 78 1768 960 14 Dtool_MAKPqhGa 0 
61 14 Dtool_MAKPEyku 7 78 1768 960 14 Dtool_MAKPEyku 1 4 copy 1 1769  
62 14 Dtool_MAKPwQuB 7 78 1768 960 14 Dtool_MAKPwQuB 4 5 name0 1 1760  15 num_components0 1 1754  13 numeric_type0 1 1694  9 contents0 1 1695  
63 14 Dtool_MAKPMGCQ 7 78 1768 960 14 Dtool_MAKPMGCQ 8 5 name0 1 1760  15 num_components0 1 1754  13 numeric_type0 1 1694  9 contents0 1 1695  5 name1 1 1760  15 num_components1 1 1754  13 numeric_type1 1 1694  9 contents1 1 1695  
64 14 Dtool_MAKPrTBZ 7 78 1768 960 14 Dtool_MAKPrTBZ 12 5 name0 1 1760  15 num_components0 1 1754  13 numeric_type0 1 1694  9 contents0 1 1695  5 name1 1 1760  15 num_components1 1 1754  13 numeric_type1 1 1694  9 contents1 1 1695  5 name2 1 1760  15 num_components2 1 1754  13 numeric_type2 1 1694  9 contents2 1 1695  
65 14 Dtool_MAKPI38U 7 78 1768 960 14 Dtool_MAKPI38U 16 5 name0 1 1760  15 num_components0 1 1754  13 numeric_type0 1 1694  9 contents0 1 1695  5 name1 1 1760  15 num_components1 1 1754  13 numeric_type1 1 1694  9 contents1 1 1695  5 name2 1 1760  15 num_components2 1 1754  13 numeric_type2 1 1694  9 contents2 1 1695  5 name3 1 1760  15 num_components3 1 1754  13 numeric_type3 1 1694  9 contents3 1 1695  
66 14 Dtool_MAKP6hwa 7 79 1768 960 14 Dtool_MAKP6hwa 2 4 this 3 1768  4 copy 1 1769  
67 14 Dtool_MAKPUdKQ 6 81 1755 0 14 Dtool_MAKPUdKQ 1 4 this 3 1769  
68 14 Dtool_MAKPojG9 7 82 1769 0 14 Dtool_MAKPojG9 1 6 format 1 1769  
69 14 Dtool_MAKPJA_4 6 83 1754 0 14 Dtool_MAKPJA_4 1 4 this 3 1769  
70 14 Dtool_MAKPkPw2 4 84 1756 0 14 Dtool_MAKPkPw2 2 4 this 3 1768  6 stride 1 1754  
71 14 Dtool_MAKPt2Rt 6 85 1754 0 14 Dtool_MAKPt2Rt 1 4 this 3 1769  
72 14 Dtool_MAKP5U9H 6 86 1754 0 14 Dtool_MAKP5U9H 1 4 this 3 1769  
73 14 Dtool_MAKPGAtY 6 87 1754 0 14 Dtool_MAKPGAtY 2 4 this 3 1768  6 column 1 1765  
74 14 Dtool_MAKPNwWT 6 87 1754 0 14 Dtool_MAKPNwWT 6 4 this 3 1768  4 name 1 1760  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  5 start 1 1754  
75 14 Dtool_MAKPRipt 6 87 1754 0 14 Dtool_MAKPRipt 5 4 this 3 1768  4 name 1 1760  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  
76 14 Dtool_MAKPvK2M 4 88 1756 0 14 Dtool_MAKPvK2M 2 4 this 3 1768  4 name 1 1761  
77 14 Dtool_MAKP2EfH 4 89 1756 0 14 Dtool_MAKP2EfH 1 4 this 3 1768  
78 14 Dtool_MAKP5qdH 6 90 1754 0 14 Dtool_MAKP5qdH 1 4 this 3 1769  
79 14 Dtool_MAKPC_4r 6 91 1765 0 14 Dtool_MAKPC_4r 2 4 this 3 1769  4 name 1 1761  
80 14 Dtool_MAKP0ltF 6 91 1765 0 14 Dtool_MAKP0ltF 2 4 this 3 1769  1 i 1 1754  
81 14 Dtool_MAKPxBGV 6 91 1765 0 14 Dtool_MAKPxBGV 3 4 this 3 1769  10 start_byte 1 1754  9 num_bytes 1 1754  
82 14 Dtool_MAKPq1M5 6 92 1755 0 14 Dtool_MAKPq1M5 2 4 this 3 1769  4 name 1 1761  
83 14 Dtool_MAKPHc2c 6 93 1755 0 14 Dtool_MAKPHc2c 2 4 this 3 1769  5 other 1 1769  
84 14 Dtool_MAKP8gQJ 4 94 1756 0 14 Dtool_MAKP8gQJ 2 4 this 3 1769  3 out 1 1757  
85 14 Dtool_MAKP2XPr 4 95 1756 0 14 Dtool_MAKP2XPr 3 4 this 3 1769  3 out 1 1757  12 indent_level 1 1754  
86 14 Dtool_MAKPXOR_ 4 95 1756 0 14 Dtool_MAKPXOR_ 2 4 this 3 1769  3 out 1 1757  
87 14 Dtool_MAKPx1_X 4 96 1756 0 14 Dtool_MAKPx1_X 4 4 this 3 1769  3 out 1 1757  12 indent_level 1 1754  10 array_data 1 1771  
88 14 Dtool_MAKPqo7q 7 97 1764 0 14 Dtool_MAKPqo7q 0 
89 14 Dtool_MAKP7ZDF 7 74 1773 0 14 Dtool_MAKP7ZDF 1 4 this 3 1768  
90 14 Dtool_MAKPt0mx 7 75 1768 960 14 Dtool_MAKPt0mx 1 4 this 3 1773  
91 14 Dtool_MAKPbG5U 6 76 1774 0 14 Dtool_MAKPbG5U 1 4 this 3 1768  
92 14 Dtool_MAKPo05j 7 77 1768 960 14 Dtool_MAKPo05j 1 4 this 3 1774  
93 14 Dtool_MAKPp5IE 7 103 1775 984 14 Dtool_MAKPp5IE 0 
94 14 Dtool_MAKP0V7R 7 103 1775 984 14 Dtool_MAKP0V7R 1 12 array_format 1 1769  
95 14 Dtool_MAKPekha 7 103 1775 984 14 Dtool_MAKPekha 1 4 copy 1 1776  
96 14 Dtool_MAKPqp4g 7 104 1775 984 14 Dtool_MAKPqp4g 2 4 this 3 1775  4 copy 1 1776  
97 14 Dtool_MAKPYvVU 6 106 1755 0 14 Dtool_MAKPYvVU 1 4 this 3 1776  
98 14 Dtool_MAKPnlvK 7 107 1776 0 14 Dtool_MAKPnlvK 1 6 format 1 1769  
99 14 Dtool_MAKPF5LQ 7 107 1776 0 14 Dtool_MAKPF5LQ 1 6 format 1 1776  
100 14 Dtool_MAKPRiXK 6 108 1752 0 14 Dtool_MAKPRiXK 1 4 this 3 1776  
101 14 Dtool_MAKPWlqH 4 109 1756 0 14 Dtool_MAKPWlqH 2 4 this 3 1775  9 animation 1 1752  
102 14 Dtool_MAKP8LzX 7 110 1776 0 14 Dtool_MAKP8LzX 1 4 this 3 1776  
103 14 Dtool_MAKPKWDM 7 111 1776 0 14 Dtool_MAKPKWDM 2 4 this 3 1776  5 other 1 1776  
104 14 Dtool_MAKPxaAs 6 112 1754 0 14 Dtool_MAKPxaAs 1 4 this 3 1776  
105 14 Dtool_MAKPcEF8 7 113 1769 0 14 Dtool_MAKPcEF8 2 4 this 3 1776  5 array 1 1754  
106 14 Dtool_MAKPz1Gg 7 114 1768 960 14 Dtool_MAKPz1Gg 2 4 this 3 1775  5 array 1 1754  
107 14 Dtool_MAKPjkFu 4 115 1756 0 14 Dtool_MAKPjkFu 3 4 this 3 1775  5 array 1 1754  6 format 1 1769  
108 14 Dtool_MAKP4DUv 4 116 1756 0 14 Dtool_MAKP4DUv 2 4 this 3 1775  5 array 1 1754  
109 14 Dtool_MAKPIwkF 6 117 1754 0 14 Dtool_MAKPIwkF 2 4 this 3 1775  12 array_format 1 1769  
110 14 Dtool_MAKPntYu 4 118 1756 0 14 Dtool_MAKPntYu 3 4 this 3 1775  5 array 1 1754  12 array_format 1 1769  
111 14 Dtool_MAKPQpcp 4 119 1756 0 14 Dtool_MAKPQpcp 1 4 this 3 1775  
112 14 Dtool_MAKPEb8v 6 120 1754 0 14 Dtool_MAKPEb8v 1 4 this 3 1776  
113 14 Dtool_MAKP7nrL 6 121 1754 0 14 Dtool_MAKP7nrL 2 4 this 3 1776  4 name 1 1761  
114 14 Dtool_MAKPkTim 6 121 1754 0 14 Dtool_MAKPkTim 2 4 this 3 1776  1 i 1 1754  
115 14 Dtool_MAKPzgLi 6 122 1765 0 14 Dtool_MAKPzgLi 2 4 this 3 1776  4 name 1 1761  
116 14 Dtool_MAKPfLGP 6 122 1765 0 14 Dtool_MAKPfLGP 2 4 this 3 1776  1 i 1 1754  
117 14 Dtool_MAKPrn1o 6 123 1755 0 14 Dtool_MAKPrn1o 2 4 this 3 1776  4 name 1 1761  
118 14 Dtool_MAKPGmoS 4 124 1756 0 14 Dtool_MAKPGmoS 2 4 this 3 1775  4 name 1 1761  
119 14 Dtool_MAKPMqq8 6 125 1754 0 14 Dtool_MAKPMqq8 1 4 this 3 1776  
120 14 Dtool_MAKP6NwG 7 126 1761 0 14 Dtool_MAKP6NwG 2 4 this 3 1776  1 n 1 1754  
121 14 Dtool_MAKPNM2c 6 127 1754 0 14 Dtool_MAKPNM2c 1 4 this 3 1776  
122 14 Dtool_MAKPoLMd 7 128 1761 0 14 Dtool_MAKPoLMd 2 4 this 3 1776  1 n 1 1754  
123 14 Dtool_MAKPKJ7H 6 129 1754 0 14 Dtool_MAKPKJ7H 1 4 this 3 1776  
124 14 Dtool_MAKPe93W 7 130 1761 0 14 Dtool_MAKPe93W 2 4 this 3 1776  1 n 1 1754  
125 14 Dtool_MAKPFthv 6 131 1754 0 14 Dtool_MAKPFthv 1 4 this 3 1776  
126 14 Dtool_MAKPhHKj 7 132 1761 0 14 Dtool_MAKPhHKj 2 4 this 3 1776  1 n 1 1754  
127 14 Dtool_MAKPINRc 7 133 1761 0 14 Dtool_MAKPINRc 2 4 this 3 1776  1 n 1 1754  
128 14 Dtool_MAKPu_vz 7 134 1761 0 14 Dtool_MAKPu_vz 2 4 this 3 1776  1 n 1 1754  
129 14 Dtool_MAKPyJ2Q 4 135 1756 0 14 Dtool_MAKPyJ2Q 2 4 this 3 1776  3 out 1 1757  
130 14 Dtool_MAKPQ_2h 4 136 1756 0 14 Dtool_MAKPQ_2h 3 4 this 3 1776  3 out 1 1757  12 indent_level 1 1754  
131 14 Dtool_MAKPKeYr 4 136 1756 0 14 Dtool_MAKPKeYr 2 4 this 3 1776  3 out 1 1757  
132 14 Dtool_MAKPFtTt 4 137 1756 0 14 Dtool_MAKPFtTt 4 4 this 3 1776  3 out 1 1757  12 indent_level 1 1754  4 data 1 1778  
133 14 Dtool_MAKPM264 7 138 1776 0 14 Dtool_MAKPM264 0 
134 14 Dtool_MAKPw8Vh 7 139 1776 0 14 Dtool_MAKPw8Vh 0 
135 14 Dtool_MAKP6P2g 7 140 1776 0 14 Dtool_MAKP6P2g 0 
136 14 Dtool_MAKPp05G 7 141 1776 0 14 Dtool_MAKPp05G 0 
137 14 Dtool_MAKPm2WG 7 142 1776 0 14 Dtool_MAKPm2WG 0 
138 14 Dtool_MAKPE76r 7 143 1776 0 14 Dtool_MAKPE76r 0 
139 14 Dtool_MAKPxdLR 7 144 1776 0 14 Dtool_MAKPxdLR 0 
140 14 Dtool_MAKPaDrT 7 145 1776 0 14 Dtool_MAKPaDrT 0 
141 14 Dtool_MAKPlkvh 7 146 1776 0 14 Dtool_MAKPlkvh 0 
142 14 Dtool_MAKPEtTH 7 147 1776 0 14 Dtool_MAKPEtTH 0 
143 14 Dtool_MAKP_Erc 7 148 1776 0 14 Dtool_MAKP_Erc 0 
144 14 Dtool_MAKPE8Lf 7 149 1776 0 14 Dtool_MAKPE8Lf 0 
145 14 Dtool_MAKPzbuh 7 150 1764 0 14 Dtool_MAKPzbuh 0 
146 14 Dtool_MAKPN_wu 7 99 1773 0 14 Dtool_MAKPN_wu 1 4 this 3 1775  
147 14 Dtool_MAKP8_96 7 100 1775 984 14 Dtool_MAKP8_96 1 4 this 3 1773  
148 14 Dtool_MAKPrIs2 6 101 1774 0 14 Dtool_MAKPrIs2 1 4 this 3 1775  
149 14 Dtool_MAKPCWg5 7 102 1775 984 14 Dtool_MAKPCWg5 1 4 this 3 1774  
150 14 Dtool_MAKPVjYG 7 156 1780 1036 14 Dtool_MAKPVjYG 1 4 copy 1 1771  
151 14 Dtool_MAKPL33s 7 156 1780 1036 14 Dtool_MAKPL33s 2 12 array_format 1 1769  10 usage_hint 1 1690  
152 14 Dtool_MAKPo2Ms 7 157 1780 1036 14 Dtool_MAKPo2Ms 2 4 this 3 1780  4 copy 1 1771  
153 14 Dtool_MAKPBzaq 4 159 1756 0 14 Dtool_MAKPBzaq 2 4 this 3 1780  4 size 1 1781  
154 14 Dtool_MAKP3CJD 7 161 1769 0 14 Dtool_MAKP3CJD 1 4 this 3 1771  
155 14 Dtool_MAKPxPce 6 162 1690 0 14 Dtool_MAKPxPce 1 4 this 3 1771  
156 14 Dtool_MAKPvFNt 4 163 1756 0 14 Dtool_MAKPvFNt 2 4 this 3 1780  10 usage_hint 1 1690  
157 14 Dtool_MAKPW_sd 6 164 1755 0 14 Dtool_MAKPW_sd 2 4 this 3 1771  4 name 1 1761  
158 14 Dtool_MAKPC4RN 6 165 1754 0 14 Dtool_MAKPC4RN 1 4 this 3 1771  
159 14 Dtool_MAKPTaOY 6 166 1755 0 14 Dtool_MAKPTaOY 2 4 this 3 1780  1 n 1 1754  
160 14 Dtool_MAKPWjyr 4 167 1756 0 14 Dtool_MAKPWjyr 1 4 this 3 1780  
161 14 Dtool_MAKPfqwK 6 168 1754 0 14 Dtool_MAKPfqwK 1 4 this 3 1771  
162 14 Dtool_MAKPTXp2 7 169 1783 0 14 Dtool_MAKPTXp2 1 4 this 3 1771  
163 14 Dtool_MAKP5jFI 4 170 1756 0 14 Dtool_MAKP5jFI 2 4 this 3 1771  3 out 1 1757  
164 14 Dtool_MAKP4Lek 4 171 1756 0 14 Dtool_MAKP4Lek 3 4 this 3 1771  3 out 1 1757  12 indent_level 1 1754  
165 14 Dtool_MAKP5_AK 4 171 1756 0 14 Dtool_MAKP5_AK 2 4 this 3 1771  3 out 1 1757  
166 14 Dtool_MAKPhkwv 7 172 1785 0 14 Dtool_MAKPhkwv 1 4 this 3 1771  
167 14 Dtool_MAKPIngR 7 173 1787 0 14 Dtool_MAKPIngR 1 4 this 3 1780  
168 14 Dtool_MAKPvpuG 4 174 1756 0 14 Dtool_MAKPvpuG 2 4 this 3 1780  4 data 1 1785  
169 14 Dtool_MAKPNsR3 7 175 1764 0 14 Dtool_MAKPNsR3 0 
170 14 Dtool_MAKPvKed 7 152 1773 0 14 Dtool_MAKPvKed 1 4 this 3 1780  
171 14 Dtool_MAKPWmwP 7 153 1780 1036 14 Dtool_MAKPWmwP 1 4 this 3 1773  
172 14 Dtool_MAKPSXKf 6 154 1774 0 14 Dtool_MAKPSXKf 1 4 this 3 1780  
173 14 Dtool_MAKPIzps 7 155 1780 1036 14 Dtool_MAKPIzps 1 4 this 3 1774  
174 14 Dtool_MAKPMcfF 4 177 1756 0 14 Dtool_MAKPMcfF 2 4 this 3 1788  8 max_size 1 1754  
175 14 Dtool_MAKP6AF8 6 178 1754 0 14 Dtool_MAKP6AF8 1 4 this 3 1788  
176 14 Dtool_MAKPgQI0 6 179 1754 0 14 Dtool_MAKPgQI0 1 4 this 3 1788  
177 14 Dtool_MAKPqysg 6 180 1790 0 14 Dtool_MAKPqysg 0 
178 14 Dtool_MAKPp1ZT 4 182 1756 0 14 Dtool_MAKPp1ZT 2 4 this 3 1791  6 matrix 1 1793  
179 14 Dtool_MAKPrQqo 4 183 1756 0 14 Dtool_MAKPrQqo 3 4 this 3 1791  6 result 1 1793  8 previous 1 1795  
180 14 Dtool_MAKPJ_5x 4 184 1756 0 14 Dtool_MAKPJ_5x 3 4 this 3 1791  5 accum 1 1793  6 weight 1 1797  
181 14 Dtool_MAKPSI7P 7 185 1783 0 14 Dtool_MAKPSI7P 1 4 this 3 1791  
182 14 Dtool_MAKPXeSn 4 186 1756 0 14 Dtool_MAKPXeSn 2 4 this 3 1791  3 out 1 1757  
183 14 Dtool_MAKPeY1t 4 187 1756 0 14 Dtool_MAKPeY1t 3 4 this 3 1791  3 out 1 1757  12 indent_level 1 1754  
184 14 Dtool_MAKPur3c 7 188 1783 0 14 Dtool_MAKPur3c 0 
185 14 Dtool_MAKPPyAR 7 189 1783 0 14 Dtool_MAKPPyAR 0 
186 14 Dtool_MAKPRa2Z 7 190 1764 0 14 Dtool_MAKPRa2Z 0 
187 14 Dtool_MAKP9dPL 7 192 1798 0 14 Dtool_MAKP9dPL 0 
188 14 Dtool_MAKPTts5 7 192 1798 0 14 Dtool_MAKPTts5 1 4 copy 1 1799  
189 14 Dtool_MAKPUxgN 7 193 1798 0 14 Dtool_MAKPUxgN 2 4 this 3 1798  4 copy 1 1799  
190 14 Dtool_MAKPmQpE 6 194 1755 0 14 Dtool_MAKPmQpE 1 4 this 3 1799  
191 14 Dtool_MAKP8IXz 7 195 1799 0 14 Dtool_MAKP8IXz 1 5 table 1 1799  
192 14 Dtool_MAKP5H42 6 196 1754 0 14 Dtool_MAKP5H42 1 4 this 3 1799  
193 14 Dtool_MAKPgSIY 7 197 1791 0 14 Dtool_MAKPgSIY 2 4 this 3 1799  1 n 1 1754  
194 14 Dtool_MAKP3pN5 7 198 1783 0 14 Dtool_MAKP3pN5 1 4 this 3 1799  
195 14 Dtool_MAKP9zOW 4 199 1756 0 14 Dtool_MAKP9zOW 3 4 this 3 1798  1 n 1 1754  9 transform 1 1791  
196 14 Dtool_MAKPWMbq 4 200 1756 0 14 Dtool_MAKPWMbq 2 4 this 3 1798  1 n 1 1754  
197 14 Dtool_MAKPu_JV 6 201 1754 0 14 Dtool_MAKPu_JV 2 4 this 3 1798  9 transform 1 1791  
198 14 Dtool_MAKP6U5C 4 202 1756 0 14 Dtool_MAKP6U5C 2 4 this 3 1799  3 out 1 1757  
199 14 Dtool_MAKPdFiZ 7 203 1764 0 14 Dtool_MAKPdFiZ 0 
200 14 Dtool_MAKPe0eS 7 205 1801 1081 14 Dtool_MAKPe0eS 0 
201 14 Dtool_MAKPRqL0 7 205 1801 1081 14 Dtool_MAKPRqL0 1 4 copy 1 1802  
202 14 Dtool_MAKPE4vc 7 205 1801 1081 14 Dtool_MAKPE4vc 2 10 transform0 1 1791  7 weight0 1 1797  
203 14 Dtool_MAKP5cWw 7 205 1801 1081 14 Dtool_MAKP5cWw 4 10 transform0 1 1791  7 weight0 1 1797  10 transform1 1 1791  7 weight1 1 1797  
204 14 Dtool_MAKPmVV1 7 205 1801 1081 14 Dtool_MAKPmVV1 6 10 transform0 1 1791  7 weight0 1 1797  10 transform1 1 1791  7 weight1 1 1797  10 transform2 1 1791  7 weight2 1 1797  
205 14 Dtool_MAKPkvBo 7 205 1801 1081 14 Dtool_MAKPkvBo 8 10 transform0 1 1791  7 weight0 1 1797  10 transform1 1 1791  7 weight1 1 1797  10 transform2 1 1791  7 weight2 1 1797  10 transform3 1 1791  7 weight3 1 1797  
206 14 Dtool_MAKPKjWy 6 206 1801 0 14 Dtool_MAKPKjWy 2 4 this 3 1801  4 copy 1 1802  
207 14 Dtool_MAKPoz5o 6 208 1754 0 14 Dtool_MAKPoz5o 2 4 this 3 1802  5 other 1 1802  
208 14 Dtool_MAKP_D64 6 209 1755 0 14 Dtool_MAKP_D64 2 4 this 3 1802  5 other 1 1802  
209 14 Dtool_MAKPZE3n 6 210 1755 0 14 Dtool_MAKPZE3n 2 4 this 3 1802  5 other 1 1802  
210 14 Dtool_MAKPZmxW 6 211 1755 0 14 Dtool_MAKPZmxW 2 4 this 3 1802  5 other 1 1802  
211 14 Dtool_MAKPuVAn 4 212 1756 0 14 Dtool_MAKPuVAn 3 4 this 3 1801  9 transform 1 1791  6 weight 1 1797  
212 14 Dtool_MAKP9e42 4 213 1756 0 14 Dtool_MAKP9e42 2 4 this 3 1801  9 transform 1 1791  
213 14 Dtool_MAKPKUUu 4 214 1756 0 14 Dtool_MAKPKUUu 1 4 this 3 1801  
214 14 Dtool_MAKP5JYU 6 215 1755 0 14 Dtool_MAKP5JYU 2 4 this 3 1802  9 transform 1 1791  
215 14 Dtool_MAKPlw9I 6 216 1797 0 14 Dtool_MAKPlw9I 2 4 this 3 1802  9 transform 1 1791  
216 14 Dtool_MAKPgwvf 6 216 1797 0 14 Dtool_MAKPgwvf 2 4 this 3 1802  1 n 1 1754  
217 14 Dtool_MAKPdJun 6 217 1754 0 14 Dtool_MAKPdJun 1 4 this 3 1802  
218 14 Dtool_MAKPcj_I 7 218 1791 0 14 Dtool_MAKPcj_I 2 4 this 3 1802  1 n 1 1754  
219 14 Dtool_MAKPZdFH 4 219 1756 0 14 Dtool_MAKPZdFH 3 4 this 3 1801  1 n 1 1754  9 transform 1 1791  
220 14 Dtool_MAKPfU3_ 4 220 1756 0 14 Dtool_MAKPfU3_ 3 4 this 3 1801  1 n 1 1754  6 weight 1 1797  
221 14 Dtool_MAKPBYjG 4 221 1756 0 14 Dtool_MAKPBYjG 1 4 this 3 1802  
222 14 Dtool_MAKP5Jvt 4 222 1756 0 14 Dtool_MAKP5Jvt 2 4 this 3 1802  6 result 1 1793  
223 14 Dtool_MAKPFQTH 4 223 1756 0 14 Dtool_MAKPFQTH 2 4 this 3 1802  5 point 1 1804  
224 14 Dtool_MAKP44U3 4 223 1756 0 14 Dtool_MAKP44U3 2 4 this 3 1802  5 point 1 1806  
225 14 Dtool_MAKPDfU9 4 224 1756 0 14 Dtool_MAKPDfU9 2 4 this 3 1802  5 point 1 1808  
226 14 Dtool_MAKPnoDq 7 225 1783 0 14 Dtool_MAKPnoDq 1 4 this 3 1802  
227 14 Dtool_MAKPaozy 4 226 1756 0 14 Dtool_MAKPaozy 2 4 this 3 1802  3 out 1 1757  
228 14 Dtool_MAKPfQ_g 4 227 1756 0 14 Dtool_MAKPfQ_g 3 4 this 3 1802  3 out 1 1757  12 indent_level 1 1754  
229 14 Dtool_MAKP5_ZK 7 228 1764 0 14 Dtool_MAKP5_ZK 0 
230 14 Dtool_MAKPeE_A 7 230 1810 0 14 Dtool_MAKPeE_A 0 
231 14 Dtool_MAKP_bjS 7 230 1810 0 14 Dtool_MAKP_bjS 1 4 copy 1 1811  
232 14 Dtool_MAKP3Q0k 7 231 1810 0 14 Dtool_MAKP3Q0k 2 4 this 3 1810  4 copy 1 1811  
233 14 Dtool_MAKP0EyH 6 232 1754 0 14 Dtool_MAKP0EyH 1 4 this 3 1811  
234 14 Dtool_MAKP5_i5 6 233 1802 0 14 Dtool_MAKP5_i5 2 4 this 3 1811  1 n 1 1754  
235 14 Dtool_MAKPKCf_ 7 234 1783 0 14 Dtool_MAKPKCf_ 1 4 this 3 1811  
236 14 Dtool_MAKP8ENT 4 235 1756 0 14 Dtool_MAKP8ENT 3 4 this 3 1810  1 n 1 1754  5 blend 1 1802  
237 14 Dtool_MAKPx_oD 4 236 1756 0 14 Dtool_MAKPx_oD 2 4 this 3 1810  1 n 1 1754  
238 14 Dtool_MAKP3OCx 6 237 1754 0 14 Dtool_MAKP3OCx 2 4 this 3 1810  5 blend 1 1802  
239 14 Dtool_MAKP3o16 6 238 1754 0 14 Dtool_MAKP3o16 1 4 this 3 1811  
240 14 Dtool_MAKPjqiw 6 239 1754 0 14 Dtool_MAKPjqiw 1 4 this 3 1811  
241 14 Dtool_MAKPDcUt 4 240 1756 0 14 Dtool_MAKPDcUt 3 4 this 3 1811  3 out 1 1757  12 indent_level 1 1754  
242 14 Dtool_MAKPplHA 7 241 1764 0 14 Dtool_MAKPplHA 0 
243 14 Dtool_MAKPcSPk 7 243 1761 0 14 Dtool_MAKPcSPk 1 4 this 3 1813  
244 14 Dtool_MAKP7HBY 6 244 1797 0 14 Dtool_MAKP7HBY 1 4 this 3 1813  
245 14 Dtool_MAKPjcOc 7 245 1783 0 14 Dtool_MAKPjcOc 1 4 this 3 1813  
246 14 Dtool_MAKP2_kf 4 246 1756 0 14 Dtool_MAKP2_kf 2 4 this 3 1813  3 out 1 1757  
247 14 Dtool_MAKPzQrv 4 247 1756 0 14 Dtool_MAKPzQrv 3 4 this 3 1813  3 out 1 1757  12 indent_level 1 1754  
248 14 Dtool_MAKPad8s 7 248 1764 0 14 Dtool_MAKPad8s 0 
249 14 Dtool_MAKP_4qZ 7 250 1815 0 14 Dtool_MAKP_4qZ 0 
250 14 Dtool_MAKPFKDH 7 250 1815 0 14 Dtool_MAKPFKDH 1 4 copy 1 1816  
251 14 Dtool_MAKPloXJ 7 251 1815 0 14 Dtool_MAKPloXJ 2 4 this 3 1815  4 copy 1 1816  
252 14 Dtool_MAKP181P 6 252 1755 0 14 Dtool_MAKP181P 1 4 this 3 1816  
253 14 Dtool_MAKPMgH_ 7 253 1816 0 14 Dtool_MAKPMgH_ 1 5 table 1 1816  
254 14 Dtool_MAKPWedP 6 254 1754 0 14 Dtool_MAKPWedP 1 4 this 3 1816  
255 14 Dtool_MAKPiKKK 7 255 1813 0 14 Dtool_MAKPiKKK 2 4 this 3 1816  1 n 1 1754  
256 14 Dtool_MAKPhD7k 7 256 1813 0 14 Dtool_MAKPhD7k 2 4 this 3 1816  4 name 1 1761  
257 14 Dtool_MAKP_R_2 6 257 1755 0 14 Dtool_MAKP_R_2 2 4 this 3 1816  4 name 1 1761  
258 14 Dtool_MAKPy3YI 6 258 1755 0 14 Dtool_MAKPy3YI 1 4 this 3 1816  
259 14 Dtool_MAKPinB4 7 259 1783 0 14 Dtool_MAKPinB4 1 4 this 3 1816  
260 14 Dtool_MAKPRlhx 4 260 1756 0 14 Dtool_MAKPRlhx 3 4 this 3 1815  1 n 1 1754  6 slider 1 1813  
261 14 Dtool_MAKPDBVG 4 261 1756 0 14 Dtool_MAKPDBVG 2 4 this 3 1815  1 n 1 1754  
262 14 Dtool_MAKPgrc3 6 262 1754 0 14 Dtool_MAKPgrc3 2 4 this 3 1815  6 slider 1 1813  
263 14 Dtool_MAKPLkXb 4 263 1756 0 14 Dtool_MAKPLkXb 2 4 this 3 1816  3 out 1 1757  
264 14 Dtool_MAKPcIiW 7 264 1764 0 14 Dtool_MAKPcIiW 0 
265 14 Dtool_MAKPKRDk 7 270 1818 1142 14 Dtool_MAKPKRDk 1 4 copy 1 1778  
266 14 Dtool_MAKPRp_z 7 270 1818 1142 14 Dtool_MAKPRp_z 2 4 copy 1 1778  6 format 1 1776  
267 14 Dtool_MAKPrYjH 7 270 1818 1142 14 Dtool_MAKPrYjH 3 4 name 1 1759  6 format 1 1776  10 usage_hint 1 1690  
268 14 Dtool_MAKPDxOu 7 271 1818 1142 14 Dtool_MAKPDxOu 2 4 this 3 1818  4 copy 1 1778  
269 14 Dtool_MAKPpkcB 4 273 1756 0 14 Dtool_MAKPpkcB 2 4 this 3 1818  4 size 1 1781  
270 14 Dtool_MAKPBGI0 6 275 1759 0 14 Dtool_MAKPBGI0 1 4 this 3 1778  
271 14 Dtool_MAKPiYq5 4 276 1756 0 14 Dtool_MAKPiYq5 2 4 this 3 1818  4 name 1 1759  
272 14 Dtool_MAKP67sy 7 277 1776 0 14 Dtool_MAKP67sy 1 4 this 3 1778  
273 14 Dtool_MAKPD1zm 4 278 1756 0 14 Dtool_MAKPD1zm 2 4 this 3 1818  6 format 1 1776  
274 14 Dtool_MAKPs9db 6 279 1690 0 14 Dtool_MAKPs9db 1 4 this 3 1778  
275 14 Dtool_MAKPk_1i 4 280 1756 0 14 Dtool_MAKPk_1i 2 4 this 3 1818  10 usage_hint 1 1690  
276 14 Dtool_MAKP88D7 6 281 1755 0 14 Dtool_MAKP88D7 2 4 this 3 1778  4 name 1 1761  
277 14 Dtool_MAKPxs3S 6 282 1754 0 14 Dtool_MAKPxs3S 1 4 this 3 1778  
278 14 Dtool_MAKPtnWY 6 283 1755 0 14 Dtool_MAKPtnWY 2 4 this 3 1818  1 n 1 1754  
279 14 Dtool_MAKPv6Ji 4 284 1756 0 14 Dtool_MAKPv6Ji 1 4 this 3 1818  
280 14 Dtool_MAKPLk3d 6 285 1754 0 14 Dtool_MAKPLk3d 1 4 this 3 1778  
281 14 Dtool_MAKPB79G 7 286 1771 0 14 Dtool_MAKPB79G 2 4 this 3 1778  1 i 1 1754  
282 14 Dtool_MAKPodUJ 7 287 1780 1036 14 Dtool_MAKPodUJ 2 4 this 3 1818  1 i 1 1754  
283 14 Dtool_MAKPtWDK 4 288 1756 0 14 Dtool_MAKPtWDK 3 4 this 3 1818  1 i 1 1754  5 array 1 1771  
284 14 Dtool_MAKPBS4c 7 289 1799 0 14 Dtool_MAKPBS4c 1 4 this 3 1778  
285 14 Dtool_MAKPsx_5 4 290 1756 0 14 Dtool_MAKPsx_5 2 4 this 3 1818  5 table 1 1799  
286 14 Dtool_MAKPYfui 4 291 1756 0 14 Dtool_MAKPYfui 1 4 this 3 1818  
287 14 Dtool_MAKPFkfO 7 292 1811 0 14 Dtool_MAKPFkfO 1 4 this 3 1778  
288 14 Dtool_MAKPfufT 7 293 1810 0 14 Dtool_MAKPfufT 1 4 this 3 1818  
289 14 Dtool_MAKP7Mco 4 294 1756 0 14 Dtool_MAKP7Mco 2 4 this 3 1818  5 table 1 1811  
290 14 Dtool_MAKPkA3X 4 295 1756 0 14 Dtool_MAKPkA3X 1 4 this 3 1818  
291 14 Dtool_MAKPED2E 7 296 1816 0 14 Dtool_MAKPED2E 1 4 this 3 1778  
292 14 Dtool_MAKP__9X 4 297 1756 0 14 Dtool_MAKP__9X 2 4 this 3 1818  5 table 1 1816  
293 14 Dtool_MAKPFr1M 4 298 1756 0 14 Dtool_MAKPFr1M 1 4 this 3 1818  
294 14 Dtool_MAKPBRE9 6 299 1754 0 14 Dtool_MAKPBRE9 1 4 this 3 1778  
295 14 Dtool_MAKPdUin 7 300 1783 0 14 Dtool_MAKPdUin 1 4 this 3 1778  
296 14 Dtool_MAKPTi_p 4 301 1756 0 14 Dtool_MAKPTi_p 3 4 this 3 1818  6 source 1 1778  17 keep_data_objects 1 1755  
297 14 Dtool_MAKPU1Qw 4 302 1756 0 14 Dtool_MAKPU1Qw 4 4 this 3 1818  8 dest_row 1 1754  6 source 1 1778  10 source_row 1 1754  
298 14 Dtool_MAKPUeFN 7 303 1778 0 14 Dtool_MAKPUeFN 2 4 this 3 1778  10 new_format 1 1776  
299 14 Dtool_MAKPLmTH 7 304 1778 0 14 Dtool_MAKPLmTH 2 4 this 3 1778  11 color_scale 1 1819  
300 14 Dtool_MAKPnR2X 7 304 1778 0 14 Dtool_MAKPnR2X 5 4 this 3 1778  11 color_scale 1 1819  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  
301 14 Dtool_MAKPYUcy 7 305 1778 0 14 Dtool_MAKPYUcy 2 4 this 3 1778  5 color 1 1819  
302 14 Dtool_MAKPpU_h 7 305 1778 0 14 Dtool_MAKPpU_h 5 4 this 3 1778  5 color 1 1819  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  
303 14 Dtool_MAKPDALf 7 306 1778 0 14 Dtool_MAKPDALf 1 4 this 3 1778  
304 14 Dtool_MAKPwwi1 7 307 1818 1142 14 Dtool_MAKPwwi1 5 4 this 3 1778  4 name 1 1760  14 num_components 1 1754  12 numeric_type 1 1694  8 contents 1 1695  
305 14 Dtool_MAKPnWTw 4 308 1756 0 14 Dtool_MAKPnWTw 2 4 this 3 1778  3 out 1 1757  
306 14 Dtool_MAKPsKfe 4 309 1756 0 14 Dtool_MAKPsKfe 3 4 this 3 1778  3 out 1 1757  12 indent_level 1 1754  
307 14 Dtool_MAKPUjPx 4 309 1756 0 14 Dtool_MAKPUjPx 2 4 this 3 1778  3 out 1 1757  
308 14 Dtool_MAKPZI16 4 310 1756 0 14 Dtool_MAKPZI16 1 4 this 3 1818  
309 14 Dtool_MAKPn1dY 4 311 1756 0 14 Dtool_MAKPn1dY 1 4 this 3 1818  
310 14 Dtool_MAKPIU4H 7 312 1764 0 14 Dtool_MAKPIU4H 0 
311 14 Dtool_MAKPAy_a 7 266 1773 0 14 Dtool_MAKPAy_a 1 4 this 3 1818  
312 14 Dtool_MAKPhFCq 7 267 1818 1142 14 Dtool_MAKPhFCq 1 4 this 3 1773  
313 14 Dtool_MAKPVY07 6 268 1774 0 14 Dtool_MAKPVY07 1 4 this 3 1818  
314 14 Dtool_MAKPLM59 7 269 1818 1142 14 Dtool_MAKPLM59 1 4 this 3 1774  
315 14 Dtool_MAKPxNhI 7 318 1822 1188 14 Dtool_MAKPxNhI 2 4 this 3 1822  4 copy 1 1823  
316 14 Dtool_MAKP7TKD 4 320 1756 0 14 Dtool_MAKP7TKD 2 4 this 3 1822  4 size 1 1781  
317 14 Dtool_MAKPkToi 7 322 1822 1188 14 Dtool_MAKPkToi 1 4 this 3 1823  
318 14 Dtool_MAKPGgvy 6 323 1693 0 14 Dtool_MAKPGgvy 1 4 this 3 1823  
319 14 Dtool_MAKPdMe3 6 324 1754 0 14 Dtool_MAKPdMe3 1 4 this 3 1823  
320 14 Dtool_MAKP7mHk 6 325 1692 0 14 Dtool_MAKP7mHk 1 4 this 3 1823  
321 14 Dtool_MAKPloHJ 4 326 1756 0 14 Dtool_MAKPloHJ 2 4 this 3 1822  11 shade_model 1 1692  
322 14 Dtool_MAKPrTA_ 6 327 1690 0 14 Dtool_MAKPrTA_ 1 4 this 3 1823  
323 14 Dtool_MAKPpILm 4 328 1756 0 14 Dtool_MAKPpILm 2 4 this 3 1822  10 usage_hint 1 1690  
324 14 Dtool_MAKPqhQw 6 329 1694 0 14 Dtool_MAKPqhQw 1 4 this 3 1823  
325 14 Dtool_MAKPAwMD 4 330 1756 0 14 Dtool_MAKPAwMD 2 4 this 3 1822  10 index_type 1 1694  
326 14 Dtool_MAKPjrU4 6 331 1755 0 14 Dtool_MAKPjrU4 1 4 this 3 1823  
327 14 Dtool_MAKP6QHh 6 332 1755 0 14 Dtool_MAKP6QHh 1 4 this 3 1823  
328 14 Dtool_MAKPmlTX 6 333 1754 0 14 Dtool_MAKPmlTX 1 4 this 3 1823  
329 14 Dtool_MAKPvNCm 6 334 1754 0 14 Dtool_MAKPvNCm 1 4 this 3 1823  
330 14 Dtool_MAKPResf 6 335 1754 0 14 Dtool_MAKPResf 2 4 this 3 1823  1 i 1 1754  
331 14 Dtool_MAKPfZh_ 4 336 1756 0 14 Dtool_MAKPfZh_ 2 4 this 3 1822  6 vertex 1 1754  
332 14 Dtool_MAKPHQPq 4 337 1756 0 14 Dtool_MAKPHQPq 3 4 this 3 1822  2 v1 1 1754  2 v2 1 1754  
333 14 Dtool_MAKPjcFB 4 337 1756 0 14 Dtool_MAKPjcFB 4 4 this 3 1822  2 v1 1 1754  2 v2 1 1754  2 v3 1 1754  
334 14 Dtool_MAKP2Q0u 4 337 1756 0 14 Dtool_MAKP2Q0u 5 4 this 3 1822  2 v1 1 1754  2 v2 1 1754  2 v3 1 1754  2 v4 1 1754  
335 14 Dtool_MAKPa2sp 4 338 1756 0 14 Dtool_MAKPa2sp 3 4 this 3 1822  5 start 1 1754  12 num_vertices 1 1754  
336 14 Dtool_MAKP7DMY 4 339 1756 0 14 Dtool_MAKP7DMY 2 4 this 3 1822  12 num_vertices 1 1754  
337 14 Dtool_MAKP6fGw 6 340 1755 0 14 Dtool_MAKP6fGw 1 4 this 3 1822  
338 14 Dtool_MAKPM1Rt 4 341 1756 0 14 Dtool_MAKPM1Rt 1 4 this 3 1822  
339 14 Dtool_MAKPLbh3 4 342 1756 0 14 Dtool_MAKPLbh3 2 4 this 3 1822  6 offset 1 1754  
340 14 Dtool_MAKP6uw4 4 343 1756 0 14 Dtool_MAKP6uw4 3 4 this 3 1822  4 dest 1 1818  6 source 1 1778  
341 14 Dtool_MAKPxTd_ 4 344 1756 0 14 Dtool_MAKPxTd_ 3 4 this 3 1822  4 dest 1 1818  6 source 1 1778  
342 14 Dtool_MAKPKY2E 4 345 1756 0 14 Dtool_MAKPKY2E 1 4 this 3 1822  
343 14 Dtool_MAKP6WIt 6 346 1754 0 14 Dtool_MAKP6WIt 1 4 this 3 1823  
344 14 Dtool_MAKPsxUL 6 347 1754 0 14 Dtool_MAKPsxUL 2 4 this 3 1823  1 n 1 1754  
345 14 Dtool_MAKPB_K0 6 348 1754 0 14 Dtool_MAKPB_K0 2 4 this 3 1823  1 n 1 1754  
346 14 Dtool_MAKPn6mz 6 349 1754 0 14 Dtool_MAKPn6mz 2 4 this 3 1823  1 n 1 1754  
347 14 Dtool_MAKPaEOa 6 350 1754 0 14 Dtool_MAKPaEOa 1 4 this 3 1823  
348 14 Dtool_MAKP4WCg 6 351 1754 0 14 Dtool_MAKP4WCg 2 4 this 3 1823  1 n 1 1754  
349 14 Dtool_MAKPB5d5 6 352 1754 0 14 Dtool_MAKPB5d5 1 4 this 3 1823  
350 14 Dtool_MAKP4mcR 6 353 1754 0 14 Dtool_MAKP4mcR 2 4 this 3 1823  1 n 1 1754  
351 14 Dtool_MAKPDfoY 6 354 1754 0 14 Dtool_MAKPDfoY 1 4 this 3 1823  
352 14 Dtool_MAKPyuOO 6 355 1754 0 14 Dtool_MAKPyuOO 2 4 this 3 1823  1 n 1 1754  
353 14 Dtool_MAKPuWdu 7 356 1823 0 14 Dtool_MAKPuWdu 1 4 this 3 1823  
354 14 Dtool_MAKPyITm 7 357 1823 0 14 Dtool_MAKPyITm 1 4 this 3 1823  
355 14 Dtool_MAKP9Uwk 7 358 1823 0 14 Dtool_MAKP9Uwk 2 4 this 3 1823  11 shade_model 1 1692  
356 14 Dtool_MAKPj0Et 6 359 1754 0 14 Dtool_MAKPj0Et 1 4 this 3 1823  
357 14 Dtool_MAKP1Cqn 6 360 1754 0 14 Dtool_MAKP1Cqn 1 4 this 3 1823  
358 14 Dtool_MAKP30ZO 7 361 1783 0 14 Dtool_MAKP30ZO 1 4 this 3 1823  
359 14 Dtool_MAKPnNd0 6 362 1755 0 14 Dtool_MAKPnNd0 2 4 this 3 1823  11 vertex_data 1 1778  
360 14 Dtool_MAKPa1o6 4 363 1756 0 14 Dtool_MAKPa1o6 2 4 this 3 1823  3 out 1 1757  
361 14 Dtool_MAKPbNE_ 4 364 1756 0 14 Dtool_MAKPbNE_ 3 4 this 3 1823  3 out 1 1757  12 indent_level 1 1754  
362 14 Dtool_MAKPPsal 7 365 1764 0 14 Dtool_MAKPPsal 0 
363 14 Dtool_MAKP857X 7 314 1773 0 14 Dtool_MAKP857X 1 4 this 3 1822  
364 14 Dtool_MAKPDk6Y 7 315 1822 1188 14 Dtool_MAKPDk6Y 1 4 this 3 1773  
365 14 Dtool_MAKPsYAl 6 316 1774 0 14 Dtool_MAKPsYAl 1 4 this 3 1822  
366 14 Dtool_MAKP94K1 7 317 1822 1188 14 Dtool_MAKP94K1 1 4 this 3 1774  
367 14 Dtool_MAKPboYF 7 367 1825 0 14 Dtool_MAKPboYF 1 4 copy 1 1825  
368 14 Dtool_MAKPMbzz 7 367 1825 0 14 Dtool_MAKPMbzz 1 4 name 1 1759  
369 14 Dtool_MAKPAOWV 7 368 1825 0 14 Dtool_MAKPAOWV 2 4 this 3 1825  4 copy 1 1826  
370 14 Dtool_MAKPCd_b 4 373 1756 0 14 Dtool_MAKPCd_b 2 4 this 3 1825  4 name 1 1759  
371 14 Dtool_MAKPqybK 6 374 1759 0 14 Dtool_MAKPqybK 1 4 this 3 1826  
372 14 Dtool_MAKPx_xd 4 375 1756 0 14 Dtool_MAKPx_xd 2 4 this 3 1825  4 sort 1 1754  
373 14 Dtool_MAKPediB 6 376 1754 0 14 Dtool_MAKPediB 1 4 this 3 1826  
374 14 Dtool_MAKP53u_ 4 377 1756 0 14 Dtool_MAKP53u_ 2 4 this 3 1825  8 priority 1 1754  
375 14 Dtool_MAKPvd5l 6 378 1754 0 14 Dtool_MAKPvd5l 1 4 this 3 1826  
376 14 Dtool_MAKPc8r6 6 379 1755 0 14 Dtool_MAKPc8r6 2 4 this 3 1826  5 other 1 1826  
377 14 Dtool_MAKPIE53 4 380 1756 0 14 Dtool_MAKPIE53 2 4 this 3 1825  4 name 1 1760  
378 14 Dtool_MAKPSh4R 4 380 1756 0 14 Dtool_MAKPSh4R 2 4 this 3 1825  13 texcoord_name 1 1759  
379 14 Dtool_MAKP6ntn 7 381 1760 0 14 Dtool_MAKP6ntn 1 4 this 3 1826  
380 14 Dtool_MAKP_lwU 4 382 1756 0 14 Dtool_MAKP_lwU 2 4 this 3 1825  4 mode 1 1714  
381 14 Dtool_MAKPHG0A 6 383 1714 0 14 Dtool_MAKPHG0A 1 4 this 3 1826  
382 14 Dtool_MAKPtRyD 4 384 1756 0 14 Dtool_MAKPtRyD 2 4 this 3 1825  5 color 1 1819  
383 14 Dtool_MAKPX3mA 7 385 1828 0 14 Dtool_MAKPX3mA 1 4 this 3 1826  
384 14 Dtool_MAKPjqP6 4 386 1756 0 14 Dtool_MAKPjqP6 2 4 this 3 1825  9 rgb_scale 1 1754  
385 14 Dtool_MAKPb_0B 6 387 1754 0 14 Dtool_MAKPb_0B 1 4 this 3 1826  
386 14 Dtool_MAKPRljB 4 388 1756 0 14 Dtool_MAKPRljB 2 4 this 3 1825  11 alpha_scale 1 1754  
387 14 Dtool_MAKPABTl 6 389 1754 0 14 Dtool_MAKPABTl 1 4 this 3 1826  
388 14 Dtool_MAKPIuf8 4 390 1756 0 14 Dtool_MAKPIuf8 2 4 this 3 1825  12 saved_result 1 1755  
389 14 Dtool_MAKP_NSV 6 391 1755 0 14 Dtool_MAKP_NSV 1 4 this 3 1826  
390 14 Dtool_MAKPjFHN 4 392 1756 0 14 Dtool_MAKPjFHN 4 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  
391 14 Dtool_MAKPgYLT 4 392 1756 0 14 Dtool_MAKPgYLT 6 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  7 source1 1 1716  8 operand1 1 1717  
392 14 Dtool_MAKPmXix 4 392 1756 0 14 Dtool_MAKPmXix 8 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  7 source1 1 1716  8 operand1 1 1717  7 source2 1 1716  8 operand2 1 1717  
393 14 Dtool_MAKP0fyd 6 393 1715 0 14 Dtool_MAKP0fyd 1 4 this 3 1826  
394 14 Dtool_MAKPIBF9 6 394 1754 0 14 Dtool_MAKPIBF9 1 4 this 3 1826  
395 14 Dtool_MAKPqKNk 6 395 1716 0 14 Dtool_MAKPqKNk 1 4 this 3 1826  
396 14 Dtool_MAKPNrxE 6 396 1717 0 14 Dtool_MAKPNrxE 1 4 this 3 1826  
397 14 Dtool_MAKPrKSy 6 397 1716 0 14 Dtool_MAKPrKSy 1 4 this 3 1826  
398 14 Dtool_MAKPkrRI 6 398 1717 0 14 Dtool_MAKPkrRI 1 4 this 3 1826  
399 14 Dtool_MAKPpKbA 6 399 1716 0 14 Dtool_MAKPpKbA 1 4 this 3 1826  
400 14 Dtool_MAKP7oxL 6 400 1717 0 14 Dtool_MAKP7oxL 1 4 this 3 1826  
401 14 Dtool_MAKPrsCd 4 401 1756 0 14 Dtool_MAKPrsCd 4 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  
402 14 Dtool_MAKPuvSR 4 401 1756 0 14 Dtool_MAKPuvSR 6 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  7 source1 1 1716  8 operand1 1 1717  
403 14 Dtool_MAKPjhJH 4 401 1756 0 14 Dtool_MAKPjhJH 8 4 this 3 1825  4 mode 1 1715  7 source0 1 1716  8 operand0 1 1717  7 source1 1 1716  8 operand1 1 1717  7 source2 1 1716  8 operand2 1 1717  
404 14 Dtool_MAKPTu_C 6 402 1715 0 14 Dtool_MAKPTu_C 1 4 this 3 1826  
405 14 Dtool_MAKPOFQQ 6 403 1754 0 14 Dtool_MAKPOFQQ 1 4 this 3 1826  
406 14 Dtool_MAKPqzUQ 6 404 1716 0 14 Dtool_MAKPqzUQ 1 4 this 3 1826  
407 14 Dtool_MAKP7D7X 6 405 1717 0 14 Dtool_MAKP7D7X 1 4 this 3 1826  
408 14 Dtool_MAKPEkUA 6 406 1716 0 14 Dtool_MAKPEkUA 1 4 this 3 1826  
409 14 Dtool_MAKPDSFY 6 407 1717 0 14 Dtool_MAKPDSFY 1 4 this 3 1826  
410 14 Dtool_MAKPuaUw 6 408 1716 0 14 Dtool_MAKPuaUw 1 4 this 3 1826  
411 14 Dtool_MAKPLhOY 6 409 1717 0 14 Dtool_MAKPLhOY 1 4 this 3 1826  
412 14 Dtool_MAKPMbyj 6 410 1755 0 14 Dtool_MAKPMbyj 1 4 this 3 1826  
413 14 Dtool_MAKPQupz 6 411 1755 0 14 Dtool_MAKPQupz 1 4 this 3 1826  
414 14 Dtool_MAKPMLKu 4 412 1756 0 14 Dtool_MAKPMLKu 2 4 this 3 1826  3 out 1 1757  
415 14 Dtool_MAKPkmyF 4 413 1756 0 14 Dtool_MAKPkmyF 2 4 this 3 1826  3 out 1 1757  
416 14 Dtool_MAKPHR5s 7 414 1825 0 14 Dtool_MAKPHR5s 0 
417 14 Dtool_MAKPpjIT 7 415 1764 0 14 Dtool_MAKPpjIT 0 
418 14 Dtool_MAKPA5hw 7 421 1829 1286 14 Dtool_MAKPA5hw 1 4 data 1 1778  
419 14 Dtool_MAKPk_XE 7 422 1829 1286 14 Dtool_MAKPk_XE 2 4 this 3 1829  4 copy 1 1830  
420 14 Dtool_MAKPqLk7 4 424 1756 0 14 Dtool_MAKPqLk7 2 4 this 3 1829  4 size 1 1781  
421 14 Dtool_MAKPIdD3 7 426 1829 1286 14 Dtool_MAKPIdD3 1 4 this 3 1830  
422 14 Dtool_MAKPznC4 6 427 1693 0 14 Dtool_MAKPznC4 1 4 this 3 1830  
423 14 Dtool_MAKPhDDD 6 428 1692 0 14 Dtool_MAKPhDDD 1 4 this 3 1830  
424 14 Dtool_MAKP18Ae 6 429 1754 0 14 Dtool_MAKP18Ae 1 4 this 3 1830  
425 14 Dtool_MAKPiZFS 6 430 1690 0 14 Dtool_MAKPiZFS 1 4 this 3 1830  
426 14 Dtool_MAKPSB4T 4 431 1756 0 14 Dtool_MAKPSB4T 2 4 this 3 1829  10 usage_hint 1 1690  
427 14 Dtool_MAKPohq0 7 432 1778 0 14 Dtool_MAKPohq0 1 4 this 3 1830  
428 14 Dtool_MAKPAtYT 7 433 1818 1142 14 Dtool_MAKPAtYT 1 4 this 3 1829  
429 14 Dtool_MAKPWBrG 4 434 1756 0 14 Dtool_MAKPWBrG 2 4 this 3 1829  4 data 1 1778  
430 14 Dtool_MAKPCOPz 4 435 1756 0 14 Dtool_MAKPCOPz 3 4 this 3 1829  4 data 1 1778  6 offset 1 1754  
431 14 Dtool_MAKPM2BD 6 436 1754 0 14 Dtool_MAKPM2BD 2 4 this 3 1829  14 composite_only 1 1755  
432 14 Dtool_MAKPLxLL 6 437 1754 0 14 Dtool_MAKPLxLL 1 4 this 3 1830  
433 14 Dtool_MAKPHXk3 7 438 1823 0 14 Dtool_MAKPHXk3 2 4 this 3 1830  1 i 1 1754  
434 14 Dtool_MAKPtI4K 7 439 1822 1188 14 Dtool_MAKPtI4K 2 4 this 3 1829  1 i 1 1754  
435 14 Dtool_MAKPvY3W 4 440 1756 0 14 Dtool_MAKPvY3W 3 4 this 3 1829  1 i 1 1754  9 primitive 1 1823  
436 14 Dtool_MAKP4qtW 4 441 1756 0 14 Dtool_MAKP4qtW 2 4 this 3 1829  9 primitive 1 1823  
437 14 Dtool_MAKPmtla 4 442 1756 0 14 Dtool_MAKPmtla 2 4 this 3 1829  1 i 1 1754  
438 14 Dtool_MAKPYAGE 4 443 1756 0 14 Dtool_MAKPYAGE 1 4 this 3 1829  
439 14 Dtool_MAKP6GgV 7 444 1829 1286 14 Dtool_MAKP6GgV 1 4 this 3 1830  
440 14 Dtool_MAKPPWLU 7 445 1829 1286 14 Dtool_MAKPPWLU 1 4 this 3 1830  
441 14 Dtool_MAKPI72P 7 446 1829 1286 14 Dtool_MAKPI72P 1 4 this 3 1830  
442 14 Dtool_MAKPlrdj 4 447 1756 0 14 Dtool_MAKPlrdj 1 4 this 3 1829  
443 14 Dtool_MAKPHZg5 4 448 1756 0 14 Dtool_MAKPHZg5 1 4 this 3 1829  
444 14 Dtool_MAKPGTBv 4 449 1756 0 14 Dtool_MAKPGTBv 1 4 this 3 1829  
445 14 Dtool_MAKPyUv9 6 450 1755 0 14 Dtool_MAKPyUv9 2 4 this 3 1829  5 other 1 1830  
446 14 Dtool_MAKPgSfK 6 451 1754 0 14 Dtool_MAKPgSfK 1 4 this 3 1830  
447 14 Dtool_MAKPHKFV 7 452 1783 0 14 Dtool_MAKPHKFV 1 4 this 3 1830  
448 14 Dtool_MAKPYlMV 4 453 1756 0 14 Dtool_MAKPYlMV 2 4 this 3 1829  3 mat 1 1795  
449 14 Dtool_MAKPRtQb 6 454 1755 0 14 Dtool_MAKPRtQb 1 4 this 3 1830  
450 14 Dtool_MAKPdH6F 6 454 1755 0 14 Dtool_MAKPdH6F 2 4 this 3 1830  11 vertex_data 1 1778  
451 14 Dtool_MAKP5pRF 7 455 1834 0 14 Dtool_MAKP5pRF 1 4 this 3 1830  
452 14 Dtool_MAKPM7bs 4 456 1756 0 14 Dtool_MAKPM7bs 1 4 this 3 1830  
453 14 Dtool_MAKPnNw_ 4 457 1756 0 14 Dtool_MAKPnNw_ 2 4 this 3 1829  6 volume 1 1834  
454 14 Dtool_MAKP92vG 4 458 1756 0 14 Dtool_MAKP92vG 1 4 this 3 1829  
455 14 Dtool_MAKPrXR3 4 459 1756 0 14 Dtool_MAKPrXR3 2 4 this 3 1830  3 out 1 1757  
456 14 Dtool_MAKPC21S 4 460 1756 0 14 Dtool_MAKPC21S 3 4 this 3 1830  3 out 1 1757  12 indent_level 1 1754  
457 14 Dtool_MAKP0uiX 4 460 1756 0 14 Dtool_MAKP0uiX 2 4 this 3 1830  3 out 1 1757  
458 14 Dtool_MAKPr67p 4 461 1756 0 14 Dtool_MAKPr67p 1 4 this 3 1829  
459 14 Dtool_MAKPgwUB 4 462 1756 0 14 Dtool_MAKPgwUB 1 4 this 3 1829  
460 14 Dtool_MAKPkUN5 4 463 1756 0 14 Dtool_MAKPkUN5 2 4 this 3 1829  16 prepared_objects 1 1835  
461 14 Dtool_MAKPYDlG 6 464 1755 0 14 Dtool_MAKPYDlG 2 4 this 3 1829  16 prepared_objects 1 1835  
462 14 Dtool_MAKPtSn_ 6 465 1754 0 14 Dtool_MAKPtSn_ 1 4 this 3 1829  
463 14 Dtool_MAKPyQKN 7 466 1764 0 14 Dtool_MAKPyQKN 0 
464 14 Dtool_MAKPDt4h 7 417 1773 0 14 Dtool_MAKPDt4h 1 4 this 3 1829  
465 14 Dtool_MAKP2AH3 7 418 1829 1286 14 Dtool_MAKP2AH3 1 4 this 3 1773  
466 14 Dtool_MAKP9JLK 6 419 1774 0 14 Dtool_MAKP9JLK 1 4 this 3 1829  
467 14 Dtool_MAKPcioB 7 420 1829 1286 14 Dtool_MAKPcioB 1 4 this 3 1774  
468 14 Dtool_MAKPlaZi 7 468 1837 1188 14 Dtool_MAKPlaZi 1 10 usage_hint 1 1690  
469 14 Dtool_MAKPZdk3 7 468 1837 1188 14 Dtool_MAKPZdk3 1 4 copy 1 1838  
470 14 Dtool_MAKP_7pA 7 469 1764 0 14 Dtool_MAKP_7pA 0 
471 14 Dtool_MAKP3Ci0 7 471 1840 1188 14 Dtool_MAKP3Ci0 1 10 usage_hint 1 1690  
472 14 Dtool_MAKPRSrb 7 471 1840 1188 14 Dtool_MAKPRSrb 1 4 copy 1 1841  
473 14 Dtool_MAKPnUZ3 7 472 1764 0 14 Dtool_MAKPnUZ3 0 
474 14 Dtool_MAKPDbke 7 474 1843 1188 14 Dtool_MAKPDbke 1 10 usage_hint 1 1690  
475 14 Dtool_MAKP2L6_ 7 474 1843 1188 14 Dtool_MAKP2L6_ 1 4 copy 1 1844  
476 14 Dtool_MAKPmrqc 7 475 1764 0 14 Dtool_MAKPmrqc 0 
477 14 Dtool_MAKPlM_V 7 477 1846 1188 14 Dtool_MAKPlM_V 1 10 usage_hint 1 1690  
478 14 Dtool_MAKPl_JA 7 477 1846 1188 14 Dtool_MAKPl_JA 1 4 copy 1 1847  
479 14 Dtool_MAKPNvut 7 478 1764 0 14 Dtool_MAKPNvut 0 
480 14 Dtool_MAKPBV_D 7 480 1849 1188 14 Dtool_MAKPBV_D 1 10 usage_hint 1 1690  
481 14 Dtool_MAKPHwh3 7 480 1849 1188 14 Dtool_MAKPHwh3 1 4 copy 1 1850  
482 14 Dtool_MAKPe_RP 7 481 1764 0 14 Dtool_MAKPe_RP 0 
483 14 Dtool_MAKPxfLD 7 483 1852 1188 14 Dtool_MAKPxfLD 1 10 usage_hint 1 1690  
484 14 Dtool_MAKPARnF 7 483 1852 1188 14 Dtool_MAKPARnF 1 4 copy 1 1853  
485 14 Dtool_MAKPib35 7 484 1764 0 14 Dtool_MAKPib35 0 
486 14 Dtool_MAKPU4ZP 7 486 1855 1344 14 Dtool_MAKPU4ZP 0 
487 14 Dtool_MAKPmHyG 7 486 1855 1344 14 Dtool_MAKPmHyG 1 10 array_data 1 1771  
488 14 Dtool_MAKPfOvI 7 486 1855 1344 14 Dtool_MAKPfOvI 2 10 array_data 1 1771  6 column 1 1754  
489 14 Dtool_MAKPUq8_ 7 486 1855 1344 14 Dtool_MAKPUq8_ 1 11 vertex_data 1 1778  
490 14 Dtool_MAKPFPmQ 7 486 1855 1344 14 Dtool_MAKPFPmQ 2 11 vertex_data 1 1778  4 name 1 1761  
491 14 Dtool_MAKPxxdz 7 486 1855 1344 14 Dtool_MAKPxxdz 2 11 vertex_data 1 1778  4 name 1 1759  
492 14 Dtool_MAKPr9yT 7 486 1855 1344 14 Dtool_MAKPr9yT 1 4 copy 1 1856  
493 14 Dtool_MAKPDEdr 6 487 1855 0 14 Dtool_MAKPDEdr 2 4 this 3 1855  4 copy 1 1856  
494 14 Dtool_MAKP8urn 7 489 1778 0 14 Dtool_MAKP8urn 1 4 this 3 1856  
495 14 Dtool_MAKP73al 7 490 1771 0 14 Dtool_MAKP73al 1 4 this 3 1856  
496 14 Dtool_MAKPuxhQ 6 491 1755 0 14 Dtool_MAKPuxhQ 2 4 this 3 1855  4 name 1 1761  
497 14 Dtool_MAKPR1Ec 6 491 1755 0 14 Dtool_MAKPR1Ec 2 4 this 3 1855  4 name 1 1759  
498 14 Dtool_MAKPJFVC 6 491 1755 0 14 Dtool_MAKPJFVC 2 4 this 3 1855  6 column 1 1754  
499 14 Dtool_MAKPIqjd 6 491 1755 0 14 Dtool_MAKPIqjd 3 4 this 3 1855  5 array 1 1754  6 column 1 1765  
500 14 Dtool_MAKPqVEq 6 492 1755 0 14 Dtool_MAKPqVEq 1 4 this 3 1856  
501 14 Dtool_MAKPIsz6 6 493 1754 0 14 Dtool_MAKPIsz6 1 4 this 3 1856  
502 14 Dtool_MAKPiUaj 6 494 1765 0 14 Dtool_MAKPiUaj 1 4 this 3 1856  
503 14 Dtool_MAKP9pTB 4 495 1756 0 14 Dtool_MAKP9pTB 2 4 this 3 1855  3 row 1 1754  
504 14 Dtool_MAKPVMpp 6 496 1754 0 14 Dtool_MAKPVMpp 1 4 this 3 1856  
505 14 Dtool_MAKPGqgQ 6 497 1754 0 14 Dtool_MAKPGqgQ 1 4 this 3 1856  
506 14 Dtool_MAKPtH9p 6 498 1755 0 14 Dtool_MAKPtH9p 1 4 this 3 1856  
507 14 Dtool_MAKPvgRZ 6 499 1797 0 14 Dtool_MAKPvgRZ 1 4 this 3 1855  
508 14 Dtool_MAKPvQzs 6 500 1858 0 14 Dtool_MAKPvQzs 1 4 this 3 1855  
509 14 Dtool_MAKPoAVA 6 501 1861 0 14 Dtool_MAKPoAVA 1 4 this 3 1855  
510 14 Dtool_MAKPow2T 6 502 1819 0 14 Dtool_MAKPow2T 1 4 this 3 1855  
511 14 Dtool_MAKPMh5r 6 503 1754 0 14 Dtool_MAKPMh5r 1 4 this 3 1855  
512 14 Dtool_MAKPMRb_ 4 504 1756 0 14 Dtool_MAKPMRb_ 1 4 this 3 1855  
513 14 Dtool_MAKPNB9S 4 505 1756 0 14 Dtool_MAKPNB9S 1 4 this 3 1855  
514 14 Dtool_MAKPNxem 4 506 1756 0 14 Dtool_MAKPNxem 1 4 this 3 1855  
515 14 Dtool_MAKPWNtp 4 507 1756 0 14 Dtool_MAKPWNtp 2 4 this 3 1856  3 out 1 1757  
516 14 Dtool_MAKP_1gf 7 509 1864 1366 14 Dtool_MAKP_1gf 0 
517 14 Dtool_MAKPm1bv 7 509 1864 1366 14 Dtool_MAKPm1bv 1 10 array_data 1 1780  
518 14 Dtool_MAKP8wdd 7 509 1864 1366 14 Dtool_MAKP8wdd 2 10 array_data 1 1780  6 column 1 1754  
519 14 Dtool_MAKPiuVb 7 509 1864 1366 14 Dtool_MAKPiuVb 1 11 vertex_data 1 1818  
520 14 Dtool_MAKPOMjg 7 509 1864 1366 14 Dtool_MAKPOMjg 2 11 vertex_data 1 1818  4 name 1 1761  
521 14 Dtool_MAKPvIHs 7 509 1864 1366 14 Dtool_MAKPvIHs 2 11 vertex_data 1 1818  4 name 1 1759  
522 14 Dtool_MAKP3jti 7 509 1864 1366 14 Dtool_MAKP3jti 1 4 copy 1 1865  
523 14 Dtool_MAKPR3bG 6 510 1864 0 14 Dtool_MAKPR3bG 2 4 this 3 1864  4 copy 1 1865  
524 14 Dtool_MAKP1wqw 7 512 1818 1142 14 Dtool_MAKP1wqw 1 4 this 3 1865  
525 14 Dtool_MAKP4pZu 7 513 1780 1036 14 Dtool_MAKP4pZu 1 4 this 3 1865  
526 14 Dtool_MAKPnXgZ 6 514 1755 0 14 Dtool_MAKPnXgZ 2 4 this 3 1864  4 name 1 1761  
527 14 Dtool_MAKPAfCl 6 514 1755 0 14 Dtool_MAKPAfCl 2 4 this 3 1864  4 name 1 1759  
528 14 Dtool_MAKP4bSL 6 514 1755 0 14 Dtool_MAKP4bSL 2 4 this 3 1864  6 column 1 1754  
529 14 Dtool_MAKP5him 6 514 1755 0 14 Dtool_MAKP5him 3 4 this 3 1864  5 array 1 1754  6 column 1 1765  
530 14 Dtool_MAKP7zCz 6 515 1755 0 14 Dtool_MAKP7zCz 1 4 this 3 1865  
531 14 Dtool_MAKPImzD 6 516 1754 0 14 Dtool_MAKPImzD 1 4 this 3 1865  
532 14 Dtool_MAKPTOZs 6 517 1765 0 14 Dtool_MAKPTOZs 1 4 this 3 1865  
533 14 Dtool_MAKPk3SK 4 518 1756 0 14 Dtool_MAKPk3SK 2 4 this 3 1864  3 row 1 1754  
534 14 Dtool_MAKPiCoy 6 519 1754 0 14 Dtool_MAKPiCoy 1 4 this 3 1865  
535 14 Dtool_MAKPDv2U 6 520 1754 0 14 Dtool_MAKPDv2U 1 4 this 3 1865  
536 14 Dtool_MAKPqN8y 6 521 1755 0 14 Dtool_MAKPqN8y 1 4 this 3 1865  
537 14 Dtool_MAKP8dnY 4 522 1756 0 14 Dtool_MAKP8dnY 2 4 this 3 1864  4 data 1 1797  
538 14 Dtool_MAKPuO4g 4 523 1756 0 14 Dtool_MAKPuO4g 2 4 this 3 1864  4 data 1 1858  
539 14 Dtool_MAKPmeMu 4 523 1756 0 14 Dtool_MAKPmeMu 3 4 this 3 1864  1 x 1 1797  1 y 1 1797  
540 14 Dtool_MAKPH_73 4 524 1756 0 14 Dtool_MAKPH_73 2 4 this 3 1864  4 data 1 1861  
541 14 Dtool_MAKP_DXP 4 524 1756 0 14 Dtool_MAKP_DXP 4 4 this 3 1864  1 x 1 1797  1 y 1 1797  1 z 1 1797  
542 14 Dtool_MAKPfh9O 4 525 1756 0 14 Dtool_MAKPfh9O 2 4 this 3 1864  4 data 1 1819  
543 14 Dtool_MAKPKTZT 4 525 1756 0 14 Dtool_MAKPKTZT 5 4 this 3 1864  1 x 1 1797  1 y 1 1797  1 z 1 1797  1 w 1 1797  
544 14 Dtool_MAKPWrrr 4 526 1756 0 14 Dtool_MAKPWrrr 2 4 this 3 1864  4 data 1 1754  
545 14 Dtool_MAKPsRPt 4 527 1756 0 14 Dtool_MAKPsRPt 3 4 this 3 1864  1 a 1 1754  1 b 1 1754  
546 14 Dtool_MAKPRmzc 4 528 1756 0 14 Dtool_MAKPRmzc 4 4 this 3 1864  1 a 1 1754  1 b 1 1754  1 c 1 1754  
547 14 Dtool_MAKPdVco 4 529 1756 0 14 Dtool_MAKPdVco 5 4 this 3 1864  1 a 1 1754  1 b 1 1754  1 c 1 1754  1 d 1 1754  
548 14 Dtool_MAKP5Qu1 4 530 1756 0 14 Dtool_MAKP5Qu1 2 4 this 3 1864  4 data 1 1797  
549 14 Dtool_MAKPsnA_ 4 531 1756 0 14 Dtool_MAKPsnA_ 2 4 this 3 1864  4 data 1 1858  
550 14 Dtool_MAKPn5UL 4 531 1756 0 14 Dtool_MAKPn5UL 3 4 this 3 1864  1 x 1 1797  1 y 1 1797  
551 14 Dtool_MAKPEXCV 4 532 1756 0 14 Dtool_MAKPEXCV 2 4 this 3 1864  4 data 1 1861  
552 14 Dtool_MAKP72es 4 532 1756 0 14 Dtool_MAKP72es 4 4 this 3 1864  1 x 1 1797  1 y 1 1797  1 z 1 1797  
553 14 Dtool_MAKPdGEs 4 533 1756 0 14 Dtool_MAKPdGEs 2 4 this 3 1864  4 data 1 1819  
554 14 Dtool_MAKPNOgw 4 533 1756 0 14 Dtool_MAKPNOgw 5 4 this 3 1864  1 x 1 1797  1 y 1 1797  1 z 1 1797  1 w 1 1797  
555 14 Dtool_MAKPMcyI 4 534 1756 0 14 Dtool_MAKPMcyI 2 4 this 3 1864  4 data 1 1754  
556 14 Dtool_MAKPrwVK 4 535 1756 0 14 Dtool_MAKPrwVK 3 4 this 3 1864  1 a 1 1754  1 b 1 1754  
557 14 Dtool_MAKPWt75 4 536 1756 0 14 Dtool_MAKPWt75 4 4 this 3 1864  1 a 1 1754  1 b 1 1754  1 c 1 1754  
558 14 Dtool_MAKPngjF 4 537 1756 0 14 Dtool_MAKPngjF 5 4 this 3 1864  1 a 1 1754  1 b 1 1754  1 c 1 1754  1 d 1 1754  
559 14 Dtool_MAKPtLsy 4 538 1756 0 14 Dtool_MAKPtLsy 2 4 this 3 1865  3 out 1 1757  
560 14 Dtool_MAKPy1ru 7 544 1867 1400 14 Dtool_MAKPy1ru 0 
561 14 Dtool_MAKP1co3 7 544 1867 1400 14 Dtool_MAKP1co3 1 10 array_data 1 1780  
562 14 Dtool_MAKP9WgO 7 544 1867 1400 14 Dtool_MAKP9WgO 2 10 array_data 1 1780  6 column 1 1754  
563 14 Dtool_MAKPV_Yy 7 544 1867 1400 14 Dtool_MAKPV_Yy 1 11 vertex_data 1 1818  
564 14 Dtool_MAKP6OpO 7 544 1867 1400 14 Dtool_MAKP6OpO 2 11 vertex_data 1 1818  4 name 1 1761  
565 14 Dtool_MAKPRgWT 7 544 1867 1400 14 Dtool_MAKPRgWT 2 11 vertex_data 1 1818  4 name 1 1759  
566 14 Dtool_MAKPNKr7 7 544 1867 1400 14 Dtool_MAKPNKr7 1 4 copy 1 1868  
567 14 Dtool_MAKP0WpY 6 545 1867 0 14 Dtool_MAKP0WpY 2 4 this 3 1867  4 copy 1 1868  
568 14 Dtool_MAKPwH9m 7 547 1818 1142 14 Dtool_MAKPwH9m 1 4 this 3 1868  
569 14 Dtool_MAKPIWNZ 7 548 1780 1036 14 Dtool_MAKPIWNZ 1 4 this 3 1868  
570 14 Dtool_MAKP9TSi 6 549 1755 0 14 Dtool_MAKP9TSi 2 4 this 3 1867  4 name 1 1761  
571 14 Dtool_MAKP5ySQ 6 549 1755 0 14 Dtool_MAKP5ySQ 2 4 this 3 1867  4 name 1 1759  
572 14 Dtool_MAKPXLoW 6 549 1755 0 14 Dtool_MAKPXLoW 2 4 this 3 1867  6 column 1 1754  
573 14 Dtool_MAKP46ti 6 549 1755 0 14 Dtool_MAKP46ti 3 4 this 3 1867  5 array 1 1754  6 column 1 1765  
574 14 Dtool_MAKPboKu 6 550 1755 0 14 Dtool_MAKPboKu 1 4 this 3 1868  
575 14 Dtool_MAKPvQZb 6 551 1754 0 14 Dtool_MAKPvQZb 1 4 this 3 1868  
576 14 Dtool_MAKPxqWN 6 552 1765 0 14 Dtool_MAKPxqWN 1 4 this 3 1868  
577 14 Dtool_MAKPYAs_ 4 553 1756 0 14 Dtool_MAKPYAs_ 2 4 this 3 1867  3 row 1 1754  
578 14 Dtool_MAKPQVW0 6 554 1754 0 14 Dtool_MAKPQVW0 1 4 this 3 1868  
579 14 Dtool_MAKPVwyF 6 555 1755 0 14 Dtool_MAKPVwyF 1 4 this 3 1868  
580 14 Dtool_MAKPHXoX 4 556 1756 0 14 Dtool_MAKPHXoX 2 4 this 3 1868  3 out 1 1757  
581 14 Dtool_MAKPJzBL 6 540 1864 0 14 Dtool_MAKPJzBL 1 4 this 3 1867  
582 14 Dtool_MAKP_ksb 6 541 1867 0 14 Dtool_MAKP_ksb 1 4 this 3 1864  
583 14 Dtool_MAKPgjnL 6 542 1855 0 14 Dtool_MAKPgjnL 1 4 this 3 1867  
584 14 Dtool_MAKPmisS 6 543 1867 0 14 Dtool_MAKPmisS 1 4 this 3 1855  
585 14 Dtool_MAKPDKCe 7 569 1870 1416 14 Dtool_MAKPDKCe 1 4 name 1 1759  
586 14 Dtool_MAKPN0nZ 7 569 1870 1416 14 Dtool_MAKPN0nZ 0 
587 14 Dtool_MAKPtD0r 7 571 1870 1416 14 Dtool_MAKPtD0r 1 4 this 3 1870  
588 14 Dtool_MAKPadfr 4 572 1756 0 14 Dtool_MAKPadfr 1 4 this 3 1870  
589 14 Dtool_MAKPkdtv 4 573 1756 0 14 Dtool_MAKPkdtv 7 4 this 3 1870  12 texture_type 1 1730  6 x_size 1 1754  6 y_size 1 1754  6 z_size 1 1754  14 component_type 1 1731  6 format 1 1732  
590 14 Dtool_MAKP3hn1 4 574 1756 0 14 Dtool_MAKP3hn1 1 4 this 3 1870  
591 14 Dtool_MAKPVMou 4 574 1756 0 14 Dtool_MAKPVMou 4 4 this 3 1870  6 x_size 1 1754  14 component_type 1 1731  6 format 1 1732  
592 14 Dtool_MAKP_Wx1 4 575 1756 0 14 Dtool_MAKP_Wx1 1 4 this 3 1870  
593 14 Dtool_MAKPHAEk 4 575 1756 0 14 Dtool_MAKPHAEk 5 4 this 3 1870  6 x_size 1 1754  6 y_size 1 1754  14 component_type 1 1731  6 format 1 1732  
594 14 Dtool_MAKP31mJ 4 576 1756 0 14 Dtool_MAKP31mJ 2 4 this 3 1870  6 z_size 1 1754  
595 14 Dtool_MAKPnH71 4 576 1756 0 14 Dtool_MAKPnH71 1 4 this 3 1870  
596 14 Dtool_MAKPlbzO 4 576 1756 0 14 Dtool_MAKPlbzO 6 4 this 3 1870  6 x_size 1 1754  6 y_size 1 1754  6 z_size 1 1754  14 component_type 1 1731  6 format 1 1732  
597 14 Dtool_MAKPrJje 4 577 1756 0 14 Dtool_MAKPrJje 1 4 this 3 1870  
598 14 Dtool_MAKPIwnH 4 577 1756 0 14 Dtool_MAKPIwnH 4 4 this 3 1870  4 size 1 1754  14 component_type 1 1731  6 format 1 1732  
599 14 Dtool_MAKPAcPV 4 578 1756 0 14 Dtool_MAKPAcPV 2 4 this 3 1870  4 size 1 1754  
600 14 Dtool_MAKP3IDU 6 579 1755 0 14 Dtool_MAKP3IDU 2 4 this 3 1870  8 fullpath 1 1871  
601 14 Dtool_MAKPoATv 6 579 1755 0 14 Dtool_MAKPoATv 5 4 this 3 1870  8 fullpath 1 1871  14 alpha_fullpath 1 1871  25 primary_file_num_channels 1 1754  18 alpha_file_channel 1 1754  
602 14 Dtool_MAKPf347 6 579 1755 0 14 Dtool_MAKPf347 9 4 this 3 1870  8 fullpath 1 1871  14 alpha_fullpath 1 1871  25 primary_file_num_channels 1 1754  18 alpha_file_channel 1 1754  1 z 1 1754  1 n 1 1754  10 read_pages 1 1755  12 read_mipmaps 1 1755  
603 14 Dtool_MAKP1czw 6 579 1755 0 14 Dtool_MAKP1czw 6 4 this 3 1870  8 fullpath 1 1871  1 z 1 1754  1 n 1 1754  10 read_pages 1 1755  12 read_mipmaps 1 1755  
604 14 Dtool_MAKPHtFt 6 580 1755 0 14 Dtool_MAKPHtFt 2 4 this 3 1870  8 fullpath 1 1871  
605 14 Dtool_MAKPyISG 6 580 1755 0 14 Dtool_MAKPyISG 6 4 this 3 1870  8 fullpath 1 1871  1 z 1 1754  1 n 1 1754  11 write_pages 1 1755  13 write_mipmaps 1 1755  
606 14 Dtool_MAKPR4MB 4 580 1756 0 14 Dtool_MAKPR4MB 3 4 this 3 1874  3 out 1 1757  12 indent_level 1 1754  
607 14 Dtool_MAKPaEMT 6 581 1755 0 14 Dtool_MAKPaEMT 3 4 this 3 1870  2 in 1 1876  8 filename 1 1759  
608 14 Dtool_MAKPXtbC 6 581 1755 0 14 Dtool_MAKPXtbC 2 4 this 3 1870  2 in 1 1876  
609 14 Dtool_MAKP9lbk 6 582 1755 0 14 Dtool_MAKP9lbk 3 4 this 3 1874  3 out 1 1757  8 filename 1 1759  
610 14 Dtool_MAKPdBCU 6 582 1755 0 14 Dtool_MAKPdBCU 2 4 this 3 1874  3 out 1 1757  
611 14 Dtool_MAKPBHdq 6 583 1755 0 14 Dtool_MAKPBHdq 2 4 this 3 1870  8 pnmimage 1 1878  
612 14 Dtool_MAKPQG98 6 583 1755 0 14 Dtool_MAKPQG98 4 4 this 3 1870  8 pnmimage 1 1878  1 z 1 1754  1 n 1 1754  
613 14 Dtool_MAKPfuOO 6 584 1755 0 14 Dtool_MAKPfuOO 2 4 this 3 1874  8 pnmimage 1 1881  
614 14 Dtool_MAKPGqUB 6 584 1755 0 14 Dtool_MAKPGqUB 4 4 this 3 1874  8 pnmimage 1 1881  1 z 1 1754  1 n 1 1754  
615 14 Dtool_MAKPCVZW 6 585 1755 0 14 Dtool_MAKPCVZW 1 4 this 3 1870  
616 14 Dtool_MAKPTzyE 7 586 1870 1416 14 Dtool_MAKPTzyE 2 4 this 3 1874  6 suffix 1 1760  
617 14 Dtool_MAKPW7Cs 6 587 1755 0 14 Dtool_MAKPW7Cs 1 4 this 3 1874  
618 14 Dtool_MAKPMiw2 6 588 1871 0 14 Dtool_MAKPMiw2 1 4 this 3 1874  
619 14 Dtool_MAKPc1WY 6 589 1755 0 14 Dtool_MAKPc1WY 1 4 this 3 1874  
620 14 Dtool_MAKPBYEj 6 590 1871 0 14 Dtool_MAKPBYEj 1 4 this 3 1874  
621 14 Dtool_MAKPestn 6 591 1755 0 14 Dtool_MAKPestn 1 4 this 3 1874  
622 14 Dtool_MAKPEHay 6 592 1871 0 14 Dtool_MAKPEHay 1 4 this 3 1874  
623 14 Dtool_MAKPQ97B 6 593 1755 0 14 Dtool_MAKPQ97B 1 4 this 3 1874  
624 14 Dtool_MAKPKSqM 6 594 1871 0 14 Dtool_MAKPKSqM 1 4 this 3 1874  
625 14 Dtool_MAKPp9VG 6 595 1754 0 14 Dtool_MAKPp9VG 1 4 this 3 1874  
626 14 Dtool_MAKPA91J 6 596 1754 0 14 Dtool_MAKPA91J 1 4 this 3 1874  
627 14 Dtool_MAKPf_VN 6 597 1754 0 14 Dtool_MAKPf_VN 1 4 this 3 1874  
628 14 Dtool_MAKPWv_P 6 598 1754 0 14 Dtool_MAKPWv_P 1 4 this 3 1874  
629 14 Dtool_MAKPqXBq 6 599 1754 0 14 Dtool_MAKPqXBq 1 4 this 3 1874  
630 14 Dtool_MAKPvw9T 6 600 1730 0 14 Dtool_MAKPvw9T 1 4 this 3 1874  
631 14 Dtool_MAKPN7UC 6 601 1732 0 14 Dtool_MAKPN7UC 1 4 this 3 1874  
632 14 Dtool_MAKPrqBI 6 602 1731 0 14 Dtool_MAKPrqBI 1 4 this 3 1874  
633 14 Dtool_MAKPkX83 4 603 1756 0 14 Dtool_MAKPkX83 2 4 this 3 1870  4 wrap 1 1734  
634 14 Dtool_MAKPSp8_ 4 604 1756 0 14 Dtool_MAKPSp8_ 2 4 this 3 1870  4 wrap 1 1734  
635 14 Dtool_MAKPBo8F 4 605 1756 0 14 Dtool_MAKPBo8F 2 4 this 3 1870  4 wrap 1 1734  
636 14 Dtool_MAKPmEu7 4 606 1756 0 14 Dtool_MAKPmEu7 2 4 this 3 1870  6 filter 1 1733  
637 14 Dtool_MAKP8Kn6 4 607 1756 0 14 Dtool_MAKP8Kn6 2 4 this 3 1870  6 filter 1 1733  
638 14 Dtool_MAKPGRw3 4 608 1756 0 14 Dtool_MAKPGRw3 2 4 this 3 1870  18 anisotropic_degree 1 1754  
639 14 Dtool_MAKP2r4a 4 609 1756 0 14 Dtool_MAKP2r4a 2 4 this 3 1870  5 color 1 1819  
640 14 Dtool_MAKPHB8q 4 610 1756 0 14 Dtool_MAKPHB8q 2 4 this 3 1870  11 compression 1 1735  
641 14 Dtool_MAKPGh2R 4 611 1756 0 14 Dtool_MAKPGh2R 2 4 this 3 1870  17 render_to_texture 1 1755  
642 14 Dtool_MAKPDAco 6 612 1734 0 14 Dtool_MAKPDAco 1 4 this 3 1874  
643 14 Dtool_MAKPVHcv 6 613 1734 0 14 Dtool_MAKPVHcv 1 4 this 3 1874  
644 14 Dtool_MAKPnFc2 6 614 1734 0 14 Dtool_MAKPnFc2 1 4 this 3 1874  
645 14 Dtool_MAKPmseL 6 615 1733 0 14 Dtool_MAKPmseL 1 4 this 3 1874  
646 14 Dtool_MAKP8eYK 6 616 1733 0 14 Dtool_MAKP8eYK 1 4 this 3 1874  
647 14 Dtool_MAKPRCMk 6 617 1754 0 14 Dtool_MAKPRCMk 1 4 this 3 1874  
648 14 Dtool_MAKPrLZH 7 618 1828 0 14 Dtool_MAKPrLZH 1 4 this 3 1874  
649 14 Dtool_MAKPekiK 6 619 1735 0 14 Dtool_MAKPekiK 1 4 this 3 1874  
650 14 Dtool_MAKPh_qK 6 620 1755 0 14 Dtool_MAKPh_qK 1 4 this 3 1874  
651 14 Dtool_MAKPYXSi 6 621 1755 0 14 Dtool_MAKPYXSi 1 4 this 3 1874  
652 14 Dtool_MAKP9PeO 6 622 1754 0 14 Dtool_MAKP9PeO 1 4 this 3 1874  
653 14 Dtool_MAKP_Vjv 6 623 1754 0 14 Dtool_MAKP_Vjv 2 4 this 3 1874  1 n 1 1754  
654 14 Dtool_MAKPAwmv 6 624 1754 0 14 Dtool_MAKPAwmv 2 4 this 3 1874  1 n 1 1754  
655 14 Dtool_MAKPScov 6 625 1754 0 14 Dtool_MAKPScov 2 4 this 3 1874  1 n 1 1754  
656 14 Dtool_MAKP6jZY 6 626 1755 0 14 Dtool_MAKP6jZY 1 4 this 3 1874  
657 14 Dtool_MAKPbDJE 6 627 1755 0 14 Dtool_MAKPbDJE 1 4 this 3 1874  
658 14 Dtool_MAKPxRV8 6 628 1781 0 14 Dtool_MAKPxRV8 1 4 this 3 1874  
659 14 Dtool_MAKPyOvS 6 629 1781 0 14 Dtool_MAKPyOvS 1 4 this 3 1874  
660 14 Dtool_MAKPR2lC 6 630 1781 0 14 Dtool_MAKPR2lC 1 4 this 3 1874  
661 14 Dtool_MAKPCoXN 6 631 1781 0 14 Dtool_MAKPCoXN 1 4 this 3 1874  
662 14 Dtool_MAKPptvV 7 632 1785 0 14 Dtool_MAKPptvV 1 4 this 3 1870  
663 14 Dtool_MAKPEnmq 6 633 1735 0 14 Dtool_MAKPEnmq 1 4 this 3 1874  
664 14 Dtool_MAKP3zLa 7 634 1787 0 14 Dtool_MAKP3zLa 1 4 this 3 1870  
665 14 Dtool_MAKPODVV 7 635 1787 0 14 Dtool_MAKPODVV 1 4 this 3 1870  
666 14 Dtool_MAKPXMwB 4 636 1756 0 14 Dtool_MAKPXMwB 4 4 this 3 1870  5 image 1 1787  11 compression 1 1735  9 page_size 1 1781  
667 14 Dtool_MAKPgNpT 4 636 1756 0 14 Dtool_MAKPgNpT 3 4 this 3 1870  5 image 1 1787  11 compression 1 1735  
668 14 Dtool_MAKP4Wl9 4 636 1756 0 14 Dtool_MAKP4Wl9 2 4 this 3 1870  5 image 1 1787  
669 14 Dtool_MAKPpFgH 4 637 1756 0 14 Dtool_MAKPpFgH 1 4 this 3 1870  
670 14 Dtool_MAKP_1DJ 4 638 1756 0 14 Dtool_MAKP_1DJ 2 4 this 3 1870  14 keep_ram_image 1 1755  
671 14 Dtool_MAKPprTa 6 639 1755 0 14 Dtool_MAKPprTa 1 4 this 3 1874  
672 14 Dtool_MAKPsZCn 6 640 1754 0 14 Dtool_MAKPsZCn 1 4 this 3 1874  
673 14 Dtool_MAKPPYfR 6 641 1755 0 14 Dtool_MAKPPYfR 2 4 this 3 1874  1 n 1 1754  
674 14 Dtool_MAKPuUo_ 6 642 1755 0 14 Dtool_MAKPuUo_ 1 4 this 3 1874  
675 14 Dtool_MAKPIt9g 6 643 1781 0 14 Dtool_MAKPIt9g 2 4 this 3 1874  1 n 1 1754  
676 14 Dtool_MAKPrxQs 6 644 1781 0 14 Dtool_MAKPrxQs 2 4 this 3 1874  1 n 1 1754  
677 14 Dtool_MAKP18J3 6 645 1781 0 14 Dtool_MAKP18J3 2 4 this 3 1874  1 n 1 1754  
678 14 Dtool_MAKPmvjI 6 646 1781 0 14 Dtool_MAKPmvjI 2 4 this 3 1874  1 n 1 1754  
679 14 Dtool_MAKPUBwm 7 647 1785 0 14 Dtool_MAKPUBwm 2 4 this 3 1870  1 n 1 1754  
680 14 Dtool_MAKPFscn 7 648 1787 0 14 Dtool_MAKPFscn 2 4 this 3 1870  1 n 1 1754  
681 14 Dtool_MAKP0yn2 7 649 1787 0 14 Dtool_MAKP0yn2 2 4 this 3 1870  1 n 1 1754  
682 14 Dtool_MAKPCkQI 4 650 1756 0 14 Dtool_MAKPCkQI 4 4 this 3 1870  1 n 1 1754  5 image 1 1787  9 page_size 1 1781  
683 14 Dtool_MAKPy_pP 4 650 1756 0 14 Dtool_MAKPy_pP 3 4 this 3 1870  1 n 1 1754  5 image 1 1787  
684 14 Dtool_MAKPYq5x 4 651 1756 0 14 Dtool_MAKPYq5x 2 4 this 3 1870  1 n 1 1754  
685 14 Dtool_MAKP_KKM 4 652 1756 0 14 Dtool_MAKP_KKM 1 4 this 3 1870  
686 14 Dtool_MAKPvPAg 4 653 1756 0 14 Dtool_MAKPvPAg 1 4 this 3 1870  
687 14 Dtool_MAKP8VcX 7 654 1783 0 14 Dtool_MAKP8VcX 1 4 this 3 1874  
688 14 Dtool_MAKPLFHv 4 655 1756 0 14 Dtool_MAKPLFHv 2 4 this 3 1870  16 prepared_objects 1 1835  
689 14 Dtool_MAKPv3AE 6 656 1755 0 14 Dtool_MAKPv3AE 2 4 this 3 1870  16 prepared_objects 1 1835  
690 14 Dtool_MAKPH_Et 6 657 1754 0 14 Dtool_MAKPH_Et 1 4 this 3 1870  
691 14 Dtool_MAKPp5Zg 6 658 1781 0 14 Dtool_MAKPp5Zg 1 4 this 3 1874  
692 14 Dtool_MAKPxxu1 4 659 1756 0 14 Dtool_MAKPxxu1 2 4 this 3 1870  8 filename 1 1871  
693 14 Dtool_MAKP1EJs 4 660 1756 0 14 Dtool_MAKP1EJs 1 4 this 3 1870  
694 14 Dtool_MAKPm10_ 4 661 1756 0 14 Dtool_MAKPm10_ 2 4 this 3 1870  14 alpha_filename 1 1871  
695 14 Dtool_MAKPniFu 4 662 1756 0 14 Dtool_MAKPniFu 1 4 this 3 1870  
696 14 Dtool_MAKPwCYx 4 663 1756 0 14 Dtool_MAKPwCYx 2 4 this 3 1870  8 fullpath 1 1871  
697 14 Dtool_MAKP_nbF 4 664 1756 0 14 Dtool_MAKP_nbF 1 4 this 3 1870  
698 14 Dtool_MAKP66Zo 4 665 1756 0 14 Dtool_MAKP66Zo 2 4 this 3 1870  14 alpha_fullpath 1 1871  
699 14 Dtool_MAKPQc0_ 4 666 1756 0 14 Dtool_MAKPQc0_ 1 4 this 3 1870  
700 14 Dtool_MAKPzob9 4 667 1756 0 14 Dtool_MAKPzob9 2 4 this 3 1870  6 x_size 1 1754  
701 14 Dtool_MAKPLp7A 4 668 1756 0 14 Dtool_MAKPLp7A 2 4 this 3 1870  6 y_size 1 1754  
702 14 Dtool_MAKPipbE 4 669 1756 0 14 Dtool_MAKPipbE 2 4 this 3 1870  6 z_size 1 1754  
703 14 Dtool_MAKPtpDw 4 670 1756 0 14 Dtool_MAKPtpDw 2 4 this 3 1870  6 format 1 1732  
704 14 Dtool_MAKPQhrN 4 671 1756 0 14 Dtool_MAKPQhrN 2 4 this 3 1870  14 component_type 1 1731  
705 14 Dtool_MAKP2KhW 4 672 1756 0 14 Dtool_MAKP2KhW 1 4 this 3 1870  
706 14 Dtool_MAKPLfRY 6 673 1755 0 14 Dtool_MAKPLfRY 1 4 this 3 1874  
707 14 Dtool_MAKPh42H 4 674 1756 0 14 Dtool_MAKPh42H 1 4 this 3 1870  
708 14 Dtool_MAKPmAs_ 6 675 1755 0 14 Dtool_MAKPmAs_ 1 4 this 3 1874  
709 14 Dtool_MAKPscHG 6 676 1755 0 14 Dtool_MAKPscHG 1 4 type 1 1733  
710 14 Dtool_MAKPoC2_ 7 677 1764 0 14 Dtool_MAKPoC2_ 0 
711 14 Dtool_MAKPYako 7 558 1773 0 14 Dtool_MAKPYako 1 4 this 3 1870  
712 14 Dtool_MAKPc1xv 7 559 1870 1416 14 Dtool_MAKPc1xv 1 4 this 3 1773  
713 14 Dtool_MAKPOTYU 6 561 1882 0 14 Dtool_MAKPOTYU 1 4 this 3 1870  
714 14 Dtool_MAKPSRIH 7 562 1870 1416 14 Dtool_MAKPSRIH 1 4 this 3 1882  
715 14 Dtool_MAKPWRXs 7 680 1883 0 14 Dtool_MAKPWRXs 2 4 name 1 1759  4 body 1 1759  
716 14 Dtool_MAKPrJvz 6 681 1759 0 14 Dtool_MAKPrJvz 1 4 this 3 1884  
717 14 Dtool_MAKP3CWq 6 682 1759 0 14 Dtool_MAKP3CWq 1 4 this 3 1884  
718 14 Dtool_MAKP8_Ox 4 683 1756 0 14 Dtool_MAKP8_Ox 2 4 this 3 1883  16 prepared_objects 1 1835  
719 14 Dtool_MAKPjq1j 6 684 1755 0 14 Dtool_MAKPjq1j 2 4 this 3 1883  16 prepared_objects 1 1835  
720 14 Dtool_MAKPe2Dj 6 685 1754 0 14 Dtool_MAKPe2Dj 1 4 this 3 1883  
721 14 Dtool_MAKPIKlJ 4 686 1756 0 14 Dtool_MAKPIKlJ 1 4 this 3 1883  
722 14 Dtool_MAKP_dOH 4 687 1756 0 14 Dtool_MAKP_dOH 4 4 this 3 1883  6 result 1 1886  2 rt 1 1755  2 lt 1 1755  
723 14 Dtool_MAKPBcQ1 4 688 1756 0 14 Dtool_MAKPBcQ1 4 4 this 3 1883  6 result 1 1886  7 pattern 1 1759  7 include 1 1755  
724 14 Dtool_MAKPMJ_C 4 689 1756 0 14 Dtool_MAKPMJ_C 2 4 this 3 1883  6 result 1 1886  
725 14 Dtool_MAKPOyhK 6 690 1754 0 14 Dtool_MAKPOyhK 1 4 this 3 1883  
726 14 Dtool_MAKPbth4 6 691 1755 0 14 Dtool_MAKPbth4 1 4 this 3 1883  
727 14 Dtool_MAKP9z4r 7 692 1764 0 14 Dtool_MAKP9z4r 0 
728 14 Dtool_MAKPg23I 7 695 1890 1599 14 Dtool_MAKPg23I 1 4 this 3 1888  
729 14 Dtool_MAKPFXAo 6 696 1755 0 14 Dtool_MAKPFXAo 4 4 this 3 1888  7 point2d 1 1891  10 near_point 1 1804  9 far_point 1 1804  
730 14 Dtool_MAKPVxUo 6 696 1755 0 14 Dtool_MAKPVxUo 4 4 this 3 1888  7 point2d 1 1894  10 near_point 1 1804  9 far_point 1 1804  
731 14 Dtool_MAKPB8vq 6 697 1755 0 14 Dtool_MAKPB8vq 3 4 this 3 1888  7 point2d 1 1891  5 vec3d 1 1808  
732 14 Dtool_MAKP6Owq 6 697 1755 0 14 Dtool_MAKP6Owq 3 4 this 3 1888  7 point2d 1 1894  5 vec3d 1 1808  
733 14 Dtool_MAKPy6hM 6 698 1755 0 14 Dtool_MAKPy6hM 3 4 this 3 1888  7 point3d 1 1894  7 point2d 1 1896  
734 14 Dtool_MAKPyFwN 6 698 1755 0 14 Dtool_MAKPyFwN 3 4 this 3 1888  7 point3d 1 1894  7 point2d 1 1804  
735 14 Dtool_MAKPOGXC 4 699 1756 0 14 Dtool_MAKPOGXC 2 4 this 3 1890  5 event 1 1759  
736 14 Dtool_MAKPI_Ni 6 700 1759 0 14 Dtool_MAKPI_Ni 1 4 this 3 1888  
737 14 Dtool_MAKP0iUE 4 701 1756 0 14 Dtool_MAKP0iUE 2 4 this 3 1890  2 cs 1 1897  
738 14 Dtool_MAKPsmpX 6 702 1897 0 14 Dtool_MAKPsmpX 1 4 this 3 1888  
739 14 Dtool_MAKPOuga 4 703 1756 0 14 Dtool_MAKPOuga 1 4 this 3 1890  
740 14 Dtool_MAKPkLtR 4 704 1756 0 14 Dtool_MAKPkLtR 2 4 this 3 1890  9 film_size 1 1858  
741 14 Dtool_MAKPlFkr 4 704 1756 0 14 Dtool_MAKPlFkr 2 4 this 3 1890  5 width 1 1797  
742 14 Dtool_MAKP0VW8 4 704 1756 0 14 Dtool_MAKP0VW8 3 4 this 3 1890  5 width 1 1797  6 height 1 1797  
743 14 Dtool_MAKPpaPJ 6 705 1858 0 14 Dtool_MAKPpaPJ 1 4 this 3 1888  
744 14 Dtool_MAKP54pC 4 706 1756 0 14 Dtool_MAKP54pC 2 4 this 3 1890  11 film_offset 1 1858  
745 14 Dtool_MAKPbcn6 4 706 1756 0 14 Dtool_MAKPbcn6 3 4 this 3 1890  1 x 1 1797  1 y 1 1797  
746 14 Dtool_MAKPY8t_ 6 707 1898 0 14 Dtool_MAKPY8t_ 1 4 this 3 1888  
747 14 Dtool_MAKPNiTK 4 708 1756 0 14 Dtool_MAKPNiTK 2 4 this 3 1890  12 focal_length 1 1797  
748 14 Dtool_MAKPaQhl 6 709 1797 0 14 Dtool_MAKPaQhl 1 4 this 3 1888  
749 14 Dtool_MAKPi1Mq 4 710 1756 0 14 Dtool_MAKPi1Mq 2 4 this 3 1890  7 min_fov 1 1797  
750 14 Dtool_MAKPTIxI 4 711 1756 0 14 Dtool_MAKPTIxI 2 4 this 3 1890  3 fov 1 1858  
751 14 Dtool_MAKPZkJq 4 711 1756 0 14 Dtool_MAKPZkJq 2 4 this 3 1890  3 fov 1 1797  
752 14 Dtool_MAKPwNaC 4 711 1756 0 14 Dtool_MAKPwNaC 3 4 this 3 1890  4 hfov 1 1797  4 vfov 1 1797  
753 14 Dtool_MAKPGTNq 6 712 1858 0 14 Dtool_MAKPGTNq 1 4 this 3 1888  
754 14 Dtool_MAKPFGjN 6 713 1797 0 14 Dtool_MAKPFGjN 1 4 this 3 1888  
755 14 Dtool_MAKP9tnO 6 714 1797 0 14 Dtool_MAKP9tnO 1 4 this 3 1888  
756 14 Dtool_MAKPuTcw 6 715 1797 0 14 Dtool_MAKPuTcw 1 4 this 3 1888  
757 14 Dtool_MAKP_kwh 4 716 1756 0 14 Dtool_MAKP_kwh 2 4 this 3 1890  12 aspect_ratio 1 1797  
758 14 Dtool_MAKPjb98 6 717 1797 0 14 Dtool_MAKPjb98 1 4 this 3 1888  
759 14 Dtool_MAKP2Qgw 4 718 1756 0 14 Dtool_MAKP2Qgw 2 4 this 3 1890  13 near_distance 1 1797  
760 14 Dtool_MAKPvVA4 6 719 1797 0 14 Dtool_MAKPvVA4 1 4 this 3 1888  
761 14 Dtool_MAKPcoiP 4 720 1756 0 14 Dtool_MAKPcoiP 2 4 this 3 1890  12 far_distance 1 1797  
762 14 Dtool_MAKP9WmP 6 721 1797 0 14 Dtool_MAKP9WmP 1 4 this 3 1888  
763 14 Dtool_MAKP9vjM 4 722 1756 0 14 Dtool_MAKP9vjM 3 4 this 3 1890  13 near_distance 1 1797  12 far_distance 1 1797  
764 14 Dtool_MAKPyde1 6 723 1797 0 14 Dtool_MAKPyde1 0 
765 14 Dtool_MAKPChjq 6 724 1797 0 14 Dtool_MAKPChjq 0 
766 14 Dtool_MAKPHI9n 4 725 1756 0 14 Dtool_MAKPHI9n 2 4 this 3 1890  8 view_hpr 1 1861  
767 14 Dtool_MAKPlvxd 4 725 1756 0 14 Dtool_MAKPlvxd 4 4 this 3 1890  1 h 1 1797  1 p 1 1797  1 r 1 1797  
768 14 Dtool_MAKPzOnI 6 726 1861 0 14 Dtool_MAKPzOnI 1 4 this 3 1888  
769 14 Dtool_MAKPumpn 4 727 1756 0 14 Dtool_MAKPumpn 3 4 this 3 1890  11 view_vector 1 1901  9 up_vector 1 1901  
770 14 Dtool_MAKPRtqd 4 727 1756 0 14 Dtool_MAKPRtqd 7 4 this 3 1890  1 x 1 1797  1 y 1 1797  1 z 1 1797  1 i 1 1797  1 j 1 1797  1 k 1 1797  
771 14 Dtool_MAKPyzLu 6 728 1901 0 14 Dtool_MAKPyzLu 1 4 this 3 1888  
772 14 Dtool_MAKPryc7 6 729 1901 0 14 Dtool_MAKPryc7 1 4 this 3 1888  
773 14 Dtool_MAKPDlmp 7 730 1804 0 14 Dtool_MAKPDlmp 1 4 this 3 1888  
774 14 Dtool_MAKPohPi 4 731 1756 0 14 Dtool_MAKPohPi 2 4 this 3 1890  20 interocular_distance 1 1797  
775 14 Dtool_MAKPCou8 6 732 1797 0 14 Dtool_MAKPCou8 1 4 this 3 1888  
776 14 Dtool_MAKPKsi1 4 733 1756 0 14 Dtool_MAKPKsi1 2 4 this 3 1890  20 convergence_distance 1 1797  
777 14 Dtool_MAKPjWCQ 6 734 1797 0 14 Dtool_MAKPjWCQ 1 4 this 3 1888  
778 14 Dtool_MAKPL_7i 4 735 1756 0 14 Dtool_MAKPL_7i 2 4 this 3 1890  8 view_mat 1 1795  
779 14 Dtool_MAKPM_m4 6 736 1795 0 14 Dtool_MAKPM_m4 1 4 this 3 1888  
780 14 Dtool_MAKPkqkp 4 737 1756 0 14 Dtool_MAKPkqkp 1 4 this 3 1890  
781 14 Dtool_MAKPZFPx 4 738 1756 0 14 Dtool_MAKPZFPx 2 4 this 3 1890  8 keystone 1 1858  
782 14 Dtool_MAKPvPzC 6 739 1858 0 14 Dtool_MAKPvPzC 1 4 this 3 1888  
783 14 Dtool_MAKPp1qZ 4 740 1756 0 14 Dtool_MAKPp1qZ 1 4 this 3 1890  
784 14 Dtool_MAKPEH8Q 4 742 1756 0 14 Dtool_MAKPEH8Q 6 4 this 3 1890  2 ul 1 1861  2 ur 1 1861  2 ll 1 1861  2 lr 1 1861  5 flags 1 1754  
785 14 Dtool_MAKPSJre 4 743 1756 0 14 Dtool_MAKPSJre 1 4 this 3 1890  
786 14 Dtool_MAKP6Z__ 6 744 1755 0 14 Dtool_MAKP6Z__ 1 4 this 3 1888  
787 14 Dtool_MAKPBoQp 6 745 1755 0 14 Dtool_MAKPBoQp 1 4 this 3 1888  
788 14 Dtool_MAKPlQp5 6 746 1755 0 14 Dtool_MAKPlQp5 1 4 this 3 1888  
789 14 Dtool_MAKPJeEy 7 747 1829 1286 14 Dtool_MAKPJeEy 1 4 this 3 1890  
790 14 Dtool_MAKPb5g0 7 748 1903 0 14 Dtool_MAKPb5g0 1 4 this 3 1888  
791 14 Dtool_MAKPAAmb 6 749 1795 0 14 Dtool_MAKPAAmb 2 4 this 3 1888  7 channel 1 1739  
792 14 Dtool_MAKPrmTG 6 749 1795 0 14 Dtool_MAKPrmTG 1 4 this 3 1888  
793 14 Dtool_MAKPK_5F 6 750 1795 0 14 Dtool_MAKPK_5F 2 4 this 3 1888  7 channel 1 1739  
794 14 Dtool_MAKPmcoU 6 750 1795 0 14 Dtool_MAKPmcoU 1 4 this 3 1888  
795 14 Dtool_MAKPOjJ3 6 751 1795 0 14 Dtool_MAKPOjJ3 1 4 this 3 1888  
796 14 Dtool_MAKPHzXh 6 752 1795 0 14 Dtool_MAKPHzXh 1 4 this 3 1888  
797 14 Dtool_MAKPFMDf 6 753 1795 0 14 Dtool_MAKPFMDf 1 4 this 3 1888  
798 14 Dtool_MAKPAERJ 6 754 1795 0 14 Dtool_MAKPAERJ 1 4 this 3 1888  
799 14 Dtool_MAKPB_GJ 4 755 1756 0 14 Dtool_MAKPB_GJ 2 4 this 3 1888  3 out 1 1757  
800 14 Dtool_MAKPpMpk 4 756 1756 0 14 Dtool_MAKPpMpk 3 4 this 3 1888  3 out 1 1757  12 indent_level 1 1754  
801 14 Dtool_MAKPtXWp 4 756 1756 0 14 Dtool_MAKPtXWp 2 4 this 3 1888  3 out 1 1757  
802 14 Dtool_MAKPX6_e 7 757 1764 0 14 Dtool_MAKPX6_e 0 
803 14 Dtool_MAKPGQ_b 7 764 1906 1606 14 Dtool_MAKPGQ_b 1 4 copy 1 1904  
804 14 Dtool_MAKPF7Ty 7 764 1906 1606 14 Dtool_MAKPF7Ty 1 4 name 1 1759  
805 14 Dtool_MAKP__MD 7 764 1906 1606 14 Dtool_MAKP__MD 0 
806 14 Dtool_MAKP9ooi 7 765 1906 1606 14 Dtool_MAKP9ooi 2 4 this 3 1906  4 copy 1 1904  
807 14 Dtool_MAKP7f5w 6 767 1755 0 14 Dtool_MAKP7f5w 1 4 this 3 1904  
808 14 Dtool_MAKPZcqI 6 768 1819 0 14 Dtool_MAKPZcqI 1 4 this 3 1904  
809 14 Dtool_MAKP34VB 4 769 1756 0 14 Dtool_MAKP34VB 2 4 this 3 1906  5 color 1 1819  
810 14 Dtool_MAKPefxD 4 770 1756 0 14 Dtool_MAKPefxD 1 4 this 3 1906  
811 14 Dtool_MAKPUInK 6 771 1755 0 14 Dtool_MAKPUInK 1 4 this 3 1904  
812 14 Dtool_MAKP7Iai 6 772 1819 0 14 Dtool_MAKP7Iai 1 4 this 3 1904  
813 14 Dtool_MAKPZ0Eb 4 773 1756 0 14 Dtool_MAKPZ0Eb 2 4 this 3 1906  5 color 1 1819  
814 14 Dtool_MAKPAqqE 4 774 1756 0 14 Dtool_MAKPAqqE 1 4 this 3 1906  
815 14 Dtool_MAKPW6_3 6 775 1755 0 14 Dtool_MAKPW6_3 1 4 this 3 1904  
816 14 Dtool_MAKP8lwP 6 776 1819 0 14 Dtool_MAKP8lwP 1 4 this 3 1904  
817 14 Dtool_MAKPdfyI 4 777 1756 0 14 Dtool_MAKPdfyI 2 4 this 3 1906  5 color 1 1819  
818 14 Dtool_MAKPcNUr 4 778 1756 0 14 Dtool_MAKPcNUr 1 4 this 3 1906  
819 14 Dtool_MAKP03rd 6 779 1755 0 14 Dtool_MAKP03rd 1 4 this 3 1904  
820 14 Dtool_MAKPb2c1 6 780 1819 0 14 Dtool_MAKPb2c1 1 4 this 3 1904  
821 14 Dtool_MAKPwIeu 4 781 1756 0 14 Dtool_MAKPwIeu 2 4 this 3 1906  5 color 1 1819  
822 14 Dtool_MAKPjKsu 4 782 1756 0 14 Dtool_MAKPjKsu 1 4 this 3 1906  
823 14 Dtool_MAKP8cpp 6 783 1797 0 14 Dtool_MAKP8cpp 1 4 this 3 1904  
824 14 Dtool_MAKP_D1v 4 784 1756 0 14 Dtool_MAKP_D1v 2 4 this 3 1906  9 shininess 1 1797  
825 14 Dtool_MAKPGt_1 6 785 1755 0 14 Dtool_MAKPGt_1 1 4 this 3 1904  
826 14 Dtool_MAKP9DMm 4 786 1756 0 14 Dtool_MAKP9DMm 2 4 this 3 1906  5 local 1 1755  
827 14 Dtool_MAKPJTRL 6 787 1755 0 14 Dtool_MAKPJTRL 1 4 this 3 1904  
828 14 Dtool_MAKP06bF 4 788 1756 0 14 Dtool_MAKP06bF 2 4 this 3 1906  7 twoside 1 1755  
829 14 Dtool_MAKPNdw5 6 789 1755 0 14 Dtool_MAKPNdw5 2 4 this 3 1904  5 other 1 1904  
830 14 Dtool_MAKPvnf5 6 790 1755 0 14 Dtool_MAKPvnf5 2 4 this 3 1904  5 other 1 1904  
831 14 Dtool_MAKPwWha 6 791 1755 0 14 Dtool_MAKPwWha 2 4 this 3 1904  5 other 1 1904  
832 14 Dtool_MAKPlFQk 6 792 1754 0 14 Dtool_MAKPlFQk 2 4 this 3 1904  5 other 1 1904  
833 14 Dtool_MAKPhHq5 4 793 1756 0 14 Dtool_MAKPhHq5 2 4 this 3 1904  3 out 1 1757  
834 14 Dtool_MAKPO3W7 4 794 1756 0 14 Dtool_MAKPO3W7 3 4 this 3 1904  3 out 1 1757  6 indent 1 1754  
835 14 Dtool_MAKPc7AP 7 795 1764 0 14 Dtool_MAKPc7AP 0 
836 14 Dtool_MAKPAyQo 7 760 1773 0 14 Dtool_MAKPAyQo 1 4 this 3 1906  
837 14 Dtool_MAKPUatZ 7 761 1906 1606 14 Dtool_MAKPUatZ 1 4 this 3 1773  
838 14 Dtool_MAKP_v5f 6 762 1882 0 14 Dtool_MAKP_v5f 1 4 this 3 1906  
839 14 Dtool_MAKPA_vV 7 763 1906 1606 14 Dtool_MAKPA_vV 1 4 this 3 1882  
840 14 Dtool_MAKPwqW_ 7 797 1906 1606 14 Dtool_MAKPwqW_ 1 4 temp 1 1906  
841 14 Dtool_MAKPWM0z 6 798 1754 0 14 Dtool_MAKPWM0z 0 
842 14 Dtool_MAKP6ZKx 4 799 1756 0 14 Dtool_MAKP6ZKx 1 3 out 1 1757  
843 14 Dtool_MAKP7VUC 4 800 1756 0 14 Dtool_MAKP7VUC 1 3 out 1 1757  
844 14 Dtool_MAKPCN5B 7 803 1907 1645 14 Dtool_MAKPCN5B 0 
845 14 Dtool_MAKPxIxS 4 804 1756 0 14 Dtool_MAKPxIxS 2 4 this 3 1907  8 user_mat 1 1795  
846 14 Dtool_MAKPN4l8 6 805 1795 0 14 Dtool_MAKPN4l8 1 4 this 3 1908  
847 14 Dtool_MAKPpeVf 7 806 1764 0 14 Dtool_MAKPpeVf 0 
848 14 Dtool_MAKP01XU 7 809 1910 1648 14 Dtool_MAKP01XU 0 
849 14 Dtool_MAKPlLeB 7 810 1764 0 14 Dtool_MAKPlLeB 0 
850 14 Dtool_MAKP6Ayf 7 813 1911 1651 14 Dtool_MAKP6Ayf 0 
851 14 Dtool_MAKPMg_O 7 814 1764 0 14 Dtool_MAKPMg_O 0 
852 14 Dtool_MAKP_aBv 6 817 1755 0 14 Dtool_MAKP_aBv 1 8 filename 1 1759  
853 14 Dtool_MAKPAZev 6 818 1755 0 14 Dtool_MAKPAZev 1 8 filename 1 1759  
854 14 Dtool_MAKPcDx5 7 819 1870 1416 14 Dtool_MAKPcDx5 5 8 filename 1 1759  14 alpha_filename 1 1759  25 primary_file_num_channels 1 1754  18 alpha_file_channel 1 1754  12 read_mipmaps 1 1755  
855 14 Dtool_MAKPhuDO 7 819 1870 1416 14 Dtool_MAKPhuDO 4 8 filename 1 1759  14 alpha_filename 1 1759  25 primary_file_num_channels 1 1754  18 alpha_file_channel 1 1754  
856 14 Dtool_MAKPoc5Q 7 819 1870 1416 14 Dtool_MAKPoc5Q 3 8 filename 1 1759  14 alpha_filename 1 1759  25 primary_file_num_channels 1 1754  
857 14 Dtool_MAKPRDVS 7 819 1870 1416 14 Dtool_MAKPRDVS 2 8 filename 1 1759  14 alpha_filename 1 1759  
858 14 Dtool_MAKPEsen 7 819 1870 1416 14 Dtool_MAKPEsen 3 8 filename 1 1759  25 primary_file_num_channels 1 1754  12 read_mipmaps 1 1755  
859 14 Dtool_MAKPATdl 7 819 1870 1416 14 Dtool_MAKPATdl 2 8 filename 1 1759  25 primary_file_num_channels 1 1754  
860 14 Dtool_MAKPfj8J 7 819 1870 1416 14 Dtool_MAKPfj8J 1 8 filename 1 1759  
861 14 Dtool_MAKPLm70 7 820 1870 1416 14 Dtool_MAKPLm70 2 16 filename_pattern 1 1759  12 read_mipmaps 1 1755  
862 14 Dtool_MAKP1NEf 7 820 1870 1416 14 Dtool_MAKP1NEf 1 16 filename_pattern 1 1759  
863 14 Dtool_MAKP3znI 7 821 1870 1416 14 Dtool_MAKP3znI 2 16 filename_pattern 1 1759  12 read_mipmaps 1 1755  
864 14 Dtool_MAKPty3n 7 821 1870 1416 14 Dtool_MAKPty3n 1 16 filename_pattern 1 1759  
865 14 Dtool_MAKPg89z 7 822 1870 1416 14 Dtool_MAKPg89z 1 4 size 1 1754  
866 14 Dtool_MAKPnyxl 4 823 1756 0 14 Dtool_MAKPnyxl 1 7 texture 1 1870  
867 14 Dtool_MAKPp_Lr 4 824 1756 0 14 Dtool_MAKPp_Lr 1 7 texture 1 1870  
868 14 Dtool_MAKPA290 4 825 1756 0 14 Dtool_MAKPA290 0 
869 14 Dtool_MAKPfx9C 6 826 1754 0 14 Dtool_MAKPfx9C 0 
870 14 Dtool_MAKPbY3s 4 827 1756 0 14 Dtool_MAKPbY3s 1 3 out 1 1757  
871 14 Dtool_MAKP9QHr 4 828 1756 0 14 Dtool_MAKP9QHr 1 8 filename 1 1759  
872 14 Dtool_MAKPF81s 4 829 1756 0 14 Dtool_MAKPF81s 0 
873 14 Dtool_MAKPXpQC 6 830 1755 0 14 Dtool_MAKPXpQC 0 
874 14 Dtool_MAKPOn7_ 6 831 1759 0 14 Dtool_MAKPOn7_ 0 
875 14 Dtool_MAKPA_aL 4 832 1756 0 14 Dtool_MAKPA_aL 1 3 out 1 1757  
876 14 Dtool_MAKPKfaE 7 835 1912 1672 14 Dtool_MAKPKfaE 1 4 name 1 1761  
877 14 Dtool_MAKPOLRn 7 835 1912 1672 14 Dtool_MAKPOLRn 1 4 name 1 1759  
878 14 Dtool_MAKPg4r3 4 836 1756 0 14 Dtool_MAKPg4r3 2 4 this 3 1912  6 slider 1 1797  
879 14 Dtool_MAKPTUi2 7 837 1764 0 14 Dtool_MAKPTUi2 0 
880 14 Dtool_MAKPkABz 7 840 1913 1677 14 Dtool_MAKPkABz 1 4 name 1 1759  
881 14 Dtool_MAKPi0yN 6 841 1759 0 14 Dtool_MAKPi0yN 1 4 this 3 1914  
882 14 Dtool_MAKPukq7 4 842 1756 0 14 Dtool_MAKPukq7 2 4 this 3 1913  6 matrix 1 1795  
883 14 Dtool_MAKP8sV1 7 843 1764 0 14 Dtool_MAKP8sV1 0 
884 14 Dtool_MAKPqCx_ 6 851 1755 0 14 Dtool_MAKPqCx_ 1 4 this 3 1916  
885 14 Dtool_MAKPbypD 6 852 1755 0 14 Dtool_MAKPbypD 1 4 this 3 1916  
886 14 Dtool_MAKPlySi 6 853 1754 0 14 Dtool_MAKPlySi 1 4 this 3 1916  
887 14 Dtool_MAKP7ggt 6 854 1754 0 14 Dtool_MAKP7ggt 1 4 this 3 1916  
888 14 Dtool_MAKPYSDS 7 855 1918 0 14 Dtool_MAKPYSDS 1 4 this 3 1916  
889 14 Dtool_MAKPhRqO 7 856 1764 0 14 Dtool_MAKPhRqO 0 
890 14 Dtool_MAKP_R9F 7 846 1870 1416 14 Dtool_MAKP_R9F 1 4 this 3 1919  
891 14 Dtool_MAKPyy0u 7 847 1919 1688 14 Dtool_MAKPyy0u 1 4 this 3 1870  
892 14 Dtool_MAKPVQwW 6 849 1920 0 14 Dtool_MAKPVQwW 1 4 this 3 1919  
893 14 Dtool_MAKPNNh3 7 850 1919 1688 14 Dtool_MAKPNNh3 1 4 this 3 1920  
232
1689 9 GeomEnums 141313 9 GeomEnums 9 GeomEnums 0 0 0 0 894 0 0 0 0 0 7 1690 1691 1692 1693 1694 1695 1696 400
////////////////////////////////////////////////////////////////////
//       Class : GeomEnums
// Description : This class exists just to provide scoping for the
//               various enumerated types used by Geom,
//               GeomVertexData, GeomVertexArrayData, GeomPrimitive,
//               and other related classes.
////////////////////////////////////////////////////////////////////

1690 9 UsageHint 794624 20 GeomEnums::UsageHint 20 GeomEnums::UsageHint 1689 0 0 0 0 0 0 0 0 5 9 UH_client 20 GeomEnums::UH_client 0 9 UH_stream 20 GeomEnums::UH_stream 1 10 UH_dynamic 21 GeomEnums::UH_dynamic 2 9 UH_static 20 GeomEnums::UH_static 3 14 UH_unspecified 25 GeomEnums::UH_unspecified 4 0 382
// The usage hint describes to the rendering backend how often the
// data in question will be modified and/or rendered.  It allows the
// backend to make appropriate choices about what part of memory the
// data should be stored in.
// The hint is provided as a performance optimization only, and does
// not constrain actual usage; although it may be an important
// optimization.

1691 13 GeomRendering 794624 24 GeomEnums::GeomRendering 24 GeomEnums::GeomRendering 1689 0 0 0 0 0 0 0 0 21 16 GR_indexed_point 27 GeomEnums::GR_indexed_point 1 16 GR_indexed_other 27 GeomEnums::GR_indexed_other 65536 15 GR_indexed_bits 26 GeomEnums::GR_indexed_bits 65537 8 GR_point 19 GeomEnums::GR_point 2 21 GR_point_uniform_size 32 GeomEnums::GR_point_uniform_size 4 17 GR_per_point_size 28 GeomEnums::GR_per_point_size 8 20 GR_point_perspective 31 GeomEnums::GR_point_perspective 16 21 GR_point_aspect_ratio 32 GeomEnums::GR_point_aspect_ratio 32 14 GR_point_scale 25 GeomEnums::GR_point_scale 64 15 GR_point_rotate 26 GeomEnums::GR_point_rotate 128 15 GR_point_sprite 26 GeomEnums::GR_point_sprite 256 26 GR_point_sprite_tex_matrix 37 GeomEnums::GR_point_sprite_tex_matrix 512 13 GR_point_bits 24 GeomEnums::GR_point_bits 1022 17 GR_triangle_strip 28 GeomEnums::GR_triangle_strip 1024 15 GR_triangle_fan 26 GeomEnums::GR_triangle_fan 2048 13 GR_line_strip 24 GeomEnums::GR_line_strip 4096 17 GR_composite_bits 28 GeomEnums::GR_composite_bits 7168 20 GR_flat_first_vertex 31 GeomEnums::GR_flat_first_vertex 8192 19 GR_flat_last_vertex 30 GeomEnums::GR_flat_last_vertex 16384 19 GR_shade_model_bits 30 GeomEnums::GR_shade_model_bits 24576 24 GR_texcoord_light_vector 35 GeomEnums::GR_texcoord_light_vector 32768 0 265
// This type specifies a number of bits that are used to represent
// the rendering requirements of a particular Geom, as well as the
// rendering capabilities of the GSG.  The difference between the
// two indicates whether the Geom needs to be munged for the GSG.

1692 10 ShadeModel 794624 21 GeomEnums::ShadeModel 21 GeomEnums::ShadeModel 1689 0 0 0 0 0 0 0 0 4 10 SM_uniform 21 GeomEnums::SM_uniform 0 9 SM_smooth 20 GeomEnums::SM_smooth 1 20 SM_flat_first_vertex 31 GeomEnums::SM_flat_first_vertex 2 19 SM_flat_last_vertex 30 GeomEnums::SM_flat_last_vertex 3 0 235
// The shade model specifies whether the per-vertex colors and
// normals indexed by a given primitive truly represent per-vertex
// colors and normals, or whether they actually represent
// per-triangle flat-shaded colors and normals.

1693 13 PrimitiveType 794624 24 GeomEnums::PrimitiveType 24 GeomEnums::PrimitiveType 1689 0 0 0 0 0 0 0 0 4 7 PT_none 18 GeomEnums::PT_none 0 11 PT_polygons 22 GeomEnums::PT_polygons 1 8 PT_lines 19 GeomEnums::PT_lines 2 9 PT_points 20 GeomEnums::PT_points 3 0 165
// The primitive type represents the core primitive type of a
// particular GeomPrimitive.  It's used for determining what kind of
// antialiasing should be enabled.

1694 11 NumericType 794624 22 GeomEnums::NumericType 22 GeomEnums::NumericType 1689 0 0 0 0 0 0 0 0 6 8 NT_uint8 19 GeomEnums::NT_uint8 0 9 NT_uint16 20 GeomEnums::NT_uint16 1 9 NT_uint32 20 GeomEnums::NT_uint32 2 14 NT_packed_dcba 25 GeomEnums::NT_packed_dcba 3 14 NT_packed_dabc 25 GeomEnums::NT_packed_dabc 4 10 NT_float32 21 GeomEnums::NT_float32 5 0 120
// The numeric type determines what physical representation is used
// to encode a numeric value within the vertex data.

1695 8 Contents 794624 19 GeomEnums::Contents 19 GeomEnums::Contents 1689 0 0 0 0 0 0 0 0 8 7 C_other 18 GeomEnums::C_other 0 7 C_point 18 GeomEnums::C_point 1 12 C_clip_point 23 GeomEnums::C_clip_point 2 8 C_vector 19 GeomEnums::C_vector 3 10 C_texcoord 21 GeomEnums::C_texcoord 4 7 C_color 18 GeomEnums::C_color 5 7 C_index 18 GeomEnums::C_index 6 13 C_morph_delta 24 GeomEnums::C_morph_delta 7 0 194
// The contents determine the semantic meaning of a numeric value
// within the vertex data.  This is also used to determine what
// automatic transforms might be applied to the various columns.

1696 13 AnimationType 794624 24 GeomEnums::AnimationType 24 GeomEnums::AnimationType 1689 0 0 0 0 0 0 0 0 3 7 AT_none 18 GeomEnums::AT_none 0 8 AT_panda 19 GeomEnums::AT_panda 1 11 AT_hardware 22 GeomEnums::AT_hardware 2 0 86
// The type of animation data that is represented by a particular
// GeomVertexFormat.

1697 23 GeomVertexAnimationSpec 141313 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 1 895 904 0 8 896 897 898 899 900 901 902 903 0 1 0 1689 0 0 0 0 881
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexAnimationSpec
// Description : This object describes how the vertex animation, if
//               any, represented in a GeomVertexData is encoded.
//
//               Vertex animation includes soft-skinned skeleton
//               animation and morphs (blend shapes), and might be
//               performed on the CPU by Panda, or passed down to the
//               graphics backed to be performed on the hardware
//               (depending on the hardware's advertised
//               capabilities).
//
//               Changing this setting doesn't by itself change the
//               way the animation is actually performed; this just
//               specifies how the vertices are set up to be animated.
////////////////////////////////////////////////////////////////////

1698 12 InternalName 75777 12 InternalName 12 InternalName 0 0 0 0 0 0 34 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 0 1 0 1699 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

1699 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1700 16 GeomVertexColumn 26625 16 GeomVertexColumn 16 GeomVertexColumn 0 0 0 1 939 941 0 13 940 942 943 944 945 946 947 948 949 950 951 952 953 0 1 0 1689 0 0 0 0 441
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexColumn
// Description : This defines how a single column is interleaved
//               within a vertex array stored within a Geom.  The
//               GeomVertexArrayFormat class maintains a list of these
//               to completely define a particular array structure.
////////////////////////////////////////////////////////////////////

1701 21 GeomVertexArrayFormat 26625 21 GeomVertexArrayFormat 21 GeomVertexArrayFormat 0 0 0 1 958 960 0 18 959 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 0 2 3 1699 954 955 3 1689 956 957 0 0 1094
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexArrayFormat
// Description : This describes the structure of a single array within
//               a Geom data.  See GeomVertexFormat for the parent
//               class which collects together all of the individual
//               GeomVertexArrayFormat objects.
//
//               A particular array may include any number of standard
//               or user-defined columns.  All columns consist of a
//               sequence of one or more numeric values, packed in any
//               of a variety of formats; the semantic meaning of each
//               column is defined in general with its contents
//               member, and in particular by its name.  The standard
//               array types used most often are named "vertex",
//               "normal", "texcoord", and "color"; other kinds of
//               data may be piggybacked into the data record simply
//               by choosing a unique name.
////////////////////////////////////////////////////////////////////

1702 16 GeomVertexFormat 26625 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 1 982 984 0 46 983 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 0 2 3 1699 978 979 3 1689 980 981 0 0 1366
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexFormat
// Description : This class defines the physical layout of the vertex
//               data stored within a Geom.  The layout consists of a
//               list of named columns, each of which has a numeric
//               type and a size.
//
//               The columns are typically interleaved within a single
//               array, but they may also be distributed among
//               multiple different arrays; at the extreme, each
//               column may be alone within its own array (which
//               amounts to a parallel-array definition).
//
//               Thus, a GeomVertexFormat is really a list of
//               GeomVertexArrayFormats, each of which contains a list
//               of columns.  However, a particular column name should
//               not appear more than once in the format, even between
//               different arrays.
//
//               There are a handful of standard pre-defined
//               GeomVertexFormat objects, or you may define your own
//               as needed.  You may record any combination of
//               standard and/or user-defined columns in your custom
//               GeomVertexFormat constructions.
////////////////////////////////////////////////////////////////////

1703 19 GeomVertexArrayData 26625 19 GeomVertexArrayData 19 GeomVertexArrayData 0 0 0 1 1034 1036 0 18 1035 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 0 2 3 1699 1030 1031 3 1689 1032 1033 0 0 1052
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexArrayData
// Description : This is the data for one array of a GeomVertexData
//               structure.  Many GeomVertexData structures will only
//               define one array, with all data elements interleaved
//               (DirectX 8.0 and before insisted on this format);
//               some will define multiple arrays.  
//
//               DirectX calls this concept of one array a "stream".
//               It also closely correlates with the concept of a
//               vertex buffer.
//
//               This object is just a block of data.  In general, you
//               should not be directly messing with this object from
//               application code.  See GeomVertexData for the
//               organizing structure, and see
//               GeomVertexReader/Writer/Rewriter for high-level tools
//               to manipulate the actual vertex data.
////////////////////////////////////////////////////////////////////

1704 16 GeomCacheManager 43009 16 GeomCacheManager 16 GeomCacheManager 0 0 0 0 0 0 4 1054 1055 1056 1057 0 0 0 0 998
////////////////////////////////////////////////////////////////////
//       Class : GeomCacheManager
// Description : This is used to keep track of, and limit the size of,
//               the cache of munged vertices, which would otherwise
//               be distributed through all of the GeomVertexData
//               objects in the system.
//
//               The actual data in the cache is not stored here, but
//               rather it is distributed among the various
//               GeomVertexData source objects.  This allows the cache
//               data to propagate through the multiprocess pipeline.
//
//               This structure actually caches any of a number of
//               different types of pointers, and mixes them all up in
//               the same LRU cache list.  Some of them (such as
//               GeomMunger) are reference-counted here in the cache;
//               most are not.
////////////////////////////////////////////////////////////////////

1705 15 VertexTransform 75777 15 VertexTransform 15 VertexTransform 0 0 0 0 0 0 9 1058 1059 1060 1061 1062 1063 1064 1065 1066 0 1 0 1699 0 0 0 0 558
////////////////////////////////////////////////////////////////////
//       Class : VertexTransform
// Description : This is an abstract base class that holds a pointer
//               to some transform, computed in some arbitrary way,
//               that is to be applied to vertices during rendering.
//               This is used to implement soft-skinned and animated
//               vertices.  Derived classes will define how the
//               transform is actually computed.
////////////////////////////////////////////////////////////////////

1706 14 TransformTable 75777 14 TransformTable 14 TransformTable 0 0 0 1 1067 0 0 11 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 0 1 0 1699 0 0 0 0 593
////////////////////////////////////////////////////////////////////
//       Class : TransformTable
// Description : Stores the total set of VertexTransforms that the
//               vertices in a particular GeomVertexData object might
//               depend on.
//
//               This structure is used for a GeomVertexData set up to
//               compute its dynamic vertices on the graphics card.
//               See TransformBlendTable for one set up to compute
//               its dynamic vertices on the CPU.
////////////////////////////////////////////////////////////////////

1707 14 TransformBlend 26625 14 TransformBlend 14 TransformBlend 0 0 0 1 1079 1081 0 22 1080 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : TransformBlend
// Description : This defines a single entry in a
//               TransformBlendTable.  It represents a unique
//               combination of VertexTransform pointers and blend
//               amounts.
////////////////////////////////////////////////////////////////////

1708 19 TransformBlendTable 75777 19 TransformBlendTable 19 TransformBlendTable 0 0 0 1 1103 0 0 11 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 0 1 0 1699 0 0 0 0 867
////////////////////////////////////////////////////////////////////
//       Class : TransformBlendTable
// Description : This structure collects together the different
//               combinations of transforms and blend amounts used by
//               a GeomVertexData, to facilitate computing dynamic
//               vertices on the CPU at runtime.  Each vertex has a
//               pointer to exactly one of the entries in this table,
//               and each entry defines a number of transform/blend
//               combinations.
//
//               This structure is used for a GeomVertexData set up to
//               compute its dynamic vertices on the CPU.  See
//               TransformTable for one set up to compute its
//               dynamic vertices on the graphics card.
////////////////////////////////////////////////////////////////////

1709 12 VertexSlider 75777 12 VertexSlider 12 VertexSlider 0 0 0 0 0 0 6 1115 1116 1117 1118 1119 1120 0 1 0 1699 0 0 0 0 607
////////////////////////////////////////////////////////////////////
//       Class : VertexSlider
// Description : This is an abstract base class that retains some
//               slider value, which is a linear value that typically
//               ranges from 0.0 to 1.0, and is used to control the
//               animation of morphs (blend shapes).
//
//               It is similar to VertexTransform, which keeps a full
//               4x4 transform matrix, but the VertexSlider only keeps
//               a single float value.
////////////////////////////////////////////////////////////////////

1710 11 SliderTable 75777 11 SliderTable 11 SliderTable 0 0 0 1 1121 0 0 14 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 0 1 0 1699 0 0 0 0 696
////////////////////////////////////////////////////////////////////
//       Class : SliderTable
// Description : Stores the total set of VertexSliders that the
//               vertices in a particular GeomVertexData object might
//               depend on.
//
//               This is similar to a TransformTable, but it stores
//               VertexSliders instead of VertexTransforms, and it
//               stores them by name instead of by index number.
//               Also, it is only used when animating vertices on the
//               CPU, since GPU's don't support morphs at this point
//               in time.
////////////////////////////////////////////////////////////////////

1711 14 GeomVertexData 26625 14 GeomVertexData 14 GeomVertexData 0 0 0 1 1140 1142 0 41 1141 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 0 2 3 1699 1136 1137 3 1689 1138 1139 0 0 1574
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexData
// Description : This defines the actual numeric vertex data stored in
//               a Geom, in the structure defined by a particular
//               GeomVertexFormat object.
//
//               The data consists of one or more arrays, each of
//               which in turn consists of a series of rows, one per
//               vertex.  All arrays should have the same number of
//               rows; each vertex is defined by the column data from
//               a particular row across all arrays.
//
//               Often, there will be only one array per Geom, and the
//               various columns defined in the GeomVertexFormat will
//               be interleaved within that array.  However, it is
//               also possible to have multiple different arrays, with
//               a certain subset of the total columns defined in each
//               array.
//
//               However the data is distributed, the effect is of a
//               single table of vertices, where each vertex is
//               represented by one row of the table.
//
//               In general, application code should not attempt to
//               directly manipulate the vertex data through this
//               structure; instead, use the GeomVertexReader,
//               GeomVertexWriter, and GeomVertexRewriter objects to
//               read and write vertex data at a high level.
////////////////////////////////////////////////////////////////////

1712 13 GeomPrimitive 26625 13 GeomPrimitive 13 GeomPrimitive 0 0 0 0 1188 0 47 1187 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 0 2 3 1699 1183 1184 3 1689 1185 1186 0 0 1203
////////////////////////////////////////////////////////////////////
//       Class : GeomPrimitive
// Description : This is an abstract base class for a family of
//               classes that represent the fundamental geometry
//               primitives that may be stored in a Geom.
//
//               They all have in common the fact that they are
//               defined by tables of vertex data stored in a
//               GeomVertexData object.  Each GeomPrimitive object
//               contains an ordered list of integers, which index
//               into the vertex array defined by the GeomVertexData
//               and define the particular vertices of the
//               GeomVertexData that are used for this primitive.
//
//               The meaning of a given arrangement of vertices is
//               defined by each individual primitive type; for
//               instance, a GeomTriangle renders a triangle from each
//               three consecutive vertices, while a GeomTriangleStrip
//               renders a strip of (n - 2) connected triangles from
//               each sequence of n vertices.
////////////////////////////////////////////////////////////////////

1713 12 TextureStage 75777 12 TextureStage 12 TextureStage 0 0 0 1 1235 0 0 44 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 0 1 0 1699 0 0 0 4 1714 1715 1716 1717 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

1714 4 Mode 794624 18 TextureStage::Mode 18 TextureStage::Mode 1713 0 0 0 0 0 0 0 0 7 10 M_modulate 24 TextureStage::M_modulate 0 7 M_decal 21 TextureStage::M_decal 1 7 M_blend 21 TextureStage::M_blend 2 9 M_replace 23 TextureStage::M_replace 3 5 M_add 19 TextureStage::M_add 4 9 M_combine 23 TextureStage::M_combine 5 19 M_blend_color_scale 33 TextureStage::M_blend_color_scale 6 0 0

1715 11 CombineMode 794624 25 TextureStage::CombineMode 25 TextureStage::CombineMode 1713 0 0 0 0 0 0 0 0 9 12 CM_undefined 26 TextureStage::CM_undefined 0 10 CM_replace 24 TextureStage::CM_replace 1 11 CM_modulate 25 TextureStage::CM_modulate 2 6 CM_add 20 TextureStage::CM_add 3 13 CM_add_signed 27 TextureStage::CM_add_signed 4 14 CM_interpolate 28 TextureStage::CM_interpolate 5 11 CM_subtract 25 TextureStage::CM_subtract 6 11 CM_dot3_rgb 25 TextureStage::CM_dot3_rgb 7 12 CM_dot3_rgba 26 TextureStage::CM_dot3_rgba 8 0 0

1716 13 CombineSource 794624 27 TextureStage::CombineSource 27 TextureStage::CombineSource 1713 0 0 0 0 0 0 0 0 7 12 CS_undefined 26 TextureStage::CS_undefined 0 10 CS_texture 24 TextureStage::CS_texture 1 11 CS_constant 25 TextureStage::CS_constant 2 16 CS_primary_color 30 TextureStage::CS_primary_color 3 11 CS_previous 25 TextureStage::CS_previous 4 23 CS_constant_color_scale 37 TextureStage::CS_constant_color_scale 5 20 CS_last_saved_result 34 TextureStage::CS_last_saved_result 6 0 0

1717 14 CombineOperand 794624 28 TextureStage::CombineOperand 28 TextureStage::CombineOperand 1713 0 0 0 0 0 0 0 0 5 12 CO_undefined 26 TextureStage::CO_undefined 0 12 CO_src_color 26 TextureStage::CO_src_color 1 22 CO_one_minus_src_color 36 TextureStage::CO_one_minus_src_color 2 12 CO_src_alpha 26 TextureStage::CO_src_alpha 3 22 CO_one_minus_src_alpha 36 TextureStage::CO_one_minus_src_alpha 4 0 0

1718 4 Geom 26625 4 Geom 4 Geom 0 0 0 1 1284 1286 0 44 1285 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 0 2 3 1699 1280 1281 3 1689 1282 1283 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

1719 9 GeomLines 75777 9 GeomLines 9 GeomLines 0 0 0 1 1330 1188 0 1 1331 0 1 0 1712 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : GeomLines
// Description : Defines a series of disconnected line segments.
////////////////////////////////////////////////////////////////////

1720 14 GeomLinestrips 75777 14 GeomLinestrips 14 GeomLinestrips 0 0 0 1 1332 1188 0 1 1333 0 1 0 1712 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : GeomLinestrips
// Description : Defines a series of line strips.
////////////////////////////////////////////////////////////////////

1721 10 GeomPoints 75777 10 GeomPoints 10 GeomPoints 0 0 0 1 1334 1188 0 1 1335 0 1 0 1712 0 0 0 0 223
////////////////////////////////////////////////////////////////////
//       Class : GeomPoints
// Description : Defines a series of disconnected points.
////////////////////////////////////////////////////////////////////

1722 13 GeomTriangles 75777 13 GeomTriangles 13 GeomTriangles 0 0 0 1 1336 1188 0 1 1337 0 1 0 1712 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : GeomTriangles
// Description : Defines a series of disconnected triangles.
////////////////////////////////////////////////////////////////////

1723 11 GeomTrifans 75777 11 GeomTrifans 11 GeomTrifans 0 0 0 1 1338 1188 0 1 1339 0 1 0 1712 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : GeomTrifans
// Description : Defines a series of triangle fans.
////////////////////////////////////////////////////////////////////

1724 13 GeomTristrips 75777 13 GeomTristrips 13 GeomTristrips 0 0 0 1 1340 1188 0 1 1341 0 1 0 1712 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : GeomTristrips
// Description : Defines a series of triangle strips.
////////////////////////////////////////////////////////////////////

1725 16 GeomVertexReader 26625 16 GeomVertexReader 16 GeomVertexReader 0 0 0 1 1342 1344 0 20 1343 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 0 1 0 1689 0 0 0 0 1792
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexReader
// Description : This object provides a high-level interface for
//               quickly reading a sequence of numeric values from a
//               vertex table. 
//
//               It is particularly optimized for reading a single
//               column of data values for a series of vertices,
//               without changing columns between each number.
//               Although you can also use one GeomVertexReader to
//               read across the columns if it is convenient, by
//               calling set_column() repeatedly at each vertex, it is
//               faster to read down the columns, and to use a
//               different GeomVertexReader for each column.
//
//               Note that a GeomVertexReader does not keep a
//               reference count to the actual vertex data buffer (it
//               grabs the current data buffer from the GeomVertexData
//               whenever set_column() is called).  This means that it
//               is important not to keep a GeomVertexReader object
//               around over a long period of time in which the data
//               buffer is likely to be deallocated; it is intended
//               for making a quick pass over the data in one session.
//
//               It also means that you should create any
//               GeomVertexWriters *before* creating GeomVertexReaders
//               on the same data, since the writer itself might cause
//               the vertex buffer to be deallocated.  Better yet, use
//               a GeomVertexRewriter if you are going to create both
//               of them anyway.
////////////////////////////////////////////////////////////////////

1726 16 GeomVertexWriter 26625 16 GeomVertexWriter 16 GeomVertexWriter 0 0 0 1 1364 1366 0 28 1365 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 0 1 0 1689 0 0 0 0 2541
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexWriter
// Description : This object provides a high-level interface for
//               quickly writing a sequence of numeric values from a
//               vertex table. 
//
//               This object can be used both to replace existing
//               vertices in the table, or to extend the table with
//               new vertices.  The set_data*() family of methods can
//               only be used to replace existing data; it is an error
//               to allow these to run past the end of the data.  The
//               add_data*() family of methods, on the other hand, can
//               be used to replace existing data or add new data; if
//               you call set_row() into the middle of existing
//               data the add_data*() methods will behave like the
//               corresponding set_data*(), but if they run past the
//               end of existing data they will quietly add new
//               vertices.
//
//               Like GeomVertexReader, the writer is particularly
//               optimized for writing a single column of data values
//               for a series of vertices, without changing columns
//               between each number.  Although you can also use one
//               GeomVertexWriter to write across the columns if it is
//               convenient, by calling set_column() repeatedly at
//               each vertex, it is faster to write down the columns,
//               and to use a different GeomVertexWriter for each
//               column.
//
//               Note that, like a GeomVertexReader, a
//               GeomVertexWriter does not keep a reference count to
//               the actual vertex data buffer.  This means that it is
//               important not to keep a GeomVertexWriter object
//               around over a long period of time in which the data
//               buffer is likely to be deallocated; it is intended
//               for making a quick pass over the data in one session.
//
//               It also means that you should create any
//               GeomVertexWriters *before* creating GeomVertexReaders
//               on the same data, since the writer itself might cause
//               the vertex buffer to be deallocated.  Better yet, use
//               a GeomVertexRewriter if you are going to create both
//               of them anyway.
////////////////////////////////////////////////////////////////////

1727 18 GeomVertexRewriter 26625 18 GeomVertexRewriter 18 GeomVertexRewriter 0 0 0 1 1398 1400 0 11 1399 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 0 2 3 1726 1394 1395 3 1725 1396 1397 0 0 988
////////////////////////////////////////////////////////////////////
//       Class : GeomVertexRewriter
// Description : This object provides the functionality of both a
//               GeomVertexReader and a GeomVertexWriter, combined
//               together into one convenient package.  It is designed
//               for making a single pass over a GeomVertexData
//               object, modifying rows as it goes.
//
//               Although it doesn't provide any real performance
//               benefit over using a separate reader and writer on
//               the same data, it should probably be used in
//               preference to a separate reader and writer, because
//               it makes an effort to manage the reference counts
//               properly between the reader and the writer to avoid
//               accidentally dereferencing either array while
//               recopying.
////////////////////////////////////////////////////////////////////

1728 7 Texture 26625 7 Texture 7 Texture 0 0 0 1 1415 1416 0 107 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 0 2 3 1699 1411 1412 3 1729 1413 1414 0 6 1730 1731 1732 1733 1734 1735 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

1729 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1730 11 TextureType 794624 20 Texture::TextureType 20 Texture::TextureType 1728 0 0 0 0 0 0 0 0 4 13 TT_1d_texture 22 Texture::TT_1d_texture 0 13 TT_2d_texture 22 Texture::TT_2d_texture 1 13 TT_3d_texture 22 Texture::TT_3d_texture 2 11 TT_cube_map 20 Texture::TT_cube_map 3 0 0

1731 13 ComponentType 794624 22 Texture::ComponentType 22 Texture::ComponentType 1728 0 0 0 0 0 0 0 0 3 15 T_unsigned_byte 24 Texture::T_unsigned_byte 0 16 T_unsigned_short 25 Texture::T_unsigned_short 1 7 T_float 16 Texture::T_float 2 0 0

1732 6 Format 794624 15 Texture::Format 15 Texture::Format 1728 0 0 0 0 0 0 0 0 21 13 F_color_index 22 Texture::F_color_index 0 15 F_stencil_index 24 Texture::F_stencil_index 1 17 F_depth_component 26 Texture::F_depth_component 2 5 F_red 14 Texture::F_red 3 7 F_green 16 Texture::F_green 4 6 F_blue 15 Texture::F_blue 5 7 F_alpha 16 Texture::F_alpha 6 5 F_rgb 14 Texture::F_rgb 7 6 F_rgb5 15 Texture::F_rgb5 8 6 F_rgb8 15 Texture::F_rgb8 9 7 F_rgb12 16 Texture::F_rgb12 10 8 F_rgb332 17 Texture::F_rgb332 11 6 F_rgba 15 Texture::F_rgba 12 6 F_rgbm 15 Texture::F_rgbm 13 7 F_rgba4 16 Texture::F_rgba4 14 7 F_rgba5 16 Texture::F_rgba5 15 7 F_rgba8 16 Texture::F_rgba8 16 8 F_rgba12 17 Texture::F_rgba12 17 11 F_luminance 20 Texture::F_luminance 18 17 F_luminance_alpha 26 Texture::F_luminance_alpha 19 21 F_luminance_alphamask 30 Texture::F_luminance_alphamask 20 0 0

1733 10 FilterType 794624 19 Texture::FilterType 19 Texture::FilterType 1728 0 0 0 0 0 0 0 0 9 10 FT_nearest 19 Texture::FT_nearest 0 9 FT_linear 18 Texture::FT_linear 1 25 FT_nearest_mipmap_nearest 34 Texture::FT_nearest_mipmap_nearest 2 24 FT_linear_mipmap_nearest 33 Texture::FT_linear_mipmap_nearest 3 24 FT_nearest_mipmap_linear 33 Texture::FT_nearest_mipmap_linear 4 23 FT_linear_mipmap_linear 32 Texture::FT_linear_mipmap_linear 5 9 FT_shadow 18 Texture::FT_shadow 6 10 FT_default 19 Texture::FT_default 7 10 FT_invalid 19 Texture::FT_invalid 8 0 0

1734 8 WrapMode 794624 17 Texture::WrapMode 17 Texture::WrapMode 1728 0 0 0 0 0 0 0 0 6 8 WM_clamp 17 Texture::WM_clamp 0 9 WM_repeat 18 Texture::WM_repeat 1 9 WM_mirror 18 Texture::WM_mirror 2 14 WM_mirror_once 23 Texture::WM_mirror_once 3 15 WM_border_color 24 Texture::WM_border_color 4 10 WM_invalid 19 Texture::WM_invalid 5 0 0

1735 15 CompressionMode 794624 24 Texture::CompressionMode 24 Texture::CompressionMode 1728 0 0 0 0 0 0 0 0 9 10 CM_default 19 Texture::CM_default 0 6 CM_off 15 Texture::CM_off 1 5 CM_on 14 Texture::CM_on 2 7 CM_fxt1 16 Texture::CM_fxt1 3 7 CM_dxt1 16 Texture::CM_dxt1 4 7 CM_dxt2 16 Texture::CM_dxt2 5 7 CM_dxt3 16 Texture::CM_dxt3 6 7 CM_dxt4 16 Texture::CM_dxt4 7 7 CM_dxt5 16 Texture::CM_dxt5 8 0 0

1736 15 ShaderExpansion 75777 15 ShaderExpansion 15 ShaderExpansion 0 0 0 0 0 0 13 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 0 1 0 1737 0 0 0 0 507
////////////////////////////////////////////////////////////////////
//       Class : ShaderExpansion
//      Summary: A shader can contain context-sensitive macros.
//               A ShaderExpansion is the output you get when you
//               run the macro preprocessor on a shader.
//               The ShaderExpansion contains the shader's 
//               macroexpanded text, and a map of ShaderContext
//               objects.
////////////////////////////////////////////////////////////////////

1737 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1738 4 Lens 141313 4 Lens 4 Lens 0 0 0 0 1599 0 62 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 0 1 0 1699 0 0 0 2 1739 1740 688
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node
//               (defined in sgraph), which defines the fundamental
//               interface to point-of-view for rendering.  Lenses are
//               also used in other contexts, however; for instance, a
//               Spotlight is also defined using a lens.
////////////////////////////////////////////////////////////////////

1739 13 StereoChannel 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 1738 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0 7 SC_left 13 Lens::SC_left 1 8 SC_right 14 Lens::SC_right 2 9 SC_stereo 15 Lens::SC_stereo 3 0 0

1740 11 FromCorners 794624 17 Lens::FromCorners 17 Lens::FromCorners 1738 0 0 0 0 0 0 0 0 6 7 FC_roll 13 Lens::FC_roll 1 15 FC_camera_plane 21 Lens::FC_camera_plane 2 11 FC_off_axis 17 Lens::FC_off_axis 4 15 FC_aspect_ratio 21 Lens::FC_aspect_ratio 8 8 FC_shear 14 Lens::FC_shear 16 11 FC_keystone 17 Lens::FC_keystone 32 0 183
// These flags are passed in as the last parameter to control the
// behavior of set_frustum_from_corners().  See the documentation
// for that method for an explanation of each flag.

1741 8 Material 26625 8 Material 8 Material 0 0 0 1 1604 1606 0 30 1605 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 0 2 3 1699 1600 1601 3 1729 1602 1603 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : Material
// Description : Defines the way an object appears in the presence of
//               lighting.  A material is only necessary if lighting
//               is to be enabled; otherwise, the material isn't used.
////////////////////////////////////////////////////////////////////

1742 12 MaterialPool 141313 12 MaterialPool 12 MaterialPool 0 0 0 0 1640 0 4 1636 1637 1638 1639 0 0 0 0 1029
////////////////////////////////////////////////////////////////////
//       Class : MaterialPool
// Description : The MaterialPool (there is only one in the universe)
//               serves to unify different pointers to the same
//               Material, so we do not (a) waste memory with many
//               different Material objects that are all equivalent,
//               and (b) waste time switching the graphics engine
//               between different Material states that are really the
//               same thing.
//
//               The idea is to create a temporary Material
//               representing the lighting state you want to apply,
//               then call get_material(), passing in your temporary
//               Material.  The return value will either be a new
//               Material object, or it may be the the same object you
//               supplied; in either case, it will have the same
//               value.
////////////////////////////////////////////////////////////////////

1743 10 MatrixLens 141313 10 MatrixLens 10 MatrixLens 0 0 0 1 1641 1645 0 3 1642 1643 1644 0 1 0 1738 0 0 0 0 504
////////////////////////////////////////////////////////////////////
//       Class : MatrixLens
// Description : A completely generic linear lens.  This is provided
//               for the benefit of low-level code that wants to
//               specify a perspective or orthographic frustum via an
//               explicit projection matrix, but not mess around with
//               fov's or focal lengths or any of that nonsense.
////////////////////////////////////////////////////////////////////

1744 16 OrthographicLens 141313 16 OrthographicLens 16 OrthographicLens 0 0 0 1 1646 1648 0 1 1647 0 1 0 1738 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : OrthographicLens
// Description : An orthographic lens.  Although this kind of lens is
//               linear, like a PerspectiveLens, it doesn't respect
//               field-of-view or focal length parameters, and
//               adjusting these will have no effect.  Instead, its
//               field of view is controlled by adjusting the
//               film_size; the orthographic lens represents a planar
//               projection onto its imaginary film of the specified
//               size, hanging in space.
////////////////////////////////////////////////////////////////////

1745 15 PerspectiveLens 141313 15 PerspectiveLens 15 PerspectiveLens 0 0 0 1 1649 1651 0 1 1650 0 1 0 1738 0 0 0 0 229
////////////////////////////////////////////////////////////////////
//       Class : PerspectiveLens
// Description : A perspective-type lens: a normal camera.
////////////////////////////////////////////////////////////////////

1746 11 TexturePool 141313 11 TexturePool 11 TexturePool 0 0 0 0 1668 0 16 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 0 0 0 0 470
////////////////////////////////////////////////////////////////////
//       Class : TexturePool
// Description : This is the preferred interface for loading textures
//               from image files.  It unifies all references to the
//               same filename, so that multiple models that reference
//               the same textures don't waste texture memory
//               unnecessarily.
////////////////////////////////////////////////////////////////////

1747 16 UserVertexSlider 141313 16 UserVertexSlider 16 UserVertexSlider 0 0 0 1 1669 1672 0 2 1670 1671 0 1 0 1709 0 0 0 0 390
////////////////////////////////////////////////////////////////////
//       Class : UserVertexSlider
// Description : This is a specialization on VertexSlider that
//               allows the user to specify any arbitrary slider
//               valie he likes.  This is rarely used except for
//               testing.
////////////////////////////////////////////////////////////////////

1748 19 UserVertexTransform 141313 19 UserVertexTransform 19 UserVertexTransform 0 0 0 1 1673 1677 0 3 1674 1675 1676 0 1 0 1705 0 0 0 0 400
////////////////////////////////////////////////////////////////////
//       Class : UserVertexTransform
// Description : This is a specialization on VertexTransform that
//               allows the user to specify any arbitrary transform
//               matrix he likes.  This is rarely used except for
//               testing.
////////////////////////////////////////////////////////////////////

1749 12 VideoTexture 141313 12 VideoTexture 12 VideoTexture 0 0 0 0 1688 0 6 1682 1683 1684 1685 1686 1687 0 2 3 1728 1678 1679 3 1750 1680 1681 0 0 480
////////////////////////////////////////////////////////////////////
//       Class : VideoTexture
// Description : The base class for a family of animated Textures that
//               take their input from a video source, such as a movie
//               file.  These Textures may be stopped, started,
//               etc. using the AnimInterface controls, similar to an
//               animated character.
////////////////////////////////////////////////////////////////////

1750 13 AnimInterface 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

1751 25 GeomVertexAnimationSpec * 8576 25 GeomVertexAnimationSpec * 25 GeomVertexAnimationSpec * 0 0 1697 0 0 0 0 0 0 0 0 0

1752 31 GeomVertexAnimationSpec const * 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 1753 0 0 0 0 0 0 0 0 0

1753 29 GeomVertexAnimationSpec const 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 1697 0 0 0 0 0 0 0 0 0

1754 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

1755 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

1756 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

1757 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1758 0 0 0 0 0 0 0 0 0

1758 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

1759 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

1760 14 InternalName * 8576 14 InternalName * 14 InternalName * 0 0 1698 0 0 0 0 0 0 0 0 0

1761 20 InternalName const * 8576 20 InternalName const * 20 InternalName const * 0 0 1762 0 0 0 0 0 0 0 0 0

1762 18 InternalName const 8832 18 InternalName const 18 InternalName const 0 0 1698 0 0 0 0 0 0 0 0 0

1763 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1764 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1763 0 0 0 0 0 0 0 0 0

1765 24 GeomVertexColumn const * 8576 24 GeomVertexColumn const * 24 GeomVertexColumn const * 0 0 1766 0 0 0 0 0 0 0 0 0

1766 22 GeomVertexColumn const 8832 22 GeomVertexColumn const 22 GeomVertexColumn const 0 0 1700 0 0 0 0 0 0 0 0 0

1767 18 GeomVertexColumn * 8576 18 GeomVertexColumn * 18 GeomVertexColumn * 0 0 1700 0 0 0 0 0 0 0 0 0

1768 23 GeomVertexArrayFormat * 8576 23 GeomVertexArrayFormat * 23 GeomVertexArrayFormat * 0 0 1701 0 0 0 0 0 0 0 0 0

1769 29 GeomVertexArrayFormat const * 8576 29 GeomVertexArrayFormat const * 29 GeomVertexArrayFormat const * 0 0 1770 0 0 0 0 0 0 0 0 0

1770 27 GeomVertexArrayFormat const 8832 27 GeomVertexArrayFormat const 27 GeomVertexArrayFormat const 0 0 1701 0 0 0 0 0 0 0 0 0

1771 27 GeomVertexArrayData const * 8576 27 GeomVertexArrayData const * 27 GeomVertexArrayData const * 0 0 1772 0 0 0 0 0 0 0 0 0

1772 25 GeomVertexArrayData const 8832 25 GeomVertexArrayData const 25 GeomVertexArrayData const 0 0 1703 0 0 0 0 0 0 0 0 0

1773 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1699 0 0 0 0 0 0 0 0 0

1774 11 GeomEnums * 8576 11 GeomEnums * 11 GeomEnums * 0 0 1689 0 0 0 0 0 0 0 0 0

1775 18 GeomVertexFormat * 8576 18 GeomVertexFormat * 18 GeomVertexFormat * 0 0 1702 0 0 0 0 0 0 0 0 0

1776 24 GeomVertexFormat const * 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1777 0 0 0 0 0 0 0 0 0

1777 22 GeomVertexFormat const 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1702 0 0 0 0 0 0 0 0 0

1778 22 GeomVertexData const * 8576 22 GeomVertexData const * 22 GeomVertexData const * 0 0 1779 0 0 0 0 0 0 0 0 0

1779 20 GeomVertexData const 8832 20 GeomVertexData const 20 GeomVertexData const 0 0 1711 0 0 0 0 0 0 0 0 0

1780 21 GeomVertexArrayData * 8576 21 GeomVertexArrayData * 21 GeomVertexArrayData * 0 0 1703 0 0 0 0 0 0 0 0 0

1781 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

1782 9 UpdateSeq 2048 9 UpdateSeq 9 UpdateSeq 0 0 0 0 0 0 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

1783 11 UpdateSeq * 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1782 0 0 0 0 0 0 0 0 0

1784 10 CPTA_uchar 2048 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0

1785 38 ConstPointerToArray< unsigned char > * 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1784 0 0 0 0 0 0 0 0 0

1786 9 PTA_uchar 2048 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0

1787 33 PointerToArray< unsigned char > * 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1786 0 0 0 0 0 0 0 0 0

1788 24 GeomCacheManager const * 8576 24 GeomCacheManager const * 24 GeomCacheManager const * 0 0 1789 0 0 0 0 0 0 0 0 0

1789 22 GeomCacheManager const 8832 22 GeomCacheManager const 22 GeomCacheManager const 0 0 1704 0 0 0 0 0 0 0 0 0

1790 18 GeomCacheManager * 8576 18 GeomCacheManager * 18 GeomCacheManager * 0 0 1704 0 0 0 0 0 0 0 0 0

1791 23 VertexTransform const * 8576 23 VertexTransform const * 23 VertexTransform const * 0 0 1792 0 0 0 0 0 0 0 0 0

1792 21 VertexTransform const 8832 21 VertexTransform const 21 VertexTransform const 0 0 1705 0 0 0 0 0 0 0 0 0

1793 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1794 0 0 0 0 0 0 0 0 0

1794 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1795 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1796 0 0 0 0 0 0 0 0 0

1796 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1794 0 0 0 0 0 0 0 0 0

1797 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

1798 16 TransformTable * 8576 16 TransformTable * 16 TransformTable * 0 0 1706 0 0 0 0 0 0 0 0 0

1799 22 TransformTable const * 8576 22 TransformTable const * 22 TransformTable const * 0 0 1800 0 0 0 0 0 0 0 0 0

1800 20 TransformTable const 8832 20 TransformTable const 20 TransformTable const 0 0 1706 0 0 0 0 0 0 0 0 0

1801 16 TransformBlend * 8576 16 TransformBlend * 16 TransformBlend * 0 0 1707 0 0 0 0 0 0 0 0 0

1802 22 TransformBlend const * 8576 22 TransformBlend const * 22 TransformBlend const * 0 0 1803 0 0 0 0 0 0 0 0 0

1803 20 TransformBlend const 8832 20 TransformBlend const 20 TransformBlend const 0 0 1707 0 0 0 0 0 0 0 0 0

1804 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 1805 0 0 0 0 0 0 0 0 0

1805 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1806 10 LPoint4f * 8576 10 LPoint4f * 10 LPoint4f * 0 0 1807 0 0 0 0 0 0 0 0 0

1807 8 LPoint4f 2048 8 LPoint4f 8 LPoint4f 0 0 0 0 0 0 0 0 0 0 0 895
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

1808 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 1809 0 0 0 0 0 0 0 0 0

1809 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1810 21 TransformBlendTable * 8576 21 TransformBlendTable * 21 TransformBlendTable * 0 0 1708 0 0 0 0 0 0 0 0 0

1811 27 TransformBlendTable const * 8576 27 TransformBlendTable const * 27 TransformBlendTable const * 0 0 1812 0 0 0 0 0 0 0 0 0

1812 25 TransformBlendTable const 8832 25 TransformBlendTable const 25 TransformBlendTable const 0 0 1708 0 0 0 0 0 0 0 0 0

1813 20 VertexSlider const * 8576 20 VertexSlider const * 20 VertexSlider const * 0 0 1814 0 0 0 0 0 0 0 0 0

1814 18 VertexSlider const 8832 18 VertexSlider const 18 VertexSlider const 0 0 1709 0 0 0 0 0 0 0 0 0

1815 13 SliderTable * 8576 13 SliderTable * 13 SliderTable * 0 0 1710 0 0 0 0 0 0 0 0 0

1816 19 SliderTable const * 8576 19 SliderTable const * 19 SliderTable const * 0 0 1817 0 0 0 0 0 0 0 0 0

1817 17 SliderTable const 8832 17 SliderTable const 17 SliderTable const 0 0 1710 0 0 0 0 0 0 0 0 0

1818 16 GeomVertexData * 8576 16 GeomVertexData * 16 GeomVertexData * 0 0 1711 0 0 0 0 0 0 0 0 0

1819 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1820 0 0 0 0 0 0 0 0 0

1820 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1821 0 0 0 0 0 0 0 0 0

1821 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1822 15 GeomPrimitive * 8576 15 GeomPrimitive * 15 GeomPrimitive * 0 0 1712 0 0 0 0 0 0 0 0 0

1823 21 GeomPrimitive const * 8576 21 GeomPrimitive const * 21 GeomPrimitive const * 0 0 1824 0 0 0 0 0 0 0 0 0

1824 19 GeomPrimitive const 8832 19 GeomPrimitive const 19 GeomPrimitive const 0 0 1712 0 0 0 0 0 0 0 0 0

1825 14 TextureStage * 8576 14 TextureStage * 14 TextureStage * 0 0 1713 0 0 0 0 0 0 0 0 0

1826 20 TextureStage const * 8576 20 TextureStage const * 20 TextureStage const * 0 0 1827 0 0 0 0 0 0 0 0 0

1827 18 TextureStage const 8832 18 TextureStage const 18 TextureStage const 0 0 1713 0 0 0 0 0 0 0 0 0

1828 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1821 0 0 0 0 0 0 0 0 0

1829 6 Geom * 8576 6 Geom * 6 Geom * 0 0 1718 0 0 0 0 0 0 0 0 0

1830 12 Geom const * 8576 12 Geom const * 12 Geom const * 0 0 1831 0 0 0 0 0 0 0 0 0

1831 10 Geom const 8832 10 Geom const 10 Geom const 0 0 1718 0 0 0 0 0 0 0 0 0

1832 20 BoundingVolume const 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1833 0 0 0 0 0 0 0 0 0

1833 14 BoundingVolume 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

1834 22 BoundingVolume const * 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1832 0 0 0 0 0 0 0 0 0

1835 25 PreparedGraphicsObjects * 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 1836 0 0 0 0 0 0 0 0 0

1836 23 PreparedGraphicsObjects 2048 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 0 0 0 0 0 0

1837 11 GeomLines * 8576 11 GeomLines * 11 GeomLines * 0 0 1719 0 0 0 0 0 0 0 0 0

1838 17 GeomLines const * 8576 17 GeomLines const * 17 GeomLines const * 0 0 1839 0 0 0 0 0 0 0 0 0

1839 15 GeomLines const 8832 15 GeomLines const 15 GeomLines const 0 0 1719 0 0 0 0 0 0 0 0 0

1840 16 GeomLinestrips * 8576 16 GeomLinestrips * 16 GeomLinestrips * 0 0 1720 0 0 0 0 0 0 0 0 0

1841 22 GeomLinestrips const * 8576 22 GeomLinestrips const * 22 GeomLinestrips const * 0 0 1842 0 0 0 0 0 0 0 0 0

1842 20 GeomLinestrips const 8832 20 GeomLinestrips const 20 GeomLinestrips const 0 0 1720 0 0 0 0 0 0 0 0 0

1843 12 GeomPoints * 8576 12 GeomPoints * 12 GeomPoints * 0 0 1721 0 0 0 0 0 0 0 0 0

1844 18 GeomPoints const * 8576 18 GeomPoints const * 18 GeomPoints const * 0 0 1845 0 0 0 0 0 0 0 0 0

1845 16 GeomPoints const 8832 16 GeomPoints const 16 GeomPoints const 0 0 1721 0 0 0 0 0 0 0 0 0

1846 15 GeomTriangles * 8576 15 GeomTriangles * 15 GeomTriangles * 0 0 1722 0 0 0 0 0 0 0 0 0

1847 21 GeomTriangles const * 8576 21 GeomTriangles const * 21 GeomTriangles const * 0 0 1848 0 0 0 0 0 0 0 0 0

1848 19 GeomTriangles const 8832 19 GeomTriangles const 19 GeomTriangles const 0 0 1722 0 0 0 0 0 0 0 0 0

1849 13 GeomTrifans * 8576 13 GeomTrifans * 13 GeomTrifans * 0 0 1723 0 0 0 0 0 0 0 0 0

1850 19 GeomTrifans const * 8576 19 GeomTrifans const * 19 GeomTrifans const * 0 0 1851 0 0 0 0 0 0 0 0 0

1851 17 GeomTrifans const 8832 17 GeomTrifans const 17 GeomTrifans const 0 0 1723 0 0 0 0 0 0 0 0 0

1852 15 GeomTristrips * 8576 15 GeomTristrips * 15 GeomTristrips * 0 0 1724 0 0 0 0 0 0 0 0 0

1853 21 GeomTristrips const * 8576 21 GeomTristrips const * 21 GeomTristrips const * 0 0 1854 0 0 0 0 0 0 0 0 0

1854 19 GeomTristrips const 8832 19 GeomTristrips const 19 GeomTristrips const 0 0 1724 0 0 0 0 0 0 0 0 0

1855 18 GeomVertexReader * 8576 18 GeomVertexReader * 18 GeomVertexReader * 0 0 1725 0 0 0 0 0 0 0 0 0

1856 24 GeomVertexReader const * 8576 24 GeomVertexReader const * 24 GeomVertexReader const * 0 0 1857 0 0 0 0 0 0 0 0 0

1857 22 GeomVertexReader const 8832 22 GeomVertexReader const 22 GeomVertexReader const 0 0 1725 0 0 0 0 0 0 0 0 0

1858 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1859 0 0 0 0 0 0 0 0 0

1859 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1860 0 0 0 0 0 0 0 0 0

1860 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1861 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1862 0 0 0 0 0 0 0 0 0

1862 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1863 0 0 0 0 0 0 0 0 0

1863 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1864 18 GeomVertexWriter * 8576 18 GeomVertexWriter * 18 GeomVertexWriter * 0 0 1726 0 0 0 0 0 0 0 0 0

1865 24 GeomVertexWriter const * 8576 24 GeomVertexWriter const * 24 GeomVertexWriter const * 0 0 1866 0 0 0 0 0 0 0 0 0

1866 22 GeomVertexWriter const 8832 22 GeomVertexWriter const 22 GeomVertexWriter const 0 0 1726 0 0 0 0 0 0 0 0 0

1867 20 GeomVertexRewriter * 8576 20 GeomVertexRewriter * 20 GeomVertexRewriter * 0 0 1727 0 0 0 0 0 0 0 0 0

1868 26 GeomVertexRewriter const * 8576 26 GeomVertexRewriter const * 26 GeomVertexRewriter const * 0 0 1869 0 0 0 0 0 0 0 0 0

1869 24 GeomVertexRewriter const 8832 24 GeomVertexRewriter const 24 GeomVertexRewriter const 0 0 1727 0 0 0 0 0 0 0 0 0

1870 9 Texture * 8576 9 Texture * 9 Texture * 0 0 1728 0 0 0 0 0 0 0 0 0

1871 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 1872 0 0 0 0 0 0 0 0 0

1872 14 Filename const 8832 14 Filename const 14 Filename const 0 0 1873 0 0 0 0 0 0 0 0 0

1873 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1874 15 Texture const * 8576 15 Texture const * 15 Texture const * 0 0 1875 0 0 0 0 0 0 0 0 0

1875 13 Texture const 8832 13 Texture const 13 Texture const 0 0 1728 0 0 0 0 0 0 0 0 0

1876 9 istream * 8576 9 istream * 9 istream * 0 0 1877 0 0 0 0 0 0 0 0 0

1877 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0

1878 16 PNMImage const * 8576 16 PNMImage const * 16 PNMImage const * 0 0 1879 0 0 0 0 0 0 0 0 0

1879 14 PNMImage const 8832 14 PNMImage const 14 PNMImage const 0 0 1880 0 0 0 0 0 0 0 0 0

1880 8 PNMImage 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

1881 10 PNMImage * 8576 10 PNMImage * 10 PNMImage * 0 0 1880 0 0 0 0 0 0 0 0 0

1882 9 Namable * 8576 9 Namable * 9 Namable * 0 0 1729 0 0 0 0 0 0 0 0 0

1883 17 ShaderExpansion * 8576 17 ShaderExpansion * 17 ShaderExpansion * 0 0 1736 0 0 0 0 0 0 0 0 0

1884 23 ShaderExpansion const * 8576 23 ShaderExpansion const * 23 ShaderExpansion const * 0 0 1885 0 0 0 0 0 0 0 0 0

1885 21 ShaderExpansion const 8832 21 ShaderExpansion const 21 ShaderExpansion const 0 0 1736 0 0 0 0 0 0 0 0 0

1886 22 basic_string< char > * 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 1887 0 0 0 0 0 0 0 0 0

1887 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

1888 12 Lens const * 8576 12 Lens const * 12 Lens const * 0 0 1889 0 0 0 0 0 0 0 0 0

1889 10 Lens const 8832 10 Lens const 10 Lens const 0 0 1738 0 0 0 0 0 0 0 0 0

1890 6 Lens * 8576 6 Lens * 6 Lens * 0 0 1738 0 0 0 0 0 0 0 0 0

1891 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 1892 0 0 0 0 0 0 0 0 0

1892 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 1893 0 0 0 0 0 0 0 0 0

1893 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1894 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1895 0 0 0 0 0 0 0 0 0

1895 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 1805 0 0 0 0 0 0 0 0 0

1896 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 1893 0 0 0 0 0 0 0 0 0

1897 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1898 17 LVector2f const * 8576 17 LVector2f const * 17 LVector2f const * 0 0 1899 0 0 0 0 0 0 0 0 0

1899 15 LVector2f const 8832 15 LVector2f const 15 LVector2f const 0 0 1900 0 0 0 0 0 0 0 0 0

1900 9 LVector2f 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 895
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

1901 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 1902 0 0 0 0 0 0 0 0 0

1902 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 1809 0 0 0 0 0 0 0 0 0

1903 16 BoundingVolume * 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1833 0 0 0 0 0 0 0 0 0

1904 16 Material const * 8576 16 Material const * 16 Material const * 0 0 1905 0 0 0 0 0 0 0 0 0

1905 14 Material const 8832 14 Material const 14 Material const 0 0 1741 0 0 0 0 0 0 0 0 0

1906 10 Material * 8576 10 Material * 10 Material * 0 0 1741 0 0 0 0 0 0 0 0 0

1907 12 MatrixLens * 8576 12 MatrixLens * 12 MatrixLens * 0 0 1743 0 0 0 0 0 0 0 0 0

1908 18 MatrixLens const * 8576 18 MatrixLens const * 18 MatrixLens const * 0 0 1909 0 0 0 0 0 0 0 0 0

1909 16 MatrixLens const 8832 16 MatrixLens const 16 MatrixLens const 0 0 1743 0 0 0 0 0 0 0 0 0

1910 18 OrthographicLens * 8576 18 OrthographicLens * 18 OrthographicLens * 0 0 1744 0 0 0 0 0 0 0 0 0

1911 17 PerspectiveLens * 8576 17 PerspectiveLens * 17 PerspectiveLens * 0 0 1745 0 0 0 0 0 0 0 0 0

1912 18 UserVertexSlider * 8576 18 UserVertexSlider * 18 UserVertexSlider * 0 0 1747 0 0 0 0 0 0 0 0 0

1913 21 UserVertexTransform * 8576 21 UserVertexTransform * 21 UserVertexTransform * 0 0 1748 0 0 0 0 0 0 0 0 0

1914 27 UserVertexTransform const * 8576 27 UserVertexTransform const * 27 UserVertexTransform const * 0 0 1915 0 0 0 0 0 0 0 0 0

1915 25 UserVertexTransform const 8832 25 UserVertexTransform const 25 UserVertexTransform const 0 0 1748 0 0 0 0 0 0 0 0 0

1916 20 VideoTexture const * 8576 20 VideoTexture const * 20 VideoTexture const * 0 0 1917 0 0 0 0 0 0 0 0 0

1917 18 VideoTexture const 8832 18 VideoTexture const 18 VideoTexture const 0 0 1749 0 0 0 0 0 0 0 0 0

1918 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 1860 0 0 0 0 0 0 0 0 0

1919 14 VideoTexture * 8576 14 VideoTexture * 14 VideoTexture * 0 0 1749 0 0 0 0 0 0 0 0 0

1920 15 AnimInterface * 8576 15 AnimInterface * 15 AnimInterface * 0 0 1750 0 0 0 0 0 0 0 0 0

0
0
