1145554931
2 2
10 libcollide 4 Hwca 5 panda 
201
212 14 get_class_type 4 413 32 CollisionHandler::get_class_type 0 1 1 0
57
static TypeHandle CollisionHandler::get_class_type(void);

213 17 ~CollisionHandler 4 413 35 CollisionHandler::~CollisionHandler 0 0 0
42
CollisionHandler::~CollisionHandler(void);

214 18 CollisionTraverser 4 415 38 CollisionTraverser::CollisionTraverser 0 2 2 3 230
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
CollisionTraverser::CollisionTraverser(basic_string< char > const &name = ("ctrav"));

215 19 ~CollisionTraverser 4 415 39 CollisionTraverser::~CollisionTraverser 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
CollisionTraverser::~CollisionTraverser(void);

216 26 set_respect_prev_transform 4 415 46 CollisionTraverser::set_respect_prev_transform 0 1 4 1394
// Filename: collisionTraverser.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_respect_prev_transform
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               prev_transform stored on a node (as updated via
//               set_fluid_pos(), etc.) is respected to calculate
//               collisions.  If this is true, certain types of
//               collision tests will be enhanced by the information
//               about objects in motion.  If this is false, objects
//               are always considered to be static.  The default is
//               false.
////////////////////////////////////////////////////////////////////
70
inline void CollisionTraverser::set_respect_prev_transform(bool flag);

217 26 get_respect_prev_transform 4 415 46 CollisionTraverser::get_respect_prev_transform 0 1 5 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_respect_prev_transform
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               prev_transform stored on a node is respected to
//               calculate collisions.  See
//               set_respect_prev_transform().
////////////////////////////////////////////////////////////////////
71
inline bool CollisionTraverser::get_respect_prev_transform(void) const;

218 12 add_collider 4 415 32 CollisionTraverser::add_collider 0 1 6 779
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::add_collider
//       Access: Published
//  Description: Adds a new CollisionNode, representing an object that
//               will be tested for collisions into other objects,
//               along with the handler that will serve each detected
//               collision.  Each CollisionNode may be served by only
//               one handler at a time, but a given handler may serve
//               many CollisionNodes.
//
//               The handler that serves a particular node may be
//               changed from time to time by calling add_collider()
//               again on the same node.
////////////////////////////////////////////////////////////////////
91
void CollisionTraverser::add_collider(NodePath const &collider, CollisionHandler *handler);

219 15 remove_collider 4 415 35 CollisionTraverser::remove_collider 0 1 7 545
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::remove_collider
//       Access: Published
//  Description: Removes the collider (and its associated handler)
//               from the set of CollisionNodes that will be tested
//               each frame for collisions into other objects.
//               Returns true if the definition was found and removed,
//               false if it wasn't present to begin with.
////////////////////////////////////////////////////////////////////
67
bool CollisionTraverser::remove_collider(NodePath const &collider);

220 12 has_collider 4 415 32 CollisionTraverser::has_collider 0 1 8 397
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_collider
//       Access: Published
//  Description: Returns true if the indicated node is current in the
//               set of nodes that will be tested each frame for
//               collisions into other objects.
////////////////////////////////////////////////////////////////////
70
bool CollisionTraverser::has_collider(NodePath const &collider) const;

221 17 get_num_colliders 4 415 37 CollisionTraverser::get_num_colliders 0 1 9 348
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_num_colliders
//       Access: Published
//  Description: Returns the number of CollisionNodes that have been
//               added to the traverser via add_collider().
////////////////////////////////////////////////////////////////////
54
int CollisionTraverser::get_num_colliders(void) const;

222 12 get_collider 4 415 32 CollisionTraverser::get_collider 0 1 10 335
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_collider
//       Access: Published
//  Description: Returns the nth CollisionNode that has been
//               added to the traverser via add_collider().
////////////////////////////////////////////////////////////////////
55
NodePath CollisionTraverser::get_collider(int n) const;

223 11 get_handler 4 415 31 CollisionTraverser::get_handler 0 1 11 417
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_handler
//       Access: Published
//  Description: Returns the handler that is currently assigned to
//               serve the indicated collision node, or NULL if the
//               node is not on the traverser's set of active nodes.
////////////////////////////////////////////////////////////////////
82
CollisionHandler *CollisionTraverser::get_handler(NodePath const &collider) const;

224 15 clear_colliders 4 415 35 CollisionTraverser::clear_colliders 0 1 12 328
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_colliders
//       Access: Published
//  Description: Completely empties the set of collision nodes and
//               their associated handlers.
////////////////////////////////////////////////////////////////////
47
void CollisionTraverser::clear_colliders(void);

225 8 traverse 4 415 28 CollisionTraverser::traverse 0 1 13 227
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::traverse
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void CollisionTraverser::traverse(NodePath const &root);

226 20 reset_prev_transform 4 415 40 CollisionTraverser::reset_prev_transform 0 1 14 567
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::reset_prev_transform
//       Access: Published
//  Description: Once the collision traversal has finished, resets all
//               of the velocity deltas in the scene graph by setting
//               the "previous" transform to the current transform.
//               This must be called at least once per frame for
//               collisions to respect this velocity setting properly.
////////////////////////////////////////////////////////////////////
68
void CollisionTraverser::reset_prev_transform(NodePath const &root);

227 12 set_recorder 4 415 32 CollisionTraverser::set_recorder 0 1 15 1220
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_recorder
//       Access: Published
//  Description: Uses the indicated CollisionRecorder object to start
//               recording the intersection tests made by each
//               subsequent call to traverse() on this object.  A
//               particular CollisionRecorder object can only record
//               one traverser at a time; if this object has already
//               been assigned to another traverser, that assignment
//               is broken.
//
//               This is intended to be used in a debugging mode to
//               try to determine what work is being performed by the
//               collision traversal.  Usually, attaching a recorder
//               will impose significant runtime overhead.
//
//               This does not transfer ownership of the
//               CollisionRecorder pointer; maintenance of that
//               remains the caller's responsibility.  If the
//               CollisionRecorder is destructed, it will cleanly
//               remove itself from the traverser.
////////////////////////////////////////////////////////////////////
67
void CollisionTraverser::set_recorder(CollisionRecorder *recorder);

228 12 has_recorder 4 415 32 CollisionTraverser::has_recorder 0 1 16 372
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_recorder
//       Access: Published
//  Description: Returns true if the CollisionTraverser has a
//               CollisionRecorder object currently assigned, false
//               otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool CollisionTraverser::has_recorder(void) const;

229 12 get_recorder 4 415 32 CollisionTraverser::get_recorder 0 1 17 334
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_recorder
//       Access: Published
//  Description: Returns the CollisionRecorder currently assigned, or
//               NULL if no recorder is assigned.
////////////////////////////////////////////////////////////////////
71
inline CollisionRecorder *CollisionTraverser::get_recorder(void) const;

230 14 clear_recorder 4 415 34 CollisionTraverser::clear_recorder 0 1 18 343
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_recorder
//       Access: Published
//  Description: Removes the CollisionRecorder from the traverser and
//               restores normal low-overhead operation.
////////////////////////////////////////////////////////////////////
53
inline void CollisionTraverser::clear_recorder(void);

231 15 show_collisions 4 415 35 CollisionTraverser::show_collisions 0 1 19 600
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::show_collisions
//       Access: Published
//  Description: This is a high-level function to create a
//               CollisionVisualizer object to render the collision
//               tests performed by this traverser.  The supplied root
//               should be any node in the scene graph; typically, the
//               top node (e.g. render).  The CollisionVisualizer will
//               be attached to this node.
////////////////////////////////////////////////////////////////////
79
CollisionVisualizer *CollisionTraverser::show_collisions(NodePath const &root);

232 15 hide_collisions 4 415 35 CollisionTraverser::hide_collisions 0 1 20 310
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::hide_collisions
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               show_collisions().
////////////////////////////////////////////////////////////////////
47
void CollisionTraverser::hide_collisions(void);

233 6 output 4 415 26 CollisionTraverser::output 0 1 21 278
// DO_COLLISION_RECORDING

// DO_COLLISION_RECORDING
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void CollisionTraverser::output(ostream &out) const;

234 5 write 4 415 25 CollisionTraverser::write 0 1 22 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
void CollisionTraverser::write(ostream &out, int indent_level) const;

235 12 set_tangible 4 417 28 CollisionSolid::set_tangible 0 1 23 1266
// Filename: collisionSolid.I
// Created by:  drose (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_tangible
//       Access: Published
//  Description: Sets the current state of the 'tangible' flag.  Set
//               this true to make the solid tangible, so that a
//               CollisionHandlerPusher will not allow another object
//               to intersect it, or false to make it intangible, so
//               that a CollisionHandlerPusher will ignore it except
//               to throw an event.
////////////////////////////////////////////////////////////////////
56
inline void CollisionSolid::set_tangible(bool tangible);

236 11 is_tangible 4 417 27 CollisionSolid::is_tangible 0 1 24 541
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::is_tangible
//       Access: Published
//  Description: Returns whether the solid is considered 'tangible' or
//               not.  An intangible solid has no effect in a
//               CollisionHandlerPusher (except to throw an event);
//               it's useful for defining 'trigger' planes and
//               spheres, that cause an effect when passed through.
////////////////////////////////////////////////////////////////////
52
inline bool CollisionSolid::is_tangible(void) const;

237 20 set_effective_normal 4 417 36 CollisionSolid::set_effective_normal 0 1 25 720
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_effective_normal
//       Access: Published
//  Description: Records a false normal for this CollisionSolid that
//               will be reported by the collision system with all
//               collisions into it, instead of its actual normal.
//               This is useful as a workaround for the problem of an
//               avatar wanting to stand on a sloping ground; by
//               storing a false normal, the ground appears to be
//               perfectly level, and the avatar does not tend to
//               slide down it.
////////////////////////////////////////////////////////////////////
84
inline void CollisionSolid::set_effective_normal(LVector3f const &effective_normal);

238 22 clear_effective_normal 4 417 38 CollisionSolid::clear_effective_normal 0 1 26 315
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::clear_effective_normal
//       Access: Published
//  Description: Removes the normal previously set by
//               set_effective_normal().
////////////////////////////////////////////////////////////////////
57
inline void CollisionSolid::clear_effective_normal(void);

239 20 has_effective_normal 4 417 36 CollisionSolid::has_effective_normal 0 1 27 337
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::has_effective_normal
//       Access: Published
//  Description: Returns true if a special normal was set by
//               set_effective_normal(), false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool CollisionSolid::has_effective_normal(void) const;

240 20 get_effective_normal 4 417 36 CollisionSolid::get_effective_normal 0 1 28 401
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_effective_normal
//       Access: Published
//  Description: Returns the normal that was set by
//               set_effective_normal().  It is an error to call this
//               unless has_effective_normal() returns true.
////////////////////////////////////////////////////////////////////
73
inline LVector3f const &CollisionSolid::get_effective_normal(void) const;

241 28 set_respect_effective_normal 4 417 44 CollisionSolid::set_respect_effective_normal 0 1 29 605
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_respect_effective_normal
//       Access: Published
//  Description: This is only meaningful for CollisionSolids that will
//               be added to a traverser as colliders.  It is normally
//               true, but if set false, it means that this particular
//               solid does not care about the "effective" normal of
//               other solids it meets, but rather always uses the
//               true normal.
////////////////////////////////////////////////////////////////////
88
inline void CollisionSolid::set_respect_effective_normal(bool respect_effective_normal);

242 28 get_respect_effective_normal 4 417 44 CollisionSolid::get_respect_effective_normal 0 1 30 279
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_respect_effective_normal
//       Access: Published
//  Description: See set_respect_effective_normal().
////////////////////////////////////////////////////////////////////
69
inline bool CollisionSolid::get_respect_effective_normal(void) const;

243 10 get_bounds 4 417 26 CollisionSolid::get_bounds 0 1 31 262
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_bounds
//       Access: Protected
//  Description: Returns the solid's bounding volume.
////////////////////////////////////////////////////////////////////
72
ConstPointerTo< BoundingVolume > CollisionSolid::get_bounds(void) const;

244 6 output 4 417 22 CollisionSolid::output 0 1 32 227
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CollisionSolid::output(ostream &out) const;

245 5 write 4 417 21 CollisionSolid::write 0 2 33 34 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void CollisionSolid::write(ostream &out, int indent_level = (0)) const;

246 14 get_class_type 4 417 30 CollisionSolid::get_class_type 0 1 35 0
55
static TypeHandle CollisionSolid::get_class_type(void);

247 13 CollisionNode 4 419 28 CollisionNode::CollisionNode 0 1 36 454
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
63
CollisionNode::CollisionNode(basic_string< char > const &name);

248 16 set_collide_mask 4 419 31 CollisionNode::set_collide_mask 0 1 37 1009
// Filename: collisionNode.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collide_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               CollideMask values to the same thing.
////////////////////////////////////////////////////////////////////
78
inline void CollisionNode::set_collide_mask(BitMask< unsigned int, 32 > mask);

249 21 set_from_collide_mask 4 419 36 CollisionNode::set_from_collide_mask 0 1 38 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_from_collide_mask
//       Access: Published
//  Description: Sets the "from" CollideMask.  In order for a
//               collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
76
void CollisionNode::set_from_collide_mask(BitMask< unsigned int, 32 > mask);

250 21 set_into_collide_mask 4 419 36 CollisionNode::set_into_collide_mask 0 1 39 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  In order for a
//               collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
83
inline void CollisionNode::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

251 21 get_from_collide_mask 4 419 36 CollisionNode::get_from_collide_mask 0 1 40 520
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_from_collide_mask
//       Access: Published
//  Description: Returns the current "from" CollideMask.  In order for
//               a collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
84
inline BitMask< unsigned int, 32 > CollisionNode::get_from_collide_mask(void) const;

252 21 get_into_collide_mask 4 419 36 CollisionNode::get_into_collide_mask 0 1 41 520
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the current "into" CollideMask.  In order for
//               a collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
84
inline BitMask< unsigned int, 32 > CollisionNode::get_into_collide_mask(void) const;

253 16 set_collide_geom 4 419 31 CollisionNode::set_collide_geom 0 1 42 1016
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collide_geom
//       Access: Published
//  Description: Sets the state of the "collide geom" flag for this
//               CollisionNode.  
//
//               This flag is now deprecated, now that GeomNodes have
//               their own into_collide_mask, just like CollisionNodes
//               do.  Instead of using set_collide_geom(), you should
//               use the from_collide_mask to control which GeomNodes
//               each CollisionNode will intersect with.  
//
//               In particular, you may be interested in setting
//               from_collide_mask to the value returned by
//               GeomNode::get_default_collide_mask(), which is the
//               default into_collide_mask that all GeomNodes will be
//               given (unless they are explicitly given some other
//               mask).
////////////////////////////////////////////////////////////////////
48
void CollisionNode::set_collide_geom(bool flag);

254 16 get_collide_geom 4 419 31 CollisionNode::get_collide_geom 0 1 43 323
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_collide_geom
//       Access: Published
//  Description: Returns the current state of the collide_geom flag.
//               See set_collide_geom().
////////////////////////////////////////////////////////////////////
49
bool CollisionNode::get_collide_geom(void) const;

255 12 clear_solids 4 419 27 CollisionNode::clear_solids 0 1 44 260
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::clear_solids
//       Access: Published
//  Description: Removes all solids from the node.
////////////////////////////////////////////////////////////////////
46
inline void CollisionNode::clear_solids(void);

256 14 get_num_solids 4 419 29 CollisionNode::get_num_solids 0 1 45 228
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_num_solids
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline int CollisionNode::get_num_solids(void) const;

257 9 get_solid 4 419 24 CollisionNode::get_solid 0 1 46 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_solid
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline CollisionSolid *CollisionNode::get_solid(int n) const;

258 9 set_solid 4 419 24 CollisionNode::set_solid 0 1 47 268
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_solid
//       Access: Published
//  Description: Replaces the solid with the indicated index.
////////////////////////////////////////////////////////////////////
67
inline void CollisionNode::set_solid(int n, CollisionSolid *solid);

259 12 remove_solid 4 419 27 CollisionNode::remove_solid 0 1 48 340
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::remove_solid
//       Access: Published
//  Description: Removes the solid with the indicated index.  This
//               will shift all subsequent indices down by one.
////////////////////////////////////////////////////////////////////
47
inline void CollisionNode::remove_solid(int n);

260 9 add_solid 4 419 24 CollisionNode::add_solid 0 1 49 365
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::add_solid
//       Access: Published
//  Description: Adds the indicated solid to the node.  Returns the
//               index of the new solid within the node's list of
//               solids.
////////////////////////////////////////////////////////////////////
59
inline int CollisionNode::add_solid(CollisionSolid *solid);

261 24 get_default_collide_mask 4 419 39 CollisionNode::get_default_collide_mask 0 1 50 333
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               CollisionNodes.
////////////////////////////////////////////////////////////////////
88
static inline BitMask< unsigned int, 32 > CollisionNode::get_default_collide_mask(void);

262 14 get_class_type 4 419 29 CollisionNode::get_class_type 0 1 51 0
54
static TypeHandle CollisionNode::get_class_type(void);

263 18 ~CollisionRecorder 4 421 37 CollisionRecorder::~CollisionRecorder 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: CollisionRecorder::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
52
virtual CollisionRecorder::~CollisionRecorder(void);

264 6 output 4 421 25 CollisionRecorder::output 0 1 52 222
////////////////////////////////////////////////////////////////////
//     Function: CollisionRecorder::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
51
void CollisionRecorder::output(ostream &out) const;

265 14 get_class_type 4 421 33 CollisionRecorder::get_class_type 0 1 53 0
58
static TypeHandle CollisionRecorder::get_class_type(void);

266 8 get_type 4 421 27 CollisionRecorder::get_type 0 1 54 112
// We have to publish this explicitly because the CollisionRecorder
// object does not inherit from TypedObject.
59
virtual TypeHandle CollisionRecorder::get_type(void) const;

267 14 get_type_index 4 421 33 CollisionRecorder::get_type_index 0 1 55 993
// Filename: collisionRecorder.I
// Created by:  drose (17Apr03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionRecorder::get_type_index
//       Access: Published
//  Description: Duplicates the functionality of
//               TypedObject::get_type_index().
////////////////////////////////////////////////////////////////////
57
inline int CollisionRecorder::get_type_index(void) const;

268 8 get_from 4 422 24 CollisionEntry::get_from 0 1 56 331
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid that triggered this collision.
////////////////////////////////////////////////////////////////////
66
inline CollisionSolid const *CollisionEntry::get_from(void) const;

269 8 has_into 4 422 24 CollisionEntry::has_into 0 1 57 578
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_into
//       Access: Published
//  Description: Returns true if the "into" solid is, in fact, a
//               CollisionSolid, and its pointer is known (in which
//               case get_into() may be called to retrieve it).  If
//               this returns false, the collision was detected into a
//               GeomNode, and there is no CollisionSolid pointer to
//               be retrieved.
////////////////////////////////////////////////////////////////////
49
inline bool CollisionEntry::has_into(void) const;

270 8 get_into 4 422 24 CollisionEntry::get_into 0 1 58 515
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid was collided into.  This pointer might be NULL
//               if the collision was into a piece of visible
//               geometry, instead of a normal CollisionSolid
//               collision; see has_into().
////////////////////////////////////////////////////////////////////
66
inline CollisionSolid const *CollisionEntry::get_into(void) const;

271 13 get_from_node 4 422 29 CollisionEntry::get_from_node 0 1 59 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that triggered this collision.  This will be a node
//               that has been added to a CollisionTraverser via
//               add_collider().
////////////////////////////////////////////////////////////////////
64
inline CollisionNode *CollisionEntry::get_from_node(void) const;

272 13 get_into_node 4 422 29 CollisionEntry::get_into_node 0 1 60 532
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that was collided into.  This returns a PandaNode
//               pointer instead of something more specific, because
//               it might be either a CollisionNode or a GeomNode.
//
//               Also see get_into_node_path().
////////////////////////////////////////////////////////////////////
60
inline PandaNode *CollisionEntry::get_into_node(void) const;

273 18 get_from_node_path 4 422 34 CollisionEntry::get_from_node_path 0 1 61 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the
//               CollisionNode that contains the CollisionSolid that
//               triggered this collision.  This will be a NodePath
//               that has been added to a CollisionTraverser via
//               add_collider().
////////////////////////////////////////////////////////////////////
63
inline NodePath CollisionEntry::get_from_node_path(void) const;

274 18 get_into_node_path 4 422 34 CollisionEntry::get_into_node_path 0 1 62 651
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the specific
//               CollisionNode or GeomNode instance that was collided
//               into.  This is the same node returned by
//               get_into_node(), represented as a NodePath; however,
//               it may be more useful because the NodePath can
//               resolve the particular instance of the node, if there
//               is more than one.
////////////////////////////////////////////////////////////////////
63
inline NodePath CollisionEntry::get_into_node_path(void) const;

275 26 get_respect_prev_transform 4 422 42 CollisionEntry::get_respect_prev_transform 0 1 63 479
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_respect_prev_transform
//       Access: Published
//  Description: Returns true if the collision was detected by a
//               CollisionTraverser whose respect_prev_transform
//               flag was set true, meaning we should consider motion
//               significant in evaluating collisions.
////////////////////////////////////////////////////////////////////
67
inline bool CollisionEntry::get_respect_prev_transform(void) const;

276 17 set_surface_point 4 422 33 CollisionEntry::set_surface_point 0 1 64 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_point
//       Access: Published
//  Description: Stores the point, on the surface of the "into"
//               object, at which a collision is detected.
//
//               This point is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
69
inline void CollisionEntry::set_surface_point(LPoint3f const &point);

277 18 set_surface_normal 4 422 34 CollisionEntry::set_surface_normal 0 1 65 439
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_normal
//       Access: Published
//  Description: Stores the surface normal of the "into" object at the
//               point of the intersection.
//
//               This normal is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
72
inline void CollisionEntry::set_surface_normal(LVector3f const &normal);

278 18 set_interior_point 4 422 34 CollisionEntry::set_interior_point 0 1 66 682
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_interior_point
//       Access: Published
//  Description: Stores the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).
//
//               This point is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
70
inline void CollisionEntry::set_interior_point(LPoint3f const &point);

279 17 has_surface_point 4 422 33 CollisionEntry::has_surface_point 0 1 67 441
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_point
//       Access: Published
//  Description: Returns true if the surface point has been specified,
//               false otherwise.  See get_surface_point().  Some
//               types of collisions may not compute the surface
//               point.
////////////////////////////////////////////////////////////////////
58
inline bool CollisionEntry::has_surface_point(void) const;

280 18 has_surface_normal 4 422 34 CollisionEntry::has_surface_normal 0 1 68 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_normal
//       Access: Published
//  Description: Returns true if the surface normal has been specified,
//               false otherwise.  See get_surface_normal().  Some
//               types of collisions may not compute the surface
//               normal.
////////////////////////////////////////////////////////////////////
59
inline bool CollisionEntry::has_surface_normal(void) const;

281 18 has_interior_point 4 422 34 CollisionEntry::has_interior_point 0 1 69 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_interior_point
//       Access: Published
//  Description: Returns true if the interior point has been specified,
//               false otherwise.  See get_interior_point().  Some
//               types of collisions may not compute the interior
//               point.
////////////////////////////////////////////////////////////////////
59
inline bool CollisionEntry::has_interior_point(void) const;

282 17 get_surface_point 4 422 33 CollisionEntry::get_surface_point 0 1 70 535
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_point
//       Access: Published
//  Description: Returns the point, on the surface of the "into"
//               object, at which a collision is detected.  This can
//               be thought of as the first point of intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
72
LPoint3f CollisionEntry::get_surface_point(NodePath const &space) const;

283 18 get_surface_normal 4 422 34 CollisionEntry::get_surface_normal 0 1 71 465
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_normal
//       Access: Published
//  Description: Returns the surface normal of the "into" object at
//               the point at which a collision is detected.
//
//               The normal will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
74
LVector3f CollisionEntry::get_surface_normal(NodePath const &space) const;

284 18 get_interior_point 4 422 34 CollisionEntry::get_interior_point 0 1 72 772
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_interior_point
//       Access: Published
//  Description: Returns the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).  It can be thought of as the deepest point
//               of intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
73
LPoint3f CollisionEntry::get_interior_point(NodePath const &space) const;

285 7 get_all 4 422 23 CollisionEntry::get_all 0 1 73 515
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_all
//       Access: Published
//  Description: Simultaneously transforms the surface point, surface
//               normal, and interior point of the collision into the
//               indicated coordinate space.
//
//               Returns true if all three properties are available,
//               or false if any one of them is not.
////////////////////////////////////////////////////////////////////
136
bool CollisionEntry::get_all(NodePath const &space, LPoint3f &surface_point, LVector3f &surface_normal, LPoint3f &interior_point) const;

286 6 output 4 422 22 CollisionEntry::output 0 1 74 222
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void CollisionEntry::output(ostream &out) const;

287 5 write 4 422 21 CollisionEntry::write 0 2 75 76 221
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void CollisionEntry::write(ostream &out, int indent_level = (0)) const;

288 14 get_class_type 4 422 30 CollisionEntry::get_class_type 0 1 77 0
55
static TypeHandle CollisionEntry::get_class_type(void);

289 15 ~CollisionEntry 4 422 31 CollisionEntry::~CollisionEntry 0 0 0
38
CollisionEntry::~CollisionEntry(void);

290 14 CollisionPlane 4 423 30 CollisionPlane::CollisionPlane 0 2 78 79 1531
// Filename: collisionPlane.I
// Created by:  drose (25Apr00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Default Constructor
//       Access: Protected
//  Description: This is only for the convenience of CollisionPolygon.
//               Normally, you should not attempt to create an
//               uninitialized CollisionPlane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline CollisionPlane::CollisionPlane(Planef const &plane);

291 10 get_normal 4 423 26 CollisionPlane::get_normal 0 1 80 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LVector3f CollisionPlane::get_normal(void) const;

292 13 dist_to_plane 4 423 29 CollisionPlane::dist_to_plane 0 1 81 228
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::dist_to_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline float CollisionPlane::dist_to_plane(LPoint3f const &point) const;

293 9 set_plane 4 423 25 CollisionPlane::set_plane 0 1 82 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::set_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void CollisionPlane::set_plane(Planef const &plane);

294 9 get_plane 4 423 25 CollisionPlane::get_plane 0 1 83 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline Planef const &CollisionPlane::get_plane(void) const;

295 14 get_class_type 4 423 30 CollisionPlane::get_class_type 0 1 84 0
55
static TypeHandle CollisionPlane::get_class_type(void);

296 15 ~CollisionPlane 4 423 31 CollisionPlane::~CollisionPlane 0 0 0
38
CollisionPlane::~CollisionPlane(void);

297 16 CollisionPolygon 4 424 34 CollisionPolygon::CollisionPolygon 0 3 85 86 87 1905
// Filename: collisionPolygon.I
// Created by:  drose (25Apr00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Private
//  Description: Creates an invalid polygon.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
105
inline CollisionPolygon::CollisionPolygon(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);

298 14 get_class_type 4 424 32 CollisionPolygon::get_class_type 0 1 88 0
57
static TypeHandle CollisionPolygon::get_class_type(void);

299 17 ~CollisionPolygon 4 424 35 CollisionPolygon::~CollisionPolygon 0 0 0
42
CollisionPolygon::~CollisionPolygon(void);

300 21 CollisionHandlerEvent 4 425 44 CollisionHandlerEvent::CollisionHandlerEvent 0 1 89 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::Constructor
//       Access: Public
//  Description: The default CollisionHandlerEvent will throw no
//               events.  Its pattern strings must first be set via a
//               call to add_in_pattern() and/or add_out_pattern().
////////////////////////////////////////////////////////////////////
51
CollisionHandlerEvent::CollisionHandlerEvent(void);

301 17 clear_in_patterns 4 425 40 CollisionHandlerEvent::clear_in_patterns 0 1 90 323
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_in_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_in_pattern.
////////////////////////////////////////////////////////////////////
59
inline void CollisionHandlerEvent::clear_in_patterns(void);

302 14 add_in_pattern 4 425 37 CollisionHandlerEvent::add_in_pattern 0 1 91 2355
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_in_pattern
//       Access: Public
//  Description: Adds a pattern string to the list of events that will
//               be generated in response to a collision.  The pattern
//               string describes how the event name will be composed.
//               It is a string that may contain any of the following:
//
//                  %fn  - the name of the "from" object's node
//                  %in  - the name of the "into" object's node
//                  %fs  - 't' if "from" is tangible, 'i' if intangible
//                  %is  - 't' if "into" is tangible, 'i' if intangible
//                  %ig  - 'c' if the collision is into a
//                          CollisionNode, 'g' if it is a geom.
//
//                  %(tag)fh - generate event only if "from" node has
//                          the indicated net tag.
//                  %(tag)fx - generate event only if "from" node does 
//                          not have the indicated net tag.
//                  %(tag)ih - generate event only if "into" node has
//                          the indicated net tag.
//                  %(tag)ix - generate event only if "into" node does 
//                          not have the indicated net tag.
//                  %(tag)ft - the indicated net tag value of the "from" node.
//                  %(tag)it - the indicated net tag value of the "into" node.
//
//               Parentheses in the above are literal and should be
//               included in the actual pattern.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
90
inline void CollisionHandlerEvent::add_in_pattern(basic_string< char > const &in_pattern);

303 14 set_in_pattern 4 425 37 CollisionHandlerEvent::set_in_pattern 0 1 92 395
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_in_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
90
inline void CollisionHandlerEvent::set_in_pattern(basic_string< char > const &in_pattern);

304 19 get_num_in_patterns 4 425 42 CollisionHandlerEvent::get_num_in_patterns 0 1 93 318
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_in_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
66
inline int CollisionHandlerEvent::get_num_in_patterns(void) const;

305 14 get_in_pattern 4 425 37 CollisionHandlerEvent::get_in_pattern 0 1 94 399
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_in_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_in_pattern().
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > CollisionHandlerEvent::get_in_pattern(int n) const;

306 20 clear_again_patterns 4 425 43 CollisionHandlerEvent::clear_again_patterns 0 1 95 329
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_again_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_again_pattern.
////////////////////////////////////////////////////////////////////
62
inline void CollisionHandlerEvent::clear_again_patterns(void);

307 17 add_again_pattern 4 425 40 CollisionHandlerEvent::add_again_pattern 0 1 96 1055
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_again_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *still* detected.  This event is
//               thrown each consecutive time a collision between two
//               particular nodes is detected, starting with the
//               second time.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
96
inline void CollisionHandlerEvent::add_again_pattern(basic_string< char > const &again_pattern);

308 17 set_again_pattern 4 425 40 CollisionHandlerEvent::set_again_pattern 0 1 97 398
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_again_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
96
inline void CollisionHandlerEvent::set_again_pattern(basic_string< char > const &again_pattern);

309 22 get_num_again_patterns 4 425 45 CollisionHandlerEvent::get_num_again_patterns 0 1 98 321
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_again_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
69
inline int CollisionHandlerEvent::get_num_again_patterns(void) const;

310 17 get_again_pattern 4 425 40 CollisionHandlerEvent::get_again_pattern 0 1 99 405
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_again_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_again_pattern().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > CollisionHandlerEvent::get_again_pattern(int n) const;

311 18 clear_out_patterns 4 425 41 CollisionHandlerEvent::clear_out_patterns 0 1 100 325
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_out_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_out_pattern.
////////////////////////////////////////////////////////////////////
60
inline void CollisionHandlerEvent::clear_out_patterns(void);

312 15 add_out_pattern 4 425 38 CollisionHandlerEvent::add_out_pattern 0 1 101 877
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_out_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *no longer* detected.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
92
inline void CollisionHandlerEvent::add_out_pattern(basic_string< char > const &out_pattern);

313 15 set_out_pattern 4 425 38 CollisionHandlerEvent::set_out_pattern 0 1 102 396
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_out_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
92
inline void CollisionHandlerEvent::set_out_pattern(basic_string< char > const &out_pattern);

314 20 get_num_out_patterns 4 425 43 CollisionHandlerEvent::get_num_out_patterns 0 1 103 319
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_out_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
67
inline int CollisionHandlerEvent::get_num_out_patterns(void) const;

315 15 get_out_pattern 4 425 38 CollisionHandlerEvent::get_out_pattern 0 1 104 401
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_out_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_out_pattern().
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > CollisionHandlerEvent::get_out_pattern(int n) const;

316 5 clear 4 425 28 CollisionHandlerEvent::clear 0 1 105 887
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear
//       Access: Public
//  Description: Empties the list of elements that all colliders are
//               known to be colliding with.  No "out" events will be
//               thrown; if the same collision is detected next frame,
//               a new "in" event will be thrown for each collision.
//
//               This can be called each frame to defeat the
//               persistent "in" event mechanism, which prevents the
//               same "in" event from being thrown repeatedly.
//               However, also see add_again_pattern(), which can be
//               used to set the event that is thrown when a collision
//               is detected for two or more consecutive frames.
////////////////////////////////////////////////////////////////////
40
void CollisionHandlerEvent::clear(void);

317 14 get_class_type 4 425 37 CollisionHandlerEvent::get_class_type 0 1 106 0
62
static TypeHandle CollisionHandlerEvent::get_class_type(void);

318 22 ~CollisionHandlerEvent 4 425 45 CollisionHandlerEvent::~CollisionHandlerEvent 0 0 0
52
CollisionHandlerEvent::~CollisionHandlerEvent(void);

319 12 add_collider 4 426 38 CollisionHandlerPhysical::add_collider 0 2 107 108 1159
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
//
//               The indicated DriveInterface will also be updated
//               with the target's new transform each frame.  This
//               method should be used when the target is directly
//               controlled by a DriveInterface.
////////////////////////////////////////////////////////////////////
94
void CollisionHandlerPhysical::add_collider(NodePath const &collider, NodePath const &target);

320 15 remove_collider 4 426 41 CollisionHandlerPhysical::remove_collider 0 1 109 336
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::remove_collider
//       Access: Published
//  Description: Removes the collider from the list of colliders that
//               this handler knows about.
////////////////////////////////////////////////////////////////////
73
bool CollisionHandlerPhysical::remove_collider(NodePath const &collider);

321 12 has_collider 4 426 38 CollisionHandlerPhysical::has_collider 0 1 110 335
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_collider
//       Access: Published
//  Description: Returns true if the handler knows about the indicated
//               collider, false otherwise.
////////////////////////////////////////////////////////////////////
76
bool CollisionHandlerPhysical::has_collider(NodePath const &collider) const;

322 15 clear_colliders 4 426 41 CollisionHandlerPhysical::clear_colliders 0 1 111 324
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_colliders
//       Access: Published
//  Description: Completely empties the list of colliders this handler
//               knows about.
////////////////////////////////////////////////////////////////////
53
void CollisionHandlerPhysical::clear_colliders(void);

323 10 set_center 4 426 36 CollisionHandlerPhysical::set_center 0 1 112 1241
// Filename: collisionHandlerPhysical.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::set_center
//       Access: Published
//  Description: Specifies an arbitrary NodePath that the handler is
//               always considered to be facing.  It does not detect
//               collisions with surfaces that appear to be facing
//               away from this NodePath.  This works best when the
//               collision surfaces in question are polygons.
////////////////////////////////////////////////////////////////////
73
inline void CollisionHandlerPhysical::set_center(NodePath const &center);

324 12 clear_center 4 426 38 CollisionHandlerPhysical::clear_center 0 1 113 291
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_center
//       Access: Published
//  Description: Clears the center NodePath specified with set_center.
////////////////////////////////////////////////////////////////////
57
inline void CollisionHandlerPhysical::clear_center(void);

325 10 get_center 4 426 36 CollisionHandlerPhysical::get_center 0 1 114 353
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::get_center
//       Access: Published
//  Description: Returns the NodePath specified with set_center, or
//               the empty NodePath if nothing has been specified.
////////////////////////////////////////////////////////////////////
72
inline NodePath const &CollisionHandlerPhysical::get_center(void) const;

326 10 has_center 4 426 36 CollisionHandlerPhysical::has_center 0 1 115 334
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_center
//       Access: Published
//  Description: Returns true if a NodePath has been specified with
//               set_center(), false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool CollisionHandlerPhysical::has_center(void) const;

327 11 has_contact 4 426 37 CollisionHandlerPhysical::has_contact 0 1 116 537
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_contact
//       Access: Public
//  Description: Did the handler make any contacts with anything
//               on the last collision pass?  Depending on how your
//               world is setup, this can be used to tell if the
//               handler is out of the world (i.e. out of bounds).
//               That is the original use of this call.
////////////////////////////////////////////////////////////////////
62
inline bool CollisionHandlerPhysical::has_contact(void) const;

328 14 get_class_type 4 426 40 CollisionHandlerPhysical::get_class_type 0 1 117 0
65
static TypeHandle CollisionHandlerPhysical::get_class_type(void);

329 21 CollisionHandlerFloor 4 427 44 CollisionHandlerFloor::CollisionHandlerFloor 0 1 118 230
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
CollisionHandlerFloor::CollisionHandlerFloor(void);

330 10 set_offset 4 427 33 CollisionHandlerFloor::set_offset 0 1 119 1098
// Filename: collisionHandlerFloor.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
60
inline void CollisionHandlerFloor::set_offset(float offset);

331 10 get_offset 4 427 33 CollisionHandlerFloor::get_offset 0 1 120 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
59
inline float CollisionHandlerFloor::get_offset(void) const;

332 9 set_reach 4 427 32 CollisionHandlerFloor::set_reach 0 1 121 317
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
58
inline void CollisionHandlerFloor::set_reach(float reach);

333 9 get_reach 4 427 32 CollisionHandlerFloor::get_reach 0 1 122 320
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
58
inline float CollisionHandlerFloor::get_reach(void) const;

334 16 set_max_velocity 4 427 39 CollisionHandlerFloor::set_max_velocity 0 1 123 469
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
////////////////////////////////////////////////////////////////////
67
inline void CollisionHandlerFloor::set_max_velocity(float max_vel);

335 16 get_max_velocity 4 427 39 CollisionHandlerFloor::get_max_velocity 0 1 124 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
////////////////////////////////////////////////////////////////////
65
inline float CollisionHandlerFloor::get_max_velocity(void) const;

336 14 get_class_type 4 427 37 CollisionHandlerFloor::get_class_type 0 1 125 0
62
static TypeHandle CollisionHandlerFloor::get_class_type(void);

337 23 CollisionHandlerGravity 4 428 48 CollisionHandlerGravity::CollisionHandlerGravity 0 1 126 232
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
CollisionHandlerGravity::CollisionHandlerGravity(void);

338 10 set_offset 4 428 35 CollisionHandlerGravity::set_offset 0 1 127 1102
// Filename: CollisionHandlerGravity.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
62
inline void CollisionHandlerGravity::set_offset(float offset);

339 10 get_offset 4 428 35 CollisionHandlerGravity::get_offset 0 1 128 418
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
61
inline float CollisionHandlerGravity::get_offset(void) const;

340 9 set_reach 4 428 34 CollisionHandlerGravity::set_reach 0 1 129 319
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
60
inline void CollisionHandlerGravity::set_reach(float reach);

341 9 get_reach 4 428 34 CollisionHandlerGravity::get_reach 0 1 130 322
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
60
inline float CollisionHandlerGravity::get_reach(void) const;

342 19 get_airborne_height 4 428 44 CollisionHandlerGravity::get_airborne_height 0 1 131 527
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_airborne_height
//       Access: Public
//  Description: Return the height of the object from the ground.
//
//               The object might not necessarily be at rest.  Use
//               is_on_ground() if you want to know whether the
//               object is on the ground and at rest.
//
//               See Also: is_in_outer_space()
////////////////////////////////////////////////////////////////////
70
inline float CollisionHandlerGravity::get_airborne_height(void) const;

343 12 is_on_ground 4 428 37 CollisionHandlerGravity::is_on_ground 0 1 132 256
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::is_on_ground
//       Access: Public
//  Description: Is the object at rest?
////////////////////////////////////////////////////////////////////
62
inline bool CollisionHandlerGravity::is_on_ground(void) const;

344 19 get_impact_velocity 4 428 44 CollisionHandlerGravity::get_impact_velocity 0 1 133 586
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_impact_velocity
//       Access: Public
//  Description: How hard did the object hit the ground.
//               This value is set on impact with the ground.
//               You may want to watch (poll) on is_on_groun() and
//               when that is true, call get_impact_velocity().
//               Normally I avoid polling, but we are calling
//               is_on_ground() frequently anyway.
////////////////////////////////////////////////////////////////////
70
inline float CollisionHandlerGravity::get_impact_velocity(void) const;

345 18 get_contact_normal 4 428 43 CollisionHandlerGravity::get_contact_normal 0 1 134 240
////////////////////////////////////////////////////////////////////
//    Function : CollisionHandlerGravity::get_contact_normal
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
80
inline LVector3f const &CollisionHandlerGravity::get_contact_normal(void) const;

346 12 add_velocity 4 428 37 CollisionHandlerGravity::add_velocity 0 1 135 451
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::add_velocity
//       Access: Public
//  Description: Adds the sepcified amount to the current velocity.
//               This is mostly here allow this common operation to
//               be faster for scripting, but it's also more concise
//               even in cpp.
////////////////////////////////////////////////////////////////////
66
inline void CollisionHandlerGravity::add_velocity(float velocity);

347 12 set_velocity 4 428 37 CollisionHandlerGravity::set_velocity 0 1 136 269
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_velocity
//       Access: Public
//  Description: Sets the current vertical velocity.
////////////////////////////////////////////////////////////////////
66
inline void CollisionHandlerGravity::set_velocity(float velocity);

348 12 get_velocity 4 428 37 CollisionHandlerGravity::get_velocity 0 1 137 681
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_velocity
//       Access: Public
//  Description: Gets the current vertical velocity.
//
//               Generally, negative values mean the object is in
//               free fall; while postive values mean the object has
//               vertical thrust.
//
//               A zero value does not necessarily mean the object
//               on the ground, it may also be weightless and/or at
//               the apex of its jump.
//
//               See Also: is_on_ground() and get_gravity()
////////////////////////////////////////////////////////////////////
63
inline float CollisionHandlerGravity::get_velocity(void) const;

349 11 set_gravity 4 428 36 CollisionHandlerGravity::set_gravity 0 1 138 278
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_gravity
//       Access: Public
//  Description: Sets the linear gravity force (always plumb).
////////////////////////////////////////////////////////////////////
64
inline void CollisionHandlerGravity::set_gravity(float gravity);

350 11 get_gravity 4 428 36 CollisionHandlerGravity::get_gravity 0 1 139 278
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_gravity
//       Access: Public
//  Description: Gets the linear gravity force (always plumb).
////////////////////////////////////////////////////////////////////
62
inline float CollisionHandlerGravity::get_gravity(void) const;

351 16 set_max_velocity 4 428 41 CollisionHandlerGravity::set_max_velocity 0 1 140 471
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
////////////////////////////////////////////////////////////////////
69
inline void CollisionHandlerGravity::set_max_velocity(float max_vel);

352 16 get_max_velocity 4 428 41 CollisionHandlerGravity::get_max_velocity 0 1 141 418
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
////////////////////////////////////////////////////////////////////
67
inline float CollisionHandlerGravity::get_max_velocity(void) const;

353 14 get_class_type 4 428 39 CollisionHandlerGravity::get_class_type 0 1 142 0
64
static TypeHandle CollisionHandlerGravity::get_class_type(void);

354 22 CollisionHandlerPusher 4 429 46 CollisionHandlerPusher::CollisionHandlerPusher 0 1 143 231
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
CollisionHandlerPusher::CollisionHandlerPusher(void);

355 14 set_horizontal 4 429 38 CollisionHandlerPusher::set_horizontal 0 1 144 920
// Filename: collisionHandlerPusher.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::set_horizontal
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void CollisionHandlerPusher::set_horizontal(bool flag);

356 14 get_horizontal 4 429 38 CollisionHandlerPusher::get_horizontal 0 1 145 234
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::get_horizontal
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool CollisionHandlerPusher::get_horizontal(void) const;

357 14 get_class_type 4 429 38 CollisionHandlerPusher::get_class_type 0 1 146 0
63
static TypeHandle CollisionHandlerPusher::get_class_type(void);

358 21 CollisionHandlerQueue 4 430 44 CollisionHandlerQueue::CollisionHandlerQueue 0 1 147 230
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
CollisionHandlerQueue::CollisionHandlerQueue(void);

359 12 sort_entries 4 430 35 CollisionHandlerQueue::sort_entries 0 1 148 537
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::sort_entries
//       Access: Public
//  Description: Sorts all the detected collisions front-to-back by
//               from_intersection_point() so that those intersection
//               points closest to the collider's origin (e.g., the
//               center of the CollisionSphere, or the point_a of a
//               CollisionSegment) appear first.
////////////////////////////////////////////////////////////////////
47
void CollisionHandlerQueue::sort_entries(void);

360 13 clear_entries 4 430 36 CollisionHandlerQueue::clear_entries 0 1 149 272
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::clear_entries
//       Access: Public
//  Description: Removes all the entries from the queue.
////////////////////////////////////////////////////////////////////
48
void CollisionHandlerQueue::clear_entries(void);

361 15 get_num_entries 4 430 38 CollisionHandlerQueue::get_num_entries 0 1 150 310
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_num_entries
//       Access: Public
//  Description: Returns the number of CollisionEntries detected last
//               pass.
////////////////////////////////////////////////////////////////////
55
int CollisionHandlerQueue::get_num_entries(void) const;

362 9 get_entry 4 430 32 CollisionHandlerQueue::get_entry 0 1 151 279
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_entry
//       Access: Public
//  Description: Returns the nth CollisionEntry detected last pass.
////////////////////////////////////////////////////////////////////
62
CollisionEntry *CollisionHandlerQueue::get_entry(int n) const;

363 14 get_class_type 4 430 37 CollisionHandlerQueue::get_class_type 0 1 152 0
62
static TypeHandle CollisionHandlerQueue::get_class_type(void);

364 22 ~CollisionHandlerQueue 4 430 45 CollisionHandlerQueue::~CollisionHandlerQueue 0 0 0
52
CollisionHandlerQueue::~CollisionHandlerQueue(void);

365 15 CollisionSphere 4 431 32 CollisionSphere::CollisionSphere 0 2 153 154 1682
// Filename: collisionSphere.I
// Created by:  drose (24Apr00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Default constructor
//       Access: Protected
//  Description: Creates an invalid sphere.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline CollisionSphere::CollisionSphere(LPoint3f const &center, float radius);

366 10 set_center 4 431 27 CollisionSphere::set_center 0 2 155 156 454
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void CollisionSphere::set_center(LPoint3f const &center);

367 10 get_center 4 431 27 CollisionSphere::get_center 0 1 157 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &CollisionSphere::get_center(void) const;

368 10 set_radius 4 431 27 CollisionSphere::set_radius 0 1 158 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void CollisionSphere::set_radius(float radius);

369 10 get_radius 4 431 27 CollisionSphere::get_radius 0 1 159 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline float CollisionSphere::get_radius(void) const;

370 14 get_class_type 4 431 31 CollisionSphere::get_class_type 0 1 160 0
56
static TypeHandle CollisionSphere::get_class_type(void);

371 16 ~CollisionSphere 4 431 33 CollisionSphere::~CollisionSphere 0 0 0
40
CollisionSphere::~CollisionSphere(void);

372 18 CollisionInvSphere 4 432 38 CollisionInvSphere::CollisionInvSphere 0 2 161 162 1697
// Filename: collisionInvSphere.I
// Created by:  drose (05Jan05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Default constructor
//       Access: Protected
//  Description: Creates an invalid sphere.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
84
inline CollisionInvSphere::CollisionInvSphere(LPoint3f const &center, float radius);

373 14 get_class_type 4 432 34 CollisionInvSphere::get_class_type 0 1 163 0
59
static TypeHandle CollisionInvSphere::get_class_type(void);

374 19 ~CollisionInvSphere 4 432 39 CollisionInvSphere::~CollisionInvSphere 0 0 0
46
CollisionInvSphere::~CollisionInvSphere(void);

375 12 CollisionRay 4 433 26 CollisionRay::CollisionRay 0 3 164 165 166 1797
// Filename: collisionRay.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Default Constructor
//       Access: Public
//  Description: Creates an invalid ray.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the ray via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
40
inline CollisionRay::CollisionRay(void);

376 10 set_origin 4 433 24 CollisionRay::set_origin 0 2 167 168 442
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void CollisionRay::set_origin(LPoint3f const &origin);

377 10 get_origin 4 433 24 CollisionRay::get_origin 0 1 169 220
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LPoint3f const &CollisionRay::get_origin(void) const;

378 13 set_direction 4 433 27 CollisionRay::set_direction 0 2 170 171 448
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void CollisionRay::set_direction(LVector3f const &direction);

379 13 get_direction 4 433 27 CollisionRay::get_direction 0 1 172 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LVector3f const &CollisionRay::get_direction(void) const;

380 13 set_from_lens 4 433 27 CollisionRay::set_from_lens 0 2 173 174 1166
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
////////////////////////////////////////////////////////////////////
74
bool CollisionRay::set_from_lens(LensNode *camera, LPoint2f const &point);

381 14 get_class_type 4 433 28 CollisionRay::get_class_type 0 1 175 0
53
static TypeHandle CollisionRay::get_class_type(void);

382 13 ~CollisionRay 4 433 27 CollisionRay::~CollisionRay 0 0 0
34
CollisionRay::~CollisionRay(void);

383 13 CollisionLine 4 434 28 CollisionLine::CollisionLine 0 3 176 177 178 1804
// Filename: collisionLine.I
// Created by:  drose (05Jan05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Default Constructor
//       Access: Public
//  Description: Creates an invalid line.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the line via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline CollisionLine::CollisionLine(void);

384 14 get_class_type 4 434 29 CollisionLine::get_class_type 0 1 179 0
54
static TypeHandle CollisionLine::get_class_type(void);

385 14 ~CollisionLine 4 434 29 CollisionLine::~CollisionLine 0 0 0
36
CollisionLine::~CollisionLine(void);

386 16 CollisionSegment 4 435 34 CollisionSegment::CollisionSegment 0 3 180 181 182 1825
// Filename: collisionSegment.I
// Created by:  drose (30Jan01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Default Constructor
//       Access: Public
//  Description: Creates an invalid segment.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the segment via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline CollisionSegment::CollisionSegment(void);

387 11 set_point_a 4 435 29 CollisionSegment::set_point_a 0 2 183 184 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void CollisionSegment::set_point_a(LPoint3f const &a);

388 11 get_point_a 4 435 29 CollisionSegment::get_point_a 0 1 185 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LPoint3f const &CollisionSegment::get_point_a(void) const;

389 11 set_point_b 4 435 29 CollisionSegment::set_point_b 0 2 186 187 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void CollisionSegment::set_point_b(LPoint3f const &b);

390 11 get_point_b 4 435 29 CollisionSegment::get_point_b 0 1 188 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LPoint3f const &CollisionSegment::get_point_b(void) const;

391 13 set_from_lens 4 435 31 CollisionSegment::set_from_lens 0 2 189 190 1192
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
////////////////////////////////////////////////////////////////////
78
bool CollisionSegment::set_from_lens(LensNode *camera, LPoint2f const &point);

392 14 get_class_type 4 435 32 CollisionSegment::get_class_type 0 1 191 0
57
static TypeHandle CollisionSegment::get_class_type(void);

393 17 ~CollisionSegment 4 435 35 CollisionSegment::~CollisionSegment 0 0 0
42
CollisionSegment::~CollisionSegment(void);

394 13 CollisionTube 4 436 28 CollisionTube::CollisionTube 0 2 192 193 1668
// Filename: collisionTube.I
// Created by:  drose (25Sep03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Default constructor
//       Access: Private
//  Description: Creates an invalid tube.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
inline CollisionTube::CollisionTube(LPoint3f const &a, LPoint3f const &db, float radius);

395 11 set_point_a 4 436 26 CollisionTube::set_point_a 0 2 194 195 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void CollisionTube::set_point_a(LPoint3f const &a);

396 11 get_point_a 4 436 26 CollisionTube::get_point_a 0 1 196 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint3f const &CollisionTube::get_point_a(void) const;

397 11 set_point_b 4 436 26 CollisionTube::set_point_b 0 2 197 198 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void CollisionTube::set_point_b(LPoint3f const &b);

398 11 get_point_b 4 436 26 CollisionTube::get_point_b 0 1 199 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint3f const &CollisionTube::get_point_b(void) const;

399 10 set_radius 4 436 25 CollisionTube::set_radius 0 1 200 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void CollisionTube::set_radius(float radius);

400 10 get_radius 4 436 25 CollisionTube::get_radius 0 1 201 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float CollisionTube::get_radius(void) const;

401 14 get_class_type 4 436 29 CollisionTube::get_class_type 0 1 202 0
54
static TypeHandle CollisionTube::get_class_type(void);

402 14 ~CollisionTube 4 436 29 CollisionTube::~CollisionTube 0 0 0
36
CollisionTube::~CollisionTube(void);

403 19 upcast_to_PandaNode 12 437 40 CollisionVisualizer::upcast_to_PandaNode 0 1 208 44
upcast from CollisionVisualizer to PandaNode
58
PandaNode *CollisionVisualizer::upcast_to_PandaNode(void);

404 31 downcast_to_CollisionVisualizer 12 420 42 PandaNode::downcast_to_CollisionVisualizer 0 1 209 46
downcast from PandaNode to CollisionVisualizer
70
CollisionVisualizer *PandaNode::downcast_to_CollisionVisualizer(void);

405 27 upcast_to_CollisionRecorder 12 437 48 CollisionVisualizer::upcast_to_CollisionRecorder 0 1 210 52
upcast from CollisionVisualizer to CollisionRecorder
74
CollisionRecorder *CollisionVisualizer::upcast_to_CollisionRecorder(void);

406 31 downcast_to_CollisionVisualizer 12 421 50 CollisionRecorder::downcast_to_CollisionVisualizer 0 1 211 54
downcast from CollisionRecorder to CollisionVisualizer
78
CollisionVisualizer *CollisionRecorder::downcast_to_CollisionVisualizer(void);

407 19 CollisionVisualizer 4 437 40 CollisionVisualizer::CollisionVisualizer 0 1 203 231
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
CollisionVisualizer::CollisionVisualizer(basic_string< char > const &name);

408 20 ~CollisionVisualizer 4 437 41 CollisionVisualizer::~CollisionVisualizer 0 0 239
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual CollisionVisualizer::~CollisionVisualizer(void);

409 13 set_viz_scale 4 437 34 CollisionVisualizer::set_viz_scale 0 1 204 688
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::set_viz_scale
//       Access: Published
//  Description: Scales the objects that are drawn to represent the
//               normals and points of the collisions.  By default,
//               these objects are drawn at an arbitrary scale which
//               is appropriate if the scene units are measured in
//               feet.  Change this scale accordinatly if the scene
//               units are measured on some other scale or if you need
//               to observe these objects from farther away.
////////////////////////////////////////////////////////////////////
64
inline void CollisionVisualizer::set_viz_scale(float viz_scale);

410 13 get_viz_scale 4 437 34 CollisionVisualizer::get_viz_scale 0 1 205 280
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::get_viz_scale
//       Access: Published
//  Description: Returns the value last set by set_viz_scale().
////////////////////////////////////////////////////////////////////
60
inline float CollisionVisualizer::get_viz_scale(void) const;

411 5 clear 4 437 26 CollisionVisualizer::clear 0 1 206 339
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::clear
//       Access: Published
//  Description: Removes all the visualization data from a previous
//               traversal and resets the visualizer to empty.
////////////////////////////////////////////////////////////////////
38
void CollisionVisualizer::clear(void);

412 14 get_class_type 4 437 35 CollisionVisualizer::get_class_type 0 1 207 0
60
static TypeHandle CollisionVisualizer::get_class_type(void);

211
1 14 Dtool_Hwcaemio 7 3 439 0 14 Dtool_Hwcaemio 0 
2 14 Dtool_HwcayNSW 7 7 441 215 14 Dtool_HwcayNSW 1 4 name 1 440  
3 14 Dtool_HwcaLY8j 7 7 441 215 14 Dtool_HwcaLY8j 0 
4 14 Dtool_Hwcadaty 4 9 443 0 14 Dtool_Hwcadaty 2 4 this 3 441  4 flag 1 442  
5 14 Dtool_HwcalqsH 6 10 442 0 14 Dtool_HwcalqsH 1 4 this 3 444  
6 14 Dtool_Hwca2H3O 4 11 443 0 14 Dtool_Hwca2H3O 3 4 this 3 441  8 collider 1 446  7 handler 1 449  
7 14 Dtool_HwcaM6MA 6 12 442 0 14 Dtool_HwcaM6MA 2 4 this 3 441  8 collider 1 446  
8 14 Dtool_HwcaWy10 6 13 442 0 14 Dtool_HwcaWy10 2 4 this 3 444  8 collider 1 446  
9 14 Dtool_HwcaO3k0 6 14 450 0 14 Dtool_HwcaO3k0 1 4 this 3 444  
10 14 Dtool_Hwca8iE2 7 15 451 0 14 Dtool_Hwca8iE2 2 4 this 3 444  1 n 1 450  
11 14 Dtool_HwcaHSoX 7 16 449 213 14 Dtool_HwcaHSoX 2 4 this 3 444  8 collider 1 446  
12 14 Dtool_Hwcaz8jc 4 17 443 0 14 Dtool_Hwcaz8jc 1 4 this 3 441  
13 14 Dtool_HwcaIgJi 4 18 443 0 14 Dtool_HwcaIgJi 2 4 this 3 441  4 root 1 446  
14 14 Dtool_HwcatQ7L 4 19 443 0 14 Dtool_HwcatQ7L 2 4 this 3 441  4 root 1 446  
15 14 Dtool_HwcahkD3 4 20 443 0 14 Dtool_HwcahkD3 2 4 this 3 441  8 recorder 1 452  
16 14 Dtool_Hwcakrr7 6 21 442 0 14 Dtool_Hwcakrr7 1 4 this 3 444  
17 14 Dtool_Hwcauo3a 6 22 452 0 14 Dtool_Hwcauo3a 1 4 this 3 444  
18 14 Dtool_HwcaQmCi 4 23 443 0 14 Dtool_HwcaQmCi 1 4 this 3 441  
19 14 Dtool_HwcadHFN 6 24 453 0 14 Dtool_HwcadHFN 2 4 this 3 441  4 root 1 446  
20 14 Dtool_HwcaMk_a 4 25 443 0 14 Dtool_HwcaMk_a 1 4 this 3 441  
21 14 Dtool_HwcaKrH1 4 26 443 0 14 Dtool_HwcaKrH1 2 4 this 3 444  3 out 1 454  
22 14 Dtool_HwcaFI_7 4 27 443 0 14 Dtool_HwcaFI_7 3 4 this 3 444  3 out 1 454  12 indent_level 1 450  
23 14 Dtool_HwcaXfKF 4 30 443 0 14 Dtool_HwcaXfKF 2 4 this 3 456  8 tangible 1 442  
24 14 Dtool_HwcaPJ9V 6 31 442 0 14 Dtool_HwcaPJ9V 1 4 this 3 457  
25 14 Dtool_HwcaXl2n 4 32 443 0 14 Dtool_HwcaXl2n 2 4 this 3 456  16 effective_normal 1 459  
26 14 Dtool_HwcaMg6D 4 33 443 0 14 Dtool_HwcaMg6D 1 4 this 3 456  
27 14 Dtool_HwcaUtHP 6 34 442 0 14 Dtool_HwcaUtHP 1 4 this 3 457  
28 14 Dtool_Hwca8DHC 6 35 459 0 14 Dtool_Hwca8DHC 1 4 this 3 457  
29 14 Dtool_HwcaBuoM 4 36 443 0 14 Dtool_HwcaBuoM 2 4 this 3 456  24 respect_effective_normal 1 442  
30 14 Dtool_HwcaGbQo 6 37 442 0 14 Dtool_HwcaGbQo 1 4 this 3 457  
31 14 Dtool_HwcaipKu 7 38 464 0 14 Dtool_HwcaipKu 1 4 this 3 457  
32 14 Dtool_HwcadFP2 4 39 443 0 14 Dtool_HwcadFP2 2 4 this 3 457  3 out 1 454  
33 14 Dtool_HwcatNak 4 40 443 0 14 Dtool_HwcatNak 3 4 this 3 457  3 out 1 454  12 indent_level 1 450  
34 14 Dtool_HwcaSwM3 4 40 443 0 14 Dtool_HwcaSwM3 2 4 this 3 457  3 out 1 454  
35 14 Dtool_HwcaLN1N 7 41 439 0 14 Dtool_HwcaLN1N 0 
36 14 Dtool_Hwcax_1r 7 44 465 0 14 Dtool_Hwcax_1r 1 4 name 1 440  
37 14 Dtool_HwcaxXyb 4 45 443 0 14 Dtool_HwcaxXyb 2 4 this 3 465  4 mask 1 466  
38 14 Dtool_HwcajgOW 4 46 443 0 14 Dtool_HwcajgOW 2 4 this 3 465  4 mask 1 466  
39 14 Dtool_HwcaYvsW 4 47 443 0 14 Dtool_HwcaYvsW 2 4 this 3 465  4 mask 1 466  
40 14 Dtool_HwcaY8vI 7 48 466 0 14 Dtool_HwcaY8vI 1 4 this 3 468  
41 14 Dtool_Hwcax1PJ 7 49 466 0 14 Dtool_Hwcax1PJ 1 4 this 3 468  
42 14 Dtool_HwcaO_9H 4 50 443 0 14 Dtool_HwcaO_9H 2 4 this 3 465  4 flag 1 442  
43 14 Dtool_Hwca5KPh 6 51 442 0 14 Dtool_Hwca5KPh 1 4 this 3 468  
44 14 Dtool_Hwca7zaG 4 52 443 0 14 Dtool_Hwca7zaG 1 4 this 3 465  
45 14 Dtool_HwcaqYJk 6 53 450 0 14 Dtool_HwcaqYJk 1 4 this 3 468  
46 14 Dtool_HwcajUdZ 7 54 456 0 14 Dtool_HwcajUdZ 2 4 this 3 468  1 n 1 450  
47 14 Dtool_HwcaYq_i 4 55 443 0 14 Dtool_HwcaYq_i 3 4 this 3 465  1 n 1 450  5 solid 1 456  
48 14 Dtool_HwcaQ94l 4 56 443 0 14 Dtool_HwcaQ94l 2 4 this 3 465  1 n 1 450  
49 14 Dtool_Hwca4WYW 6 57 450 0 14 Dtool_Hwca4WYW 2 4 this 3 465  5 solid 1 456  
50 14 Dtool_HwcavD0G 7 58 466 0 14 Dtool_HwcavD0G 0 
51 14 Dtool_HwcajzU3 7 59 439 0 14 Dtool_HwcajzU3 0 
52 14 Dtool_HwcarZlp 4 62 443 0 14 Dtool_HwcarZlp 2 4 this 3 470  3 out 1 454  
53 14 Dtool_HwcayqSE 7 63 439 0 14 Dtool_HwcayqSE 0 
54 14 Dtool_HwcaUwJJ 7 64 439 0 14 Dtool_HwcaUwJJ 1 4 this 3 470  
55 14 Dtool_HwcastZa 6 65 450 0 14 Dtool_HwcastZa 1 4 this 3 470  
56 14 Dtool_HwcaGwYK 7 67 457 0 14 Dtool_HwcaGwYK 1 4 this 3 472  
57 14 Dtool_HwcauTcn 6 68 442 0 14 Dtool_HwcauTcn 1 4 this 3 472  
58 14 Dtool_HwcaGQba 7 69 457 0 14 Dtool_HwcaGQba 1 4 this 3 472  
59 14 Dtool_Hwcae4xC 7 70 465 0 14 Dtool_Hwcae4xC 1 4 this 3 472  
60 14 Dtool_Hwca_40S 7 71 474 0 14 Dtool_Hwca_40S 1 4 this 3 472  
61 14 Dtool_HwcacMQX 7 72 451 0 14 Dtool_HwcacMQX 1 4 this 3 472  
62 14 Dtool_Hwca83Sn 7 73 451 0 14 Dtool_Hwca83Sn 1 4 this 3 472  
63 14 Dtool_HwcaRUDs 6 74 442 0 14 Dtool_HwcaRUDs 1 4 this 3 472  
64 14 Dtool_HwcahJuh 4 75 443 0 14 Dtool_HwcahJuh 2 4 this 3 475  5 point 1 476  
65 14 Dtool_HwcaSvQs 4 76 443 0 14 Dtool_HwcaSvQs 2 4 this 3 475  6 normal 1 459  
66 14 Dtool_HwcaIgiu 4 77 443 0 14 Dtool_HwcaIgiu 2 4 this 3 475  5 point 1 476  
67 14 Dtool_HwcaIa3H 6 78 442 0 14 Dtool_HwcaIa3H 1 4 this 3 472  
68 14 Dtool_HwcaX6_A 6 79 442 0 14 Dtool_HwcaX6_A 1 4 this 3 472  
69 14 Dtool_HwcaoXP3 6 80 442 0 14 Dtool_HwcaoXP3 1 4 this 3 472  
70 14 Dtool_HwcahuLD 7 81 479 0 14 Dtool_HwcahuLD 2 4 this 3 472  5 space 1 446  
71 14 Dtool_Hwcab0T_ 7 82 480 0 14 Dtool_Hwcab0T_ 2 4 this 3 472  5 space 1 446  
72 14 Dtool_HwcaBjl0 7 83 479 0 14 Dtool_HwcaBjl0 2 4 this 3 472  5 space 1 446  
73 14 Dtool_Hwca_a_e 6 84 442 0 14 Dtool_Hwca_a_e 5 4 this 3 472  5 space 1 446  13 surface_point 1 479  14 surface_normal 1 480  14 interior_point 1 479  
74 14 Dtool_HwcawXJC 4 85 443 0 14 Dtool_HwcawXJC 2 4 this 3 472  3 out 1 454  
75 14 Dtool_Hwca2JVw 4 86 443 0 14 Dtool_Hwca2JVw 3 4 this 3 472  3 out 1 454  12 indent_level 1 450  
76 14 Dtool_HwcaJrFD 4 86 443 0 14 Dtool_HwcaJrFD 2 4 this 3 472  3 out 1 454  
77 14 Dtool_HwcaSIuZ 7 87 439 0 14 Dtool_HwcaSIuZ 0 
78 14 Dtool_Hwca21w1 7 90 483 296 14 Dtool_Hwca21w1 1 4 copy 1 481  
79 14 Dtool_Hwcalkhc 7 90 483 296 14 Dtool_Hwcalkhc 1 5 plane 1 484  
80 14 Dtool_HwcamYK9 7 91 480 0 14 Dtool_HwcamYK9 1 4 this 3 481  
81 14 Dtool_HwcaOb8M 6 92 487 0 14 Dtool_HwcaOb8M 2 4 this 3 481  5 point 1 476  
82 14 Dtool_HwcaAQAO 4 93 443 0 14 Dtool_HwcaAQAO 2 4 this 3 483  5 plane 1 484  
83 14 Dtool_Hwcar8W5 6 94 484 0 14 Dtool_Hwcar8W5 1 4 this 3 481  
84 14 Dtool_Hwca8byU 7 95 439 0 14 Dtool_Hwca8byU 0 
85 14 Dtool_HwcaLCpw 7 98 488 299 14 Dtool_HwcaLCpw 2 5 begin 1 476  3 end 1 476  
86 14 Dtool_Hwcadvbe 7 98 488 299 14 Dtool_Hwcadvbe 3 1 a 1 489  1 b 1 489  1 c 1 489  
87 14 Dtool_HwcaU3Jm 7 98 488 299 14 Dtool_HwcaU3Jm 4 1 a 1 489  1 b 1 489  1 c 1 489  1 d 1 489  
88 14 Dtool_HwcaI99a 7 99 439 0 14 Dtool_HwcaI99a 0 
89 14 Dtool_HwcaETvw 7 102 492 318 14 Dtool_HwcaETvw 0 
90 14 Dtool_HwcaS2HY 4 103 443 0 14 Dtool_HwcaS2HY 1 4 this 3 492  
91 14 Dtool_Hwca_2Bj 4 104 443 0 14 Dtool_Hwca_2Bj 2 4 this 3 492  10 in_pattern 1 440  
92 14 Dtool_HwcakSzo 4 105 443 0 14 Dtool_HwcakSzo 2 4 this 3 492  10 in_pattern 1 440  
93 14 Dtool_Hwcac0hf 6 106 450 0 14 Dtool_Hwcac0hf 1 4 this 3 493  
94 14 Dtool_HwcalCzc 6 107 440 0 14 Dtool_HwcalCzc 2 4 this 3 493  1 n 1 450  
95 14 Dtool_Hwcaf7gg 4 108 443 0 14 Dtool_Hwcaf7gg 1 4 this 3 492  
96 14 Dtool_HwcaUwhr 4 109 443 0 14 Dtool_HwcaUwhr 2 4 this 3 492  13 again_pattern 1 440  
97 14 Dtool_HwcaGYTx 4 110 443 0 14 Dtool_HwcaGYTx 2 4 this 3 492  13 again_pattern 1 440  
98 14 Dtool_Hwcati_4 6 111 450 0 14 Dtool_Hwcati_4 1 4 this 3 493  
99 14 Dtool_HwcaeNwh 6 112 440 0 14 Dtool_HwcaeNwh 2 4 this 3 493  1 n 1 450  
100 14 Dtool_HwcajRM0 4 113 443 0 14 Dtool_HwcajRM0 1 4 this 3 492  
101 14 Dtool_HwcaLN0g 4 114 443 0 14 Dtool_HwcaLN0g 2 4 this 3 492  11 out_pattern 1 440  
102 14 Dtool_HwcanKnm 4 115 443 0 14 Dtool_HwcanKnm 2 4 this 3 492  11 out_pattern 1 440  
103 14 Dtool_HwcaClvc 6 116 450 0 14 Dtool_HwcaClvc 1 4 this 3 493  
104 14 Dtool_HwcaOFH_ 6 117 440 0 14 Dtool_HwcaOFH_ 2 4 this 3 493  1 n 1 450  
105 14 Dtool_HwcavtnS 4 118 443 0 14 Dtool_HwcavtnS 1 4 this 3 492  
106 14 Dtool_HwcaYcqn 7 119 439 0 14 Dtool_HwcaYcqn 0 
107 14 Dtool_HwcaGz2x 4 122 443 0 14 Dtool_HwcaGz2x 3 4 this 3 495  8 collider 1 446  6 target 1 446  
108 14 Dtool_HwcainQs 4 122 443 0 14 Dtool_HwcainQs 4 4 this 3 495  8 collider 1 446  6 target 1 446  15 drive_interface 1 496  
109 14 Dtool_Hwca8hFg 6 123 442 0 14 Dtool_Hwca8hFg 2 4 this 3 495  8 collider 1 446  
110 14 Dtool_HwcatNFK 6 124 442 0 14 Dtool_HwcatNFK 2 4 this 3 498  8 collider 1 446  
111 14 Dtool_HwcaUoUz 4 125 443 0 14 Dtool_HwcaUoUz 1 4 this 3 495  
112 14 Dtool_Hwca9CVE 4 126 443 0 14 Dtool_Hwca9CVE 2 4 this 3 495  6 center 1 446  
113 14 Dtool_HwcaRo9a 4 127 443 0 14 Dtool_HwcaRo9a 1 4 this 3 495  
114 14 Dtool_Hwca_dUV 6 128 446 0 14 Dtool_Hwca_dUV 1 4 this 3 498  
115 14 Dtool_Hwcaf3XJ 6 129 442 0 14 Dtool_Hwcaf3XJ 1 4 this 3 498  
116 14 Dtool_HwcaA0o_ 6 130 442 0 14 Dtool_HwcaA0o_ 1 4 this 3 498  
117 14 Dtool_HwcaNl13 7 131 439 0 14 Dtool_HwcaNl13 0 
118 14 Dtool_Hwca3EUx 7 133 500 318 14 Dtool_Hwca3EUx 0 
119 14 Dtool_Hwca3NQk 4 134 443 0 14 Dtool_Hwca3NQk 2 4 this 3 500  6 offset 1 487  
120 14 Dtool_HwcaG9Un 6 135 487 0 14 Dtool_HwcaG9Un 1 4 this 3 501  
121 14 Dtool_HwcaLik1 4 136 443 0 14 Dtool_HwcaLik1 2 4 this 3 500  5 reach 1 487  
122 14 Dtool_HwcaTc80 6 137 487 0 14 Dtool_HwcaTc80 1 4 this 3 501  
123 14 Dtool_Hwca4LRc 4 138 443 0 14 Dtool_Hwca4LRc 2 4 this 3 500  7 max_vel 1 487  
124 14 Dtool_HwcaS6Z5 6 139 487 0 14 Dtool_HwcaS6Z5 1 4 this 3 501  
125 14 Dtool_HwcaHYw3 7 140 439 0 14 Dtool_HwcaHYw3 0 
126 14 Dtool_Hwcay_jT 7 142 503 318 14 Dtool_Hwcay_jT 0 
127 14 Dtool_Hwca5C9R 4 143 443 0 14 Dtool_Hwca5C9R 2 4 this 3 503  6 offset 1 487  
128 14 Dtool_Hwcau78c 6 144 487 0 14 Dtool_Hwcau78c 1 4 this 3 504  
129 14 Dtool_HwcaV1C6 4 145 443 0 14 Dtool_HwcaV1C6 2 4 this 3 503  5 reach 1 487  
130 14 Dtool_Hwca22RV 6 146 487 0 14 Dtool_Hwca22RV 1 4 this 3 504  
131 14 Dtool_HwcalkVy 6 147 487 0 14 Dtool_HwcalkVy 1 4 this 3 504  
132 14 Dtool_HwcaI07o 6 148 442 0 14 Dtool_HwcaI07o 1 4 this 3 504  
133 14 Dtool_HwcabFxY 6 149 487 0 14 Dtool_HwcabFxY 1 4 this 3 504  
134 14 Dtool_HwcaKQo4 6 150 459 0 14 Dtool_HwcaKQo4 1 4 this 3 504  
135 14 Dtool_Hwcawddg 4 151 443 0 14 Dtool_Hwcawddg 2 4 this 3 503  8 velocity 1 487  
136 14 Dtool_HwcaXI_M 4 152 443 0 14 Dtool_HwcaXI_M 2 4 this 3 503  8 velocity 1 487  
137 14 Dtool_HwcarnWU 6 153 487 0 14 Dtool_HwcarnWU 1 4 this 3 504  
138 14 Dtool_HwcamWBh 4 154 443 0 14 Dtool_HwcamWBh 2 4 this 3 503  7 gravity 1 487  
139 14 Dtool_HwcamZKk 6 155 487 0 14 Dtool_HwcamZKk 1 4 this 3 504  
140 14 Dtool_Hwcakg9z 4 156 443 0 14 Dtool_Hwcakg9z 2 4 this 3 503  7 max_vel 1 487  
141 14 Dtool_HwcalxjB 6 157 487 0 14 Dtool_HwcalxjB 1 4 this 3 504  
142 14 Dtool_HwcaJ2aU 7 158 439 0 14 Dtool_HwcaJ2aU 0 
143 14 Dtool_HwcaOYFg 7 160 506 318 14 Dtool_HwcaOYFg 0 
144 14 Dtool_HwcaLy7k 4 161 443 0 14 Dtool_HwcaLy7k 2 4 this 3 506  4 flag 1 442  
145 14 Dtool_Hwca9VDN 6 162 442 0 14 Dtool_Hwca9VDN 1 4 this 3 507  
146 14 Dtool_HwcaQVou 7 163 439 0 14 Dtool_HwcaQVou 0 
147 14 Dtool_HwcaQGY4 7 165 509 364 14 Dtool_HwcaQGY4 0 
148 14 Dtool_Hwca4_OE 4 166 443 0 14 Dtool_Hwca4_OE 1 4 this 3 509  
149 14 Dtool_HwcaZKav 4 167 443 0 14 Dtool_HwcaZKav 1 4 this 3 509  
150 14 Dtool_Hwca0Ndh 6 168 450 0 14 Dtool_Hwca0Ndh 1 4 this 3 510  
151 14 Dtool_HwcabEk_ 7 169 475 289 14 Dtool_HwcabEk_ 2 4 this 3 510  1 n 1 450  
152 14 Dtool_Hwcamngh 7 170 439 0 14 Dtool_Hwcamngh 0 
153 14 Dtool_HwcaLNNB 7 173 512 371 14 Dtool_HwcaLNNB 2 6 center 1 476  6 radius 1 487  
154 14 Dtool_Hwca2Rzm 7 173 512 371 14 Dtool_Hwca2Rzm 4 2 cx 1 487  2 cy 1 487  2 cz 1 487  6 radius 1 487  
155 14 Dtool_Hwca3CUl 4 174 443 0 14 Dtool_Hwca3CUl 2 4 this 3 512  6 center 1 476  
156 14 Dtool_HwcaodaV 4 174 443 0 14 Dtool_HwcaodaV 4 4 this 3 512  1 x 1 487  1 y 1 487  1 z 1 487  
157 14 Dtool_HwcazgAq 6 175 476 0 14 Dtool_HwcazgAq 1 4 this 3 513  
158 14 Dtool_HwcauEwq 4 176 443 0 14 Dtool_HwcauEwq 2 4 this 3 512  6 radius 1 487  
159 14 Dtool_HwcaLSzr 6 177 487 0 14 Dtool_HwcaLSzr 1 4 this 3 513  
160 14 Dtool_HwcaOm79 7 178 439 0 14 Dtool_HwcaOm79 0 
161 14 Dtool_Hwca_yWY 7 181 515 374 14 Dtool_Hwca_yWY 2 6 center 1 476  6 radius 1 487  
162 14 Dtool_HwcaUKHB 7 181 515 374 14 Dtool_HwcaUKHB 4 2 cx 1 487  2 cy 1 487  2 cz 1 487  6 radius 1 487  
163 14 Dtool_Hwca9Ep8 7 182 439 0 14 Dtool_Hwca9Ep8 0 
164 14 Dtool_HwcaOnzJ 7 185 516 382 14 Dtool_HwcaOnzJ 0 
165 14 Dtool_HwcauWsc 7 185 516 382 14 Dtool_HwcauWsc 2 6 origin 1 476  9 direction 1 459  
166 14 Dtool_HwcasJco 7 185 516 382 14 Dtool_HwcasJco 6 2 ox 1 487  2 oy 1 487  2 oz 1 487  2 dx 1 487  2 dy 1 487  2 dz 1 487  
167 14 Dtool_HwcaWQg4 4 186 443 0 14 Dtool_HwcaWQg4 2 4 this 3 516  6 origin 1 476  
168 14 Dtool_HwcaCEZ5 4 186 443 0 14 Dtool_HwcaCEZ5 4 4 this 3 516  1 x 1 487  1 y 1 487  1 z 1 487  
169 14 Dtool_Hwcao7AW 6 187 476 0 14 Dtool_Hwcao7AW 1 4 this 3 517  
170 14 Dtool_HwcaFnJ_ 4 188 443 0 14 Dtool_HwcaFnJ_ 2 4 this 3 516  9 direction 1 459  
171 14 Dtool_Hwcau5k9 4 188 443 0 14 Dtool_Hwcau5k9 4 4 this 3 516  1 x 1 487  1 y 1 487  1 z 1 487  
172 14 Dtool_Hwcaxcuk 6 189 459 0 14 Dtool_Hwcaxcuk 1 4 this 3 517  
173 14 Dtool_HwcaDz4_ 6 190 442 0 14 Dtool_HwcaDz4_ 3 4 this 3 516  6 camera 1 519  5 point 1 521  
174 14 Dtool_HwcakXhs 6 190 442 0 14 Dtool_HwcakXhs 4 4 this 3 516  6 camera 1 519  2 px 1 487  2 py 1 487  
175 14 Dtool_HwcaVl1_ 7 191 439 0 14 Dtool_HwcaVl1_ 0 
176 14 Dtool_Hwcabj0W 7 194 524 385 14 Dtool_Hwcabj0W 0 
177 14 Dtool_HwcakrPl 7 194 524 385 14 Dtool_HwcakrPl 2 6 origin 1 476  9 direction 1 459  
178 14 Dtool_HwcaXh24 7 194 524 385 14 Dtool_HwcaXh24 6 2 ox 1 487  2 oy 1 487  2 oz 1 487  2 dx 1 487  2 dy 1 487  2 dz 1 487  
179 14 Dtool_HwcaRXQf 7 195 439 0 14 Dtool_HwcaRXQf 0 
180 14 Dtool_HwcaG_0_ 7 198 525 393 14 Dtool_HwcaG_0_ 0 
181 14 Dtool_HwcahcIM 7 198 525 393 14 Dtool_HwcahcIM 2 1 a 1 476  2 db 1 476  
182 14 Dtool_HwcaGSlK 7 198 525 393 14 Dtool_HwcaGSlK 6 2 ax 1 487  2 ay 1 487  2 az 1 487  2 bx 1 487  2 by 1 487  2 bz 1 487  
183 14 Dtool_Hwca5ebw 4 199 443 0 14 Dtool_Hwca5ebw 2 4 this 3 525  1 a 1 476  
184 14 Dtool_HwcayePy 4 199 443 0 14 Dtool_HwcayePy 4 4 this 3 525  1 x 1 487  1 y 1 487  1 z 1 487  
185 14 Dtool_HwcaxXkX 6 200 476 0 14 Dtool_HwcaxXkX 1 4 this 3 526  
186 14 Dtool_HwcayVbM 4 201 443 0 14 Dtool_HwcayVbM 2 4 this 3 525  1 b 1 476  
187 14 Dtool_Hwca1bPO 4 201 443 0 14 Dtool_Hwca1bPO 4 4 this 3 525  1 x 1 487  1 y 1 487  1 z 1 487  
188 14 Dtool_Hwca5Kkz 6 202 476 0 14 Dtool_Hwca5Kkz 1 4 this 3 526  
189 14 Dtool_HwcalPim 6 203 442 0 14 Dtool_HwcalPim 3 4 this 3 525  6 camera 1 519  5 point 1 521  
190 14 Dtool_Hwcaq5Ut 6 203 442 0 14 Dtool_Hwcaq5Ut 4 4 this 3 525  6 camera 1 519  2 px 1 487  2 py 1 487  
191 14 Dtool_HwcakImW 7 204 439 0 14 Dtool_HwcakImW 0 
192 14 Dtool_HwcayNS4 7 207 528 402 14 Dtool_HwcayNS4 3 1 a 1 476  2 db 1 476  6 radius 1 487  
193 14 Dtool_Hwcae_eG 7 207 528 402 14 Dtool_Hwcae_eG 7 2 ax 1 487  2 ay 1 487  2 az 1 487  2 bx 1 487  2 by 1 487  2 bz 1 487  6 radius 1 487  
194 14 Dtool_Hwca8Wt6 4 208 443 0 14 Dtool_Hwca8Wt6 2 4 this 3 528  1 a 1 476  
195 14 Dtool_Hwca2wJc 4 208 443 0 14 Dtool_Hwca2wJc 4 4 this 3 528  1 x 1 487  1 y 1 487  1 z 1 487  
196 14 Dtool_Hwcaoxl7 6 209 476 0 14 Dtool_Hwcaoxl7 1 4 this 3 529  
197 14 Dtool_HwcacSS7 4 210 443 0 14 Dtool_HwcacSS7 2 4 this 3 528  1 b 1 476  
198 14 Dtool_HwcaWPxc 4 210 443 0 14 Dtool_HwcaWPxc 4 4 this 3 528  1 x 1 487  1 y 1 487  1 z 1 487  
199 14 Dtool_HwcaI1M8 6 211 476 0 14 Dtool_HwcaI1M8 1 4 this 3 529  
200 14 Dtool_Hwca_G54 4 212 443 0 14 Dtool_Hwca_G54 2 4 this 3 528  6 radius 1 487  
201 14 Dtool_HwcaSKpL 6 213 487 0 14 Dtool_HwcaSKpL 1 4 this 3 529  
202 14 Dtool_Hwcaur7C 7 214 439 0 14 Dtool_Hwcaur7C 0 
203 14 Dtool_HwcaXmWq 7 221 453 408 14 Dtool_HwcaXmWq 1 4 name 1 440  
204 14 Dtool_Hwca5_3V 4 223 443 0 14 Dtool_Hwca5_3V 2 4 this 3 453  9 viz_scale 1 487  
205 14 Dtool_HwcaWkQD 6 224 487 0 14 Dtool_HwcaWkQD 1 4 this 3 531  
206 14 Dtool_HwcavSrC 4 225 443 0 14 Dtool_HwcavSrC 1 4 this 3 453  
207 14 Dtool_Hwca5C_m 7 226 439 0 14 Dtool_Hwca5C_m 0 
208 14 Dtool_Hwcaq3Vo 7 217 474 0 14 Dtool_Hwcaq3Vo 1 4 this 3 453  
209 14 Dtool_Hwcafx9L 7 218 453 408 14 Dtool_Hwcafx9L 1 4 this 3 474  
210 14 Dtool_Hwca1mI9 6 219 452 0 14 Dtool_Hwca1mI9 1 4 this 3 453  
211 14 Dtool_HwcaaJgA 7 220 453 408 14 Dtool_HwcaaJgA 1 4 this 3 452  
120
413 16 CollisionHandler 141313 16 CollisionHandler 16 CollisionHandler 0 0 0 0 213 0 1 212 0 1 0 414 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandler
// Description : The abstract interface to a number of classes that
//               decide what to do when a collision is detected.  One
//               of these must be assigned to the CollisionTraverser
//               that is processing collisions in order to specify how
//               to dispatch detected collisions.
////////////////////////////////////////////////////////////////////

414 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

415 18 CollisionTraverser 26625 18 CollisionTraverser 18 CollisionTraverser 0 0 0 1 214 215 0 19 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 0 1 0 416 0 0 0 0 765
////////////////////////////////////////////////////////////////////
//       Class : CollisionTraverser
// Description : This class manages the traversal through the scene
//               graph to detect collisions.  It holds ownership of a
//               number of collider objects, each of which is a
//               CollisionNode and an associated CollisionHandler.
//
//               When traverse() is called, it begins at the indicated
//               root and detects all collisions with any of its
//               collider objects against nodes at or below the
//               indicated root, calling the appropriate
//               CollisionHandler for each detected collision.
////////////////////////////////////////////////////////////////////

416 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

417 14 CollisionSolid 75777 14 CollisionSolid 14 CollisionSolid 0 0 0 0 0 0 12 235 236 237 238 239 240 241 242 243 244 245 246 0 1 0 418 0 0 0 0 754
////////////////////////////////////////////////////////////////////
//       Class : CollisionSolid
// Description : The abstract base class for all things that can
//               collide with other things in the world, and all the
//               things they can collide with (except geometry).
//
//               This class and its derivatives really work very
//               similarly to the way BoundingVolume and all of its
//               derivatives work.  There's a different subclass for
//               each basic shape of solid, and double-dispatch
//               function calls handle the subset of the N*N
//               intersection tests that we care about.
////////////////////////////////////////////////////////////////////

418 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

419 13 CollisionNode 75777 13 CollisionNode 13 CollisionNode 0 0 0 1 247 0 0 15 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 0 1 0 420 0 0 0 0 496
////////////////////////////////////////////////////////////////////
//       Class : CollisionNode
// Description : A node in the scene graph that can hold any number of
//               CollisionSolids.  This may either represent a bit of
//               static geometry in the scene that things will collide
//               with, or an animated object twirling around in the
//               world and running into things.
////////////////////////////////////////////////////////////////////

420 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

421 17 CollisionRecorder 26625 17 CollisionRecorder 17 CollisionRecorder 0 0 0 0 263 0 4 264 265 266 267 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : CollisionRecorder
// Description : This class is used to help debug the work the
//               collisions system is doing.  It is a virtual base
//               class that just provides an interface for recording
//               collisions tested and detected each frame.
////////////////////////////////////////////////////////////////////

422 14 CollisionEntry 141313 14 CollisionEntry 14 CollisionEntry 0 0 0 0 289 0 21 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 0 1 0 418 0 0 0 0 731
////////////////////////////////////////////////////////////////////
//       Class : CollisionEntry
// Description : Defines a single collision event.  One of these is
//               created for each collision detected by a
//               CollisionTraverser, to be dealt with by the
//               CollisionHandler.
//
//               A CollisionEntry provides slots for a number of data
//               values (such as intersection point and normal) that
//               might or might not be known for each collision.  It
//               is up to the handler to determine what information is
//               known and to do the right thing with it.
////////////////////////////////////////////////////////////////////

423 14 CollisionPlane 141313 14 CollisionPlane 14 CollisionPlane 0 0 0 1 290 296 0 5 291 292 293 294 295 0 1 0 417 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : CollisionPlane
// Description :
////////////////////////////////////////////////////////////////////

424 16 CollisionPolygon 141313 16 CollisionPolygon 16 CollisionPolygon 0 0 0 1 297 299 0 1 298 0 1 0 423 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : CollisionPolygon
// Description :
////////////////////////////////////////////////////////////////////

425 21 CollisionHandlerEvent 141313 21 CollisionHandlerEvent 21 CollisionHandlerEvent 0 0 0 1 300 318 0 17 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 0 1 0 413 0 0 0 0 555
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerEvent
// Description : A specialized kind of CollisionHandler that throws an
//               event for each collision detected.  The event thrown
//               may be based on the name of the moving object or the
//               struck object, or both.  The first parameter of the
//               event will be a pointer to the CollisionEntry that
//               triggered it.
////////////////////////////////////////////////////////////////////

426 24 CollisionHandlerPhysical 75777 24 CollisionHandlerPhysical 24 CollisionHandlerPhysical 0 0 0 0 318 0 10 319 320 321 322 323 324 325 326 327 328 0 1 0 425 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPhysical
// Description : The abstract base class for a number of
//               CollisionHandlers that have some physical effect on
//               their moving bodies: they need to update the nodes'
//               positions based on the effects of the collision.
////////////////////////////////////////////////////////////////////

427 21 CollisionHandlerFloor 75777 21 CollisionHandlerFloor 21 CollisionHandlerFloor 0 0 0 1 329 318 0 7 330 331 332 333 334 335 336 0 1 0 426 0 0 0 0 552
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerFloor
// Description : A specialized kind of CollisionHandler that sets the
//               Z height of the collider to a fixed linear offset
//               from the highest detected collision point each frame.
//               It's intended to implement walking around on a floor
//               of varying height by casting a ray down from the
//               avatar's head.
////////////////////////////////////////////////////////////////////

428 23 CollisionHandlerGravity 75777 23 CollisionHandlerGravity 23 CollisionHandlerGravity 0 0 0 1 337 318 0 16 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 0 1 0 426 0 0 0 0 554
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerGravity
// Description : A specialized kind of CollisionHandler that sets the
//               Z height of the collider to a fixed linear offset
//               from the highest detected collision point each frame.
//               It's intended to implement walking around on a floor
//               of varying height by casting a ray down from the
//               avatar's head.
////////////////////////////////////////////////////////////////////

429 22 CollisionHandlerPusher 75777 22 CollisionHandlerPusher 22 CollisionHandlerPusher 0 0 0 1 354 318 0 3 355 356 357 0 1 0 426 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPusher
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This is the simplest kind of "real-world"
//               collisions you can have.
////////////////////////////////////////////////////////////////////

430 21 CollisionHandlerQueue 141313 21 CollisionHandlerQueue 21 CollisionHandlerQueue 0 0 0 1 358 364 0 5 359 360 361 362 363 0 1 0 413 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerQueue
// Description : A special kind of CollisionHandler that does nothing
//               except remember the CollisionEntries detected the
//               last pass.  This set of CollisionEntries may then be
//               queried by the calling function.  It's primarily
//               useful when a simple intersection test is being made,
//               e.g. for picking from the window.
////////////////////////////////////////////////////////////////////

431 15 CollisionSphere 141313 15 CollisionSphere 15 CollisionSphere 0 0 0 1 365 371 0 5 366 367 368 369 370 0 1 0 417 0 0 0 0 227
////////////////////////////////////////////////////////////////////
//       Class : CollisionSphere
// Description : A spherical collision volume or object.
////////////////////////////////////////////////////////////////////

432 18 CollisionInvSphere 141313 18 CollisionInvSphere 18 CollisionInvSphere 0 0 0 1 372 374 0 1 373 0 1 0 431 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CollisionInvSphere
// Description : An inverted sphere: this is a sphere whose collision
//               surface is the inside surface of the sphere.
//               Everything outside the sphere is solid matter;
//               everything inside is empty space.  Useful for
//               constraining objects to remain within a spherical
//               perimeter.
////////////////////////////////////////////////////////////////////

433 12 CollisionRay 141313 12 CollisionRay 12 CollisionRay 0 0 0 1 375 382 0 6 376 377 378 379 380 381 0 1 0 417 0 0 0 0 456
////////////////////////////////////////////////////////////////////
//       Class : CollisionRay
// Description : An infinite ray, with a specific origin and
//               direction.  It begins at its origin and continues in
//               one direction to infinity, and it has no radius.
//               Useful for picking from a window, or for gravity
//               effects.
////////////////////////////////////////////////////////////////////

434 13 CollisionLine 141313 13 CollisionLine 13 CollisionLine 0 0 0 1 383 385 0 1 384 0 1 0 433 0 0 0 0 337
////////////////////////////////////////////////////////////////////
//       Class : CollisionLine
// Description : An infinite line, similar to a CollisionRay, except
//               that it extends in both directions.  It is, however,
//               directional.
////////////////////////////////////////////////////////////////////

435 16 CollisionSegment 141313 16 CollisionSegment 16 CollisionSegment 0 0 0 1 386 393 0 6 387 388 389 390 391 392 0 1 0 417 0 0 0 0 639
////////////////////////////////////////////////////////////////////
//       Class : CollisionSegment
// Description : A finite line segment, with two specific endpoints
//               but no thickness.  It's similar to a CollisionRay,
//               except it does not continue to infinity.
//
//               It does have an ordering, from point A to point B.
//               If more than a single point of the segment is
//               intersecting a solid, the reported intersection point
//               is generally the closest on the segment to point A.
////////////////////////////////////////////////////////////////////

436 13 CollisionTube 141313 13 CollisionTube 13 CollisionTube 0 0 0 1 394 402 0 7 395 396 397 398 399 400 401 0 1 0 417 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : CollisionTube
// Description : This implements a solid roughly in cylindrical shape.
//               It's not called a CollisionCylinder because it's not
//               a true cylinder; specifically, it has rounded ends
//               instead of flat ends.  It looks more like a Contac
//               pill.
////////////////////////////////////////////////////////////////////

437 19 CollisionVisualizer 26625 19 CollisionVisualizer 19 CollisionVisualizer 0 0 0 1 407 408 0 4 409 410 411 412 0 2 3 420 403 404 3 421 405 406 0 0 559
////////////////////////////////////////////////////////////////////
//       Class : CollisionVisualizer
// Description : This class is used to help debug the work the
//               collisions system is doing.  It shows the polygons
//               that are detected as collisions, as well as those
//               that are simply considered for collisions.
//
//               It may be parented anywhere in the scene graph where
//               it will be rendered to achieve this.
////////////////////////////////////////////////////////////////////

438 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

439 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 438 0 0 0 0 0 0 0 0 0

440 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

441 20 CollisionTraverser * 8576 20 CollisionTraverser * 20 CollisionTraverser * 0 0 415 0 0 0 0 0 0 0 0 0

442 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

443 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

444 26 CollisionTraverser const * 8576 26 CollisionTraverser const * 26 CollisionTraverser const * 0 0 445 0 0 0 0 0 0 0 0 0

445 24 CollisionTraverser const 8832 24 CollisionTraverser const 24 CollisionTraverser const 0 0 415 0 0 0 0 0 0 0 0 0

446 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 447 0 0 0 0 0 0 0 0 0

447 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 448 0 0 0 0 0 0 0 0 0

448 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

449 18 CollisionHandler * 8576 18 CollisionHandler * 18 CollisionHandler * 0 0 413 0 0 0 0 0 0 0 0 0

450 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

451 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 448 0 0 0 0 0 0 0 0 0

452 19 CollisionRecorder * 8576 19 CollisionRecorder * 19 CollisionRecorder * 0 0 421 0 0 0 0 0 0 0 0 0

453 21 CollisionVisualizer * 8576 21 CollisionVisualizer * 21 CollisionVisualizer * 0 0 437 0 0 0 0 0 0 0 0 0

454 9 ostream * 8576 9 ostream * 9 ostream * 0 0 455 0 0 0 0 0 0 0 0 0

455 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

456 16 CollisionSolid * 8576 16 CollisionSolid * 16 CollisionSolid * 0 0 417 0 0 0 0 0 0 0 0 0

457 22 CollisionSolid const * 8576 22 CollisionSolid const * 22 CollisionSolid const * 0 0 458 0 0 0 0 0 0 0 0 0

458 20 CollisionSolid const 8832 20 CollisionSolid const 20 CollisionSolid const 0 0 417 0 0 0 0 0 0 0 0 0

459 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 460 0 0 0 0 0 0 0 0 0

460 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 461 0 0 0 0 0 0 0 0 0

461 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

462 20 BoundingVolume const 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 463 0 0 0 0 0 0 0 0 0

463 14 BoundingVolume 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

464 22 BoundingVolume const * 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 462 0 0 0 0 0 0 0 0 0

465 15 CollisionNode * 8576 15 CollisionNode * 15 CollisionNode * 0 0 419 0 0 0 0 0 0 0 0 0

466 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 467 0 0 0 0 0 0 0 0 0

467 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0

468 21 CollisionNode const * 8576 21 CollisionNode const * 21 CollisionNode const * 0 0 469 0 0 0 0 0 0 0 0 0

469 19 CollisionNode const 8832 19 CollisionNode const 19 CollisionNode const 0 0 419 0 0 0 0 0 0 0 0 0

470 25 CollisionRecorder const * 8576 25 CollisionRecorder const * 25 CollisionRecorder const * 0 0 471 0 0 0 0 0 0 0 0 0

471 23 CollisionRecorder const 8832 23 CollisionRecorder const 23 CollisionRecorder const 0 0 421 0 0 0 0 0 0 0 0 0

472 22 CollisionEntry const * 8576 22 CollisionEntry const * 22 CollisionEntry const * 0 0 473 0 0 0 0 0 0 0 0 0

473 20 CollisionEntry const 8832 20 CollisionEntry const 20 CollisionEntry const 0 0 422 0 0 0 0 0 0 0 0 0

474 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 420 0 0 0 0 0 0 0 0 0

475 16 CollisionEntry * 8576 16 CollisionEntry * 16 CollisionEntry * 0 0 422 0 0 0 0 0 0 0 0 0

476 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 477 0 0 0 0 0 0 0 0 0

477 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 478 0 0 0 0 0 0 0 0 0

478 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

479 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 478 0 0 0 0 0 0 0 0 0

480 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 461 0 0 0 0 0 0 0 0 0

481 22 CollisionPlane const * 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 482 0 0 0 0 0 0 0 0 0

482 20 CollisionPlane const 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 423 0 0 0 0 0 0 0 0 0

483 16 CollisionPlane * 8576 16 CollisionPlane * 16 CollisionPlane * 0 0 423 0 0 0 0 0 0 0 0 0

484 14 Planef const * 8576 14 Planef const * 14 Planef const * 0 0 485 0 0 0 0 0 0 0 0 0

485 12 Planef const 8832 12 Planef const 12 Planef const 0 0 486 0 0 0 0 0 0 0 0 0

486 6 Planef 2048 6 Planef 6 Planef 0 0 0 0 0 0 0 0 0 0 0 973
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Plane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

487 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

488 18 CollisionPolygon * 8576 18 CollisionPolygon * 18 CollisionPolygon * 0 0 424 0 0 0 0 0 0 0 0 0

489 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 490 0 0 0 0 0 0 0 0 0

490 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 491 0 0 0 0 0 0 0 0 0

491 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

492 23 CollisionHandlerEvent * 8576 23 CollisionHandlerEvent * 23 CollisionHandlerEvent * 0 0 425 0 0 0 0 0 0 0 0 0

493 29 CollisionHandlerEvent const * 8576 29 CollisionHandlerEvent const * 29 CollisionHandlerEvent const * 0 0 494 0 0 0 0 0 0 0 0 0

494 27 CollisionHandlerEvent const 8832 27 CollisionHandlerEvent const 27 CollisionHandlerEvent const 0 0 425 0 0 0 0 0 0 0 0 0

495 26 CollisionHandlerPhysical * 8576 26 CollisionHandlerPhysical * 26 CollisionHandlerPhysical * 0 0 426 0 0 0 0 0 0 0 0 0

496 16 DriveInterface * 8576 16 DriveInterface * 16 DriveInterface * 0 0 497 0 0 0 0 0 0 0 0 0

497 14 DriveInterface 2048 14 DriveInterface 14 DriveInterface 0 0 0 0 0 0 0 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

498 32 CollisionHandlerPhysical const * 8576 32 CollisionHandlerPhysical const * 32 CollisionHandlerPhysical const * 0 0 499 0 0 0 0 0 0 0 0 0

499 30 CollisionHandlerPhysical const 8832 30 CollisionHandlerPhysical const 30 CollisionHandlerPhysical const 0 0 426 0 0 0 0 0 0 0 0 0

500 23 CollisionHandlerFloor * 8576 23 CollisionHandlerFloor * 23 CollisionHandlerFloor * 0 0 427 0 0 0 0 0 0 0 0 0

501 29 CollisionHandlerFloor const * 8576 29 CollisionHandlerFloor const * 29 CollisionHandlerFloor const * 0 0 502 0 0 0 0 0 0 0 0 0

502 27 CollisionHandlerFloor const 8832 27 CollisionHandlerFloor const 27 CollisionHandlerFloor const 0 0 427 0 0 0 0 0 0 0 0 0

503 25 CollisionHandlerGravity * 8576 25 CollisionHandlerGravity * 25 CollisionHandlerGravity * 0 0 428 0 0 0 0 0 0 0 0 0

504 31 CollisionHandlerGravity const * 8576 31 CollisionHandlerGravity const * 31 CollisionHandlerGravity const * 0 0 505 0 0 0 0 0 0 0 0 0

505 29 CollisionHandlerGravity const 8832 29 CollisionHandlerGravity const 29 CollisionHandlerGravity const 0 0 428 0 0 0 0 0 0 0 0 0

506 24 CollisionHandlerPusher * 8576 24 CollisionHandlerPusher * 24 CollisionHandlerPusher * 0 0 429 0 0 0 0 0 0 0 0 0

507 30 CollisionHandlerPusher const * 8576 30 CollisionHandlerPusher const * 30 CollisionHandlerPusher const * 0 0 508 0 0 0 0 0 0 0 0 0

508 28 CollisionHandlerPusher const 8832 28 CollisionHandlerPusher const 28 CollisionHandlerPusher const 0 0 429 0 0 0 0 0 0 0 0 0

509 23 CollisionHandlerQueue * 8576 23 CollisionHandlerQueue * 23 CollisionHandlerQueue * 0 0 430 0 0 0 0 0 0 0 0 0

510 29 CollisionHandlerQueue const * 8576 29 CollisionHandlerQueue const * 29 CollisionHandlerQueue const * 0 0 511 0 0 0 0 0 0 0 0 0

511 27 CollisionHandlerQueue const 8832 27 CollisionHandlerQueue const 27 CollisionHandlerQueue const 0 0 430 0 0 0 0 0 0 0 0 0

512 17 CollisionSphere * 8576 17 CollisionSphere * 17 CollisionSphere * 0 0 431 0 0 0 0 0 0 0 0 0

513 23 CollisionSphere const * 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 514 0 0 0 0 0 0 0 0 0

514 21 CollisionSphere const 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 431 0 0 0 0 0 0 0 0 0

515 20 CollisionInvSphere * 8576 20 CollisionInvSphere * 20 CollisionInvSphere * 0 0 432 0 0 0 0 0 0 0 0 0

516 14 CollisionRay * 8576 14 CollisionRay * 14 CollisionRay * 0 0 433 0 0 0 0 0 0 0 0 0

517 20 CollisionRay const * 8576 20 CollisionRay const * 20 CollisionRay const * 0 0 518 0 0 0 0 0 0 0 0 0

518 18 CollisionRay const 8832 18 CollisionRay const 18 CollisionRay const 0 0 433 0 0 0 0 0 0 0 0 0

519 10 LensNode * 8576 10 LensNode * 10 LensNode * 0 0 520 0 0 0 0 0 0 0 0 0

520 8 LensNode 2048 8 LensNode 8 LensNode 0 0 0 0 0 0 0 0 0 0 0 396
////////////////////////////////////////////////////////////////////
//       Class : LensNode
// Description : A node that contains a Lens.  The most important
//               example of this kind of node is a Camera, but other
//               kinds of nodes also contain a lens (for instance, a
//               Spotlight).
////////////////////////////////////////////////////////////////////

521 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 522 0 0 0 0 0 0 0 0 0

522 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 523 0 0 0 0 0 0 0 0 0

523 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

524 15 CollisionLine * 8576 15 CollisionLine * 15 CollisionLine * 0 0 434 0 0 0 0 0 0 0 0 0

525 18 CollisionSegment * 8576 18 CollisionSegment * 18 CollisionSegment * 0 0 435 0 0 0 0 0 0 0 0 0

526 24 CollisionSegment const * 8576 24 CollisionSegment const * 24 CollisionSegment const * 0 0 527 0 0 0 0 0 0 0 0 0

527 22 CollisionSegment const 8832 22 CollisionSegment const 22 CollisionSegment const 0 0 435 0 0 0 0 0 0 0 0 0

528 15 CollisionTube * 8576 15 CollisionTube * 15 CollisionTube * 0 0 436 0 0 0 0 0 0 0 0 0

529 21 CollisionTube const * 8576 21 CollisionTube const * 21 CollisionTube const * 0 0 530 0 0 0 0 0 0 0 0 0

530 19 CollisionTube const 8832 19 CollisionTube const 19 CollisionTube const 0 0 436 0 0 0 0 0 0 0 0 0

531 27 CollisionVisualizer const * 8576 27 CollisionVisualizer const * 27 CollisionVisualizer const * 0 0 532 0 0 0 0 0 0 0 0 0

532 25 CollisionVisualizer const 8832 25 CollisionVisualizer const 25 CollisionVisualizer const 0 0 437 0 0 0 0 0 0 0 0 0

0
0
