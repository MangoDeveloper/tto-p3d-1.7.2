1145555672
2 2
17 libparticlesystem 4 KBUA 12 pandaphysics 
305
374 24 upcast_to_ReferenceCount 12 679 45 BaseParticleEmitter::upcast_to_ReferenceCount 0 1 18 49
upcast from BaseParticleEmitter to ReferenceCount
68
ReferenceCount *BaseParticleEmitter::upcast_to_ReferenceCount(void);

375 31 downcast_to_BaseParticleEmitter 12 680 47 ReferenceCount::downcast_to_BaseParticleEmitter 0 1 19 51
downcast from ReferenceCount to BaseParticleEmitter
75
BaseParticleEmitter *ReferenceCount::downcast_to_BaseParticleEmitter(void);

376 20 ~BaseParticleEmitter 4 679 41 BaseParticleEmitter::~BaseParticleEmitter 0 0 229
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleEmitter
//      Access : Protected
// Description : destructor
////////////////////////////////////////////////////////////////////
56
virtual BaseParticleEmitter::~BaseParticleEmitter(void);

377 9 make_copy 4 679 30 BaseParticleEmitter::make_copy 0 1 1 0
70
virtual BaseParticleEmitter *BaseParticleEmitter::make_copy(void) = 0;

378 8 generate 4 679 29 BaseParticleEmitter::generate 0 1 2 231
////////////////////////////////////////////////////////////////////
//    Function : generate
//      Access : Public
// Description : parent generation function
////////////////////////////////////////////////////////////////////
66
void BaseParticleEmitter::generate(LPoint3f &pos, LVector3f &vel);

379 17 set_emission_type 4 679 38 BaseParticleEmitter::set_emission_type 0 1 3 923
// Filename: baseParticleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_emission_type
//      Access : Public
// Description : emission type assignment
////////////////////////////////////////////////////////////////////
89
inline void BaseParticleEmitter::set_emission_type(BaseParticleEmitter::emissionType et);

380 13 set_amplitude 4 679 34 BaseParticleEmitter::set_amplitude 0 1 4 230
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
// Description : amplitude assignment
////////////////////////////////////////////////////////////////////
56
inline void BaseParticleEmitter::set_amplitude(float a);

381 20 set_amplitude_spread 4 679 41 BaseParticleEmitter::set_amplitude_spread 0 1 5 244
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude_spread
//      Access : Public
// Description : amplitude spread assignment
////////////////////////////////////////////////////////////////////
64
inline void BaseParticleEmitter::set_amplitude_spread(float as);

382 16 set_offset_force 4 679 37 BaseParticleEmitter::set_offset_force 0 1 6 231
////////////////////////////////////////////////////////////////////
//    Function : set_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleEmitter::set_offset_force(LVector3f const &of);

383 26 set_explicit_launch_vector 4 679 47 BaseParticleEmitter::set_explicit_launch_vector 0 1 7 322
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_explicit_launch_vector
//      Access : Public
// Description : assignment of explicit emission launch vector
////////////////////////////////////////////////////////////////////
82
inline void BaseParticleEmitter::set_explicit_launch_vector(LVector3f const &elv);

384 18 set_radiate_origin 4 679 39 BaseParticleEmitter::set_radiate_origin 0 1 8 312
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_radiate_origin
//      Access : Public
// Description : assignment of radiate emission origin point
////////////////////////////////////////////////////////////////////
72
inline void BaseParticleEmitter::set_radiate_origin(LPoint3f const &ro);

385 17 get_emission_type 4 679 38 BaseParticleEmitter::get_emission_type 0 1 9 233
////////////////////////////////////////////////////////////////////
//    Function : get_emission_type
//      Access : Public
// Description : emission type query
////////////////////////////////////////////////////////////////////
92
inline BaseParticleEmitter::emissionType BaseParticleEmitter::get_emission_type(void) const;

386 13 get_amplitude 4 679 34 BaseParticleEmitter::get_amplitude 0 1 10 225
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
// Description : amplitude query
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleEmitter::get_amplitude(void) const;

387 20 get_amplitude_spread 4 679 41 BaseParticleEmitter::get_amplitude_spread 0 1 11 239
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude_spread
//      Access : Public
// Description : amplitude spread query
////////////////////////////////////////////////////////////////////
67
inline float BaseParticleEmitter::get_amplitude_spread(void) const;

388 16 get_offset_force 4 679 37 BaseParticleEmitter::get_offset_force 0 1 12 231
////////////////////////////////////////////////////////////////////
//    Function : get_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
67
inline LVector3f BaseParticleEmitter::get_offset_force(void) const;

389 26 get_explicit_launch_vector 4 679 47 BaseParticleEmitter::get_explicit_launch_vector 0 1 13 264
////////////////////////////////////////////////////////////////////
//    Function : get_explicit_launch_vector
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
77
inline LVector3f BaseParticleEmitter::get_explicit_launch_vector(void) const;

390 18 get_radiate_origin 4 679 39 BaseParticleEmitter::get_radiate_origin 0 1 14 256
////////////////////////////////////////////////////////////////////
//    Function : get_radiate_origin
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
68
inline LPoint3f BaseParticleEmitter::get_radiate_origin(void) const;

391 6 output 4 679 27 BaseParticleEmitter::output 0 1 15 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleEmitter::output(ostream &out) const;

392 5 write 4 679 26 BaseParticleEmitter::write 0 2 16 17 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleEmitter::write(ostream &out, int indent = (0)) const;

393 24 upcast_to_ReferenceCount 12 682 45 BaseParticleFactory::upcast_to_ReferenceCount 0 1 37 49
upcast from BaseParticleFactory to ReferenceCount
68
ReferenceCount *BaseParticleFactory::upcast_to_ReferenceCount(void);

394 31 downcast_to_BaseParticleFactory 12 680 47 ReferenceCount::downcast_to_BaseParticleFactory 0 1 38 51
downcast from ReferenceCount to BaseParticleFactory
75
BaseParticleFactory *ReferenceCount::downcast_to_BaseParticleFactory(void);

395 20 ~BaseParticleFactory 4 682 41 BaseParticleFactory::~BaseParticleFactory 0 0 235
////////////////////////////////////////////////////////////////////
//    Function : ~BaseParticleFactory
//      Access : public virtual
// Description : destructor
////////////////////////////////////////////////////////////////////
56
virtual BaseParticleFactory::~BaseParticleFactory(void);

396 17 set_lifespan_base 4 682 38 BaseParticleFactory::set_lifespan_base 0 1 20 881
// Filename: baseParticleFactory.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
61
inline void BaseParticleFactory::set_lifespan_base(float lb);

397 19 set_lifespan_spread 4 682 40 BaseParticleFactory::set_lifespan_spread 0 1 21 198
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
63
inline void BaseParticleFactory::set_lifespan_spread(float ls);

398 13 set_mass_base 4 682 34 BaseParticleFactory::set_mass_base 0 1 22 192
////////////////////////////////////////////////////////////////////
//    Function : set_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
57
inline void BaseParticleFactory::set_mass_base(float mb);

399 15 set_mass_spread 4 682 36 BaseParticleFactory::set_mass_spread 0 1 23 194
////////////////////////////////////////////////////////////////////
//    Function : set_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleFactory::set_mass_spread(float ms);

400 26 set_terminal_velocity_base 4 682 47 BaseParticleFactory::set_terminal_velocity_base 0 1 24 205
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleFactory::set_terminal_velocity_base(float tvb);

401 28 set_terminal_velocity_spread 4 682 49 BaseParticleFactory::set_terminal_velocity_spread 0 1 25 207
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
73
inline void BaseParticleFactory::set_terminal_velocity_spread(float tvs);

402 17 get_lifespan_base 4 682 38 BaseParticleFactory::get_lifespan_base 0 1 26 196
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
64
inline float BaseParticleFactory::get_lifespan_base(void) const;

403 19 get_lifespan_spread 4 682 40 BaseParticleFactory::get_lifespan_spread 0 1 27 198
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
66
inline float BaseParticleFactory::get_lifespan_spread(void) const;

404 13 get_mass_base 4 682 34 BaseParticleFactory::get_mass_base 0 1 28 192
////////////////////////////////////////////////////////////////////
//    Function : get_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleFactory::get_mass_base(void) const;

405 15 get_mass_spread 4 682 36 BaseParticleFactory::get_mass_spread 0 1 29 194
////////////////////////////////////////////////////////////////////
//    Function : get_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleFactory::get_mass_spread(void) const;

406 26 get_terminal_velocity_base 4 682 47 BaseParticleFactory::get_terminal_velocity_base 0 1 30 205
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
73
inline float BaseParticleFactory::get_terminal_velocity_base(void) const;

407 28 get_terminal_velocity_spread 4 682 49 BaseParticleFactory::get_terminal_velocity_spread 0 1 31 207
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
75
inline float BaseParticleFactory::get_terminal_velocity_spread(void) const;

408 14 alloc_particle 4 682 35 BaseParticleFactory::alloc_particle 0 1 32 0
74
virtual BaseParticle *BaseParticleFactory::alloc_particle(void) const = 0;

409 17 populate_particle 4 682 38 BaseParticleFactory::populate_particle 0 1 33 192
////////////////////////////////////////////////////////////////////
//    Function : make_particle
// Description : public
////////////////////////////////////////////////////////////////////
62
void BaseParticleFactory::populate_particle(BaseParticle *bp);

410 6 output 4 682 27 BaseParticleFactory::output 0 1 34 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleFactory::output(ostream &out) const;

411 5 write 4 682 26 BaseParticleFactory::write 0 2 35 36 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleFactory::write(ostream &out, int indent = (0)) const;

412 24 upcast_to_ReferenceCount 12 683 46 BaseParticleRenderer::upcast_to_ReferenceCount 0 1 52 50
upcast from BaseParticleRenderer to ReferenceCount
69
ReferenceCount *BaseParticleRenderer::upcast_to_ReferenceCount(void);

413 32 downcast_to_BaseParticleRenderer 12 680 48 ReferenceCount::downcast_to_BaseParticleRenderer 0 1 53 52
downcast from ReferenceCount to BaseParticleRenderer
77
BaseParticleRenderer *ReferenceCount::downcast_to_BaseParticleRenderer(void);

414 21 ~BaseParticleRenderer 4 683 43 BaseParticleRenderer::~BaseParticleRenderer 0 0 251
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::~BaseParticleRenderer
//      Access : Published
// Description : Destructor
////////////////////////////////////////////////////////////////////
58
virtual BaseParticleRenderer::~BaseParticleRenderer(void);

415 15 get_render_node 4 683 37 BaseParticleRenderer::get_render_node 0 1 39 947
// Filename: baseParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node
//       Class : Published
// Description : Query the geomnode pointer
////////////////////////////////////////////////////////////////////
67
inline GeomNode *BaseParticleRenderer::get_render_node(void) const;

416 14 set_alpha_mode 4 683 36 BaseParticleRenderer::set_alpha_mode 0 1 40 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
101
inline void BaseParticleRenderer::set_alpha_mode(BaseParticleRenderer::ParticleRendererAlphaMode am);

417 14 get_alpha_mode 4 683 36 BaseParticleRenderer::get_alpha_mode 0 1 41 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
104
inline BaseParticleRenderer::ParticleRendererAlphaMode BaseParticleRenderer::get_alpha_mode(void) const;

418 14 set_user_alpha 4 683 36 BaseParticleRenderer::set_user_alpha 0 1 42 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_user_alpha
//      Access : Published
// Description : sets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleRenderer::set_user_alpha(float ua);

419 14 get_user_alpha 4 683 36 BaseParticleRenderer::get_user_alpha 0 1 43 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_user_alpha
//      Access : Published
// Description : gets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleRenderer::get_user_alpha(void) const;

420 20 set_color_blend_mode 4 683 42 BaseParticleRenderer::set_color_blend_mode 0 3 44 45 46 285
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
////////////////////////////////////////////////////////////////////
164
inline void BaseParticleRenderer::set_color_blend_mode(ColorBlendAttrib::Mode bm, ColorBlendAttrib::Operand oa = (O_zero), ColorBlendAttrib::Operand ob = (O_zero));

421 16 set_ignore_scale 4 683 38 BaseParticleRenderer::set_ignore_scale 0 1 47 740
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_ignore_scale
//      Access : Published
// Description : Sets the "ignore scale" flag.  When this is true,
//               particles will be drawn as if they had no scale,
//               regardless of whatever scale might be inherited from
//               above the render node in the scene graph.
//
//               This flag is mainly useful to support legacy code
//               that was written for a very early version of Panda,
//               whose sprite particle renderer had a bug that
//               incorrectly ignored the inherited scale.
////////////////////////////////////////////////////////////////////
63
void BaseParticleRenderer::set_ignore_scale(bool ignore_scale);

422 16 get_ignore_scale 4 683 38 BaseParticleRenderer::get_ignore_scale 0 1 48 310
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_ignore_scale
//      Access : Published
// Description : Returns the "ignore scale" flag.  See
//               set_ignore_scale().
////////////////////////////////////////////////////////////////////
63
inline bool BaseParticleRenderer::get_ignore_scale(void) const;

423 6 output 4 683 28 BaseParticleRenderer::output 0 1 49 303
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
62
virtual void BaseParticleRenderer::output(ostream &out) const;

424 5 write 4 683 27 BaseParticleRenderer::write 0 2 50 51 302
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
79
virtual void BaseParticleRenderer::write(ostream &out, int indent = (0)) const;

425 10 BoxEmitter 4 686 22 BoxEmitter::BoxEmitter 0 2 54 55 223
////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
29
BoxEmitter::BoxEmitter(void);

426 13 set_min_bound 4 686 25 BoxEmitter::set_min_bound 0 1 56 905
// Filename: boxEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_min_bound(LPoint3f const &vmin);

427 13 set_max_bound 4 686 25 BoxEmitter::set_max_bound 0 1 57 229
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_max_bound(LPoint3f const &vmax);

428 13 get_min_bound 4 686 25 BoxEmitter::get_min_bound 0 1 58 227
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_min_bound(void) const;

429 13 get_max_bound 4 686 25 BoxEmitter::get_max_bound 0 1 59 227
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_max_bound(void) const;

430 11 get_color_a 4 687 47 ColorInterpolationFunctionConstant::get_color_a 0 1 60 1049
// Filename: colorInterpolationManager.I
// Created by:  joswilso (02Jun05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::get_color_a
//      Access : public
// Description : Returns the primary color of the function.
////////////////////////////////////////////////////////////////////
78
inline LVecBase4f ColorInterpolationFunctionConstant::get_color_a(void) const;

431 11 set_color_a 4 687 47 ColorInterpolationFunctionConstant::set_color_a 0 1 61 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::set_color_a
//      Access : public
// Description : Sets the primary color of the function.
////////////////////////////////////////////////////////////////////
80
inline void ColorInterpolationFunctionConstant::set_color_a(LVecBase4f const c);

432 14 get_class_type 4 687 50 ColorInterpolationFunctionConstant::get_class_type 0 1 62 0
75
static TypeHandle ColorInterpolationFunctionConstant::get_class_type(void);

433 35 ~ColorInterpolationFunctionConstant 4 687 71 ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant 0 0 0
78
ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant(void);

434 11 get_color_b 4 689 45 ColorInterpolationFunctionLinear::get_color_b 0 1 63 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::get_color_b
//      Access : public
// Description : Returns the secondary color of the function.
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f ColorInterpolationFunctionLinear::get_color_b(void) const;

435 11 set_color_b 4 689 45 ColorInterpolationFunctionLinear::set_color_b 0 1 64 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::set_color_b
//      Access : public
// Description : Sets the secondary color of the function.
////////////////////////////////////////////////////////////////////
78
inline void ColorInterpolationFunctionLinear::set_color_b(LVecBase4f const c);

436 14 get_class_type 4 689 48 ColorInterpolationFunctionLinear::get_class_type 0 1 65 0
73
static TypeHandle ColorInterpolationFunctionLinear::get_class_type(void);

437 33 ~ColorInterpolationFunctionLinear 4 689 67 ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear 0 0 0
74
ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear(void);

438 11 get_width_a 4 690 47 ColorInterpolationFunctionStepwave::get_width_a 0 1 66 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_a
//      Access : public
// Description : Returns the primary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_a(void) const;

439 11 get_width_b 4 690 47 ColorInterpolationFunctionStepwave::get_width_b 0 1 67 288
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_b
//      Access : public
// Description : Returns the secondary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_b(void) const;

440 11 set_width_a 4 690 47 ColorInterpolationFunctionStepwave::set_width_a 0 1 68 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_a
//      Access : public
// Description : Sets the primary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_a(float const w);

441 11 set_width_b 4 690 47 ColorInterpolationFunctionStepwave::set_width_b 0 1 69 285
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_b
//      Access : public
// Description : Sets the secondary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_b(float const w);

442 14 get_class_type 4 690 50 ColorInterpolationFunctionStepwave::get_class_type 0 1 70 0
75
static TypeHandle ColorInterpolationFunctionStepwave::get_class_type(void);

443 35 ~ColorInterpolationFunctionStepwave 4 690 71 ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave 0 0 0
78
ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave(void);

444 10 get_period 4 691 46 ColorInterpolationFunctionSinusoid::get_period 0 1 71 324
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::get_period
//      Access : public
// Description : Returns the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
72
inline float ColorInterpolationFunctionSinusoid::get_period(void) const;

445 10 set_period 4 691 46 ColorInterpolationFunctionSinusoid::set_period 0 1 72 321
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::set_period
//      Access : public
// Description : Sets the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
74
inline void ColorInterpolationFunctionSinusoid::set_period(float const p);

446 14 get_class_type 4 691 50 ColorInterpolationFunctionSinusoid::get_class_type 0 1 73 0
75
static TypeHandle ColorInterpolationFunctionSinusoid::get_class_type(void);

447 35 ~ColorInterpolationFunctionSinusoid 4 691 71 ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid 0 0 0
78
ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid(void);

448 24 upcast_to_ReferenceCount 12 692 51 ColorInterpolationSegment::upcast_to_ReferenceCount 0 1 85 55
upcast from ColorInterpolationSegment to ReferenceCount
74
ReferenceCount *ColorInterpolationSegment::upcast_to_ReferenceCount(void);

449 37 downcast_to_ColorInterpolationSegment 12 680 53 ReferenceCount::downcast_to_ColorInterpolationSegment 0 1 86 57
downcast from ReferenceCount to ColorInterpolationSegment
87
ColorInterpolationSegment *ReferenceCount::downcast_to_ColorInterpolationSegment(void);

450 25 ColorInterpolationSegment 4 692 52 ColorInterpolationSegment::ColorInterpolationSegment 0 2 74 75 527
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
153
ColorInterpolationSegment::ColorInterpolationSegment(ColorInterpolationFunction *function, float const &time_begin, float const &time_end, int const id);

451 26 ~ColorInterpolationSegment 4 692 53 ColorInterpolationSegment::~ColorInterpolationSegment 0 0 260
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::~ColorInterpolationSegment
//      Access : public
// Description : destructor
////////////////////////////////////////////////////////////////////
68
virtual ColorInterpolationSegment::~ColorInterpolationSegment(void);

452 12 get_function 4 692 39 ColorInterpolationSegment::get_function 0 1 76 389
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_function
//      Access : public
// Description : Returns a reference to the function object 
//               corresponding to this segment.
////////////////////////////////////////////////////////////////////
80
inline TypedReferenceCount *ColorInterpolationSegment::get_function(void) const;

453 14 get_time_begin 4 692 41 ColorInterpolationSegment::get_time_begin 0 1 77 468
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_begin
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
67
inline float ColorInterpolationSegment::get_time_begin(void) const;

454 12 get_time_end 4 692 39 ColorInterpolationSegment::get_time_end 0 1 78 401
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_end
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment's effect stops.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
65
inline float ColorInterpolationSegment::get_time_end(void) const;

455 6 get_id 4 692 33 ColorInterpolationSegment::get_id 0 1 79 318
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_id
//      Access : public
// Description : Returns the id assigned to this segment by the
//               manager that created it.
////////////////////////////////////////////////////////////////////
57
inline int ColorInterpolationSegment::get_id(void) const;

456 10 is_enabled 4 692 37 ColorInterpolationSegment::is_enabled 0 1 80 291
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_enabled()
//      Access : public
// Description : Returns whether the segments effects are being applied.
////////////////////////////////////////////////////////////////////
62
inline bool ColorInterpolationSegment::is_enabled(void) const;

457 12 set_function 4 692 39 ColorInterpolationSegment::set_function 0 1 81 333
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_function
//      Access : public
// Description : Sets the function that the segment will use for 
//               its interpolation calculations.
////////////////////////////////////////////////////////////////////
90
inline void ColorInterpolationSegment::set_function(ColorInterpolationFunction *function);

458 14 set_time_begin 4 692 41 ColorInterpolationSegment::set_time_begin 0 1 82 403
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_begin
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
72
inline void ColorInterpolationSegment::set_time_begin(float const time);

459 12 set_time_end 4 692 39 ColorInterpolationSegment::set_time_end 0 1 83 397
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_end
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment's effect ends.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
70
inline void ColorInterpolationSegment::set_time_end(float const time);

460 11 set_enabled 4 692 38 ColorInterpolationSegment::set_enabled 0 1 84 289
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_enabled()
//      Access : public
// Description : Sets whether the segments effects should be applied.
////////////////////////////////////////////////////////////////////
71
inline void ColorInterpolationSegment::set_enabled(bool const enabled);

461 24 upcast_to_ReferenceCount 12 693 51 ColorInterpolationManager::upcast_to_ReferenceCount 0 1 117 55
upcast from ColorInterpolationManager to ReferenceCount
74
ReferenceCount *ColorInterpolationManager::upcast_to_ReferenceCount(void);

462 37 downcast_to_ColorInterpolationManager 12 680 53 ReferenceCount::downcast_to_ColorInterpolationManager 0 1 118 57
downcast from ReferenceCount to ColorInterpolationManager
87
ColorInterpolationManager *ReferenceCount::downcast_to_ColorInterpolationManager(void);

463 25 ColorInterpolationManager 4 693 52 ColorInterpolationManager::ColorInterpolationManager 0 3 87 88 89 797
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
59
ColorInterpolationManager::ColorInterpolationManager(void);

464 26 ~ColorInterpolationManager 4 693 53 ColorInterpolationManager::~ColorInterpolationManager 0 0 260
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::~ColorInterpolationManager
//      Access : public
// Description : destructor
////////////////////////////////////////////////////////////////////
68
virtual ColorInterpolationManager::~ColorInterpolationManager(void);

465 12 add_constant 4 693 39 ColorInterpolationManager::add_constant 0 4 90 91 92 93 385
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
////////////////////////////////////////////////////////////////////
151
int ColorInterpolationManager::add_constant(float const time_begin = (0), float const time_end = (1), LVecBase4f const color = ((Colorf(1, 1, 1, 1))));

466 10 add_linear 4 693 37 ColorInterpolationManager::add_linear 0 5 94 95 96 97 98 361
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
202
int ColorInterpolationManager::add_linear(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))));

467 12 add_stepwave 4 693 39 ColorInterpolationManager::add_stepwave 0 7 99 100 101 102 103 104 105 360
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
262
int ColorInterpolationManager::add_stepwave(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))), float const width_a = (0.5), float const width_b = (0.5));

468 12 add_sinusoid 4 693 39 ColorInterpolationManager::add_sinusoid 0 6 106 107 108 109 110 111 400
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
////////////////////////////////////////////////////////////////////
230
int ColorInterpolationManager::add_sinusoid(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))), float const period = (1));

469 17 set_default_color 4 693 44 ColorInterpolationManager::set_default_color 0 1 112 290
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::set_default_color
//      Access : public
// Description : Sets the color to used if no segments are present
////////////////////////////////////////////////////////////////////
78
inline void ColorInterpolationManager::set_default_color(LVecBase4f const &c);

470 11 get_segment 4 693 38 ColorInterpolationManager::get_segment 0 1 113 284
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment
//      Access : public
// Description : Returns the segment that corresponds to 'seg_id'.
////////////////////////////////////////////////////////////////////
91
inline ColorInterpolationSegment *ColorInterpolationManager::get_segment(int const seg_id);

471 19 get_segment_id_list 4 693 46 ColorInterpolationManager::get_segment_id_list 0 1 114 336
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment_id_list
//      Access : public
// Description : Returns a space delimited list of all of the ids
//               in the manager at the time.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > ColorInterpolationManager::get_segment_id_list(void);

472 13 clear_segment 4 693 40 ColorInterpolationManager::clear_segment 0 1 115 282
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_segment
//      Access : public
// Description : Removes the segment of 'id' from the manager.
////////////////////////////////////////////////////////////////////
64
void ColorInterpolationManager::clear_segment(int const seg_id);

473 16 clear_to_initial 4 693 43 ColorInterpolationManager::clear_to_initial 0 1 116 278
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_to_initial
//      Access : public
// Description : Removes all segments from the manager.
////////////////////////////////////////////////////////////////////
55
void ColorInterpolationManager::clear_to_initial(void);

474 11 DiscEmitter 4 694 24 DiscEmitter::DiscEmitter 0 2 119 120 237
////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
31
DiscEmitter::DiscEmitter(void);

475 10 set_radius 4 694 23 DiscEmitter::set_radius 0 1 121 901
// Filename: discEmitter.I
// Created by:  charles (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : radius assignment
////////////////////////////////////////////////////////////////////
45
inline void DiscEmitter::set_radius(float r);

476 15 set_outer_angle 4 694 28 DiscEmitter::set_outer_angle 0 1 122 227
////////////////////////////////////////////////////////////////////
//    Function : set_outer_angle
//      Access : Public
// Description : aoe assignement
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_outer_angle(float o_angle);

477 15 set_inner_angle 4 694 28 DiscEmitter::set_inner_angle 0 1 123 226
////////////////////////////////////////////////////////////////////
//    Function : set_inner_angle
//      Access : Public
// Description : aoe assignment
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_inner_angle(float i_angle);

478 19 set_outer_magnitude 4 694 32 DiscEmitter::set_outer_magnitude 0 1 124 230
////////////////////////////////////////////////////////////////////
//    Function : set_outer_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_outer_magnitude(float o_mag);

479 19 set_inner_magnitude 4 694 32 DiscEmitter::set_inner_magnitude 0 1 125 230
////////////////////////////////////////////////////////////////////
//    Function : set_inner_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_inner_magnitude(float i_mag);

480 17 set_cubic_lerping 4 694 30 DiscEmitter::set_cubic_lerping 0 1 126 224
////////////////////////////////////////////////////////////////////
//    Function : set_cubic_lerping
//      Access : public
// Description : clerp flag
////////////////////////////////////////////////////////////////////
55
inline void DiscEmitter::set_cubic_lerping(bool clerp);

481 10 get_radius 4 694 23 DiscEmitter::get_radius 0 1 127 222
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : Public
// Description : radius accessor
////////////////////////////////////////////////////////////////////
49
inline float DiscEmitter::get_radius(void) const;

482 15 get_outer_angle 4 694 28 DiscEmitter::get_outer_angle 0 1 128 224
////////////////////////////////////////////////////////////////////
//    Function : get_outer_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_outer_angle(void) const;

483 15 get_inner_angle 4 694 28 DiscEmitter::get_inner_angle 0 1 129 224
////////////////////////////////////////////////////////////////////
//    Function : get_inner_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_inner_angle(void) const;

484 19 get_outer_magnitude 4 694 32 DiscEmitter::get_outer_magnitude 0 1 130 228
////////////////////////////////////////////////////////////////////
//    Function : get_outer_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_outer_magnitude(void) const;

485 19 get_inner_magnitude 4 694 32 DiscEmitter::get_inner_magnitude 0 1 131 228
////////////////////////////////////////////////////////////////////
//    Function : get_inner_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_inner_magnitude(void) const;

486 17 get_cubic_lerping 4 694 30 DiscEmitter::get_cubic_lerping 0 1 132 233
////////////////////////////////////////////////////////////////////
//    Function : get_cubic_lerping
//      Access : public
// Description : clerp flag accessor
////////////////////////////////////////////////////////////////////
55
inline bool DiscEmitter::get_cubic_lerping(void) const;

487 20 GeomParticleRenderer 4 695 42 GeomParticleRenderer::GeomParticleRenderer 0 4 133 134 135 136 463
////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
166
GeomParticleRenderer::GeomParticleRenderer(BaseParticleRenderer::ParticleRendererAlphaMode am = (PR_ALPHA_NONE), PandaNode *geom_node = ((PandaNode *)((void *)(0))));

488 13 set_geom_node 4 695 35 GeomParticleRenderer::set_geom_node 0 1 137 1081
// Filename: geomParticleRenderer.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
// we're forcing a pool resize to remove every node in the vector.
// this is because nodes are reference-counted, and we have to
// explicitly remove them from the node they were previously parented
// to.
65
inline void GeomParticleRenderer::set_geom_node(PandaNode *node);

489 13 get_geom_node 4 695 35 GeomParticleRenderer::get_geom_node 0 1 138 188
////////////////////////////////////////////////////////////////////
//  Function : get_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
60
inline PandaNode *GeomParticleRenderer::get_geom_node(void);

490 31 get_color_interpolation_manager 4 695 53 GeomParticleRenderer::get_color_interpolation_manager 0 1 139 206
////////////////////////////////////////////////////////////////////
//  Function : get_color_interpolation_manager
//    Access : public
////////////////////////////////////////////////////////////////////
100
inline ColorInterpolationManager *GeomParticleRenderer::get_color_interpolation_manager(void) const;

491 19 write_linear_forces 4 695 41 GeomParticleRenderer::write_linear_forces 0 2 140 141 293
////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
93
virtual void GeomParticleRenderer::write_linear_forces(ostream &out, int indent = (0)) const;

492 11 LineEmitter 4 696 24 LineEmitter::LineEmitter 0 2 142 143 219
////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////
31
LineEmitter::LineEmitter(void);

493 13 set_endpoint1 4 696 26 LineEmitter::set_endpoint1 0 1 144 906
// Filename: lineEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint1
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint1(LPoint3f const &point);

494 13 set_endpoint2 4 696 26 LineEmitter::set_endpoint2 0 1 145 229
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint2
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint2(LPoint3f const &point);

495 13 get_endpoint1 4 696 26 LineEmitter::get_endpoint1 0 1 146 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint1
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint1(void) const;

496 13 get_endpoint2 4 696 26 LineEmitter::get_endpoint2 0 1 147 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint2
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint2(void) const;

497 20 LineParticleRenderer 4 697 42 LineParticleRenderer::LineParticleRenderer 0 3 148 149 150 701
////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
49
LineParticleRenderer::LineParticleRenderer(void);

498 14 set_head_color 4 697 36 LineParticleRenderer::set_head_color 0 1 151 878
// Filename: lineParticleRenderer.I
// Created by:  darren (06Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_head_color(LVecBase4f const &c);

499 14 set_tail_color 4 697 36 LineParticleRenderer::set_tail_color 0 1 152 193
////////////////////////////////////////////////////////////////////
//    Function : set_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_tail_color(LVecBase4f const &c);

500 14 get_head_color 4 697 36 LineParticleRenderer::get_head_color 0 1 153 193
////////////////////////////////////////////////////////////////////
//    Function : get_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_head_color(void) const;

501 14 get_tail_color 4 697 36 LineParticleRenderer::get_tail_color 0 1 154 193
////////////////////////////////////////////////////////////////////
//    Function : get_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_tail_color(void) const;

502 21 set_line_scale_factor 4 697 43 LineParticleRenderer::set_line_scale_factor 0 1 155 202
////////////////////////////////////////////////////////////////////
//    Function : set_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
66
inline void LineParticleRenderer::set_line_scale_factor(float sf);

503 21 get_line_scale_factor 4 697 43 LineParticleRenderer::get_line_scale_factor 0 1 156 202
////////////////////////////////////////////////////////////////////
//    Function : get_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
69
inline float LineParticleRenderer::get_line_scale_factor(void) const;

504 14 ParticleSystem 4 698 30 ParticleSystem::ParticleSystem 0 3 157 158 159 488
// constructor/destructor

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Copy Constructor.
////////////////////////////////////////////////////////////////////
52
ParticleSystem::ParticleSystem(int pool_size = (0));

505 13 set_pool_size 4 698 29 ParticleSystem::set_pool_size 0 1 160 430
// access/queries

////             ///////////////////////////////////////////////////////
//// SET METHODS ///////////////////////////////////////////////////////
////             ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline void ParticleSystem::set_pool_size(int size);

506 14 set_birth_rate 4 698 30 ParticleSystem::set_birth_rate 0 1 161 212
// access/queries

////////////////////////////////////////////////////////////////////
//    Function : set_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline void ParticleSystem::set_birth_rate(float new_br);

507 15 set_litter_size 4 698 31 ParticleSystem::set_litter_size 0 1 162 194
////////////////////////////////////////////////////////////////////
//    Function : set_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::set_litter_size(int new_ls);

508 17 set_litter_spread 4 698 33 ParticleSystem::set_litter_spread 0 1 163 196
////////////////////////////////////////////////////////////////////
//    Function : set_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_litter_spread(int new_ls);

509 23 set_local_velocity_flag 4 698 39 ParticleSystem::set_local_velocity_flag 0 1 164 202
////////////////////////////////////////////////////////////////////
//    Function : set_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline void ParticleSystem::set_local_velocity_flag(bool lv);

510 27 set_system_grows_older_flag 4 698 43 ParticleSystem::set_system_grows_older_flag 0 1 165 206
////////////////////////////////////////////////////////////////////
//    Function : set_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_system_grows_older_flag(bool sgo);

511 19 set_system_lifespan 4 698 35 ParticleSystem::set_system_lifespan 0 1 166 198
////////////////////////////////////////////////////////////////////
//    Function : set_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_system_lifespan(float sl);

512 14 set_system_age 4 698 30 ParticleSystem::set_system_age 0 1 167 193
////////////////////////////////////////////////////////////////////
//    Function : set_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
54
inline void ParticleSystem::set_system_age(float age);

513 22 set_active_system_flag 4 698 38 ParticleSystem::set_active_system_flag 0 1 168 195
////////////////////////////////////////////////////////////////////
//    Function : set_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
59
inline void ParticleSystem::set_active_system_flag(bool a);

514 23 set_spawn_on_death_flag 4 698 39 ParticleSystem::set_spawn_on_death_flag 0 1 169 202
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
62
inline void ParticleSystem::set_spawn_on_death_flag(bool sod);

515 21 set_spawn_render_node 4 698 37 ParticleSystem::set_spawn_render_node 0 1 170 200
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::set_spawn_render_node(PandaNode *node);

516 24 set_template_system_flag 4 698 40 ParticleSystem::set_template_system_flag 0 1 171 203
////////////////////////////////////////////////////////////////////
//    Function : set_template_system_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline void ParticleSystem::set_template_system_flag(bool tsf);

517 17 set_render_parent 4 698 33 ParticleSystem::set_render_parent 0 1 172 196
////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline void ParticleSystem::set_render_parent(PandaNode *node);

518 12 set_renderer 4 698 28 ParticleSystem::set_renderer 0 1 173 191
////////////////////////////////////////////////////////////////////
//    Function : set_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_renderer(BaseParticleRenderer *r);

519 11 set_emitter 4 698 27 ParticleSystem::set_emitter 0 1 174 190
////////////////////////////////////////////////////////////////////
//    Function : set_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_emitter(BaseParticleEmitter *e);

520 11 set_factory 4 698 27 ParticleSystem::set_factory 0 1 175 190
////////////////////////////////////////////////////////////////////
//    Function : set_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_factory(BaseParticleFactory *f);

521 11 set_floor_z 4 698 27 ParticleSystem::set_floor_z 0 1 176 190
////////////////////////////////////////////////////////////////////
//    Function : set_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
49
inline void ParticleSystem::set_floor_z(float z);

522 13 clear_floor_z 4 698 29 ParticleSystem::clear_floor_z 0 1 177 192
////////////////////////////////////////////////////////////////////
//    Function : clear_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
48
inline void ParticleSystem::clear_floor_z(void);

523 13 get_pool_size 4 698 29 ParticleSystem::get_pool_size 0 1 178 405
////             /////////////////////////////////////////////////////
//// GET METHODS /////////////////////////////////////////////////////
////             /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline int ParticleSystem::get_pool_size(void) const;

524 14 get_birth_rate 4 698 30 ParticleSystem::get_birth_rate 0 1 179 193
////////////////////////////////////////////////////////////////////
//    Function : get_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_birth_rate(void) const;

525 15 get_litter_size 4 698 31 ParticleSystem::get_litter_size 0 1 180 194
////////////////////////////////////////////////////////////////////
//    Function : get_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
55
inline int ParticleSystem::get_litter_size(void) const;

526 17 get_litter_spread 4 698 33 ParticleSystem::get_litter_spread 0 1 181 196
////////////////////////////////////////////////////////////////////
//    Function : get_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline int ParticleSystem::get_litter_spread(void) const;

527 23 get_local_velocity_flag 4 698 39 ParticleSystem::get_local_velocity_flag 0 1 182 202
////////////////////////////////////////////////////////////////////
//    Function : get_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_local_velocity_flag(void) const;

528 27 get_system_grows_older_flag 4 698 43 ParticleSystem::get_system_grows_older_flag 0 1 183 206
////////////////////////////////////////////////////////////////////
//    Function : get_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline bool ParticleSystem::get_system_grows_older_flag(void) const;

529 19 get_system_lifespan 4 698 35 ParticleSystem::get_system_lifespan 0 1 184 198
////////////////////////////////////////////////////////////////////
//    Function : get_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline float ParticleSystem::get_system_lifespan(void) const;

530 14 get_system_age 4 698 30 ParticleSystem::get_system_age 0 1 185 193
////////////////////////////////////////////////////////////////////
//    Function : get_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_system_age(void) const;

531 22 get_active_system_flag 4 698 38 ParticleSystem::get_active_system_flag 0 1 186 195
////////////////////////////////////////////////////////////////////
//    Function : get_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_active_system_flag(void) const;

532 23 get_spawn_on_death_flag 4 698 39 ParticleSystem::get_spawn_on_death_flag 0 1 187 202
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_spawn_on_death_flag(void) const;

533 21 get_spawn_render_node 4 698 37 ParticleSystem::get_spawn_render_node 0 1 188 200
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline PandaNode *ParticleSystem::get_spawn_render_node(void) const;

534 22 get_i_was_spawned_flag 4 698 38 ParticleSystem::get_i_was_spawned_flag 0 1 189 201
////////////////////////////////////////////////////////////////////
//    Function : get_i_was_spawned_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_i_was_spawned_flag(void) const;

535 20 get_living_particles 4 698 36 ParticleSystem::get_living_particles 0 1 190 199
////////////////////////////////////////////////////////////////////
//    Function : get_living_particles
//      Access : Public
////////////////////////////////////////////////////////////////////
60
inline int ParticleSystem::get_living_particles(void) const;

536 17 get_render_parent 4 698 33 ParticleSystem::get_render_parent 0 1 191 196
////////////////////////////////////////////////////////////////////
//    Function : get_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline PandaNode *ParticleSystem::get_render_parent(void) const;

537 12 get_renderer 4 698 28 ParticleSystem::get_renderer 0 1 192 191
////////////////////////////////////////////////////////////////////
//    Function : get_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
70
inline BaseParticleRenderer *ParticleSystem::get_renderer(void) const;

538 11 get_emitter 4 698 27 ParticleSystem::get_emitter 0 1 193 190
////////////////////////////////////////////////////////////////////
//    Function : get_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleEmitter *ParticleSystem::get_emitter(void) const;

539 11 get_factory 4 698 27 ParticleSystem::get_factory 0 1 194 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleFactory *ParticleSystem::get_factory(void) const;

540 11 get_floor_z 4 698 27 ParticleSystem::get_floor_z 0 1 195 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline float ParticleSystem::get_floor_z(void) const;

541 18 add_spawn_template 4 698 34 ParticleSystem::add_spawn_template 0 1 196 226
// particle template vector

////////////////////////////////////////////////////////////////////
//    Function : add_spawn_template
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::add_spawn_template(ParticleSystem *ps);

542 21 clear_spawn_templates 4 698 37 ParticleSystem::clear_spawn_templates 0 1 197 200
////////////////////////////////////////////////////////////////////
//    Function : clear_spawn_templates
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::clear_spawn_templates(void);

543 6 render 4 698 22 ParticleSystem::render 0 1 198 1049
// methods

// Filename: particleSystem.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : render
//      Access : Public
// Description : Populates an attached GeomNode structure with the
//               particle geometry for rendering.  This is a
//               wrapper for accessability.
////////////////////////////////////////////////////////////////////
41
inline void ParticleSystem::render(void);

544 12 induce_labor 4 698 28 ParticleSystem::induce_labor 0 1 199 305
////////////////////////////////////////////////////////////////////
//    Function : induce_labor
//      Access : Public
// Description : Forces the birth of a particle litter this frame
//               by resetting _tics_since_birth
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystem::induce_labor(void);

545 16 clear_to_initial 4 698 32 ParticleSystem::clear_to_initial 0 1 200 320
////////////////////////////////////////////////////////////////////
//    Function : clear_to_initial
//      Access : Public
// Description : Resets the system to its start state by resizing to 0,
//               then resizing back to current size.
////////////////////////////////////////////////////////////////////
51
inline void ParticleSystem::clear_to_initial(void);

546 6 update 4 698 22 ParticleSystem::update 0 1 201 0
38
void ParticleSystem::update(float dt);

547 24 write_free_particle_fifo 4 698 40 ParticleSystem::write_free_particle_fifo 0 2 202 203 298
////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
92
virtual void ParticleSystem::write_free_particle_fifo(ostream &out, int indent = (0)) const;

548 21 write_spawn_templates 4 698 37 ParticleSystem::write_spawn_templates 0 2 204 205 295
////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
89
virtual void ParticleSystem::write_spawn_templates(ostream &out, int indent = (0)) const;

549 5 write 4 698 21 ParticleSystem::write 0 2 206 207 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
73
virtual void ParticleSystem::write(ostream &out, int indent = (0)) const;

550 14 get_class_type 4 698 30 ParticleSystem::get_class_type 0 1 208 0
55
static TypeHandle ParticleSystem::get_class_type(void);

551 21 ParticleSystemManager 4 700 44 ParticleSystemManager::ParticleSystemManager 0 2 209 210 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////
72
ParticleSystemManager::ParticleSystemManager(int every_nth_frame = (1));

552 22 ~ParticleSystemManager 4 700 45 ParticleSystemManager::~ParticleSystemManager 0 0 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : Public, Virtual
// Description : Destructor
////////////////////////////////////////////////////////////////////
60
virtual ParticleSystemManager::~ParticleSystemManager(void);

553 18 set_frame_stepping 4 700 41 ParticleSystemManager::set_frame_stepping 0 1 211 878
// Filename: particleSystemManager.I
// Created by:  charles (28Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void ParticleSystemManager::set_frame_stepping(int every_nth_frame);

554 18 get_frame_stepping 4 700 41 ParticleSystemManager::get_frame_stepping 0 1 212 191
////////////////////////////////////////////////////////////////////
// Function : get_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline int ParticleSystemManager::get_frame_stepping(void) const;

555 21 attach_particlesystem 4 700 44 ParticleSystemManager::attach_particlesystem 0 1 213 194
////////////////////////////////////////////////////////////////////
// Function : attach_particlesystem
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void ParticleSystemManager::attach_particlesystem(ParticleSystem *ps);

556 21 remove_particlesystem 4 700 44 ParticleSystemManager::remove_particlesystem 0 1 214 256
////////////////////////////////////////////////////////////////////
//    Function : remove_particlesystem
//      Access : public
// Description : removes a ps from the maintenance list
////////////////////////////////////////////////////////////////////
70
void ParticleSystemManager::remove_particlesystem(ParticleSystem *ps);

557 5 clear 4 700 28 ParticleSystemManager::clear 0 1 215 178
////////////////////////////////////////////////////////////////////
// Function : clear
//   Access : public
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystemManager::clear(void);

558 12 do_particles 4 700 35 ParticleSystemManager::do_particles 0 1 216 518
////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and render for each ps in the list.
//               this is probably the one you want to use.  Rendering
//               is the expensive operation, and particles REALLY
//               should at least be updated every frame, so nth_frame
//               stepping applies only to rendering.
////////////////////////////////////////////////////////////////////
51
void ParticleSystemManager::do_particles(float dt);

559 6 output 4 700 29 ParticleSystemManager::output 0 1 217 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
63
virtual void ParticleSystemManager::output(ostream &out) const;

560 13 write_ps_list 4 700 36 ParticleSystemManager::write_ps_list 0 2 218 219 287
////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
88
virtual void ParticleSystemManager::write_ps_list(ostream &out, int indent = (0)) const;

561 5 write 4 700 28 ParticleSystemManager::write 0 2 220 221 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void ParticleSystemManager::write(ostream &out, int indent = (0)) const;

562 12 PointEmitter 4 701 26 PointEmitter::PointEmitter 0 2 222 223 225
////////////////////////////////////////////////////////////////////
//    Function : PointEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
33
PointEmitter::PointEmitter(void);

563 12 set_location 4 701 26 PointEmitter::set_location 0 1 224 897
// Filename: pointEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point
//      Access : public
// Description : point setting
////////////////////////////////////////////////////////////////////
58
inline void PointEmitter::set_location(LPoint3f const &p);

564 12 get_location 4 701 26 PointEmitter::get_location 0 1 225 0
55
inline LPoint3f PointEmitter::get_location(void) const;

565 20 PointParticleFactory 4 702 42 PointParticleFactory::PointParticleFactory 0 2 226 227 471
////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
49
PointParticleFactory::PointParticleFactory(void);

566 21 PointParticleRenderer 4 703 44 PointParticleRenderer::PointParticleRenderer 0 8 228 229 230 231 232 233 234 235 473
////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : special constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : Copy constructor
////////////////////////////////////////////////////////////////////
80
PointParticleRenderer::PointParticleRenderer(PointParticleRenderer const &copy);

567 14 set_point_size 4 703 37 PointParticleRenderer::set_point_size 0 1 236 880
// Filename: pointParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline void PointParticleRenderer::set_point_size(float point_size);

568 15 set_start_color 4 703 38 PointParticleRenderer::set_start_color 0 1 237 194
////////////////////////////////////////////////////////////////////
//    Function : set_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
73
inline void PointParticleRenderer::set_start_color(LVecBase4f const &sc);

569 13 set_end_color 4 703 36 PointParticleRenderer::set_end_color 0 1 238 192
////////////////////////////////////////////////////////////////////
//    Function : set_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
71
inline void PointParticleRenderer::set_end_color(LVecBase4f const &ec);

570 14 set_blend_type 4 703 37 PointParticleRenderer::set_blend_type 0 1 239 193
////////////////////////////////////////////////////////////////////
//    Function : set_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
100
inline void PointParticleRenderer::set_blend_type(PointParticleRenderer::PointParticleBlendType bt);

571 16 set_blend_method 4 703 39 PointParticleRenderer::set_blend_method 0 1 240 195
////////////////////////////////////////////////////////////////////
//    Function : set_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
106
inline void PointParticleRenderer::set_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

572 14 get_point_size 4 703 37 PointParticleRenderer::get_point_size 0 1 241 193
////////////////////////////////////////////////////////////////////
//    Function : get_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
63
inline float PointParticleRenderer::get_point_size(void) const;

573 15 get_start_color 4 703 38 PointParticleRenderer::get_start_color 0 1 242 194
////////////////////////////////////////////////////////////////////
//    Function : get_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f const &PointParticleRenderer::get_start_color(void) const;

574 13 get_end_color 4 703 36 PointParticleRenderer::get_end_color 0 1 243 192
////////////////////////////////////////////////////////////////////
//    Function : get_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &PointParticleRenderer::get_end_color(void) const;

575 14 get_blend_type 4 703 37 PointParticleRenderer::get_blend_type 0 1 244 193
////////////////////////////////////////////////////////////////////
//    Function : get_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
103
inline PointParticleRenderer::PointParticleBlendType PointParticleRenderer::get_blend_type(void) const;

576 16 get_blend_method 4 703 39 PointParticleRenderer::get_blend_method 0 1 245 195
////////////////////////////////////////////////////////////////////
//    Function : get_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
109
inline BaseParticleRenderer::ParticleRendererBlendMethod PointParticleRenderer::get_blend_method(void) const;

577 16 RectangleEmitter 4 705 34 RectangleEmitter::RectangleEmitter 0 2 246 247 229
////////////////////////////////////////////////////////////////////
//    Function : RectangleEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
41
RectangleEmitter::RectangleEmitter(void);

578 13 set_min_bound 4 705 31 RectangleEmitter::set_min_bound 0 1 248 904
// Filename: rectangleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_min_bound(LPoint2f const &vmin);

579 13 set_max_bound 4 705 31 RectangleEmitter::set_max_bound 0 1 249 222
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_max_bound(LPoint2f const &vmax);

580 13 get_min_bound 4 705 31 RectangleEmitter::get_min_bound 0 1 250 222
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_min_bound(void) const;

581 13 get_max_bound 4 705 31 RectangleEmitter::get_max_bound 0 1 251 222
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_max_bound(void) const;

582 11 RingEmitter 4 706 24 RingEmitter::RingEmitter 0 2 252 253 224
////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
31
RingEmitter::RingEmitter(void);

583 10 set_radius 4 706 23 RingEmitter::set_radius 0 1 254 894
// Filename: ringEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
45
inline void RingEmitter::set_radius(float r);

584 9 set_angle 4 706 22 RingEmitter::set_angle 0 1 255 228
////////////////////////////////////////////////////////////////////
//    Function : set_angle
//      Access : public
// Description : angle of elevation set
////////////////////////////////////////////////////////////////////
48
inline void RingEmitter::set_angle(float angle);

585 17 set_radius_spread 4 706 30 RingEmitter::set_radius_spread 0 1 256 231
////////////////////////////////////////////////////////////////////
//    Function : set_radius_spread
//      Access : public
// Description : radius_spread set
////////////////////////////////////////////////////////////////////
57
inline void RingEmitter::set_radius_spread(float spread);

586 10 get_radius 4 706 23 RingEmitter::get_radius 0 1 257 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
49
inline float RingEmitter::get_radius(void) const;

587 9 get_angle 4 706 22 RingEmitter::get_angle 0 1 258 228
////////////////////////////////////////////////////////////////////
//    Function : get_angle
//      Access : public
// Description : angle of elevation get
////////////////////////////////////////////////////////////////////
48
inline float RingEmitter::get_angle(void) const;

588 17 get_radius_spread 4 706 30 RingEmitter::get_radius_spread 0 1 259 231
////////////////////////////////////////////////////////////////////
//    Function : get_radius_spread
//      Access : public
// Description : radius_spread get
////////////////////////////////////////////////////////////////////
56
inline float RingEmitter::get_radius_spread(void) const;

589 23 SparkleParticleRenderer 4 707 48 SparkleParticleRenderer::SparkleParticleRenderer 0 3 260 261 262 710
////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
55
SparkleParticleRenderer::SparkleParticleRenderer(void);

590 16 set_center_color 4 707 41 SparkleParticleRenderer::set_center_color 0 1 263 884
// Filename: sparkleParticleRenderer.I
// Created by:  charles (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
75
inline void SparkleParticleRenderer::set_center_color(LVecBase4f const &c);

591 14 set_edge_color 4 707 39 SparkleParticleRenderer::set_edge_color 0 1 264 193
////////////////////////////////////////////////////////////////////
//    Function : set_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
73
inline void SparkleParticleRenderer::set_edge_color(LVecBase4f const &c);

592 16 set_birth_radius 4 707 41 SparkleParticleRenderer::set_birth_radius 0 1 265 195
////////////////////////////////////////////////////////////////////
//    Function : set_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_birth_radius(float radius);

593 16 set_death_radius 4 707 41 SparkleParticleRenderer::set_death_radius 0 1 266 195
////////////////////////////////////////////////////////////////////
//    Function : set_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_death_radius(float radius);

594 14 set_life_scale 4 707 39 SparkleParticleRenderer::set_life_scale 0 1 267 193
////////////////////////////////////////////////////////////////////
//    Function : set_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
104
inline void SparkleParticleRenderer::set_life_scale(SparkleParticleRenderer::SparkleParticleLifeScale );

595 16 get_center_color 4 707 41 SparkleParticleRenderer::get_center_color 0 1 268 195
////////////////////////////////////////////////////////////////////
//    Function : get_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
79
inline LVecBase4f const &SparkleParticleRenderer::get_center_color(void) const;

596 14 get_edge_color 4 707 39 SparkleParticleRenderer::get_edge_color 0 1 269 193
////////////////////////////////////////////////////////////////////
//    Function : get_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
77
inline LVecBase4f const &SparkleParticleRenderer::get_edge_color(void) const;

597 16 get_birth_radius 4 707 41 SparkleParticleRenderer::get_birth_radius 0 1 270 195
////////////////////////////////////////////////////////////////////
//    Function : get_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_birth_radius(void) const;

598 16 get_death_radius 4 707 41 SparkleParticleRenderer::get_death_radius 0 1 271 195
////////////////////////////////////////////////////////////////////
//    Function : get_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_death_radius(void) const;

599 14 get_life_scale 4 707 39 SparkleParticleRenderer::get_life_scale 0 1 272 193
////////////////////////////////////////////////////////////////////
//    Function : get_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
109
inline SparkleParticleRenderer::SparkleParticleLifeScale SparkleParticleRenderer::get_life_scale(void) const;

600 20 SphereSurfaceEmitter 4 709 42 SphereSurfaceEmitter::SphereSurfaceEmitter 0 2 273 274 233
////////////////////////////////////////////////////////////////////
//    Function : SphereSurfaceEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
49
SphereSurfaceEmitter::SphereSurfaceEmitter(void);

601 10 set_radius 4 709 32 SphereSurfaceEmitter::set_radius 0 1 275 0
54
inline void SphereSurfaceEmitter::set_radius(float r);

602 10 get_radius 4 709 32 SphereSurfaceEmitter::get_radius 0 1 276 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
58
inline float SphereSurfaceEmitter::get_radius(void) const;

603 19 SphereVolumeEmitter 4 710 40 SphereVolumeEmitter::SphereVolumeEmitter 0 2 277 278 232
////////////////////////////////////////////////////////////////////
//    Function : SphereVolumeEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
47
SphereVolumeEmitter::SphereVolumeEmitter(void);

604 10 set_radius 4 710 31 SphereVolumeEmitter::set_radius 0 1 279 0
53
inline void SphereVolumeEmitter::set_radius(float r);

605 10 get_radius 4 710 31 SphereVolumeEmitter::get_radius 0 1 280 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
57
inline float SphereVolumeEmitter::get_radius(void) const;

606 15 set_source_info 4 711 27 SpriteAnim::set_source_info 0 2 281 282 0
66
void SpriteAnim::set_source_info(basic_string< char > const &tex);

607 15 get_source_type 4 711 27 SpriteAnim::get_source_type 0 1 283 0
63
SpriteAnim::SourceType SpriteAnim::get_source_type(void) const;

608 14 get_tex_source 4 711 26 SpriteAnim::get_tex_source 0 1 284 0
60
basic_string< char > SpriteAnim::get_tex_source(void) const;

609 16 get_model_source 4 711 28 SpriteAnim::get_model_source 0 1 285 0
62
basic_string< char > SpriteAnim::get_model_source(void) const;

610 15 get_node_source 4 711 27 SpriteAnim::get_node_source 0 1 286 0
61
basic_string< char > SpriteAnim::get_node_source(void) const;

611 14 get_num_frames 4 711 26 SpriteAnim::get_num_frames 0 1 287 0
43
int SpriteAnim::get_num_frames(void) const;

612 11 ~SpriteAnim 4 711 23 SpriteAnim::~SpriteAnim 0 0 0
30
SpriteAnim::~SpriteAnim(void);

613 22 SpriteParticleRenderer 4 713 46 SpriteParticleRenderer::SpriteParticleRenderer 0 3 288 289 290 259
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
90
SpriteParticleRenderer::SpriteParticleRenderer(Texture *tex = ((Texture *)((void *)(0))));

614 13 set_from_node 4 713 37 SpriteParticleRenderer::set_from_node 0 4 291 292 293 294 2222
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
////////////////////////////////////////////////////////////////////
99
void SpriteParticleRenderer::set_from_node(NodePath const &node_path, bool size_from_texels = (0));

615 13 add_from_node 4 713 37 SpriteParticleRenderer::add_from_node 0 6 295 296 297 298 299 300 1450
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////
118
void SpriteParticleRenderer::add_from_node(NodePath const &node_path, bool size_from_texels = (0), bool resize = (0));

616 11 set_texture 4 713 35 SpriteParticleRenderer::set_texture 0 2 301 302 1277
// Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
////////////////////////////////////////////////////////////////////
91
inline void SpriteParticleRenderer::set_texture(Texture *tex, float texels_per_unit = (1));

617 11 add_texture 4 713 35 SpriteParticleRenderer::add_texture 0 3 303 304 305 469
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
////////////////////////////////////////////////////////////////////
110
inline void SpriteParticleRenderer::add_texture(Texture *tex, float texels_per_unit = (1), bool resize = (0));

618 16 remove_animation 4 713 40 SpriteParticleRenderer::remove_animation 0 1 306 291
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::remove_animation
//      Access : Published
// Description : Removes an animation texture set from the renderer.
////////////////////////////////////////////////////////////////////
66
inline void SpriteParticleRenderer::remove_animation(int const n);

619 9 set_ll_uv 4 713 33 SpriteParticleRenderer::set_ll_uv 0 2 307 308 956
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
69
inline void SpriteParticleRenderer::set_ll_uv(LPoint2f const &ll_uv);

620 9 set_ur_uv 4 713 33 SpriteParticleRenderer::set_ur_uv 0 2 309 310 958
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
69
inline void SpriteParticleRenderer::set_ur_uv(LPoint2f const &ur_uv);

621 8 set_size 4 713 32 SpriteParticleRenderer::set_size 0 1 311 275
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_size
//      Access : public
// Description : Sets the size of each particle in world units.
////////////////////////////////////////////////////////////////////
72
inline void SpriteParticleRenderer::set_size(float width, float height);

622 9 set_color 4 713 33 SpriteParticleRenderer::set_color 0 1 312 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_color
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_color(LVecBase4f const &color);

623 16 set_x_scale_flag 4 713 40 SpriteParticleRenderer::set_x_scale_flag 0 1 313 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_x_scale_flag(bool animate_x_ratio);

624 16 set_y_scale_flag 4 713 40 SpriteParticleRenderer::set_y_scale_flag 0 1 314 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_y_scale_flag(bool animate_y_ratio);

625 19 set_anim_angle_flag 4 713 43 SpriteParticleRenderer::set_anim_angle_flag 0 1 315 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
76
inline void SpriteParticleRenderer::set_anim_angle_flag(bool animate_theta);

626 19 set_initial_x_scale 4 713 43 SpriteParticleRenderer::set_initial_x_scale 0 1 316 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_x_scale(float initial_x_scale);

627 17 set_final_x_scale 4 713 41 SpriteParticleRenderer::set_final_x_scale 0 1 317 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_x_scale(float final_x_scale);

628 19 set_initial_y_scale 4 713 43 SpriteParticleRenderer::set_initial_y_scale 0 1 318 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_y_scale(float initial_y_scale);

629 17 set_final_y_scale 4 713 41 SpriteParticleRenderer::set_final_y_scale 0 1 319 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_y_scale(float final_y_scale);

630 21 set_nonanimated_theta 4 713 45 SpriteParticleRenderer::set_nonanimated_theta 0 1 320 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_nonanimated_theta(float theta);

631 22 set_alpha_blend_method 4 713 46 SpriteParticleRenderer::set_alpha_blend_method 0 1 321 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
113
inline void SpriteParticleRenderer::set_alpha_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

632 17 set_alpha_disable 4 713 41 SpriteParticleRenderer::set_alpha_disable 0 1 322 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void SpriteParticleRenderer::set_alpha_disable(bool ad);

633 25 set_animate_frames_enable 4 713 49 SpriteParticleRenderer::set_animate_frames_enable 0 1 323 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_animate_frames_enable(bool an);

634 23 set_animate_frames_rate 4 713 47 SpriteParticleRenderer::set_animate_frames_rate 0 1 324 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline void SpriteParticleRenderer::set_animate_frames_rate(float r);

635 24 set_animate_frames_index 4 713 48 SpriteParticleRenderer::set_animate_frames_index 0 1 325 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_index
//   Access : public
//  Purpose : Sets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
68
inline void SpriteParticleRenderer::set_animate_frames_index(int i);

636 11 get_texture 4 713 35 SpriteParticleRenderer::get_texture 0 2 326 327 418
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline Texture *SpriteParticleRenderer::get_texture(void) const;

637 13 get_num_anims 4 713 37 SpriteParticleRenderer::get_num_anims 0 1 328 0
61
inline int SpriteParticleRenderer::get_num_anims(void) const;

638 8 get_anim 4 713 32 SpriteParticleRenderer::get_anim 0 1 329 0
71
inline SpriteAnim *SpriteParticleRenderer::get_anim(int const n) const;

639 13 get_last_anim 4 713 37 SpriteParticleRenderer::get_last_anim 0 1 330 0
69
inline SpriteAnim *SpriteParticleRenderer::get_last_anim(void) const;

640 31 get_color_interpolation_manager 4 713 55 SpriteParticleRenderer::get_color_interpolation_manager 0 1 331 228
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color_interpolation_manager
//   Access : public
////////////////////////////////////////////////////////////////////
102
inline ColorInterpolationManager *SpriteParticleRenderer::get_color_interpolation_manager(void) const;

641 9 get_ll_uv 4 713 33 SpriteParticleRenderer::get_ll_uv 0 2 332 333 632
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////
62
inline LPoint2f SpriteParticleRenderer::get_ll_uv(void) const;

642 9 get_ur_uv 4 713 33 SpriteParticleRenderer::get_ur_uv 0 2 334 335 633
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the upper-right corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////
62
inline LPoint2f SpriteParticleRenderer::get_ur_uv(void) const;

643 9 get_width 4 713 33 SpriteParticleRenderer::get_width 0 1 336 280
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_width
//      Access : public
// Description : Returns the width of each particle in world units.
////////////////////////////////////////////////////////////////////
59
inline float SpriteParticleRenderer::get_width(void) const;

644 10 get_height 4 713 34 SpriteParticleRenderer::get_height 0 1 337 282
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_height
//      Access : public
// Description : Returns the height of each particle in world units.
////////////////////////////////////////////////////////////////////
60
inline float SpriteParticleRenderer::get_height(void) const;

645 9 get_color 4 713 33 SpriteParticleRenderer::get_color 0 1 338 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline LVecBase4f SpriteParticleRenderer::get_color(void) const;

646 16 get_x_scale_flag 4 713 40 SpriteParticleRenderer::get_x_scale_flag 0 1 339 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_x_scale_flag(void) const;

647 16 get_y_scale_flag 4 713 40 SpriteParticleRenderer::get_y_scale_flag 0 1 340 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_y_scale_flag(void) const;

648 19 get_anim_angle_flag 4 713 43 SpriteParticleRenderer::get_anim_angle_flag 0 1 341 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline bool SpriteParticleRenderer::get_anim_angle_flag(void) const;

649 19 get_initial_x_scale 4 713 43 SpriteParticleRenderer::get_initial_x_scale 0 1 342 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_x_scale(void) const;

650 17 get_final_x_scale 4 713 41 SpriteParticleRenderer::get_final_x_scale 0 1 343 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_x_scale(void) const;

651 19 get_initial_y_scale 4 713 43 SpriteParticleRenderer::get_initial_y_scale 0 1 344 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_y_scale(void) const;

652 17 get_final_y_scale 4 713 41 SpriteParticleRenderer::get_final_y_scale 0 1 345 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_y_scale(void) const;

653 21 get_nonanimated_theta 4 713 45 SpriteParticleRenderer::get_nonanimated_theta 0 1 346 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline float SpriteParticleRenderer::get_nonanimated_theta(void) const;

654 22 get_alpha_blend_method 4 713 46 SpriteParticleRenderer::get_alpha_blend_method 0 1 347 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
116
inline BaseParticleRenderer::ParticleRendererBlendMethod SpriteParticleRenderer::get_alpha_blend_method(void) const;

655 17 get_alpha_disable 4 713 41 SpriteParticleRenderer::get_alpha_disable 0 1 348 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
66
inline bool SpriteParticleRenderer::get_alpha_disable(void) const;

656 25 get_animate_frames_enable 4 713 49 SpriteParticleRenderer::get_animate_frames_enable 0 1 349 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
74
inline bool SpriteParticleRenderer::get_animate_frames_enable(void) const;

657 23 get_animate_frames_rate 4 713 47 SpriteParticleRenderer::get_animate_frames_rate 0 1 350 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline float SpriteParticleRenderer::get_animate_frames_rate(void) const;

658 24 get_animate_frames_index 4 713 48 SpriteParticleRenderer::get_animate_frames_index 0 1 351 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_index
//   Access : public
//  Purpose : Gets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
72
inline int SpriteParticleRenderer::get_animate_frames_index(void) const;

659 18 TangentRingEmitter 4 714 38 TangentRingEmitter::TangentRingEmitter 0 2 352 353 234
////////////////////////////////////////////////////////////////////
//     Function : tangentRingEmitter
//       Access : public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
45
TangentRingEmitter::TangentRingEmitter(void);

660 10 set_radius 4 714 30 TangentRingEmitter::set_radius 0 1 354 869
// Filename: tangentRingEmitter.I
// Created by:  charles (25Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_radius
//    Access : public
////////////////////////////////////////////////////////////////////
52
inline void TangentRingEmitter::set_radius(float r);

661 17 set_radius_spread 4 714 37 TangentRingEmitter::set_radius_spread 0 1 355 192
////////////////////////////////////////////////////////////////////
//  Function : set_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
64
inline void TangentRingEmitter::set_radius_spread(float spread);

662 10 get_radius 4 714 30 TangentRingEmitter::get_radius 0 1 356 185
////////////////////////////////////////////////////////////////////
//  Function : get_radius
//    Access : public
////////////////////////////////////////////////////////////////////
56
inline float TangentRingEmitter::get_radius(void) const;

663 17 get_radius_spread 4 714 37 TangentRingEmitter::get_radius_spread 0 1 357 192
////////////////////////////////////////////////////////////////////
//  Function : get_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
63
inline float TangentRingEmitter::get_radius_spread(void) const;

664 20 ZSpinParticleFactory 4 715 42 ZSpinParticleFactory::ZSpinParticleFactory 0 2 358 359 233
////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
49
ZSpinParticleFactory::ZSpinParticleFactory(void);

665 17 set_initial_angle 4 715 39 ZSpinParticleFactory::set_initial_angle 0 1 360 876
// Filename: zSpinParticleFactory.I
// Created by:  charles (16Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline void ZSpinParticleFactory::set_initial_angle(float angle);

666 15 set_final_angle 4 715 37 ZSpinParticleFactory::set_final_angle 0 1 361 188
////////////////////////////////////////////////////////////////////
// Function : set_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void ZSpinParticleFactory::set_final_angle(float angle);

667 24 set_initial_angle_spread 4 715 46 ZSpinParticleFactory::set_initial_angle_spread 0 1 362 197
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void ZSpinParticleFactory::set_initial_angle_spread(float spread);

668 22 set_final_angle_spread 4 715 44 ZSpinParticleFactory::set_final_angle_spread 0 1 363 195
////////////////////////////////////////////////////////////////////
// Function : set_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void ZSpinParticleFactory::set_final_angle_spread(float spread);

669 17 get_initial_angle 4 715 39 ZSpinParticleFactory::get_initial_angle 0 1 364 190
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float ZSpinParticleFactory::get_initial_angle(void) const;

670 15 get_final_angle 4 715 37 ZSpinParticleFactory::get_final_angle 0 1 365 188
////////////////////////////////////////////////////////////////////
// Function : get_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float ZSpinParticleFactory::get_final_angle(void) const;

671 24 get_initial_angle_spread 4 715 46 ZSpinParticleFactory::get_initial_angle_spread 0 1 366 197
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
72
inline float ZSpinParticleFactory::get_initial_angle_spread(void) const;

672 22 get_final_angle_spread 4 715 44 ZSpinParticleFactory::get_final_angle_spread 0 1 367 195
////////////////////////////////////////////////////////////////////
// Function : get_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
70
inline float ZSpinParticleFactory::get_final_angle_spread(void) const;

673 20 set_angular_velocity 4 715 42 ZSpinParticleFactory::set_angular_velocity 0 1 368 0
64
inline void ZSpinParticleFactory::set_angular_velocity(float v);

674 20 get_angular_velocity 4 715 42 ZSpinParticleFactory::get_angular_velocity 0 1 369 193
////////////////////////////////////////////////////////////////////
// Function : get_angular_velocity
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline float ZSpinParticleFactory::get_angular_velocity(void) const;

675 27 set_angular_velocity_spread 4 715 49 ZSpinParticleFactory::set_angular_velocity_spread 0 1 370 0
76
inline void ZSpinParticleFactory::set_angular_velocity_spread(float spread);

676 27 get_angular_velocity_spread 4 715 49 ZSpinParticleFactory::get_angular_velocity_spread 0 1 371 0
75
inline float ZSpinParticleFactory::get_angular_velocity_spread(void) const;

677 23 enable_angular_velocity 4 715 45 ZSpinParticleFactory::enable_angular_velocity 0 1 372 0
73
inline void ZSpinParticleFactory::enable_angular_velocity(bool bEnabled);

678 28 get_angular_velocity_enabled 4 715 50 ZSpinParticleFactory::get_angular_velocity_enabled 0 1 373 0
75
inline bool ZSpinParticleFactory::get_angular_velocity_enabled(void) const;

373
1 14 Dtool_KBUAq9K2 7 7 716 376 14 Dtool_KBUAq9K2 1 4 this 3 716  
2 14 Dtool_KBUAQvUs 4 8 721 0 14 Dtool_KBUAQvUs 3 4 this 3 716  3 pos 1 717  3 vel 1 719  
3 14 Dtool_KBUAvAPb 4 9 721 0 14 Dtool_KBUAvAPb 2 4 this 3 716  2 et 1 681  
4 14 Dtool_KBUA014P 4 10 721 0 14 Dtool_KBUA014P 2 4 this 3 716  1 a 1 722  
5 14 Dtool_KBUAGfat 4 11 721 0 14 Dtool_KBUAGfat 2 4 this 3 716  2 as 1 722  
6 14 Dtool_KBUAJolc 4 12 721 0 14 Dtool_KBUAJolc 2 4 this 3 716  2 of 1 723  
7 14 Dtool_KBUA4_f_ 4 13 721 0 14 Dtool_KBUA4_f_ 2 4 this 3 716  3 elv 1 723  
8 14 Dtool_KBUAegGF 4 14 721 0 14 Dtool_KBUAegGF 2 4 this 3 716  2 ro 1 725  
9 14 Dtool_KBUA_Hj6 6 15 681 0 14 Dtool_KBUA_Hj6 1 4 this 3 727  
10 14 Dtool_KBUAyJT9 6 16 722 0 14 Dtool_KBUAyJT9 1 4 this 3 727  
11 14 Dtool_KBUA_DLN 6 17 722 0 14 Dtool_KBUA_DLN 1 4 this 3 727  
12 14 Dtool_KBUAgc7B 7 18 719 0 14 Dtool_KBUAgc7B 1 4 this 3 727  
13 14 Dtool_KBUASHW0 7 19 719 0 14 Dtool_KBUASHW0 1 4 this 3 727  
14 14 Dtool_KBUAvPd8 7 20 717 0 14 Dtool_KBUAvPd8 1 4 this 3 727  
15 14 Dtool_KBUAKdyZ 4 21 721 0 14 Dtool_KBUAKdyZ 2 4 this 3 727  3 out 1 729  
16 14 Dtool_KBUAkUM2 4 22 721 0 14 Dtool_KBUAkUM2 3 4 this 3 727  3 out 1 729  6 indent 1 731  
17 14 Dtool_KBUAWxub 4 22 721 0 14 Dtool_KBUAWxub 2 4 this 3 727  3 out 1 729  
18 14 Dtool_KBUAtTF9 6 3 732 0 14 Dtool_KBUAtTF9 1 4 this 3 716  
19 14 Dtool_KBUA_EM5 7 4 716 376 14 Dtool_KBUA_EM5 1 4 this 3 732  
20 14 Dtool_KBUAiQuU 4 27 721 0 14 Dtool_KBUAiQuU 2 4 this 3 733  2 lb 1 722  
21 14 Dtool_KBUAdQHH 4 28 721 0 14 Dtool_KBUAdQHH 2 4 this 3 733  2 ls 1 722  
22 14 Dtool_KBUAbu3l 4 29 721 0 14 Dtool_KBUAbu3l 2 4 this 3 733  2 mb 1 722  
23 14 Dtool_KBUANeQM 4 30 721 0 14 Dtool_KBUANeQM 2 4 this 3 733  2 ms 1 722  
24 14 Dtool_KBUAWNEZ 4 31 721 0 14 Dtool_KBUAWNEZ 2 4 this 3 733  3 tvb 1 722  
25 14 Dtool_KBUAANWX 4 32 721 0 14 Dtool_KBUAANWX 2 4 this 3 733  3 tvs 1 722  
26 14 Dtool_KBUAtgu1 6 33 722 0 14 Dtool_KBUAtgu1 1 4 this 3 734  
27 14 Dtool_KBUA99k2 6 34 722 0 14 Dtool_KBUA99k2 1 4 this 3 734  
28 14 Dtool_KBUA2EQT 6 35 722 0 14 Dtool_KBUA2EQT 1 4 this 3 734  
29 14 Dtool_KBUA_lih 6 36 722 0 14 Dtool_KBUA_lih 1 4 this 3 734  
30 14 Dtool_KBUACoqe 6 37 722 0 14 Dtool_KBUACoqe 1 4 this 3 734  
31 14 Dtool_KBUAm_x2 6 38 722 0 14 Dtool_KBUAm_x2 1 4 this 3 734  
32 14 Dtool_KBUAsnkF 6 39 736 0 14 Dtool_KBUAsnkF 1 4 this 3 734  
33 14 Dtool_KBUAwNK_ 4 40 721 0 14 Dtool_KBUAwNK_ 2 4 this 3 733  2 bp 1 736  
34 14 Dtool_KBUAOcSl 4 41 721 0 14 Dtool_KBUAOcSl 2 4 this 3 734  3 out 1 729  
35 14 Dtool_KBUAtDsB 4 42 721 0 14 Dtool_KBUAtDsB 3 4 this 3 734  3 out 1 729  6 indent 1 731  
36 14 Dtool_KBUAFUOn 4 42 721 0 14 Dtool_KBUAFUOn 2 4 this 3 734  3 out 1 729  
37 14 Dtool_KBUA2ikI 6 24 732 0 14 Dtool_KBUA2ikI 1 4 this 3 733  
38 14 Dtool_KBUA827J 7 25 733 395 14 Dtool_KBUA827J 1 4 this 3 732  
39 14 Dtool_KBUAnoTT 7 49 741 0 14 Dtool_KBUAnoTT 1 4 this 3 739  
40 14 Dtool_KBUA0p5w 4 50 721 0 14 Dtool_KBUA0p5w 2 4 this 3 742  2 am 1 684  
41 14 Dtool_KBUAcz17 6 51 684 0 14 Dtool_KBUAcz17 1 4 this 3 739  
42 14 Dtool_KBUAmPHY 4 52 721 0 14 Dtool_KBUAmPHY 2 4 this 3 742  2 ua 1 722  
43 14 Dtool_KBUAk2V9 6 53 722 0 14 Dtool_KBUAk2V9 1 4 this 3 739  
44 14 Dtool_KBUAZxa6 4 54 721 0 14 Dtool_KBUAZxa6 4 4 this 3 742  2 bm 1 743  2 oa 1 745  2 ob 1 745  
45 14 Dtool_KBUApO_p 4 54 721 0 14 Dtool_KBUApO_p 3 4 this 3 742  2 bm 1 743  2 oa 1 745  
46 14 Dtool_KBUAtvuc 4 54 721 0 14 Dtool_KBUAtvuc 2 4 this 3 742  2 bm 1 743  
47 14 Dtool_KBUAvavp 4 55 721 0 14 Dtool_KBUAvavp 2 4 this 3 742  12 ignore_scale 1 746  
48 14 Dtool_KBUAA22s 6 56 746 0 14 Dtool_KBUAA22s 1 4 this 3 739  
49 14 Dtool_KBUAjYBa 4 57 721 0 14 Dtool_KBUAjYBa 2 4 this 3 739  3 out 1 729  
50 14 Dtool_KBUAGvEn 4 58 721 0 14 Dtool_KBUAGvEn 3 4 this 3 739  3 out 1 729  6 indent 1 731  
51 14 Dtool_KBUALLsX 4 58 721 0 14 Dtool_KBUALLsX 2 4 this 3 739  3 out 1 729  
52 14 Dtool_KBUAumoD 6 44 732 0 14 Dtool_KBUAumoD 1 4 this 3 742  
53 14 Dtool_KBUAE1d7 7 45 742 414 14 Dtool_KBUAE1d7 1 4 this 3 732  
54 14 Dtool_KBUAkwIq 7 60 747 376 14 Dtool_KBUAkwIq 0 
55 14 Dtool_KBUA42fc 7 60 747 376 14 Dtool_KBUA42fc 1 4 copy 1 748  
56 14 Dtool_KBUAfUdv 4 61 721 0 14 Dtool_KBUAfUdv 2 4 this 3 747  4 vmin 1 725  
57 14 Dtool_KBUAhptT 4 62 721 0 14 Dtool_KBUAhptT 2 4 this 3 747  4 vmax 1 725  
58 14 Dtool_KBUAtfR4 7 63 717 0 14 Dtool_KBUAtfR4 1 4 this 3 748  
59 14 Dtool_KBUAgZgc 7 64 717 0 14 Dtool_KBUAgZgc 1 4 this 3 748  
60 14 Dtool_KBUATq1Y 7 67 753 0 14 Dtool_KBUATq1Y 1 4 this 3 751  
61 14 Dtool_KBUA7Bw_ 4 68 721 0 14 Dtool_KBUA7Bw_ 2 4 this 3 754  1 c 1 755  
62 14 Dtool_KBUAQV5J 7 69 758 0 14 Dtool_KBUAQV5J 0 
63 14 Dtool_KBUA5qpK 7 72 753 0 14 Dtool_KBUA5qpK 1 4 this 3 759  
64 14 Dtool_KBUAcygt 4 73 721 0 14 Dtool_KBUAcygt 2 4 this 3 761  1 c 1 755  
65 14 Dtool_KBUAdiNh 7 74 758 0 14 Dtool_KBUAdiNh 0 
66 14 Dtool_KBUAk4fw 6 77 722 0 14 Dtool_KBUAk4fw 1 4 this 3 762  
67 14 Dtool_KBUAh47o 6 78 722 0 14 Dtool_KBUAh47o 1 4 this 3 762  
68 14 Dtool_KBUAMbSc 4 79 721 0 14 Dtool_KBUAMbSc 2 4 this 3 764  1 w 1 722  
69 14 Dtool_KBUAJbuU 4 80 721 0 14 Dtool_KBUAJbuU 2 4 this 3 764  1 w 1 722  
70 14 Dtool_KBUAfIOE 7 81 758 0 14 Dtool_KBUAfIOE 0 
71 14 Dtool_KBUA6TsB 6 84 722 0 14 Dtool_KBUA6TsB 1 4 this 3 765  
72 14 Dtool_KBUA_SEl 4 85 721 0 14 Dtool_KBUA_SEl 2 4 this 3 767  1 p 1 722  
73 14 Dtool_KBUAvz7V 7 86 758 0 14 Dtool_KBUAvz7V 0 
74 14 Dtool_KBUAEHX7 7 91 769 451 14 Dtool_KBUAEHX7 4 8 function 1 768  10 time_begin 1 722  8 time_end 1 722  2 id 1 731  
75 14 Dtool_KBUAwp_m 7 91 769 451 14 Dtool_KBUAwp_m 1 1 s 1 770  
76 14 Dtool_KBUA4E2r 7 93 773 0 14 Dtool_KBUA4E2r 1 4 this 3 770  
77 14 Dtool_KBUAB4sN 6 94 722 0 14 Dtool_KBUAB4sN 1 4 this 3 770  
78 14 Dtool_KBUAOviy 6 95 722 0 14 Dtool_KBUAOviy 1 4 this 3 770  
79 14 Dtool_KBUA6RXy 6 96 731 0 14 Dtool_KBUA6RXy 1 4 this 3 770  
80 14 Dtool_KBUAPDxm 6 97 746 0 14 Dtool_KBUAPDxm 1 4 this 3 770  
81 14 Dtool_KBUAUTU7 4 98 721 0 14 Dtool_KBUAUTU7 2 4 this 3 769  8 function 1 768  
82 14 Dtool_KBUAtTOV 4 99 721 0 14 Dtool_KBUAtTOV 2 4 this 3 769  4 time 1 722  
83 14 Dtool_KBUAmmt6 4 100 721 0 14 Dtool_KBUAmmt6 2 4 this 3 769  4 time 1 722  
84 14 Dtool_KBUAZRhS 4 101 721 0 14 Dtool_KBUAZRhS 2 4 this 3 769  7 enabled 1 746  
85 14 Dtool_KBUAt7vO 6 89 732 0 14 Dtool_KBUAt7vO 1 4 this 3 769  
86 14 Dtool_KBUAwq3X 7 90 769 451 14 Dtool_KBUAwq3X 1 4 this 3 732  
87 14 Dtool_KBUAJ6Vn 7 105 774 464 14 Dtool_KBUAJ6Vn 0 
88 14 Dtool_KBUAupdd 7 105 774 464 14 Dtool_KBUAupdd 1 4 copy 1 775  
89 14 Dtool_KBUAsQcF 7 105 774 464 14 Dtool_KBUAsQcF 1 1 c 1 755  
90 14 Dtool_KBUAnUAX 6 107 731 0 14 Dtool_KBUAnUAX 4 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  5 color 1 755  
91 14 Dtool_KBUAm4ub 6 107 731 0 14 Dtool_KBUAm4ub 3 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  
92 14 Dtool_KBUA17pq 6 107 731 0 14 Dtool_KBUA17pq 2 4 this 3 774  10 time_begin 1 722  
93 14 Dtool_KBUAFtx4 6 107 731 0 14 Dtool_KBUAFtx4 1 4 this 3 774  
94 14 Dtool_KBUAF0qz 6 108 731 0 14 Dtool_KBUAF0qz 5 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  
95 14 Dtool_KBUANg4k 6 108 731 0 14 Dtool_KBUANg4k 4 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  
96 14 Dtool_KBUAyeIx 6 108 731 0 14 Dtool_KBUAyeIx 3 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  
97 14 Dtool_KBUAjEI2 6 108 731 0 14 Dtool_KBUAjEI2 2 4 this 3 774  10 time_begin 1 722  
98 14 Dtool_KBUAdNk6 6 108 731 0 14 Dtool_KBUAdNk6 1 4 this 3 774  
99 14 Dtool_KBUAhcb4 6 109 731 0 14 Dtool_KBUAhcb4 7 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  7 width_a 1 722  7 width_b 1 722  
100 14 Dtool_KBUAXHNs 6 109 731 0 14 Dtool_KBUAXHNs 6 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  7 width_a 1 722  
101 14 Dtool_KBUAxifI 6 109 731 0 14 Dtool_KBUAxifI 5 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  
102 14 Dtool_KBUAxdnL 6 109 731 0 14 Dtool_KBUAxdnL 4 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  
103 14 Dtool_KBUA_AWQ 6 109 731 0 14 Dtool_KBUA_AWQ 3 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  
104 14 Dtool_KBUAbNRf 6 109 731 0 14 Dtool_KBUAbNRf 2 4 this 3 774  10 time_begin 1 722  
105 14 Dtool_KBUAHbZt 6 109 731 0 14 Dtool_KBUAHbZt 1 4 this 3 774  
106 14 Dtool_KBUAEcmP 6 110 731 0 14 Dtool_KBUAEcmP 6 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  6 period 1 722  
107 14 Dtool_KBUANl6r 6 110 731 0 14 Dtool_KBUANl6r 5 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  7 color_b 1 755  
108 14 Dtool_KBUAV6Cv 6 110 731 0 14 Dtool_KBUAV6Cv 4 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  7 color_a 1 755  
109 14 Dtool_KBUAkKwz 6 110 731 0 14 Dtool_KBUAkKwz 3 4 this 3 774  10 time_begin 1 722  8 time_end 1 722  
110 14 Dtool_KBUAyJsC 6 110 731 0 14 Dtool_KBUAyJsC 2 4 this 3 774  10 time_begin 1 722  
111 14 Dtool_KBUAG00Q 6 110 731 0 14 Dtool_KBUAG00Q 1 4 this 3 774  
112 14 Dtool_KBUAG__q 4 111 721 0 14 Dtool_KBUAG__q 2 4 this 3 774  1 c 1 755  
113 14 Dtool_KBUAxZFl 7 112 769 451 14 Dtool_KBUAxZFl 2 4 this 3 774  6 seg_id 1 731  
114 14 Dtool_KBUAuRLg 6 113 777 0 14 Dtool_KBUAuRLg 1 4 this 3 774  
115 14 Dtool_KBUAW5Nf 4 114 721 0 14 Dtool_KBUAW5Nf 2 4 this 3 774  6 seg_id 1 731  
116 14 Dtool_KBUARYQe 4 115 721 0 14 Dtool_KBUARYQe 1 4 this 3 774  
117 14 Dtool_KBUAm5gk 6 103 732 0 14 Dtool_KBUAm5gk 1 4 this 3 774  
118 14 Dtool_KBUAR7P9 7 104 774 464 14 Dtool_KBUAR7P9 1 4 this 3 732  
119 14 Dtool_KBUAMaqQ 7 117 778 376 14 Dtool_KBUAMaqQ 0 
120 14 Dtool_KBUAZaXE 7 117 778 376 14 Dtool_KBUAZaXE 1 4 copy 1 779  
121 14 Dtool_KBUA8VPM 4 118 721 0 14 Dtool_KBUA8VPM 2 4 this 3 778  1 r 1 722  
122 14 Dtool_KBUAwAyy 4 119 721 0 14 Dtool_KBUAwAyy 2 4 this 3 778  7 o_angle 1 722  
123 14 Dtool_KBUA0naY 4 120 721 0 14 Dtool_KBUA0naY 2 4 this 3 778  7 i_angle 1 722  
124 14 Dtool_KBUAT8hk 4 121 721 0 14 Dtool_KBUAT8hk 2 4 this 3 778  5 o_mag 1 722  
125 14 Dtool_KBUAx2JK 4 122 721 0 14 Dtool_KBUAx2JK 2 4 this 3 778  5 i_mag 1 722  
126 14 Dtool_KBUAD6_D 4 123 721 0 14 Dtool_KBUAD6_D 2 4 this 3 778  5 clerp 1 746  
127 14 Dtool_KBUAwO_c 6 124 722 0 14 Dtool_KBUAwO_c 1 4 this 3 779  
128 14 Dtool_KBUAfHU_ 6 125 722 0 14 Dtool_KBUAfHU_ 1 4 this 3 779  
129 14 Dtool_KBUAVl9j 6 126 722 0 14 Dtool_KBUAVl9j 1 4 this 3 779  
130 14 Dtool_KBUAR43h 6 127 722 0 14 Dtool_KBUAR43h 1 4 this 3 779  
131 14 Dtool_KBUArrfH 6 128 722 0 14 Dtool_KBUArrfH 1 4 this 3 779  
132 14 Dtool_KBUAX_1y 6 129 746 0 14 Dtool_KBUAX_1y 1 4 this 3 779  
133 14 Dtool_KBUAfwJz 7 131 783 414 14 Dtool_KBUAfwJz 2 2 am 1 684  9 geom_node 1 781  
134 14 Dtool_KBUAQt3X 7 131 783 414 14 Dtool_KBUAQt3X 1 2 am 1 684  
135 14 Dtool_KBUAqpfG 7 131 783 414 14 Dtool_KBUAqpfG 0 
136 14 Dtool_KBUAf5c7 7 131 783 414 14 Dtool_KBUAf5c7 1 4 copy 1 784  
137 14 Dtool_KBUA2Hy2 4 132 721 0 14 Dtool_KBUA2Hy2 2 4 this 3 783  4 node 1 781  
138 14 Dtool_KBUAWLyT 7 133 781 0 14 Dtool_KBUAWLyT 1 4 this 3 783  
139 14 Dtool_KBUAeO8V 7 134 774 464 14 Dtool_KBUAeO8V 1 4 this 3 784  
140 14 Dtool_KBUADC1b 4 135 721 0 14 Dtool_KBUADC1b 3 4 this 3 784  3 out 1 729  6 indent 1 731  
141 14 Dtool_KBUAmK_H 4 135 721 0 14 Dtool_KBUAmK_H 2 4 this 3 784  3 out 1 729  
142 14 Dtool_KBUAmO71 7 137 786 376 14 Dtool_KBUAmO71 0 
143 14 Dtool_KBUAvJIy 7 137 786 376 14 Dtool_KBUAvJIy 1 4 copy 1 787  
144 14 Dtool_KBUAkFGJ 4 138 721 0 14 Dtool_KBUAkFGJ 2 4 this 3 786  5 point 1 725  
145 14 Dtool_KBUAEBtJ 4 139 721 0 14 Dtool_KBUAEBtJ 2 4 this 3 786  5 point 1 725  
146 14 Dtool_KBUA6l0h 7 140 717 0 14 Dtool_KBUA6l0h 1 4 this 3 787  
147 14 Dtool_KBUAaobi 7 141 717 0 14 Dtool_KBUAaobi 1 4 this 3 787  
148 14 Dtool_KBUAEZz7 7 143 789 414 14 Dtool_KBUAEZz7 0 
149 14 Dtool_KBUAsY3q 7 143 789 414 14 Dtool_KBUAsY3q 3 4 head 1 755  4 tail 1 755  10 alpha_mode 1 684  
150 14 Dtool_KBUAWkxE 7 143 789 414 14 Dtool_KBUAWkxE 1 4 copy 1 790  
151 14 Dtool_KBUA_Gxm 4 144 721 0 14 Dtool_KBUA_Gxm 2 4 this 3 789  1 c 1 755  
152 14 Dtool_KBUAHL4t 4 145 721 0 14 Dtool_KBUAHL4t 2 4 this 3 789  1 c 1 755  
153 14 Dtool_KBUAS8gD 6 146 755 0 14 Dtool_KBUAS8gD 1 4 this 3 790  
154 14 Dtool_KBUApyoK 6 147 755 0 14 Dtool_KBUApyoK 1 4 this 3 790  
155 14 Dtool_KBUA3NfU 4 148 721 0 14 Dtool_KBUA3NfU 2 4 this 3 789  2 sf 1 722  
156 14 Dtool_KBUAybib 6 149 722 0 14 Dtool_KBUAybib 1 4 this 3 790  
157 14 Dtool_KBUA07Eu 7 152 794 0 14 Dtool_KBUA07Eu 1 4 copy 1 792  
158 14 Dtool_KBUA_wz4 7 152 794 0 14 Dtool_KBUA_wz4 1 9 pool_size 1 731  
159 14 Dtool_KBUAlHaR 7 152 794 0 14 Dtool_KBUAlHaR 0 
160 14 Dtool_KBUApvqS 4 153 721 0 14 Dtool_KBUApvqS 2 4 this 3 794  4 size 1 731  
161 14 Dtool_KBUABtuQ 4 154 721 0 14 Dtool_KBUABtuQ 2 4 this 3 794  6 new_br 1 722  
162 14 Dtool_KBUAURZZ 4 155 721 0 14 Dtool_KBUAURZZ 2 4 this 3 794  6 new_ls 1 731  
163 14 Dtool_KBUAHkGy 4 156 721 0 14 Dtool_KBUAHkGy 2 4 this 3 794  6 new_ls 1 731  
164 14 Dtool_KBUASAZN 4 157 721 0 14 Dtool_KBUASAZN 2 4 this 3 794  2 lv 1 746  
165 14 Dtool_KBUABOU3 4 158 721 0 14 Dtool_KBUABOU3 2 4 this 3 794  3 sgo 1 746  
166 14 Dtool_KBUA_Iib 4 159 721 0 14 Dtool_KBUA_Iib 2 4 this 3 794  2 sl 1 722  
167 14 Dtool_KBUA4GAU 4 160 721 0 14 Dtool_KBUA4GAU 2 4 this 3 794  3 age 1 722  
168 14 Dtool_KBUAlTf6 4 161 721 0 14 Dtool_KBUAlTf6 2 4 this 3 794  1 a 1 746  
169 14 Dtool_KBUA3lKx 4 162 721 0 14 Dtool_KBUA3lKx 2 4 this 3 794  3 sod 1 746  
170 14 Dtool_KBUATlYr 4 163 721 0 14 Dtool_KBUATlYr 2 4 this 3 794  4 node 1 781  
171 14 Dtool_KBUADbaK 4 164 721 0 14 Dtool_KBUADbaK 2 4 this 3 794  3 tsf 1 746  
172 14 Dtool_KBUAoYFU 4 165 721 0 14 Dtool_KBUAoYFU 2 4 this 3 794  4 node 1 781  
173 14 Dtool_KBUA_bAc 4 166 721 0 14 Dtool_KBUA_bAc 2 4 this 3 794  1 r 1 742  
174 14 Dtool_KBUAP6z6 4 167 721 0 14 Dtool_KBUAP6z6 2 4 this 3 794  1 e 1 716  
175 14 Dtool_KBUAa_iU 4 168 721 0 14 Dtool_KBUAa_iU 2 4 this 3 794  1 f 1 733  
176 14 Dtool_KBUA7S5e 4 169 721 0 14 Dtool_KBUA7S5e 2 4 this 3 794  1 z 1 722  
177 14 Dtool_KBUA1_VC 4 170 721 0 14 Dtool_KBUA1_VC 1 4 this 3 794  
178 14 Dtool_KBUAXT57 6 171 731 0 14 Dtool_KBUAXT57 1 4 this 3 792  
179 14 Dtool_KBUAq_T_ 6 172 722 0 14 Dtool_KBUAq_T_ 1 4 this 3 792  
180 14 Dtool_KBUAY2Tr 6 173 731 0 14 Dtool_KBUAY2Tr 1 4 this 3 792  
181 14 Dtool_KBUA31vh 6 174 731 0 14 Dtool_KBUA31vh 1 4 this 3 792  
182 14 Dtool_KBUAvd6d 6 175 746 0 14 Dtool_KBUAvd6d 1 4 this 3 792  
183 14 Dtool_KBUAmbbN 6 176 746 0 14 Dtool_KBUAmbbN 1 4 this 3 792  
184 14 Dtool_KBUAPFTz 6 177 722 0 14 Dtool_KBUAPFTz 1 4 this 3 792  
185 14 Dtool_KBUASLlC 6 178 722 0 14 Dtool_KBUASLlC 1 4 this 3 792  
186 14 Dtool_KBUA7pRo 6 179 746 0 14 Dtool_KBUA7pRo 1 4 this 3 792  
187 14 Dtool_KBUAysrB 6 180 746 0 14 Dtool_KBUAysrB 1 4 this 3 792  
188 14 Dtool_KBUA3D5l 7 181 781 0 14 Dtool_KBUA3D5l 1 4 this 3 792  
189 14 Dtool_KBUA4RPW 6 182 746 0 14 Dtool_KBUA4RPW 1 4 this 3 792  
190 14 Dtool_KBUAAtRp 6 183 731 0 14 Dtool_KBUAAtRp 1 4 this 3 792  
191 14 Dtool_KBUAQX9q 7 184 781 0 14 Dtool_KBUAQX9q 1 4 this 3 792  
192 14 Dtool_KBUAWWmZ 7 185 742 414 14 Dtool_KBUAWWmZ 1 4 this 3 792  
193 14 Dtool_KBUAgwSc 7 186 716 376 14 Dtool_KBUAgwSc 1 4 this 3 792  
194 14 Dtool_KBUAW2Vl 7 187 733 395 14 Dtool_KBUAW2Vl 1 4 this 3 792  
195 14 Dtool_KBUAw7_3 6 188 722 0 14 Dtool_KBUAw7_3 1 4 this 3 792  
196 14 Dtool_KBUAL_37 4 189 721 0 14 Dtool_KBUAL_37 2 4 this 3 794  2 ps 1 794  
197 14 Dtool_KBUAf6XZ 4 190 721 0 14 Dtool_KBUAf6XZ 1 4 this 3 794  
198 14 Dtool_KBUAzbqe 4 191 721 0 14 Dtool_KBUAzbqe 1 4 this 3 794  
199 14 Dtool_KBUA3z9v 4 192 721 0 14 Dtool_KBUA3z9v 1 4 this 3 794  
200 14 Dtool_KBUAp19v 4 193 721 0 14 Dtool_KBUAp19v 1 4 this 3 794  
201 14 Dtool_KBUA2i2m 4 194 721 0 14 Dtool_KBUA2i2m 2 4 this 3 794  2 dt 1 722  
202 14 Dtool_KBUA_rSe 4 195 721 0 14 Dtool_KBUA_rSe 3 4 this 3 792  3 out 1 729  6 indent 1 731  
203 14 Dtool_KBUA0ytn 4 195 721 0 14 Dtool_KBUA0ytn 2 4 this 3 792  3 out 1 729  
204 14 Dtool_KBUAgE38 4 196 721 0 14 Dtool_KBUAgE38 3 4 this 3 792  3 out 1 729  6 indent 1 731  
205 14 Dtool_KBUApNQ_ 4 196 721 0 14 Dtool_KBUApNQ_ 2 4 this 3 792  3 out 1 729  
206 14 Dtool_KBUALxhQ 4 197 721 0 14 Dtool_KBUALxhQ 3 4 this 3 792  3 out 1 729  6 indent 1 731  
207 14 Dtool_KBUAY_Tj 4 197 721 0 14 Dtool_KBUAY_Tj 2 4 this 3 792  3 out 1 729  
208 14 Dtool_KBUAzk95 7 198 758 0 14 Dtool_KBUAzk95 0 
209 14 Dtool_KBUAuOfO 7 200 795 552 14 Dtool_KBUAuOfO 1 15 every_nth_frame 1 731  
210 14 Dtool_KBUAKxoE 7 200 795 552 14 Dtool_KBUAKxoE 0 
211 14 Dtool_KBUAhIpF 4 202 721 0 14 Dtool_KBUAhIpF 2 4 this 3 795  15 every_nth_frame 1 731  
212 14 Dtool_KBUA3diP 6 203 731 0 14 Dtool_KBUA3diP 1 4 this 3 796  
213 14 Dtool_KBUAmDR9 4 204 721 0 14 Dtool_KBUAmDR9 2 4 this 3 795  2 ps 1 794  
214 14 Dtool_KBUAstvE 4 205 721 0 14 Dtool_KBUAstvE 2 4 this 3 795  2 ps 1 794  
215 14 Dtool_KBUATEnv 4 206 721 0 14 Dtool_KBUATEnv 1 4 this 3 795  
216 14 Dtool_KBUAnA7I 4 207 721 0 14 Dtool_KBUAnA7I 2 4 this 3 795  2 dt 1 722  
217 14 Dtool_KBUAWHBj 4 208 721 0 14 Dtool_KBUAWHBj 2 4 this 3 796  3 out 1 729  
218 14 Dtool_KBUAaVHd 4 209 721 0 14 Dtool_KBUAaVHd 3 4 this 3 796  3 out 1 729  6 indent 1 731  
219 14 Dtool_KBUA2VNz 4 209 721 0 14 Dtool_KBUA2VNz 2 4 this 3 796  3 out 1 729  
220 14 Dtool_KBUAhS_E 4 210 721 0 14 Dtool_KBUAhS_E 3 4 this 3 796  3 out 1 729  6 indent 1 731  
221 14 Dtool_KBUA85AY 4 210 721 0 14 Dtool_KBUA85AY 2 4 this 3 796  3 out 1 729  
222 14 Dtool_KBUAsVW_ 7 212 798 376 14 Dtool_KBUAsVW_ 0 
223 14 Dtool_KBUAhKUT 7 212 798 376 14 Dtool_KBUAhKUT 1 4 copy 1 799  
224 14 Dtool_KBUALDeR 4 213 721 0 14 Dtool_KBUALDeR 2 4 this 3 798  1 p 1 725  
225 14 Dtool_KBUAHUJU 7 214 717 0 14 Dtool_KBUAHUJU 1 4 this 3 799  
226 14 Dtool_KBUAzdmT 7 216 801 395 14 Dtool_KBUAzdmT 0 
227 14 Dtool_KBUAxQLp 7 216 801 395 14 Dtool_KBUAxQLp 1 4 copy 1 802  
228 14 Dtool_KBUAJ8x3 7 219 804 414 14 Dtool_KBUAJ8x3 6 2 ad 1 684  10 point_size 1 722  2 bt 1 704  2 bm 1 685  2 sc 1 755  2 ec 1 755  
229 14 Dtool_KBUAOmML 7 219 804 414 14 Dtool_KBUAOmML 5 2 ad 1 684  10 point_size 1 722  2 bt 1 704  2 bm 1 685  2 sc 1 755  
230 14 Dtool_KBUA0kEa 7 219 804 414 14 Dtool_KBUA0kEa 4 2 ad 1 684  10 point_size 1 722  2 bt 1 704  2 bm 1 685  
231 14 Dtool_KBUAW_vy 7 219 804 414 14 Dtool_KBUAW_vy 3 2 ad 1 684  10 point_size 1 722  2 bt 1 704  
232 14 Dtool_KBUALWut 7 219 804 414 14 Dtool_KBUALWut 2 2 ad 1 684  10 point_size 1 722  
233 14 Dtool_KBUAg3Ul 7 219 804 414 14 Dtool_KBUAg3Ul 1 2 ad 1 684  
234 14 Dtool_KBUAIwvl 7 219 804 414 14 Dtool_KBUAIwvl 0 
235 14 Dtool_KBUAC0H3 7 219 804 414 14 Dtool_KBUAC0H3 1 4 copy 1 805  
236 14 Dtool_KBUAn3gj 4 220 721 0 14 Dtool_KBUAn3gj 2 4 this 3 804  10 point_size 1 722  
237 14 Dtool_KBUAdFkn 4 221 721 0 14 Dtool_KBUAdFkn 2 4 this 3 804  2 sc 1 755  
238 14 Dtool_KBUAEzEQ 4 222 721 0 14 Dtool_KBUAEzEQ 2 4 this 3 804  2 ec 1 755  
239 14 Dtool_KBUAsUyU 4 223 721 0 14 Dtool_KBUAsUyU 2 4 this 3 804  2 bt 1 704  
240 14 Dtool_KBUAHTEJ 4 224 721 0 14 Dtool_KBUAHTEJ 2 4 this 3 804  2 bm 1 685  
241 14 Dtool_KBUAd9NK 6 225 722 0 14 Dtool_KBUAd9NK 1 4 this 3 805  
242 14 Dtool_KBUABJrm 6 226 755 0 14 Dtool_KBUABJrm 1 4 this 3 805  
243 14 Dtool_KBUAaeEq 6 227 755 0 14 Dtool_KBUAaeEq 1 4 this 3 805  
244 14 Dtool_KBUAR8v5 6 228 704 0 14 Dtool_KBUAR8v5 1 4 this 3 805  
245 14 Dtool_KBUANfkE 6 229 685 0 14 Dtool_KBUANfkE 1 4 this 3 805  
246 14 Dtool_KBUAqyrE 7 231 807 376 14 Dtool_KBUAqyrE 0 
247 14 Dtool_KBUAjSSt 7 231 807 376 14 Dtool_KBUAjSSt 1 4 copy 1 808  
248 14 Dtool_KBUA__w9 4 232 721 0 14 Dtool_KBUA__w9 2 4 this 3 807  4 vmin 1 810  
249 14 Dtool_KBUAE18N 4 233 721 0 14 Dtool_KBUAE18N 2 4 this 3 807  4 vmax 1 810  
250 14 Dtool_KBUANaOf 7 234 813 0 14 Dtool_KBUANaOf 1 4 this 3 808  
251 14 Dtool_KBUAVbav 7 235 813 0 14 Dtool_KBUAVbav 1 4 this 3 808  
252 14 Dtool_KBUA__j2 7 237 814 376 14 Dtool_KBUA__j2 0 
253 14 Dtool_KBUAhrbu 7 237 814 376 14 Dtool_KBUAhrbu 1 4 copy 1 815  
254 14 Dtool_KBUAHjXu 4 238 721 0 14 Dtool_KBUAHjXu 2 4 this 3 814  1 r 1 722  
255 14 Dtool_KBUA23Hl 4 239 721 0 14 Dtool_KBUA23Hl 2 4 this 3 814  5 angle 1 722  
256 14 Dtool_KBUAGOEK 4 240 721 0 14 Dtool_KBUAGOEK 2 4 this 3 814  6 spread 1 722  
257 14 Dtool_KBUA32I_ 6 241 722 0 14 Dtool_KBUA32I_ 1 4 this 3 815  
258 14 Dtool_KBUARZ9k 6 242 722 0 14 Dtool_KBUARZ9k 1 4 this 3 815  
259 14 Dtool_KBUAAgOJ 6 243 722 0 14 Dtool_KBUAAgOJ 1 4 this 3 815  
260 14 Dtool_KBUA_QFL 7 246 817 414 14 Dtool_KBUA_QFL 0 
261 14 Dtool_KBUAHOzb 7 246 817 414 14 Dtool_KBUAHOzb 6 6 center 1 755  4 edge 1 755  12 birth_radius 1 722  12 death_radius 1 722  10 life_scale 1 708  10 alpha_mode 1 684  
262 14 Dtool_KBUAOidn 7 246 817 414 14 Dtool_KBUAOidn 1 4 copy 1 818  
263 14 Dtool_KBUANoZ9 4 247 721 0 14 Dtool_KBUANoZ9 2 4 this 3 817  1 c 1 755  
264 14 Dtool_KBUAf_5c 4 248 721 0 14 Dtool_KBUAf_5c 2 4 this 3 817  1 c 1 755  
265 14 Dtool_KBUAgpfV 4 249 721 0 14 Dtool_KBUAgpfV 2 4 this 3 817  6 radius 1 722  
266 14 Dtool_KBUAJkw4 4 250 721 0 14 Dtool_KBUAJkw4 2 4 this 3 817  6 radius 1 722  
267 14 Dtool_KBUA_A96 4 251 721 0 14 Dtool_KBUA_A96 2 4 this 3 817  6 param0 0 708  
268 14 Dtool_KBUAGLA6 6 252 755 0 14 Dtool_KBUAGLA6 1 4 this 3 818  
269 14 Dtool_KBUASRs4 6 253 755 0 14 Dtool_KBUASRs4 1 4 this 3 818  
270 14 Dtool_KBUAgIEj 6 254 722 0 14 Dtool_KBUAgIEj 1 4 this 3 818  
271 14 Dtool_KBUAeMVG 6 255 722 0 14 Dtool_KBUAeMVG 1 4 this 3 818  
272 14 Dtool_KBUAgMLm 6 256 708 0 14 Dtool_KBUAgMLm 1 4 this 3 818  
273 14 Dtool_KBUAZ_XN 7 258 820 376 14 Dtool_KBUAZ_XN 0 
274 14 Dtool_KBUAa66a 7 258 820 376 14 Dtool_KBUAa66a 1 4 copy 1 821  
275 14 Dtool_KBUAD2aF 4 259 721 0 14 Dtool_KBUAD2aF 2 4 this 3 820  1 r 1 722  
276 14 Dtool_KBUAjRgH 6 260 722 0 14 Dtool_KBUAjRgH 1 4 this 3 821  
277 14 Dtool_KBUAwu67 7 262 823 376 14 Dtool_KBUAwu67 0 
278 14 Dtool_KBUA4FjC 7 262 823 376 14 Dtool_KBUA4FjC 1 4 copy 1 824  
279 14 Dtool_KBUAkvji 4 263 721 0 14 Dtool_KBUAkvji 2 4 this 3 823  1 r 1 722  
280 14 Dtool_KBUACKpS 6 264 722 0 14 Dtool_KBUACKpS 1 4 this 3 824  
281 14 Dtool_KBUAYa22 4 267 721 0 14 Dtool_KBUAYa22 2 4 this 3 826  3 tex 1 777  
282 14 Dtool_KBUAQDkb 4 267 721 0 14 Dtool_KBUAQDkb 3 4 this 3 826  5 model 1 777  4 node 1 777  
283 14 Dtool_KBUASnfH 6 268 712 0 14 Dtool_KBUASnfH 1 4 this 3 827  
284 14 Dtool_KBUAzuxT 6 269 777 0 14 Dtool_KBUAzuxT 1 4 this 3 827  
285 14 Dtool_KBUAL_Lg 6 270 777 0 14 Dtool_KBUAL_Lg 1 4 this 3 827  
286 14 Dtool_KBUAX3Xs 6 271 777 0 14 Dtool_KBUAX3Xs 1 4 this 3 827  
287 14 Dtool_KBUA2oIg 6 272 731 0 14 Dtool_KBUA2oIg 1 4 this 3 827  
288 14 Dtool_KBUATL04 7 275 831 414 14 Dtool_KBUATL04 1 4 copy 1 829  
289 14 Dtool_KBUAd0Mb 7 275 831 414 14 Dtool_KBUAd0Mb 1 3 tex 1 832  
290 14 Dtool_KBUACqZT 7 275 831 414 14 Dtool_KBUACqZT 0 
291 14 Dtool_KBUALV8z 4 276 721 0 14 Dtool_KBUALV8z 5 4 this 3 831  9 node_path 1 834  5 model 1 777  4 node 1 777  16 size_from_texels 1 746  
292 14 Dtool_KBUA47kj 4 276 721 0 14 Dtool_KBUA47kj 4 4 this 3 831  9 node_path 1 834  5 model 1 777  4 node 1 777  
293 14 Dtool_KBUAXPBQ 4 276 721 0 14 Dtool_KBUAXPBQ 3 4 this 3 831  9 node_path 1 834  16 size_from_texels 1 746  
294 14 Dtool_KBUA_bAP 4 276 721 0 14 Dtool_KBUA_bAP 2 4 this 3 831  9 node_path 1 834  
295 14 Dtool_KBUAi1NT 4 277 721 0 14 Dtool_KBUAi1NT 6 4 this 3 831  9 node_path 1 834  5 model 1 777  4 node 1 777  16 size_from_texels 1 746  6 resize 1 746  
296 14 Dtool_KBUAmXj6 4 277 721 0 14 Dtool_KBUAmXj6 5 4 this 3 831  9 node_path 1 834  5 model 1 777  4 node 1 777  16 size_from_texels 1 746  
297 14 Dtool_KBUAfFKq 4 277 721 0 14 Dtool_KBUAfFKq 4 4 this 3 831  9 node_path 1 834  5 model 1 777  4 node 1 777  
298 14 Dtool_KBUA8PJY 4 277 721 0 14 Dtool_KBUA8PJY 4 4 this 3 831  9 node_path 1 834  16 size_from_texels 1 746  6 resize 1 746  
299 14 Dtool_KBUA4QoW 4 277 721 0 14 Dtool_KBUA4QoW 3 4 this 3 831  9 node_path 1 834  16 size_from_texels 1 746  
300 14 Dtool_KBUAaZnV 4 277 721 0 14 Dtool_KBUAaZnV 2 4 this 3 831  9 node_path 1 834  
301 14 Dtool_KBUAtzOm 4 278 721 0 14 Dtool_KBUAtzOm 3 4 this 3 831  3 tex 1 832  15 texels_per_unit 1 722  
302 14 Dtool_KBUAsbbZ 4 278 721 0 14 Dtool_KBUAsbbZ 2 4 this 3 831  3 tex 1 832  
303 14 Dtool_KBUAYIZu 4 279 721 0 14 Dtool_KBUAYIZu 4 4 this 3 831  3 tex 1 832  15 texels_per_unit 1 722  6 resize 1 746  
304 14 Dtool_KBUAEs3s 4 279 721 0 14 Dtool_KBUAEs3s 3 4 this 3 831  3 tex 1 832  15 texels_per_unit 1 722  
305 14 Dtool_KBUAtaAg 4 279 721 0 14 Dtool_KBUAtaAg 2 4 this 3 831  3 tex 1 832  
306 14 Dtool_KBUA9ji9 4 280 721 0 14 Dtool_KBUA9ji9 2 4 this 3 831  1 n 1 731  
307 14 Dtool_KBUAg2Qj 4 281 721 0 14 Dtool_KBUAg2Qj 2 4 this 3 831  5 ll_uv 1 810  
308 14 Dtool_KBUA3fm3 4 281 721 0 14 Dtool_KBUA3fm3 4 4 this 3 831  5 ll_uv 1 810  4 anim 1 731  5 frame 1 731  
309 14 Dtool_KBUAKsff 4 282 721 0 14 Dtool_KBUAKsff 2 4 this 3 831  5 ur_uv 1 810  
310 14 Dtool_KBUAHq3z 4 282 721 0 14 Dtool_KBUAHq3z 4 4 this 3 831  5 ur_uv 1 810  4 anim 1 731  5 frame 1 731  
311 14 Dtool_KBUAMuoG 4 283 721 0 14 Dtool_KBUAMuoG 3 4 this 3 831  5 width 1 722  6 height 1 722  
312 14 Dtool_KBUAQJ7q 4 284 721 0 14 Dtool_KBUAQJ7q 2 4 this 3 831  5 color 1 755  
313 14 Dtool_KBUA0uOC 4 285 721 0 14 Dtool_KBUA0uOC 2 4 this 3 831  15 animate_x_ratio 1 746  
314 14 Dtool_KBUAMpOe 4 286 721 0 14 Dtool_KBUAMpOe 2 4 this 3 831  15 animate_y_ratio 1 746  
315 14 Dtool_KBUADpse 4 287 721 0 14 Dtool_KBUADpse 2 4 this 3 831  13 animate_theta 1 746  
316 14 Dtool_KBUAFv64 4 288 721 0 14 Dtool_KBUAFv64 2 4 this 3 831  15 initial_x_scale 1 722  
317 14 Dtool_KBUA6PRG 4 289 721 0 14 Dtool_KBUA6PRG 2 4 this 3 831  13 final_x_scale 1 722  
318 14 Dtool_KBUALvDH 4 290 721 0 14 Dtool_KBUALvDH 2 4 this 3 831  15 initial_y_scale 1 722  
319 14 Dtool_KBUAe3VG 4 291 721 0 14 Dtool_KBUAe3VG 2 4 this 3 831  13 final_y_scale 1 722  
320 14 Dtool_KBUARm_e 4 292 721 0 14 Dtool_KBUARm_e 2 4 this 3 831  5 theta 1 722  
321 14 Dtool_KBUAvlsQ 4 293 721 0 14 Dtool_KBUAvlsQ 2 4 this 3 831  2 bm 1 685  
322 14 Dtool_KBUA4EbD 4 294 721 0 14 Dtool_KBUA4EbD 2 4 this 3 831  2 ad 1 746  
323 14 Dtool_KBUAogMu 4 295 721 0 14 Dtool_KBUAogMu 2 4 this 3 831  2 an 1 746  
324 14 Dtool_KBUAfktH 4 296 721 0 14 Dtool_KBUAfktH 2 4 this 3 831  1 r 1 722  
325 14 Dtool_KBUAtvzD 4 297 721 0 14 Dtool_KBUAtvzD 2 4 this 3 831  1 i 1 731  
326 14 Dtool_KBUAcWud 7 298 832 0 14 Dtool_KBUAcWud 1 4 this 3 829  
327 14 Dtool_KBUAhmHw 7 298 832 0 14 Dtool_KBUAhmHw 3 4 this 3 829  4 anim 1 731  5 frame 1 731  
328 14 Dtool_KBUAnaIS 6 299 731 0 14 Dtool_KBUAnaIS 1 4 this 3 829  
329 14 Dtool_KBUA7Ce7 7 300 826 612 14 Dtool_KBUA7Ce7 2 4 this 3 829  1 n 1 731  
330 14 Dtool_KBUA0HRb 7 301 826 612 14 Dtool_KBUA0HRb 1 4 this 3 829  
331 14 Dtool_KBUA8qOw 7 302 774 464 14 Dtool_KBUA8qOw 1 4 this 3 829  
332 14 Dtool_KBUAnEn7 7 303 813 0 14 Dtool_KBUAnEn7 1 4 this 3 829  
333 14 Dtool_KBUAQndl 7 303 813 0 14 Dtool_KBUAQndl 3 4 this 3 829  4 anim 1 731  5 frame 1 731  
334 14 Dtool_KBUAcR23 7 304 813 0 14 Dtool_KBUAcR23 1 4 this 3 829  
335 14 Dtool_KBUA_Jsh 7 304 813 0 14 Dtool_KBUA_Jsh 3 4 this 3 829  4 anim 1 731  5 frame 1 731  
336 14 Dtool_KBUA_2E2 6 305 722 0 14 Dtool_KBUA_2E2 1 4 this 3 829  
337 14 Dtool_KBUAvZvq 6 306 722 0 14 Dtool_KBUAvZvq 1 4 this 3 829  
338 14 Dtool_KBUATSQe 7 307 753 0 14 Dtool_KBUATSQe 1 4 this 3 829  
339 14 Dtool_KBUAFsYl 6 308 746 0 14 Dtool_KBUAFsYl 1 4 this 3 829  
340 14 Dtool_KBUAChYB 6 309 746 0 14 Dtool_KBUAChYB 1 4 this 3 829  
341 14 Dtool_KBUAS3Kv 6 310 746 0 14 Dtool_KBUAS3Kv 1 4 this 3 829  
342 14 Dtool_KBUA9dBl 6 311 722 0 14 Dtool_KBUA9dBl 1 4 this 3 829  
343 14 Dtool_KBUAyH8a 6 312 722 0 14 Dtool_KBUAyH8a 1 4 this 3 829  
344 14 Dtool_KBUA_dIz 6 313 722 0 14 Dtool_KBUA_dIz 1 4 this 3 829  
345 14 Dtool_KBUAePBb 6 314 722 0 14 Dtool_KBUAePBb 1 4 this 3 829  
346 14 Dtool_KBUAqpFo 6 315 722 0 14 Dtool_KBUAqpFo 1 4 this 3 829  
347 14 Dtool_KBUApCjT 6 316 685 0 14 Dtool_KBUApCjT 1 4 this 3 829  
348 14 Dtool_KBUAb0hv 6 317 746 0 14 Dtool_KBUAb0hv 1 4 this 3 829  
349 14 Dtool_KBUAQSZa 6 318 746 0 14 Dtool_KBUAQSZa 1 4 this 3 829  
350 14 Dtool_KBUAZ9OC 6 319 722 0 14 Dtool_KBUAZ9OC 1 4 this 3 829  
351 14 Dtool_KBUAy_fV 6 320 731 0 14 Dtool_KBUAy_fV 1 4 this 3 829  
352 14 Dtool_KBUAH572 7 322 837 376 14 Dtool_KBUAH572 0 
353 14 Dtool_KBUAgJHT 7 322 837 376 14 Dtool_KBUAgJHT 1 4 copy 1 838  
354 14 Dtool_KBUAT__C 4 323 721 0 14 Dtool_KBUAT__C 2 4 this 3 837  1 r 1 722  
355 14 Dtool_KBUAoxqb 4 324 721 0 14 Dtool_KBUAoxqb 2 4 this 3 837  6 spread 1 722  
356 14 Dtool_KBUA72eo 6 325 722 0 14 Dtool_KBUA72eo 1 4 this 3 838  
357 14 Dtool_KBUAg_tm 6 326 722 0 14 Dtool_KBUAg_tm 1 4 this 3 838  
358 14 Dtool_KBUACYSj 7 328 840 395 14 Dtool_KBUACYSj 0 
359 14 Dtool_KBUA_nkG 7 328 840 395 14 Dtool_KBUA_nkG 1 4 copy 1 841  
360 14 Dtool_KBUAJQKd 4 329 721 0 14 Dtool_KBUAJQKd 2 4 this 3 840  5 angle 1 722  
361 14 Dtool_KBUA_A2T 4 330 721 0 14 Dtool_KBUA_A2T 2 4 this 3 840  5 angle 1 722  
362 14 Dtool_KBUAZoPY 4 331 721 0 14 Dtool_KBUAZoPY 2 4 this 3 840  6 spread 1 722  
363 14 Dtool_KBUAAxxa 4 332 721 0 14 Dtool_KBUAAxxa 2 4 this 3 840  6 spread 1 722  
364 14 Dtool_KBUAZ6E9 6 333 722 0 14 Dtool_KBUAZ6E9 1 4 this 3 841  
365 14 Dtool_KBUAUZT9 6 334 722 0 14 Dtool_KBUAUZT9 1 4 this 3 841  
366 14 Dtool_KBUAjK1c 6 335 722 0 14 Dtool_KBUAjK1c 1 4 this 3 841  
367 14 Dtool_KBUAuV0_ 6 336 722 0 14 Dtool_KBUAuV0_ 1 4 this 3 841  
368 14 Dtool_KBUALOQE 4 337 721 0 14 Dtool_KBUALOQE 2 4 this 3 840  1 v 1 722  
369 14 Dtool_KBUAS1Y8 6 338 722 0 14 Dtool_KBUAS1Y8 1 4 this 3 841  
370 14 Dtool_KBUAsUGS 4 339 721 0 14 Dtool_KBUAsUGS 2 4 this 3 840  6 spread 1 722  
371 14 Dtool_KBUALycB 6 340 722 0 14 Dtool_KBUALycB 1 4 this 3 841  
372 14 Dtool_KBUAmOcc 4 341 721 0 14 Dtool_KBUAmOcc 2 4 this 3 840  8 bEnabled 1 746  
373 14 Dtool_KBUA2hT8 6 342 746 0 14 Dtool_KBUA2hT8 1 4 this 3 841  
165
679 19 BaseParticleEmitter 26625 19 BaseParticleEmitter 19 BaseParticleEmitter 0 0 0 0 376 0 16 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 0 1 3 680 374 375 0 1 681 289
////////////////////////////////////////////////////////////// //////
//       Class : BaseParticleEmitter
// Description : Describes a physical region in space in which
//               particles are randomly generated.
////////////////////////////////////////////////////////////////////

680 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

681 12 emissionType 794624 33 BaseParticleEmitter::emissionType 33 BaseParticleEmitter::emissionType 679 0 0 0 0 0 0 0 0 3 11 ET_EXPLICIT 32 BaseParticleEmitter::ET_EXPLICIT 0 10 ET_RADIATE 31 BaseParticleEmitter::ET_RADIATE 1 9 ET_CUSTOM 30 BaseParticleEmitter::ET_CUSTOM 2 0 0

682 19 BaseParticleFactory 26625 19 BaseParticleFactory 19 BaseParticleFactory 0 0 0 0 395 0 16 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 0 1 3 680 393 394 0 0 238
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleFactory
// Description : Pure Virtual base class for creating particles
////////////////////////////////////////////////////////////////////

683 20 BaseParticleRenderer 26625 20 BaseParticleRenderer 20 BaseParticleRenderer 0 0 0 0 414 0 10 415 416 417 418 419 420 421 422 423 424 0 1 3 680 412 413 0 2 684 685 234
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleRenderer
// Description : Pure virtual particle renderer base class
////////////////////////////////////////////////////////////////////

684 25 ParticleRendererAlphaMode 794624 47 BaseParticleRenderer::ParticleRendererAlphaMode 47 BaseParticleRenderer::ParticleRendererAlphaMode 683 0 0 0 0 0 0 0 0 6 13 PR_ALPHA_NONE 35 BaseParticleRenderer::PR_ALPHA_NONE 0 12 PR_ALPHA_OUT 34 BaseParticleRenderer::PR_ALPHA_OUT 1 11 PR_ALPHA_IN 33 BaseParticleRenderer::PR_ALPHA_IN 2 15 PR_ALPHA_IN_OUT 37 BaseParticleRenderer::PR_ALPHA_IN_OUT 3 13 PR_ALPHA_USER 35 BaseParticleRenderer::PR_ALPHA_USER 4 22 PR_NOT_INITIALIZED_YET 44 BaseParticleRenderer::PR_NOT_INITIALIZED_YET 5 0 0

685 27 ParticleRendererBlendMethod 794624 49 BaseParticleRenderer::ParticleRendererBlendMethod 49 BaseParticleRenderer::ParticleRendererBlendMethod 683 0 0 0 0 0 0 0 0 3 11 PP_NO_BLEND 33 BaseParticleRenderer::PP_NO_BLEND 0 15 PP_BLEND_LINEAR 37 BaseParticleRenderer::PP_BLEND_LINEAR 1 14 PP_BLEND_CUBIC 36 BaseParticleRenderer::PP_BLEND_CUBIC 2 0 0

686 10 BoxEmitter 75777 10 BoxEmitter 10 BoxEmitter 0 0 0 1 425 376 0 4 426 427 428 429 0 1 0 679 0 0 0 0 0

687 34 ColorInterpolationFunctionConstant 141313 34 ColorInterpolationFunctionConstant 34 ColorInterpolationFunctionConstant 0 0 0 0 433 0 3 430 431 432 0 1 0 688 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionConstant
// Description : Defines a constant color over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

688 26 ColorInterpolationFunction 1050625 26 ColorInterpolationFunction 26 ColorInterpolationFunction 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunction
// Description : Abstract class from which all other functions 
//               should inherit. Defines the virtual interpolate()
//               function.
////////////////////////////////////////////////////////////////////

689 32 ColorInterpolationFunctionLinear 141313 32 ColorInterpolationFunctionLinear 32 ColorInterpolationFunctionLinear 0 0 0 0 437 0 3 434 435 436 0 1 0 687 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionLinear
// Description : Defines a linear interpolation over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

690 34 ColorInterpolationFunctionStepwave 141313 34 ColorInterpolationFunctionStepwave 34 ColorInterpolationFunctionStepwave 0 0 0 0 443 0 5 438 439 440 441 442 0 1 0 689 0 0 0 0 523
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionStepwave
// Description : Defines a discrete cyclical transition between two colors.
//               The widths describe a portion of the segment's lifetime
//               for which the corresponding color should be selected. If
//               their sum is less than 1, the function repeats until
//               the end of the segment.
////////////////////////////////////////////////////////////////////

691 34 ColorInterpolationFunctionSinusoid 141313 34 ColorInterpolationFunctionSinusoid 34 ColorInterpolationFunctionSinusoid 0 0 0 0 447 0 3 444 445 446 0 1 0 689 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionSinusoid
// Description : Defines a sinusoidal blending between two colors.
//               A period of "1" corresponds to a single transition 
//               from color_a to color_b and then back to color_a 
//               over the course of the segment's lifetime. A 
//               shorter period will result in a higher frequency
//               cycle.
////////////////////////////////////////////////////////////////////

692 25 ColorInterpolationSegment 26625 25 ColorInterpolationSegment 25 ColorInterpolationSegment 0 0 0 1 450 451 0 9 452 453 454 455 456 457 458 459 460 0 1 3 680 448 449 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationSegment
// Description : A single unit of interpolation. The begin and end
//               times are interpolated over the lifetime of the 
//               particle, thus have the range of [0,1]. Each segment
//               also has a function associated with it.
////////////////////////////////////////////////////////////////////

693 25 ColorInterpolationManager 26625 25 ColorInterpolationManager 25 ColorInterpolationManager 0 0 0 1 463 464 0 9 465 466 467 468 469 470 471 472 473 0 1 3 680 461 462 0 0 478
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationManager
// Description : High level class for color interpolation.  Segments
//               must be added to the manager in order to achieve
//               results using the "add_*****()" functions.  Access
//               to these segments is provided but not necessary
//               general use.
////////////////////////////////////////////////////////////////////

694 11 DiscEmitter 75777 11 DiscEmitter 11 DiscEmitter 0 0 0 1 474 376 0 12 475 476 477 478 479 480 481 482 483 484 485 486 0 1 0 679 0 0 0 0 0

695 20 GeomParticleRenderer 75777 20 GeomParticleRenderer 20 GeomParticleRenderer 0 0 0 1 487 414 0 4 488 489 490 491 0 1 0 683 0 0 0 0 0

696 11 LineEmitter 75777 11 LineEmitter 11 LineEmitter 0 0 0 1 492 376 0 4 493 494 495 496 0 1 0 679 0 0 0 0 0

697 20 LineParticleRenderer 75777 20 LineParticleRenderer 20 LineParticleRenderer 0 0 0 1 497 414 0 6 498 499 500 501 502 503 0 1 0 683 0 0 0 0 294
////////////////////////////////////////////////////////////////////
//       Class : LineParticleRenderer
// Description : renders a line from last position to current
//               position -- good for rain, sparks, etc.
////////////////////////////////////////////////////////////////////

698 14 ParticleSystem 75777 14 ParticleSystem 14 ParticleSystem 0 0 0 1 504 0 0 46 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 0 1 0 699 0 0 0 0 226
////////////////////////////////////////////////////////////////////
//       Class : ParticleSystem
// Description : Contains and manages a particle system.
////////////////////////////////////////////////////////////////////

699 8 Physical 2049 8 Physical 8 Physical 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : Physical
// Description : Defines a set of physically modeled attributes.
//               If you want physics applied to your class, derive
//               it from this.
////////////////////////////////////////////////////////////////////

700 21 ParticleSystemManager 26625 21 ParticleSystemManager 21 ParticleSystemManager 0 0 0 1 551 552 0 9 553 554 555 556 557 558 559 560 561 0 0 0 0 0

701 12 PointEmitter 75777 12 PointEmitter 12 PointEmitter 0 0 0 1 562 376 0 2 563 564 0 1 0 679 0 0 0 0 0

702 20 PointParticleFactory 75777 20 PointParticleFactory 20 PointParticleFactory 0 0 0 1 565 395 0 0 0 1 0 682 0 0 0 0 0

703 21 PointParticleRenderer 75777 21 PointParticleRenderer 21 PointParticleRenderer 0 0 0 1 566 414 0 10 567 568 569 570 571 572 573 574 575 576 0 1 0 683 0 0 0 1 704 334
////////////////////////////////////////////////////////////////////
//       Class : PointParticleRenderer
// Description : Simple point/point particle renderer.  Does NOT
//               handle billboards- use BillboardParticleRenderer
//               for that.
////////////////////////////////////////////////////////////////////

704 22 PointParticleBlendType 794624 45 PointParticleRenderer::PointParticleBlendType 45 PointParticleRenderer::PointParticleBlendType 703 0 0 0 0 0 0 0 0 3 12 PP_ONE_COLOR 35 PointParticleRenderer::PP_ONE_COLOR 0 13 PP_BLEND_LIFE 36 PointParticleRenderer::PP_BLEND_LIFE 1 12 PP_BLEND_VEL 35 PointParticleRenderer::PP_BLEND_VEL 2 0 0

705 16 RectangleEmitter 75777 16 RectangleEmitter 16 RectangleEmitter 0 0 0 1 577 376 0 4 578 579 580 581 0 1 0 679 0 0 0 0 0

706 11 RingEmitter 75777 11 RingEmitter 11 RingEmitter 0 0 0 1 582 376 0 6 583 584 585 586 587 588 0 1 0 679 0 0 0 0 0

707 23 SparkleParticleRenderer 75777 23 SparkleParticleRenderer 23 SparkleParticleRenderer 0 0 0 1 589 414 0 10 590 591 592 593 594 595 596 597 598 599 0 1 0 683 0 0 0 1 708 218
////////////////////////////////////////////////////////////////////
//       Class : SparkleParticleRenderer
// Description : pretty sparkly things.
////////////////////////////////////////////////////////////////////

708 24 SparkleParticleLifeScale 794624 49 SparkleParticleRenderer::SparkleParticleLifeScale 49 SparkleParticleRenderer::SparkleParticleLifeScale 707 0 0 0 0 0 0 0 0 2 11 SP_NO_SCALE 36 SparkleParticleRenderer::SP_NO_SCALE 0 8 SP_SCALE 33 SparkleParticleRenderer::SP_SCALE 1 0 0

709 20 SphereSurfaceEmitter 75777 20 SphereSurfaceEmitter 20 SphereSurfaceEmitter 0 0 0 1 600 376 0 2 601 602 0 1 0 679 0 0 0 0 0

710 19 SphereVolumeEmitter 75777 19 SphereVolumeEmitter 19 SphereVolumeEmitter 0 0 0 1 603 376 0 2 604 605 0 1 0 679 0 0 0 0 0

711 10 SpriteAnim 141313 10 SpriteAnim 10 SpriteAnim 0 0 0 0 612 0 6 606 607 608 609 610 611 0 1 0 680 0 0 0 1 712 335
////////////////////////////////////////////////////////////////////
//       Class : SpriteAnim
// Description : Helper class used by SpriteParticleRenderer to
//               keep track of its textures and their respective UVs
//               and source types.  
////////////////////////////////////////////////////////////////////

712 10 SourceType 794624 22 SpriteAnim::SourceType 22 SpriteAnim::SourceType 711 0 0 0 0 0 0 0 0 2 10 ST_texture 22 SpriteAnim::ST_texture 0 12 ST_from_node 24 SpriteAnim::ST_from_node 1 0 0

713 22 SpriteParticleRenderer 75777 22 SpriteParticleRenderer 22 SpriteParticleRenderer 0 0 0 1 613 414 0 45 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 0 1 0 683 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : SpriteParticleRenderer
// Description : Renders a particle system with high-speed nasty
//               trick sprites.
////////////////////////////////////////////////////////////////////

714 18 TangentRingEmitter 75777 18 TangentRingEmitter 18 TangentRingEmitter 0 0 0 1 659 376 0 4 660 661 662 663 0 1 0 679 0 0 0 0 0

715 20 ZSpinParticleFactory 75777 20 ZSpinParticleFactory 20 ZSpinParticleFactory 0 0 0 1 664 395 0 14 665 666 667 668 669 670 671 672 673 674 675 676 677 678 0 1 0 682 0 0 0 0 0

716 21 BaseParticleEmitter * 8576 21 BaseParticleEmitter * 21 BaseParticleEmitter * 0 0 679 0 0 0 0 0 0 0 0 0

717 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 718 0 0 0 0 0 0 0 0 0

718 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

719 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 720 0 0 0 0 0 0 0 0 0

720 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

721 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

722 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0

723 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 724 0 0 0 0 0 0 0 0 0

724 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 720 0 0 0 0 0 0 0 0 0

725 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 726 0 0 0 0 0 0 0 0 0

726 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 718 0 0 0 0 0 0 0 0 0

727 27 BaseParticleEmitter const * 8576 27 BaseParticleEmitter const * 27 BaseParticleEmitter const * 0 0 728 0 0 0 0 0 0 0 0 0

728 25 BaseParticleEmitter const 8832 25 BaseParticleEmitter const 25 BaseParticleEmitter const 0 0 679 0 0 0 0 0 0 0 0 0

729 9 ostream * 8576 9 ostream * 9 ostream * 0 0 730 0 0 0 0 0 0 0 0 0

730 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

731 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

732 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 680 0 0 0 0 0 0 0 0 0

733 21 BaseParticleFactory * 8576 21 BaseParticleFactory * 21 BaseParticleFactory * 0 0 682 0 0 0 0 0 0 0 0 0

734 27 BaseParticleFactory const * 8576 27 BaseParticleFactory const * 27 BaseParticleFactory const * 0 0 735 0 0 0 0 0 0 0 0 0

735 25 BaseParticleFactory const 8832 25 BaseParticleFactory const 25 BaseParticleFactory const 0 0 682 0 0 0 0 0 0 0 0 0

736 14 BaseParticle * 8576 14 BaseParticle * 14 BaseParticle * 0 0 737 0 0 0 0 0 0 0 0 0

737 12 BaseParticle 1050624 12 BaseParticle 12 BaseParticle 0 0 0 0 0 0 0 0 0 0 0 0

738 8 GeomNode 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

739 28 BaseParticleRenderer const * 8576 28 BaseParticleRenderer const * 28 BaseParticleRenderer const * 0 0 740 0 0 0 0 0 0 0 0 0

740 26 BaseParticleRenderer const 8832 26 BaseParticleRenderer const 26 BaseParticleRenderer const 0 0 683 0 0 0 0 0 0 0 0 0

741 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 738 0 0 0 0 0 0 0 0 0

742 22 BaseParticleRenderer * 8576 22 BaseParticleRenderer * 22 BaseParticleRenderer * 0 0 683 0 0 0 0 0 0 0 0 0

743 4 Mode 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 744 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 0 5 M_add 23 ColorBlendAttrib::M_add 1 10 M_subtract 28 ColorBlendAttrib::M_subtract 2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 3 5 M_min 23 ColorBlendAttrib::M_min 4 5 M_max 23 ColorBlendAttrib::M_max 5 0 0

744 16 ColorBlendAttrib 2048 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 0 0 0 0 0 0 0 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

745 7 Operand 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 744 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0 5 O_one 23 ColorBlendAttrib::O_one 1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 18 0 0

746 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

747 12 BoxEmitter * 8576 12 BoxEmitter * 12 BoxEmitter * 0 0 686 0 0 0 0 0 0 0 0 0

748 18 BoxEmitter const * 8576 18 BoxEmitter const * 18 BoxEmitter const * 0 0 749 0 0 0 0 0 0 0 0 0

749 16 BoxEmitter const 8832 16 BoxEmitter const 16 BoxEmitter const 0 0 686 0 0 0 0 0 0 0 0 0

750 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

751 42 ColorInterpolationFunctionConstant const * 8576 42 ColorInterpolationFunctionConstant const * 42 ColorInterpolationFunctionConstant const * 0 0 752 0 0 0 0 0 0 0 0 0

752 40 ColorInterpolationFunctionConstant const 8832 40 ColorInterpolationFunctionConstant const 40 ColorInterpolationFunctionConstant const 0 0 687 0 0 0 0 0 0 0 0 0

753 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 750 0 0 0 0 0 0 0 0 0

754 36 ColorInterpolationFunctionConstant * 8576 36 ColorInterpolationFunctionConstant * 36 ColorInterpolationFunctionConstant * 0 0 687 0 0 0 0 0 0 0 0 0

755 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 756 0 0 0 0 0 0 0 0 0

756 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 750 0 0 0 0 0 0 0 0 0

757 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

758 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 757 0 0 0 0 0 0 0 0 0

759 40 ColorInterpolationFunctionLinear const * 8576 40 ColorInterpolationFunctionLinear const * 40 ColorInterpolationFunctionLinear const * 0 0 760 0 0 0 0 0 0 0 0 0

760 38 ColorInterpolationFunctionLinear const 8832 38 ColorInterpolationFunctionLinear const 38 ColorInterpolationFunctionLinear const 0 0 689 0 0 0 0 0 0 0 0 0

761 34 ColorInterpolationFunctionLinear * 8576 34 ColorInterpolationFunctionLinear * 34 ColorInterpolationFunctionLinear * 0 0 689 0 0 0 0 0 0 0 0 0

762 42 ColorInterpolationFunctionStepwave const * 8576 42 ColorInterpolationFunctionStepwave const * 42 ColorInterpolationFunctionStepwave const * 0 0 763 0 0 0 0 0 0 0 0 0

763 40 ColorInterpolationFunctionStepwave const 8832 40 ColorInterpolationFunctionStepwave const 40 ColorInterpolationFunctionStepwave const 0 0 690 0 0 0 0 0 0 0 0 0

764 36 ColorInterpolationFunctionStepwave * 8576 36 ColorInterpolationFunctionStepwave * 36 ColorInterpolationFunctionStepwave * 0 0 690 0 0 0 0 0 0 0 0 0

765 42 ColorInterpolationFunctionSinusoid const * 8576 42 ColorInterpolationFunctionSinusoid const * 42 ColorInterpolationFunctionSinusoid const * 0 0 766 0 0 0 0 0 0 0 0 0

766 40 ColorInterpolationFunctionSinusoid const 8832 40 ColorInterpolationFunctionSinusoid const 40 ColorInterpolationFunctionSinusoid const 0 0 691 0 0 0 0 0 0 0 0 0

767 36 ColorInterpolationFunctionSinusoid * 8576 36 ColorInterpolationFunctionSinusoid * 36 ColorInterpolationFunctionSinusoid * 0 0 691 0 0 0 0 0 0 0 0 0

768 28 ColorInterpolationFunction * 8576 28 ColorInterpolationFunction * 28 ColorInterpolationFunction * 0 0 688 0 0 0 0 0 0 0 0 0

769 27 ColorInterpolationSegment * 8576 27 ColorInterpolationSegment * 27 ColorInterpolationSegment * 0 0 692 0 0 0 0 0 0 0 0 0

770 33 ColorInterpolationSegment const * 8576 33 ColorInterpolationSegment const * 33 ColorInterpolationSegment const * 0 0 771 0 0 0 0 0 0 0 0 0

771 31 ColorInterpolationSegment const 8832 31 ColorInterpolationSegment const 31 ColorInterpolationSegment const 0 0 692 0 0 0 0 0 0 0 0 0

772 19 TypedReferenceCount 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

773 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 772 0 0 0 0 0 0 0 0 0

774 27 ColorInterpolationManager * 8576 27 ColorInterpolationManager * 27 ColorInterpolationManager * 0 0 693 0 0 0 0 0 0 0 0 0

775 33 ColorInterpolationManager const * 8576 33 ColorInterpolationManager const * 33 ColorInterpolationManager const * 0 0 776 0 0 0 0 0 0 0 0 0

776 31 ColorInterpolationManager const 8832 31 ColorInterpolationManager const 31 ColorInterpolationManager const 0 0 693 0 0 0 0 0 0 0 0 0

777 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

778 13 DiscEmitter * 8576 13 DiscEmitter * 13 DiscEmitter * 0 0 694 0 0 0 0 0 0 0 0 0

779 19 DiscEmitter const * 8576 19 DiscEmitter const * 19 DiscEmitter const * 0 0 780 0 0 0 0 0 0 0 0 0

780 17 DiscEmitter const 8832 17 DiscEmitter const 17 DiscEmitter const 0 0 694 0 0 0 0 0 0 0 0 0

781 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 782 0 0 0 0 0 0 0 0 0

782 9 PandaNode 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

783 22 GeomParticleRenderer * 8576 22 GeomParticleRenderer * 22 GeomParticleRenderer * 0 0 695 0 0 0 0 0 0 0 0 0

784 28 GeomParticleRenderer const * 8576 28 GeomParticleRenderer const * 28 GeomParticleRenderer const * 0 0 785 0 0 0 0 0 0 0 0 0

785 26 GeomParticleRenderer const 8832 26 GeomParticleRenderer const 26 GeomParticleRenderer const 0 0 695 0 0 0 0 0 0 0 0 0

786 13 LineEmitter * 8576 13 LineEmitter * 13 LineEmitter * 0 0 696 0 0 0 0 0 0 0 0 0

787 19 LineEmitter const * 8576 19 LineEmitter const * 19 LineEmitter const * 0 0 788 0 0 0 0 0 0 0 0 0

788 17 LineEmitter const 8832 17 LineEmitter const 17 LineEmitter const 0 0 696 0 0 0 0 0 0 0 0 0

789 22 LineParticleRenderer * 8576 22 LineParticleRenderer * 22 LineParticleRenderer * 0 0 697 0 0 0 0 0 0 0 0 0

790 28 LineParticleRenderer const * 8576 28 LineParticleRenderer const * 28 LineParticleRenderer const * 0 0 791 0 0 0 0 0 0 0 0 0

791 26 LineParticleRenderer const 8832 26 LineParticleRenderer const 26 LineParticleRenderer const 0 0 697 0 0 0 0 0 0 0 0 0

792 22 ParticleSystem const * 8576 22 ParticleSystem const * 22 ParticleSystem const * 0 0 793 0 0 0 0 0 0 0 0 0

793 20 ParticleSystem const 8832 20 ParticleSystem const 20 ParticleSystem const 0 0 698 0 0 0 0 0 0 0 0 0

794 16 ParticleSystem * 8576 16 ParticleSystem * 16 ParticleSystem * 0 0 698 0 0 0 0 0 0 0 0 0

795 23 ParticleSystemManager * 8576 23 ParticleSystemManager * 23 ParticleSystemManager * 0 0 700 0 0 0 0 0 0 0 0 0

796 29 ParticleSystemManager const * 8576 29 ParticleSystemManager const * 29 ParticleSystemManager const * 0 0 797 0 0 0 0 0 0 0 0 0

797 27 ParticleSystemManager const 8832 27 ParticleSystemManager const 27 ParticleSystemManager const 0 0 700 0 0 0 0 0 0 0 0 0

798 14 PointEmitter * 8576 14 PointEmitter * 14 PointEmitter * 0 0 701 0 0 0 0 0 0 0 0 0

799 20 PointEmitter const * 8576 20 PointEmitter const * 20 PointEmitter const * 0 0 800 0 0 0 0 0 0 0 0 0

800 18 PointEmitter const 8832 18 PointEmitter const 18 PointEmitter const 0 0 701 0 0 0 0 0 0 0 0 0

801 22 PointParticleFactory * 8576 22 PointParticleFactory * 22 PointParticleFactory * 0 0 702 0 0 0 0 0 0 0 0 0

802 28 PointParticleFactory const * 8576 28 PointParticleFactory const * 28 PointParticleFactory const * 0 0 803 0 0 0 0 0 0 0 0 0

803 26 PointParticleFactory const 8832 26 PointParticleFactory const 26 PointParticleFactory const 0 0 702 0 0 0 0 0 0 0 0 0

804 23 PointParticleRenderer * 8576 23 PointParticleRenderer * 23 PointParticleRenderer * 0 0 703 0 0 0 0 0 0 0 0 0

805 29 PointParticleRenderer const * 8576 29 PointParticleRenderer const * 29 PointParticleRenderer const * 0 0 806 0 0 0 0 0 0 0 0 0

806 27 PointParticleRenderer const 8832 27 PointParticleRenderer const 27 PointParticleRenderer const 0 0 703 0 0 0 0 0 0 0 0 0

807 18 RectangleEmitter * 8576 18 RectangleEmitter * 18 RectangleEmitter * 0 0 705 0 0 0 0 0 0 0 0 0

808 24 RectangleEmitter const * 8576 24 RectangleEmitter const * 24 RectangleEmitter const * 0 0 809 0 0 0 0 0 0 0 0 0

809 22 RectangleEmitter const 8832 22 RectangleEmitter const 22 RectangleEmitter const 0 0 705 0 0 0 0 0 0 0 0 0

810 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 811 0 0 0 0 0 0 0 0 0

811 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 812 0 0 0 0 0 0 0 0 0

812 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

813 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 812 0 0 0 0 0 0 0 0 0

814 13 RingEmitter * 8576 13 RingEmitter * 13 RingEmitter * 0 0 706 0 0 0 0 0 0 0 0 0

815 19 RingEmitter const * 8576 19 RingEmitter const * 19 RingEmitter const * 0 0 816 0 0 0 0 0 0 0 0 0

816 17 RingEmitter const 8832 17 RingEmitter const 17 RingEmitter const 0 0 706 0 0 0 0 0 0 0 0 0

817 25 SparkleParticleRenderer * 8576 25 SparkleParticleRenderer * 25 SparkleParticleRenderer * 0 0 707 0 0 0 0 0 0 0 0 0

818 31 SparkleParticleRenderer const * 8576 31 SparkleParticleRenderer const * 31 SparkleParticleRenderer const * 0 0 819 0 0 0 0 0 0 0 0 0

819 29 SparkleParticleRenderer const 8832 29 SparkleParticleRenderer const 29 SparkleParticleRenderer const 0 0 707 0 0 0 0 0 0 0 0 0

820 22 SphereSurfaceEmitter * 8576 22 SphereSurfaceEmitter * 22 SphereSurfaceEmitter * 0 0 709 0 0 0 0 0 0 0 0 0

821 28 SphereSurfaceEmitter const * 8576 28 SphereSurfaceEmitter const * 28 SphereSurfaceEmitter const * 0 0 822 0 0 0 0 0 0 0 0 0

822 26 SphereSurfaceEmitter const 8832 26 SphereSurfaceEmitter const 26 SphereSurfaceEmitter const 0 0 709 0 0 0 0 0 0 0 0 0

823 21 SphereVolumeEmitter * 8576 21 SphereVolumeEmitter * 21 SphereVolumeEmitter * 0 0 710 0 0 0 0 0 0 0 0 0

824 27 SphereVolumeEmitter const * 8576 27 SphereVolumeEmitter const * 27 SphereVolumeEmitter const * 0 0 825 0 0 0 0 0 0 0 0 0

825 25 SphereVolumeEmitter const 8832 25 SphereVolumeEmitter const 25 SphereVolumeEmitter const 0 0 710 0 0 0 0 0 0 0 0 0

826 12 SpriteAnim * 8576 12 SpriteAnim * 12 SpriteAnim * 0 0 711 0 0 0 0 0 0 0 0 0

827 18 SpriteAnim const * 8576 18 SpriteAnim const * 18 SpriteAnim const * 0 0 828 0 0 0 0 0 0 0 0 0

828 16 SpriteAnim const 8832 16 SpriteAnim const 16 SpriteAnim const 0 0 711 0 0 0 0 0 0 0 0 0

829 30 SpriteParticleRenderer const * 8576 30 SpriteParticleRenderer const * 30 SpriteParticleRenderer const * 0 0 830 0 0 0 0 0 0 0 0 0

830 28 SpriteParticleRenderer const 8832 28 SpriteParticleRenderer const 28 SpriteParticleRenderer const 0 0 713 0 0 0 0 0 0 0 0 0

831 24 SpriteParticleRenderer * 8576 24 SpriteParticleRenderer * 24 SpriteParticleRenderer * 0 0 713 0 0 0 0 0 0 0 0 0

832 9 Texture * 8576 9 Texture * 9 Texture * 0 0 833 0 0 0 0 0 0 0 0 0

833 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

834 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 835 0 0 0 0 0 0 0 0 0

835 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 836 0 0 0 0 0 0 0 0 0

836 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

837 20 TangentRingEmitter * 8576 20 TangentRingEmitter * 20 TangentRingEmitter * 0 0 714 0 0 0 0 0 0 0 0 0

838 26 TangentRingEmitter const * 8576 26 TangentRingEmitter const * 26 TangentRingEmitter const * 0 0 839 0 0 0 0 0 0 0 0 0

839 24 TangentRingEmitter const 8832 24 TangentRingEmitter const 24 TangentRingEmitter const 0 0 714 0 0 0 0 0 0 0 0 0

840 22 ZSpinParticleFactory * 8576 22 ZSpinParticleFactory * 22 ZSpinParticleFactory * 0 0 715 0 0 0 0 0 0 0 0 0

841 28 ZSpinParticleFactory const * 8576 28 ZSpinParticleFactory const * 28 ZSpinParticleFactory const * 0 0 842 0 0 0 0 0 0 0 0 0

842 26 ZSpinParticleFactory const 8832 26 ZSpinParticleFactory const 26 ZSpinParticleFactory const 0 0 715 0 0 0 0 0 0 0 0 0

843 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
0
