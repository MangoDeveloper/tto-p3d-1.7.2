1145554513
2 2
9 libdgraph 4 SLSe 5 panda 
11
10 18 DataGraphTraverser 4 21 38 DataGraphTraverser::DataGraphTraverser 0 1 1 228
////////////////////////////////////////////////////////////////////
//     Function: DataGraphTraverser::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
45
DataGraphTraverser::DataGraphTraverser(void);

11 19 ~DataGraphTraverser 4 21 39 DataGraphTraverser::~DataGraphTraverser 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: DataGraphTraverser::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
46
DataGraphTraverser::~DataGraphTraverser(void);

12 8 traverse 4 21 28 DataGraphTraverser::traverse 0 1 2 308
////////////////////////////////////////////////////////////////////
//     Function: DataGraphTraverser::traverse
//       Access: Public
//  Description: Starts the traversal of the data graph at the
//               indicated root node.
////////////////////////////////////////////////////////////////////
51
void DataGraphTraverser::traverse(PandaNode *node);

13 14 traverse_below 4 21 34 DataGraphTraverser::traverse_below 0 1 3 418
////////////////////////////////////////////////////////////////////
//     Function: DataGraphTraverser::traverse_below
//       Access: Public
//  Description: Continues the traversal to all the children of the
//               indicated node, passing in the given data, without
//               actually calling transmit_data() on the given node.
////////////////////////////////////////////////////////////////////
89
void DataGraphTraverser::traverse_below(PandaNode *node, DataNodeTransmit const &output);

14 17 collect_leftovers 4 21 37 DataGraphTraverser::collect_leftovers 0 1 4 452
////////////////////////////////////////////////////////////////////
//     Function: DataGraphTraverser::collect_leftovers
//       Access: Public
//  Description: Pick up any nodes that didn't get completely
//               traversed.  These must be nodes that have multiple
//               parents, with at least one parent completely outside
//               of the data graph.
////////////////////////////////////////////////////////////////////
49
void DataGraphTraverser::collect_leftovers(void);

15 8 DataNode 4 22 18 DataNode::DataNode 0 1 5 1117
// Filename: dataNode.I
// Created by:  drose (11Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DataNode::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DataNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
60
inline DataNode::DataNode(basic_string< char > const &name);

16 12 write_inputs 4 22 22 DataNode::write_inputs 0 1 6 334
////////////////////////////////////////////////////////////////////
//     Function: DataNode::write_inputs
//       Access: Published
//  Description: Writes to the indicated ostream a list of all the
//               inputs this DataNode might expect to receive.
////////////////////////////////////////////////////////////////////
48
void DataNode::write_inputs(ostream &out) const;

17 13 write_outputs 4 22 23 DataNode::write_outputs 0 1 7 327
////////////////////////////////////////////////////////////////////
//     Function: DataNode::write_outputs
//       Access: Published
//  Description: Writes to the indicated ostream a list of all the
//               outputs this DataNode might generate.
////////////////////////////////////////////////////////////////////
49
void DataNode::write_outputs(ostream &out) const;

18 17 write_connections 4 22 27 DataNode::write_connections 0 1 8 381
////////////////////////////////////////////////////////////////////
//     Function: DataNode::write_connections
//       Access: Published
//  Description: Writes to the indicated ostream a list of all the
//               connections currently showing between this DataNode
//               and its parent(s).
////////////////////////////////////////////////////////////////////
53
void DataNode::write_connections(ostream &out) const;

19 14 get_class_type 4 22 24 DataNode::get_class_type 0 1 9 0
49
static TypeHandle DataNode::get_class_type(void);

20 9 ~DataNode 4 22 19 DataNode::~DataNode 0 0 0
26
DataNode::~DataNode(void);

9
1 14 Dtool_SLSe6KPF 7 2 24 11 14 Dtool_SLSe6KPF 0 
2 14 Dtool_SLSePaYd 4 4 26 0 14 Dtool_SLSePaYd 2 4 this 3 24  4 node 1 25  
3 14 Dtool_SLSelThv 4 5 26 0 14 Dtool_SLSelThv 3 4 this 3 24  4 node 1 25  6 output 1 27  
4 14 Dtool_SLSe8nIW 4 6 26 0 14 Dtool_SLSe8nIW 1 4 this 3 24  
5 14 Dtool_SLSebRQs 7 9 31 20 14 Dtool_SLSebRQs 1 4 name 1 30  
6 14 Dtool_SLSe4fqQ 4 10 26 0 14 Dtool_SLSe4fqQ 2 4 this 3 32  3 out 1 34  
7 14 Dtool_SLSeUk5z 4 11 26 0 14 Dtool_SLSeUk5z 2 4 this 3 32  3 out 1 34  
8 14 Dtool_SLSeUqT4 4 12 26 0 14 Dtool_SLSeUqT4 2 4 this 3 32  3 out 1 34  
9 14 Dtool_SLSePSzN 7 13 37 0 14 Dtool_SLSePSzN 0 
17
21 18 DataGraphTraverser 26625 18 DataGraphTraverser 18 DataGraphTraverser 0 0 0 1 10 11 0 3 12 13 14 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : DataGraphTraverser
// Description : This object supervises the traversal of the data
//               graph and the moving of data from one DataNode to its
//               children.  The data graph is used to manage data from
//               input devices, etc.  See the overview of the data
//               graph in dataNode.h.
////////////////////////////////////////////////////////////////////

22 8 DataNode 141313 8 DataNode 8 DataNode 0 0 0 1 15 20 0 4 16 17 18 19 0 1 0 23 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

23 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

24 20 DataGraphTraverser * 8576 20 DataGraphTraverser * 20 DataGraphTraverser * 0 0 21 0 0 0 0 0 0 0 0 0

25 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 23 0 0 0 0 0 0 0 0 0

26 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

27 24 DataNodeTransmit const * 8576 24 DataNodeTransmit const * 24 DataNodeTransmit const * 0 0 28 0 0 0 0 0 0 0 0 0

28 22 DataNodeTransmit const 8832 22 DataNodeTransmit const 22 DataNodeTransmit const 0 0 29 0 0 0 0 0 0 0 0 0

29 16 DataNodeTransmit 1050624 16 DataNodeTransmit 16 DataNodeTransmit 0 0 0 0 0 0 0 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : DataNodeTransmit
// Description : Encapsulates the data generated from (or sent into)
//               any particular DataNode.  This is basically just an
//               array of EventParameters, one for each registered
//               input or output wire.
////////////////////////////////////////////////////////////////////

30 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

31 10 DataNode * 8576 10 DataNode * 10 DataNode * 0 0 22 0 0 0 0 0 0 0 0 0

32 16 DataNode const * 8576 16 DataNode const * 16 DataNode const * 0 0 33 0 0 0 0 0 0 0 0 0

33 14 DataNode const 8832 14 DataNode const 14 DataNode const 0 0 22 0 0 0 0 0 0 0 0 0

34 9 ostream * 8576 9 ostream * 9 ostream * 0 0 35 0 0 0 0 0 0 0 0 0

35 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

36 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

37 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 36 0 0 0 0 0 0 0 0 0

0
0
