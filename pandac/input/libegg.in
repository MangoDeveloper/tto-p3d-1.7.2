1145555520
2 2
6 libegg 4 kAOM 8 pandaegg 
820
876 11 EggUserData 4 1696 24 EggUserData::EggUserData 0 2 1 2 1122
// Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
38
inline EggUserData::EggUserData(void);

877 10 operator = 4 1696 23 EggUserData::operator = 0 1 3 233
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggUserData &EggUserData::operator =(EggUserData const &copy);

878 14 get_class_type 4 1696 27 EggUserData::get_class_type 0 1 4 0
52
static TypeHandle EggUserData::get_class_type(void);

879 9 EggObject 4 1698 20 EggObject::EggObject 0 2 5 6 449
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
27
EggObject::EggObject(void);

880 10 operator = 4 1698 21 EggObject::operator = 0 1 7 234
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
EggObject &EggObject::operator =(EggObject const &copy);

881 13 set_user_data 4 1698 24 EggObject::set_user_data 0 1 8 1201
////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
////////////////////////////////////////////////////////////////////
54
void EggObject::set_user_data(EggUserData *user_data);

882 13 get_user_data 4 1698 24 EggObject::get_user_data 0 2 9 10 699
////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
50
EggUserData *EggObject::get_user_data(void) const;

883 13 has_user_data 4 1698 24 EggObject::has_user_data 0 2 11 12 694
////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
////////////////////////////////////////////////////////////////////
42
bool EggObject::has_user_data(void) const;

884 15 clear_user_data 4 1698 26 EggObject::clear_user_data 0 2 13 14 553
////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
////////////////////////////////////////////////////////////////////
38
void EggObject::clear_user_data(void);

885 14 get_class_type 4 1698 25 EggObject::get_class_type 0 1 15 0
50
static TypeHandle EggObject::get_class_type(void);

886 19 upcast_to_EggObject 12 1699 35 EggNamedObject::upcast_to_EggObject 0 1 22 39
upcast from EggNamedObject to EggObject
53
EggObject *EggNamedObject::upcast_to_EggObject(void);

887 26 downcast_to_EggNamedObject 12 1698 37 EggObject::downcast_to_EggNamedObject 0 1 23 41
downcast from EggObject to EggNamedObject
60
EggNamedObject *EggObject::downcast_to_EggNamedObject(void);

888 17 upcast_to_Namable 12 1699 33 EggNamedObject::upcast_to_Namable 0 1 24 37
upcast from EggNamedObject to Namable
49
Namable *EggNamedObject::upcast_to_Namable(void);

889 26 downcast_to_EggNamedObject 12 1700 35 Namable::downcast_to_EggNamedObject 0 1 25 39
downcast from Namable to EggNamedObject
58
EggNamedObject *Namable::downcast_to_EggNamedObject(void);

890 14 EggNamedObject 4 1699 30 EggNamedObject::EggNamedObject 0 3 16 17 18 1131
// Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline EggNamedObject::EggNamedObject(basic_string< char > const &name = (""));

891 10 operator = 4 1699 26 EggNamedObject::operator = 0 1 19 236
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggNamedObject &EggNamedObject::operator =(EggNamedObject const &copy);

892 6 output 4 1699 22 EggNamedObject::output 0 1 20 219
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EggNamedObject::output(ostream &out) const;

893 14 get_class_type 4 1699 30 EggNamedObject::get_class_type 0 1 21 0
55
static TypeHandle EggNamedObject::get_class_type(void);

894 15 ~EggNamedObject 4 1699 31 EggNamedObject::~EggNamedObject 0 0 0
38
EggNamedObject::~EggNamedObject(void);

895 10 operator = 4 1701 19 EggNode::operator = 0 1 26 229
////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggNode &EggNode::operator =(EggNode const &copy);

896 10 get_parent 4 1701 19 EggNode::get_parent 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline EggGroupNode *EggNode::get_parent(void) const;

897 9 get_depth 4 1701 18 EggNode::get_depth 0 1 28 297
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
////////////////////////////////////////////////////////////////////
42
inline int EggNode::get_depth(void) const;

898 17 is_under_instance 4 1701 26 EggNode::is_under_instance 0 1 29 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggNode::is_under_instance(void) const;

899 18 is_under_transform 4 1701 27 EggNode::is_under_transform 0 1 30 368
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggNode::is_under_transform(void) const;

900 14 is_local_coord 4 1701 23 EggNode::is_local_coord 0 1 31 443
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
////////////////////////////////////////////////////////////////////
48
inline bool EggNode::is_local_coord(void) const;

901 16 get_vertex_frame 4 1701 25 EggNode::get_vertex_frame 0 1 32 1112
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4d const &EggNode::get_vertex_frame(void) const;

902 14 get_node_frame 4 1701 23 EggNode::get_node_frame 0 1 33 372
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d const &EggNode::get_node_frame(void) const;

903 20 get_vertex_frame_inv 4 1701 29 EggNode::get_vertex_frame_inv 0 1 34 333
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggNode::get_vertex_frame_inv(void) const;

904 18 get_node_frame_inv 4 1701 27 EggNode::get_node_frame_inv 0 1 35 327
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_frame_inv(void) const;

905 18 get_vertex_to_node 4 1701 27 EggNode::get_vertex_to_node 0 1 36 503
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_vertex_to_node(void) const;

906 18 get_node_to_vertex 4 1701 27 EggNode::get_node_to_vertex 0 1 37 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_to_vertex(void) const;

907 20 get_vertex_frame_ptr 4 1701 29 EggNode::get_vertex_frame_ptr 0 1 38 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const *EggNode::get_vertex_frame_ptr(void) const;

908 18 get_node_frame_ptr 4 1701 27 EggNode::get_node_frame_ptr 0 1 39 362
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const *EggNode::get_node_frame_ptr(void) const;

909 24 get_vertex_frame_inv_ptr 4 1701 33 EggNode::get_vertex_frame_inv_ptr 0 1 40 374
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const *EggNode::get_vertex_frame_inv_ptr(void) const;

910 22 get_node_frame_inv_ptr 4 1701 31 EggNode::get_node_frame_inv_ptr 0 1 41 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_frame_inv_ptr(void) const;

911 22 get_vertex_to_node_ptr 4 1701 31 EggNode::get_vertex_to_node_ptr 0 1 42 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_vertex_to_node_ptr(void) const;

912 22 get_node_to_vertex_ptr 4 1701 31 EggNode::get_node_to_vertex_ptr 0 1 43 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_to_vertex_ptr(void) const;

913 9 transform 4 1701 18 EggNode::transform 0 1 44 308
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
////////////////////////////////////////////////////////////////////
53
inline void EggNode::transform(LMatrix4d const &mat);

914 23 transform_vertices_only 4 1701 32 EggNode::transform_vertices_only 0 1 45 476
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
////////////////////////////////////////////////////////////////////
67
inline void EggNode::transform_vertices_only(LMatrix4d const &mat);

915 18 flatten_transforms 4 1701 27 EggNode::flatten_transforms 0 1 46 699
////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
46
inline void EggNode::flatten_transforms(void);

916 13 apply_texmats 4 1701 22 EggNode::apply_texmats 0 1 47 398
////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
////////////////////////////////////////////////////////////////////
34
void EggNode::apply_texmats(void);

917 11 rename_node 4 1701 20 EggNode::rename_node 0 1 48 254
////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
70
int EggNode::rename_node(vector< basic_string< char > > strip_prefix);

918 8 is_joint 4 1701 17 EggNode::is_joint 0 1 49 504
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
43
virtual bool EggNode::is_joint(void) const;

919 14 is_anim_matrix 4 1701 23 EggNode::is_anim_matrix 0 1 50 341
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
////////////////////////////////////////////////////////////////////
49
virtual bool EggNode::is_anim_matrix(void) const;

920 20 determine_alpha_mode 4 1701 29 EggNode::determine_alpha_mode 0 1 51 549
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_alpha_mode(void);

921 26 determine_depth_write_mode 4 1701 35 EggNode::determine_depth_write_mode 0 1 52 561
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggNode::determine_depth_write_mode(void);

922 25 determine_depth_test_mode 4 1701 34 EggNode::determine_depth_test_mode 0 1 53 559
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_depth_test_mode(void);

923 25 determine_visibility_mode 4 1701 34 EggNode::determine_visibility_mode 0 1 54 558
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_visibility_mode(void);

924 20 determine_draw_order 4 1701 29 EggNode::determine_draw_order 0 1 55 531
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_draw_order(void);

925 13 determine_bin 4 1701 22 EggNode::determine_bin 0 1 56 518
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
52
virtual EggRenderMode *EggNode::determine_bin(void);

926 17 determine_indexed 4 1701 26 EggNode::determine_indexed 0 1 57 615
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool EggNode::determine_indexed(void);

927 15 determine_decal 4 1701 24 EggNode::determine_decal 0 1 58 603
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
44
virtual bool EggNode::determine_decal(void);

928 5 write 4 1701 14 EggNode::write 0 1 59 0
70
virtual void EggNode::write(ostream &out, int indent_level) const = 0;

929 9 parse_egg 4 1701 18 EggNode::parse_egg 0 1 60 575
////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
////////////////////////////////////////////////////////////////////
64
bool EggNode::parse_egg(basic_string< char > const &egg_syntax);

930 20 test_under_integrity 4 1701 29 EggNode::test_under_integrity 0 1 61 380
////////////////////////////////////////////////////////////////////
//     Function: EggNode::test_under_integrity
//       Access: Public
//  Description: Recursively checks the integrity of the _under_flags,
//               _parent, and _depth members of this node and all of
//               its ancestors.
////////////////////////////////////////////////////////////////////
47
void EggNode::test_under_integrity(void) const;

931 14 get_class_type 4 1701 23 EggNode::get_class_type 0 1 62 0
48
static TypeHandle EggNode::get_class_type(void);

932 8 ~EggNode 4 1701 17 EggNode::~EggNode 0 0 0
24
EggNode::~EggNode(void);

933 10 operator = 4 1702 23 EggAnimData::operator = 0 1 63 233
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggAnimData &EggAnimData::operator =(EggAnimData const &copy);

934 7 set_fps 4 1702 20 EggAnimData::set_fps 0 1 64 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAnimData::set_fps(double type);

935 9 clear_fps 4 1702 22 EggAnimData::clear_fps 0 1 65 218
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggAnimData::clear_fps(void);

936 7 has_fps 4 1702 20 EggAnimData::has_fps 0 1 66 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggAnimData::has_fps(void) const;

937 7 get_fps 4 1702 20 EggAnimData::get_fps 0 1 67 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggAnimData::get_fps(void) const;

938 10 clear_data 4 1702 23 EggAnimData::clear_data 0 1 68 259
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
////////////////////////////////////////////////////////////////////
42
inline void EggAnimData::clear_data(void);

939 8 add_data 4 1702 21 EggAnimData::add_data 0 1 69 253
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
////////////////////////////////////////////////////////////////////
48
inline void EggAnimData::add_data(double value);

940 8 get_size 4 1702 21 EggAnimData::get_size 0 1 70 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
////////////////////////////////////////////////////////////////////
45
inline int EggAnimData::get_size(void) const;

941 8 quantize 4 1702 21 EggAnimData::quantize 0 1 71 303
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
////////////////////////////////////////////////////////////////////
43
void EggAnimData::quantize(double quantum);

942 14 get_class_type 4 1702 27 EggAnimData::get_class_type 0 1 72 0
52
static TypeHandle EggAnimData::get_class_type(void);

943 12 ~EggAnimData 4 1702 25 EggAnimData::~EggAnimData 0 0 0
32
EggAnimData::~EggAnimData(void);

944 13 EggAttributes 4 1703 28 EggAttributes::EggAttributes 0 2 73 74 457
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
35
EggAttributes::EggAttributes(void);

945 10 operator = 4 1703 25 EggAttributes::operator = 0 1 75 238
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggAttributes &EggAttributes::operator =(EggAttributes const &copy);

946 14 ~EggAttributes 4 1703 29 EggAttributes::~EggAttributes 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual EggAttributes::~EggAttributes(void);

947 10 has_normal 4 1703 25 EggAttributes::has_normal 0 1 76 901
// Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggAttributes::has_normal(void) const;

948 10 get_normal 4 1703 25 EggAttributes::get_normal 0 1 77 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggAttributes::get_normal(void) const;

949 10 set_normal 4 1703 25 EggAttributes::set_normal 0 1 78 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggAttributes::set_normal(LVector3d const &normal);

950 12 clear_normal 4 1703 27 EggAttributes::clear_normal 0 1 79 226
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAttributes::clear_normal(void);

951 14 matches_normal 4 1703 29 EggAttributes::matches_normal 0 1 80 345
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
76
inline bool EggAttributes::matches_normal(EggAttributes const &other) const;

952 11 copy_normal 4 1703 26 EggAttributes::copy_normal 0 1 81 376
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
////////////////////////////////////////////////////////////////////
67
inline void EggAttributes::copy_normal(EggAttributes const &other);

953 9 has_color 4 1703 24 EggAttributes::has_color 0 1 82 223
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggAttributes::has_color(void) const;

954 9 get_color 4 1703 24 EggAttributes::get_color 0 1 83 333
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f EggAttributes::get_color(void) const;

955 9 set_color 4 1703 24 EggAttributes::set_color 0 1 84 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggAttributes::set_color(LVecBase4f const &Color);

956 11 clear_color 4 1703 26 EggAttributes::clear_color 0 1 85 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggAttributes::clear_color(void);

957 13 matches_color 4 1703 28 EggAttributes::matches_color 0 1 86 343
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
75
inline bool EggAttributes::matches_color(EggAttributes const &other) const;

958 10 copy_color 4 1703 25 EggAttributes::copy_color 0 1 87 372
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
////////////////////////////////////////////////////////////////////
66
inline void EggAttributes::copy_color(EggAttributes const &other);

959 5 write 4 1703 20 EggAttributes::write 0 1 88 304
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggAttributes::write(ostream &out, int indent_level) const;

960 15 sorts_less_than 4 1703 30 EggAttributes::sorts_less_than 0 1 89 399
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
77
inline bool EggAttributes::sorts_less_than(EggAttributes const &other) const;

961 10 compare_to 4 1703 25 EggAttributes::compare_to 0 1 90 394
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
64
int EggAttributes::compare_to(EggAttributes const &other) const;

962 9 transform 4 1703 24 EggAttributes::transform 0 1 91 312
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
////////////////////////////////////////////////////////////////////
52
void EggAttributes::transform(LMatrix4d const &mat);

963 12 get_dnormals 20 1703 27 EggAttributes::get_dnormals 0 1 93 74
getter for EggMorphList< EggMorph< LVector3d > > EggAttributes::_dnormals;
85
EggMorphList< EggMorph< LVector3d > > const &EggAttributes::get_dnormals(void) const;

964 10 get_drgbas 20 1703 25 EggAttributes::get_drgbas 0 1 94 72
getter for EggMorphList< EggMorph< LVector4f > > EggAttributes::_drgbas;
83
EggMorphList< EggMorph< LVector4f > > const &EggAttributes::get_drgbas(void) const;

965 14 get_class_type 4 1703 29 EggAttributes::get_class_type 0 1 92 0
54
static TypeHandle EggAttributes::get_class_type(void);

966 12 EggGroupNode 4 1706 26 EggGroupNode::EggGroupNode 0 3 95 96 97 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggGroupNode::EggGroupNode(basic_string< char > const &name = (""));

967 10 operator = 4 1706 24 EggGroupNode::operator = 0 1 98 237
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggGroupNode &EggGroupNode::operator =(EggGroupNode const &copy);

968 5 empty 4 1706 19 EggGroupNode::empty 0 1 99 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
bool EggGroupNode::empty(void) const;

969 4 size 4 1706 18 EggGroupNode::size 0 1 100 217
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
unsigned int EggGroupNode::size(void) const;

970 5 clear 4 1706 19 EggGroupNode::clear 0 1 101 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
void EggGroupNode::clear(void);

971 15 get_first_child 4 1706 29 EggGroupNode::get_first_child 0 1 102 914
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
////////////////////////////////////////////////////////////////////
45
EggNode *EggGroupNode::get_first_child(void);

972 14 get_next_child 4 1706 28 EggGroupNode::get_next_child 0 1 103 1106
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
////////////////////////////////////////////////////////////////////
44
EggNode *EggGroupNode::get_next_child(void);

973 9 add_child 4 1706 23 EggGroupNode::add_child 0 1 104 385
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
////////////////////////////////////////////////////////////////////
48
EggNode *EggGroupNode::add_child(EggNode *node);

974 12 remove_child 4 1706 26 EggGroupNode::remove_child 0 1 105 398
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
////////////////////////////////////////////////////////////////////
63
PointerTo< EggNode > EggGroupNode::remove_child(EggNode *node);

975 14 steal_children 4 1706 28 EggGroupNode::steal_children 0 1 106 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::steal_children(EggGroupNode &other);

976 10 find_child 4 1706 24 EggGroupNode::find_child 0 1 107 410
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
////////////////////////////////////////////////////////////////////
74
EggNode *EggGroupNode::find_child(basic_string< char > const &name) const;

977 22 has_absolute_pathnames 4 1706 36 EggGroupNode::has_absolute_pathnames 0 1 108 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
////////////////////////////////////////////////////////////////////
54
bool EggGroupNode::has_absolute_pathnames(void) const;

978 17 resolve_filenames 4 1706 31 EggGroupNode::resolve_filenames 0 1 109 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames in the search
//               path, etc.  It does not automatically search the
//               egg_path for missing files.
////////////////////////////////////////////////////////////////////
68
void EggGroupNode::resolve_filenames(DSearchPath const &searchpath);

979 15 force_filenames 4 1706 29 EggGroupNode::force_filenames 0 1 110 452
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
////////////////////////////////////////////////////////////////////
62
void EggGroupNode::force_filenames(Filename const &directory);

980 23 reverse_vertex_ordering 4 1706 37 EggGroupNode::reverse_vertex_ordering 0 1 111 393
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::reverse_vertex_ordering(void);

981 24 recompute_vertex_normals 4 1706 38 EggGroupNode::recompute_vertex_normals 0 2 112 113 1132
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
98
void EggGroupNode::recompute_vertex_normals(double threshold, CoordinateSystem cs = (CS_default));

982 25 recompute_polygon_normals 4 1706 39 EggGroupNode::recompute_polygon_normals 0 2 114 115 1077
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::recompute_polygon_normals(CoordinateSystem cs = (CS_default));

983 13 strip_normals 4 1706 27 EggGroupNode::strip_normals 0 1 116 606
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
39
void EggGroupNode::strip_normals(void);

984 26 recompute_tangent_binormal 4 1706 40 EggGroupNode::recompute_tangent_binormal 0 1 117 1204
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
74
void EggGroupNode::recompute_tangent_binormal(GlobPattern const &uv_name);

985 20 triangulate_polygons 4 1706 34 EggGroupNode::triangulate_polygons 0 1 118 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
////////////////////////////////////////////////////////////////////
50
int EggGroupNode::triangulate_polygons(int flags);

986 14 mesh_triangles 4 1706 28 EggGroupNode::mesh_triangles 0 1 119 318
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
////////////////////////////////////////////////////////////////////
45
void EggGroupNode::mesh_triangles(int flags);

987 12 rename_nodes 4 1706 26 EggGroupNode::rename_nodes 0 1 120 260
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
90
int EggGroupNode::rename_nodes(vector< basic_string< char > > strip_prefix, bool recurse);

988 22 remove_unused_vertices 4 1706 36 EggGroupNode::remove_unused_vertices 0 1 121 1111
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
////////////////////////////////////////////////////////////////////
55
int EggGroupNode::remove_unused_vertices(bool recurse);

989 25 remove_invalid_primitives 4 1706 39 EggGroupNode::remove_invalid_primitives 0 1 122 453
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
////////////////////////////////////////////////////////////////////
58
int EggGroupNode::remove_invalid_primitives(bool recurse);

990 23 clear_connected_shading 4 1706 37 EggGroupNode::clear_connected_shading 0 1 123 635
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::clear_connected_shading(void);

991 21 get_connected_shading 4 1706 35 EggGroupNode::get_connected_shading 0 1 124 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::get_connected_shading(void);

992 19 rebuild_vertex_pool 4 1706 33 EggGroupNode::rebuild_vertex_pool 0 1 125 588
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rebuild_vertex_pool
//       Access: Published
//  Description: Copies vertices used by the primitives at this group
//               node (and below, if recurse is true) into the
//               indicated vertex pool, and updates the primitives to
//               reference this pool.  It is up to the caller to
//               parent the new vertex pool somewhere appropriate in
//               the egg hierarchy.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::rebuild_vertex_pool(EggVertexPool *vertex_pool, bool recurse);

993 16 unify_attributes 4 1706 30 EggGroupNode::unify_attributes 0 1 126 1614
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
104
void EggGroupNode::unify_attributes(bool use_connected_shading, bool allow_per_primitive, bool recurse);

994 20 apply_last_attribute 4 1706 34 EggGroupNode::apply_last_attribute 0 1 127 768
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
54
void EggGroupNode::apply_last_attribute(bool recurse);

995 21 apply_first_attribute 4 1706 35 EggGroupNode::apply_first_attribute 0 1 128 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::apply_first_attribute(bool recurse);

996 25 post_apply_flat_attribute 4 1706 39 EggGroupNode::post_apply_flat_attribute 0 1 129 490
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
void EggGroupNode::post_apply_flat_attribute(bool recurse);

997 14 get_class_type 4 1706 28 EggGroupNode::get_class_type 0 1 130 0
53
static TypeHandle EggGroupNode::get_class_type(void);

998 13 EggRenderMode 4 1708 28 EggRenderMode::EggRenderMode 0 2 131 132 1128
// Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
35
EggRenderMode::EggRenderMode(void);

999 10 operator = 4 1708 25 EggRenderMode::operator = 0 1 133 235
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
EggRenderMode &EggRenderMode::operator =(EggRenderMode const &copy);

1000 5 write 4 1708 20 EggRenderMode::write 0 1 134 301
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggRenderMode::write(ostream &out, int indent_level) const;

1001 14 set_alpha_mode 4 1708 29 EggRenderMode::set_alpha_mode 0 1 135 849
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
////////////////////////////////////////////////////////////////////
73
inline void EggRenderMode::set_alpha_mode(EggRenderMode::AlphaMode mode);

1002 14 get_alpha_mode 4 1708 29 EggRenderMode::get_alpha_mode 0 1 136 357
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
////////////////////////////////////////////////////////////////////
74
inline EggRenderMode::AlphaMode EggRenderMode::get_alpha_mode(void) const;

1003 20 set_depth_write_mode 4 1708 35 EggRenderMode::set_depth_write_mode 0 1 137 412
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
////////////////////////////////////////////////////////////////////
84
inline void EggRenderMode::set_depth_write_mode(EggRenderMode::DepthWriteMode mode);

1004 20 get_depth_write_mode 4 1708 35 EggRenderMode::get_depth_write_mode 0 1 138 376
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
////////////////////////////////////////////////////////////////////
85
inline EggRenderMode::DepthWriteMode EggRenderMode::get_depth_write_mode(void) const;

1005 19 set_depth_test_mode 4 1708 34 EggRenderMode::set_depth_test_mode 0 1 139 521
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
////////////////////////////////////////////////////////////////////
82
inline void EggRenderMode::set_depth_test_mode(EggRenderMode::DepthTestMode mode);

1006 19 get_depth_test_mode 4 1708 34 EggRenderMode::get_depth_test_mode 0 1 140 373
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
////////////////////////////////////////////////////////////////////
83
inline EggRenderMode::DepthTestMode EggRenderMode::get_depth_test_mode(void) const;

1007 19 set_visibility_mode 4 1708 34 EggRenderMode::set_visibility_mode 0 1 141 530
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
////////////////////////////////////////////////////////////////////
83
inline void EggRenderMode::set_visibility_mode(EggRenderMode::VisibilityMode mode);

1008 19 get_visibility_mode 4 1708 34 EggRenderMode::get_visibility_mode 0 1 142 372
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
////////////////////////////////////////////////////////////////////
84
inline EggRenderMode::VisibilityMode EggRenderMode::get_visibility_mode(void) const;

1009 14 set_draw_order 4 1708 29 EggRenderMode::set_draw_order 0 1 143 534
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
////////////////////////////////////////////////////////////////////
53
inline void EggRenderMode::set_draw_order(int order);

1010 14 get_draw_order 4 1708 29 EggRenderMode::get_draw_order 0 1 144 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
53
inline int EggRenderMode::get_draw_order(void) const;

1011 14 has_draw_order 4 1708 29 EggRenderMode::has_draw_order 0 1 145 342
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline bool EggRenderMode::has_draw_order(void) const;

1012 16 clear_draw_order 4 1708 31 EggRenderMode::clear_draw_order 0 1 146 324
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
50
inline void EggRenderMode::clear_draw_order(void);

1013 7 set_bin 4 1708 22 EggRenderMode::set_bin 0 1 147 691
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
////////////////////////////////////////////////////////////////////
68
inline void EggRenderMode::set_bin(basic_string< char > const &bin);

1014 7 get_bin 4 1708 22 EggRenderMode::get_bin 0 1 148 326
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > EggRenderMode::get_bin(void) const;

1015 7 has_bin 4 1708 22 EggRenderMode::has_bin 0 1 149 319
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
////////////////////////////////////////////////////////////////////
47
inline bool EggRenderMode::has_bin(void) const;

1016 9 clear_bin 4 1708 24 EggRenderMode::clear_bin 0 1 150 315
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
////////////////////////////////////////////////////////////////////
43
inline void EggRenderMode::clear_bin(void);

1017 11 operator == 4 1708 26 EggRenderMode::operator == 0 1 151 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
bool EggRenderMode::operator ==(EggRenderMode const &other) const;

1018 11 operator != 4 1708 26 EggRenderMode::operator != 0 1 152 266
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool EggRenderMode::operator !=(EggRenderMode const &other) const;

1019 10 operator < 4 1708 25 EggRenderMode::operator < 0 1 153 228
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
bool EggRenderMode::operator <(EggRenderMode const &other) const;

1020 17 string_alpha_mode 4 1708 32 EggRenderMode::string_alpha_mode 0 1 154 413
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
////////////////////////////////////////////////////////////////////
101
static EggRenderMode::AlphaMode EggRenderMode::string_alpha_mode(basic_string< char > const &string);

1021 23 string_depth_write_mode 4 1708 38 EggRenderMode::string_depth_write_mode 0 1 155 447
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
////////////////////////////////////////////////////////////////////
112
static EggRenderMode::DepthWriteMode EggRenderMode::string_depth_write_mode(basic_string< char > const &string);

1022 22 string_depth_test_mode 4 1708 37 EggRenderMode::string_depth_test_mode 0 1 156 444
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
////////////////////////////////////////////////////////////////////
110
static EggRenderMode::DepthTestMode EggRenderMode::string_depth_test_mode(basic_string< char > const &string);

1023 22 string_visibility_mode 4 1708 37 EggRenderMode::string_visibility_mode 0 1 157 437
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
////////////////////////////////////////////////////////////////////
111
static EggRenderMode::VisibilityMode EggRenderMode::string_visibility_mode(basic_string< char > const &string);

1024 14 get_class_type 4 1708 29 EggRenderMode::get_class_type 0 1 158 0
54
static TypeHandle EggRenderMode::get_class_type(void);

1025 14 ~EggRenderMode 4 1708 29 EggRenderMode::~EggRenderMode 0 0 0
36
EggRenderMode::~EggRenderMode(void);

1026 12 EggTransform 4 1713 26 EggTransform::EggTransform 0 2 159 160 449
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
33
EggTransform::EggTransform(void);

1027 10 operator = 4 1713 24 EggTransform::operator = 0 1 161 234
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
EggTransform &EggTransform::operator =(EggTransform const &copy);

1028 13 ~EggTransform 4 1713 27 EggTransform::~EggTransform 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual EggTransform::~EggTransform(void);

1029 15 clear_transform 4 1713 29 EggTransform::clear_transform 0 1 162 266
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
////////////////////////////////////////////////////////////////////
48
inline void EggTransform::clear_transform(void);

1030 15 add_translate2d 4 1713 29 EggTransform::add_translate2d 0 1 163 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate2d(LVector2d const &translate);

1031 15 add_translate3d 4 1713 29 EggTransform::add_translate3d 0 1 164 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate3d(LVector3d const &translate);

1032 12 add_rotate2d 4 1713 26 EggTransform::add_rotate2d 0 1 165 384
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
////////////////////////////////////////////////////////////////////
46
void EggTransform::add_rotate2d(double angle);

1033 8 add_rotx 4 1713 22 EggTransform::add_rotx 0 1 166 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotx(double angle);

1034 8 add_roty 4 1713 22 EggTransform::add_roty 0 1 167 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_roty(double angle);

1035 8 add_rotz 4 1713 22 EggTransform::add_rotz 0 1 168 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotz(double angle);

1036 12 add_rotate3d 4 1713 26 EggTransform::add_rotate3d 0 2 169 170 811
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
////////////////////////////////////////////////////////////////////
69
void EggTransform::add_rotate3d(double angle, LVector3d const &axis);

1037 11 add_scale2d 4 1713 25 EggTransform::add_scale2d 0 1 171 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale2d(LVecBase2d const &scale);

1038 11 add_scale3d 4 1713 25 EggTransform::add_scale3d 0 1 172 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale3d(LVecBase3d const &scale);

1039 17 add_uniform_scale 4 1713 31 EggTransform::add_uniform_scale 0 1 173 277
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
////////////////////////////////////////////////////////////////////
51
void EggTransform::add_uniform_scale(double scale);

1040 11 add_matrix3 4 1713 25 EggTransform::add_matrix3 0 1 174 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix3(LMatrix3d const &mat);

1041 11 add_matrix4 4 1713 25 EggTransform::add_matrix4 0 1 175 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix4(LMatrix4d const &mat);

1042 13 has_transform 4 1713 27 EggTransform::has_transform 0 1 176 432
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
////////////////////////////////////////////////////////////////////
52
inline bool EggTransform::has_transform(void) const;

1043 15 has_transform2d 4 1713 29 EggTransform::has_transform2d 0 1 177 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform2d(void) const;

1044 15 set_transform2d 4 1713 29 EggTransform::set_transform2d 0 1 178 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform2d(LMatrix3d const &mat);

1045 15 has_transform3d 4 1713 29 EggTransform::has_transform3d 0 1 179 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform3d(void) const;

1046 15 set_transform3d 4 1713 29 EggTransform::set_transform3d 0 1 180 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform3d(LMatrix4d const &mat);

1047 15 get_transform2d 4 1713 29 EggTransform::get_transform2d 0 1 181 348
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
////////////////////////////////////////////////////////////////////
59
inline LMatrix3d EggTransform::get_transform2d(void) const;

1048 15 get_transform3d 4 1713 29 EggTransform::get_transform3d 0 1 182 450
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggTransform::get_transform3d(void) const;

1049 21 transform_is_identity 4 1713 35 EggTransform::transform_is_identity 0 1 183 318
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool EggTransform::transform_is_identity(void) const;

1050 18 get_num_components 4 1713 32 EggTransform::get_num_components 0 1 184 306
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
////////////////////////////////////////////////////////////////////
56
inline int EggTransform::get_num_components(void) const;

1051 18 get_component_type 4 1713 32 EggTransform::get_component_type 0 1 185 267
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
////////////////////////////////////////////////////////////////////
81
inline EggTransform::ComponentType EggTransform::get_component_type(int n) const;

1052 20 get_component_number 4 1713 34 EggTransform::get_component_number 0 1 186 531
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
////////////////////////////////////////////////////////////////////
62
inline double EggTransform::get_component_number(int n) const;

1053 18 get_component_vec2 4 1713 32 EggTransform::get_component_vec2 0 1 187 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d const &EggTransform::get_component_vec2(int n) const;

1054 18 get_component_vec3 4 1713 32 EggTransform::get_component_vec3 0 1 188 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d const &EggTransform::get_component_vec3(int n) const;

1055 18 get_component_mat3 4 1713 32 EggTransform::get_component_mat3 0 1 189 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
////////////////////////////////////////////////////////////////////
70
inline LMatrix3d const &EggTransform::get_component_mat3(int n) const;

1056 18 get_component_mat4 4 1713 32 EggTransform::get_component_mat4 0 1 190 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const &EggTransform::get_component_mat4(int n) const;

1057 5 write 4 1713 19 EggTransform::write 0 1 191 292
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
////////////////////////////////////////////////////////////////////
63
void EggTransform::write(ostream &out, int indent_level) const;

1058 11 EggVertexUV 4 1715 24 EggVertexUV::EggVertexUV 0 3 192 193 194 681
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
79
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint2d const &uv);

1059 10 operator = 4 1715 23 EggVertexUV::operator = 0 1 195 237
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
EggVertexUV &EggVertexUV::operator =(EggVertexUV const &copy);

1060 8 set_name 4 1715 21 EggVertexUV::set_name 0 1 196 892
// Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggVertexUV::set_name(basic_string< char > const &name);

1061 18 get_num_dimensions 4 1715 31 EggVertexUV::get_num_dimensions 0 1 197 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
////////////////////////////////////////////////////////////////////
55
inline int EggVertexUV::get_num_dimensions(void) const;

1062 5 has_w 4 1715 18 EggVertexUV::has_w 0 1 198 369
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
////////////////////////////////////////////////////////////////////
43
inline bool EggVertexUV::has_w(void) const;

1063 6 get_uv 4 1715 19 EggVertexUV::get_uv 0 1 199 302
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertexUV::get_uv(void) const;

1064 7 get_uvw 4 1715 20 EggVertexUV::get_uvw 0 1 200 435
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
////////////////////////////////////////////////////////////////////
56
inline LPoint3d const &EggVertexUV::get_uvw(void) const;

1065 6 set_uv 4 1715 19 EggVertexUV::set_uv 0 1 201 372
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
////////////////////////////////////////////////////////////////////
58
inline void EggVertexUV::set_uv(LPoint2d const &texCoord);

1066 7 set_uvw 4 1715 20 EggVertexUV::set_uvw 0 1 202 333
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
////////////////////////////////////////////////////////////////////
59
inline void EggVertexUV::set_uvw(LPoint3d const &texCoord);

1067 11 has_tangent 4 1715 24 EggVertexUV::has_tangent 0 1 203 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggVertexUV::has_tangent(void) const;

1068 11 get_tangent 4 1715 24 EggVertexUV::get_tangent 0 1 204 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVector3d const &EggVertexUV::get_tangent(void) const;

1069 11 set_tangent 4 1715 24 EggVertexUV::set_tangent 0 1 205 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggVertexUV::set_tangent(LVector3d const &tangent);

1070 13 clear_tangent 4 1715 26 EggVertexUV::clear_tangent 0 1 206 225
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggVertexUV::clear_tangent(void);

1071 12 has_binormal 4 1715 25 EggVertexUV::has_binormal 0 1 207 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggVertexUV::has_binormal(void) const;

1072 12 get_binormal 4 1715 25 EggVertexUV::get_binormal 0 1 208 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggVertexUV::get_binormal(void) const;

1073 12 set_binormal 4 1715 25 EggVertexUV::set_binormal 0 1 209 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggVertexUV::set_binormal(LVector3d const &binormal);

1074 14 clear_binormal 4 1715 27 EggVertexUV::clear_binormal 0 1 210 226
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggVertexUV::clear_binormal(void);

1075 9 transform 4 1715 22 EggVertexUV::transform 0 1 211 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
////////////////////////////////////////////////////////////////////
50
void EggVertexUV::transform(LMatrix4d const &mat);

1076 5 write 4 1715 18 EggVertexUV::write 0 1 212 215
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
62
void EggVertexUV::write(ostream &out, int indent_level) const;

1077 10 compare_to 4 1715 23 EggVertexUV::compare_to 0 1 213 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
60
int EggVertexUV::compare_to(EggVertexUV const &other) const;

1078 8 get_duvs 20 1715 21 EggVertexUV::get_duvs 0 1 215 68
getter for EggMorphList< EggMorph< LVector3d > > EggVertexUV::_duvs;
79
EggMorphList< EggMorph< LVector3d > > const &EggVertexUV::get_duvs(void) const;

1079 14 get_class_type 4 1715 27 EggVertexUV::get_class_type 0 1 214 0
52
static TypeHandle EggVertexUV::get_class_type(void);

1080 19 upcast_to_EggObject 12 1716 30 EggVertex::upcast_to_EggObject 0 1 261 34
upcast from EggVertex to EggObject
48
EggObject *EggVertex::upcast_to_EggObject(void);

1081 21 downcast_to_EggVertex 12 1698 32 EggObject::downcast_to_EggVertex 0 1 262 36
downcast from EggObject to EggVertex
50
EggVertex *EggObject::downcast_to_EggVertex(void);

1082 23 upcast_to_EggAttributes 12 1716 34 EggVertex::upcast_to_EggAttributes 0 1 263 38
upcast from EggVertex to EggAttributes
56
EggAttributes *EggVertex::upcast_to_EggAttributes(void);

1083 21 downcast_to_EggVertex 12 1703 36 EggAttributes::downcast_to_EggVertex 0 1 264 40
downcast from EggAttributes to EggVertex
54
EggVertex *EggAttributes::downcast_to_EggVertex(void);

1084 9 EggVertex 4 1716 20 EggVertex::EggVertex 0 2 216 217 562
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
27
EggVertex::EggVertex(void);

1085 10 operator = 4 1716 21 EggVertex::operator = 0 1 218 347
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
56
EggVertex &EggVertex::operator =(EggVertex const &copy);

1086 10 ~EggVertex 4 1716 21 EggVertex::~EggVertex 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual EggVertex::~EggVertex(void);

1087 8 get_pool 4 1716 19 EggVertex::get_pool 0 1 219 1035
// Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
////////////////////////////////////////////////////////////////////
54
inline EggVertexPool *EggVertex::get_pool(void) const;

1088 20 is_forward_reference 4 1716 31 EggVertex::is_forward_reference 0 1 220 710
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
////////////////////////////////////////////////////////////////////
56
inline bool EggVertex::is_forward_reference(void) const;

1089 7 set_pos 4 1716 18 EggVertex::set_pos 0 4 221 222 223 224 1449
// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
////////////////////////////////////////////////////////////////////
43
inline void EggVertex::set_pos(double pos);

1090 8 set_pos4 4 1716 19 EggVertex::set_pos4 0 1 225 600
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
////////////////////////////////////////////////////////////////////
53
inline void EggVertex::set_pos4(LPoint4d const &pos);

1091 18 get_num_dimensions 4 1716 29 EggVertex::get_num_dimensions 0 1 226 721
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_dimensions
//       Access: Published
//  Description: Returns the number of dimensions the vertex uses.
//               Usually this will be 3, but it may be 1, 2, 3, or 4.
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_num_dimensions(void) const;

1092 8 get_pos1 4 1716 19 EggVertex::get_pos1 0 1 227 703
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
////////////////////////////////////////////////////////////////////
46
inline double EggVertex::get_pos1(void) const;

1093 8 get_pos2 4 1716 19 EggVertex::get_pos2 0 1 228 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertex::get_pos2(void) const;

1094 8 get_pos3 4 1716 19 EggVertex::get_pos3 0 1 229 332
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint3d EggVertex::get_pos3(void) const;

1095 8 get_pos4 4 1716 19 EggVertex::get_pos4 0 1 230 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
////////////////////////////////////////////////////////////////////
48
inline LPoint4d EggVertex::get_pos4(void) const;

1096 6 has_uv 4 1716 17 EggVertex::has_uv 0 2 231 232 922
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool EggVertex::has_uv(void) const;

1097 6 get_uv 4 1716 17 EggVertex::get_uv 0 2 233 234 977
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               vertex.  It is an error to call this if has_uv(name)
//               returned false.
////////////////////////////////////////////////////////////////////
46
inline LPoint2d EggVertex::get_uv(void) const;

1098 6 set_uv 4 1716 17 EggVertex::set_uv 0 2 235 236 965
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
////////////////////////////////////////////////////////////////////
56
inline void EggVertex::set_uv(LPoint2d const &texCoord);

1099 8 clear_uv 4 1716 19 EggVertex::clear_uv 0 2 237 238 583
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
///////////////////////////////////////////////////////////////////
38
inline void EggVertex::clear_uv(void);

1100 7 has_uvw 4 1716 18 EggVertex::has_uvw 0 1 239 374
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool EggVertex::has_uvw(basic_string< char > const &name) const;

1101 7 get_uvw 4 1716 18 EggVertex::get_uvw 0 1 240 375
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               vertex.  It is an error to call this if has_uvw(name)
//               returned false.
////////////////////////////////////////////////////////////////////
75
LPoint3d const &EggVertex::get_uvw(basic_string< char > const &name) const;

1102 7 set_uvw 4 1716 18 EggVertex::set_uvw 0 1 241 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
////////////////////////////////////////////////////////////////////
84
void EggVertex::set_uvw(basic_string< char > const &name, LPoint3d const &texCoord);

1103 10 get_uv_obj 4 1716 21 EggVertex::get_uv_obj 0 1 242 584
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
////////////////////////////////////////////////////////////////////
81
EggVertexUV const *EggVertex::get_uv_obj(basic_string< char > const &name) const;

1104 13 modify_uv_obj 4 1716 24 EggVertex::modify_uv_obj 0 1 243 462
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
////////////////////////////////////////////////////////////////////
72
EggVertexUV *EggVertex::modify_uv_obj(basic_string< char > const &name);

1105 10 set_uv_obj 4 1716 21 EggVertex::set_uv_obj 0 1 244 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
////////////////////////////////////////////////////////////////////
51
void EggVertex::set_uv_obj(EggVertexUV *vertex_uv);

1106 9 get_index 4 1716 20 EggVertex::get_index 0 1 245 292
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
////////////////////////////////////////////////////////////////////
44
inline int EggVertex::get_index(void) const;

1107 18 set_external_index 4 1716 29 EggVertex::set_external_index 0 1 246 822
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
////////////////////////////////////////////////////////////////////
62
inline void EggVertex::set_external_index(int external_index);

1108 18 get_external_index 4 1716 29 EggVertex::get_external_index 0 1 247 320
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_external_index(void) const;

1109 5 write 4 1716 16 EggVertex::write 0 1 248 296
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
60
void EggVertex::write(ostream &out, int indent_level) const;

1110 15 sorts_less_than 4 1716 26 EggVertex::sorts_less_than 0 1 249 1170
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
////////////////////////////////////////////////////////////////////
62
bool EggVertex::sorts_less_than(EggVertex const &other) const;

1111 19 get_num_local_coord 4 1716 30 EggVertex::get_num_local_coord 0 1 250 384
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
////////////////////////////////////////////////////////////////////
47
int EggVertex::get_num_local_coord(void) const;

1112 20 get_num_global_coord 4 1716 31 EggVertex::get_num_global_coord 0 1 251 382
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
////////////////////////////////////////////////////////////////////
48
int EggVertex::get_num_global_coord(void) const;

1113 9 transform 4 1716 20 EggVertex::transform 0 1 252 304
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::transform(LMatrix4d const &mat);

1114 8 has_gref 4 1716 19 EggVertex::has_gref 0 1 253 312
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
////////////////////////////////////////////////////////////////////
54
bool EggVertex::has_gref(EggGroup const *group) const;

1115 15 copy_grefs_from 4 1716 26 EggVertex::copy_grefs_from 0 1 254 725
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
////////////////////////////////////////////////////////////////////
56
void EggVertex::copy_grefs_from(EggVertex const &other);

1116 11 clear_grefs 4 1716 22 EggVertex::clear_grefs 0 1 255 325
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
////////////////////////////////////////////////////////////////////
34
void EggVertex::clear_grefs(void);

1117 8 has_pref 4 1716 19 EggVertex::has_pref 0 1 256 338
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
////////////////////////////////////////////////////////////////////
56
int EggVertex::has_pref(EggPrimitive const *prim) const;

1118 19 test_gref_integrity 4 1716 30 EggVertex::test_gref_integrity 0 1 257 379
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_gref_integrity
//       Access: Published
//  Description: Verifies that the gref list is correct and that all
//               the groups included actually exist and do reference
//               the vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::test_gref_integrity(void) const;

1119 19 test_pref_integrity 4 1716 30 EggVertex::test_pref_integrity 0 1 258 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_pref_integrity
//       Access: Published
//  Description: Verifies that the pref list is correct and that all
//               the primitives included actually exist and do
//               reference the vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::test_pref_integrity(void) const;

1120 6 output 4 1716 17 EggVertex::output 0 1 259 237
// NDEBUG

// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void EggVertex::output(ostream &out) const;

1121 9 get_dxyzs 20 1716 20 EggVertex::get_dxyzs 0 1 265 67
getter for EggMorphList< EggMorph< LVector3d > > EggVertex::_dxyzs;
78
EggMorphList< EggMorph< LVector3d > > const &EggVertex::get_dxyzs(void) const;

1122 14 get_class_type 4 1716 25 EggVertex::get_class_type 0 1 260 0
50
static TypeHandle EggVertex::get_class_type(void);

1123 9 make_copy 4 1717 29 EggSwitchCondition::make_copy 0 1 266 0
74
virtual EggSwitchCondition *EggSwitchCondition::make_copy(void) const = 0;

1124 5 write 4 1717 25 EggSwitchCondition::write 0 1 267 0
81
virtual void EggSwitchCondition::write(ostream &out, int indent_level) const = 0;

1125 9 transform 4 1717 29 EggSwitchCondition::transform 0 1 268 0
69
virtual void EggSwitchCondition::transform(LMatrix4d const &mat) = 0;

1126 14 get_class_type 4 1717 34 EggSwitchCondition::get_class_type 0 1 269 0
59
static TypeHandle EggSwitchCondition::get_class_type(void);

1127 19 ~EggSwitchCondition 4 1717 39 EggSwitchCondition::~EggSwitchCondition 0 0 0
46
EggSwitchCondition::~EggSwitchCondition(void);

1128 22 upcast_to_EggGroupNode 12 1718 32 EggGroup::upcast_to_EggGroupNode 0 1 389 36
upcast from EggGroup to EggGroupNode
53
EggGroupNode *EggGroup::upcast_to_EggGroupNode(void);

1129 20 downcast_to_EggGroup 12 1706 34 EggGroupNode::downcast_to_EggGroup 0 1 390 38
downcast from EggGroupNode to EggGroup
51
EggGroup *EggGroupNode::downcast_to_EggGroup(void);

1130 23 upcast_to_EggRenderMode 12 1718 33 EggGroup::upcast_to_EggRenderMode 0 1 391 37
upcast from EggGroup to EggRenderMode
55
EggRenderMode *EggGroup::upcast_to_EggRenderMode(void);

1131 20 downcast_to_EggGroup 12 1708 35 EggRenderMode::downcast_to_EggGroup 0 1 392 39
downcast from EggRenderMode to EggGroup
52
EggGroup *EggRenderMode::downcast_to_EggGroup(void);

1132 22 upcast_to_EggTransform 12 1718 32 EggGroup::upcast_to_EggTransform 0 1 393 36
upcast from EggGroup to EggTransform
53
EggTransform *EggGroup::upcast_to_EggTransform(void);

1133 20 downcast_to_EggGroup 12 1713 34 EggTransform::downcast_to_EggGroup 0 1 394 38
downcast from EggTransform to EggGroup
51
EggGroup *EggTransform::downcast_to_EggGroup(void);

1134 8 EggGroup 4 1718 18 EggGroup::EggGroup 0 3 270 271 272 447
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
EggGroup::EggGroup(basic_string< char > const &name = (""));

1135 10 operator = 4 1718 20 EggGroup::operator = 0 1 273 233
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
EggGroup &EggGroup::operator =(EggGroup const &copy);

1136 9 ~EggGroup 4 1718 19 EggGroup::~EggGroup 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual EggGroup::~EggGroup(void);

1137 5 write 4 1718 15 EggGroup::write 0 1 274 327
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
////////////////////////////////////////////////////////////////////
67
virtual void EggGroup::write(ostream &out, int indent_level) const;

1138 21 write_billboard_flags 4 1718 31 EggGroup::write_billboard_flags 0 1 275 326
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
75
void EggGroup::write_billboard_flags(ostream &out, int indent_level) const;

1139 19 write_collide_flags 4 1718 29 EggGroup::write_collide_flags 0 1 276 322
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
73
void EggGroup::write_collide_flags(ostream &out, int indent_level) const;

1140 17 write_model_flags 4 1718 27 EggGroup::write_model_flags 0 1 277 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_model_flags(ostream &out, int indent_level) const;

1141 18 write_switch_flags 4 1718 28 EggGroup::write_switch_flags 0 1 278 313
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_switch_flags(ostream &out, int indent_level) const;

1142 18 write_object_types 4 1718 28 EggGroup::write_object_types 0 1 279 317
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_object_types(ostream &out, int indent_level) const;

1143 17 write_decal_flags 4 1718 27 EggGroup::write_decal_flags 0 1 280 272
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_decal_flags(ostream &out, int indent_level) const;

1144 10 write_tags 4 1718 20 EggGroup::write_tags 0 1 281 301
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
64
void EggGroup::write_tags(ostream &out, int indent_level) const;

1145 17 write_render_mode 4 1718 27 EggGroup::write_render_mode 0 1 282 344
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_render_mode(ostream &out, int indent_level) const;

1146 8 is_joint 4 1718 18 EggGroup::is_joint 0 1 283 508
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
44
virtual bool EggGroup::is_joint(void) const;

1147 20 determine_alpha_mode 4 1718 30 EggGroup::determine_alpha_mode 0 1 284 554
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_alpha_mode(void);

1148 26 determine_depth_write_mode 4 1718 36 EggGroup::determine_depth_write_mode 0 1 285 566
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggGroup::determine_depth_write_mode(void);

1149 25 determine_depth_test_mode 4 1718 35 EggGroup::determine_depth_test_mode 0 1 286 564
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_depth_test_mode(void);

1150 25 determine_visibility_mode 4 1718 35 EggGroup::determine_visibility_mode 0 1 287 563
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_visibility_mode(void);

1151 20 determine_draw_order 4 1718 30 EggGroup::determine_draw_order 0 1 288 536
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_draw_order(void);

1152 13 determine_bin 4 1718 23 EggGroup::determine_bin 0 1 289 523
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
53
virtual EggRenderMode *EggGroup::determine_bin(void);

1153 17 determine_indexed 4 1718 27 EggGroup::determine_indexed 0 1 290 619
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool EggGroup::determine_indexed(void);

1154 15 determine_decal 4 1718 25 EggGroup::determine_decal 0 1 291 607
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
45
virtual bool EggGroup::determine_decal(void);

1155 14 set_group_type 4 1718 24 EggGroup::set_group_type 0 1 292 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void EggGroup::set_group_type(EggGroup::GroupType type);

1156 14 get_group_type 4 1718 24 EggGroup::get_group_type 0 1 293 895
// Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::GroupType EggGroup::get_group_type(void) const;

1157 16 is_instance_type 4 1718 26 EggGroup::is_instance_type 0 1 294 668
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::is_instance_type(void) const;

1158 18 set_billboard_type 4 1718 28 EggGroup::set_billboard_type 0 1 295 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_billboard_type(EggGroup::BillboardType type);

1159 18 get_billboard_type 4 1718 28 EggGroup::get_billboard_type 0 1 296 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BillboardType EggGroup::get_billboard_type(void) const;

1160 20 set_billboard_center 4 1718 30 EggGroup::set_billboard_center 0 1 297 1120
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
////////////////////////////////////////////////////////////////////
77
inline void EggGroup::set_billboard_center(LPoint3d const &billboard_center);

1161 22 clear_billboard_center 4 1718 32 EggGroup::clear_billboard_center 0 1 298 231
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_billboard_center(void);

1162 20 has_billboard_center 4 1718 30 EggGroup::has_billboard_center 0 1 299 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_billboard_center(void) const;

1163 20 get_billboard_center 4 1718 30 EggGroup::get_billboard_center 0 1 300 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LPoint3d const &EggGroup::get_billboard_center(void) const;

1164 11 set_cs_type 4 1718 21 EggGroup::set_cs_type 0 1 301 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_cs_type(EggGroup::CollisionSolidType type);

1165 11 get_cs_type 4 1718 21 EggGroup::get_cs_type 0 1 302 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollisionSolidType EggGroup::get_cs_type(void) const;

1166 17 set_collide_flags 4 1718 27 EggGroup::set_collide_flags 0 1 303 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_collide_flags(int flags);

1167 17 get_collide_flags 4 1718 27 EggGroup::get_collide_flags 0 1 304 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollideFlags EggGroup::get_collide_flags(void) const;

1168 18 set_collision_name 4 1718 28 EggGroup::set_collision_name 0 1 305 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
inline void EggGroup::set_collision_name(basic_string< char > const &collision_name);

1169 20 clear_collision_name 4 1718 30 EggGroup::clear_collision_name 0 1 306 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::clear_collision_name(void);

1170 18 has_collision_name 4 1718 28 EggGroup::has_collision_name 0 1 307 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::has_collision_name(void) const;

1171 18 get_collision_name 4 1718 28 EggGroup::get_collision_name 0 1 308 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggGroup::get_collision_name(void) const;

1172 12 set_dcs_type 4 1718 22 EggGroup::set_dcs_type 0 1 309 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggGroup::set_dcs_type(EggGroup::DCSType type);

1173 12 get_dcs_type 4 1718 22 EggGroup::get_dcs_type 0 1 310 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggGroup::DCSType EggGroup::get_dcs_type(void) const;

1174 12 has_dcs_type 4 1718 22 EggGroup::has_dcs_type 0 1 311 316
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
////////////////////////////////////////////////////////////////////
47
inline bool EggGroup::has_dcs_type(void) const;

1175 13 set_dart_type 4 1718 23 EggGroup::set_dart_type 0 1 312 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_dart_type(EggGroup::DartType type);

1176 13 get_dart_type 4 1718 23 EggGroup::get_dart_type 0 1 313 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggGroup::DartType EggGroup::get_dart_type(void) const;

1177 15 set_switch_flag 4 1718 25 EggGroup::set_switch_flag 0 1 314 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_flag(bool flag);

1178 15 get_switch_flag 4 1718 25 EggGroup::get_switch_flag 0 1 315 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_switch_flag(void) const;

1179 14 set_switch_fps 4 1718 24 EggGroup::set_switch_fps 0 1 316 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_fps(double fps);

1180 14 get_switch_fps 4 1718 24 EggGroup::get_switch_fps 0 1 317 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double EggGroup::get_switch_fps(void) const;

1181 15 add_object_type 4 1718 25 EggGroup::add_object_type 0 1 318 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggGroup::add_object_type(basic_string< char > const &object_type);

1182 18 clear_object_types 4 1718 28 EggGroup::clear_object_types 0 1 319 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_object_types(void);

1183 20 get_num_object_types 4 1718 30 EggGroup::get_num_object_types 0 1 320 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline int EggGroup::get_num_object_types(void) const;

1184 15 get_object_type 4 1718 25 EggGroup::get_object_type 0 1 321 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > EggGroup::get_object_type(int index) const;

1185 15 has_object_type 4 1718 25 EggGroup::has_object_type 0 1 322 332
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
////////////////////////////////////////////////////////////////////
78
bool EggGroup::has_object_type(basic_string< char > const &object_type) const;

1186 18 remove_object_type 4 1718 28 EggGroup::remove_object_type 0 1 323 440
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
////////////////////////////////////////////////////////////////////
75
bool EggGroup::remove_object_type(basic_string< char > const &object_type);

1187 14 set_model_flag 4 1718 24 EggGroup::set_model_flag 0 1 324 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_model_flag(bool flag);

1188 14 get_model_flag 4 1718 24 EggGroup::get_model_flag 0 1 325 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_model_flag(void) const;

1189 16 set_texlist_flag 4 1718 26 EggGroup::set_texlist_flag 0 1 326 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_texlist_flag(bool flag);

1190 16 get_texlist_flag 4 1718 26 EggGroup::get_texlist_flag 0 1 327 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_texlist_flag(void) const;

1191 14 set_nofog_flag 4 1718 24 EggGroup::set_nofog_flag 0 1 328 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_nofog_flag(bool flag);

1192 14 get_nofog_flag 4 1718 24 EggGroup::get_nofog_flag 0 1 329 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_nofog_flag(void) const;

1193 14 set_decal_flag 4 1718 24 EggGroup::set_decal_flag 0 1 330 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_decal_flag(bool flag);

1194 14 get_decal_flag 4 1718 24 EggGroup::get_decal_flag 0 1 331 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_decal_flag(void) const;

1195 15 set_direct_flag 4 1718 25 EggGroup::set_direct_flag 0 1 332 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_direct_flag(bool flag);

1196 15 get_direct_flag 4 1718 25 EggGroup::get_direct_flag 0 1 333 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_direct_flag(void) const;

1197 15 set_portal_flag 4 1718 25 EggGroup::set_portal_flag 0 1 334 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_portal_flag(bool flag);

1198 15 get_portal_flag 4 1718 25 EggGroup::get_portal_flag 0 1 335 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_portal_flag(void) const;

1199 18 set_polylight_flag 4 1718 28 EggGroup::set_polylight_flag 0 1 336 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::set_polylight_flag(bool flag);

1200 18 get_polylight_flag 4 1718 28 EggGroup::get_polylight_flag 0 1 337 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::get_polylight_flag(void) const;

1201 16 set_indexed_flag 4 1718 26 EggGroup::set_indexed_flag 0 1 338 335
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_indexed_flag(bool flag);

1202 18 clear_indexed_flag 4 1718 28 EggGroup::clear_indexed_flag 0 1 339 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_indexed_flag(void);

1203 16 has_indexed_flag 4 1718 26 EggGroup::has_indexed_flag 0 1 340 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_indexed_flag(void) const;

1204 16 get_indexed_flag 4 1718 26 EggGroup::get_indexed_flag 0 1 341 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_indexed_flag(void) const;

1205 16 set_collide_mask 4 1718 26 EggGroup::set_collide_mask 0 1 342 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggGroup::set_collide_mask(BitMask< unsigned int, 32 > mask);

1206 18 clear_collide_mask 4 1718 28 EggGroup::clear_collide_mask 0 1 343 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_collide_mask(void);

1207 16 has_collide_mask 4 1718 26 EggGroup::has_collide_mask 0 1 344 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_collide_mask(void) const;

1208 16 get_collide_mask 4 1718 26 EggGroup::get_collide_mask 0 1 345 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > EggGroup::get_collide_mask(void) const;

1209 21 set_from_collide_mask 4 1718 31 EggGroup::set_from_collide_mask 0 1 346 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_from_collide_mask(BitMask< unsigned int, 32 > mask);

1210 23 clear_from_collide_mask 4 1718 33 EggGroup::clear_from_collide_mask 0 1 347 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_from_collide_mask(void);

1211 21 has_from_collide_mask 4 1718 31 EggGroup::has_from_collide_mask 0 1 348 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_from_collide_mask(void) const;

1212 21 get_from_collide_mask 4 1718 31 EggGroup::get_from_collide_mask 0 1 349 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_from_collide_mask(void) const;

1213 21 set_into_collide_mask 4 1718 31 EggGroup::set_into_collide_mask 0 1 350 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

1214 23 clear_into_collide_mask 4 1718 33 EggGroup::clear_into_collide_mask 0 1 351 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_into_collide_mask(void);

1215 21 has_into_collide_mask 4 1718 31 EggGroup::has_into_collide_mask 0 1 352 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_into_collide_mask(void) const;

1216 21 get_into_collide_mask 4 1718 31 EggGroup::get_into_collide_mask 0 1 353 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_into_collide_mask(void) const;

1217 14 set_blend_mode 4 1718 24 EggGroup::set_blend_mode 0 1 354 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_mode(EggGroup::BlendMode blend_mode);

1218 14 get_blend_mode 4 1718 24 EggGroup::get_blend_mode 0 1 355 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::BlendMode EggGroup::get_blend_mode(void) const;

1219 19 set_blend_operand_a 4 1718 29 EggGroup::set_blend_operand_a 0 1 356 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_a(EggGroup::BlendOperand blend_operand_a);

1220 19 get_blend_operand_a 4 1718 29 EggGroup::get_blend_operand_a 0 1 357 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_a(void) const;

1221 19 set_blend_operand_b 4 1718 29 EggGroup::set_blend_operand_b 0 1 358 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_b(EggGroup::BlendOperand blend_operand_b);

1222 19 get_blend_operand_b 4 1718 29 EggGroup::get_blend_operand_b 0 1 359 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_b(void) const;

1223 15 set_blend_color 4 1718 25 EggGroup::set_blend_color 0 1 360 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_color(LVecBase4f const &blend_color);

1224 17 clear_blend_color 4 1718 27 EggGroup::clear_blend_color 0 1 361 265
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
////////////////////////////////////////////////////////////////////
46
inline void EggGroup::clear_blend_color(void);

1225 15 has_blend_color 4 1718 25 EggGroup::has_blend_color 0 1 362 310
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::has_blend_color(void) const;

1226 15 get_blend_color 4 1718 25 EggGroup::get_blend_color 0 1 363 324
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
////////////////////////////////////////////////////////////////////
63
inline LVecBase4f const &EggGroup::get_blend_color(void) const;

1227 7 set_lod 4 1718 17 EggGroup::set_lod 0 1 364 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_lod(EggSwitchCondition const &lod);

1228 9 clear_lod 4 1718 19 EggGroup::clear_lod 0 1 365 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline void EggGroup::clear_lod(void);

1229 7 has_lod 4 1718 17 EggGroup::has_lod 0 1 366 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool EggGroup::has_lod(void) const;

1230 7 get_lod 4 1718 17 EggGroup::get_lod 0 1 367 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline EggSwitchCondition const &EggGroup::get_lod(void) const;

1231 7 set_tag 4 1718 17 EggGroup::set_tag 0 1 368 878
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void EggGroup::set_tag(basic_string< char > const &key, basic_string< char > const &value);

1232 7 get_tag 4 1718 17 EggGroup::get_tag 0 1 369 433
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > EggGroup::get_tag(basic_string< char > const &key) const;

1233 7 has_tag 4 1718 17 EggGroup::has_tag 0 1 370 404
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
69
inline bool EggGroup::has_tag(basic_string< char > const &key) const;

1234 9 clear_tag 4 1718 19 EggGroup::clear_tag 0 1 371 397
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::clear_tag(basic_string< char > const &key);

1235 10 ref_vertex 4 1718 20 EggGroup::ref_vertex 0 2 372 373 467
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
////////////////////////////////////////////////////////////////////
68
void EggGroup::ref_vertex(EggVertex *vert, double membership = (1));

1236 12 unref_vertex 4 1718 22 EggGroup::unref_vertex 0 1 374 372
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
////////////////////////////////////////////////////////////////////
45
void EggGroup::unref_vertex(EggVertex *vert);

1237 18 unref_all_vertices 4 1718 28 EggGroup::unref_all_vertices 0 1 375 273
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
////////////////////////////////////////////////////////////////////
40
void EggGroup::unref_all_vertices(void);

1238 21 get_vertex_membership 4 1718 31 EggGroup::get_vertex_membership 0 1 376 390
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
////////////////////////////////////////////////////////////////////
68
double EggGroup::get_vertex_membership(EggVertex const *vert) const;

1239 21 set_vertex_membership 4 1718 31 EggGroup::set_vertex_membership 0 1 377 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
////////////////////////////////////////////////////////////////////
73
void EggGroup::set_vertex_membership(EggVertex *vert, double membership);

1240 11 steal_vrefs 4 1718 21 EggGroup::steal_vrefs 0 1 378 450
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
////////////////////////////////////////////////////////////////////
44
void EggGroup::steal_vrefs(EggGroup *other);

1241 19 test_vref_integrity 4 1718 29 EggGroup::test_vref_integrity 0 1 379 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the group exists and
//               that it knows it is referenced by the group.
////////////////////////////////////////////////////////////////////
47
void EggGroup::test_vref_integrity(void) const;

1242 17 string_group_type 4 1718 27 EggGroup::string_group_type 0 1 380 436
// NDEBUG

// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
////////////////////////////////////////////////////////////////////
91
static EggGroup::GroupType EggGroup::string_group_type(basic_string< char > const &strval);

1243 16 string_dart_type 4 1718 26 EggGroup::string_dart_type 0 1 381 409
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
////////////////////////////////////////////////////////////////////
89
static EggGroup::DartType EggGroup::string_dart_type(basic_string< char > const &strval);

1244 15 string_dcs_type 4 1718 25 EggGroup::string_dcs_type 0 1 382 413
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
////////////////////////////////////////////////////////////////////
87
static EggGroup::DCSType EggGroup::string_dcs_type(basic_string< char > const &strval);

1245 21 string_billboard_type 4 1718 31 EggGroup::string_billboard_type 0 1 383 424
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
////////////////////////////////////////////////////////////////////
99
static EggGroup::BillboardType EggGroup::string_billboard_type(basic_string< char > const &strval);

1246 14 string_cs_type 4 1718 24 EggGroup::string_cs_type 0 1 384 428
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollisionSolidType EggGroup::string_cs_type(basic_string< char > const &strval);

1247 20 string_collide_flags 4 1718 30 EggGroup::string_collide_flags 0 1 385 546
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollideFlags EggGroup::string_collide_flags(basic_string< char > const &strval);

1248 17 string_blend_mode 4 1718 27 EggGroup::string_blend_mode 0 1 386 406
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
////////////////////////////////////////////////////////////////////
91
static EggGroup::BlendMode EggGroup::string_blend_mode(basic_string< char > const &strval);

1249 20 string_blend_operand 4 1718 30 EggGroup::string_blend_operand 0 1 387 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
////////////////////////////////////////////////////////////////////
97
static EggGroup::BlendOperand EggGroup::string_blend_operand(basic_string< char > const &strval);

1250 14 get_class_type 4 1718 24 EggGroup::get_class_type 0 1 388 0
49
static TypeHandle EggGroup::get_class_type(void);

1251 6 EggBin 4 1727 14 EggBin::EggBin 0 4 395 396 397 398 668
////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
EggBin::EggBin(basic_string< char > const &name = (""));

1252 14 set_bin_number 4 1727 22 EggBin::set_bin_number 0 1 399 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void EggBin::set_bin_number(int bin_number);

1253 14 get_bin_number 4 1727 22 EggBin::get_bin_number 0 1 400 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
int EggBin::get_bin_number(void) const;

1254 14 get_class_type 4 1727 22 EggBin::get_class_type 0 1 401 0
47
static TypeHandle EggBin::get_class_type(void);

1255 7 ~EggBin 4 1727 15 EggBin::~EggBin 0 0 0
22
EggBin::~EggBin(void);

1256 9 make_bins 4 1728 22 EggBinMaker::make_bins 0 1 402 460
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
////////////////////////////////////////////////////////////////////
53
int EggBinMaker::make_bins(EggGroupNode *root_group);

1257 12 prepare_node 4 1728 25 EggBinMaker::prepare_node 0 1 403 419
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
////////////////////////////////////////////////////////////////////
54
virtual void EggBinMaker::prepare_node(EggNode *node);

1258 14 get_bin_number 4 1728 27 EggBinMaker::get_bin_number 0 1 404 0
65
virtual int EggBinMaker::get_bin_number(EggNode const *node) = 0;

1259 10 sorts_less 4 1728 23 EggBinMaker::sorts_less 0 1 405 669
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
////////////////////////////////////////////////////////////////////
89
virtual bool EggBinMaker::sorts_less(int bin_number, EggNode const *a, EggNode const *b);

1260 14 collapse_group 4 1728 27 EggBinMaker::collapse_group 0 1 406 398
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
////////////////////////////////////////////////////////////////////
80
virtual bool EggBinMaker::collapse_group(EggGroup const *group, int bin_number);

1261 12 get_bin_name 4 1728 25 EggBinMaker::get_bin_name 0 1 407 381
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
////////////////////////////////////////////////////////////////////
93
virtual basic_string< char > EggBinMaker::get_bin_name(int bin_number, EggNode const *child);

1262 8 make_bin 4 1728 21 EggBinMaker::make_bin 0 1 408 655
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
////////////////////////////////////////////////////////////////////
113
virtual PointerTo< EggBin > EggBinMaker::make_bin(int bin_number, EggNode const *child, EggGroup *collapse_from);

1263 14 get_class_type 4 1728 27 EggBinMaker::get_class_type 0 1 409 0
52
static TypeHandle EggBinMaker::get_class_type(void);

1264 10 EggComment 4 1729 22 EggComment::EggComment 0 2 410 411 1119
// Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
106
inline EggComment::EggComment(basic_string< char > const &node_name, basic_string< char > const &comment);

1265 10 operator = 4 1729 22 EggComment::operator = 0 2 412 413 545
// You can use the string operators to directly set and manipulate
// the comment.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline EggComment &EggComment::operator =(basic_string< char > const &comment);

1266 17 operator typecast 4 1729 29 EggComment::operator typecast 0 1 417 232
////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &EggComment::operator typecast(void) const;

1267 11 set_comment 4 1729 23 EggComment::set_comment 0 1 414 262
// Or, you can set and get it explicitly.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggComment::set_comment(basic_string< char > const &comment);

1268 11 get_comment 4 1729 23 EggComment::get_comment 0 1 415 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > EggComment::get_comment(void) const;

1269 14 get_class_type 4 1729 26 EggComment::get_class_type 0 1 416 0
51
static TypeHandle EggComment::get_class_type(void);

1270 11 ~EggComment 4 1729 23 EggComment::~EggComment 0 0 0
30
EggComment::~EggComment(void);

1271 10 operator = 4 1730 27 EggFilenameNode::operator = 0 1 418 237
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggFilenameNode &EggFilenameNode::operator =(EggFilenameNode const &copy);

1272 21 get_default_extension 4 1730 38 EggFilenameNode::get_default_extension 0 1 419 297
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
////////////////////////////////////////////////////////////////////
80
virtual basic_string< char > EggFilenameNode::get_default_extension(void) const;

1273 12 get_filename 4 1730 29 EggFilenameNode::get_filename 0 1 420 276
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_filename(void) const;

1274 12 set_filename 4 1730 29 EggFilenameNode::set_filename 0 1 421 225
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_filename(Filename const &filename);

1275 12 get_fullpath 4 1730 29 EggFilenameNode::get_fullpath 0 1 422 822
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_fullpath(void) const;

1276 12 set_fullpath 4 1730 29 EggFilenameNode::set_fullpath 0 1 423 316
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_fullpath(Filename const &fullpath);

1277 14 get_class_type 4 1730 31 EggFilenameNode::get_class_type 0 1 424 0
56
static TypeHandle EggFilenameNode::get_class_type(void);

1278 16 ~EggFilenameNode 4 1730 33 EggFilenameNode::~EggFilenameNode 0 0 0
40
EggFilenameNode::~EggFilenameNode(void);

1279 25 upcast_to_EggFilenameNode 12 1731 37 EggTexture::upcast_to_EggFilenameNode 0 1 524 41
upcast from EggTexture to EggFilenameNode
61
EggFilenameNode *EggTexture::upcast_to_EggFilenameNode(void);

1280 22 downcast_to_EggTexture 12 1730 39 EggFilenameNode::downcast_to_EggTexture 0 1 525 43
downcast from EggFilenameNode to EggTexture
58
EggTexture *EggFilenameNode::downcast_to_EggTexture(void);

1281 23 upcast_to_EggRenderMode 12 1731 35 EggTexture::upcast_to_EggRenderMode 0 1 526 39
upcast from EggTexture to EggRenderMode
57
EggRenderMode *EggTexture::upcast_to_EggRenderMode(void);

1282 22 downcast_to_EggTexture 12 1708 37 EggRenderMode::downcast_to_EggTexture 0 1 527 41
downcast from EggRenderMode to EggTexture
56
EggTexture *EggRenderMode::downcast_to_EggTexture(void);

1283 22 upcast_to_EggTransform 12 1731 34 EggTexture::upcast_to_EggTransform 0 1 528 38
upcast from EggTexture to EggTransform
55
EggTransform *EggTexture::upcast_to_EggTransform(void);

1284 22 downcast_to_EggTexture 12 1713 36 EggTransform::downcast_to_EggTexture 0 1 529 40
downcast from EggTransform to EggTexture
55
EggTexture *EggTransform::downcast_to_EggTexture(void);

1285 10 EggTexture 4 1731 22 EggTexture::EggTexture 0 2 425 426 451
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
100
EggTexture::EggTexture(basic_string< char > const &tref_name, basic_string< char > const &filename);

1286 10 operator = 4 1731 22 EggTexture::operator = 0 1 427 235
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
EggTexture &EggTexture::operator =(EggTexture const &copy);

1287 11 ~EggTexture 4 1731 23 EggTexture::~EggTexture 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual EggTexture::~EggTexture(void);

1288 5 write 4 1731 17 EggTexture::write 0 1 428 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
////////////////////////////////////////////////////////////////////
69
virtual void EggTexture::write(ostream &out, int indent_level) const;

1289 16 is_equivalent_to 4 1731 28 EggTexture::is_equivalent_to 0 1 429 1471
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
////////////////////////////////////////////////////////////////////
73
bool EggTexture::is_equivalent_to(EggTexture const &other, int eq) const;

1290 15 sorts_less_than 4 1731 27 EggTexture::sorts_less_than 0 1 430 502
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
72
bool EggTexture::sorts_less_than(EggTexture const &other, int eq) const;

1291 17 has_alpha_channel 4 1731 29 EggTexture::has_alpha_channel 0 1 431 537
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
////////////////////////////////////////////////////////////////////
61
bool EggTexture::has_alpha_channel(int num_components) const;

1292 16 set_texture_type 4 1731 28 EggTexture::set_texture_type 0 1 432 901
// Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_texture_type(EggTexture::TextureType texture_type);

1293 16 get_texture_type 4 1731 28 EggTexture::get_texture_type 0 1 433 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggTexture::TextureType EggTexture::get_texture_type(void) const;

1294 10 set_format 4 1731 22 EggTexture::set_format 0 1 434 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_format(EggTexture::Format format);

1295 10 get_format 4 1731 22 EggTexture::get_format 0 1 435 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline EggTexture::Format EggTexture::get_format(void) const;

1296 20 set_compression_mode 4 1731 32 EggTexture::set_compression_mode 0 1 436 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_compression_mode(EggTexture::CompressionMode mode);

1297 20 get_compression_mode 4 1731 32 EggTexture::get_compression_mode 0 1 437 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline EggTexture::CompressionMode EggTexture::get_compression_mode(void) const;

1298 13 set_wrap_mode 4 1731 25 EggTexture::set_wrap_mode 0 1 438 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_wrap_mode(EggTexture::WrapMode mode);

1299 13 get_wrap_mode 4 1731 25 EggTexture::get_wrap_mode 0 1 439 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggTexture::WrapMode EggTexture::get_wrap_mode(void) const;

1300 10 set_wrap_u 4 1731 22 EggTexture::set_wrap_u 0 1 440 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_u(EggTexture::WrapMode mode);

1301 10 get_wrap_u 4 1731 22 EggTexture::get_wrap_u 0 1 441 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_u(void) const;

1302 16 determine_wrap_u 4 1731 28 EggTexture::determine_wrap_u 0 1 442 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_u(void) const;

1303 10 set_wrap_v 4 1731 22 EggTexture::set_wrap_v 0 1 443 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_v(EggTexture::WrapMode mode);

1304 10 get_wrap_v 4 1731 22 EggTexture::get_wrap_v 0 1 444 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_v(void) const;

1305 16 determine_wrap_v 4 1731 28 EggTexture::determine_wrap_v 0 1 445 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_v(void) const;

1306 10 set_wrap_w 4 1731 22 EggTexture::set_wrap_w 0 1 446 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_w(EggTexture::WrapMode mode);

1307 10 get_wrap_w 4 1731 22 EggTexture::get_wrap_w 0 1 447 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_w(void) const;

1308 16 determine_wrap_w 4 1731 28 EggTexture::determine_wrap_w 0 1 448 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_w(void) const;

1309 13 set_minfilter 4 1731 25 EggTexture::set_minfilter 0 1 449 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_minfilter(EggTexture::FilterType type);

1310 13 get_minfilter 4 1731 25 EggTexture::get_minfilter 0 1 450 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_minfilter(void) const;

1311 13 set_magfilter 4 1731 25 EggTexture::set_magfilter 0 1 451 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_magfilter(EggTexture::FilterType type);

1312 13 get_magfilter 4 1731 25 EggTexture::get_magfilter 0 1 452 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_magfilter(void) const;

1313 22 set_anisotropic_degree 4 1731 34 EggTexture::set_anisotropic_degree 0 1 453 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_anisotropic_degree(int anisotropic_degree);

1314 24 clear_anisotropic_degree 4 1731 36 EggTexture::clear_anisotropic_degree 0 1 454 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_anisotropic_degree(void);

1315 22 has_anisotropic_degree 4 1731 34 EggTexture::has_anisotropic_degree 0 1 455 382
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_anisotropic_degree(void) const;

1316 22 get_anisotropic_degree 4 1731 34 EggTexture::get_anisotropic_degree 0 1 456 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_anisotropic_degree(void) const;

1317 12 set_env_type 4 1731 24 EggTexture::set_env_type 0 1 457 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTexture::set_env_type(EggTexture::EnvType type);

1318 12 get_env_type 4 1731 24 EggTexture::get_env_type 0 1 458 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTexture::EnvType EggTexture::get_env_type(void) const;

1319 21 affects_polygon_alpha 4 1731 33 EggTexture::affects_polygon_alpha 0 1 459 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an affect on
//               the polygon's alpha values, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool EggTexture::affects_polygon_alpha(void) const;

1320 16 set_combine_mode 4 1731 28 EggTexture::set_combine_mode 0 1 460 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
105
inline void EggTexture::set_combine_mode(EggTexture::CombineChannel channel, EggTexture::CombineMode cm);

1321 16 get_combine_mode 4 1731 28 EggTexture::get_combine_mode 0 1 461 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
inline EggTexture::CombineMode EggTexture::get_combine_mode(EggTexture::CombineChannel channel) const;

1322 18 set_combine_source 4 1731 30 EggTexture::set_combine_source 0 1 462 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline void EggTexture::set_combine_source(EggTexture::CombineChannel channel, int n, EggTexture::CombineSource cs);

1323 18 get_combine_source 4 1731 30 EggTexture::get_combine_source 0 1 463 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
113
inline EggTexture::CombineSource EggTexture::get_combine_source(EggTexture::CombineChannel channel, int n) const;

1324 19 set_combine_operand 4 1731 31 EggTexture::set_combine_operand 0 1 464 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline void EggTexture::set_combine_operand(EggTexture::CombineChannel channel, int n, EggTexture::CombineOperand co);

1325 19 get_combine_operand 4 1731 31 EggTexture::get_combine_operand 0 1 465 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
115
inline EggTexture::CombineOperand EggTexture::get_combine_operand(EggTexture::CombineChannel channel, int n) const;

1326 16 set_saved_result 4 1731 28 EggTexture::set_saved_result 0 1 466 1011
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_saved_result(bool saved_result);

1327 16 get_saved_result 4 1731 28 EggTexture::get_saved_result 0 1 467 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_saved_result(void) const;

1328 11 set_tex_gen 4 1731 23 EggTexture::set_tex_gen 0 1 468 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggTexture::set_tex_gen(EggTexture::TexGen tex_gen);

1329 11 get_tex_gen 4 1731 23 EggTexture::get_tex_gen 0 1 469 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggTexture::TexGen EggTexture::get_tex_gen(void) const;

1330 14 set_stage_name 4 1731 26 EggTexture::set_stage_name 0 1 470 778
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_stage_name(basic_string< char > const &stage_name);

1331 16 clear_stage_name 4 1731 28 EggTexture::clear_stage_name 0 1 471 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
////////////////////////////////////////////////////////////////////
47
inline void EggTexture::clear_stage_name(void);

1332 14 has_stage_name 4 1731 26 EggTexture::has_stage_name 0 1 472 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggTexture::has_stage_name(void) const;

1333 14 get_stage_name 4 1731 26 EggTexture::get_stage_name 0 1 473 392
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &EggTexture::get_stage_name(void) const;

1334 12 set_priority 4 1731 24 EggTexture::set_priority 0 1 474 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::set_priority(int priority);

1335 14 clear_priority 4 1731 26 EggTexture::clear_priority 0 1 475 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_priority(void);

1336 12 has_priority 4 1731 24 EggTexture::has_priority 0 1 476 371
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_priority(void) const;

1337 12 get_priority 4 1731 24 EggTexture::get_priority 0 1 477 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
////////////////////////////////////////////////////////////////////
48
inline int EggTexture::get_priority(void) const;

1338 9 set_color 4 1731 21 EggTexture::set_color 0 1 478 220
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggTexture::set_color(LVecBase4f const &color);

1339 11 clear_color 4 1731 23 EggTexture::clear_color 0 1 479 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggTexture::clear_color(void);

1340 9 has_color 4 1731 21 EggTexture::has_color 0 1 480 303
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
46
inline bool EggTexture::has_color(void) const;

1341 9 get_color 4 1731 21 EggTexture::get_color 0 1 481 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &EggTexture::get_color(void) const;

1342 16 set_border_color 4 1731 28 EggTexture::set_border_color 0 1 482 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_border_color(LVecBase4f const &border_color);

1343 18 clear_border_color 4 1731 30 EggTexture::clear_border_color 0 1 483 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggTexture::clear_border_color(void);

1344 16 has_border_color 4 1731 28 EggTexture::has_border_color 0 1 484 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::has_border_color(void) const;

1345 16 get_border_color 4 1731 28 EggTexture::get_border_color 0 1 485 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f const &EggTexture::get_border_color(void) const;

1346 11 set_uv_name 4 1731 23 EggTexture::set_uv_name 0 1 486 593
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_uv_name(basic_string< char > const &uv_name);

1347 13 clear_uv_name 4 1731 25 EggTexture::clear_uv_name 0 1 487 398
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_uv_name(void);

1348 11 has_uv_name 4 1731 23 EggTexture::has_uv_name 0 1 488 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_uv_name(void) const;

1349 11 get_uv_name 4 1731 23 EggTexture::get_uv_name 0 1 489 395
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > const &EggTexture::get_uv_name(void) const;

1350 13 set_rgb_scale 4 1731 25 EggTexture::set_rgb_scale 0 1 490 493
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_rgb_scale(int rgb_scale);

1351 15 clear_rgb_scale 4 1731 27 EggTexture::clear_rgb_scale 0 1 491 325
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_rgb_scale(void);

1352 13 has_rgb_scale 4 1731 25 EggTexture::has_rgb_scale 0 1 492 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_rgb_scale(void) const;

1353 13 get_rgb_scale 4 1731 25 EggTexture::get_rgb_scale 0 1 493 374
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_rgb_scale(void) const;

1354 15 set_alpha_scale 4 1731 27 EggTexture::set_alpha_scale 0 1 494 468
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
57
inline void EggTexture::set_alpha_scale(int alpha_scale);

1355 17 clear_alpha_scale 4 1731 29 EggTexture::clear_alpha_scale 0 1 495 329
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
48
inline void EggTexture::clear_alpha_scale(void);

1356 15 has_alpha_scale 4 1731 27 EggTexture::has_alpha_scale 0 1 496 327
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggTexture::has_alpha_scale(void) const;

1357 15 get_alpha_scale 4 1731 27 EggTexture::get_alpha_scale 0 1 497 380
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
////////////////////////////////////////////////////////////////////
51
inline int EggTexture::get_alpha_scale(void) const;

1358 18 set_alpha_filename 4 1731 30 EggTexture::set_alpha_filename 0 1 498 516
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_filename(Filename const &filename);

1359 20 clear_alpha_filename 4 1731 32 EggTexture::clear_alpha_filename 0 1 499 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::clear_alpha_filename(void);

1360 18 has_alpha_filename 4 1731 30 EggTexture::has_alpha_filename 0 1 500 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
////////////////////////////////////////////////////////////////////
55
inline bool EggTexture::has_alpha_filename(void) const;

1361 18 get_alpha_filename 4 1731 30 EggTexture::get_alpha_filename 0 1 501 419
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_filename(void) const;

1362 18 set_alpha_fullpath 4 1731 30 EggTexture::set_alpha_fullpath 0 1 502 326
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_fullpath(Filename const &fullpath);

1363 18 get_alpha_fullpath 4 1731 30 EggTexture::get_alpha_fullpath 0 1 503 817
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_fullpath(void) const;

1364 22 set_alpha_file_channel 4 1731 34 EggTexture::set_alpha_file_channel 0 1 504 742
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_alpha_file_channel(int alpha_file_channel);

1365 24 clear_alpha_file_channel 4 1731 36 EggTexture::clear_alpha_file_channel 0 1 505 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_alpha_file_channel(void);

1366 22 has_alpha_file_channel 4 1731 34 EggTexture::has_alpha_file_channel 0 1 506 349
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_alpha_file_channel(void) const;

1367 22 get_alpha_file_channel 4 1731 34 EggTexture::get_alpha_file_channel 0 1 507 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_alpha_file_channel(void) const;

1368 16 set_read_mipmaps 4 1731 28 EggTexture::set_read_mipmaps 0 1 508 912
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a time that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_read_mipmaps(bool read_mipmaps);

1369 16 get_read_mipmaps 4 1731 28 EggTexture::get_read_mipmaps 0 1 509 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_read_mipmaps(void) const;

1370 18 clear_multitexture 4 1731 30 EggTexture::clear_multitexture 0 1 510 437
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
////////////////////////////////////////////////////////////////////
42
void EggTexture::clear_multitexture(void);

1371 17 multitexture_over 4 1731 29 EggTexture::multitexture_over 0 1 511 771
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
////////////////////////////////////////////////////////////////////
54
bool EggTexture::multitexture_over(EggTexture *other);

1372 21 get_multitexture_sort 4 1731 33 EggTexture::get_multitexture_sort 0 1 512 628
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
////////////////////////////////////////////////////////////////////
57
inline int EggTexture::get_multitexture_sort(void) const;

1373 19 string_texture_type 4 1731 31 EggTexture::string_texture_type 0 1 513 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::TextureType EggTexture::string_texture_type(basic_string< char > const &string);

1374 13 string_format 4 1731 25 EggTexture::string_format 0 1 514 410
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
////////////////////////////////////////////////////////////////////
88
static EggTexture::Format EggTexture::string_format(basic_string< char > const &string);

1375 23 string_compression_mode 4 1731 35 EggTexture::string_compression_mode 0 1 515 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
////////////////////////////////////////////////////////////////////
107
static EggTexture::CompressionMode EggTexture::string_compression_mode(basic_string< char > const &string);

1376 16 string_wrap_mode 4 1731 28 EggTexture::string_wrap_mode 0 1 516 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
93
static EggTexture::WrapMode EggTexture::string_wrap_mode(basic_string< char > const &string);

1377 18 string_filter_type 4 1731 30 EggTexture::string_filter_type 0 1 517 424
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
97
static EggTexture::FilterType EggTexture::string_filter_type(basic_string< char > const &string);

1378 15 string_env_type 4 1731 27 EggTexture::string_env_type 0 1 518 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
////////////////////////////////////////////////////////////////////
91
static EggTexture::EnvType EggTexture::string_env_type(basic_string< char > const &string);

1379 19 string_combine_mode 4 1731 31 EggTexture::string_combine_mode 0 1 519 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::CombineMode EggTexture::string_combine_mode(basic_string< char > const &string);

1380 21 string_combine_source 4 1731 33 EggTexture::string_combine_source 0 1 520 433
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
////////////////////////////////////////////////////////////////////
103
static EggTexture::CombineSource EggTexture::string_combine_source(basic_string< char > const &string);

1381 22 string_combine_operand 4 1731 34 EggTexture::string_combine_operand 0 1 521 436
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
////////////////////////////////////////////////////////////////////
105
static EggTexture::CombineOperand EggTexture::string_combine_operand(basic_string< char > const &string);

1382 14 string_tex_gen 4 1731 26 EggTexture::string_tex_gen 0 1 522 412
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
89
static EggTexture::TexGen EggTexture::string_tex_gen(basic_string< char > const &string);

1383 14 get_class_type 4 1731 26 EggTexture::get_class_type 0 1 523 0
51
static TypeHandle EggTexture::get_class_type(void);

1384 11 EggMaterial 4 1745 24 EggMaterial::EggMaterial 0 2 530 531 447
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
EggMaterial::EggMaterial(basic_string< char > const &mref_name);

1385 16 is_equivalent_to 4 1745 29 EggMaterial::is_equivalent_to 0 1 532 784
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
////////////////////////////////////////////////////////////////////
75
bool EggMaterial::is_equivalent_to(EggMaterial const &other, int eq) const;

1386 15 sorts_less_than 4 1745 28 EggMaterial::sorts_less_than 0 1 533 502
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
74
bool EggMaterial::sorts_less_than(EggMaterial const &other, int eq) const;

1387 8 set_diff 4 1745 21 EggMaterial::set_diff 0 1 534 892
// Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_diff(LVecBase4f const &diff);

1388 10 clear_diff 4 1745 23 EggMaterial::clear_diff 0 1 535 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_diff(void);

1389 8 has_diff 4 1745 21 EggMaterial::has_diff 0 1 536 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_diff(void) const;

1390 8 get_diff 4 1745 21 EggMaterial::get_diff 0 1 537 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_diff(void) const;

1391 7 set_amb 4 1745 20 EggMaterial::set_amb 0 1 538 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggMaterial::set_amb(LVecBase4f const &amb);

1392 9 clear_amb 4 1745 22 EggMaterial::clear_amb 0 1 539 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggMaterial::clear_amb(void);

1393 7 has_amb 4 1745 20 EggMaterial::has_amb 0 1 540 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggMaterial::has_amb(void) const;

1394 7 get_amb 4 1745 20 EggMaterial::get_amb 0 1 541 357
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
////////////////////////////////////////////////////////////////////
51
inline LVecBase4f EggMaterial::get_amb(void) const;

1395 8 set_emit 4 1745 21 EggMaterial::set_emit 0 1 542 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_emit(LVecBase4f const &emit);

1396 10 clear_emit 4 1745 23 EggMaterial::clear_emit 0 1 543 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_emit(void);

1397 8 has_emit 4 1745 21 EggMaterial::has_emit 0 1 544 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_emit(void) const;

1398 8 get_emit 4 1745 21 EggMaterial::get_emit 0 1 545 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_emit(void) const;

1399 8 set_spec 4 1745 21 EggMaterial::set_spec 0 1 546 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_spec(LVecBase4f const &spec);

1400 10 clear_spec 4 1745 23 EggMaterial::clear_spec 0 1 547 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_spec(void);

1401 8 has_spec 4 1745 21 EggMaterial::has_spec 0 1 548 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_spec(void) const;

1402 8 get_spec 4 1745 21 EggMaterial::get_spec 0 1 549 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_spec(void) const;

1403 13 set_shininess 4 1745 26 EggMaterial::set_shininess 0 1 550 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggMaterial::set_shininess(double shininess);

1404 15 clear_shininess 4 1745 28 EggMaterial::clear_shininess 0 1 551 224
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::clear_shininess(void);

1405 13 has_shininess 4 1745 26 EggMaterial::has_shininess 0 1 552 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggMaterial::has_shininess(void) const;

1406 13 get_shininess 4 1745 26 EggMaterial::get_shininess 0 1 553 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline double EggMaterial::get_shininess(void) const;

1407 9 set_local 4 1745 22 EggMaterial::set_local 0 1 554 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::set_local(bool local);

1408 11 clear_local 4 1745 24 EggMaterial::clear_local 0 1 555 220
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggMaterial::clear_local(void);

1409 9 has_local 4 1745 22 EggMaterial::has_local 0 1 556 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::has_local(void) const;

1410 9 get_local 4 1745 22 EggMaterial::get_local 0 1 557 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::get_local(void) const;

1411 14 get_class_type 4 1745 27 EggMaterial::get_class_type 0 1 558 0
52
static TypeHandle EggMaterial::get_class_type(void);

1412 12 ~EggMaterial 4 1745 25 EggMaterial::~EggMaterial 0 0 0
32
EggMaterial::~EggMaterial(void);

1413 17 upcast_to_EggNode 12 1747 31 EggPrimitive::upcast_to_EggNode 0 1 610 35
upcast from EggPrimitive to EggNode
47
EggNode *EggPrimitive::upcast_to_EggNode(void);

1414 24 downcast_to_EggPrimitive 12 1701 33 EggNode::downcast_to_EggPrimitive 0 1 611 37
downcast from EggNode to EggPrimitive
54
EggPrimitive *EggNode::downcast_to_EggPrimitive(void);

1415 23 upcast_to_EggAttributes 12 1747 37 EggPrimitive::upcast_to_EggAttributes 0 1 612 41
upcast from EggPrimitive to EggAttributes
59
EggAttributes *EggPrimitive::upcast_to_EggAttributes(void);

1416 24 downcast_to_EggPrimitive 12 1703 39 EggAttributes::downcast_to_EggPrimitive 0 1 613 43
downcast from EggAttributes to EggPrimitive
60
EggPrimitive *EggAttributes::downcast_to_EggPrimitive(void);

1417 23 upcast_to_EggRenderMode 12 1747 37 EggPrimitive::upcast_to_EggRenderMode 0 1 614 41
upcast from EggPrimitive to EggRenderMode
59
EggRenderMode *EggPrimitive::upcast_to_EggRenderMode(void);

1418 24 downcast_to_EggPrimitive 12 1708 39 EggRenderMode::downcast_to_EggPrimitive 0 1 615 43
downcast from EggRenderMode to EggPrimitive
60
EggPrimitive *EggRenderMode::downcast_to_EggPrimitive(void);

1419 10 operator = 4 1747 24 EggPrimitive::operator = 0 1 559 237
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggPrimitive &EggPrimitive::operator =(EggPrimitive const &copy);

1420 13 ~EggPrimitive 4 1747 27 EggPrimitive::~EggPrimitive 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
virtual inline EggPrimitive::~EggPrimitive(void);

1421 20 determine_alpha_mode 4 1747 34 EggPrimitive::determine_alpha_mode 0 1 560 562
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_alpha_mode(void);

1422 26 determine_depth_write_mode 4 1747 40 EggPrimitive::determine_depth_write_mode 0 1 561 569
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
virtual EggRenderMode *EggPrimitive::determine_depth_write_mode(void);

1423 25 determine_depth_test_mode 4 1747 39 EggPrimitive::determine_depth_test_mode 0 1 562 567
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_depth_test_mode(void);

1424 25 determine_visibility_mode 4 1747 39 EggPrimitive::determine_visibility_mode 0 1 563 566
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_visibility_mode(void);

1425 20 determine_draw_order 4 1747 34 EggPrimitive::determine_draw_order 0 1 564 544
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_draw_order(void);

1426 13 determine_bin 4 1747 27 EggPrimitive::determine_bin 0 1 565 531
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
57
virtual EggRenderMode *EggPrimitive::determine_bin(void);

1427 13 get_sort_name 4 1747 27 EggPrimitive::get_sort_name 0 1 566 498
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > EggPrimitive::get_sort_name(void) const;

1428 11 get_shading 4 1747 25 EggPrimitive::get_shading 0 1 567 1114
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
////////////////////////////////////////////////////////////////////
68
virtual EggPrimitive::Shading EggPrimitive::get_shading(void) const;

1429 23 clear_connected_shading 4 1747 37 EggPrimitive::clear_connected_shading 0 1 568 385
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
////////////////////////////////////////////////////////////////////
56
inline void EggPrimitive::clear_connected_shading(void);

1430 21 get_connected_shading 4 1747 35 EggPrimitive::get_connected_shading 0 1 569 852
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
////////////////////////////////////////////////////////////////////
77
inline EggPrimitive::Shading EggPrimitive::get_connected_shading(void) const;

1431 11 set_texture 4 1747 25 EggPrimitive::set_texture 0 1 570 507
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.q
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::set_texture(EggTexture *texture);

1432 11 has_texture 4 1747 25 EggPrimitive::has_texture 0 2 571 572 843
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggPrimitive::has_texture(void) const;

1433 11 get_texture 4 1747 25 EggPrimitive::get_texture 0 2 573 574 850
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
57
inline EggTexture *EggPrimitive::get_texture(void) const;

1434 11 add_texture 4 1747 25 EggPrimitive::add_texture 0 1 575 549
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::add_texture(EggTexture *texture);

1435 13 clear_texture 4 1747 27 EggPrimitive::clear_texture 0 1 576 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
////////////////////////////////////////////////////////////////////
46
inline void EggPrimitive::clear_texture(void);

1436 16 get_num_textures 4 1747 30 EggPrimitive::get_num_textures 0 1 577 303
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_textures(void) const;

1437 12 set_material 4 1747 26 EggPrimitive::set_material 0 1 578 274
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
////////////////////////////////////////////////////////////////////
62
inline void EggPrimitive::set_material(EggMaterial *material);

1438 14 clear_material 4 1747 28 EggPrimitive::clear_material 0 1 579 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
////////////////////////////////////////////////////////////////////
47
inline void EggPrimitive::clear_material(void);

1439 12 get_material 4 1747 26 EggPrimitive::get_material 0 1 580 326
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
////////////////////////////////////////////////////////////////////
59
inline EggMaterial *EggPrimitive::get_material(void) const;

1440 12 has_material 4 1747 26 EggPrimitive::has_material 0 1 581 406
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
////////////////////////////////////////////////////////////////////
51
inline bool EggPrimitive::has_material(void) const;

1441 14 set_bface_flag 4 1747 28 EggPrimitive::set_bface_flag 0 1 582 466
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
////////////////////////////////////////////////////////////////////
52
inline void EggPrimitive::set_bface_flag(bool flag);

1442 14 get_bface_flag 4 1747 28 EggPrimitive::get_bface_flag 0 1 583 313
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
////////////////////////////////////////////////////////////////////
53
inline bool EggPrimitive::get_bface_flag(void) const;

1443 15 copy_attributes 4 1747 29 EggPrimitive::copy_attributes 0 2 584 585 616
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////
63
void EggPrimitive::copy_attributes(EggAttributes const &other);

1444 17 has_vertex_normal 4 1747 31 EggPrimitive::has_vertex_normal 0 1 586 588
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
49
bool EggPrimitive::has_vertex_normal(void) const;

1445 16 has_vertex_color 4 1747 30 EggPrimitive::has_vertex_color 0 1 587 586
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
48
bool EggPrimitive::has_vertex_color(void) const;

1446 16 unify_attributes 4 1747 30 EggPrimitive::unify_attributes 0 1 588 1216
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
////////////////////////////////////////////////////////////////////
75
virtual void EggPrimitive::unify_attributes(EggPrimitive::Shading shading);

1447 20 apply_last_attribute 4 1747 34 EggPrimitive::apply_last_attribute 0 1 589 689
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
54
virtual void EggPrimitive::apply_last_attribute(void);

1448 21 apply_first_attribute 4 1747 35 EggPrimitive::apply_first_attribute 0 1 590 693
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
55
virtual void EggPrimitive::apply_first_attribute(void);

1449 25 post_apply_flat_attribute 4 1747 39 EggPrimitive::post_apply_flat_attribute 0 1 591 499
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
virtual void EggPrimitive::post_apply_flat_attribute(void);

1450 23 reverse_vertex_ordering 4 1747 37 EggPrimitive::reverse_vertex_ordering 0 1 592 481
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
////////////////////////////////////////////////////////////////////
57
virtual void EggPrimitive::reverse_vertex_ordering(void);

1451 7 cleanup 4 1747 21 EggPrimitive::cleanup 0 1 593 550
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
////////////////////////////////////////////////////////////////////
41
virtual bool EggPrimitive::cleanup(void);

1452 20 remove_doubled_verts 4 1747 34 EggPrimitive::remove_doubled_verts 0 1 594 945
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
////////////////////////////////////////////////////////////////////
53
void EggPrimitive::remove_doubled_verts(bool closed);

1453 22 remove_nonunique_verts 4 1747 36 EggPrimitive::remove_nonunique_verts 0 1 595 541
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
////////////////////////////////////////////////////////////////////
48
void EggPrimitive::remove_nonunique_verts(void);

1454 14 has_primitives 4 1747 28 EggPrimitive::has_primitives 0 1 596 380
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggPrimitive::has_primitives(void) const;

1455 20 joint_has_primitives 4 1747 34 EggPrimitive::joint_has_primitives 0 1 597 416
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggPrimitive::joint_has_primitives(void) const;

1456 11 has_normals 4 1747 25 EggPrimitive::has_normals 0 1 598 417
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggPrimitive::has_normals(void) const;

1457 5 clear 4 1747 19 EggPrimitive::clear 0 1 599 266
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
////////////////////////////////////////////////////////////////////
38
inline void EggPrimitive::clear(void);

1458 10 add_vertex 4 1747 24 EggPrimitive::add_vertex 0 1 600 330
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
////////////////////////////////////////////////////////////////////
55
EggVertex *EggPrimitive::add_vertex(EggVertex *vertex);

1459 13 remove_vertex 4 1747 27 EggPrimitive::remove_vertex 0 1 601 421
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
////////////////////////////////////////////////////////////////////
58
EggVertex *EggPrimitive::remove_vertex(EggVertex *vertex);

1460 13 copy_vertices 4 1747 27 EggPrimitive::copy_vertices 0 1 602 370
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
////////////////////////////////////////////////////////////////////
60
void EggPrimitive::copy_vertices(EggPrimitive const &other);

1461 16 get_num_vertices 4 1747 30 EggPrimitive::get_num_vertices 0 1 603 295
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_vertices(void) const;

1462 10 set_vertex 4 1747 24 EggPrimitive::set_vertex 0 1 604 510
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
////////////////////////////////////////////////////////////////////
67
inline void EggPrimitive::set_vertex(int index, EggVertex *vertex);

1463 10 get_vertex 4 1747 24 EggPrimitive::get_vertex 0 1 605 277
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
////////////////////////////////////////////////////////////////////
60
inline EggVertex *EggPrimitive::get_vertex(int index) const;

1464 8 get_pool 4 1747 22 EggPrimitive::get_pool 0 1 606 368
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
////////////////////////////////////////////////////////////////////
57
inline EggVertexPool *EggPrimitive::get_pool(void) const;

1465 5 write 4 1747 19 EggPrimitive::write 0 1 607 0
75
virtual void EggPrimitive::write(ostream &out, int indent_level) const = 0;

1466 19 test_vref_integrity 4 1747 33 EggPrimitive::test_vref_integrity 0 1 608 352
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the primitive exists and
//               that it knows it is referenced by the primitive.
////////////////////////////////////////////////////////////////////
51
void EggPrimitive::test_vref_integrity(void) const;

1467 14 get_class_type 4 1747 28 EggPrimitive::get_class_type 0 1 609 0
53
static TypeHandle EggPrimitive::get_class_type(void);

1468 10 operator = 4 1749 33 EggCompositePrimitive::operator = 0 1 616 246
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
99
inline EggCompositePrimitive &EggCompositePrimitive::operator =(EggCompositePrimitive const &copy);

1469 18 get_num_components 4 1749 41 EggCompositePrimitive::get_num_components 0 1 617 410
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
////////////////////////////////////////////////////////////////////
65
inline int EggCompositePrimitive::get_num_components(void) const;

1470 13 get_component 4 1749 36 EggCompositePrimitive::get_component 0 2 618 619 616
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
78
inline EggAttributes const *EggCompositePrimitive::get_component(int i) const;

1471 13 set_component 4 1749 36 EggCompositePrimitive::set_component 0 1 620 307
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
85
inline void EggCompositePrimitive::set_component(int i, EggAttributes const *attrib);

1472 16 triangulate_into 4 1749 39 EggCompositePrimitive::triangulate_into 0 1 621 678
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
////////////////////////////////////////////////////////////////////
83
inline bool EggCompositePrimitive::triangulate_into(EggGroupNode *container) const;

1473 20 triangulate_in_place 4 1749 43 EggCompositePrimitive::triangulate_in_place 0 1 622 830
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
85
PointerTo< EggCompositePrimitive > EggCompositePrimitive::triangulate_in_place(void);

1474 14 get_class_type 4 1749 37 EggCompositePrimitive::get_class_type 0 1 623 0
62
static TypeHandle EggCompositePrimitive::get_class_type(void);

1475 7 EggData 4 1750 16 EggData::EggData 0 2 624 625 1110
// Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
30
inline EggData::EggData(void);

1476 10 operator = 4 1750 19 EggData::operator = 0 1 626 229
////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggData &EggData::operator =(EggData const &copy);

1477 20 resolve_egg_filename 4 1750 29 EggData::resolve_egg_filename 0 2 627 628 528
////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the egg_path and
//               finally along the model_path.  If found, updates the
//               filename to the full path and returns true;
//               otherwise, returns false.
////////////////////////////////////////////////////////////////////
106
static bool EggData::resolve_egg_filename(Filename &egg_filename, DSearchPath const &searchpath = ((())));

1478 4 read 4 1750 13 EggData::read 0 3 629 630 631 1348
////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
////////////////////////////////////////////////////////////////////
88
bool EggData::read(Filename filename, basic_string< char > display_name = ((string())));

1479 5 merge 4 1750 14 EggData::merge 0 1 632 324
////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
////////////////////////////////////////////////////////////////////
36
void EggData::merge(EggData &other);

1480 14 load_externals 4 1750 23 EggData::load_externals 0 2 633 634 656
////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
69
bool EggData::load_externals(DSearchPath const &searchpath = ((())));

1481 28 collapse_equivalent_textures 4 1750 37 EggData::collapse_equivalent_textures 0 1 635 608
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
////////////////////////////////////////////////////////////////////
48
int EggData::collapse_equivalent_textures(void);

1482 29 collapse_equivalent_materials 4 1750 38 EggData::collapse_equivalent_materials 0 1 636 607
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
////////////////////////////////////////////////////////////////////
49
int EggData::collapse_equivalent_materials(void);

1483 9 write_egg 4 1750 18 EggData::write_egg 0 2 637 638 532
////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////
43
bool EggData::write_egg(Filename filename);

1484 26 set_auto_resolve_externals 4 1750 35 EggData::set_auto_resolve_externals 0 1 639 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
62
inline void EggData::set_auto_resolve_externals(bool resolve);

1485 26 get_auto_resolve_externals 4 1750 35 EggData::get_auto_resolve_externals 0 1 640 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
60
inline bool EggData::get_auto_resolve_externals(void) const;

1486 31 original_had_absolute_pathnames 4 1750 40 EggData::original_had_absolute_pathnames 0 1 641 741
////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
////////////////////////////////////////////////////////////////////
65
inline bool EggData::original_had_absolute_pathnames(void) const;

1487 21 set_coordinate_system 4 1750 30 EggData::set_coordinate_system 0 1 642 403
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void EggData::set_coordinate_system(CoordinateSystem coordsys);

1488 21 get_coordinate_system 4 1750 30 EggData::get_coordinate_system 0 1 643 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggData::get_coordinate_system(void) const;

1489 16 set_egg_filename 4 1750 25 EggData::set_egg_filename 0 1 644 392
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
////////////////////////////////////////////////////////////////////
69
inline void EggData::set_egg_filename(Filename const &egg_filenamea);

1490 16 get_egg_filename 4 1750 25 EggData::get_egg_filename 0 1 645 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &EggData::get_egg_filename(void) const;

1491 24 recompute_vertex_normals 4 1750 33 EggData::recompute_vertex_normals 0 1 646 1124
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
64
inline void EggData::recompute_vertex_normals(double threshold);

1492 25 recompute_polygon_normals 4 1750 34 EggData::recompute_polygon_normals 0 1 647 1069
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
53
inline void EggData::recompute_polygon_normals(void);

1493 13 strip_normals 4 1750 22 EggData::strip_normals 0 1 648 598
////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
41
inline void EggData::strip_normals(void);

1494 14 get_class_type 4 1750 23 EggData::get_class_type 0 1 649 0
48
static TypeHandle EggData::get_class_type(void);

1495 8 ~EggData 4 1750 17 EggData::~EggData 0 0 0
24
EggData::~EggData(void);

1496 10 operator = 4 1751 20 EggCurve::operator = 0 1 650 230
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggCurve &EggCurve::operator =(EggCurve const &copy);

1497 10 set_subdiv 4 1751 20 EggCurve::set_subdiv 0 1 651 559
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
////////////////////////////////////////////////////////////////////
45
inline void EggCurve::set_subdiv(int subdiv);

1498 10 get_subdiv 4 1751 20 EggCurve::get_subdiv 0 1 652 335
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
////////////////////////////////////////////////////////////////////
44
inline int EggCurve::get_subdiv(void) const;

1499 14 set_curve_type 4 1751 24 EggCurve::set_curve_type 0 1 653 367
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
////////////////////////////////////////////////////////////////////
63
inline void EggCurve::set_curve_type(EggCurve::CurveType type);

1500 14 get_curve_type 4 1751 24 EggCurve::get_curve_type 0 1 654 261
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
////////////////////////////////////////////////////////////////////
64
inline EggCurve::CurveType EggCurve::get_curve_type(void) const;

1501 17 string_curve_type 4 1751 27 EggCurve::string_curve_type 0 1 655 412
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
////////////////////////////////////////////////////////////////////
91
static EggCurve::CurveType EggCurve::string_curve_type(basic_string< char > const &string);

1502 14 get_class_type 4 1751 24 EggCurve::get_class_type 0 1 656 0
49
static TypeHandle EggCurve::get_class_type(void);

1503 9 ~EggCurve 4 1751 19 EggCurve::~EggCurve 0 0 0
26
EggCurve::~EggCurve(void);

1504 20 EggExternalReference 4 1753 42 EggExternalReference::EggExternalReference 0 2 657 658 465
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
EggExternalReference::EggExternalReference(basic_string< char > const &node_name, basic_string< char > const &filename);

1505 10 operator = 4 1753 32 EggExternalReference::operator = 0 1 659 242
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggExternalReference &EggExternalReference::operator =(EggExternalReference const &copy);

1506 14 get_class_type 4 1753 36 EggExternalReference::get_class_type 0 1 660 0
61
static TypeHandle EggExternalReference::get_class_type(void);

1507 21 ~EggExternalReference 4 1753 43 EggExternalReference::~EggExternalReference 0 0 0
50
EggExternalReference::~EggExternalReference(void);

1508 5 clear 4 1754 24 EggNameUniquifier::clear 0 1 661 313
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
////////////////////////////////////////////////////////////////////
36
void EggNameUniquifier::clear(void);

1509 8 uniquify 4 1754 27 EggNameUniquifier::uniquify 0 1 662 269
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////
48
void EggNameUniquifier::uniquify(EggNode *node);

1510 8 get_node 4 1754 27 EggNameUniquifier::get_node 0 1 663 341
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
////////////////////////////////////////////////////////////////////
115
EggNode *EggNameUniquifier::get_node(basic_string< char > const &category, basic_string< char > const &name) const;

1511 8 has_name 4 1754 27 EggNameUniquifier::has_name 0 1 664 332
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
////////////////////////////////////////////////////////////////////
111
bool EggNameUniquifier::has_name(basic_string< char > const &category, basic_string< char > const &name) const;

1512 8 add_name 4 1754 27 EggNameUniquifier::add_name 0 2 665 666 477
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
////////////////////////////////////////////////////////////////////
136
bool EggNameUniquifier::add_name(basic_string< char > const &category, basic_string< char > const &name, EggNode *node = ((void *)(0)));

1513 12 get_category 4 1754 31 EggNameUniquifier::get_category 0 1 667 0
80
virtual basic_string< char > EggNameUniquifier::get_category(EggNode *node) = 0;

1514 11 filter_name 4 1754 30 EggNameUniquifier::filter_name 0 1 668 487
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
////////////////////////////////////////////////////////////////////
75
virtual basic_string< char > EggNameUniquifier::filter_name(EggNode *node);

1515 13 generate_name 4 1754 32 EggNameUniquifier::generate_name 0 1 669 682
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
////////////////////////////////////////////////////////////////////
126
virtual basic_string< char > EggNameUniquifier::generate_name(EggNode *node, basic_string< char > const &category, int index);

1516 14 get_class_type 4 1754 33 EggNameUniquifier::get_class_type 0 1 670 0
58
static TypeHandle EggNameUniquifier::get_class_type(void);

1517 18 EggGroupUniquifier 4 1755 38 EggGroupUniquifier::EggGroupUniquifier 0 2 671 672 530
////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
////////////////////////////////////////////////////////////////////
64
EggGroupUniquifier::EggGroupUniquifier(bool filter_names = (1));

1518 14 get_class_type 4 1755 34 EggGroupUniquifier::get_class_type 0 1 673 0
59
static TypeHandle EggGroupUniquifier::get_class_type(void);

1519 19 ~EggGroupUniquifier 4 1755 39 EggGroupUniquifier::~EggGroupUniquifier 0 0 0
46
EggGroupUniquifier::~EggGroupUniquifier(void);

1520 7 EggLine 4 1756 16 EggLine::EggLine 0 3 674 675 676 1110
// Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline EggLine::EggLine(basic_string< char > const &name = (""));

1521 10 operator = 4 1756 19 EggLine::operator = 0 1 677 229
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggLine &EggLine::operator =(EggLine const &copy);

1522 9 has_thick 4 1756 18 EggLine::has_thick 0 1 678 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool EggLine::has_thick(void) const;

1523 9 get_thick 4 1756 18 EggLine::get_thick 0 1 679 328
////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
45
inline double EggLine::get_thick(void) const;

1524 9 set_thick 4 1756 18 EggLine::set_thick 0 1 680 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggLine::set_thick(double thick);

1525 11 clear_thick 4 1756 20 EggLine::clear_thick 0 1 681 219
////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline void EggLine::clear_thick(void);

1526 14 get_class_type 4 1756 23 EggLine::get_class_type 0 1 682 0
48
static TypeHandle EggLine::get_class_type(void);

1527 21 EggMaterialCollection 4 1757 44 EggMaterialCollection::EggMaterialCollection 0 2 683 684 467
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
EggMaterialCollection::EggMaterialCollection(void);

1528 10 operator = 4 1757 33 EggMaterialCollection::operator = 0 1 685 243
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
EggMaterialCollection &EggMaterialCollection::operator =(EggMaterialCollection const &copy);

1529 22 ~EggMaterialCollection 4 1757 45 EggMaterialCollection::~EggMaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
EggMaterialCollection::~EggMaterialCollection(void);

1530 5 clear 4 1757 28 EggMaterialCollection::clear 0 1 686 267
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
////////////////////////////////////////////////////////////////////
40
void EggMaterialCollection::clear(void);

1531 17 extract_materials 4 1757 40 EggMaterialCollection::extract_materials 0 1 687 483
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
////////////////////////////////////////////////////////////////////
65
int EggMaterialCollection::extract_materials(EggGroupNode *node);

1532 19 find_used_materials 4 1757 42 EggMaterialCollection::find_used_materials 0 1 688 1402
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
////////////////////////////////////////////////////////////////////
62
int EggMaterialCollection::find_used_materials(EggNode *node);

1533 23 remove_unused_materials 4 1757 46 EggMaterialCollection::remove_unused_materials 0 1 689 574
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
67
void EggMaterialCollection::remove_unused_materials(EggNode *node);

1534 29 collapse_equivalent_materials 4 1757 52 EggMaterialCollection::collapse_equivalent_materials 0 2 690 691 1793
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
85
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggGroupNode *node);

1535 17 replace_materials 4 1757 40 EggMaterialCollection::replace_materials 0 1 692 606
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
147
static void EggMaterialCollection::replace_materials(EggGroupNode *node, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const &replace);

1536 14 uniquify_mrefs 4 1757 37 EggMaterialCollection::uniquify_mrefs 0 1 693 386
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
49
void EggMaterialCollection::uniquify_mrefs(void);

1537 12 sort_by_mref 4 1757 35 EggMaterialCollection::sort_by_mref 0 1 694 406
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
47
void EggMaterialCollection::sort_by_mref(void);

1538 12 add_material 4 1757 35 EggMaterialCollection::add_material 0 1 695 413
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
64
bool EggMaterialCollection::add_material(EggMaterial *material);

1539 15 remove_material 4 1757 38 EggMaterialCollection::remove_material 0 1 696 414
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
67
bool EggMaterialCollection::remove_material(EggMaterial *material);

1540 22 create_unique_material 4 1757 45 EggMaterialCollection::create_unique_material 0 1 697 700
// create_unique_material() creates a new material if there is not
// already one equivalent (according to eq, see
// EggMaterial::is_equivalent_to()) to the indicated material, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
92
EggMaterial *EggMaterialCollection::create_unique_material(EggMaterial const &copy, int eq);

1541 9 find_mref 4 1757 32 EggMaterialCollection::find_mref 0 1 698 377
// Find a material with a particular MRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
////////////////////////////////////////////////////////////////////
91
EggMaterial *EggMaterialCollection::find_mref(basic_string< char > const &mref_name) const;

1542 13 EggVertexPool 4 1758 28 EggVertexPool::EggVertexPool 0 2 699 700 683
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
////////////////////////////////////////////////////////////////////
63
EggVertexPool::EggVertexPool(basic_string< char > const &name);

1543 10 has_vertex 4 1758 25 EggVertexPool::has_vertex 0 1 701 1066
// Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
////////////////////////////////////////////////////////////////////
55
inline bool EggVertexPool::has_vertex(int index) const;

1544 20 has_forward_vertices 4 1758 35 EggVertexPool::has_forward_vertices 0 1 702 386
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_forward_vertices(void) const;

1545 20 has_defined_vertices 4 1758 35 EggVertexPool::has_defined_vertices 0 1 703 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_defined_vertices(void) const;

1546 10 get_vertex 4 1758 25 EggVertexPool::get_vertex 0 1 704 411
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
54
EggVertex *EggVertexPool::get_vertex(int index) const;

1547 11 operator [] 4 1758 26 EggVertexPool::operator [] 0 1 705 418
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
62
inline EggVertex *EggVertexPool::operator [](int index) const;

1548 18 get_forward_vertex 4 1758 33 EggVertexPool::get_forward_vertex 0 1 706 679
// Returns a forward reference if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
////////////////////////////////////////////////////////////////////
56
EggVertex *EggVertexPool::get_forward_vertex(int index);

1549 17 get_highest_index 4 1758 32 EggVertexPool::get_highest_index 0 1 707 425
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
////////////////////////////////////////////////////////////////////
49
int EggVertexPool::get_highest_index(void) const;

1550 17 set_highest_index 4 1758 32 EggVertexPool::set_highest_index 0 1 708 589
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
////////////////////////////////////////////////////////////////////
57
void EggVertexPool::set_highest_index(int highest_index);

1551 18 get_num_dimensions 4 1758 33 EggVertexPool::get_num_dimensions 0 1 709 319
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
////////////////////////////////////////////////////////////////////
50
int EggVertexPool::get_num_dimensions(void) const;

1552 10 has_colors 4 1758 25 EggVertexPool::has_colors 0 1 710 324
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
43
bool EggVertexPool::has_colors(void) const;

1553 19 has_nonwhite_colors 4 1758 34 EggVertexPool::has_nonwhite_colors 0 1 711 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
////////////////////////////////////////////////////////////////////
52
bool EggVertexPool::has_nonwhite_colors(void) const;

1554 7 has_uvs 4 1758 22 EggVertexPool::has_uvs 0 1 712 318
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_uvs(void) const;

1555 12 get_uv_names 4 1758 27 EggVertexPool::get_uv_names 0 1 713 654
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
////////////////////////////////////////////////////////////////////
167
void EggVertexPool::get_uv_names(vector< basic_string< char > > &uv_names, vector< basic_string< char > > &uvw_names, vector< basic_string< char > > &tbn_names) const;

1556 10 add_vertex 4 1758 25 EggVertexPool::add_vertex 0 2 714 715 1344
// add_vertex() adds a freshly-allocated vertex.  It is up to the
// user to allocate the vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
////////////////////////////////////////////////////////////////////
74
EggVertex *EggVertexPool::add_vertex(EggVertex *vertex, int index = (-1));

1557 15 make_new_vertex 4 1758 30 EggVertexPool::make_new_vertex 0 5 716 717 718 719 720 2770
// make_new_vertex() allocates and returns a new vertex from the
// pool.

// make_new_vertex() allocates and returns a new vertex from the
// pool.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////
55
inline EggVertex *EggVertexPool::make_new_vertex(void);

1558 20 create_unique_vertex 4 1758 35 EggVertexPool::create_unique_vertex 0 1 721 616
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::create_unique_vertex(EggVertex const &copy);

1559 13 remove_vertex 4 1758 28 EggVertexPool::remove_vertex 0 1 722 342
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
////////////////////////////////////////////////////////////////////
53
void EggVertexPool::remove_vertex(EggVertex *vertex);

1560 22 remove_unused_vertices 4 1758 37 EggVertexPool::remove_unused_vertices 0 1 723 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
////////////////////////////////////////////////////////////////////
48
int EggVertexPool::remove_unused_vertices(void);

1561 9 transform 4 1758 24 EggVertexPool::transform 0 1 724 733
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
////////////////////////////////////////////////////////////////////
52
void EggVertexPool::transform(LMatrix4d const &mat);

1562 14 get_class_type 4 1758 29 EggVertexPool::get_class_type 0 1 725 0
54
static TypeHandle EggVertexPool::get_class_type(void);

1563 10 EggPolygon 4 1759 22 EggPolygon::EggPolygon 0 3 726 727 728 1125
// Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline EggPolygon::EggPolygon(basic_string< char > const &name = (""));

1564 10 operator = 4 1759 22 EggPolygon::operator = 0 1 729 235
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggPolygon &EggPolygon::operator =(EggPolygon const &copy);

1565 16 calculate_normal 4 1759 28 EggPolygon::calculate_normal 0 2 730 731 678
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
////////////////////////////////////////////////////////////////////
95
bool EggPolygon::calculate_normal(LVector3d &result, CoordinateSystem cs = (CS_default)) const;

1566 9 is_planar 4 1759 21 EggPolygon::is_planar 0 1 732 327
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool EggPolygon::is_planar(void) const;

1567 24 recompute_polygon_normal 4 1759 36 EggPolygon::recompute_polygon_normal 0 2 733 734 480
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
////////////////////////////////////////////////////////////////////
85
inline bool EggPolygon::recompute_polygon_normal(CoordinateSystem cs = (CS_default));

1568 16 triangulate_into 4 1759 28 EggPolygon::triangulate_into 0 1 735 1053
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
90
inline bool EggPolygon::triangulate_into(EggGroupNode *container, bool convex_also) const;

1569 20 triangulate_in_place 4 1759 32 EggPolygon::triangulate_in_place 0 1 736 786
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
75
PointerTo< EggPolygon > EggPolygon::triangulate_in_place(bool convex_also);

1570 14 get_class_type 4 1759 26 EggPolygon::get_class_type 0 1 737 0
51
static TypeHandle EggPolygon::get_class_type(void);

1571 11 ~EggPolygon 4 1759 23 EggPolygon::~EggPolygon 0 0 0
30
EggPolygon::~EggPolygon(void);

1572 13 EggNurbsCurve 4 1760 28 EggNurbsCurve::EggNurbsCurve 0 3 738 739 740 1128
// Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline EggNurbsCurve::EggNurbsCurve(basic_string< char > const &name = (""));

1573 10 operator = 4 1760 25 EggNurbsCurve::operator = 0 1 741 235
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggNurbsCurve &EggNurbsCurve::operator =(EggNurbsCurve const &copy);

1574 5 setup 4 1760 20 EggNurbsCurve::setup 0 1 742 588
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
////////////////////////////////////////////////////////////////////
52
void EggNurbsCurve::setup(int order, int num_knots);

1575 9 set_order 4 1760 24 EggNurbsCurve::set_order 0 1 743 542
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
////////////////////////////////////////////////////////////////////
48
inline void EggNurbsCurve::set_order(int order);

1576 13 set_num_knots 4 1760 28 EggNurbsCurve::set_num_knots 0 1 744 665
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
////////////////////////////////////////////////////////////////////
43
void EggNurbsCurve::set_num_knots(int num);

1577 8 set_knot 4 1760 23 EggNurbsCurve::set_knot 0 1 745 452
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
////////////////////////////////////////////////////////////////////
57
inline void EggNurbsCurve::set_knot(int k, double value);

1578 8 is_valid 4 1760 23 EggNurbsCurve::is_valid 0 1 746 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggNurbsCurve::is_valid(void) const;

1579 9 get_order 4 1760 24 EggNurbsCurve::get_order 0 1 747 470
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
////////////////////////////////////////////////////////////////////
48
inline int EggNurbsCurve::get_order(void) const;

1580 10 get_degree 4 1760 25 EggNurbsCurve::get_degree 0 1 748 310
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
49
inline int EggNurbsCurve::get_degree(void) const;

1581 13 get_num_knots 4 1760 28 EggNurbsCurve::get_num_knots 0 1 749 253
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsCurve::get_num_knots(void) const;

1582 11 get_num_cvs 4 1760 26 EggNurbsCurve::get_num_cvs 0 1 750 669
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
////////////////////////////////////////////////////////////////////
50
inline int EggNurbsCurve::get_num_cvs(void) const;

1583 9 is_closed 4 1760 24 EggNurbsCurve::is_closed 0 1 751 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
////////////////////////////////////////////////////////////////////
42
bool EggNurbsCurve::is_closed(void) const;

1584 8 get_knot 4 1760 23 EggNurbsCurve::get_knot 0 1 752 255
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
////////////////////////////////////////////////////////////////////
51
inline double EggNurbsCurve::get_knot(int k) const;

1585 14 get_class_type 4 1760 29 EggNurbsCurve::get_class_type 0 1 753 0
54
static TypeHandle EggNurbsCurve::get_class_type(void);

1586 14 ~EggNurbsCurve 4 1760 29 EggNurbsCurve::~EggNurbsCurve 0 0 0
36
EggNurbsCurve::~EggNurbsCurve(void);

1587 10 operator = 4 1761 22 EggSurface::operator = 0 1 754 232
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggSurface &EggSurface::operator =(EggSurface const &copy);

1588 12 set_u_subdiv 4 1761 24 EggSurface::set_u_subdiv 0 1 755 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_u_subdiv(int subdiv);

1589 12 get_u_subdiv 4 1761 24 EggSurface::get_u_subdiv 0 1 756 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_u_subdiv(void) const;

1590 12 set_v_subdiv 4 1761 24 EggSurface::set_v_subdiv 0 1 757 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_v_subdiv(int subdiv);

1591 12 get_v_subdiv 4 1761 24 EggSurface::get_v_subdiv 0 1 758 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_v_subdiv(void) const;

1592 14 get_class_type 4 1761 26 EggSurface::get_class_type 0 1 759 0
51
static TypeHandle EggSurface::get_class_type(void);

1593 11 ~EggSurface 4 1761 23 EggSurface::~EggSurface 0 0 0
30
EggSurface::~EggSurface(void);

1594 8 EggPoint 4 1762 18 EggPoint::EggPoint 0 3 760 761 762 1113
// Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline EggPoint::EggPoint(basic_string< char > const &name = (""));

1595 10 operator = 4 1762 20 EggPoint::operator = 0 1 763 230
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPoint &EggPoint::operator =(EggPoint const &copy);

1596 9 has_thick 4 1762 19 EggPoint::has_thick 0 1 764 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool EggPoint::has_thick(void) const;

1597 9 get_thick 4 1762 19 EggPoint::get_thick 0 1 765 330
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
46
inline double EggPoint::get_thick(void) const;

1598 9 set_thick 4 1762 19 EggPoint::set_thick 0 1 766 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::set_thick(double thick);

1599 11 clear_thick 4 1762 21 EggPoint::clear_thick 0 1 767 220
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline void EggPoint::clear_thick(void);

1600 15 has_perspective 4 1762 25 EggPoint::has_perspective 0 1 768 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::has_perspective(void) const;

1601 15 get_perspective 4 1762 25 EggPoint::get_perspective 0 1 769 370
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::get_perspective(void) const;

1602 15 set_perspective 4 1762 25 EggPoint::set_perspective 0 1 770 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggPoint::set_perspective(bool perspective);

1603 17 clear_perspective 4 1762 27 EggPoint::clear_perspective 0 1 771 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::clear_perspective(void);

1604 14 get_class_type 4 1762 24 EggPoint::get_class_type 0 1 772 0
49
static TypeHandle EggPoint::get_class_type(void);

1605 9 ~EggPoint 4 1762 19 EggPoint::~EggPoint 0 0 0
26
EggPoint::~EggPoint(void);

1606 15 EggPolysetMaker 4 1763 32 EggPolysetMaker::EggPolysetMaker 0 1 773 225
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
EggPolysetMaker::EggPolysetMaker(void);

1607 14 set_properties 4 1763 31 EggPolysetMaker::set_properties 0 1 774 609
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
////////////////////////////////////////////////////////////////////
53
void EggPolysetMaker::set_properties(int properties);

1608 14 get_class_type 4 1763 31 EggPolysetMaker::get_class_type 0 1 775 0
56
static TypeHandle EggPolysetMaker::get_class_type(void);

1609 16 ~EggPolysetMaker 4 1763 33 EggPolysetMaker::~EggPolysetMaker 0 0 0
40
EggPolysetMaker::~EggPolysetMaker(void);

1610 17 EggPoolUniquifier 4 1766 36 EggPoolUniquifier::EggPoolUniquifier 0 1 776 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
EggPoolUniquifier::EggPoolUniquifier(void);

1611 14 get_class_type 4 1766 33 EggPoolUniquifier::get_class_type 0 1 777 0
58
static TypeHandle EggPoolUniquifier::get_class_type(void);

1612 18 ~EggPoolUniquifier 4 1766 37 EggPoolUniquifier::~EggPoolUniquifier 0 0 0
44
EggPoolUniquifier::~EggPoolUniquifier(void);

1613 12 EggSAnimData 4 1767 26 EggSAnimData::EggSAnimData 0 3 778 779 780 1125
// Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggSAnimData::EggSAnimData(basic_string< char > const &name = (""));

1614 10 operator = 4 1767 24 EggSAnimData::operator = 0 1 781 234
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggSAnimData &EggSAnimData::operator =(EggSAnimData const &copy);

1615 12 get_num_rows 4 1767 26 EggSAnimData::get_num_rows 0 1 782 326
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
////////////////////////////////////////////////////////////////////
50
inline int EggSAnimData::get_num_rows(void) const;

1616 9 get_value 4 1767 23 EggSAnimData::get_value 0 1 783 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
53
inline double EggSAnimData::get_value(int row) const;

1617 9 set_value 4 1767 23 EggSAnimData::set_value 0 1 784 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
59
inline void EggSAnimData::set_value(int row, double value);

1618 8 optimize 4 1767 22 EggSAnimData::optimize 0 1 785 322
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
////////////////////////////////////////////////////////////////////
34
void EggSAnimData::optimize(void);

1619 14 get_class_type 4 1767 28 EggSAnimData::get_class_type 0 1 786 0
53
static TypeHandle EggSAnimData::get_class_type(void);

1620 13 ~EggSAnimData 4 1767 27 EggSAnimData::~EggSAnimData 0 0 0
34
EggSAnimData::~EggSAnimData(void);

1621 8 EggTable 4 1768 18 EggTable::EggTable 0 3 787 788 789 1113
// Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline EggTable::EggTable(basic_string< char > const &name = (""));

1622 10 operator = 4 1768 20 EggTable::operator = 0 1 790 230
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggTable &EggTable::operator =(EggTable const &copy);

1623 14 set_table_type 4 1768 24 EggTable::set_table_type 0 1 791 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTable::set_table_type(EggTable::TableType type);

1624 14 get_table_type 4 1768 24 EggTable::get_table_type 0 1 792 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTable::TableType EggTable::get_table_type(void) const;

1625 13 has_transform 4 1768 23 EggTable::has_transform 0 1 793 313
////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggTable::has_transform(void) const;

1626 17 string_table_type 4 1768 27 EggTable::string_table_type 0 1 794 412
////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
////////////////////////////////////////////////////////////////////
91
static EggTable::TableType EggTable::string_table_type(basic_string< char > const &string);

1627 14 get_class_type 4 1768 24 EggTable::get_class_type 0 1 795 0
49
static TypeHandle EggTable::get_class_type(void);

1628 9 ~EggTable 4 1768 19 EggTable::~EggTable 0 0 0
26
EggTable::~EggTable(void);

1629 20 EggTextureCollection 4 1770 42 EggTextureCollection::EggTextureCollection 0 2 796 797 465
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
EggTextureCollection::EggTextureCollection(void);

1630 10 operator = 4 1770 32 EggTextureCollection::operator = 0 1 798 242
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggTextureCollection &EggTextureCollection::operator =(EggTextureCollection const &copy);

1631 21 ~EggTextureCollection 4 1770 43 EggTextureCollection::~EggTextureCollection 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
EggTextureCollection::~EggTextureCollection(void);

1632 5 clear 4 1770 27 EggTextureCollection::clear 0 1 799 265
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
////////////////////////////////////////////////////////////////////
39
void EggTextureCollection::clear(void);

1633 16 extract_textures 4 1770 38 EggTextureCollection::extract_textures 0 1 800 479
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
////////////////////////////////////////////////////////////////////
63
int EggTextureCollection::extract_textures(EggGroupNode *node);

1634 8 is_empty 4 1770 30 EggTextureCollection::is_empty 0 1 801 322
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
48
bool EggTextureCollection::is_empty(void) const;

1635 16 get_num_textures 4 1770 38 EggTextureCollection::get_num_textures 0 1 802 290
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
55
int EggTextureCollection::get_num_textures(void) const;

1636 11 get_texture 4 1770 33 EggTextureCollection::get_texture 0 1 803 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
63
EggTexture *EggTextureCollection::get_texture(int index) const;

1637 18 find_used_textures 4 1770 40 EggTextureCollection::find_used_textures 0 1 804 1765
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
////////////////////////////////////////////////////////////////////
60
int EggTextureCollection::find_used_textures(EggNode *node);

1638 22 remove_unused_textures 4 1770 44 EggTextureCollection::remove_unused_textures 0 1 805 570
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
65
void EggTextureCollection::remove_unused_textures(EggNode *node);

1639 28 collapse_equivalent_textures 4 1770 50 EggTextureCollection::collapse_equivalent_textures 0 2 806 807 1777
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
83
int EggTextureCollection::collapse_equivalent_textures(int eq, EggGroupNode *node);

1640 16 replace_textures 4 1770 38 EggTextureCollection::replace_textures 0 1 808 601
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
143
static void EggTextureCollection::replace_textures(EggGroupNode *node, map< PointerTo< EggTexture >, PointerTo< EggTexture > > const &replace);

1641 14 uniquify_trefs 4 1770 36 EggTextureCollection::uniquify_trefs 0 1 809 384
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
48
void EggTextureCollection::uniquify_trefs(void);

1642 12 sort_by_tref 4 1770 34 EggTextureCollection::sort_by_tref 0 1 810 404
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
46
void EggTextureCollection::sort_by_tref(void);

1643 16 sort_by_basename 4 1770 38 EggTextureCollection::sort_by_basename 0 1 811 471
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
50
void EggTextureCollection::sort_by_basename(void);

1644 11 add_texture 4 1770 33 EggTextureCollection::add_texture 0 1 812 409
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
60
bool EggTextureCollection::add_texture(EggTexture *texture);

1645 14 remove_texture 4 1770 36 EggTextureCollection::remove_texture 0 1 813 410
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
63
bool EggTextureCollection::remove_texture(EggTexture *texture);

1646 21 create_unique_texture 4 1770 43 EggTextureCollection::create_unique_texture 0 1 814 691
// create_unique_texture() creates a new texture if there is not
// already one equivalent (according to eq, see
// EggTexture::is_equivalent_to()) to the indicated texture, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
88
EggTexture *EggTextureCollection::create_unique_texture(EggTexture const &copy, int eq);

1647 9 find_tref 4 1770 31 EggTextureCollection::find_tref 0 1 815 373
// Find a texture with a particular TRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
89
EggTexture *EggTextureCollection::find_tref(basic_string< char > const &tref_name) const;

1648 13 find_filename 4 1770 35 EggTextureCollection::find_filename 0 1 816 375
// Find a texture with a particular filename.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
80
EggTexture *EggTextureCollection::find_filename(Filename const &filename) const;

1649 14 EggTriangleFan 4 1771 30 EggTriangleFan::EggTriangleFan 0 3 817 818 819 1137
// Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline EggTriangleFan::EggTriangleFan(basic_string< char > const &name = (""));

1650 10 operator = 4 1771 26 EggTriangleFan::operator = 0 1 820 239
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggTriangleFan &EggTriangleFan::operator =(EggTriangleFan const &copy);

1651 14 get_class_type 4 1771 30 EggTriangleFan::get_class_type 0 1 821 0
55
static TypeHandle EggTriangleFan::get_class_type(void);

1652 16 EggTriangleStrip 4 1772 34 EggTriangleStrip::EggTriangleStrip 0 3 822 823 824 1143
// Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
83
inline EggTriangleStrip::EggTriangleStrip(basic_string< char > const &name = (""));

1653 10 operator = 4 1772 28 EggTriangleStrip::operator = 0 1 825 241
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
inline EggTriangleStrip &EggTriangleStrip::operator =(EggTriangleStrip const &copy);

1654 14 get_class_type 4 1772 32 EggTriangleStrip::get_class_type 0 1 826 0
57
static TypeHandle EggTriangleStrip::get_class_type(void);

1655 11 EggXfmSAnim 4 1773 24 EggXfmSAnim::EggXfmSAnim 0 5 827 828 829 830 831 1446
// Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
////////////////////////////////////////////////////////////////////
109
inline EggXfmSAnim::EggXfmSAnim(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));

1656 10 operator = 4 1773 23 EggXfmSAnim::operator = 0 1 832 233
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggXfmSAnim &EggXfmSAnim::operator =(EggXfmSAnim const &copy);

1657 7 set_fps 4 1773 20 EggXfmSAnim::set_fps 0 1 833 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggXfmSAnim::set_fps(double fps);

1658 9 clear_fps 4 1773 22 EggXfmSAnim::clear_fps 0 1 834 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggXfmSAnim::clear_fps(void);

1659 7 has_fps 4 1773 20 EggXfmSAnim::has_fps 0 1 835 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggXfmSAnim::has_fps(void) const;

1660 7 get_fps 4 1773 20 EggXfmSAnim::get_fps 0 1 836 262
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggXfmSAnim::get_fps(void) const;

1661 9 set_order 4 1773 22 EggXfmSAnim::set_order 0 1 837 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void EggXfmSAnim::set_order(basic_string< char > const &order);

1662 11 clear_order 4 1773 24 EggXfmSAnim::clear_order 0 1 838 220
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggXfmSAnim::clear_order(void);

1663 9 has_order 4 1773 22 EggXfmSAnim::has_order 0 1 839 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggXfmSAnim::has_order(void) const;

1664 9 get_order 4 1773 22 EggXfmSAnim::get_order 0 1 840 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &EggXfmSAnim::get_order(void) const;

1665 18 get_standard_order 4 1773 31 EggXfmSAnim::get_standard_order 0 1 841 448
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
80
static inline basic_string< char > const &EggXfmSAnim::get_standard_order(void);

1666 21 get_coordinate_system 4 1773 34 EggXfmSAnim::get_coordinate_system 0 1 842 589
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
71
inline CoordinateSystem EggXfmSAnim::get_coordinate_system(void) const;

1667 8 optimize 4 1773 21 EggXfmSAnim::optimize 0 1 843 290
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
////////////////////////////////////////////////////////////////////
33
void EggXfmSAnim::optimize(void);

1668 26 optimize_to_standard_order 4 1773 39 EggXfmSAnim::optimize_to_standard_order 0 1 844 512
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
////////////////////////////////////////////////////////////////////
51
void EggXfmSAnim::optimize_to_standard_order(void);

1669 9 normalize 4 1773 22 EggXfmSAnim::normalize 0 1 845 508
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
////////////////////////////////////////////////////////////////////
34
void EggXfmSAnim::normalize(void);

1670 12 get_num_rows 4 1773 25 EggXfmSAnim::get_num_rows 0 1 846 528
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
////////////////////////////////////////////////////////////////////
42
int EggXfmSAnim::get_num_rows(void) const;

1671 9 get_value 4 1773 22 EggXfmSAnim::get_value 0 1 847 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
////////////////////////////////////////////////////////////////////
59
void EggXfmSAnim::get_value(int row, LMatrix4d &mat) const;

1672 9 set_value 4 1773 22 EggXfmSAnim::set_value 0 1 848 716
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
////////////////////////////////////////////////////////////////////
59
bool EggXfmSAnim::set_value(int row, LMatrix4d const &mat);

1673 10 clear_data 4 1773 23 EggXfmSAnim::clear_data 0 1 849 316
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
////////////////////////////////////////////////////////////////////
42
inline void EggXfmSAnim::clear_data(void);

1674 8 add_data 4 1773 21 EggXfmSAnim::add_data 0 1 850 1669
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
////////////////////////////////////////////////////////////////////
49
bool EggXfmSAnim::add_data(LMatrix4d const &mat);

1675 18 add_component_data 4 1773 31 EggXfmSAnim::add_component_data 0 2 851 852 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
////////////////////////////////////////////////////////////////////
95
void EggXfmSAnim::add_component_data(basic_string< char > const &component_name, double value);

1676 18 compose_with_order 4 1773 31 EggXfmSAnim::compose_with_order 0 1 853 442
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
////////////////////////////////////////////////////////////////////
214
static void EggXfmSAnim::compose_with_order(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &trans, basic_string< char > const &order, CoordinateSystem cs);

1677 14 get_class_type 4 1773 27 EggXfmSAnim::get_class_type 0 1 854 0
52
static TypeHandle EggXfmSAnim::get_class_type(void);

1678 12 ~EggXfmSAnim 4 1773 25 EggXfmSAnim::~EggXfmSAnim 0 0 0
32
EggXfmSAnim::~EggXfmSAnim(void);

1679 14 EggXfmAnimData 4 1774 30 EggXfmAnimData::EggXfmAnimData 0 5 855 856 857 858 859 1458
// Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
////////////////////////////////////////////////////////////////////
115
inline EggXfmAnimData::EggXfmAnimData(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));

1680 10 operator = 4 1774 26 EggXfmAnimData::operator = 0 1 860 236
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggXfmAnimData &EggXfmAnimData::operator =(EggXfmAnimData const &copy);

1681 9 set_order 4 1774 25 EggXfmAnimData::set_order 0 1 861 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggXfmAnimData::set_order(basic_string< char > const &order);

1682 11 clear_order 4 1774 27 EggXfmAnimData::clear_order 0 1 862 223
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggXfmAnimData::clear_order(void);

1683 9 has_order 4 1774 25 EggXfmAnimData::has_order 0 1 863 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggXfmAnimData::has_order(void) const;

1684 9 get_order 4 1774 25 EggXfmAnimData::get_order 0 1 864 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &EggXfmAnimData::get_order(void) const;

1685 18 get_standard_order 4 1774 34 EggXfmAnimData::get_standard_order 0 1 865 451
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
83
static inline basic_string< char > const &EggXfmAnimData::get_standard_order(void);

1686 12 set_contents 4 1774 28 EggXfmAnimData::set_contents 0 1 866 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggXfmAnimData::set_contents(basic_string< char > const &contents);

1687 14 clear_contents 4 1774 30 EggXfmAnimData::clear_contents 0 1 867 226
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggXfmAnimData::clear_contents(void);

1688 12 has_contents 4 1774 28 EggXfmAnimData::has_contents 0 1 868 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggXfmAnimData::has_contents(void) const;

1689 12 get_contents 4 1774 28 EggXfmAnimData::get_contents 0 1 869 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggXfmAnimData::get_contents(void) const;

1690 21 get_coordinate_system 4 1774 37 EggXfmAnimData::get_coordinate_system 0 1 870 592
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
74
inline CoordinateSystem EggXfmAnimData::get_coordinate_system(void) const;

1691 12 get_num_rows 4 1774 28 EggXfmAnimData::get_num_rows 0 1 871 265
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_rows(void) const;

1692 12 get_num_cols 4 1774 28 EggXfmAnimData::get_num_cols 0 1 872 393
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_cols(void) const;

1693 9 get_value 4 1774 25 EggXfmAnimData::get_value 0 2 873 874 839
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
////////////////////////////////////////////////////////////////////
64
inline double EggXfmAnimData::get_value(int row, int col) const;

1694 14 get_class_type 4 1774 30 EggXfmAnimData::get_class_type 0 1 875 0
55
static TypeHandle EggXfmAnimData::get_class_type(void);

1695 15 ~EggXfmAnimData 4 1774 31 EggXfmAnimData::~EggXfmAnimData 0 0 0
38
EggXfmAnimData::~EggXfmAnimData(void);

875
1 14 Dtool_kAOMa5Wu 7 3 1775 0 14 Dtool_kAOMa5Wu 0 
2 14 Dtool_kAOMEDMc 7 3 1775 0 14 Dtool_kAOMEDMc 1 4 copy 1 1776  
3 14 Dtool_kAOMDBa1 7 4 1775 0 14 Dtool_kAOMDBa1 2 4 this 3 1775  4 copy 1 1776  
4 14 Dtool_kAOMkdis 7 5 1779 0 14 Dtool_kAOMkdis 0 
5 14 Dtool_kAOMc5tZ 7 7 1780 0 14 Dtool_kAOMc5tZ 0 
6 14 Dtool_kAOM6VZo 7 7 1780 0 14 Dtool_kAOM6VZo 1 4 copy 1 1781  
7 14 Dtool_kAOM43pX 7 8 1780 0 14 Dtool_kAOM43pX 2 4 this 3 1780  4 copy 1 1781  
8 14 Dtool_kAOMi4s0 4 9 1783 0 14 Dtool_kAOMi4s0 2 4 this 3 1780  9 user_data 1 1775  
9 14 Dtool_kAOMWm2j 7 10 1775 0 14 Dtool_kAOMWm2j 1 4 this 3 1781  
10 14 Dtool_kAOMTuxe 7 10 1775 0 14 Dtool_kAOMTuxe 2 4 this 3 1781  4 type 1 1779  
11 14 Dtool_kAOMibXq 6 11 1784 0 14 Dtool_kAOMibXq 1 4 this 3 1781  
12 14 Dtool_kAOMvhRl 6 11 1784 0 14 Dtool_kAOMvhRl 2 4 this 3 1781  4 type 1 1779  
13 14 Dtool_kAOM0OqA 4 12 1783 0 14 Dtool_kAOM0OqA 1 4 this 3 1780  
14 14 Dtool_kAOMjTs3 4 12 1783 0 14 Dtool_kAOMjTs3 2 4 this 3 1780  4 type 1 1779  
15 14 Dtool_kAOML1Gc 7 13 1779 0 14 Dtool_kAOML1Gc 0 
16 14 Dtool_kAOMzuI5 7 20 1787 894 14 Dtool_kAOMzuI5 1 4 copy 1 1785  
17 14 Dtool_kAOM1nQw 7 20 1787 894 14 Dtool_kAOM1nQw 1 4 name 1 1788  
18 14 Dtool_kAOMFcLP 7 20 1787 894 14 Dtool_kAOMFcLP 0 
19 14 Dtool_kAOMgt6J 7 21 1787 894 14 Dtool_kAOMgt6J 2 4 this 3 1787  4 copy 1 1785  
20 14 Dtool_kAOMjJfG 4 22 1783 0 14 Dtool_kAOMjJfG 2 4 this 3 1785  3 out 1 1789  
21 14 Dtool_kAOMcBDe 7 23 1779 0 14 Dtool_kAOMcBDe 0 
22 14 Dtool_kAOMxcwm 7 15 1780 0 14 Dtool_kAOMxcwm 1 4 this 3 1787  
23 14 Dtool_kAOMd530 7 16 1787 894 14 Dtool_kAOMd530 1 4 this 3 1780  
24 14 Dtool_kAOMQtFW 6 18 1791 0 14 Dtool_kAOMQtFW 1 4 this 3 1787  
25 14 Dtool_kAOM__2j 7 19 1787 894 14 Dtool_kAOM__2j 1 4 this 3 1791  
26 14 Dtool_kAOMj5Y4 7 26 1792 932 14 Dtool_kAOMj5Y4 2 4 this 3 1792  4 copy 1 1793  
27 14 Dtool_kAOMcWNY 6 27 1795 0 14 Dtool_kAOMcWNY 1 4 this 3 1793  
28 14 Dtool_kAOMyhAk 6 28 1796 0 14 Dtool_kAOMyhAk 1 4 this 3 1793  
29 14 Dtool_kAOM3MCH 6 29 1784 0 14 Dtool_kAOM3MCH 1 4 this 3 1793  
30 14 Dtool_kAOMaghw 6 30 1784 0 14 Dtool_kAOMaghw 1 4 this 3 1793  
31 14 Dtool_kAOMyHkj 6 31 1784 0 14 Dtool_kAOMyHkj 1 4 this 3 1793  
32 14 Dtool_kAOMtrwF 6 32 1797 0 14 Dtool_kAOMtrwF 1 4 this 3 1793  
33 14 Dtool_kAOMsUiB 6 33 1797 0 14 Dtool_kAOMsUiB 1 4 this 3 1793  
34 14 Dtool_kAOMN4KR 6 34 1797 0 14 Dtool_kAOMN4KR 1 4 this 3 1793  
35 14 Dtool_kAOMv1_V 6 35 1797 0 14 Dtool_kAOMv1_V 1 4 this 3 1793  
36 14 Dtool_kAOMXcNr 6 36 1797 0 14 Dtool_kAOMXcNr 1 4 this 3 1793  
37 14 Dtool_kAOMNv_a 6 37 1797 0 14 Dtool_kAOMNv_a 1 4 this 3 1793  
38 14 Dtool_kAOMv1HP 6 38 1797 0 14 Dtool_kAOMv1HP 1 4 this 3 1793  
39 14 Dtool_kAOM_tqL 6 39 1797 0 14 Dtool_kAOM_tqL 1 4 this 3 1793  
40 14 Dtool_kAOM3nvZ 6 40 1797 0 14 Dtool_kAOM3nvZ 1 4 this 3 1793  
41 14 Dtool_kAOMKkmK 6 41 1797 0 14 Dtool_kAOMKkmK 1 4 this 3 1793  
42 14 Dtool_kAOMB_1f 6 42 1797 0 14 Dtool_kAOMB_1f 1 4 this 3 1793  
43 14 Dtool_kAOM3soP 6 43 1797 0 14 Dtool_kAOM3soP 1 4 this 3 1793  
44 14 Dtool_kAOMoQ8D 4 44 1783 0 14 Dtool_kAOMoQ8D 2 4 this 3 1792  3 mat 1 1797  
45 14 Dtool_kAOM2Yja 4 45 1783 0 14 Dtool_kAOM2Yja 2 4 this 3 1792  3 mat 1 1797  
46 14 Dtool_kAOM7nS3 4 46 1783 0 14 Dtool_kAOM7nS3 1 4 this 3 1792  
47 14 Dtool_kAOMpzMK 4 47 1783 0 14 Dtool_kAOMpzMK 1 4 this 3 1792  
48 14 Dtool_kAOM_Twb 6 48 1796 0 14 Dtool_kAOM_Twb 2 4 this 3 1792  12 strip_prefix 1 1800  
49 14 Dtool_kAOMHHnM 6 49 1784 0 14 Dtool_kAOMHHnM 1 4 this 3 1793  
50 14 Dtool_kAOM82MW 6 50 1784 0 14 Dtool_kAOM82MW 1 4 this 3 1793  
51 14 Dtool_kAOMuPXv 6 51 1802 0 14 Dtool_kAOMuPXv 1 4 this 3 1792  
52 14 Dtool_kAOMNEGB 6 52 1802 0 14 Dtool_kAOMNEGB 1 4 this 3 1792  
53 14 Dtool_kAOMUWLJ 6 53 1802 0 14 Dtool_kAOMUWLJ 1 4 this 3 1792  
54 14 Dtool_kAOMf8Wt 6 54 1802 0 14 Dtool_kAOMf8Wt 1 4 this 3 1792  
55 14 Dtool_kAOMx2w6 6 55 1802 0 14 Dtool_kAOMx2w6 1 4 this 3 1792  
56 14 Dtool_kAOM6z27 6 56 1802 0 14 Dtool_kAOM6z27 1 4 this 3 1792  
57 14 Dtool_kAOM6Ucg 6 57 1784 0 14 Dtool_kAOM6Ucg 1 4 this 3 1792  
58 14 Dtool_kAOMEwBk 6 58 1784 0 14 Dtool_kAOMEwBk 1 4 this 3 1792  
59 14 Dtool_kAOMIrWM 4 59 1783 0 14 Dtool_kAOMIrWM 3 4 this 3 1793  3 out 1 1789  12 indent_level 1 1796  
60 14 Dtool_kAOMZKVQ 6 60 1784 0 14 Dtool_kAOMZKVQ 2 4 this 3 1792  10 egg_syntax 1 1788  
61 14 Dtool_kAOMp6_k 4 61 1783 0 14 Dtool_kAOMp6_k 1 4 this 3 1793  
62 14 Dtool_kAOMrFAL 7 62 1779 0 14 Dtool_kAOMrFAL 0 
63 14 Dtool_kAOMZZeu 7 65 1803 943 14 Dtool_kAOMZZeu 2 4 this 3 1803  4 copy 1 1804  
64 14 Dtool_kAOMgqhB 4 66 1783 0 14 Dtool_kAOMgqhB 2 4 this 3 1803  4 type 1 1806  
65 14 Dtool_kAOMKf9p 4 67 1783 0 14 Dtool_kAOMKf9p 1 4 this 3 1803  
66 14 Dtool_kAOMJAtY 6 68 1784 0 14 Dtool_kAOMJAtY 1 4 this 3 1804  
67 14 Dtool_kAOMRAYV 6 69 1806 0 14 Dtool_kAOMRAYV 1 4 this 3 1804  
68 14 Dtool_kAOMML2y 4 70 1783 0 14 Dtool_kAOMML2y 1 4 this 3 1803  
69 14 Dtool_kAOMAf6I 4 71 1783 0 14 Dtool_kAOMAf6I 2 4 this 3 1803  5 value 1 1806  
70 14 Dtool_kAOMDiDs 6 72 1796 0 14 Dtool_kAOMDiDs 1 4 this 3 1804  
71 14 Dtool_kAOMbri2 4 73 1783 0 14 Dtool_kAOMbri2 2 4 this 3 1803  7 quantum 1 1806  
72 14 Dtool_kAOM25FJ 7 74 1779 0 14 Dtool_kAOM25FJ 0 
73 14 Dtool_kAOMhfwD 7 77 1807 946 14 Dtool_kAOMhfwD 0 
74 14 Dtool_kAOMepOm 7 77 1807 946 14 Dtool_kAOMepOm 1 4 copy 1 1808  
75 14 Dtool_kAOMUF8y 6 78 1807 0 14 Dtool_kAOMUF8y 2 4 this 3 1807  4 copy 1 1808  
76 14 Dtool_kAOMw9Eb 6 80 1784 0 14 Dtool_kAOMw9Eb 1 4 this 3 1808  
77 14 Dtool_kAOMVCpK 6 81 1810 0 14 Dtool_kAOMVCpK 1 4 this 3 1808  
78 14 Dtool_kAOMpRK6 4 82 1783 0 14 Dtool_kAOMpRK6 2 4 this 3 1807  6 normal 1 1810  
79 14 Dtool_kAOMS6MT 4 83 1783 0 14 Dtool_kAOMS6MT 1 4 this 3 1807  
80 14 Dtool_kAOMiri2 6 84 1784 0 14 Dtool_kAOMiri2 2 4 this 3 1808  5 other 1 1808  
81 14 Dtool_kAOMTZ3E 4 85 1783 0 14 Dtool_kAOMTZ3E 2 4 this 3 1807  5 other 1 1808  
82 14 Dtool_kAOMKFjr 6 86 1784 0 14 Dtool_kAOMKFjr 1 4 this 3 1808  
83 14 Dtool_kAOMXGJb 7 87 1814 0 14 Dtool_kAOMXGJb 1 4 this 3 1808  
84 14 Dtool_kAOMFNlA 4 88 1783 0 14 Dtool_kAOMFNlA 2 4 this 3 1807  5 Color 1 1815  
85 14 Dtool_kAOMfqMj 4 89 1783 0 14 Dtool_kAOMfqMj 1 4 this 3 1807  
86 14 Dtool_kAOMDKr_ 6 90 1784 0 14 Dtool_kAOMDKr_ 2 4 this 3 1808  5 other 1 1808  
87 14 Dtool_kAOMPa3O 4 91 1783 0 14 Dtool_kAOMPa3O 2 4 this 3 1807  5 other 1 1808  
88 14 Dtool_kAOMgbBE 4 92 1783 0 14 Dtool_kAOMgbBE 3 4 this 3 1808  3 out 1 1789  12 indent_level 1 1796  
89 14 Dtool_kAOMOpUR 6 93 1784 0 14 Dtool_kAOMOpUR 2 4 this 3 1808  5 other 1 1808  
90 14 Dtool_kAOMsaDm 6 94 1796 0 14 Dtool_kAOMsaDm 2 4 this 3 1808  5 other 1 1808  
91 14 Dtool_kAOMZnUo 4 95 1783 0 14 Dtool_kAOMZnUo 2 4 this 3 1807  3 mat 1 1797  
92 14 Dtool_kAOMX9Yr 7 102 1779 0 14 Dtool_kAOMX9Yr 0 
93 14 Dtool_kAOMP4Um 6 97 1817 0 14 Dtool_kAOMP4Um 1 4 this 3 1808  
94 14 Dtool_kAOM7lZz 6 100 1819 0 14 Dtool_kAOM7lZz 1 4 this 3 1808  
95 14 Dtool_kAOMyaS_ 7 104 1795 932 14 Dtool_kAOMyaS_ 1 4 copy 1 1821  
96 14 Dtool_kAOM7UZA 7 104 1795 932 14 Dtool_kAOM7UZA 1 4 name 1 1788  
97 14 Dtool_kAOM0aiu 7 104 1795 932 14 Dtool_kAOM0aiu 0 
98 14 Dtool_kAOMsatI 7 105 1795 932 14 Dtool_kAOMsatI 2 4 this 3 1795  4 copy 1 1821  
99 14 Dtool_kAOMRZjf 6 106 1784 0 14 Dtool_kAOMRZjf 1 4 this 3 1821  
100 14 Dtool_kAOMn_u7 6 107 1823 0 14 Dtool_kAOMn_u7 1 4 this 3 1821  
101 14 Dtool_kAOMdGRB 4 108 1783 0 14 Dtool_kAOMdGRB 1 4 this 3 1795  
102 14 Dtool_kAOMWCah 7 109 1792 932 14 Dtool_kAOMWCah 1 4 this 3 1795  
103 14 Dtool_kAOM7zBu 7 110 1792 932 14 Dtool_kAOM7zBu 1 4 this 3 1795  
104 14 Dtool_kAOMQ_Zu 7 111 1792 932 14 Dtool_kAOMQ_Zu 2 4 this 3 1795  4 node 1 1792  
105 14 Dtool_kAOMKOID 7 112 1792 932 14 Dtool_kAOMKOID 2 4 this 3 1795  4 node 1 1792  
106 14 Dtool_kAOM0PPR 4 113 1783 0 14 Dtool_kAOM0PPR 2 4 this 3 1795  5 other 1 1795  
107 14 Dtool_kAOMIxZU 7 114 1792 932 14 Dtool_kAOMIxZU 2 4 this 3 1821  4 name 1 1788  
108 14 Dtool_kAOMWpyO 6 115 1784 0 14 Dtool_kAOMWpyO 1 4 this 3 1821  
109 14 Dtool_kAOMQMtA 4 116 1783 0 14 Dtool_kAOMQMtA 2 4 this 3 1795  10 searchpath 1 1824  
110 14 Dtool_kAOMGIQc 4 117 1783 0 14 Dtool_kAOMGIQc 2 4 this 3 1795  9 directory 1 1827  
111 14 Dtool_kAOM1ZhK 4 118 1783 0 14 Dtool_kAOM1ZhK 1 4 this 3 1795  
112 14 Dtool_kAOM_XGy 4 119 1783 0 14 Dtool_kAOM_XGy 3 4 this 3 1795  9 threshold 1 1806  2 cs 1 1830  
113 14 Dtool_kAOMC1bM 4 119 1783 0 14 Dtool_kAOMC1bM 2 4 this 3 1795  9 threshold 1 1806  
114 14 Dtool_kAOMxT4d 4 120 1783 0 14 Dtool_kAOMxT4d 2 4 this 3 1795  2 cs 1 1830  
115 14 Dtool_kAOMb2rf 4 120 1783 0 14 Dtool_kAOMb2rf 1 4 this 3 1795  
116 14 Dtool_kAOMtsfH 4 121 1783 0 14 Dtool_kAOMtsfH 1 4 this 3 1795  
117 14 Dtool_kAOMd7eS 4 122 1783 0 14 Dtool_kAOMd7eS 2 4 this 3 1795  7 uv_name 1 1831  
118 14 Dtool_kAOM_se2 6 124 1796 0 14 Dtool_kAOM_se2 2 4 this 3 1795  5 flags 1 1796  
119 14 Dtool_kAOM0h9U 4 125 1783 0 14 Dtool_kAOM0h9U 2 4 this 3 1795  5 flags 1 1796  
120 14 Dtool_kAOMXEMS 6 126 1796 0 14 Dtool_kAOMXEMS 3 4 this 3 1795  12 strip_prefix 1 1800  7 recurse 1 1784  
121 14 Dtool_kAOMfhj6 6 127 1796 0 14 Dtool_kAOMfhj6 2 4 this 3 1795  7 recurse 1 1784  
122 14 Dtool_kAOMlgIl 6 128 1796 0 14 Dtool_kAOMlgIl 2 4 this 3 1795  7 recurse 1 1784  
123 14 Dtool_kAOMNnDZ 4 129 1783 0 14 Dtool_kAOMNnDZ 1 4 this 3 1795  
124 14 Dtool_kAOMVHnl 4 130 1783 0 14 Dtool_kAOMVHnl 1 4 this 3 1795  
125 14 Dtool_kAOMygrP 4 131 1783 0 14 Dtool_kAOMygrP 3 4 this 3 1795  11 vertex_pool 1 1834  7 recurse 1 1784  
126 14 Dtool_kAOMsdwz 4 132 1783 0 14 Dtool_kAOMsdwz 4 4 this 3 1795  21 use_connected_shading 1 1784  19 allow_per_primitive 1 1784  7 recurse 1 1784  
127 14 Dtool_kAOMdiHh 4 133 1783 0 14 Dtool_kAOMdiHh 2 4 this 3 1795  7 recurse 1 1784  
128 14 Dtool_kAOMm0yZ 4 134 1783 0 14 Dtool_kAOMm0yZ 2 4 this 3 1795  7 recurse 1 1784  
129 14 Dtool_kAOMUq1z 4 135 1783 0 14 Dtool_kAOMUq1z 2 4 this 3 1795  7 recurse 1 1784  
130 14 Dtool_kAOMl4Aq 7 136 1779 0 14 Dtool_kAOMl4Aq 0 
131 14 Dtool_kAOMTDmL 7 138 1802 1025 14 Dtool_kAOMTDmL 0 
132 14 Dtool_kAOMD72v 7 138 1802 1025 14 Dtool_kAOMD72v 1 4 copy 1 1835  
133 14 Dtool_kAOMr5z0 6 139 1802 0 14 Dtool_kAOMr5z0 2 4 this 3 1802  4 copy 1 1835  
134 14 Dtool_kAOMtH5E 4 140 1783 0 14 Dtool_kAOMtH5E 3 4 this 3 1835  3 out 1 1789  12 indent_level 1 1796  
135 14 Dtool_kAOM7kse 4 145 1783 0 14 Dtool_kAOM7kse 2 4 this 3 1802  4 mode 1 1709  
136 14 Dtool_kAOM3t3A 6 146 1709 0 14 Dtool_kAOM3t3A 1 4 this 3 1835  
137 14 Dtool_kAOMCEUa 4 147 1783 0 14 Dtool_kAOMCEUa 2 4 this 3 1802  4 mode 1 1710  
138 14 Dtool_kAOMaHHZ 6 148 1710 0 14 Dtool_kAOMaHHZ 1 4 this 3 1835  
139 14 Dtool_kAOMOa7S 4 149 1783 0 14 Dtool_kAOMOa7S 2 4 this 3 1802  4 mode 1 1711  
140 14 Dtool_kAOMkkuX 6 150 1711 0 14 Dtool_kAOMkkuX 1 4 this 3 1835  
141 14 Dtool_kAOMreNq 4 151 1783 0 14 Dtool_kAOMreNq 2 4 this 3 1802  4 mode 1 1712  
142 14 Dtool_kAOMta47 6 152 1712 0 14 Dtool_kAOMta47 1 4 this 3 1835  
143 14 Dtool_kAOM1SSq 4 153 1783 0 14 Dtool_kAOM1SSq 2 4 this 3 1802  5 order 1 1796  
144 14 Dtool_kAOMY4RM 6 154 1796 0 14 Dtool_kAOMY4RM 1 4 this 3 1835  
145 14 Dtool_kAOMV5rc 6 155 1784 0 14 Dtool_kAOMV5rc 1 4 this 3 1835  
146 14 Dtool_kAOMgDCN 4 156 1783 0 14 Dtool_kAOMgDCN 1 4 this 3 1802  
147 14 Dtool_kAOMOpBx 4 157 1783 0 14 Dtool_kAOMOpBx 2 4 this 3 1802  3 bin 1 1788  
148 14 Dtool_kAOMtssd 6 158 1788 0 14 Dtool_kAOMtssd 1 4 this 3 1835  
149 14 Dtool_kAOM6rGu 6 159 1784 0 14 Dtool_kAOM6rGu 1 4 this 3 1835  
150 14 Dtool_kAOMlrzU 4 160 1783 0 14 Dtool_kAOMlrzU 1 4 this 3 1802  
151 14 Dtool_kAOMpyzm 6 161 1784 0 14 Dtool_kAOMpyzm 2 4 this 3 1835  5 other 1 1835  
152 14 Dtool_kAOMV_Rm 6 162 1784 0 14 Dtool_kAOMV_Rm 2 4 this 3 1835  5 other 1 1835  
153 14 Dtool_kAOMT1ZU 6 163 1784 0 14 Dtool_kAOMT1ZU 2 4 this 3 1835  5 other 1 1835  
154 14 Dtool_kAOMX3lo 6 164 1709 0 14 Dtool_kAOMX3lo 1 6 string 1 1788  
155 14 Dtool_kAOMj8l7 6 165 1710 0 14 Dtool_kAOMj8l7 1 6 string 1 1788  
156 14 Dtool_kAOMecqF 6 166 1711 0 14 Dtool_kAOMecqF 1 6 string 1 1788  
157 14 Dtool_kAOMMsGH 6 167 1712 0 14 Dtool_kAOMMsGH 1 6 string 1 1788  
158 14 Dtool_kAOMYBRs 7 168 1779 0 14 Dtool_kAOMYBRs 0 
159 14 Dtool_kAOMmgGu 7 171 1837 1028 14 Dtool_kAOMmgGu 0 
160 14 Dtool_kAOMqhDZ 7 171 1837 1028 14 Dtool_kAOMqhDZ 1 4 copy 1 1838  
161 14 Dtool_kAOMQzqw 6 172 1837 0 14 Dtool_kAOMQzqw 2 4 this 3 1837  4 copy 1 1838  
162 14 Dtool_kAOMdMr5 4 174 1783 0 14 Dtool_kAOMdMr5 1 4 this 3 1837  
163 14 Dtool_kAOMserh 4 175 1783 0 14 Dtool_kAOMserh 2 4 this 3 1837  9 translate 1 1840  
164 14 Dtool_kAOMdeDW 4 176 1783 0 14 Dtool_kAOMdeDW 2 4 this 3 1837  9 translate 1 1810  
165 14 Dtool_kAOMgbuR 4 177 1783 0 14 Dtool_kAOMgbuR 2 4 this 3 1837  5 angle 1 1806  
166 14 Dtool_kAOMi76M 4 178 1783 0 14 Dtool_kAOMi76M 2 4 this 3 1837  5 angle 1 1806  
167 14 Dtool_kAOMiDrW 4 179 1783 0 14 Dtool_kAOMiDrW 2 4 this 3 1837  5 angle 1 1806  
168 14 Dtool_kAOMiLcg 4 180 1783 0 14 Dtool_kAOMiLcg 2 4 this 3 1837  5 angle 1 1806  
169 14 Dtool_kAOMNSrS 4 181 1783 0 14 Dtool_kAOMNSrS 2 4 this 3 1837  4 quat 1 1843  
170 14 Dtool_kAOM5cDY 4 181 1783 0 14 Dtool_kAOM5cDY 3 4 this 3 1837  5 angle 1 1806  4 axis 1 1810  
171 14 Dtool_kAOM_EZa 4 182 1783 0 14 Dtool_kAOM_EZa 2 4 this 3 1837  5 scale 1 1846  
172 14 Dtool_kAOMnxdo 4 183 1783 0 14 Dtool_kAOMnxdo 2 4 this 3 1837  5 scale 1 1849  
173 14 Dtool_kAOMX0Zd 4 184 1783 0 14 Dtool_kAOMX0Zd 2 4 this 3 1837  5 scale 1 1806  
174 14 Dtool_kAOM4xVb 4 185 1783 0 14 Dtool_kAOM4xVb 2 4 this 3 1837  3 mat 1 1852  
175 14 Dtool_kAOMyNWT 4 186 1783 0 14 Dtool_kAOMyNWT 2 4 this 3 1837  3 mat 1 1797  
176 14 Dtool_kAOMICsz 6 187 1784 0 14 Dtool_kAOMICsz 1 4 this 3 1838  
177 14 Dtool_kAOMAHYm 6 188 1784 0 14 Dtool_kAOMAHYm 1 4 this 3 1838  
178 14 Dtool_kAOMBcLy 4 189 1783 0 14 Dtool_kAOMBcLy 2 4 this 3 1837  3 mat 1 1852  
179 14 Dtool_kAOMKHQX 6 190 1784 0 14 Dtool_kAOMKHQX 1 4 this 3 1838  
180 14 Dtool_kAOMSfjm 4 191 1783 0 14 Dtool_kAOMSfjm 2 4 this 3 1837  3 mat 1 1797  
181 14 Dtool_kAOM_l37 7 192 1855 0 14 Dtool_kAOM_l37 1 4 this 3 1838  
182 14 Dtool_kAOMxlvs 6 193 1797 0 14 Dtool_kAOMxlvs 1 4 this 3 1838  
183 14 Dtool_kAOMDiCM 6 194 1784 0 14 Dtool_kAOMDiCM 1 4 this 3 1838  
184 14 Dtool_kAOMn3Zw 6 196 1796 0 14 Dtool_kAOMn3Zw 1 4 this 3 1838  
185 14 Dtool_kAOMUtyU 6 197 1714 0 14 Dtool_kAOMUtyU 2 4 this 3 1838  1 n 1 1796  
186 14 Dtool_kAOMQrgR 6 198 1806 0 14 Dtool_kAOMQrgR 2 4 this 3 1838  1 n 1 1796  
187 14 Dtool_kAOMv2X0 6 199 1846 0 14 Dtool_kAOMv2X0 2 4 this 3 1838  1 n 1 1796  
188 14 Dtool_kAOMuWbb 6 200 1849 0 14 Dtool_kAOMuWbb 2 4 this 3 1838  1 n 1 1796  
189 14 Dtool_kAOMggA0 6 201 1852 0 14 Dtool_kAOMggA0 2 4 this 3 1838  1 n 1 1796  
190 14 Dtool_kAOMhADb 6 202 1797 0 14 Dtool_kAOMhADb 2 4 this 3 1838  1 n 1 1796  
191 14 Dtool_kAOMs6yS 4 203 1783 0 14 Dtool_kAOMs6yS 3 4 this 3 1838  3 out 1 1789  12 indent_level 1 1796  
192 14 Dtool_kAOMfgDe 7 205 1858 894 14 Dtool_kAOMfgDe 1 4 copy 1 1856  
193 14 Dtool_kAOMrGLE 7 205 1858 894 14 Dtool_kAOMrGLE 2 4 name 1 1788  2 uv 1 1859  
194 14 Dtool_kAOMdlNE 7 205 1858 894 14 Dtool_kAOMdlNE 2 4 name 1 1788  3 uvw 1 1862  
195 14 Dtool_kAOMDsRd 7 206 1858 894 14 Dtool_kAOMDsRd 2 4 this 3 1858  4 copy 1 1856  
196 14 Dtool_kAOM_tuC 4 207 1783 0 14 Dtool_kAOM_tuC 2 4 this 3 1858  4 name 1 1788  
197 14 Dtool_kAOMkls8 6 208 1796 0 14 Dtool_kAOMkls8 1 4 this 3 1856  
198 14 Dtool_kAOMI9Ho 6 209 1784 0 14 Dtool_kAOMI9Ho 1 4 this 3 1856  
199 14 Dtool_kAOMWnKk 7 210 1865 0 14 Dtool_kAOMWnKk 1 4 this 3 1856  
200 14 Dtool_kAOMlXG_ 6 211 1862 0 14 Dtool_kAOMlXG_ 1 4 this 3 1856  
201 14 Dtool_kAOMC1GK 4 212 1783 0 14 Dtool_kAOMC1GK 2 4 this 3 1858  8 texCoord 1 1859  
202 14 Dtool_kAOMjWDX 4 213 1783 0 14 Dtool_kAOMjWDX 2 4 this 3 1858  8 texCoord 1 1862  
203 14 Dtool_kAOMHSNX 6 214 1784 0 14 Dtool_kAOMHSNX 1 4 this 3 1856  
204 14 Dtool_kAOMvT4T 6 215 1810 0 14 Dtool_kAOMvT4T 1 4 this 3 1856  
205 14 Dtool_kAOMt4TN 4 216 1783 0 14 Dtool_kAOMt4TN 2 4 this 3 1858  7 tangent 1 1810  
206 14 Dtool_kAOMimjh 4 217 1783 0 14 Dtool_kAOMimjh 1 4 this 3 1858  
207 14 Dtool_kAOMSW5F 6 218 1784 0 14 Dtool_kAOMSW5F 1 4 this 3 1856  
208 14 Dtool_kAOMsWkC 6 219 1810 0 14 Dtool_kAOMsWkC 1 4 this 3 1856  
209 14 Dtool_kAOMMNOa 4 220 1783 0 14 Dtool_kAOMMNOa 2 4 this 3 1858  8 binormal 1 1810  
210 14 Dtool_kAOMwfvM 4 221 1783 0 14 Dtool_kAOMwfvM 1 4 this 3 1858  
211 14 Dtool_kAOML2C8 4 222 1783 0 14 Dtool_kAOML2C8 2 4 this 3 1858  3 mat 1 1797  
212 14 Dtool_kAOMaahg 4 223 1783 0 14 Dtool_kAOMaahg 3 4 this 3 1856  3 out 1 1789  12 indent_level 1 1796  
213 14 Dtool_kAOMpA7a 6 224 1796 0 14 Dtool_kAOMpA7a 2 4 this 3 1856  5 other 1 1856  
214 14 Dtool_kAOMBqeg 7 227 1779 0 14 Dtool_kAOMBqeg 0 
215 14 Dtool_kAOMnXa0 6 225 1817 0 14 Dtool_kAOMnXa0 1 4 this 3 1856  
216 14 Dtool_kAOMtjbY 7 233 1866 1086 14 Dtool_kAOMtjbY 0 
217 14 Dtool_kAOMbgja 7 233 1866 1086 14 Dtool_kAOMbgja 1 4 copy 1 1867  
218 14 Dtool_kAOMmaUY 7 234 1866 1086 14 Dtool_kAOMmaUY 2 4 this 3 1866  4 copy 1 1867  
219 14 Dtool_kAOMz9Ky 6 236 1834 0 14 Dtool_kAOMz9Ky 1 4 this 3 1867  
220 14 Dtool_kAOMp_H_ 6 237 1784 0 14 Dtool_kAOMp_H_ 1 4 this 3 1867  
221 14 Dtool_kAOM2yZs 4 238 1783 0 14 Dtool_kAOM2yZs 2 4 this 3 1866  3 pos 1 1859  
222 14 Dtool_kAOMW1At 4 238 1783 0 14 Dtool_kAOMW1At 2 4 this 3 1866  3 pos 1 1862  
223 14 Dtool_kAOM25nt 4 238 1783 0 14 Dtool_kAOM25nt 2 4 this 3 1866  3 pos 1 1869  
224 14 Dtool_kAOMZ6NP 4 238 1783 0 14 Dtool_kAOMZ6NP 2 4 this 3 1866  3 pos 1 1806  
225 14 Dtool_kAOMPMSb 4 239 1783 0 14 Dtool_kAOMPMSb 2 4 this 3 1866  3 pos 1 1869  
226 14 Dtool_kAOMO31_ 6 240 1796 0 14 Dtool_kAOMO31_ 1 4 this 3 1867  
227 14 Dtool_kAOMJIBG 6 241 1806 0 14 Dtool_kAOMJIBG 1 4 this 3 1867  
228 14 Dtool_kAOMbHBN 7 242 1865 0 14 Dtool_kAOMbHBN 1 4 this 3 1867  
229 14 Dtool_kAOMtGBU 7 243 1872 0 14 Dtool_kAOMtGBU 1 4 this 3 1867  
230 14 Dtool_kAOM_FBb 7 244 1873 0 14 Dtool_kAOM_FBb 1 4 this 3 1867  
231 14 Dtool_kAOMmIlN 6 245 1784 0 14 Dtool_kAOMmIlN 1 4 this 3 1867  
232 14 Dtool_kAOMKQRh 6 245 1784 0 14 Dtool_kAOMKQRh 2 4 this 3 1867  4 name 1 1788  
233 14 Dtool_kAOMaaFH 7 246 1865 0 14 Dtool_kAOMaaFH 1 4 this 3 1867  
234 14 Dtool_kAOM_Bxa 7 246 1865 0 14 Dtool_kAOM_Bxa 2 4 this 3 1867  4 name 1 1788  
235 14 Dtool_kAOMAFVN 4 247 1783 0 14 Dtool_kAOMAFVN 2 4 this 3 1866  8 texCoord 1 1859  
236 14 Dtool_kAOMs1Zd 4 247 1783 0 14 Dtool_kAOMs1Zd 3 4 this 3 1866  4 name 1 1788  8 texCoord 1 1859  
237 14 Dtool_kAOMqW8Y 4 248 1783 0 14 Dtool_kAOMqW8Y 1 4 this 3 1866  
238 14 Dtool_kAOMBuq9 4 248 1783 0 14 Dtool_kAOMBuq9 2 4 this 3 1866  4 name 1 1788  
239 14 Dtool_kAOMSUTE 6 249 1784 0 14 Dtool_kAOMSUTE 2 4 this 3 1867  4 name 1 1788  
240 14 Dtool_kAOMvqz9 6 250 1862 0 14 Dtool_kAOMvqz9 2 4 this 3 1867  4 name 1 1788  
241 14 Dtool_kAOMUOlT 4 251 1783 0 14 Dtool_kAOMUOlT 3 4 this 3 1866  4 name 1 1788  8 texCoord 1 1862  
242 14 Dtool_kAOM_lz7 7 252 1856 0 14 Dtool_kAOM_lz7 2 4 this 3 1867  4 name 1 1788  
243 14 Dtool_kAOMfsq4 7 253 1858 894 14 Dtool_kAOMfsq4 2 4 this 3 1866  4 name 1 1788  
244 14 Dtool_kAOM37Oi 4 254 1783 0 14 Dtool_kAOM37Oi 2 4 this 3 1866  9 vertex_uv 1 1858  
245 14 Dtool_kAOMPXw_ 6 255 1796 0 14 Dtool_kAOMPXw_ 1 4 this 3 1867  
246 14 Dtool_kAOMRa07 4 256 1783 0 14 Dtool_kAOMRa07 2 4 this 3 1866  14 external_index 1 1796  
247 14 Dtool_kAOMlfWC 6 257 1796 0 14 Dtool_kAOMlfWC 1 4 this 3 1867  
248 14 Dtool_kAOM3GP5 4 258 1783 0 14 Dtool_kAOM3GP5 3 4 this 3 1867  3 out 1 1789  12 indent_level 1 1796  
249 14 Dtool_kAOMBgJ_ 6 259 1784 0 14 Dtool_kAOMBgJ_ 2 4 this 3 1867  5 other 1 1867  
250 14 Dtool_kAOMQ2Pa 6 260 1796 0 14 Dtool_kAOMQ2Pa 1 4 this 3 1867  
251 14 Dtool_kAOMTVqu 6 261 1796 0 14 Dtool_kAOMTVqu 1 4 this 3 1867  
252 14 Dtool_kAOMHCW9 4 262 1783 0 14 Dtool_kAOMHCW9 2 4 this 3 1866  3 mat 1 1797  
253 14 Dtool_kAOMZsOw 6 263 1784 0 14 Dtool_kAOMZsOw 2 4 this 3 1867  5 group 1 1874  
254 14 Dtool_kAOM2kRg 4 264 1783 0 14 Dtool_kAOM2kRg 2 4 this 3 1866  5 other 1 1867  
255 14 Dtool_kAOM1JbX 4 265 1783 0 14 Dtool_kAOM1JbX 1 4 this 3 1866  
256 14 Dtool_kAOMk0J_ 6 266 1796 0 14 Dtool_kAOMk0J_ 2 4 this 3 1867  4 prim 1 1876  
257 14 Dtool_kAOMgTDr 4 267 1783 0 14 Dtool_kAOMgTDr 1 4 this 3 1867  
258 14 Dtool_kAOMhP_W 4 268 1783 0 14 Dtool_kAOMhP_W 1 4 this 3 1867  
259 14 Dtool_kAOMOrKC 4 269 1783 0 14 Dtool_kAOMOrKC 2 4 this 3 1867  3 out 1 1789  
260 14 Dtool_kAOMGT9t 7 272 1779 0 14 Dtool_kAOMGT9t 0 
261 14 Dtool_kAOMKcUy 7 229 1780 0 14 Dtool_kAOMKcUy 1 4 this 3 1866  
262 14 Dtool_kAOMlnwr 7 230 1866 1086 14 Dtool_kAOMlnwr 1 4 this 3 1780  
263 14 Dtool_kAOModNS 6 231 1807 0 14 Dtool_kAOModNS 1 4 this 3 1866  
264 14 Dtool_kAOMTrUk 7 232 1866 1086 14 Dtool_kAOMTrUk 1 4 this 3 1807  
265 14 Dtool_kAOMTzXy 6 270 1817 0 14 Dtool_kAOMTzXy 1 4 this 3 1867  
266 14 Dtool_kAOMMAjk 7 274 1880 1127 14 Dtool_kAOMMAjk 1 4 this 3 1878  
267 14 Dtool_kAOMdfeb 4 275 1783 0 14 Dtool_kAOMdfeb 3 4 this 3 1878  3 out 1 1789  12 indent_level 1 1796  
268 14 Dtool_kAOMXbAk 4 276 1783 0 14 Dtool_kAOMXbAk 2 4 this 3 1880  3 mat 1 1797  
269 14 Dtool_kAOMgiFq 7 277 1779 0 14 Dtool_kAOMgiFq 0 
270 14 Dtool_kAOMGDad 7 294 1881 1136 14 Dtool_kAOMGDad 1 4 copy 1 1874  
271 14 Dtool_kAOMA1nz 7 294 1881 1136 14 Dtool_kAOMA1nz 1 4 name 1 1788  
272 14 Dtool_kAOMo0fE 7 294 1881 1136 14 Dtool_kAOMo0fE 0 
273 14 Dtool_kAOM4lhn 7 295 1881 1136 14 Dtool_kAOM4lhn 2 4 this 3 1881  4 copy 1 1874  
274 14 Dtool_kAOM4Dn7 4 297 1783 0 14 Dtool_kAOM4Dn7 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
275 14 Dtool_kAOMn03j 4 298 1783 0 14 Dtool_kAOMn03j 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
276 14 Dtool_kAOMxbxc 4 299 1783 0 14 Dtool_kAOMxbxc 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
277 14 Dtool_kAOMxeV_ 4 300 1783 0 14 Dtool_kAOMxeV_ 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
278 14 Dtool_kAOMsgHb 4 301 1783 0 14 Dtool_kAOMsgHb 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
279 14 Dtool_kAOM0xU5 4 302 1783 0 14 Dtool_kAOM0xU5 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
280 14 Dtool_kAOMIFLx 4 303 1783 0 14 Dtool_kAOMIFLx 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
281 14 Dtool_kAOMl6kP 4 304 1783 0 14 Dtool_kAOMl6kP 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
282 14 Dtool_kAOMeW5J 4 305 1783 0 14 Dtool_kAOMeW5J 3 4 this 3 1874  3 out 1 1789  12 indent_level 1 1796  
283 14 Dtool_kAOMwL5B 6 306 1784 0 14 Dtool_kAOMwL5B 1 4 this 3 1874  
284 14 Dtool_kAOMBkMb 6 307 1802 0 14 Dtool_kAOMBkMb 1 4 this 3 1881  
285 14 Dtool_kAOMmFzS 6 308 1802 0 14 Dtool_kAOMmFzS 1 4 this 3 1881  
286 14 Dtool_kAOMTTlV 6 309 1802 0 14 Dtool_kAOMTTlV 1 4 this 3 1881  
287 14 Dtool_kAOMVd5a 6 310 1802 0 14 Dtool_kAOMVd5a 1 4 this 3 1881  
288 14 Dtool_kAOM76XI 6 311 1802 0 14 Dtool_kAOM76XI 1 4 this 3 1881  
289 14 Dtool_kAOMoQnq 6 312 1802 0 14 Dtool_kAOMoQnq 1 4 this 3 1881  
290 14 Dtool_kAOMJ8J_ 6 313 1784 0 14 Dtool_kAOMJ8J_ 1 4 this 3 1881  
291 14 Dtool_kAOMeytv 6 314 1784 0 14 Dtool_kAOMeytv 1 4 this 3 1881  
292 14 Dtool_kAOM_8Pb 4 315 1783 0 14 Dtool_kAOM_8Pb 2 4 this 3 1881  4 type 1 1719  
293 14 Dtool_kAOMCug2 6 316 1719 0 14 Dtool_kAOMCug2 1 4 this 3 1874  
294 14 Dtool_kAOMrrYW 6 317 1784 0 14 Dtool_kAOMrrYW 1 4 this 3 1874  
295 14 Dtool_kAOMPYft 4 318 1783 0 14 Dtool_kAOMPYft 2 4 this 3 1881  4 type 1 1722  
296 14 Dtool_kAOMUh7T 6 319 1722 0 14 Dtool_kAOMUh7T 1 4 this 3 1874  
297 14 Dtool_kAOMVkAl 4 320 1783 0 14 Dtool_kAOMVkAl 2 4 this 3 1881  16 billboard_center 1 1862  
298 14 Dtool_kAOMx2ed 4 321 1783 0 14 Dtool_kAOMx2ed 1 4 this 3 1881  
299 14 Dtool_kAOMVHfQ 6 322 1784 0 14 Dtool_kAOMVHfQ 1 4 this 3 1874  
300 14 Dtool_kAOMyHSo 6 323 1862 0 14 Dtool_kAOMyHSo 1 4 this 3 1874  
301 14 Dtool_kAOMx6Vi 4 324 1783 0 14 Dtool_kAOMx6Vi 2 4 this 3 1881  4 type 1 1723  
302 14 Dtool_kAOMvaDZ 6 325 1723 0 14 Dtool_kAOMvaDZ 1 4 this 3 1874  
303 14 Dtool_kAOMGbxk 4 326 1783 0 14 Dtool_kAOMGbxk 2 4 this 3 1881  5 flags 1 1796  
304 14 Dtool_kAOMB6er 6 327 1724 0 14 Dtool_kAOMB6er 1 4 this 3 1874  
305 14 Dtool_kAOMf_or 4 328 1783 0 14 Dtool_kAOMf_or 2 4 this 3 1881  14 collision_name 1 1788  
306 14 Dtool_kAOM2IvZ 4 329 1783 0 14 Dtool_kAOM2IvZ 1 4 this 3 1881  
307 14 Dtool_kAOMW1Ru 6 330 1784 0 14 Dtool_kAOMW1Ru 1 4 this 3 1874  
308 14 Dtool_kAOMs1EG 6 331 1788 0 14 Dtool_kAOMs1EG 1 4 this 3 1874  
309 14 Dtool_kAOM1BYb 4 332 1783 0 14 Dtool_kAOM1BYb 2 4 this 3 1881  4 type 1 1721  
310 14 Dtool_kAOM6COw 6 333 1721 0 14 Dtool_kAOM6COw 1 4 this 3 1874  
311 14 Dtool_kAOMfCbY 6 334 1784 0 14 Dtool_kAOMfCbY 1 4 this 3 1874  
312 14 Dtool_kAOMf8q2 4 335 1783 0 14 Dtool_kAOMf8q2 2 4 this 3 1881  4 type 1 1720  
313 14 Dtool_kAOMLvy6 6 336 1720 0 14 Dtool_kAOMLvy6 1 4 this 3 1874  
314 14 Dtool_kAOM41Ux 4 337 1783 0 14 Dtool_kAOM41Ux 2 4 this 3 1881  4 flag 1 1784  
315 14 Dtool_kAOM0H1c 6 338 1784 0 14 Dtool_kAOM0H1c 1 4 this 3 1874  
316 14 Dtool_kAOMlCF0 4 339 1783 0 14 Dtool_kAOMlCF0 2 4 this 3 1881  3 fps 1 1806  
317 14 Dtool_kAOM8G_G 6 340 1806 0 14 Dtool_kAOM8G_G 1 4 this 3 1874  
318 14 Dtool_kAOMAKpq 4 341 1783 0 14 Dtool_kAOMAKpq 2 4 this 3 1881  11 object_type 1 1788  
319 14 Dtool_kAOMLFHb 4 342 1783 0 14 Dtool_kAOMLFHb 1 4 this 3 1881  
320 14 Dtool_kAOMJ86I 6 343 1796 0 14 Dtool_kAOMJ86I 1 4 this 3 1874  
321 14 Dtool_kAOMa9XK 6 344 1788 0 14 Dtool_kAOMa9XK 2 4 this 3 1874  5 index 1 1796  
322 14 Dtool_kAOMZ76F 6 345 1784 0 14 Dtool_kAOMZ76F 2 4 this 3 1874  11 object_type 1 1788  
323 14 Dtool_kAOMOHD5 6 346 1784 0 14 Dtool_kAOMOHD5 2 4 this 3 1881  11 object_type 1 1788  
324 14 Dtool_kAOMGIqq 4 347 1783 0 14 Dtool_kAOMGIqq 2 4 this 3 1881  4 flag 1 1784  
325 14 Dtool_kAOMT2IL 6 348 1784 0 14 Dtool_kAOMT2IL 1 4 this 3 1874  
326 14 Dtool_kAOMxoGr 4 349 1783 0 14 Dtool_kAOMxoGr 2 4 this 3 1881  4 flag 1 1784  
327 14 Dtool_kAOMPvu3 6 350 1784 0 14 Dtool_kAOMPvu3 1 4 this 3 1874  
328 14 Dtool_kAOMSunb 4 351 1783 0 14 Dtool_kAOMSunb 2 4 this 3 1881  4 flag 1 1784  
329 14 Dtool_kAOMA4F8 6 352 1784 0 14 Dtool_kAOMA4F8 1 4 this 3 1874  
330 14 Dtool_kAOM_rVD 4 353 1783 0 14 Dtool_kAOM_rVD 2 4 this 3 1881  4 flag 1 1784  
331 14 Dtool_kAOMhgzj 6 354 1784 0 14 Dtool_kAOMhgzj 1 4 this 3 1874  
332 14 Dtool_kAOM_U5j 4 355 1783 0 14 Dtool_kAOM_U5j 2 4 this 3 1881  4 flag 1 1784  
333 14 Dtool_kAOMn6bP 6 356 1784 0 14 Dtool_kAOMn6bP 1 4 this 3 1874  
334 14 Dtool_kAOMQTF_ 4 357 1783 0 14 Dtool_kAOMQTF_ 2 4 this 3 1881  4 flag 1 1784  
335 14 Dtool_kAOMkFnp 6 358 1784 0 14 Dtool_kAOMkFnp 1 4 this 3 1874  
336 14 Dtool_kAOMivYc 4 359 1783 0 14 Dtool_kAOMivYc 2 4 this 3 1881  4 flag 1 1784  
337 14 Dtool_kAOMVOiF 6 360 1784 0 14 Dtool_kAOMVOiF 1 4 this 3 1874  
338 14 Dtool_kAOMeROZ 4 361 1783 0 14 Dtool_kAOMeROZ 2 4 this 3 1881  4 flag 1 1784  
339 14 Dtool_kAOM1pLz 4 362 1783 0 14 Dtool_kAOM1pLz 1 4 this 3 1881  
340 14 Dtool_kAOM_iEO 6 363 1784 0 14 Dtool_kAOM_iEO 1 4 this 3 1874  
341 14 Dtool_kAOMUi3l 6 364 1784 0 14 Dtool_kAOMUi3l 1 4 this 3 1874  
342 14 Dtool_kAOM1gfh 4 365 1783 0 14 Dtool_kAOM1gfh 2 4 this 3 1881  4 mask 1 1882  
343 14 Dtool_kAOML2rQ 4 366 1783 0 14 Dtool_kAOML2rQ 1 4 this 3 1881  
344 14 Dtool_kAOMhy6F 6 367 1784 0 14 Dtool_kAOMhy6F 1 4 this 3 1874  
345 14 Dtool_kAOMGxtd 7 368 1882 0 14 Dtool_kAOMGxtd 1 4 this 3 1874  
346 14 Dtool_kAOMUUte 4 369 1783 0 14 Dtool_kAOMUUte 2 4 this 3 1881  4 mask 1 1882  
347 14 Dtool_kAOMzsDo 4 370 1783 0 14 Dtool_kAOMzsDo 1 4 this 3 1881  
348 14 Dtool_kAOMPGMA 6 371 1784 0 14 Dtool_kAOMPGMA 1 4 this 3 1874  
349 14 Dtool_kAOMkHBY 7 372 1882 0 14 Dtool_kAOMkHBY 1 4 this 3 1874  
350 14 Dtool_kAOMJQ9_ 4 373 1783 0 14 Dtool_kAOMJQ9_ 2 4 this 3 1881  4 mask 1 1882  
351 14 Dtool_kAOMnw2o 4 374 1783 0 14 Dtool_kAOMnw2o 1 4 this 3 1881  
352 14 Dtool_kAOMFwdg 6 375 1784 0 14 Dtool_kAOMFwdg 1 4 this 3 1874  
353 14 Dtool_kAOMgwQ4 7 376 1882 0 14 Dtool_kAOMgwQ4 1 4 this 3 1874  
354 14 Dtool_kAOMd41w 4 377 1783 0 14 Dtool_kAOMd41w 2 4 this 3 1881  10 blend_mode 1 1725  
355 14 Dtool_kAOMrtNy 6 378 1725 0 14 Dtool_kAOMrtNy 1 4 this 3 1874  
356 14 Dtool_kAOMpJnY 4 379 1783 0 14 Dtool_kAOMpJnY 2 4 this 3 1881  15 blend_operand_a 1 1726  
357 14 Dtool_kAOMHARo 6 380 1726 0 14 Dtool_kAOMHARo 1 4 this 3 1874  
358 14 Dtool_kAOMhOn0 4 381 1783 0 14 Dtool_kAOMhOn0 2 4 this 3 1881  15 blend_operand_b 1 1726  
359 14 Dtool_kAOMI9RE 6 382 1726 0 14 Dtool_kAOMI9RE 1 4 this 3 1874  
360 14 Dtool_kAOMzp1m 4 383 1783 0 14 Dtool_kAOMzp1m 2 4 this 3 1881  11 blend_color 1 1815  
361 14 Dtool_kAOM5NwH 4 384 1783 0 14 Dtool_kAOM5NwH 1 4 this 3 1881  
362 14 Dtool_kAOMTtqa 6 385 1784 0 14 Dtool_kAOMTtqa 1 4 this 3 1874  
363 14 Dtool_kAOMstdy 6 386 1815 0 14 Dtool_kAOMstdy 1 4 this 3 1874  
364 14 Dtool_kAOMIRO1 4 387 1783 0 14 Dtool_kAOMIRO1 2 4 this 3 1881  3 lod 1 1878  
365 14 Dtool_kAOMq3tX 4 388 1783 0 14 Dtool_kAOMq3tX 1 4 this 3 1881  
366 14 Dtool_kAOMXcWg 6 389 1784 0 14 Dtool_kAOMXcWg 1 4 this 3 1874  
367 14 Dtool_kAOMKcL4 7 390 1878 0 14 Dtool_kAOMKcL4 1 4 this 3 1874  
368 14 Dtool_kAOMAteX 4 391 1783 0 14 Dtool_kAOMAteX 3 4 this 3 1881  3 key 1 1788  5 value 1 1788  
369 14 Dtool_kAOMezZY 6 392 1788 0 14 Dtool_kAOMezZY 2 4 this 3 1874  3 key 1 1788  
370 14 Dtool_kAOM7ymA 6 393 1784 0 14 Dtool_kAOM7ymA 2 4 this 3 1874  3 key 1 1788  
371 14 Dtool_kAOM6Cat 4 394 1783 0 14 Dtool_kAOM6Cat 2 4 this 3 1881  3 key 1 1788  
372 14 Dtool_kAOMHB62 4 395 1783 0 14 Dtool_kAOMHB62 3 4 this 3 1881  4 vert 1 1866  10 membership 1 1806  
373 14 Dtool_kAOMl5JZ 4 395 1783 0 14 Dtool_kAOMl5JZ 2 4 this 3 1881  4 vert 1 1866  
374 14 Dtool_kAOMEYVk 4 396 1783 0 14 Dtool_kAOMEYVk 2 4 this 3 1881  4 vert 1 1866  
375 14 Dtool_kAOM7o8l 4 397 1783 0 14 Dtool_kAOM7o8l 1 4 this 3 1881  
376 14 Dtool_kAOMu4_n 6 398 1806 0 14 Dtool_kAOMu4_n 2 4 this 3 1874  4 vert 1 1867  
377 14 Dtool_kAOMcwbO 4 399 1783 0 14 Dtool_kAOMcwbO 3 4 this 3 1881  4 vert 1 1866  10 membership 1 1806  
378 14 Dtool_kAOMuK6m 4 400 1783 0 14 Dtool_kAOMuK6m 2 4 this 3 1881  5 other 1 1881  
379 14 Dtool_kAOMhtdv 4 401 1783 0 14 Dtool_kAOMhtdv 1 4 this 3 1874  
380 14 Dtool_kAOM4npg 6 402 1719 0 14 Dtool_kAOM4npg 1 6 strval 1 1788  
381 14 Dtool_kAOMHRvQ 6 403 1720 0 14 Dtool_kAOMHRvQ 1 6 strval 1 1788  
382 14 Dtool_kAOMSWba 6 404 1721 0 14 Dtool_kAOMSWba 1 6 strval 1 1788  
383 14 Dtool_kAOM5ugT 6 405 1722 0 14 Dtool_kAOM5ugT 1 6 strval 1 1788  
384 14 Dtool_kAOMJTFH 6 406 1723 0 14 Dtool_kAOMJTFH 1 6 strval 1 1788  
385 14 Dtool_kAOMm6lB 6 407 1724 0 14 Dtool_kAOMm6lB 1 6 strval 1 1788  
386 14 Dtool_kAOMZVpI 6 408 1725 0 14 Dtool_kAOMZVpI 1 6 strval 1 1788  
387 14 Dtool_kAOM6SMq 6 409 1726 0 14 Dtool_kAOM6SMq 1 6 strval 1 1788  
388 14 Dtool_kAOMSfTP 7 410 1779 0 14 Dtool_kAOMSfTP 0 
389 14 Dtool_kAOMrm2D 7 280 1795 932 14 Dtool_kAOMrm2D 1 4 this 3 1881  
390 14 Dtool_kAOMFwi7 7 281 1881 1136 14 Dtool_kAOMFwi7 1 4 this 3 1795  
391 14 Dtool_kAOMyqbi 6 282 1802 0 14 Dtool_kAOMyqbi 1 4 this 3 1881  
392 14 Dtool_kAOMj6hd 7 283 1881 1136 14 Dtool_kAOMj6hd 1 4 this 3 1802  
393 14 Dtool_kAOMo_zk 6 284 1837 0 14 Dtool_kAOMo_zk 1 4 this 3 1881  
394 14 Dtool_kAOMrQmh 7 285 1881 1136 14 Dtool_kAOMrQmh 1 4 this 3 1837  
395 14 Dtool_kAOME04m 7 412 1886 1255 14 Dtool_kAOME04m 1 4 copy 1 1884  
396 14 Dtool_kAOM5VW_ 7 412 1886 1255 14 Dtool_kAOM5VW_ 1 4 copy 1 1874  
397 14 Dtool_kAOMxysi 7 412 1886 1255 14 Dtool_kAOMxysi 1 4 name 1 1788  
398 14 Dtool_kAOMcVXw 7 412 1886 1255 14 Dtool_kAOMcVXw 0 
399 14 Dtool_kAOM35b4 4 413 1783 0 14 Dtool_kAOM35b4 2 4 this 3 1886  10 bin_number 1 1796  
400 14 Dtool_kAOM39QH 6 414 1796 0 14 Dtool_kAOM39QH 1 4 this 3 1884  
401 14 Dtool_kAOMDJum 7 415 1779 0 14 Dtool_kAOMDJum 0 
402 14 Dtool_kAOM8q6p 6 418 1796 0 14 Dtool_kAOM8q6p 2 4 this 3 1887  10 root_group 1 1795  
403 14 Dtool_kAOMQ2a2 4 419 1783 0 14 Dtool_kAOMQ2a2 2 4 this 3 1887  4 node 1 1792  
404 14 Dtool_kAOM_qCk 6 420 1796 0 14 Dtool_kAOM_qCk 2 4 this 3 1887  4 node 1 1793  
405 14 Dtool_kAOMZCvy 6 421 1784 0 14 Dtool_kAOMZCvy 4 4 this 3 1887  10 bin_number 1 1796  1 a 1 1793  1 b 1 1793  
406 14 Dtool_kAOMGhQi 6 422 1784 0 14 Dtool_kAOMGhQi 3 4 this 3 1887  5 group 1 1874  10 bin_number 1 1796  
407 14 Dtool_kAOMHt3e 6 423 1788 0 14 Dtool_kAOMHt3e 3 4 this 3 1887  10 bin_number 1 1796  5 child 1 1793  
408 14 Dtool_kAOMnETC 7 424 1886 1255 14 Dtool_kAOMnETC 4 4 this 3 1887  10 bin_number 1 1796  5 child 1 1793  13 collapse_from 1 1881  
409 14 Dtool_kAOM_kc_ 7 425 1779 0 14 Dtool_kAOM_kc_ 0 
410 14 Dtool_kAOMljwn 7 427 1890 1270 14 Dtool_kAOMljwn 1 4 copy 1 1888  
411 14 Dtool_kAOMPzAM 7 427 1890 1270 14 Dtool_kAOMPzAM 2 9 node_name 1 1788  7 comment 1 1788  
412 14 Dtool_kAOMAmi9 7 428 1890 1270 14 Dtool_kAOMAmi9 2 4 this 3 1890  4 copy 1 1888  
413 14 Dtool_kAOMokdP 7 428 1890 1270 14 Dtool_kAOMokdP 2 4 this 3 1890  7 comment 1 1788  
414 14 Dtool_kAOM_5Ek 4 430 1783 0 14 Dtool_kAOM_5Ek 2 4 this 3 1890  7 comment 1 1788  
415 14 Dtool_kAOMgAcI 6 431 1788 0 14 Dtool_kAOMgAcI 1 4 this 3 1888  
416 14 Dtool_kAOMikvz 7 432 1779 0 14 Dtool_kAOMikvz 0 
417 14 Dtool_kAOMJt6A 6 429 1788 0 14 Dtool_kAOMJt6A 1 4 this 3 1888  
418 14 Dtool_kAOM_1Ie 7 435 1891 1278 14 Dtool_kAOM_1Ie 2 4 this 3 1891  4 copy 1 1892  
419 14 Dtool_kAOMXj7g 6 436 1788 0 14 Dtool_kAOMXj7g 1 4 this 3 1892  
420 14 Dtool_kAOMXJxZ 6 437 1827 0 14 Dtool_kAOMXJxZ 1 4 this 3 1892  
421 14 Dtool_kAOMA0g1 4 438 1783 0 14 Dtool_kAOMA0g1 2 4 this 3 1891  8 filename 1 1827  
422 14 Dtool_kAOM8Thq 6 439 1827 0 14 Dtool_kAOM8Thq 1 4 this 3 1892  
423 14 Dtool_kAOMI1PG 4 440 1783 0 14 Dtool_kAOMI1PG 2 4 this 3 1891  8 fullpath 1 1827  
424 14 Dtool_kAOMMHF_ 7 441 1779 0 14 Dtool_kAOMMHF_ 0 
425 14 Dtool_kAOMhng8 7 450 1896 1287 14 Dtool_kAOMhng8 1 4 copy 1 1894  
426 14 Dtool_kAOMezxT 7 450 1896 1287 14 Dtool_kAOMezxT 2 9 tref_name 1 1788  8 filename 1 1788  
427 14 Dtool_kAOM0TMq 7 451 1896 1287 14 Dtool_kAOM0TMq 2 4 this 3 1896  4 copy 1 1894  
428 14 Dtool_kAOMBpY9 4 453 1783 0 14 Dtool_kAOMBpY9 3 4 this 3 1894  3 out 1 1789  12 indent_level 1 1796  
429 14 Dtool_kAOMUj_f 6 455 1784 0 14 Dtool_kAOMUj_f 3 4 this 3 1894  5 other 1 1894  2 eq 1 1796  
430 14 Dtool_kAOMzib2 6 456 1784 0 14 Dtool_kAOMzib2 3 4 this 3 1894  5 other 1 1894  2 eq 1 1796  
431 14 Dtool_kAOMmUrS 6 457 1784 0 14 Dtool_kAOMmUrS 2 4 this 3 1894  14 num_components 1 1796  
432 14 Dtool_kAOMyubp 4 470 1783 0 14 Dtool_kAOMyubp 2 4 this 3 1896  12 texture_type 1 1733  
433 14 Dtool_kAOMippZ 6 471 1733 0 14 Dtool_kAOMippZ 1 4 this 3 1894  
434 14 Dtool_kAOMN8dF 4 472 1783 0 14 Dtool_kAOMN8dF 2 4 this 3 1896  6 format 1 1734  
435 14 Dtool_kAOMkehA 6 473 1734 0 14 Dtool_kAOMkehA 1 4 this 3 1894  
436 14 Dtool_kAOMuZpO 4 474 1783 0 14 Dtool_kAOMuZpO 2 4 this 3 1896  4 mode 1 1735  
437 14 Dtool_kAOMc1f8 6 475 1735 0 14 Dtool_kAOMc1f8 1 4 this 3 1894  
438 14 Dtool_kAOMDsmU 4 476 1783 0 14 Dtool_kAOMDsmU 2 4 this 3 1896  4 mode 1 1736  
439 14 Dtool_kAOM8r0r 6 477 1736 0 14 Dtool_kAOM8r0r 1 4 this 3 1894  
440 14 Dtool_kAOMgtfQ 4 478 1783 0 14 Dtool_kAOMgtfQ 2 4 this 3 1896  4 mode 1 1736  
441 14 Dtool_kAOMefXa 6 479 1736 0 14 Dtool_kAOMefXa 1 4 this 3 1894  
442 14 Dtool_kAOMHY2e 6 480 1736 0 14 Dtool_kAOMHY2e 1 4 this 3 1894  
443 14 Dtool_kAOMglQa 4 481 1783 0 14 Dtool_kAOMglQa 2 4 this 3 1896  4 mode 1 1736  
444 14 Dtool_kAOMeXIk 6 482 1736 0 14 Dtool_kAOMeXIk 1 4 this 3 1894  
445 14 Dtool_kAOM9buP 6 483 1736 0 14 Dtool_kAOM9buP 1 4 this 3 1894  
446 14 Dtool_kAOMgdAk 4 484 1783 0 14 Dtool_kAOMgdAk 2 4 this 3 1896  4 mode 1 1736  
447 14 Dtool_kAOMev5t 6 485 1736 0 14 Dtool_kAOMev5t 1 4 this 3 1894  
448 14 Dtool_kAOMrbmA 6 486 1736 0 14 Dtool_kAOMrbmA 1 4 this 3 1894  
449 14 Dtool_kAOMqq6L 4 487 1783 0 14 Dtool_kAOMqq6L 2 4 this 3 1896  4 type 1 1737  
450 14 Dtool_kAOMmUr5 6 488 1737 0 14 Dtool_kAOMmUr5 1 4 this 3 1894  
451 14 Dtool_kAOM6hL5 4 489 1783 0 14 Dtool_kAOM6hL5 2 4 this 3 1896  4 type 1 1737  
452 14 Dtool_kAOMsd7m 6 490 1737 0 14 Dtool_kAOMsd7m 1 4 this 3 1894  
453 14 Dtool_kAOMKwkc 4 491 1783 0 14 Dtool_kAOMKwkc 2 4 this 3 1896  18 anisotropic_degree 1 1796  
454 14 Dtool_kAOMc_H7 4 492 1783 0 14 Dtool_kAOMc_H7 1 4 this 3 1896  
455 14 Dtool_kAOMvvBL 6 493 1784 0 14 Dtool_kAOMvvBL 1 4 this 3 1894  
456 14 Dtool_kAOMrl66 6 494 1796 0 14 Dtool_kAOMrl66 1 4 this 3 1894  
457 14 Dtool_kAOM5MIV 4 495 1783 0 14 Dtool_kAOM5MIV 2 4 this 3 1896  4 type 1 1738  
458 14 Dtool_kAOMm3Xk 6 496 1738 0 14 Dtool_kAOMm3Xk 1 4 this 3 1894  
459 14 Dtool_kAOM2l6J 6 497 1784 0 14 Dtool_kAOM2l6J 1 4 this 3 1894  
460 14 Dtool_kAOMc01z 4 498 1783 0 14 Dtool_kAOMc01z 3 4 this 3 1896  7 channel 1 1740  2 cm 1 1739  
461 14 Dtool_kAOMmQoH 6 499 1739 0 14 Dtool_kAOMmQoH 2 4 this 3 1894  7 channel 1 1740  
462 14 Dtool_kAOM0GKW 4 500 1783 0 14 Dtool_kAOM0GKW 4 4 this 3 1896  7 channel 1 1740  1 n 1 1796  2 cs 1 1742  
463 14 Dtool_kAOM7qA3 6 501 1742 0 14 Dtool_kAOM7qA3 3 4 this 3 1894  7 channel 1 1740  1 n 1 1796  
464 14 Dtool_kAOMBmvl 4 502 1783 0 14 Dtool_kAOMBmvl 4 4 this 3 1896  7 channel 1 1740  1 n 1 1796  2 co 1 1743  
465 14 Dtool_kAOMDf6C 6 503 1743 0 14 Dtool_kAOMDf6C 3 4 this 3 1894  7 channel 1 1740  1 n 1 1796  
466 14 Dtool_kAOM8Qj0 4 504 1783 0 14 Dtool_kAOM8Qj0 2 4 this 3 1896  12 saved_result 1 1784  
467 14 Dtool_kAOMm3S1 6 505 1784 0 14 Dtool_kAOMm3S1 1 4 this 3 1894  
468 14 Dtool_kAOM2fGJ 4 506 1783 0 14 Dtool_kAOM2fGJ 2 4 this 3 1896  7 tex_gen 1 1744  
469 14 Dtool_kAOMNv5D 6 507 1744 0 14 Dtool_kAOMNv5D 1 4 this 3 1894  
470 14 Dtool_kAOMe7XX 4 508 1783 0 14 Dtool_kAOMe7XX 2 4 this 3 1896  10 stage_name 1 1788  
471 14 Dtool_kAOMiXJB 4 509 1783 0 14 Dtool_kAOMiXJB 1 4 this 3 1896  
472 14 Dtool_kAOMDGGJ 6 510 1784 0 14 Dtool_kAOMDGGJ 1 4 this 3 1894  
473 14 Dtool_kAOM2aA5 6 511 1788 0 14 Dtool_kAOM2aA5 1 4 this 3 1894  
474 14 Dtool_kAOMUObk 4 512 1783 0 14 Dtool_kAOMUObk 2 4 this 3 1896  8 priority 1 1796  
475 14 Dtool_kAOMnuob 4 513 1783 0 14 Dtool_kAOMnuob 1 4 this 3 1896  
476 14 Dtool_kAOMlRHd 6 514 1784 0 14 Dtool_kAOMlRHd 1 4 this 3 1894  
477 14 Dtool_kAOMlpBN 6 515 1796 0 14 Dtool_kAOMlpBN 1 4 this 3 1894  
478 14 Dtool_kAOM1PlD 4 516 1783 0 14 Dtool_kAOM1PlD 2 4 this 3 1896  5 color 1 1815  
479 14 Dtool_kAOMlDQn 4 517 1783 0 14 Dtool_kAOMlDQn 1 4 this 3 1896  
480 14 Dtool_kAOMYqny 6 518 1784 0 14 Dtool_kAOMYqny 1 4 this 3 1894  
481 14 Dtool_kAOMZ8gi 6 519 1815 0 14 Dtool_kAOMZ8gi 1 4 this 3 1894  
482 14 Dtool_kAOMBnrh 4 520 1783 0 14 Dtool_kAOMBnrh 2 4 this 3 1896  12 border_color 1 1815  
483 14 Dtool_kAOMlnCT 4 521 1783 0 14 Dtool_kAOMlnCT 1 4 this 3 1896  
484 14 Dtool_kAOM3XPC 6 522 1784 0 14 Dtool_kAOM3XPC 1 4 this 3 1894  
485 14 Dtool_kAOM67Jy 6 523 1815 0 14 Dtool_kAOM67Jy 1 4 this 3 1894  
486 14 Dtool_kAOMbLpF 4 524 1783 0 14 Dtool_kAOMbLpF 2 4 this 3 1896  7 uv_name 1 1788  
487 14 Dtool_kAOMA8X4 4 525 1783 0 14 Dtool_kAOMA8X4 1 4 this 3 1896  
488 14 Dtool_kAOMY3F6 6 526 1784 0 14 Dtool_kAOMY3F6 1 4 this 3 1894  
489 14 Dtool_kAOMSj_p 6 527 1788 0 14 Dtool_kAOMSj_p 1 4 this 3 1894  
490 14 Dtool_kAOMypUu 4 528 1783 0 14 Dtool_kAOMypUu 2 4 this 3 1896  9 rgb_scale 1 1796  
491 14 Dtool_kAOMgzo5 4 529 1783 0 14 Dtool_kAOMgzo5 1 4 this 3 1896  
492 14 Dtool_kAOMLbSS 6 530 1784 0 14 Dtool_kAOMLbSS 1 4 this 3 1894  
493 14 Dtool_kAOMvnMC 6 531 1796 0 14 Dtool_kAOMvnMC 1 4 this 3 1894  
494 14 Dtool_kAOMIHVT 4 532 1783 0 14 Dtool_kAOMIHVT 2 4 this 3 1896  11 alpha_scale 1 1796  
495 14 Dtool_kAOM2A36 4 533 1783 0 14 Dtool_kAOM2A36 1 4 this 3 1896  
496 14 Dtool_kAOMjpwB 6 534 1784 0 14 Dtool_kAOMjpwB 1 4 this 3 1894  
497 14 Dtool_kAOMoRrx 6 535 1796 0 14 Dtool_kAOMoRrx 1 4 this 3 1894  
498 14 Dtool_kAOMHJuv 4 536 1783 0 14 Dtool_kAOMHJuv 2 4 this 3 1896  8 filename 1 1827  
499 14 Dtool_kAOMdOt2 4 537 1783 0 14 Dtool_kAOMdOt2 1 4 this 3 1896  
500 14 Dtool_kAOMHCpy 6 538 1784 0 14 Dtool_kAOMHCpy 1 4 this 3 1894  
501 14 Dtool_kAOMUIki 6 539 1827 0 14 Dtool_kAOMUIki 1 4 this 3 1894  
502 14 Dtool_kAOMOxMH 4 540 1783 0 14 Dtool_kAOMOxMH 2 4 this 3 1896  8 fullpath 1 1827  
503 14 Dtool_kAOMDkA6 6 541 1827 0 14 Dtool_kAOMDkA6 1 4 this 3 1894  
504 14 Dtool_kAOMidkB 4 542 1783 0 14 Dtool_kAOMidkB 2 4 this 3 1896  18 alpha_file_channel 1 1796  
505 14 Dtool_kAOMXTSW 4 543 1783 0 14 Dtool_kAOMXTSW 1 4 this 3 1896  
506 14 Dtool_kAOMER_v 6 544 1784 0 14 Dtool_kAOMER_v 1 4 this 3 1894  
507 14 Dtool_kAOMK55f 6 545 1796 0 14 Dtool_kAOMK55f 1 4 this 3 1894  
508 14 Dtool_kAOMz4qj 4 546 1783 0 14 Dtool_kAOMz4qj 2 4 this 3 1896  12 read_mipmaps 1 1784  
509 14 Dtool_kAOMuJck 6 547 1784 0 14 Dtool_kAOMuJck 1 4 this 3 1894  
510 14 Dtool_kAOMSUMy 4 548 1783 0 14 Dtool_kAOMSUMy 1 4 this 3 1896  
511 14 Dtool_kAOM3XDK 6 549 1784 0 14 Dtool_kAOM3XDK 2 4 this 3 1896  5 other 1 1896  
512 14 Dtool_kAOMjbNS 6 550 1796 0 14 Dtool_kAOMjbNS 1 4 this 3 1894  
513 14 Dtool_kAOM_TOq 6 551 1733 0 14 Dtool_kAOM_TOq 1 6 string 1 1788  
514 14 Dtool_kAOM0Tc1 6 552 1734 0 14 Dtool_kAOM0Tc1 1 6 string 1 1788  
515 14 Dtool_kAOMCmfX 6 553 1735 0 14 Dtool_kAOMCmfX 1 6 string 1 1788  
516 14 Dtool_kAOM_IIf 6 554 1736 0 14 Dtool_kAOM_IIf 1 6 string 1 1788  
517 14 Dtool_kAOM3nqW 6 555 1737 0 14 Dtool_kAOM3nqW 1 6 string 1 1788  
518 14 Dtool_kAOM_bFc 6 556 1738 0 14 Dtool_kAOM_bFc 1 6 string 1 1788  
519 14 Dtool_kAOMjFLT 6 557 1739 0 14 Dtool_kAOMjFLT 1 6 string 1 1788  
520 14 Dtool_kAOMEKtK 6 558 1742 0 14 Dtool_kAOMEKtK 1 6 string 1 1788  
521 14 Dtool_kAOMnTQ1 6 559 1743 0 14 Dtool_kAOMnTQ1 1 6 string 1 1788  
522 14 Dtool_kAOMyeH3 6 560 1744 0 14 Dtool_kAOMyeH3 1 6 string 1 1788  
523 14 Dtool_kAOMTKZT 7 561 1779 0 14 Dtool_kAOMTKZT 0 
524 14 Dtool_kAOMBT72 7 444 1891 1278 14 Dtool_kAOMBT72 1 4 this 3 1896  
525 14 Dtool_kAOMWvPr 7 445 1896 1287 14 Dtool_kAOMWvPr 1 4 this 3 1891  
526 14 Dtool_kAOM2rIs 6 446 1802 0 14 Dtool_kAOM2rIs 1 4 this 3 1896  
527 14 Dtool_kAOM5AMp 7 447 1896 1287 14 Dtool_kAOM5AMp 1 4 this 3 1802  
528 14 Dtool_kAOMQ2JC 6 448 1837 0 14 Dtool_kAOMQ2JC 1 4 this 3 1896  
529 14 Dtool_kAOMlj8D 7 449 1896 1287 14 Dtool_kAOMlj8D 1 4 this 3 1837  
530 14 Dtool_kAOM4BtE 7 563 1899 1412 14 Dtool_kAOM4BtE 1 4 copy 1 1897  
531 14 Dtool_kAOM9ThA 7 563 1899 1412 14 Dtool_kAOM9ThA 1 9 mref_name 1 1788  
532 14 Dtool_kAOM7WW0 6 565 1784 0 14 Dtool_kAOM7WW0 3 4 this 3 1897  5 other 1 1897  2 eq 1 1796  
533 14 Dtool_kAOMOiSX 6 566 1784 0 14 Dtool_kAOMOiSX 3 4 this 3 1897  5 other 1 1897  2 eq 1 1796  
534 14 Dtool_kAOM2XHn 4 567 1783 0 14 Dtool_kAOM2XHn 2 4 this 3 1899  4 diff 1 1815  
535 14 Dtool_kAOMpXQH 4 568 1783 0 14 Dtool_kAOMpXQH 1 4 this 3 1899  
536 14 Dtool_kAOM5VsI 6 569 1784 0 14 Dtool_kAOM5VsI 1 4 this 3 1897  
537 14 Dtool_kAOMVUXF 7 570 1814 0 14 Dtool_kAOMVUXF 1 4 this 3 1897  
538 14 Dtool_kAOMkoW3 4 571 1783 0 14 Dtool_kAOMkoW3 2 4 this 3 1899  3 amb 1 1815  
539 14 Dtool_kAOMM1fj 4 572 1783 0 14 Dtool_kAOMM1fj 1 4 this 3 1899  
540 14 Dtool_kAOMAF9W 6 573 1784 0 14 Dtool_kAOMAF9W 1 4 this 3 1897  
541 14 Dtool_kAOM6EmT 7 574 1814 0 14 Dtool_kAOM6EmT 1 4 this 3 1897  
542 14 Dtool_kAOMBinD 4 575 1783 0 14 Dtool_kAOMBinD 2 4 this 3 1899  4 emit 1 1815  
543 14 Dtool_kAOMho4b 4 576 1783 0 14 Dtool_kAOMho4b 1 4 this 3 1899  
544 14 Dtool_kAOMQHMl 6 577 1784 0 14 Dtool_kAOMQHMl 1 4 this 3 1897  
545 14 Dtool_kAOM6G3h 7 578 1814 0 14 Dtool_kAOM6G3h 1 4 this 3 1897  
546 14 Dtool_kAOMLAce 4 579 1783 0 14 Dtool_kAOMLAce 2 4 this 3 1899  4 spec 1 1815  
547 14 Dtool_kAOM_Bc2 4 580 1783 0 14 Dtool_kAOM_Bc2 1 4 this 3 1899  
548 14 Dtool_kAOMNpCA 6 581 1784 0 14 Dtool_kAOMNpCA 1 4 this 3 1897  
549 14 Dtool_kAOM0ot8 7 582 1814 0 14 Dtool_kAOM0ot8 1 4 this 3 1897  
550 14 Dtool_kAOMifeq 4 583 1783 0 14 Dtool_kAOMifeq 2 4 this 3 1899  9 shininess 1 1806  
551 14 Dtool_kAOMNivw 4 584 1783 0 14 Dtool_kAOMNivw 1 4 this 3 1899  
552 14 Dtool_kAOMqZE6 6 585 1784 0 14 Dtool_kAOMqZE6 1 4 this 3 1897  
553 14 Dtool_kAOM8bv2 6 586 1806 0 14 Dtool_kAOM8bv2 1 4 this 3 1897  
554 14 Dtool_kAOMJOXd 4 587 1783 0 14 Dtool_kAOMJOXd 2 4 this 3 1899  5 local 1 1784  
555 14 Dtool_kAOM0Bui 4 588 1783 0 14 Dtool_kAOM0Bui 1 4 this 3 1899  
556 14 Dtool_kAOMmJXP 6 589 1784 0 14 Dtool_kAOMmJXP 1 4 this 3 1897  
557 14 Dtool_kAOMcKAM 6 590 1784 0 14 Dtool_kAOMcKAM 1 4 this 3 1897  
558 14 Dtool_kAOM6GjJ 7 591 1779 0 14 Dtool_kAOM6GjJ 0 
559 14 Dtool_kAOMhJqk 7 601 1900 1420 14 Dtool_kAOMhJqk 2 4 this 3 1900  4 copy 1 1876  
560 14 Dtool_kAOM70HD 6 603 1802 0 14 Dtool_kAOM70HD 1 4 this 3 1900  
561 14 Dtool_kAOM6tkm 6 604 1802 0 14 Dtool_kAOM6tkm 1 4 this 3 1900  
562 14 Dtool_kAOMIAv2 6 605 1802 0 14 Dtool_kAOMIAv2 1 4 this 3 1900  
563 14 Dtool_kAOMUKF_ 6 606 1802 0 14 Dtool_kAOMUKF_ 1 4 this 3 1900  
564 14 Dtool_kAOMJZ7Z 6 607 1802 0 14 Dtool_kAOMJZ7Z 1 4 this 3 1900  
565 14 Dtool_kAOMSQGc 6 608 1802 0 14 Dtool_kAOMSQGc 1 4 this 3 1900  
566 14 Dtool_kAOMAN7z 6 609 1788 0 14 Dtool_kAOMAN7z 1 4 this 3 1876  
567 14 Dtool_kAOMFdVA 6 610 1748 0 14 Dtool_kAOMFdVA 1 4 this 3 1876  
568 14 Dtool_kAOMO_bp 4 611 1783 0 14 Dtool_kAOMO_bp 1 4 this 3 1900  
569 14 Dtool_kAOM7_i5 6 612 1748 0 14 Dtool_kAOM7_i5 1 4 this 3 1876  
570 14 Dtool_kAOMxMIe 4 613 1783 0 14 Dtool_kAOMxMIe 2 4 this 3 1900  7 texture 1 1896  
571 14 Dtool_kAOMCDRS 6 614 1784 0 14 Dtool_kAOMCDRS 1 4 this 3 1876  
572 14 Dtool_kAOMnWlz 6 614 1784 0 14 Dtool_kAOMnWlz 2 4 this 3 1876  7 texture 1 1896  
573 14 Dtool_kAOM2fun 7 615 1896 1287 14 Dtool_kAOM2fun 1 4 this 3 1876  
574 14 Dtool_kAOMoFbC 7 615 1896 1287 14 Dtool_kAOMoFbC 2 4 this 3 1876  1 n 1 1796  
575 14 Dtool_kAOMf0zv 4 616 1783 0 14 Dtool_kAOMf0zv 2 4 this 3 1900  7 texture 1 1896  
576 14 Dtool_kAOMhV0K 4 617 1783 0 14 Dtool_kAOMhV0K 1 4 this 3 1900  
577 14 Dtool_kAOML1FR 6 618 1796 0 14 Dtool_kAOML1FR 1 4 this 3 1876  
578 14 Dtool_kAOMLGBt 4 619 1783 0 14 Dtool_kAOMLGBt 2 4 this 3 1900  8 material 1 1899  
579 14 Dtool_kAOM4kT7 4 620 1783 0 14 Dtool_kAOM4kT7 1 4 this 3 1900  
580 14 Dtool_kAOMElax 7 621 1899 1412 14 Dtool_kAOMElax 1 4 this 3 1876  
581 14 Dtool_kAOMYE8b 6 622 1784 0 14 Dtool_kAOMYE8b 1 4 this 3 1876  
582 14 Dtool_kAOMeofj 4 623 1783 0 14 Dtool_kAOMeofj 2 4 this 3 1900  4 flag 1 1784  
583 14 Dtool_kAOMcCgN 6 624 1784 0 14 Dtool_kAOMcCgN 1 4 this 3 1876  
584 14 Dtool_kAOM8Cxv 4 625 1783 0 14 Dtool_kAOM8Cxv 2 4 this 3 1900  5 other 1 1808  
585 14 Dtool_kAOMLo5X 4 625 1783 0 14 Dtool_kAOMLo5X 2 4 this 3 1900  5 other 1 1876  
586 14 Dtool_kAOMgHBP 6 626 1784 0 14 Dtool_kAOMgHBP 1 4 this 3 1876  
587 14 Dtool_kAOMzlJw 6 627 1784 0 14 Dtool_kAOMzlJw 1 4 this 3 1876  
588 14 Dtool_kAOMLGjU 4 628 1783 0 14 Dtool_kAOMLGjU 2 4 this 3 1900  7 shading 1 1748  
589 14 Dtool_kAOMKP88 4 629 1783 0 14 Dtool_kAOMKP88 1 4 this 3 1900  
590 14 Dtool_kAOMgkRY 4 630 1783 0 14 Dtool_kAOMgkRY 1 4 this 3 1900  
591 14 Dtool_kAOM5FGb 4 631 1783 0 14 Dtool_kAOM5FGb 1 4 this 3 1900  
592 14 Dtool_kAOMGw4a 4 632 1783 0 14 Dtool_kAOMGw4a 1 4 this 3 1900  
593 14 Dtool_kAOM0Gh8 6 633 1784 0 14 Dtool_kAOM0Gh8 1 4 this 3 1900  
594 14 Dtool_kAOMwSZ1 4 634 1783 0 14 Dtool_kAOMwSZ1 2 4 this 3 1900  6 closed 1 1784  
595 14 Dtool_kAOMIS4T 4 635 1783 0 14 Dtool_kAOMIS4T 1 4 this 3 1900  
596 14 Dtool_kAOMrzxk 6 636 1784 0 14 Dtool_kAOMrzxk 1 4 this 3 1876  
597 14 Dtool_kAOMXSfa 6 637 1784 0 14 Dtool_kAOMXSfa 1 4 this 3 1876  
598 14 Dtool_kAOMF6tl 6 638 1784 0 14 Dtool_kAOMF6tl 1 4 this 3 1876  
599 14 Dtool_kAOMctoR 4 639 1783 0 14 Dtool_kAOMctoR 1 4 this 3 1900  
600 14 Dtool_kAOMW8_c 7 640 1866 1086 14 Dtool_kAOMW8_c 2 4 this 3 1900  6 vertex 1 1866  
601 14 Dtool_kAOM7qsK 7 641 1866 1086 14 Dtool_kAOM7qsK 2 4 this 3 1900  6 vertex 1 1866  
602 14 Dtool_kAOM_m4j 4 642 1783 0 14 Dtool_kAOM_m4j 2 4 this 3 1900  5 other 1 1876  
603 14 Dtool_kAOMkeY6 6 643 1796 0 14 Dtool_kAOMkeY6 1 4 this 3 1876  
604 14 Dtool_kAOM5Wo7 4 644 1783 0 14 Dtool_kAOM5Wo7 3 4 this 3 1900  5 index 1 1796  6 vertex 1 1866  
605 14 Dtool_kAOMFsKW 7 645 1866 1086 14 Dtool_kAOMFsKW 2 4 this 3 1876  5 index 1 1796  
606 14 Dtool_kAOMm7xE 6 646 1834 0 14 Dtool_kAOMm7xE 1 4 this 3 1876  
607 14 Dtool_kAOMCGI9 4 647 1783 0 14 Dtool_kAOMCGI9 3 4 this 3 1876  3 out 1 1789  12 indent_level 1 1796  
608 14 Dtool_kAOMG9YA 4 648 1783 0 14 Dtool_kAOMG9YA 1 4 this 3 1876  
609 14 Dtool_kAOM2RY6 7 649 1779 0 14 Dtool_kAOM2RY6 0 
610 14 Dtool_kAOM2w28 7 594 1792 932 14 Dtool_kAOM2w28 1 4 this 3 1900  
611 14 Dtool_kAOMUoMZ 7 595 1900 1420 14 Dtool_kAOMUoMZ 1 4 this 3 1792  
612 14 Dtool_kAOM6ts2 6 596 1807 0 14 Dtool_kAOM6ts2 1 4 this 3 1900  
613 14 Dtool_kAOMcB04 7 597 1900 1420 14 Dtool_kAOMcB04 1 4 this 3 1807  
614 14 Dtool_kAOM9Jj3 6 598 1802 0 14 Dtool_kAOM9Jj3 1 4 this 3 1900  
615 14 Dtool_kAOMZds5 7 599 1900 1420 14 Dtool_kAOMZds5 1 4 this 3 1802  
616 14 Dtool_kAOMXTIC 7 651 1901 1420 14 Dtool_kAOMXTIC 2 4 this 3 1901  4 copy 1 1902  
617 14 Dtool_kAOMwm0G 6 652 1796 0 14 Dtool_kAOMwm0G 1 4 this 3 1902  
618 14 Dtool_kAOMXohz 6 653 1807 0 14 Dtool_kAOMXohz 2 4 this 3 1901  1 i 1 1796  
619 14 Dtool_kAOM_Yun 6 653 1808 0 14 Dtool_kAOM_Yun 2 4 this 3 1902  1 i 1 1796  
620 14 Dtool_kAOMqTJg 4 654 1783 0 14 Dtool_kAOMqTJg 3 4 this 3 1901  1 i 1 1796  6 attrib 1 1808  
621 14 Dtool_kAOM81Mv 6 655 1784 0 14 Dtool_kAOM81Mv 2 4 this 3 1902  9 container 1 1795  
622 14 Dtool_kAOM3sTt 7 656 1901 1420 14 Dtool_kAOM3sTt 1 4 this 3 1901  
623 14 Dtool_kAOMflzy 7 657 1779 0 14 Dtool_kAOMflzy 0 
624 14 Dtool_kAOM_Tjy 7 659 1904 1495 14 Dtool_kAOM_Tjy 0 
625 14 Dtool_kAOMYDEk 7 659 1904 1495 14 Dtool_kAOMYDEk 1 4 copy 1 1905  
626 14 Dtool_kAOMdsvy 7 660 1904 1495 14 Dtool_kAOMdsvy 2 4 this 3 1904  4 copy 1 1905  
627 14 Dtool_kAOMqWzm 6 661 1784 0 14 Dtool_kAOMqWzm 2 12 egg_filename 1 1907  10 searchpath 1 1824  
628 14 Dtool_kAOM_5ZW 6 661 1784 0 14 Dtool_kAOM_5ZW 1 12 egg_filename 1 1907  
629 14 Dtool_kAOMR9jy 6 662 1784 0 14 Dtool_kAOMR9jy 3 4 this 3 1904  8 filename 1 1907  12 display_name 1 1788  
630 14 Dtool_kAOM8ZNq 6 662 1784 0 14 Dtool_kAOM8ZNq 2 4 this 3 1904  8 filename 1 1907  
631 14 Dtool_kAOMluzF 6 662 1784 0 14 Dtool_kAOMluzF 2 4 this 3 1904  2 in 1 1908  
632 14 Dtool_kAOMvw2D 4 663 1783 0 14 Dtool_kAOMvw2D 2 4 this 3 1904  5 other 1 1904  
633 14 Dtool_kAOMEkdE 6 664 1784 0 14 Dtool_kAOMEkdE 2 4 this 3 1904  10 searchpath 1 1824  
634 14 Dtool_kAOMlY7S 6 664 1784 0 14 Dtool_kAOMlY7S 1 4 this 3 1904  
635 14 Dtool_kAOMfumv 6 665 1796 0 14 Dtool_kAOMfumv 1 4 this 3 1904  
636 14 Dtool_kAOMGkhb 6 666 1796 0 14 Dtool_kAOMGkhb 1 4 this 3 1904  
637 14 Dtool_kAOMUZKh 6 667 1784 0 14 Dtool_kAOMUZKh 2 4 this 3 1904  8 filename 1 1907  
638 14 Dtool_kAOMOkbY 6 667 1784 0 14 Dtool_kAOMOkbY 2 4 this 3 1904  3 out 1 1789  
639 14 Dtool_kAOMkJsK 4 668 1783 0 14 Dtool_kAOMkJsK 2 4 this 3 1904  7 resolve 1 1784  
640 14 Dtool_kAOMVTWc 6 669 1784 0 14 Dtool_kAOMVTWc 1 4 this 3 1905  
641 14 Dtool_kAOMLqtE 6 670 1784 0 14 Dtool_kAOMLqtE 1 4 this 3 1905  
642 14 Dtool_kAOMwPUu 4 671 1783 0 14 Dtool_kAOMwPUu 2 4 this 3 1904  8 coordsys 1 1830  
643 14 Dtool_kAOMW4K_ 6 672 1830 0 14 Dtool_kAOMW4K_ 1 4 this 3 1905  
644 14 Dtool_kAOMgZ_q 4 673 1783 0 14 Dtool_kAOMgZ_q 2 4 this 3 1904  13 egg_filenamea 1 1827  
645 14 Dtool_kAOMOvC5 6 674 1827 0 14 Dtool_kAOMOvC5 1 4 this 3 1905  
646 14 Dtool_kAOMHKMn 4 675 1783 0 14 Dtool_kAOMHKMn 2 4 this 3 1904  9 threshold 1 1806  
647 14 Dtool_kAOMI60Q 4 676 1783 0 14 Dtool_kAOMI60Q 1 4 this 3 1904  
648 14 Dtool_kAOMMttE 4 677 1783 0 14 Dtool_kAOMMttE 1 4 this 3 1904  
649 14 Dtool_kAOMDr_V 7 678 1779 0 14 Dtool_kAOMDr_V 0 
650 14 Dtool_kAOM9d8E 7 681 1910 1503 14 Dtool_kAOM9d8E 2 4 this 3 1910  4 copy 1 1911  
651 14 Dtool_kAOM6saC 4 683 1783 0 14 Dtool_kAOM6saC 2 4 this 3 1910  6 subdiv 1 1796  
652 14 Dtool_kAOM_WHg 6 684 1796 0 14 Dtool_kAOM_WHg 1 4 this 3 1911  
653 14 Dtool_kAOMupv_ 4 685 1783 0 14 Dtool_kAOMupv_ 2 4 this 3 1910  4 type 1 1752  
654 14 Dtool_kAOM6DD5 6 686 1752 0 14 Dtool_kAOM6DD5 1 4 this 3 1911  
655 14 Dtool_kAOM5L8d 6 687 1752 0 14 Dtool_kAOM5L8d 1 6 string 1 1788  
656 14 Dtool_kAOMsThz 7 688 1779 0 14 Dtool_kAOMsThz 0 
657 14 Dtool_kAOM_0_W 7 691 1915 1507 14 Dtool_kAOM_0_W 1 4 copy 1 1913  
658 14 Dtool_kAOM8ySO 7 691 1915 1507 14 Dtool_kAOM8ySO 2 9 node_name 1 1788  8 filename 1 1788  
659 14 Dtool_kAOMmtLn 7 692 1915 1507 14 Dtool_kAOMmtLn 2 4 this 3 1915  4 copy 1 1913  
660 14 Dtool_kAOMp9UM 7 693 1779 0 14 Dtool_kAOMp9UM 0 
661 14 Dtool_kAOM8kwb 4 696 1783 0 14 Dtool_kAOM8kwb 1 4 this 3 1916  
662 14 Dtool_kAOMeFPl 4 697 1783 0 14 Dtool_kAOMeFPl 2 4 this 3 1916  4 node 1 1792  
663 14 Dtool_kAOMOi3s 7 698 1792 932 14 Dtool_kAOMOi3s 3 4 this 3 1917  8 category 1 1788  4 name 1 1788  
664 14 Dtool_kAOMXkGH 6 699 1784 0 14 Dtool_kAOMXkGH 3 4 this 3 1917  8 category 1 1788  4 name 1 1788  
665 14 Dtool_kAOMEft2 6 700 1784 0 14 Dtool_kAOMEft2 4 4 this 3 1916  8 category 1 1788  4 name 1 1788  4 node 1 1792  
666 14 Dtool_kAOMYHHH 6 700 1784 0 14 Dtool_kAOMYHHH 3 4 this 3 1916  8 category 1 1788  4 name 1 1788  
667 14 Dtool_kAOM3vi3 6 701 1788 0 14 Dtool_kAOM3vi3 2 4 this 3 1916  4 node 1 1792  
668 14 Dtool_kAOMEi4Q 6 702 1788 0 14 Dtool_kAOMEi4Q 2 4 this 3 1916  4 node 1 1792  
669 14 Dtool_kAOM1Kmh 6 703 1788 0 14 Dtool_kAOM1Kmh 4 4 this 3 1916  4 node 1 1792  8 category 1 1788  5 index 1 1796  
670 14 Dtool_kAOMDsSt 7 704 1779 0 14 Dtool_kAOMDsSt 0 
671 14 Dtool_kAOM0C8Z 7 706 1919 1519 14 Dtool_kAOM0C8Z 1 12 filter_names 1 1784  
672 14 Dtool_kAOM6jri 7 706 1919 1519 14 Dtool_kAOM6jri 0 
673 14 Dtool_kAOMgoSO 7 707 1779 0 14 Dtool_kAOMgoSO 0 
674 14 Dtool_kAOMDrFz 7 710 1922 1420 14 Dtool_kAOMDrFz 1 4 copy 1 1920  
675 14 Dtool_kAOMX4DQ 7 710 1922 1420 14 Dtool_kAOMX4DQ 1 4 name 1 1788  
676 14 Dtool_kAOMJipL 7 710 1922 1420 14 Dtool_kAOMJipL 0 
677 14 Dtool_kAOMvLAZ 7 711 1922 1420 14 Dtool_kAOMvLAZ 2 4 this 3 1922  4 copy 1 1920  
678 14 Dtool_kAOM0ujY 6 712 1784 0 14 Dtool_kAOM0ujY 1 4 this 3 1920  
679 14 Dtool_kAOMyGRj 6 713 1806 0 14 Dtool_kAOMyGRj 1 4 this 3 1920  
680 14 Dtool_kAOMxUAE 4 714 1783 0 14 Dtool_kAOMxUAE 2 4 this 3 1922  5 thick 1 1806  
681 14 Dtool_kAOMf5MK 4 715 1783 0 14 Dtool_kAOMf5MK 1 4 this 3 1922  
682 14 Dtool_kAOMZ1pB 7 716 1779 0 14 Dtool_kAOMZ1pB 0 
683 14 Dtool_kAOM2_LL 7 718 1923 1529 14 Dtool_kAOM2_LL 0 
684 14 Dtool_kAOMI3vE 7 718 1923 1529 14 Dtool_kAOMI3vE 1 4 copy 1 1924  
685 14 Dtool_kAOMEcH7 6 719 1923 0 14 Dtool_kAOMEcH7 2 4 this 3 1923  4 copy 1 1924  
686 14 Dtool_kAOMUC81 4 721 1783 0 14 Dtool_kAOMUC81 1 4 this 3 1923  
687 14 Dtool_kAOMOymL 6 722 1796 0 14 Dtool_kAOMOymL 2 4 this 3 1923  4 node 1 1795  
688 14 Dtool_kAOMxG5C 6 723 1796 0 14 Dtool_kAOMxG5C 2 4 this 3 1923  4 node 1 1792  
689 14 Dtool_kAOM74xc 4 724 1783 0 14 Dtool_kAOM74xc 2 4 this 3 1923  4 node 1 1792  
690 14 Dtool_kAOM8xlm 6 725 1796 0 14 Dtool_kAOM8xlm 3 4 this 3 1923  2 eq 1 1796  4 node 1 1795  
691 14 Dtool_kAOMV3rv 6 725 1796 0 14 Dtool_kAOMV3rv 3 4 this 3 1923  2 eq 1 1796  7 removed 1 1926  
692 14 Dtool_kAOM0Vhs 4 726 1783 0 14 Dtool_kAOM0Vhs 2 4 node 1 1795  7 replace 1 1928  
693 14 Dtool_kAOMcBOS 4 727 1783 0 14 Dtool_kAOMcBOS 1 4 this 3 1923  
694 14 Dtool_kAOMs9_r 4 728 1783 0 14 Dtool_kAOMs9_r 1 4 this 3 1923  
695 14 Dtool_kAOMJriL 6 729 1784 0 14 Dtool_kAOMJriL 2 4 this 3 1923  8 material 1 1899  
696 14 Dtool_kAOMzqxK 6 730 1784 0 14 Dtool_kAOMzqxK 2 4 this 3 1923  8 material 1 1899  
697 14 Dtool_kAOMyOi1 7 731 1899 1412 14 Dtool_kAOMyOi1 3 4 this 3 1923  4 copy 1 1897  2 eq 1 1796  
698 14 Dtool_kAOMcDwq 7 732 1899 1412 14 Dtool_kAOMcDwq 2 4 this 3 1924  9 mref_name 1 1788  
699 14 Dtool_kAOMBdMA 7 734 1834 932 14 Dtool_kAOMBdMA 1 4 copy 1 1930  
700 14 Dtool_kAOMY_4J 7 734 1834 932 14 Dtool_kAOMY_4J 1 4 name 1 1788  
701 14 Dtool_kAOMrRQ_ 6 735 1784 0 14 Dtool_kAOMrRQ_ 2 4 this 3 1930  5 index 1 1796  
702 14 Dtool_kAOMKc1J 6 736 1784 0 14 Dtool_kAOMKc1J 1 4 this 3 1930  
703 14 Dtool_kAOMsCOx 6 737 1784 0 14 Dtool_kAOMsCOx 1 4 this 3 1930  
704 14 Dtool_kAOM_O2t 7 738 1866 1086 14 Dtool_kAOM_O2t 2 4 this 3 1930  5 index 1 1796  
705 14 Dtool_kAOMGe06 7 739 1866 1086 14 Dtool_kAOMGe06 2 4 this 3 1930  5 index 1 1796  
706 14 Dtool_kAOMB8Di 7 740 1866 1086 14 Dtool_kAOMB8Di 2 4 this 3 1834  5 index 1 1796  
707 14 Dtool_kAOMX2qU 6 741 1796 0 14 Dtool_kAOMX2qU 1 4 this 3 1930  
708 14 Dtool_kAOMm_MH 4 742 1783 0 14 Dtool_kAOMm_MH 2 4 this 3 1834  13 highest_index 1 1796  
709 14 Dtool_kAOMk7ro 6 743 1796 0 14 Dtool_kAOMk7ro 1 4 this 3 1930  
710 14 Dtool_kAOMfhjn 6 744 1784 0 14 Dtool_kAOMfhjn 1 4 this 3 1930  
711 14 Dtool_kAOM1q_C 6 745 1784 0 14 Dtool_kAOM1q_C 1 4 this 3 1930  
712 14 Dtool_kAOMmTXK 6 746 1784 0 14 Dtool_kAOMmTXK 1 4 this 3 1930  
713 14 Dtool_kAOMZ_MQ 4 747 1783 0 14 Dtool_kAOMZ_MQ 4 4 this 3 1930  8 uv_names 1 1800  9 uvw_names 1 1800  9 tbn_names 1 1800  
714 14 Dtool_kAOMG7Zj 7 748 1866 1086 14 Dtool_kAOMG7Zj 3 4 this 3 1834  6 vertex 1 1866  5 index 1 1796  
715 14 Dtool_kAOMiMXH 7 748 1866 1086 14 Dtool_kAOMiMXH 2 4 this 3 1834  6 vertex 1 1866  
716 14 Dtool_kAOMPbgz 7 749 1866 1086 14 Dtool_kAOMPbgz 1 4 this 3 1834  
717 14 Dtool_kAOMmAmN 7 749 1866 1086 14 Dtool_kAOMmAmN 2 4 this 3 1834  3 pos 1 1859  
718 14 Dtool_kAOM_DGR 7 749 1866 1086 14 Dtool_kAOM_DGR 2 4 this 3 1834  3 pos 1 1862  
719 14 Dtool_kAOMUCmU 7 749 1866 1086 14 Dtool_kAOMUCmU 2 4 this 3 1834  3 pos 1 1869  
720 14 Dtool_kAOMqB5d 7 749 1866 1086 14 Dtool_kAOMqB5d 2 4 this 3 1834  3 pos 1 1806  
721 14 Dtool_kAOM6VIP 7 750 1866 1086 14 Dtool_kAOM6VIP 2 4 this 3 1834  4 copy 1 1867  
722 14 Dtool_kAOMJ0C_ 4 751 1783 0 14 Dtool_kAOMJ0C_ 2 4 this 3 1834  6 vertex 1 1866  
723 14 Dtool_kAOMrkZg 6 752 1796 0 14 Dtool_kAOMrkZg 1 4 this 3 1834  
724 14 Dtool_kAOMh7hw 4 753 1783 0 14 Dtool_kAOMh7hw 2 4 this 3 1834  3 mat 1 1797  
725 14 Dtool_kAOMOYkz 7 754 1779 0 14 Dtool_kAOMOYkz 0 
726 14 Dtool_kAOMXJZS 7 756 1934 1571 14 Dtool_kAOMXJZS 1 4 copy 1 1932  
727 14 Dtool_kAOMUWBj 7 756 1934 1571 14 Dtool_kAOMUWBj 1 4 name 1 1788  
728 14 Dtool_kAOMO3JE 7 756 1934 1571 14 Dtool_kAOMO3JE 0 
729 14 Dtool_kAOMG5ro 7 757 1934 1571 14 Dtool_kAOMG5ro 2 4 this 3 1934  4 copy 1 1932  
730 14 Dtool_kAOM1KP0 6 758 1784 0 14 Dtool_kAOM1KP0 3 4 this 3 1932  6 result 1 1935  2 cs 1 1830  
731 14 Dtool_kAOM7k0F 6 758 1784 0 14 Dtool_kAOM7k0F 2 4 this 3 1932  6 result 1 1935  
732 14 Dtool_kAOMMiG7 6 759 1784 0 14 Dtool_kAOMMiG7 1 4 this 3 1932  
733 14 Dtool_kAOMPIIR 6 760 1784 0 14 Dtool_kAOMPIIR 2 4 this 3 1934  2 cs 1 1830  
734 14 Dtool_kAOM5vES 6 760 1784 0 14 Dtool_kAOM5vES 1 4 this 3 1934  
735 14 Dtool_kAOMMg0u 6 761 1784 0 14 Dtool_kAOMMg0u 3 4 this 3 1932  9 container 1 1795  11 convex_also 1 1784  
736 14 Dtool_kAOMdd1f 7 762 1934 1571 14 Dtool_kAOMdd1f 2 4 this 3 1934  11 convex_also 1 1784  
737 14 Dtool_kAOMuGjd 7 763 1779 0 14 Dtool_kAOMuGjd 0 
738 14 Dtool_kAOMSb5s 7 766 1938 1586 14 Dtool_kAOMSb5s 1 4 copy 1 1936  
739 14 Dtool_kAOMqKMX 7 766 1938 1586 14 Dtool_kAOMqKMX 1 4 name 1 1788  
740 14 Dtool_kAOM8ypa 7 766 1938 1586 14 Dtool_kAOM8ypa 0 
741 14 Dtool_kAOMetUP 7 767 1938 1586 14 Dtool_kAOMetUP 2 4 this 3 1938  4 copy 1 1936  
742 14 Dtool_kAOM1I_P 4 768 1783 0 14 Dtool_kAOM1I_P 3 4 this 3 1938  5 order 1 1796  9 num_knots 1 1796  
743 14 Dtool_kAOM6zeh 4 769 1783 0 14 Dtool_kAOM6zeh 2 4 this 3 1938  5 order 1 1796  
744 14 Dtool_kAOM_mS3 4 770 1783 0 14 Dtool_kAOM_mS3 2 4 this 3 1938  3 num 1 1796  
745 14 Dtool_kAOMsz1o 4 771 1783 0 14 Dtool_kAOMsz1o 3 4 this 3 1938  1 k 1 1796  5 value 1 1806  
746 14 Dtool_kAOMXgbF 6 772 1784 0 14 Dtool_kAOMXgbF 1 4 this 3 1936  
747 14 Dtool_kAOMU0kx 6 773 1796 0 14 Dtool_kAOMU0kx 1 4 this 3 1936  
748 14 Dtool_kAOMa0DG 6 774 1796 0 14 Dtool_kAOMa0DG 1 4 this 3 1936  
749 14 Dtool_kAOMBXkq 6 775 1796 0 14 Dtool_kAOMBXkq 1 4 this 3 1936  
750 14 Dtool_kAOMyBqz 6 776 1796 0 14 Dtool_kAOMyBqz 1 4 this 3 1936  
751 14 Dtool_kAOM07Jv 6 777 1784 0 14 Dtool_kAOM07Jv 1 4 this 3 1936  
752 14 Dtool_kAOMYx8U 6 778 1806 0 14 Dtool_kAOMYx8U 2 4 this 3 1936  1 k 1 1796  
753 14 Dtool_kAOMTsQD 7 779 1779 0 14 Dtool_kAOMTsQD 0 
754 14 Dtool_kAOM6fZQ 7 782 1939 1593 14 Dtool_kAOM6fZQ 2 4 this 3 1939  4 copy 1 1940  
755 14 Dtool_kAOMD1tU 4 783 1783 0 14 Dtool_kAOMD1tU 2 4 this 3 1939  6 subdiv 1 1796  
756 14 Dtool_kAOM1xT9 6 784 1796 0 14 Dtool_kAOM1xT9 1 4 this 3 1940  
757 14 Dtool_kAOMDplZ 4 785 1783 0 14 Dtool_kAOMDplZ 2 4 this 3 1939  6 subdiv 1 1796  
758 14 Dtool_kAOM0VLC 6 786 1796 0 14 Dtool_kAOM0VLC 1 4 this 3 1940  
759 14 Dtool_kAOMjy4J 7 787 1779 0 14 Dtool_kAOMjy4J 0 
760 14 Dtool_kAOMuTpN 7 790 1944 1605 14 Dtool_kAOMuTpN 1 4 copy 1 1942  
761 14 Dtool_kAOMWhKI 7 790 1944 1605 14 Dtool_kAOMWhKI 1 4 name 1 1788  
762 14 Dtool_kAOMHYEZ 7 790 1944 1605 14 Dtool_kAOMHYEZ 0 
763 14 Dtool_kAOMxU3B 7 791 1944 1605 14 Dtool_kAOMxU3B 2 4 this 3 1944  4 copy 1 1942  
764 14 Dtool_kAOMYocj 6 792 1784 0 14 Dtool_kAOMYocj 1 4 this 3 1942  
765 14 Dtool_kAOM_pP7 6 793 1806 0 14 Dtool_kAOM_pP7 1 4 this 3 1942  
766 14 Dtool_kAOMOlOS 4 794 1783 0 14 Dtool_kAOMOlOS 2 4 this 3 1944  5 thick 1 1806  
767 14 Dtool_kAOMIAtY 4 795 1783 0 14 Dtool_kAOMIAtY 1 4 this 3 1944  
768 14 Dtool_kAOM5O26 6 796 1784 0 14 Dtool_kAOM5O26 1 4 this 3 1942  
769 14 Dtool_kAOMfOpS 6 797 1784 0 14 Dtool_kAOMfOpS 1 4 this 3 1942  
770 14 Dtool_kAOMYNHn 4 798 1783 0 14 Dtool_kAOMYNHn 2 4 this 3 1944  11 perspective 1 1784  
771 14 Dtool_kAOMaKhD 4 799 1783 0 14 Dtool_kAOMaKhD 1 4 this 3 1944  
772 14 Dtool_kAOMmIlG 7 800 1779 0 14 Dtool_kAOMmIlG 0 
773 14 Dtool_kAOMS2yw 7 805 1945 1609 14 Dtool_kAOMS2yw 0 
774 14 Dtool_kAOMlQny 4 806 1783 0 14 Dtool_kAOMlQny 2 4 this 3 1945  10 properties 1 1796  
775 14 Dtool_kAOM9ANi 7 807 1779 0 14 Dtool_kAOM9ANi 0 
776 14 Dtool_kAOMI_S9 7 810 1946 1612 14 Dtool_kAOMI_S9 0 
777 14 Dtool_kAOMxbrf 7 811 1779 0 14 Dtool_kAOMxbrf 0 
778 14 Dtool_kAOMKf_r 7 814 1949 1620 14 Dtool_kAOMKf_r 1 4 copy 1 1947  
779 14 Dtool_kAOMaUFB 7 814 1949 1620 14 Dtool_kAOMaUFB 1 4 name 1 1788  
780 14 Dtool_kAOMhDOv 7 814 1949 1620 14 Dtool_kAOMhDOv 0 
781 14 Dtool_kAOM9kyZ 7 815 1949 1620 14 Dtool_kAOM9kyZ 2 4 this 3 1949  4 copy 1 1947  
782 14 Dtool_kAOMpyvE 6 816 1796 0 14 Dtool_kAOMpyvE 1 4 this 3 1947  
783 14 Dtool_kAOMtEEc 6 817 1806 0 14 Dtool_kAOMtEEc 2 4 this 3 1947  3 row 1 1796  
784 14 Dtool_kAOMS9Mu 4 818 1783 0 14 Dtool_kAOMS9Mu 3 4 this 3 1949  3 row 1 1796  5 value 1 1806  
785 14 Dtool_kAOML8bt 4 819 1783 0 14 Dtool_kAOML8bt 1 4 this 3 1949  
786 14 Dtool_kAOMmWjq 7 820 1779 0 14 Dtool_kAOMmWjq 0 
787 14 Dtool_kAOM4E8v 7 824 1952 1628 14 Dtool_kAOM4E8v 1 4 copy 1 1950  
788 14 Dtool_kAOMTQ_y 7 824 1952 1628 14 Dtool_kAOMTQ_y 1 4 name 1 1788  
789 14 Dtool_kAOMSp2D 7 824 1952 1628 14 Dtool_kAOMSp2D 0 
790 14 Dtool_kAOMxP6Z 7 825 1952 1628 14 Dtool_kAOMxP6Z 2 4 this 3 1952  4 copy 1 1950  
791 14 Dtool_kAOM_8_9 4 826 1783 0 14 Dtool_kAOM_8_9 2 4 this 3 1952  4 type 1 1769  
792 14 Dtool_kAOMaj1_ 6 827 1769 0 14 Dtool_kAOMaj1_ 1 4 this 3 1950  
793 14 Dtool_kAOMZ_ev 6 828 1784 0 14 Dtool_kAOMZ_ev 1 4 this 3 1950  
794 14 Dtool_kAOMg8gw 6 829 1769 0 14 Dtool_kAOMg8gw 1 6 string 1 1788  
795 14 Dtool_kAOMS_i1 7 830 1779 0 14 Dtool_kAOMS_i1 0 
796 14 Dtool_kAOMbU7L 7 833 1953 1631 14 Dtool_kAOMbU7L 0 
797 14 Dtool_kAOM8vVa 7 833 1953 1631 14 Dtool_kAOM8vVa 1 4 copy 1 1954  
798 14 Dtool_kAOMw9Zk 6 834 1953 0 14 Dtool_kAOMw9Zk 2 4 this 3 1953  4 copy 1 1954  
799 14 Dtool_kAOMGhyi 4 836 1783 0 14 Dtool_kAOMGhyi 1 4 this 3 1953  
800 14 Dtool_kAOMrcPl 6 837 1796 0 14 Dtool_kAOMrcPl 2 4 this 3 1953  4 node 1 1795  
801 14 Dtool_kAOM8UpD 6 838 1784 0 14 Dtool_kAOM8UpD 1 4 this 3 1954  
802 14 Dtool_kAOMsDuL 6 839 1796 0 14 Dtool_kAOMsDuL 1 4 this 3 1954  
803 14 Dtool_kAOMWocW 7 840 1896 1287 14 Dtool_kAOMWocW 2 4 this 3 1954  5 index 1 1796  
804 14 Dtool_kAOMKek0 6 841 1796 0 14 Dtool_kAOMKek0 2 4 this 3 1953  4 node 1 1792  
805 14 Dtool_kAOM9oZ4 4 842 1783 0 14 Dtool_kAOM9oZ4 2 4 this 3 1953  4 node 1 1792  
806 14 Dtool_kAOMqFH7 6 843 1796 0 14 Dtool_kAOMqFH7 3 4 this 3 1953  2 eq 1 1796  4 node 1 1795  
807 14 Dtool_kAOMKhTa 6 843 1796 0 14 Dtool_kAOMKhTa 3 4 this 3 1953  2 eq 1 1796  7 removed 1 1956  
808 14 Dtool_kAOMeVh6 4 844 1783 0 14 Dtool_kAOMeVh6 2 4 node 1 1795  7 replace 1 1958  
809 14 Dtool_kAOMalB_ 4 845 1783 0 14 Dtool_kAOMalB_ 1 4 this 3 1953  
810 14 Dtool_kAOM1R_8 4 846 1783 0 14 Dtool_kAOM1R_8 1 4 this 3 1953  
811 14 Dtool_kAOMOnfn 4 847 1783 0 14 Dtool_kAOMOnfn 1 4 this 3 1953  
812 14 Dtool_kAOMTk2Y 6 848 1784 0 14 Dtool_kAOMTk2Y 2 4 this 3 1953  7 texture 1 1896  
813 14 Dtool_kAOMyDeK 6 849 1784 0 14 Dtool_kAOMyDeK 2 4 this 3 1953  7 texture 1 1896  
814 14 Dtool_kAOMLULD 7 850 1896 1287 14 Dtool_kAOMLULD 3 4 this 3 1953  4 copy 1 1894  2 eq 1 1796  
815 14 Dtool_kAOM4Tew 7 851 1896 1287 14 Dtool_kAOM4Tew 2 4 this 3 1954  9 tref_name 1 1788  
816 14 Dtool_kAOMQxLn 7 852 1896 1287 14 Dtool_kAOMQxLn 2 4 this 3 1954  8 filename 1 1827  
817 14 Dtool_kAOMngwy 7 854 1962 1420 14 Dtool_kAOMngwy 1 4 copy 1 1960  
818 14 Dtool_kAOMTlzZ 7 854 1962 1420 14 Dtool_kAOMTlzZ 1 4 name 1 1788  
819 14 Dtool_kAOMHju4 7 854 1962 1420 14 Dtool_kAOMHju4 0 
820 14 Dtool_kAOM1N5q 7 855 1962 1420 14 Dtool_kAOM1N5q 2 4 this 3 1962  4 copy 1 1960  
821 14 Dtool_kAOMTtk9 7 856 1779 0 14 Dtool_kAOMTtk9 0 
822 14 Dtool_kAOMzlST 7 858 1965 1420 14 Dtool_kAOMzlST 1 4 copy 1 1963  
823 14 Dtool_kAOMx593 7 858 1965 1420 14 Dtool_kAOMx593 1 4 name 1 1788  
824 14 Dtool_kAOMgo8R 7 858 1965 1420 14 Dtool_kAOMgo8R 0 
825 14 Dtool_kAOMVjYd 7 859 1965 1420 14 Dtool_kAOMVjYd 2 4 this 3 1965  4 copy 1 1963  
826 14 Dtool_kAOMKwkg 7 860 1779 0 14 Dtool_kAOMKwkg 0 
827 14 Dtool_kAOMRYEx 7 862 1968 1678 14 Dtool_kAOMRYEx 1 12 convert_from 1 1966  
828 14 Dtool_kAOMmYOa 7 862 1968 1678 14 Dtool_kAOMmYOa 1 4 copy 1 1969  
829 14 Dtool_kAOMcgvp 7 862 1968 1678 14 Dtool_kAOMcgvp 2 4 name 1 1788  2 cs 1 1830  
830 14 Dtool_kAOM7lEE 7 862 1968 1678 14 Dtool_kAOM7lEE 1 4 name 1 1788  
831 14 Dtool_kAOMg0m6 7 862 1968 1678 14 Dtool_kAOMg0m6 0 
832 14 Dtool_kAOMBbhs 7 863 1968 1678 14 Dtool_kAOMBbhs 2 4 this 3 1968  4 copy 1 1969  
833 14 Dtool_kAOMsNjA 4 864 1783 0 14 Dtool_kAOMsNjA 2 4 this 3 1968  3 fps 1 1806  
834 14 Dtool_kAOM6b_o 4 865 1783 0 14 Dtool_kAOM6b_o 1 4 this 3 1968  
835 14 Dtool_kAOMfhuX 6 866 1784 0 14 Dtool_kAOMfhuX 1 4 this 3 1969  
836 14 Dtool_kAOMngbU 6 867 1806 0 14 Dtool_kAOMngbU 1 4 this 3 1969  
837 14 Dtool_kAOMW2jL 4 868 1783 0 14 Dtool_kAOMW2jL 2 4 this 3 1968  5 order 1 1788  
838 14 Dtool_kAOMfUuB 4 869 1783 0 14 Dtool_kAOMfUuB 1 4 this 3 1968  
839 14 Dtool_kAOM2pYT 6 870 1784 0 14 Dtool_kAOM2pYT 1 4 this 3 1969  
840 14 Dtool_kAOMcqDQ 6 871 1788 0 14 Dtool_kAOMcqDQ 1 4 this 3 1969  
841 14 Dtool_kAOMAIxi 6 872 1788 0 14 Dtool_kAOMAIxi 0 
842 14 Dtool_kAOMnUlS 6 873 1830 0 14 Dtool_kAOMnUlS 1 4 this 3 1969  
843 14 Dtool_kAOMqvPQ 4 874 1783 0 14 Dtool_kAOMqvPQ 1 4 this 3 1968  
844 14 Dtool_kAOMga25 4 875 1783 0 14 Dtool_kAOMga25 1 4 this 3 1968  
845 14 Dtool_kAOMsVux 4 876 1783 0 14 Dtool_kAOMsVux 1 4 this 3 1968  
846 14 Dtool_kAOMXO7Q 6 877 1796 0 14 Dtool_kAOMXO7Q 1 4 this 3 1969  
847 14 Dtool_kAOM4L7T 4 878 1783 0 14 Dtool_kAOM4L7T 3 4 this 3 1969  3 row 1 1796  3 mat 1 1971  
848 14 Dtool_kAOMIeZX 6 879 1784 0 14 Dtool_kAOMIeZX 3 4 this 3 1968  3 row 1 1796  3 mat 1 1797  
849 14 Dtool_kAOM4n4x 4 880 1783 0 14 Dtool_kAOM4n4x 1 4 this 3 1968  
850 14 Dtool_kAOMCJDG 6 881 1784 0 14 Dtool_kAOMCJDG 2 4 this 3 1968  3 mat 1 1797  
851 14 Dtool_kAOMAOJJ 4 882 1783 0 14 Dtool_kAOMAOJJ 3 4 this 3 1968  14 component_name 1 1788  5 value 1 1806  
852 14 Dtool_kAOMXAkq 4 882 1783 0 14 Dtool_kAOMXAkq 3 4 this 3 1968  9 component 1 1796  5 value 1 1806  
853 14 Dtool_kAOM3FmY 4 883 1783 0 14 Dtool_kAOM3FmY 7 3 mat 1 1971  5 scale 1 1849  5 shear 1 1849  3 hpr 1 1849  5 trans 1 1849  5 order 1 1788  2 cs 1 1830  
854 14 Dtool_kAOMm6HI 7 884 1779 0 14 Dtool_kAOMm6HI 0 
855 14 Dtool_kAOMb2RM 7 887 1972 1695 14 Dtool_kAOMb2RM 1 4 copy 1 1966  
856 14 Dtool_kAOMIOPW 7 887 1972 1695 14 Dtool_kAOMIOPW 1 12 convert_from 1 1969  
857 14 Dtool_kAOM4g06 7 887 1972 1695 14 Dtool_kAOM4g06 2 4 name 1 1788  2 cs 1 1830  
858 14 Dtool_kAOMwzqM 7 887 1972 1695 14 Dtool_kAOMwzqM 1 4 name 1 1788  
859 14 Dtool_kAOM9omr 7 887 1972 1695 14 Dtool_kAOM9omr 0 
860 14 Dtool_kAOMuTJ7 7 888 1972 1695 14 Dtool_kAOMuTJ7 2 4 this 3 1972  4 copy 1 1966  
861 14 Dtool_kAOMQOOI 4 889 1783 0 14 Dtool_kAOMQOOI 2 4 this 3 1972  5 order 1 1788  
862 14 Dtool_kAOMF43l 4 890 1783 0 14 Dtool_kAOMF43l 1 4 this 3 1972  
863 14 Dtool_kAOMpqB7 6 891 1784 0 14 Dtool_kAOMpqB7 1 4 this 3 1966  
864 14 Dtool_kAOMxPBu 6 892 1788 0 14 Dtool_kAOMxPBu 1 4 this 3 1966  
865 14 Dtool_kAOM4nKv 6 893 1788 0 14 Dtool_kAOM4nKv 0 
866 14 Dtool_kAOMf_7y 4 894 1783 0 14 Dtool_kAOMf_7y 2 4 this 3 1972  8 contents 1 1788  
867 14 Dtool_kAOMCl5p 4 895 1783 0 14 Dtool_kAOMCl5p 1 4 this 3 1972  
868 14 Dtool_kAOMjktg 6 896 1784 0 14 Dtool_kAOMjktg 1 4 this 3 1966  
869 14 Dtool_kAOMbBtT 6 897 1788 0 14 Dtool_kAOMbBtT 1 4 this 3 1966  
870 14 Dtool_kAOMFVWG 6 898 1830 0 14 Dtool_kAOMFVWG 1 4 this 3 1966  
871 14 Dtool_kAOMjSnu 6 899 1796 0 14 Dtool_kAOMjSnu 1 4 this 3 1966  
872 14 Dtool_kAOMf3hX 6 900 1796 0 14 Dtool_kAOMf3hX 1 4 this 3 1966  
873 14 Dtool_kAOMNC28 4 901 1783 0 14 Dtool_kAOMNC28 3 4 this 3 1966  3 row 1 1796  3 mat 1 1971  
874 14 Dtool_kAOM_V0v 6 901 1806 0 14 Dtool_kAOM_V0v 3 4 this 3 1966  3 row 1 1796  3 col 1 1796  
875 14 Dtool_kAOM0uoj 7 902 1779 0 14 Dtool_kAOM0uoj 0 
278
1696 11 EggUserData 75777 11 EggUserData 11 EggUserData 0 0 0 1 876 0 0 2 877 878 0 1 0 1697 0 0 0 0 632
////////////////////////////////////////////////////////////////////
//       Class : EggUserData
// Description : This is a base class for a user-defined data type to
//               extend egg structures in processing code.  The user
//               of the egg library may derive from EggUserData to
//               associate any arbitrary data with various egg
//               objects.
//
//               However, this data will not be written out to the
//               disk when the egg file is written; it is an in-memory
//               object only.
////////////////////////////////////////////////////////////////////

1697 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1698 9 EggObject 75777 9 EggObject 9 EggObject 0 0 0 1 879 0 0 6 880 881 882 883 884 885 0 1 0 1697 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : EggObject
// Description : The highest-level base class in the egg directory.
//               (Almost) all things egg inherit from this.
////////////////////////////////////////////////////////////////////

1699 14 EggNamedObject 141313 14 EggNamedObject 14 EggNamedObject 0 0 0 1 890 894 0 3 891 892 893 0 2 3 1698 886 887 3 1700 888 889 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : EggNamedObject
// Description : This is a fairly low-level base class--any egg
//               object that has a name.
////////////////////////////////////////////////////////////////////

1700 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1701 7 EggNode 141313 7 EggNode 7 EggNode 0 0 0 0 932 0 37 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 0 1 0 1699 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : EggNode
// Description : A base class for things that may be directly added
//               into the egg hierarchy.  This includes groups,
//               joints, polygons, vertex pools, etc., but does not
//               include things like vertices.
////////////////////////////////////////////////////////////////////

1702 11 EggAnimData 141313 11 EggAnimData 11 EggAnimData 0 0 0 0 943 0 10 933 934 935 936 937 938 939 940 941 942 0 1 0 1701 0 0 0 0 293
////////////////////////////////////////////////////////////////////
//       Class : EggAnimData
// Description : A base class for EggSAnimData and EggXfmAnimData,
//               which contain rows and columns of numbers.
////////////////////////////////////////////////////////////////////

1703 13 EggAttributes 26625 13 EggAttributes 13 EggAttributes 0 0 0 1 944 946 2 1974 1975 18 945 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 965 0 0 0 0 606
////////////////////////////////////////////////////////////////////
//       Class : EggAttributes
// Description : The set of attributes that may be applied to vertices
//               as well as polygons, such as surface normal and
//               color.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1704 37 EggMorphList< EggMorph< LVector3d > > 1050624 37 EggMorphList< EggMorph< LVector3d > > 37 EggMorphList< EggMorph< LVector3d > > 0 0 0 0 0 0 0 0 0 0 0 0

1705 37 EggMorphList< EggMorph< LVector4f > > 1050624 37 EggMorphList< EggMorph< LVector4f > > 37 EggMorphList< EggMorph< LVector4f > > 0 0 0 0 0 0 0 0 0 0 0 0

1706 12 EggGroupNode 75777 12 EggGroupNode 12 EggGroupNode 0 0 0 1 966 932 0 31 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 0 1 0 1701 0 0 0 1 1707 712
////////////////////////////////////////////////////////////////////
//       Class : EggGroupNode
// Description : A base class for nodes in the hierarchy that are not
//               leaf nodes.  (See also EggGroup, which is
//               specifically the "<Group>" node in egg.)
//
//               An EggGroupNode is an STL-style container of pointers
//               to EggNodes, like a vector.  Functions
//               push_back()/pop_back() and insert()/erase() are
//               provided to manipulate the list.  The list may also
//               be operated on (read-only) via iterators and
//               begin()/end().
////////////////////////////////////////////////////////////////////

1707 16 TriangulateFlags 794624 30 EggGroupNode::TriangulateFlags 30 EggGroupNode::TriangulateFlags 1706 0 0 0 0 0 0 0 0 5 9 T_polygon 23 EggGroupNode::T_polygon 1 8 T_convex 22 EggGroupNode::T_convex 2 11 T_composite 25 EggGroupNode::T_composite 4 9 T_recurse 23 EggGroupNode::T_recurse 8 13 T_flat_shaded 27 EggGroupNode::T_flat_shaded 16 0 0

1708 13 EggRenderMode 141313 13 EggRenderMode 13 EggRenderMode 0 0 0 1 998 1025 0 26 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 0 0 0 4 1709 1710 1711 1712 827
////////////////////////////////////////////////////////////////////
//       Class : EggRenderMode
// Description : This class stores miscellaneous rendering properties
//               that is associated with geometry, and which may be
//               set on the geometry primitive level, on the group
//               above it, or indirectly via a texture.  It's intended
//               to be a base class for egg objects that can have
//               these properties set.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1709 9 AlphaMode 794624 24 EggRenderMode::AlphaMode 24 EggRenderMode::AlphaMode 1708 0 0 0 0 0 0 0 0 9 14 AM_unspecified 29 EggRenderMode::AM_unspecified 0 6 AM_off 21 EggRenderMode::AM_off 1 5 AM_on 20 EggRenderMode::AM_on 2 8 AM_blend 23 EggRenderMode::AM_blend 3 19 AM_blend_no_occlude 34 EggRenderMode::AM_blend_no_occlude 4 5 AM_ms 20 EggRenderMode::AM_ms 5 10 AM_ms_mask 25 EggRenderMode::AM_ms_mask 6 9 AM_binary 24 EggRenderMode::AM_binary 7 7 AM_dual 22 EggRenderMode::AM_dual 8 0 0

1710 14 DepthWriteMode 794624 29 EggRenderMode::DepthWriteMode 29 EggRenderMode::DepthWriteMode 1708 0 0 0 0 0 0 0 0 3 15 DWM_unspecified 30 EggRenderMode::DWM_unspecified 0 7 DWM_off 22 EggRenderMode::DWM_off 1 6 DWM_on 21 EggRenderMode::DWM_on 2 0 0

1711 13 DepthTestMode 794624 28 EggRenderMode::DepthTestMode 28 EggRenderMode::DepthTestMode 1708 0 0 0 0 0 0 0 0 3 15 DTM_unspecified 30 EggRenderMode::DTM_unspecified 0 7 DTM_off 22 EggRenderMode::DTM_off 1 6 DTM_on 21 EggRenderMode::DTM_on 2 0 0

1712 14 VisibilityMode 794624 29 EggRenderMode::VisibilityMode 29 EggRenderMode::VisibilityMode 1708 0 0 0 0 0 0 0 0 3 14 VM_unspecified 29 EggRenderMode::VM_unspecified 0 9 VM_hidden 24 EggRenderMode::VM_hidden 1 9 VM_normal 24 EggRenderMode::VM_normal 2 0 0

1713 12 EggTransform 26625 12 EggTransform 12 EggTransform 0 0 0 1 1026 1028 0 30 1027 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 0 0 0 1 1714 579
////////////////////////////////////////////////////////////////////
//       Class : EggTransform
// Description : This represents the <Transform> entry of a group
//               or texture node: a list of component transform
//               operations, applied in order, that describe a net
//               transform matrix.  
//
//               This may be either a 3-d transform, and therefore
//               described by a 4x4 matrix, or a 2-d transform,
//               described by a 3x3 matrix.
////////////////////////////////////////////////////////////////////

1714 13 ComponentType 794624 27 EggTransform::ComponentType 27 EggTransform::ComponentType 1713 0 0 0 0 0 0 0 0 13 10 CT_invalid 24 EggTransform::CT_invalid 0 14 CT_translate2d 28 EggTransform::CT_translate2d 1 14 CT_translate3d 28 EggTransform::CT_translate3d 2 11 CT_rotate2d 25 EggTransform::CT_rotate2d 3 7 CT_rotx 21 EggTransform::CT_rotx 4 7 CT_roty 21 EggTransform::CT_roty 5 7 CT_rotz 21 EggTransform::CT_rotz 6 11 CT_rotate3d 25 EggTransform::CT_rotate3d 7 10 CT_scale2d 24 EggTransform::CT_scale2d 8 10 CT_scale3d 24 EggTransform::CT_scale3d 9 16 CT_uniform_scale 30 EggTransform::CT_uniform_scale 10 10 CT_matrix3 24 EggTransform::CT_matrix3 11 10 CT_matrix4 24 EggTransform::CT_matrix4 12 0 0

1715 11 EggVertexUV 75777 11 EggVertexUV 11 EggVertexUV 0 0 0 1 1058 894 1 1976 20 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1079 0 1 0 1699 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : EggVertexUV
// Description : The set of UV's that may or may not be assigned to a
//               vertex.  To support multitexturing, there may be
//               multiple sets of UV's on a particular vertex, each
//               with its own name.
////////////////////////////////////////////////////////////////////

1716 9 EggVertex 26625 9 EggVertex 9 EggVertex 0 0 0 1 1084 1086 1 1977 36 1085 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1122 0 2 3 1698 1080 1081 3 1703 1082 1083 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : EggVertex
// Description : Any one-, two-, three-, or four-component vertex,
//               possibly with attributes such as a normal.
////////////////////////////////////////////////////////////////////

1717 18 EggSwitchCondition 141313 18 EggSwitchCondition 18 EggSwitchCondition 0 0 0 0 1127 0 4 1123 1124 1125 1126 0 1 0 1698 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchCondition
// Description : This corresponds to a <SwitchCondition> entry within
//               a group.  It indicates the condition at which a
//               level-of-detail is switched in or out.  This is
//               actually an abstract base class for potentially any
//               number of specific different kinds of switching
//               conditions; presently, only a <Distance> type is
//               actually supported.
////////////////////////////////////////////////////////////////////

1718 8 EggGroup 26625 8 EggGroup 8 EggGroup 0 0 0 1 1134 1136 0 115 1135 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 0 3 3 1706 1128 1129 3 1708 1130 1131 3 1713 1132 1133 0 8 1719 1720 1721 1722 1723 1724 1725 1726 302
////////////////////////////////////////////////////////////////////
//       Class : EggGroup
// Description : The main glue of the egg hierarchy, this corresponds
//               to the <Group>, <Instance>, and <Joint> type nodes.
////////////////////////////////////////////////////////////////////

1719 9 GroupType 794624 19 EggGroup::GroupType 19 EggGroup::GroupType 1718 0 0 0 0 0 0 0 0 4 10 GT_invalid 20 EggGroup::GT_invalid -1 8 GT_group 18 EggGroup::GT_group 0 11 GT_instance 21 EggGroup::GT_instance 1 8 GT_joint 18 EggGroup::GT_joint 2 0 49
// These bits are all stored somewhere in _flags.

1720 8 DartType 794624 18 EggGroup::DartType 18 EggGroup::DartType 1718 0 0 0 0 0 0 0 0 4 7 DT_none 17 EggGroup::DT_none 0 7 DT_sync 17 EggGroup::DT_sync 4 9 DT_nosync 19 EggGroup::DT_nosync 8 10 DT_default 20 EggGroup::DT_default 12 0 0

1721 7 DCSType 794624 17 EggGroup::DCSType 17 EggGroup::DCSType 1718 0 0 0 0 0 0 0 0 5 14 DC_unspecified 24 EggGroup::DC_unspecified 0 7 DC_none 17 EggGroup::DC_none 16 8 DC_local 18 EggGroup::DC_local 32 6 DC_net 16 EggGroup::DC_net 48 10 DC_default 20 EggGroup::DC_default 64 0 0

1722 13 BillboardType 794624 23 EggGroup::BillboardType 23 EggGroup::BillboardType 1718 0 0 0 0 0 0 0 0 4 7 BT_none 17 EggGroup::BT_none 0 7 BT_axis 17 EggGroup::BT_axis 32 24 BT_point_camera_relative 34 EggGroup::BT_point_camera_relative 64 23 BT_point_world_relative 33 EggGroup::BT_point_world_relative 128 0 0

1723 18 CollisionSolidType 794624 28 EggGroup::CollisionSolidType 28 EggGroup::CollisionSolidType 1718 0 0 0 0 0 0 0 0 7 8 CST_none 18 EggGroup::CST_none 0 9 CST_plane 19 EggGroup::CST_plane 65536 11 CST_polygon 21 EggGroup::CST_polygon 131072 11 CST_polyset 21 EggGroup::CST_polyset 196608 10 CST_sphere 20 EggGroup::CST_sphere 262144 8 CST_tube 18 EggGroup::CST_tube 327680 14 CST_inv_sphere 24 EggGroup::CST_inv_sphere 393216 0 0

1724 12 CollideFlags 794624 22 EggGroup::CollideFlags 22 EggGroup::CollideFlags 1718 0 0 0 0 0 0 0 0 9 7 CF_none 17 EggGroup::CF_none 0 10 CF_descend 20 EggGroup::CF_descend 1048576 8 CF_event 18 EggGroup::CF_event 2097152 7 CF_keep 17 EggGroup::CF_keep 4194304 8 CF_solid 18 EggGroup::CF_solid 8388608 9 CF_center 19 EggGroup::CF_center 16777216 12 CF_turnstile 22 EggGroup::CF_turnstile 33554432 8 CF_level 18 EggGroup::CF_level 67108864 13 CF_intangible 23 EggGroup::CF_intangible 134217728 0 0

1725 9 BlendMode 794624 19 EggGroup::BlendMode 19 EggGroup::BlendMode 1718 0 0 0 0 0 0 0 0 7 14 BM_unspecified 24 EggGroup::BM_unspecified 0 7 BM_none 17 EggGroup::BM_none 1 6 BM_add 16 EggGroup::BM_add 2 11 BM_subtract 21 EggGroup::BM_subtract 3 15 BM_inv_subtract 25 EggGroup::BM_inv_subtract 4 6 BM_min 16 EggGroup::BM_min 5 6 BM_max 16 EggGroup::BM_max 6 0 68
// These correspond to ColorBlendAttrib::Mode (but not numerically).

1726 12 BlendOperand 794624 22 EggGroup::BlendOperand 22 EggGroup::BlendOperand 1718 0 0 0 0 0 0 0 0 20 14 BO_unspecified 24 EggGroup::BO_unspecified 0 7 BO_zero 17 EggGroup::BO_zero 1 6 BO_one 16 EggGroup::BO_one 2 17 BO_incoming_color 27 EggGroup::BO_incoming_color 3 27 BO_one_minus_incoming_color 37 EggGroup::BO_one_minus_incoming_color 4 16 BO_fbuffer_color 26 EggGroup::BO_fbuffer_color 5 26 BO_one_minus_fbuffer_color 36 EggGroup::BO_one_minus_fbuffer_color 6 17 BO_incoming_alpha 27 EggGroup::BO_incoming_alpha 7 27 BO_one_minus_incoming_alpha 37 EggGroup::BO_one_minus_incoming_alpha 8 16 BO_fbuffer_alpha 26 EggGroup::BO_fbuffer_alpha 9 26 BO_one_minus_fbuffer_alpha 36 EggGroup::BO_one_minus_fbuffer_alpha 10 17 BO_constant_color 27 EggGroup::BO_constant_color 11 27 BO_one_minus_constant_color 37 EggGroup::BO_one_minus_constant_color 12 17 BO_constant_alpha 27 EggGroup::BO_constant_alpha 13 27 BO_one_minus_constant_alpha 37 EggGroup::BO_one_minus_constant_alpha 14 26 BO_incoming_color_saturate 36 EggGroup::BO_incoming_color_saturate 15 14 BO_color_scale 24 EggGroup::BO_color_scale 16 24 BO_one_minus_color_scale 34 EggGroup::BO_one_minus_color_scale 17 14 BO_alpha_scale 24 EggGroup::BO_alpha_scale 18 24 BO_one_minus_alpha_scale 34 EggGroup::BO_one_minus_alpha_scale 19 0 71
// These correspond to ColorBlendAttrib::Operand (but not numerically).

1727 6 EggBin 141313 6 EggBin 6 EggBin 0 0 0 1 1251 1255 0 3 1252 1253 1254 0 1 0 1718 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : EggBin
// Description : A type of group node that holds related subnodes.
//               This is a special kind of node that will never be
//               read in from an egg file, but can only exist in the
//               egg scene graph if it is created via the use of an
//               EggBinMaker.
////////////////////////////////////////////////////////////////////

1728 11 EggBinMaker 75777 11 EggBinMaker 11 EggBinMaker 0 0 0 0 0 0 8 1256 1257 1258 1259 1260 1261 1262 1263 0 1 0 1698 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : EggBinMaker
// Description : This is a handy class for collecting related nodes
//               together.  It is an abstract class; to use it you
//               must subclass off of it.  See the somewhat lengthy
//               comment above.
////////////////////////////////////////////////////////////////////

1729 10 EggComment 141313 10 EggComment 10 EggComment 0 0 0 1 1264 1270 0 4 1265 1267 1268 1269 1 1266 1 0 1701 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : EggComment
// Description : A comment that appears in an egg file within a
//               <Comment> entry.
////////////////////////////////////////////////////////////////////

1730 15 EggFilenameNode 141313 15 EggFilenameNode 15 EggFilenameNode 0 0 0 0 1278 0 7 1271 1272 1273 1274 1275 1276 1277 0 1 0 1701 0 0 0 0 430
////////////////////////////////////////////////////////////////////
//       Class : EggFilenameNode
// Description : This is an egg node that contains a filename.  It
//               references a physical file relative to the directory
//               the egg file was loaded in.  It is a base class for
//               EggTexture and EggExternalReference.
////////////////////////////////////////////////////////////////////

1731 10 EggTexture 26625 10 EggTexture 10 EggTexture 0 0 0 1 1285 1287 0 97 1286 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 0 3 3 1730 1279 1280 3 1708 1281 1282 3 1713 1283 1284 0 13 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 254
////////////////////////////////////////////////////////////////////
//       Class : EggTexture
// Description : Defines a texture map that may be applied to
//               geometry.
////////////////////////////////////////////////////////////////////

1732 11 Equivalence 794624 23 EggTexture::Equivalence 23 EggTexture::Equivalence 1731 0 0 0 0 0 0 0 0 7 10 E_basename 22 EggTexture::E_basename 1 11 E_extension 23 EggTexture::E_extension 2 9 E_dirname 21 EggTexture::E_dirname 4 19 E_complete_filename 31 EggTexture::E_complete_filename 7 11 E_transform 23 EggTexture::E_transform 8 12 E_attributes 24 EggTexture::E_attributes 16 11 E_tref_name 23 EggTexture::E_tref_name 32 0 0

1733 11 TextureType 794624 23 EggTexture::TextureType 23 EggTexture::TextureType 1731 0 0 0 0 0 0 0 0 5 14 TT_unspecified 26 EggTexture::TT_unspecified 0 13 TT_1d_texture 25 EggTexture::TT_1d_texture 1 13 TT_2d_texture 25 EggTexture::TT_2d_texture 2 13 TT_3d_texture 25 EggTexture::TT_3d_texture 3 11 TT_cube_map 23 EggTexture::TT_cube_map 4 0 0

1734 6 Format 794624 18 EggTexture::Format 18 EggTexture::Format 1731 0 0 0 0 0 0 0 0 19 13 F_unspecified 25 EggTexture::F_unspecified 0 6 F_rgba 18 EggTexture::F_rgba 1 6 F_rgbm 18 EggTexture::F_rgbm 2 8 F_rgba12 20 EggTexture::F_rgba12 3 7 F_rgba8 19 EggTexture::F_rgba8 4 7 F_rgba4 19 EggTexture::F_rgba4 5 7 F_rgba5 19 EggTexture::F_rgba5 6 5 F_rgb 17 EggTexture::F_rgb 7 7 F_rgb12 19 EggTexture::F_rgb12 8 6 F_rgb8 18 EggTexture::F_rgb8 9 6 F_rgb5 18 EggTexture::F_rgb5 10 8 F_rgb332 20 EggTexture::F_rgb332 11 5 F_red 17 EggTexture::F_red 12 7 F_green 19 EggTexture::F_green 13 6 F_blue 18 EggTexture::F_blue 14 7 F_alpha 19 EggTexture::F_alpha 15 11 F_luminance 23 EggTexture::F_luminance 16 17 F_luminance_alpha 29 EggTexture::F_luminance_alpha 17 21 F_luminance_alphamask 33 EggTexture::F_luminance_alphamask 18 0 0

1735 15 CompressionMode 794624 27 EggTexture::CompressionMode 27 EggTexture::CompressionMode 1731 0 0 0 0 0 0 0 0 9 10 CM_default 22 EggTexture::CM_default 0 6 CM_off 18 EggTexture::CM_off 1 5 CM_on 17 EggTexture::CM_on 2 7 CM_fxt1 19 EggTexture::CM_fxt1 3 7 CM_dxt1 19 EggTexture::CM_dxt1 4 7 CM_dxt2 19 EggTexture::CM_dxt2 5 7 CM_dxt3 19 EggTexture::CM_dxt3 6 7 CM_dxt4 19 EggTexture::CM_dxt4 7 7 CM_dxt5 19 EggTexture::CM_dxt5 8 0 0

1736 8 WrapMode 794624 20 EggTexture::WrapMode 20 EggTexture::WrapMode 1731 0 0 0 0 0 0 0 0 6 14 WM_unspecified 26 EggTexture::WM_unspecified 0 8 WM_clamp 20 EggTexture::WM_clamp 1 9 WM_repeat 21 EggTexture::WM_repeat 2 9 WM_mirror 21 EggTexture::WM_mirror 3 14 WM_mirror_once 26 EggTexture::WM_mirror_once 4 15 WM_border_color 27 EggTexture::WM_border_color 5 0 0

1737 10 FilterType 794624 22 EggTexture::FilterType 22 EggTexture::FilterType 1731 0 0 0 0 0 0 0 0 7 14 FT_unspecified 26 EggTexture::FT_unspecified 0 10 FT_nearest 22 EggTexture::FT_nearest 1 9 FT_linear 21 EggTexture::FT_linear 2 25 FT_nearest_mipmap_nearest 37 EggTexture::FT_nearest_mipmap_nearest 3 24 FT_linear_mipmap_nearest 36 EggTexture::FT_linear_mipmap_nearest 4 24 FT_nearest_mipmap_linear 36 EggTexture::FT_nearest_mipmap_linear 5 23 FT_linear_mipmap_linear 35 EggTexture::FT_linear_mipmap_linear 6 0 0

1738 7 EnvType 794624 19 EggTexture::EnvType 19 EggTexture::EnvType 1731 0 0 0 0 0 0 0 0 7 14 ET_unspecified 26 EggTexture::ET_unspecified 0 11 ET_modulate 23 EggTexture::ET_modulate 1 8 ET_decal 20 EggTexture::ET_decal 2 8 ET_blend 20 EggTexture::ET_blend 3 10 ET_replace 22 EggTexture::ET_replace 4 6 ET_add 18 EggTexture::ET_add 5 20 ET_blend_color_scale 32 EggTexture::ET_blend_color_scale 6 0 21
// "mipmap trilinear"

1739 11 CombineMode 794624 23 EggTexture::CombineMode 23 EggTexture::CombineMode 1731 0 0 0 0 0 0 0 0 9 14 CM_unspecified 26 EggTexture::CM_unspecified 0 10 CM_replace 22 EggTexture::CM_replace 1 11 CM_modulate 23 EggTexture::CM_modulate 2 6 CM_add 18 EggTexture::CM_add 3 13 CM_add_signed 25 EggTexture::CM_add_signed 4 14 CM_interpolate 26 EggTexture::CM_interpolate 5 11 CM_subtract 23 EggTexture::CM_subtract 6 11 CM_dot3_rgb 23 EggTexture::CM_dot3_rgb 7 12 CM_dot3_rgba 24 EggTexture::CM_dot3_rgba 8 0 0

1740 14 CombineChannel 794624 26 EggTexture::CombineChannel 26 EggTexture::CombineChannel 1731 0 0 0 0 0 0 0 0 3 6 CC_rgb 18 EggTexture::CC_rgb 0 8 CC_alpha 20 EggTexture::CC_alpha 1 15 CC_num_channels 27 EggTexture::CC_num_channels 2 0 0

1741 12 CombineIndex 794624 24 EggTexture::CombineIndex 24 EggTexture::CombineIndex 1731 0 0 0 0 0 0 0 0 1 14 CI_num_indices 26 EggTexture::CI_num_indices 3 0 0

1742 13 CombineSource 794624 25 EggTexture::CombineSource 25 EggTexture::CombineSource 1731 0 0 0 0 0 0 0 0 7 14 CS_unspecified 26 EggTexture::CS_unspecified 0 10 CS_texture 22 EggTexture::CS_texture 1 11 CS_constant 23 EggTexture::CS_constant 2 16 CS_primary_color 28 EggTexture::CS_primary_color 3 11 CS_previous 23 EggTexture::CS_previous 4 23 CS_constant_color_scale 35 EggTexture::CS_constant_color_scale 5 20 CS_last_saved_result 32 EggTexture::CS_last_saved_result 6 0 0

1743 14 CombineOperand 794624 26 EggTexture::CombineOperand 26 EggTexture::CombineOperand 1731 0 0 0 0 0 0 0 0 5 14 CO_unspecified 26 EggTexture::CO_unspecified 0 12 CO_src_color 24 EggTexture::CO_src_color 1 22 CO_one_minus_src_color 34 EggTexture::CO_one_minus_src_color 2 12 CO_src_alpha 24 EggTexture::CO_src_alpha 3 22 CO_one_minus_src_alpha 34 EggTexture::CO_one_minus_src_alpha 4 0 0

1744 6 TexGen 794624 18 EggTexture::TexGen 18 EggTexture::TexGen 1731 0 0 0 0 0 0 0 0 9 14 TG_unspecified 26 EggTexture::TG_unspecified 0 17 TG_eye_sphere_map 29 EggTexture::TG_eye_sphere_map 1 17 TG_world_cube_map 29 EggTexture::TG_world_cube_map 2 15 TG_eye_cube_map 27 EggTexture::TG_eye_cube_map 3 15 TG_world_normal 27 EggTexture::TG_world_normal 4 13 TG_eye_normal 25 EggTexture::TG_eye_normal 5 17 TG_world_position 29 EggTexture::TG_world_position 6 15 TG_eye_position 27 EggTexture::TG_eye_position 7 15 TG_point_sprite 27 EggTexture::TG_point_sprite 8 0 0

1745 11 EggMaterial 141313 11 EggMaterial 11 EggMaterial 0 0 0 1 1384 1412 0 27 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 0 1 0 1701 0 0 0 1 1746 183
////////////////////////////////////////////////////////////////////
//       Class : EggMaterial
// Description :
////////////////////////////////////////////////////////////////////

1746 11 Equivalence 794624 24 EggMaterial::Equivalence 24 EggMaterial::Equivalence 1745 0 0 0 0 0 0 0 0 2 12 E_attributes 25 EggMaterial::E_attributes 1 11 E_mref_name 24 EggMaterial::E_mref_name 2 0 0

1747 12 EggPrimitive 26625 12 EggPrimitive 12 EggPrimitive 0 0 0 0 1420 0 48 1419 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 0 3 3 1701 1413 1414 3 1703 1415 1416 3 1708 1417 1418 0 1 1748 754
////////////////////////////////////////////////////////////////////
//       Class : EggPrimitive
// Description : A base class for any of a number of kinds of geometry
//               primitives: polygons, point lights, nurbs patches,
//               parametrics curves, etc.  Things with a set of
//               vertices and some rendering properties like color.
//
//               An EggPrimitive is an STL-style container of pointers
//               to EggVertex's.  In fact, it IS a vector, and can be
//               manipulated in all the ways that vectors can.
//               However, it is necessary that all vertices belong to
//               the same vertex pool.
////////////////////////////////////////////////////////////////////

1748 7 Shading 794624 21 EggPrimitive::Shading 21 EggPrimitive::Shading 1747 0 0 0 0 0 0 0 0 4 9 S_unknown 23 EggPrimitive::S_unknown 0 9 S_overall 23 EggPrimitive::S_overall 1 10 S_per_face 24 EggPrimitive::S_per_face 2 12 S_per_vertex 26 EggPrimitive::S_per_vertex 3 0 0

1749 21 EggCompositePrimitive 75777 21 EggCompositePrimitive 21 EggCompositePrimitive 0 0 0 0 1420 0 7 1468 1469 1470 1471 1472 1473 1474 0 1 0 1747 0 0 0 0 414
////////////////////////////////////////////////////////////////////
//       Class : EggCompositePrimitive
// Description : The base class for primitives such as triangle strips
//               and triangle fans, which include several component
//               triangles, each of which might have its own color
//               and/or normal.
////////////////////////////////////////////////////////////////////

1750 7 EggData 141313 7 EggData 7 EggData 0 0 0 1 1475 1495 0 19 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 0 1 0 1706 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

1751 8 EggCurve 141313 8 EggCurve 8 EggCurve 0 0 0 0 1503 0 7 1496 1497 1498 1499 1500 1501 1502 0 1 0 1747 0 0 0 1 1752 250
////////////////////////////////////////////////////////////////////
//       Class : EggCurve
// Description : A parametric curve of some kind.  See
//               EggNurbsCurve.
////////////////////////////////////////////////////////////////////

1752 9 CurveType 794624 19 EggCurve::CurveType 19 EggCurve::CurveType 1751 0 0 0 0 0 0 0 0 4 7 CT_none 17 EggCurve::CT_none 0 6 CT_xyz 16 EggCurve::CT_xyz 1 6 CT_hpr 16 EggCurve::CT_hpr 2 4 CT_t 14 EggCurve::CT_t 3 0 0

1753 20 EggExternalReference 141313 20 EggExternalReference 20 EggExternalReference 0 0 0 1 1504 1507 0 2 1505 1506 0 1 0 1730 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : EggExternalReference
// Description : Defines a reference to another egg file which should
//               be inserted at this point.
////////////////////////////////////////////////////////////////////

1754 17 EggNameUniquifier 75777 17 EggNameUniquifier 17 EggNameUniquifier 0 0 0 0 0 0 9 1508 1509 1510 1511 1512 1513 1514 1515 1516 0 1 0 1698 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : EggNameUniquifier
// Description : This is a handy class for guaranteeing unique node
//               names in an egg hierarchy.  It is an abstract class;
//               to use it you must subclass off of it.  See the
//               comment above.
////////////////////////////////////////////////////////////////////

1755 18 EggGroupUniquifier 141313 18 EggGroupUniquifier 18 EggGroupUniquifier 0 0 0 1 1517 1519 0 1 1518 0 1 0 1754 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : EggGroupUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for EggGroup nodes.  It's not
//               called automatically; you must invoke it yourself if
//               you want it.
////////////////////////////////////////////////////////////////////

1756 7 EggLine 75777 7 EggLine 7 EggLine 0 0 0 1 1520 1420 0 6 1521 1522 1523 1524 1525 1526 0 1 0 1749 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : EggLine
// Description : A line segment, or a series of connected line
//               segments, defined by a <Line> entry.
////////////////////////////////////////////////////////////////////

1757 21 EggMaterialCollection 26625 21 EggMaterialCollection 21 EggMaterialCollection 0 0 0 1 1527 1529 0 13 1528 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 0 0 0 0 477
////////////////////////////////////////////////////////////////////
//       Class : EggMaterialCollection
// Description : This is a collection of materials by MRef name.  It
//               can extract the materials from an egg file and sort
//               them all together; it can also manage the creation of
//               unique materials and the assignment of unique MRef
//               names.
////////////////////////////////////////////////////////////////////

1758 13 EggVertexPool 75777 13 EggVertexPool 13 EggVertexPool 0 0 0 1 1542 932 0 20 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 0 1 0 1701 0 0 0 0 876
////////////////////////////////////////////////////////////////////
//       Class : EggVertexPool
// Description : A collection of vertices.  There may be any number of
//               vertex pools in a single egg structure.  The vertices
//               in a single pool need not necessarily have any
//               connection to each other, but it is necessary that
//               any one primitive (e.g. a polygon) must pull all its
//               vertices from the same pool.
//
//               An EggVertexPool is an STL-style container of
//               pointers to EggVertex's.  Functions add_vertex() and
//               remove_vertex() are provided to manipulate the list.
//               The list may also be operated on (read-only) via
//               iterators and begin()/end().
////////////////////////////////////////////////////////////////////

1759 10 EggPolygon 141313 10 EggPolygon 10 EggPolygon 0 0 0 1 1563 1571 0 7 1564 1565 1566 1567 1568 1569 1570 0 1 0 1747 0 0 0 0 200
////////////////////////////////////////////////////////////////////
//       Class : EggPolygon
// Description : A single polygon.
////////////////////////////////////////////////////////////////////

1760 13 EggNurbsCurve 141313 13 EggNurbsCurve 13 EggNurbsCurve 0 0 0 1 1572 1586 0 13 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 0 1 0 1751 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsCurve
// Description : A parametric NURBS curve.
////////////////////////////////////////////////////////////////////

1761 10 EggSurface 141313 10 EggSurface 10 EggSurface 0 0 0 0 1593 0 6 1587 1588 1589 1590 1591 1592 0 1 0 1747 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : EggSurface
// Description : A parametric surface of some kind.  See
//               EggNurbsSurface.
////////////////////////////////////////////////////////////////////

1762 8 EggPoint 141313 8 EggPoint 8 EggPoint 0 0 0 1 1594 1605 0 10 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 0 1 0 1747 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : EggPoint
// Description : A single point, or a collection of points as defined
//               by a single <PointLight> entry.
////////////////////////////////////////////////////////////////////

1763 15 EggPolysetMaker 141313 15 EggPolysetMaker 15 EggPolysetMaker 0 0 0 1 1606 1609 0 2 1607 1608 0 1 0 1728 0 0 0 2 1764 1765 680
////////////////////////////////////////////////////////////////////
//       Class : EggPolysetMaker
// Description : A specialization on EggBinMaker for making polysets
//               that share the same basic rendering characteristic.
//               This really just defines the example functions
//               described in the leading comment to EggBinMaker.
//
//               It makes some common assumptions about how polysets
//               should be grouped; if these are not sufficient, you
//               can always rederive your own further specialization
//               of this class.
////////////////////////////////////////////////////////////////////

1764 9 BinNumber 794624 26 EggPolysetMaker::BinNumber 26 EggPolysetMaker::BinNumber 1763 0 0 0 0 0 0 0 0 2 7 BN_none 24 EggPolysetMaker::BN_none 0 10 BN_polyset 27 EggPolysetMaker::BN_polyset 1 0 75
// The BinNumber serves to identify why a particular EggBin was
// created.

1765 10 Properties 794624 27 EggPolysetMaker::Properties 27 EggPolysetMaker::Properties 1763 0 0 0 0 0 0 0 0 10 13 P_has_texture 30 EggPolysetMaker::P_has_texture 1 9 P_texture 26 EggPolysetMaker::P_texture 2 14 P_has_material 31 EggPolysetMaker::P_has_material 4 10 P_material 27 EggPolysetMaker::P_material 8 16 P_has_poly_color 33 EggPolysetMaker::P_has_poly_color 16 12 P_poly_color 29 EggPolysetMaker::P_poly_color 32 17 P_has_poly_normal 34 EggPolysetMaker::P_has_poly_normal 64 19 P_has_vertex_normal 36 EggPolysetMaker::P_has_vertex_normal 128 18 P_has_vertex_color 35 EggPolysetMaker::P_has_vertex_color 256 7 P_bface 24 EggPolysetMaker::P_bface 512 0 0

1766 17 EggPoolUniquifier 141313 17 EggPoolUniquifier 17 EggPoolUniquifier 0 0 0 1 1610 1612 0 1 1611 0 1 0 1754 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : EggPoolUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for textures, materials, and
//               vertex pools prior to writing out an egg file.  It's
//               automatically called by EggData prior to writing out
//               an egg file.
////////////////////////////////////////////////////////////////////

1767 12 EggSAnimData 141313 12 EggSAnimData 12 EggSAnimData 0 0 0 1 1613 1620 0 6 1614 1615 1616 1617 1618 1619 0 1 0 1702 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : EggSAnimData
// Description : Corresponding to an <S$Anim> entry, this stores a
//               single column of numbers, for instance for a morph
//               target, or as one column in an EggXfmSAnim.
////////////////////////////////////////////////////////////////////

1768 8 EggTable 141313 8 EggTable 8 EggTable 0 0 0 1 1621 1628 0 6 1622 1623 1624 1625 1626 1627 0 1 0 1706 0 0 0 1 1769 540
////////////////////////////////////////////////////////////////////
//       Class : EggTable
// Description : This corresponds to a <Table> or a <Bundle> entry.
//               As such, it doesn't actually contain a table of
//               numbers, but it may be a parent to an EggSAnimData or
//               an EggXfmAnimData, which do.  It may also be a parent
//               to another <Table> or <Bundle>, establishing a
//               hierarchy of tables.
////////////////////////////////////////////////////////////////////

1769 9 TableType 794624 19 EggTable::TableType 19 EggTable::TableType 1768 0 0 0 0 0 0 0 0 3 10 TT_invalid 20 EggTable::TT_invalid 0 8 TT_table 18 EggTable::TT_table 1 9 TT_bundle 19 EggTable::TT_bundle 2 0 0

1770 20 EggTextureCollection 26625 20 EggTextureCollection 20 EggTextureCollection 0 0 0 1 1629 1631 0 18 1630 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 0 0 0 0 473
////////////////////////////////////////////////////////////////////
//       Class : EggTextureCollection
// Description : This is a collection of textures by TRef name.  It
//               can extract the textures from an egg file and sort
//               them all together; it can also manage the creation of
//               unique textures and the assignment of unique TRef
//               names.
////////////////////////////////////////////////////////////////////

1771 14 EggTriangleFan 75777 14 EggTriangleFan 14 EggTriangleFan 0 0 0 1 1649 1420 0 2 1650 1651 0 1 0 1749 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleFan
// Description : A connected fan of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

1772 16 EggTriangleStrip 75777 16 EggTriangleStrip 16 EggTriangleStrip 0 0 0 1 1652 1420 0 2 1653 1654 0 1 0 1749 0 0 0 0 351
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleStrip
// Description : A connected strip of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

1773 11 EggXfmSAnim 141313 11 EggXfmSAnim 11 EggXfmSAnim 0 0 0 1 1655 1678 0 22 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 0 1 0 1706 0 0 0 0 484
////////////////////////////////////////////////////////////////////
//       Class : EggXfmSAnim
// Description : This corresponds to an <Xfm$Anim_S$> entry, which is
//               a collection of up to nine <S$Anim> entries that
//               specify the nine components of a transformation.
//               It's implemented as a group that can contain
//               any number of EggSAnimData children.
////////////////////////////////////////////////////////////////////

1774 14 EggXfmAnimData 141313 14 EggXfmAnimData 14 EggXfmAnimData 0 0 0 1 1679 1695 0 15 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 0 1 0 1702 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : EggXfmAnimData
// Description : Corresponding to an <Xfm$Anim> entry, this stores a
//               two-dimensional table with up to nine columns, one
//               for each component of a transformation.  This is an
//               older syntax of egg anim table, not often used
//               currently--it's replaced by EggXfmSAnim.
////////////////////////////////////////////////////////////////////

1775 13 EggUserData * 8576 13 EggUserData * 13 EggUserData * 0 0 1696 0 0 0 0 0 0 0 0 0

1776 19 EggUserData const * 8576 19 EggUserData const * 19 EggUserData const * 0 0 1777 0 0 0 0 0 0 0 0 0

1777 17 EggUserData const 8832 17 EggUserData const 17 EggUserData const 0 0 1696 0 0 0 0 0 0 0 0 0

1778 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1779 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1778 0 0 0 0 0 0 0 0 0

1780 11 EggObject * 8576 11 EggObject * 11 EggObject * 0 0 1698 0 0 0 0 0 0 0 0 0

1781 17 EggObject const * 8576 17 EggObject const * 17 EggObject const * 0 0 1782 0 0 0 0 0 0 0 0 0

1782 15 EggObject const 8832 15 EggObject const 15 EggObject const 0 0 1698 0 0 0 0 0 0 0 0 0

1783 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0

1784 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0

1785 22 EggNamedObject const * 8576 22 EggNamedObject const * 22 EggNamedObject const * 0 0 1786 0 0 0 0 0 0 0 0 0

1786 20 EggNamedObject const 8832 20 EggNamedObject const 20 EggNamedObject const 0 0 1699 0 0 0 0 0 0 0 0 0

1787 16 EggNamedObject * 8576 16 EggNamedObject * 16 EggNamedObject * 0 0 1699 0 0 0 0 0 0 0 0 0

1788 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0

1789 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1790 0 0 0 0 0 0 0 0 0

1790 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0

1791 9 Namable * 8576 9 Namable * 9 Namable * 0 0 1700 0 0 0 0 0 0 0 0 0

1792 9 EggNode * 8576 9 EggNode * 9 EggNode * 0 0 1701 0 0 0 0 0 0 0 0 0

1793 15 EggNode const * 8576 15 EggNode const * 15 EggNode const * 0 0 1794 0 0 0 0 0 0 0 0 0

1794 13 EggNode const 8832 13 EggNode const 13 EggNode const 0 0 1701 0 0 0 0 0 0 0 0 0

1795 14 EggGroupNode * 8576 14 EggGroupNode * 14 EggGroupNode * 0 0 1706 0 0 0 0 0 0 0 0 0

1796 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0

1797 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1798 0 0 0 0 0 0 0 0 0

1798 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1799 0 0 0 0 0 0 0 0 0

1799 9 LMatrix4d 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 891
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1800 32 vector< basic_string< char > > * 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 1801 0 0 0 0 0 0 0 0 0

1801 30 vector< basic_string< char > > 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0

1802 15 EggRenderMode * 8576 15 EggRenderMode * 15 EggRenderMode * 0 0 1708 0 0 0 0 0 0 0 0 0

1803 13 EggAnimData * 8576 13 EggAnimData * 13 EggAnimData * 0 0 1702 0 0 0 0 0 0 0 0 0

1804 19 EggAnimData const * 8576 19 EggAnimData const * 19 EggAnimData const * 0 0 1805 0 0 0 0 0 0 0 0 0

1805 17 EggAnimData const 8832 17 EggAnimData const 17 EggAnimData const 0 0 1702 0 0 0 0 0 0 0 0 0

1806 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0

1807 15 EggAttributes * 8576 15 EggAttributes * 15 EggAttributes * 0 0 1703 0 0 0 0 0 0 0 0 0

1808 21 EggAttributes const * 8576 21 EggAttributes const * 21 EggAttributes const * 0 0 1809 0 0 0 0 0 0 0 0 0

1809 19 EggAttributes const 8832 19 EggAttributes const 19 EggAttributes const 0 0 1703 0 0 0 0 0 0 0 0 0

1810 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 1811 0 0 0 0 0 0 0 0 0

1811 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 1812 0 0 0 0 0 0 0 0 0

1812 7 Normald 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 1274
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1813 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1814 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1813 0 0 0 0 0 0 0 0 0

1815 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1816 0 0 0 0 0 0 0 0 0

1816 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1813 0 0 0 0 0 0 0 0 0

1817 45 EggMorphList< EggMorph< LVector3d > > const * 8576 45 EggMorphList< EggMorph< LVector3d > > const * 45 EggMorphList< EggMorph< LVector3d > > const * 0 0 1818 0 0 0 0 0 0 0 0 0

1818 43 EggMorphList< EggMorph< LVector3d > > const 8832 43 EggMorphList< EggMorph< LVector3d > > const 43 EggMorphList< EggMorph< LVector3d > > const 0 0 1704 0 0 0 0 0 0 0 0 0

1819 45 EggMorphList< EggMorph< LVector4f > > const * 8576 45 EggMorphList< EggMorph< LVector4f > > const * 45 EggMorphList< EggMorph< LVector4f > > const * 0 0 1820 0 0 0 0 0 0 0 0 0

1820 43 EggMorphList< EggMorph< LVector4f > > const 8832 43 EggMorphList< EggMorph< LVector4f > > const 43 EggMorphList< EggMorph< LVector4f > > const 0 0 1705 0 0 0 0 0 0 0 0 0

1821 20 EggGroupNode const * 8576 20 EggGroupNode const * 20 EggGroupNode const * 0 0 1822 0 0 0 0 0 0 0 0 0

1822 18 EggGroupNode const 8832 18 EggGroupNode const 18 EggGroupNode const 0 0 1706 0 0 0 0 0 0 0 0 0

1823 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0

1824 19 DSearchPath const * 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1825 0 0 0 0 0 0 0 0 0

1825 17 DSearchPath const 8832 17 DSearchPath const 17 DSearchPath const 0 0 1826 0 0 0 0 0 0 0 0 0

1826 11 DSearchPath 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

1827 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 1828 0 0 0 0 0 0 0 0 0

1828 14 Filename const 8832 14 Filename const 14 Filename const 0 0 1829 0 0 0 0 0 0 0 0 0

1829 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1830 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1831 19 GlobPattern const * 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 1832 0 0 0 0 0 0 0 0 0

1832 17 GlobPattern const 8832 17 GlobPattern const 17 GlobPattern const 0 0 1833 0 0 0 0 0 0 0 0 0

1833 11 GlobPattern 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

1834 15 EggVertexPool * 8576 15 EggVertexPool * 15 EggVertexPool * 0 0 1758 0 0 0 0 0 0 0 0 0

1835 21 EggRenderMode const * 8576 21 EggRenderMode const * 21 EggRenderMode const * 0 0 1836 0 0 0 0 0 0 0 0 0

1836 19 EggRenderMode const 8832 19 EggRenderMode const 19 EggRenderMode const 0 0 1708 0 0 0 0 0 0 0 0 0

1837 14 EggTransform * 8576 14 EggTransform * 14 EggTransform * 0 0 1713 0 0 0 0 0 0 0 0 0

1838 20 EggTransform const * 8576 20 EggTransform const * 20 EggTransform const * 0 0 1839 0 0 0 0 0 0 0 0 0

1839 18 EggTransform const 8832 18 EggTransform const 18 EggTransform const 0 0 1713 0 0 0 0 0 0 0 0 0

1840 17 LVector2d const * 8576 17 LVector2d const * 17 LVector2d const * 0 0 1841 0 0 0 0 0 0 0 0 0

1841 15 LVector2d const 8832 15 LVector2d const 15 LVector2d const 0 0 1842 0 0 0 0 0 0 0 0 0

1842 9 LVector2d 2048 9 LVector2d 9 LVector2d 0 0 0 0 0 0 0 0 0 0 0 895
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

1843 20 LQuaterniond const * 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 1844 0 0 0 0 0 0 0 0 0

1844 18 LQuaterniond const 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 1845 0 0 0 0 0 0 0 0 0

1845 12 LQuaterniond 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 907
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1846 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1847 0 0 0 0 0 0 0 0 0

1847 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1848 0 0 0 0 0 0 0 0 0

1848 10 LVecBase2d 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 993
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1849 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1850 0 0 0 0 0 0 0 0 0

1850 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1851 0 0 0 0 0 0 0 0 0

1851 9 RGBColord 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 942
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1852 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1853 0 0 0 0 0 0 0 0 0

1853 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1854 0 0 0 0 0 0 0 0 0

1854 9 LMatrix3d 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 1138
// Filename: lmatrix3_src.h
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1855 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1854 0 0 0 0 0 0 0 0 0

1856 19 EggVertexUV const * 8576 19 EggVertexUV const * 19 EggVertexUV const * 0 0 1857 0 0 0 0 0 0 0 0 0

1857 17 EggVertexUV const 8832 17 EggVertexUV const 17 EggVertexUV const 0 0 1715 0 0 0 0 0 0 0 0 0

1858 13 EggVertexUV * 8576 13 EggVertexUV * 13 EggVertexUV * 0 0 1715 0 0 0 0 0 0 0 0 0

1859 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1860 0 0 0 0 0 0 0 0 0

1860 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 1861 0 0 0 0 0 0 0 0 0

1861 9 TexCoordd 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 894
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1862 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1863 0 0 0 0 0 0 0 0 0

1863 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 1864 0 0 0 0 0 0 0 0 0

1864 7 Vertexd 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 1271
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1865 10 LPoint2d * 8576 10 LPoint2d * 10 LPoint2d * 0 0 1861 0 0 0 0 0 0 0 0 0

1866 11 EggVertex * 8576 11 EggVertex * 11 EggVertex * 0 0 1716 0 0 0 0 0 0 0 0 0

1867 17 EggVertex const * 8576 17 EggVertex const * 17 EggVertex const * 0 0 1868 0 0 0 0 0 0 0 0 0

1868 15 EggVertex const 8832 15 EggVertex const 15 EggVertex const 0 0 1716 0 0 0 0 0 0 0 0 0

1869 16 LPoint4d const * 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 1870 0 0 0 0 0 0 0 0 0

1870 14 LPoint4d const 8832 14 LPoint4d const 14 LPoint4d const 0 0 1871 0 0 0 0 0 0 0 0 0

1871 8 LPoint4d 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 895
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

1872 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 1864 0 0 0 0 0 0 0 0 0

1873 10 LPoint4d * 8576 10 LPoint4d * 10 LPoint4d * 0 0 1871 0 0 0 0 0 0 0 0 0

1874 16 EggGroup const * 8576 16 EggGroup const * 16 EggGroup const * 0 0 1875 0 0 0 0 0 0 0 0 0

1875 14 EggGroup const 8832 14 EggGroup const 14 EggGroup const 0 0 1718 0 0 0 0 0 0 0 0 0

1876 20 EggPrimitive const * 8576 20 EggPrimitive const * 20 EggPrimitive const * 0 0 1877 0 0 0 0 0 0 0 0 0

1877 18 EggPrimitive const 8832 18 EggPrimitive const 18 EggPrimitive const 0 0 1747 0 0 0 0 0 0 0 0 0

1878 26 EggSwitchCondition const * 8576 26 EggSwitchCondition const * 26 EggSwitchCondition const * 0 0 1879 0 0 0 0 0 0 0 0 0

1879 24 EggSwitchCondition const 8832 24 EggSwitchCondition const 24 EggSwitchCondition const 0 0 1717 0 0 0 0 0 0 0 0 0

1880 20 EggSwitchCondition * 8576 20 EggSwitchCondition * 20 EggSwitchCondition * 0 0 1717 0 0 0 0 0 0 0 0 0

1881 10 EggGroup * 8576 10 EggGroup * 10 EggGroup * 0 0 1718 0 0 0 0 0 0 0 0 0

1882 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1883 0 0 0 0 0 0 0 0 0

1883 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0

1884 14 EggBin const * 8576 14 EggBin const * 14 EggBin const * 0 0 1885 0 0 0 0 0 0 0 0 0

1885 12 EggBin const 8832 12 EggBin const 12 EggBin const 0 0 1727 0 0 0 0 0 0 0 0 0

1886 8 EggBin * 8576 8 EggBin * 8 EggBin * 0 0 1727 0 0 0 0 0 0 0 0 0

1887 13 EggBinMaker * 8576 13 EggBinMaker * 13 EggBinMaker * 0 0 1728 0 0 0 0 0 0 0 0 0

1888 18 EggComment const * 8576 18 EggComment const * 18 EggComment const * 0 0 1889 0 0 0 0 0 0 0 0 0

1889 16 EggComment const 8832 16 EggComment const 16 EggComment const 0 0 1729 0 0 0 0 0 0 0 0 0

1890 12 EggComment * 8576 12 EggComment * 12 EggComment * 0 0 1729 0 0 0 0 0 0 0 0 0

1891 17 EggFilenameNode * 8576 17 EggFilenameNode * 17 EggFilenameNode * 0 0 1730 0 0 0 0 0 0 0 0 0

1892 23 EggFilenameNode const * 8576 23 EggFilenameNode const * 23 EggFilenameNode const * 0 0 1893 0 0 0 0 0 0 0 0 0

1893 21 EggFilenameNode const 8832 21 EggFilenameNode const 21 EggFilenameNode const 0 0 1730 0 0 0 0 0 0 0 0 0

1894 18 EggTexture const * 8576 18 EggTexture const * 18 EggTexture const * 0 0 1895 0 0 0 0 0 0 0 0 0

1895 16 EggTexture const 8832 16 EggTexture const 16 EggTexture const 0 0 1731 0 0 0 0 0 0 0 0 0

1896 12 EggTexture * 8576 12 EggTexture * 12 EggTexture * 0 0 1731 0 0 0 0 0 0 0 0 0

1897 19 EggMaterial const * 8576 19 EggMaterial const * 19 EggMaterial const * 0 0 1898 0 0 0 0 0 0 0 0 0

1898 17 EggMaterial const 8832 17 EggMaterial const 17 EggMaterial const 0 0 1745 0 0 0 0 0 0 0 0 0

1899 13 EggMaterial * 8576 13 EggMaterial * 13 EggMaterial * 0 0 1745 0 0 0 0 0 0 0 0 0

1900 14 EggPrimitive * 8576 14 EggPrimitive * 14 EggPrimitive * 0 0 1747 0 0 0 0 0 0 0 0 0

1901 23 EggCompositePrimitive * 8576 23 EggCompositePrimitive * 23 EggCompositePrimitive * 0 0 1749 0 0 0 0 0 0 0 0 0

1902 29 EggCompositePrimitive const * 8576 29 EggCompositePrimitive const * 29 EggCompositePrimitive const * 0 0 1903 0 0 0 0 0 0 0 0 0

1903 27 EggCompositePrimitive const 8832 27 EggCompositePrimitive const 27 EggCompositePrimitive const 0 0 1749 0 0 0 0 0 0 0 0 0

1904 9 EggData * 8576 9 EggData * 9 EggData * 0 0 1750 0 0 0 0 0 0 0 0 0

1905 15 EggData const * 8576 15 EggData const * 15 EggData const * 0 0 1906 0 0 0 0 0 0 0 0 0

1906 13 EggData const 8832 13 EggData const 13 EggData const 0 0 1750 0 0 0 0 0 0 0 0 0

1907 10 Filename * 8576 10 Filename * 10 Filename * 0 0 1829 0 0 0 0 0 0 0 0 0

1908 9 istream * 8576 9 istream * 9 istream * 0 0 1909 0 0 0 0 0 0 0 0 0

1909 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0

1910 10 EggCurve * 8576 10 EggCurve * 10 EggCurve * 0 0 1751 0 0 0 0 0 0 0 0 0

1911 16 EggCurve const * 8576 16 EggCurve const * 16 EggCurve const * 0 0 1912 0 0 0 0 0 0 0 0 0

1912 14 EggCurve const 8832 14 EggCurve const 14 EggCurve const 0 0 1751 0 0 0 0 0 0 0 0 0

1913 28 EggExternalReference const * 8576 28 EggExternalReference const * 28 EggExternalReference const * 0 0 1914 0 0 0 0 0 0 0 0 0

1914 26 EggExternalReference const 8832 26 EggExternalReference const 26 EggExternalReference const 0 0 1753 0 0 0 0 0 0 0 0 0

1915 22 EggExternalReference * 8576 22 EggExternalReference * 22 EggExternalReference * 0 0 1753 0 0 0 0 0 0 0 0 0

1916 19 EggNameUniquifier * 8576 19 EggNameUniquifier * 19 EggNameUniquifier * 0 0 1754 0 0 0 0 0 0 0 0 0

1917 25 EggNameUniquifier const * 8576 25 EggNameUniquifier const * 25 EggNameUniquifier const * 0 0 1918 0 0 0 0 0 0 0 0 0

1918 23 EggNameUniquifier const 8832 23 EggNameUniquifier const 23 EggNameUniquifier const 0 0 1754 0 0 0 0 0 0 0 0 0

1919 20 EggGroupUniquifier * 8576 20 EggGroupUniquifier * 20 EggGroupUniquifier * 0 0 1755 0 0 0 0 0 0 0 0 0

1920 15 EggLine const * 8576 15 EggLine const * 15 EggLine const * 0 0 1921 0 0 0 0 0 0 0 0 0

1921 13 EggLine const 8832 13 EggLine const 13 EggLine const 0 0 1756 0 0 0 0 0 0 0 0 0

1922 9 EggLine * 8576 9 EggLine * 9 EggLine * 0 0 1756 0 0 0 0 0 0 0 0 0

1923 23 EggMaterialCollection * 8576 23 EggMaterialCollection * 23 EggMaterialCollection * 0 0 1757 0 0 0 0 0 0 0 0 0

1924 29 EggMaterialCollection const * 8576 29 EggMaterialCollection const * 29 EggMaterialCollection const * 0 0 1925 0 0 0 0 0 0 0 0 0

1925 27 EggMaterialCollection const 8832 27 EggMaterialCollection const 27 EggMaterialCollection const 0 0 1757 0 0 0 0 0 0 0 0 0

1926 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 8576 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 0 1927 0 0 0 0 0 0 0 0 0

1927 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 2048 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 0 0 0 0 0 0 0 0 0 0 0

1928 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 8576 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 0 1929 0 0 0 0 0 0 0 0 0

1929 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 8832 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 0 1927 0 0 0 0 0 0 0 0 0

1930 21 EggVertexPool const * 8576 21 EggVertexPool const * 21 EggVertexPool const * 0 0 1931 0 0 0 0 0 0 0 0 0

1931 19 EggVertexPool const 8832 19 EggVertexPool const 19 EggVertexPool const 0 0 1758 0 0 0 0 0 0 0 0 0

1932 18 EggPolygon const * 8576 18 EggPolygon const * 18 EggPolygon const * 0 0 1933 0 0 0 0 0 0 0 0 0

1933 16 EggPolygon const 8832 16 EggPolygon const 16 EggPolygon const 0 0 1759 0 0 0 0 0 0 0 0 0

1934 12 EggPolygon * 8576 12 EggPolygon * 12 EggPolygon * 0 0 1759 0 0 0 0 0 0 0 0 0

1935 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 1812 0 0 0 0 0 0 0 0 0

1936 21 EggNurbsCurve const * 8576 21 EggNurbsCurve const * 21 EggNurbsCurve const * 0 0 1937 0 0 0 0 0 0 0 0 0

1937 19 EggNurbsCurve const 8832 19 EggNurbsCurve const 19 EggNurbsCurve const 0 0 1760 0 0 0 0 0 0 0 0 0

1938 15 EggNurbsCurve * 8576 15 EggNurbsCurve * 15 EggNurbsCurve * 0 0 1760 0 0 0 0 0 0 0 0 0

1939 12 EggSurface * 8576 12 EggSurface * 12 EggSurface * 0 0 1761 0 0 0 0 0 0 0 0 0

1940 18 EggSurface const * 8576 18 EggSurface const * 18 EggSurface const * 0 0 1941 0 0 0 0 0 0 0 0 0

1941 16 EggSurface const 8832 16 EggSurface const 16 EggSurface const 0 0 1761 0 0 0 0 0 0 0 0 0

1942 16 EggPoint const * 8576 16 EggPoint const * 16 EggPoint const * 0 0 1943 0 0 0 0 0 0 0 0 0

1943 14 EggPoint const 8832 14 EggPoint const 14 EggPoint const 0 0 1762 0 0 0 0 0 0 0 0 0

1944 10 EggPoint * 8576 10 EggPoint * 10 EggPoint * 0 0 1762 0 0 0 0 0 0 0 0 0

1945 17 EggPolysetMaker * 8576 17 EggPolysetMaker * 17 EggPolysetMaker * 0 0 1763 0 0 0 0 0 0 0 0 0

1946 19 EggPoolUniquifier * 8576 19 EggPoolUniquifier * 19 EggPoolUniquifier * 0 0 1766 0 0 0 0 0 0 0 0 0

1947 20 EggSAnimData const * 8576 20 EggSAnimData const * 20 EggSAnimData const * 0 0 1948 0 0 0 0 0 0 0 0 0

1948 18 EggSAnimData const 8832 18 EggSAnimData const 18 EggSAnimData const 0 0 1767 0 0 0 0 0 0 0 0 0

1949 14 EggSAnimData * 8576 14 EggSAnimData * 14 EggSAnimData * 0 0 1767 0 0 0 0 0 0 0 0 0

1950 16 EggTable const * 8576 16 EggTable const * 16 EggTable const * 0 0 1951 0 0 0 0 0 0 0 0 0

1951 14 EggTable const 8832 14 EggTable const 14 EggTable const 0 0 1768 0 0 0 0 0 0 0 0 0

1952 10 EggTable * 8576 10 EggTable * 10 EggTable * 0 0 1768 0 0 0 0 0 0 0 0 0

1953 22 EggTextureCollection * 8576 22 EggTextureCollection * 22 EggTextureCollection * 0 0 1770 0 0 0 0 0 0 0 0 0

1954 28 EggTextureCollection const * 8576 28 EggTextureCollection const * 28 EggTextureCollection const * 0 0 1955 0 0 0 0 0 0 0 0 0

1955 26 EggTextureCollection const 8832 26 EggTextureCollection const 26 EggTextureCollection const 0 0 1770 0 0 0 0 0 0 0 0 0

1956 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 8576 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 0 1957 0 0 0 0 0 0 0 0 0

1957 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 2048 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 0 0 0 0 0 0 0 0 0 0 0

1958 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 8576 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 0 1959 0 0 0 0 0 0 0 0 0

1959 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 8832 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 0 1957 0 0 0 0 0 0 0 0 0

1960 22 EggTriangleFan const * 8576 22 EggTriangleFan const * 22 EggTriangleFan const * 0 0 1961 0 0 0 0 0 0 0 0 0

1961 20 EggTriangleFan const 8832 20 EggTriangleFan const 20 EggTriangleFan const 0 0 1771 0 0 0 0 0 0 0 0 0

1962 16 EggTriangleFan * 8576 16 EggTriangleFan * 16 EggTriangleFan * 0 0 1771 0 0 0 0 0 0 0 0 0

1963 24 EggTriangleStrip const * 8576 24 EggTriangleStrip const * 24 EggTriangleStrip const * 0 0 1964 0 0 0 0 0 0 0 0 0

1964 22 EggTriangleStrip const 8832 22 EggTriangleStrip const 22 EggTriangleStrip const 0 0 1772 0 0 0 0 0 0 0 0 0

1965 18 EggTriangleStrip * 8576 18 EggTriangleStrip * 18 EggTriangleStrip * 0 0 1772 0 0 0 0 0 0 0 0 0

1966 22 EggXfmAnimData const * 8576 22 EggXfmAnimData const * 22 EggXfmAnimData const * 0 0 1967 0 0 0 0 0 0 0 0 0

1967 20 EggXfmAnimData const 8832 20 EggXfmAnimData const 20 EggXfmAnimData const 0 0 1774 0 0 0 0 0 0 0 0 0

1968 13 EggXfmSAnim * 8576 13 EggXfmSAnim * 13 EggXfmSAnim * 0 0 1773 0 0 0 0 0 0 0 0 0

1969 19 EggXfmSAnim const * 8576 19 EggXfmSAnim const * 19 EggXfmSAnim const * 0 0 1970 0 0 0 0 0 0 0 0 0

1970 17 EggXfmSAnim const 8832 17 EggXfmSAnim const 17 EggXfmSAnim const 0 0 1773 0 0 0 0 0 0 0 0 0

1971 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1799 0 0 0 0 0 0 0 0 0

1972 16 EggXfmAnimData * 8576 16 EggXfmAnimData * 16 EggXfmAnimData * 0 0 1774 0 0 0 0 0 0 0 0 0

1973 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0

0
4
1974 9 _dnormals 2 1704 963 0 24 EggAttributes::_dnormals 
1975 7 _drgbas 2 1705 964 0 22 EggAttributes::_drgbas 
1976 5 _duvs 2 1704 1078 0 18 EggVertexUV::_duvs 
1977 6 _dxyzs 2 1704 1121 0 17 EggVertex::_dxyzs 
